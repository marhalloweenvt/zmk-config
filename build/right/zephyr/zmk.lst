
zmk.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00026000 <_vector_table>:
   26000:	50 65 00 20 39 a7 02 00 79 40 04 00 0d a7 02 00     Pe. 9...y@......
   26010:	0d a7 02 00 0d a7 02 00 0d a7 02 00 00 00 00 00     ................
	...
   2602c:	71 a4 02 00 0d a7 02 00 00 00 00 00 29 a4 02 00     q...........)...
   2603c:	0d a7 02 00                                         ....

00026040 <_irq_vector_table>:
   26040:	ed a4 02 00 85 95 03 00 ed a4 02 00 ed a4 02 00     ................
   26050:	ed a4 02 00 ed a4 02 00 ed a4 02 00 ed a4 02 00     ................
   26060:	ed a4 02 00 ed a4 02 00 ed a4 02 00 ed a4 02 00     ................
   26070:	ed a4 02 00 ed a4 02 00 ed a4 02 00 ed a4 02 00     ................
   26080:	ed a4 02 00 ed a4 02 00 ed a4 02 00 ed a4 02 00     ................
   26090:	ed a4 02 00 ed a4 02 00 ed a4 02 00 ed a4 02 00     ................
   260a0:	ed a4 02 00 ed a4 02 00 ed a4 02 00 ed a4 02 00     ................
   260b0:	ed a4 02 00 ed a4 02 00 ed a4 02 00 ed a4 02 00     ................
   260c0:	ed a4 02 00 ed a4 02 00 ed a4 02 00 ed a4 02 00     ................
   260d0:	ed a4 02 00 ed a4 02 00 ed a4 02 00 ed a4 02 00     ................
   260e0:	ed a4 02 00 ed a4 02 00 ed a4 02 00 ed a4 02 00     ................
   260f0:	ed a4 02 00 ed a4 02 00 ed a4 02 00 ed a4 02 00     ................

Disassembly of section text:

00026100 <__aeabi_uldivmod>:
   26100:	b953      	cbnz	r3, 26118 <__aeabi_uldivmod+0x18>
   26102:	b94a      	cbnz	r2, 26118 <__aeabi_uldivmod+0x18>
   26104:	2900      	cmp	r1, #0
   26106:	bf08      	it	eq
   26108:	2800      	cmpeq	r0, #0
   2610a:	bf1c      	itt	ne
   2610c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   26110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   26114:	f000 b80c 	b.w	26130 <__aeabi_idiv0>
   26118:	f1ad 0c08 	sub.w	ip, sp, #8
   2611c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   26120:	f000 f808 	bl	26134 <__udivmoddi4>
   26124:	f8dd e004 	ldr.w	lr, [sp, #4]
   26128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2612c:	b004      	add	sp, #16
   2612e:	4770      	bx	lr

00026130 <__aeabi_idiv0>:
   26130:	4770      	bx	lr
   26132:	bf00      	nop

00026134 <__udivmoddi4>:
   26134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26138:	4686      	mov	lr, r0
   2613a:	468c      	mov	ip, r1
   2613c:	4608      	mov	r0, r1
   2613e:	9e08      	ldr	r6, [sp, #32]
   26140:	4615      	mov	r5, r2
   26142:	4674      	mov	r4, lr
   26144:	4619      	mov	r1, r3
   26146:	2b00      	cmp	r3, #0
   26148:	f040 80c2 	bne.w	262d0 <__udivmoddi4+0x19c>
   2614c:	4285      	cmp	r5, r0
   2614e:	fab2 f282 	clz	r2, r2
   26152:	d945      	bls.n	261e0 <__udivmoddi4+0xac>
   26154:	b14a      	cbz	r2, 2616a <__udivmoddi4+0x36>
   26156:	f1c2 0320 	rsb	r3, r2, #32
   2615a:	fa00 fc02 	lsl.w	ip, r0, r2
   2615e:	fa2e f303 	lsr.w	r3, lr, r3
   26162:	4095      	lsls	r5, r2
   26164:	ea43 0c0c 	orr.w	ip, r3, ip
   26168:	4094      	lsls	r4, r2
   2616a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   2616e:	b2a8      	uxth	r0, r5
   26170:	fbbc f8fe 	udiv	r8, ip, lr
   26174:	0c23      	lsrs	r3, r4, #16
   26176:	fb0e cc18 	mls	ip, lr, r8, ip
   2617a:	fb08 f900 	mul.w	r9, r8, r0
   2617e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   26182:	4599      	cmp	r9, r3
   26184:	d928      	bls.n	261d8 <__udivmoddi4+0xa4>
   26186:	18eb      	adds	r3, r5, r3
   26188:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
   2618c:	d204      	bcs.n	26198 <__udivmoddi4+0x64>
   2618e:	4599      	cmp	r9, r3
   26190:	d902      	bls.n	26198 <__udivmoddi4+0x64>
   26192:	f1a8 0702 	sub.w	r7, r8, #2
   26196:	442b      	add	r3, r5
   26198:	eba3 0309 	sub.w	r3, r3, r9
   2619c:	b2a4      	uxth	r4, r4
   2619e:	fbb3 fcfe 	udiv	ip, r3, lr
   261a2:	fb0e 331c 	mls	r3, lr, ip, r3
   261a6:	fb0c f000 	mul.w	r0, ip, r0
   261aa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   261ae:	42a0      	cmp	r0, r4
   261b0:	d914      	bls.n	261dc <__udivmoddi4+0xa8>
   261b2:	192c      	adds	r4, r5, r4
   261b4:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
   261b8:	d204      	bcs.n	261c4 <__udivmoddi4+0x90>
   261ba:	42a0      	cmp	r0, r4
   261bc:	d902      	bls.n	261c4 <__udivmoddi4+0x90>
   261be:	f1ac 0302 	sub.w	r3, ip, #2
   261c2:	442c      	add	r4, r5
   261c4:	1a24      	subs	r4, r4, r0
   261c6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
   261ca:	b11e      	cbz	r6, 261d4 <__udivmoddi4+0xa0>
   261cc:	40d4      	lsrs	r4, r2
   261ce:	2300      	movs	r3, #0
   261d0:	6034      	str	r4, [r6, #0]
   261d2:	6073      	str	r3, [r6, #4]
   261d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   261d8:	4647      	mov	r7, r8
   261da:	e7dd      	b.n	26198 <__udivmoddi4+0x64>
   261dc:	4663      	mov	r3, ip
   261de:	e7f1      	b.n	261c4 <__udivmoddi4+0x90>
   261e0:	bb92      	cbnz	r2, 26248 <__udivmoddi4+0x114>
   261e2:	1b43      	subs	r3, r0, r5
   261e4:	2101      	movs	r1, #1
   261e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   261ea:	b2af      	uxth	r7, r5
   261ec:	fbb3 fcfe 	udiv	ip, r3, lr
   261f0:	0c20      	lsrs	r0, r4, #16
   261f2:	fb0e 331c 	mls	r3, lr, ip, r3
   261f6:	fb0c f807 	mul.w	r8, ip, r7
   261fa:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   261fe:	4598      	cmp	r8, r3
   26200:	d962      	bls.n	262c8 <__udivmoddi4+0x194>
   26202:	18eb      	adds	r3, r5, r3
   26204:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   26208:	d204      	bcs.n	26214 <__udivmoddi4+0xe0>
   2620a:	4598      	cmp	r8, r3
   2620c:	d902      	bls.n	26214 <__udivmoddi4+0xe0>
   2620e:	f1ac 0002 	sub.w	r0, ip, #2
   26212:	442b      	add	r3, r5
   26214:	eba3 0308 	sub.w	r3, r3, r8
   26218:	b2a4      	uxth	r4, r4
   2621a:	fbb3 fcfe 	udiv	ip, r3, lr
   2621e:	fb0e 331c 	mls	r3, lr, ip, r3
   26222:	fb0c f707 	mul.w	r7, ip, r7
   26226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   2622a:	42a7      	cmp	r7, r4
   2622c:	d94e      	bls.n	262cc <__udivmoddi4+0x198>
   2622e:	192c      	adds	r4, r5, r4
   26230:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
   26234:	d204      	bcs.n	26240 <__udivmoddi4+0x10c>
   26236:	42a7      	cmp	r7, r4
   26238:	d902      	bls.n	26240 <__udivmoddi4+0x10c>
   2623a:	f1ac 0302 	sub.w	r3, ip, #2
   2623e:	442c      	add	r4, r5
   26240:	1be4      	subs	r4, r4, r7
   26242:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   26246:	e7c0      	b.n	261ca <__udivmoddi4+0x96>
   26248:	f1c2 0320 	rsb	r3, r2, #32
   2624c:	fa20 f103 	lsr.w	r1, r0, r3
   26250:	4095      	lsls	r5, r2
   26252:	4090      	lsls	r0, r2
   26254:	fa2e f303 	lsr.w	r3, lr, r3
   26258:	4303      	orrs	r3, r0
   2625a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   2625e:	b2af      	uxth	r7, r5
   26260:	fbb1 fcfe 	udiv	ip, r1, lr
   26264:	fb0e 101c 	mls	r0, lr, ip, r1
   26268:	0c19      	lsrs	r1, r3, #16
   2626a:	fb0c f807 	mul.w	r8, ip, r7
   2626e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   26272:	4588      	cmp	r8, r1
   26274:	fa04 f402 	lsl.w	r4, r4, r2
   26278:	d922      	bls.n	262c0 <__udivmoddi4+0x18c>
   2627a:	1869      	adds	r1, r5, r1
   2627c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   26280:	d204      	bcs.n	2628c <__udivmoddi4+0x158>
   26282:	4588      	cmp	r8, r1
   26284:	d902      	bls.n	2628c <__udivmoddi4+0x158>
   26286:	f1ac 0002 	sub.w	r0, ip, #2
   2628a:	4429      	add	r1, r5
   2628c:	eba1 0108 	sub.w	r1, r1, r8
   26290:	b29b      	uxth	r3, r3
   26292:	fbb1 fcfe 	udiv	ip, r1, lr
   26296:	fb0e 111c 	mls	r1, lr, ip, r1
   2629a:	fb0c f707 	mul.w	r7, ip, r7
   2629e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   262a2:	429f      	cmp	r7, r3
   262a4:	d90e      	bls.n	262c4 <__udivmoddi4+0x190>
   262a6:	18eb      	adds	r3, r5, r3
   262a8:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   262ac:	d204      	bcs.n	262b8 <__udivmoddi4+0x184>
   262ae:	429f      	cmp	r7, r3
   262b0:	d902      	bls.n	262b8 <__udivmoddi4+0x184>
   262b2:	f1ac 0102 	sub.w	r1, ip, #2
   262b6:	442b      	add	r3, r5
   262b8:	1bdb      	subs	r3, r3, r7
   262ba:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   262be:	e792      	b.n	261e6 <__udivmoddi4+0xb2>
   262c0:	4660      	mov	r0, ip
   262c2:	e7e3      	b.n	2628c <__udivmoddi4+0x158>
   262c4:	4661      	mov	r1, ip
   262c6:	e7f7      	b.n	262b8 <__udivmoddi4+0x184>
   262c8:	4660      	mov	r0, ip
   262ca:	e7a3      	b.n	26214 <__udivmoddi4+0xe0>
   262cc:	4663      	mov	r3, ip
   262ce:	e7b7      	b.n	26240 <__udivmoddi4+0x10c>
   262d0:	4283      	cmp	r3, r0
   262d2:	d906      	bls.n	262e2 <__udivmoddi4+0x1ae>
   262d4:	b916      	cbnz	r6, 262dc <__udivmoddi4+0x1a8>
   262d6:	2100      	movs	r1, #0
   262d8:	4608      	mov	r0, r1
   262da:	e77b      	b.n	261d4 <__udivmoddi4+0xa0>
   262dc:	e9c6 e000 	strd	lr, r0, [r6]
   262e0:	e7f9      	b.n	262d6 <__udivmoddi4+0x1a2>
   262e2:	fab3 f783 	clz	r7, r3
   262e6:	b98f      	cbnz	r7, 2630c <__udivmoddi4+0x1d8>
   262e8:	4283      	cmp	r3, r0
   262ea:	d301      	bcc.n	262f0 <__udivmoddi4+0x1bc>
   262ec:	4572      	cmp	r2, lr
   262ee:	d808      	bhi.n	26302 <__udivmoddi4+0x1ce>
   262f0:	ebbe 0402 	subs.w	r4, lr, r2
   262f4:	eb60 0303 	sbc.w	r3, r0, r3
   262f8:	2001      	movs	r0, #1
   262fa:	469c      	mov	ip, r3
   262fc:	b91e      	cbnz	r6, 26306 <__udivmoddi4+0x1d2>
   262fe:	2100      	movs	r1, #0
   26300:	e768      	b.n	261d4 <__udivmoddi4+0xa0>
   26302:	4638      	mov	r0, r7
   26304:	e7fa      	b.n	262fc <__udivmoddi4+0x1c8>
   26306:	e9c6 4c00 	strd	r4, ip, [r6]
   2630a:	e7f8      	b.n	262fe <__udivmoddi4+0x1ca>
   2630c:	f1c7 0c20 	rsb	ip, r7, #32
   26310:	40bb      	lsls	r3, r7
   26312:	fa22 f40c 	lsr.w	r4, r2, ip
   26316:	431c      	orrs	r4, r3
   26318:	fa2e f10c 	lsr.w	r1, lr, ip
   2631c:	fa20 f30c 	lsr.w	r3, r0, ip
   26320:	40b8      	lsls	r0, r7
   26322:	4301      	orrs	r1, r0
   26324:	ea4f 4914 	mov.w	r9, r4, lsr #16
   26328:	fa0e f507 	lsl.w	r5, lr, r7
   2632c:	fbb3 f8f9 	udiv	r8, r3, r9
   26330:	fa1f fe84 	uxth.w	lr, r4
   26334:	fb09 3018 	mls	r0, r9, r8, r3
   26338:	0c0b      	lsrs	r3, r1, #16
   2633a:	fb08 fa0e 	mul.w	sl, r8, lr
   2633e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   26342:	459a      	cmp	sl, r3
   26344:	fa02 f207 	lsl.w	r2, r2, r7
   26348:	d940      	bls.n	263cc <__udivmoddi4+0x298>
   2634a:	18e3      	adds	r3, r4, r3
   2634c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
   26350:	d204      	bcs.n	2635c <__udivmoddi4+0x228>
   26352:	459a      	cmp	sl, r3
   26354:	d902      	bls.n	2635c <__udivmoddi4+0x228>
   26356:	f1a8 0002 	sub.w	r0, r8, #2
   2635a:	4423      	add	r3, r4
   2635c:	eba3 030a 	sub.w	r3, r3, sl
   26360:	b289      	uxth	r1, r1
   26362:	fbb3 f8f9 	udiv	r8, r3, r9
   26366:	fb09 3318 	mls	r3, r9, r8, r3
   2636a:	fb08 fe0e 	mul.w	lr, r8, lr
   2636e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   26372:	458e      	cmp	lr, r1
   26374:	d92c      	bls.n	263d0 <__udivmoddi4+0x29c>
   26376:	1861      	adds	r1, r4, r1
   26378:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   2637c:	d204      	bcs.n	26388 <__udivmoddi4+0x254>
   2637e:	458e      	cmp	lr, r1
   26380:	d902      	bls.n	26388 <__udivmoddi4+0x254>
   26382:	f1a8 0302 	sub.w	r3, r8, #2
   26386:	4421      	add	r1, r4
   26388:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   2638c:	fba0 9802 	umull	r9, r8, r0, r2
   26390:	eba1 010e 	sub.w	r1, r1, lr
   26394:	4541      	cmp	r1, r8
   26396:	46ce      	mov	lr, r9
   26398:	4643      	mov	r3, r8
   2639a:	d302      	bcc.n	263a2 <__udivmoddi4+0x26e>
   2639c:	d106      	bne.n	263ac <__udivmoddi4+0x278>
   2639e:	454d      	cmp	r5, r9
   263a0:	d204      	bcs.n	263ac <__udivmoddi4+0x278>
   263a2:	ebb9 0e02 	subs.w	lr, r9, r2
   263a6:	eb68 0304 	sbc.w	r3, r8, r4
   263aa:	3801      	subs	r0, #1
   263ac:	2e00      	cmp	r6, #0
   263ae:	d0a6      	beq.n	262fe <__udivmoddi4+0x1ca>
   263b0:	ebb5 020e 	subs.w	r2, r5, lr
   263b4:	eb61 0103 	sbc.w	r1, r1, r3
   263b8:	fa01 fc0c 	lsl.w	ip, r1, ip
   263bc:	fa22 f307 	lsr.w	r3, r2, r7
   263c0:	ea4c 0303 	orr.w	r3, ip, r3
   263c4:	40f9      	lsrs	r1, r7
   263c6:	e9c6 3100 	strd	r3, r1, [r6]
   263ca:	e798      	b.n	262fe <__udivmoddi4+0x1ca>
   263cc:	4640      	mov	r0, r8
   263ce:	e7c5      	b.n	2635c <__udivmoddi4+0x228>
   263d0:	4643      	mov	r3, r8
   263d2:	e7d9      	b.n	26388 <__udivmoddi4+0x254>
   263d4:	0000      	movs	r0, r0
	...

000263d8 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
   263d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   263da:	4dc2      	ldr	r5, [pc, #776]	; (266e4 <bt_init+0x30c>)
   263dc:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   263e0:	6899      	ldr	r1, [r3, #8]
   263e2:	f011 0101 	ands.w	r1, r1, #1
   263e6:	d121      	bne.n	2642c <bt_init+0x54>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   263e8:	aa01      	add	r2, sp, #4
   263ea:	f640 4003 	movw	r0, #3075	; 0xc03
   263ee:	f004 ff77 	bl	2b2e0 <bt_hci_cmd_send_sync>
		if (err) {
   263f2:	4604      	mov	r4, r0
   263f4:	2800      	cmp	r0, #0
   263f6:	d164      	bne.n	264c2 <bt_init+0xea>
		hci_reset_complete(rsp);
   263f8:	9801      	ldr	r0, [sp, #4]
	uint8_t status = buf->data[0];
   263fa:	6883      	ldr	r3, [r0, #8]
	if (status) {
   263fc:	781b      	ldrb	r3, [r3, #0]
   263fe:	b99b      	cbnz	r3, 26428 <bt_init+0x50>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   26400:	f3bf 8f5b 	dmb	ish
   26404:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
   26408:	f3bf 8f5b 	dmb	ish
   2640c:	f105 02cc 	add.w	r2, r5, #204	; 0xcc
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   26410:	f003 0309 	and.w	r3, r3, #9
   26414:	f3bf 8f5b 	dmb	ish
   26418:	e852 1f00 	ldrex	r1, [r2]
   2641c:	e842 3400 	strex	r4, r3, [r2]
   26420:	2c00      	cmp	r4, #0
   26422:	d1f9      	bne.n	26418 <bt_init+0x40>
   26424:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   26428:	f015 ff72 	bl	3c310 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   2642c:	aa01      	add	r2, sp, #4
   2642e:	2100      	movs	r1, #0
   26430:	f241 0003 	movw	r0, #4099	; 0x1003
   26434:	f004 ff54 	bl	2b2e0 <bt_hci_cmd_send_sync>
	if (err) {
   26438:	4604      	mov	r4, r0
   2643a:	2800      	cmp	r0, #0
   2643c:	d141      	bne.n	264c2 <bt_init+0xea>
	read_local_features_complete(rsp);
   2643e:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   26440:	48a9      	ldr	r0, [pc, #676]	; (266e8 <bt_init+0x310>)
   26442:	68b1      	ldr	r1, [r6, #8]
   26444:	2208      	movs	r2, #8
   26446:	3101      	adds	r1, #1
   26448:	f01d ff66 	bl	44318 <memcpy>
	net_buf_unref(rsp);
   2644c:	4630      	mov	r0, r6
   2644e:	f015 ff5f 	bl	3c310 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   26452:	4621      	mov	r1, r4
   26454:	aa01      	add	r2, sp, #4
   26456:	f241 0001 	movw	r0, #4097	; 0x1001
   2645a:	f004 ff41 	bl	2b2e0 <bt_hci_cmd_send_sync>
	if (err) {
   2645e:	4604      	mov	r4, r0
   26460:	bb78      	cbnz	r0, 264c2 <bt_init+0xea>
	read_local_ver_complete(rsp);
   26462:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   26464:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   26466:	785a      	ldrb	r2, [r3, #1]
   26468:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   2646c:	885a      	ldrh	r2, [r3, #2]
   2646e:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   26472:	791a      	ldrb	r2, [r3, #4]
   26474:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   26478:	f8b3 2007 	ldrh.w	r2, [r3, #7]
   2647c:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   26480:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   26484:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   26488:	f015 ff42 	bl	3c310 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   2648c:	4621      	mov	r1, r4
   2648e:	aa01      	add	r2, sp, #4
   26490:	f241 0002 	movw	r0, #4098	; 0x1002
   26494:	f004 ff24 	bl	2b2e0 <bt_hci_cmd_send_sync>
	if (err) {
   26498:	4604      	mov	r4, r0
   2649a:	b990      	cbnz	r0, 264c2 <bt_init+0xea>
	read_supported_commands_complete(rsp);
   2649c:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
   2649e:	4893      	ldr	r0, [pc, #588]	; (266ec <bt_init+0x314>)
   264a0:	68b1      	ldr	r1, [r6, #8]
   264a2:	2240      	movs	r2, #64	; 0x40
   264a4:	3101      	adds	r1, #1
   264a6:	f01d ff37 	bl	44318 <memcpy>
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
   264aa:	4890      	ldr	r0, [pc, #576]	; (266ec <bt_init+0x314>)
   264ac:	f01d ffbb 	bl	44426 <bt_hci_ecc_supported_commands>
	net_buf_unref(rsp);
   264b0:	4630      	mov	r0, r6
   264b2:	f015 ff2d 	bl	3c310 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   264b6:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   264ba:	065a      	lsls	r2, r3, #25
   264bc:	d404      	bmi.n	264c8 <bt_init+0xf0>
		return -ENODEV;
   264be:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
   264c2:	4620      	mov	r0, r4
   264c4:	b002      	add	sp, #8
   264c6:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   264c8:	4621      	mov	r1, r4
   264ca:	aa01      	add	r2, sp, #4
   264cc:	f242 0003 	movw	r0, #8195	; 0x2003
   264d0:	f004 ff06 	bl	2b2e0 <bt_hci_cmd_send_sync>
	if (err) {
   264d4:	4604      	mov	r4, r0
   264d6:	2800      	cmp	r0, #0
   264d8:	d1f3      	bne.n	264c2 <bt_init+0xea>
	read_le_features_complete(rsp);
   264da:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   264dc:	4884      	ldr	r0, [pc, #528]	; (266f0 <bt_init+0x318>)
   264de:	68b1      	ldr	r1, [r6, #8]
   264e0:	2208      	movs	r2, #8
   264e2:	3101      	adds	r1, #1
   264e4:	f01d ff18 	bl	44318 <memcpy>
	net_buf_unref(rsp);
   264e8:	4630      	mov	r0, r6
   264ea:	f015 ff11 	bl	3c310 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   264ee:	4621      	mov	r1, r4
   264f0:	aa01      	add	r2, sp, #4
   264f2:	f242 0002 	movw	r0, #8194	; 0x2002
   264f6:	f004 fef3 	bl	2b2e0 <bt_hci_cmd_send_sync>
		if (err) {
   264fa:	4604      	mov	r4, r0
   264fc:	2800      	cmp	r0, #0
   264fe:	d1e0      	bne.n	264c2 <bt_init+0xea>
		le_read_buffer_size_complete(rsp);
   26500:	9c01      	ldr	r4, [sp, #4]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   26502:	68a3      	ldr	r3, [r4, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   26504:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   26508:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   2650c:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   2650e:	b121      	cbz	r1, 2651a <bt_init+0x142>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   26510:	78da      	ldrb	r2, [r3, #3]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
   26512:	4878      	ldr	r0, [pc, #480]	; (266f4 <bt_init+0x31c>)
   26514:	4611      	mov	r1, r2
   26516:	f021 fdf8 	bl	4810a <z_impl_k_sem_init>
		net_buf_unref(rsp);
   2651a:	4620      	mov	r0, r4
   2651c:	f015 fef8 	bl	3c310 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   26520:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   26524:	f016 0620 	ands.w	r6, r6, #32
   26528:	d118      	bne.n	2655c <bt_init+0x184>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   2652a:	2102      	movs	r1, #2
   2652c:	f640 406d 	movw	r0, #3181	; 0xc6d
   26530:	f004 fe7a 	bl	2b228 <bt_hci_cmd_create>
		if (!buf) {
   26534:	4604      	mov	r4, r0
   26536:	2800      	cmp	r0, #0
   26538:	f000 80cc 	beq.w	266d4 <bt_init+0x2fc>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
   2653c:	2102      	movs	r1, #2
   2653e:	3008      	adds	r0, #8
   26540:	f020 fe45 	bl	471ce <net_buf_simple_add>
		cp_le->le = 0x01;
   26544:	2301      	movs	r3, #1
   26546:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   26548:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   2654a:	4621      	mov	r1, r4
   2654c:	4632      	mov	r2, r6
   2654e:	f640 406d 	movw	r0, #3181	; 0xc6d
   26552:	f004 fec5 	bl	2b2e0 <bt_hci_cmd_send_sync>
		if (err) {
   26556:	4604      	mov	r4, r0
   26558:	2800      	cmp	r0, #0
   2655a:	d1b2      	bne.n	264c2 <bt_init+0xea>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   2655c:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   26560:	071b      	lsls	r3, r3, #28
   26562:	d512      	bpl.n	2658a <bt_init+0x1b2>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   26564:	aa01      	add	r2, sp, #4
   26566:	2100      	movs	r1, #0
   26568:	f242 001c 	movw	r0, #8220	; 0x201c
   2656c:	f004 feb8 	bl	2b2e0 <bt_hci_cmd_send_sync>
		if (err) {
   26570:	4604      	mov	r4, r0
   26572:	2800      	cmp	r0, #0
   26574:	d1a5      	bne.n	264c2 <bt_init+0xea>
		le_read_supp_states_complete(rsp);
   26576:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   26578:	6883      	ldr	r3, [r0, #8]
   2657a:	f8d3 2001 	ldr.w	r2, [r3, #1]
   2657e:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   26582:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   26586:	f015 fec3 	bl	3c310 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   2658a:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   2658e:	069e      	lsls	r6, r3, #26
   26590:	d524      	bpl.n	265dc <bt_init+0x204>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   26592:	f10d 0102 	add.w	r1, sp, #2
   26596:	4668      	mov	r0, sp
   26598:	f01e f9cc 	bl	44934 <hci_le_read_max_data_len>
		if (err) {
   2659c:	4604      	mov	r4, r0
   2659e:	2800      	cmp	r0, #0
   265a0:	d18f      	bne.n	264c2 <bt_init+0xea>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   265a2:	2104      	movs	r1, #4
   265a4:	f242 0024 	movw	r0, #8228	; 0x2024
   265a8:	f004 fe3e 	bl	2b228 <bt_hci_cmd_create>
		if (!buf) {
   265ac:	4606      	mov	r6, r0
   265ae:	2800      	cmp	r0, #0
   265b0:	f000 8090 	beq.w	266d4 <bt_init+0x2fc>
   265b4:	2104      	movs	r1, #4
   265b6:	3008      	adds	r0, #8
   265b8:	f020 fe09 	bl	471ce <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   265bc:	f8bd 3000 	ldrh.w	r3, [sp]
   265c0:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   265c2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   265c6:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   265c8:	4622      	mov	r2, r4
   265ca:	4631      	mov	r1, r6
   265cc:	f242 0024 	movw	r0, #8228	; 0x2024
   265d0:	f004 fe86 	bl	2b2e0 <bt_hci_cmd_send_sync>
		if (err) {
   265d4:	4604      	mov	r4, r0
   265d6:	2800      	cmp	r0, #0
   265d8:	f47f af73 	bne.w	264c2 <bt_init+0xea>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   265dc:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   265e0:	065c      	lsls	r4, r3, #25
   265e2:	d510      	bpl.n	26606 <bt_init+0x22e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
   265e4:	aa01      	add	r2, sp, #4
   265e6:	2100      	movs	r1, #0
   265e8:	f242 002a 	movw	r0, #8234	; 0x202a
   265ec:	f004 fe78 	bl	2b2e0 <bt_hci_cmd_send_sync>
		if (err) {
   265f0:	4604      	mov	r4, r0
   265f2:	2800      	cmp	r0, #0
   265f4:	f47f af65 	bne.w	264c2 <bt_init+0xea>
		le_read_resolving_list_size_complete(rsp);
   265f8:	9801      	ldr	r0, [sp, #4]
	bt_dev.le.rl_size = rp->rl_size;
   265fa:	6883      	ldr	r3, [r0, #8]
   265fc:	785b      	ldrb	r3, [r3, #1]
   265fe:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
   26602:	f015 fe85 	bl	3c310 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   26606:	2108      	movs	r1, #8
   26608:	f242 0001 	movw	r0, #8193	; 0x2001
   2660c:	f004 fe0c 	bl	2b228 <bt_hci_cmd_create>
	if (!buf) {
   26610:	4604      	mov	r4, r0
   26612:	2800      	cmp	r0, #0
   26614:	d05e      	beq.n	266d4 <bt_init+0x2fc>
   26616:	2108      	movs	r1, #8
   26618:	4408      	add	r0, r1
   2661a:	f020 fdd8 	bl	471ce <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
   2661e:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   26622:	f011 0f40 	tst.w	r1, #64	; 0x40
   26626:	4602      	mov	r2, r0
   26628:	f240 2302 	movw	r3, #514	; 0x202
   2662c:	bf08      	it	eq
   2662e:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   26630:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   26632:	bf4c      	ite	mi
   26634:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   26638:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   2663c:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   2663e:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   26642:	bf48      	it	mi
   26644:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   26648:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   2664c:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   26650:	bf18      	it	ne
   26652:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   26656:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   2665a:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
   2665c:	bf48      	it	mi
   2665e:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   26662:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
   26664:	bf08      	it	eq
   26666:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
   2666a:	2100      	movs	r1, #0
   2666c:	f01e f842 	bl	446f4 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   26670:	4621      	mov	r1, r4
   26672:	2200      	movs	r2, #0
   26674:	f242 0001 	movw	r0, #8193	; 0x2001
   26678:	f004 fe32 	bl	2b2e0 <bt_hci_cmd_send_sync>
	if (err) {
   2667c:	4604      	mov	r4, r0
   2667e:	2800      	cmp	r0, #0
   26680:	f47f af1f 	bne.w	264c2 <bt_init+0xea>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   26684:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
   26688:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
   2668c:	0698      	lsls	r0, r3, #26
   2668e:	d424      	bmi.n	266da <bt_init+0x302>
	if (bt_dev.le.acl_mtu) {
   26690:	b9c9      	cbnz	r1, 266c6 <bt_init+0x2ee>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   26692:	aa01      	add	r2, sp, #4
   26694:	f241 0005 	movw	r0, #4101	; 0x1005
   26698:	f004 fe22 	bl	2b2e0 <bt_hci_cmd_send_sync>
	if (err) {
   2669c:	4604      	mov	r4, r0
   2669e:	2800      	cmp	r0, #0
   266a0:	f47f af0f 	bne.w	264c2 <bt_init+0xea>
	if (bt_dev.le.acl_mtu) {
   266a4:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
	read_buffer_size_complete(rsp);
   266a8:	9c01      	ldr	r4, [sp, #4]
	if (bt_dev.le.acl_mtu) {
   266aa:	b94b      	cbnz	r3, 266c0 <bt_init+0x2e8>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   266ac:	68a3      	ldr	r3, [r4, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   266ae:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   266b2:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   266b6:	889a      	ldrh	r2, [r3, #4]
   266b8:	480e      	ldr	r0, [pc, #56]	; (266f4 <bt_init+0x31c>)
   266ba:	4611      	mov	r1, r2
   266bc:	f021 fd25 	bl	4810a <z_impl_k_sem_init>
	net_buf_unref(rsp);
   266c0:	4620      	mov	r0, r4
   266c2:	f015 fe25 	bl	3c310 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   266c6:	2108      	movs	r1, #8
   266c8:	f640 4001 	movw	r0, #3073	; 0xc01
   266cc:	f004 fdac 	bl	2b228 <bt_hci_cmd_create>
	if (!buf) {
   266d0:	4604      	mov	r4, r0
   266d2:	b988      	cbnz	r0, 266f8 <bt_init+0x320>
		return -ENOBUFS;
   266d4:	f06f 0468 	mvn.w	r4, #104	; 0x68
   266d8:	e6f3      	b.n	264c2 <bt_init+0xea>
	else if (!bt_dev.le.acl_mtu) {
   266da:	2900      	cmp	r1, #0
   266dc:	d1f3      	bne.n	266c6 <bt_init+0x2ee>
		return -EIO;
   266de:	f06f 0404 	mvn.w	r4, #4
   266e2:	e6ee      	b.n	264c2 <bt_init+0xea>
   266e4:	20000000 	.word	0x20000000
   266e8:	20000070 	.word	0x20000070
   266ec:	20000078 	.word	0x20000078
   266f0:	200000d0 	.word	0x200000d0
   266f4:	20000100 	.word	0x20000100
   266f8:	2108      	movs	r1, #8
   266fa:	4408      	add	r0, r1
   266fc:	f020 fd67 	bl	471ce <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   26700:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   26704:	07d9      	lsls	r1, r3, #31
   26706:	4602      	mov	r2, r0
   26708:	d457      	bmi.n	267ba <bt_init+0x3e2>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
   2670a:	4831      	ldr	r0, [pc, #196]	; (267d0 <bt_init+0x3f8>)
   2670c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
	sys_put_le64(mask, ev->events);
   26710:	f01d fff0 	bl	446f4 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   26714:	4621      	mov	r1, r4
   26716:	2200      	movs	r2, #0
   26718:	f640 4001 	movw	r0, #3073	; 0xc01
   2671c:	f004 fde0 	bl	2b2e0 <bt_hci_cmd_send_sync>
	if (err) {
   26720:	4604      	mov	r4, r0
   26722:	2800      	cmp	r0, #0
   26724:	f47f aecd 	bne.w	264c2 <bt_init+0xea>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   26728:	4601      	mov	r1, r0
   2672a:	aa01      	add	r2, sp, #4
   2672c:	f64f 4001 	movw	r0, #64513	; 0xfc01
   26730:	f004 fdd6 	bl	2b2e0 <bt_hci_cmd_send_sync>
	if (err) {
   26734:	4604      	mov	r4, r0
   26736:	bb48      	cbnz	r0, 2678c <bt_init+0x3b4>
	net_buf_unref(rsp);
   26738:	9801      	ldr	r0, [sp, #4]
   2673a:	f015 fde9 	bl	3c310 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   2673e:	4621      	mov	r1, r4
   26740:	aa01      	add	r2, sp, #4
   26742:	f64f 4002 	movw	r0, #64514	; 0xfc02
   26746:	f004 fdcb 	bl	2b2e0 <bt_hci_cmd_send_sync>
	if (err) {
   2674a:	4604      	mov	r4, r0
   2674c:	b9f0      	cbnz	r0, 2678c <bt_init+0x3b4>
	rp.cmds = (void *)rsp->data;
   2674e:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   26750:	4820      	ldr	r0, [pc, #128]	; (267d4 <bt_init+0x3fc>)
   26752:	68b1      	ldr	r1, [r6, #8]
   26754:	2202      	movs	r2, #2
   26756:	3101      	adds	r1, #1
   26758:	f01d fdde 	bl	44318 <memcpy>
	net_buf_unref(rsp);
   2675c:	4630      	mov	r0, r6
   2675e:	f015 fdd7 	bl	3c310 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   26762:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   26766:	075b      	lsls	r3, r3, #29
   26768:	d510      	bpl.n	2678c <bt_init+0x3b4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   2676a:	aa01      	add	r2, sp, #4
   2676c:	4621      	mov	r1, r4
   2676e:	f64f 4003 	movw	r0, #64515	; 0xfc03
   26772:	f004 fdb5 	bl	2b2e0 <bt_hci_cmd_send_sync>
		if (err) {
   26776:	b948      	cbnz	r0, 2678c <bt_init+0x3b4>
		rp.feat = (void *)rsp->data;
   26778:	9c01      	ldr	r4, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   2677a:	4817      	ldr	r0, [pc, #92]	; (267d8 <bt_init+0x400>)
   2677c:	68a1      	ldr	r1, [r4, #8]
   2677e:	2201      	movs	r2, #1
   26780:	4411      	add	r1, r2
   26782:	f01d fdc9 	bl	44318 <memcpy>
		net_buf_unref(rsp);
   26786:	4620      	mov	r0, r4
   26788:	f015 fdc2 	bl	3c310 <net_buf_unref>
	err = bt_id_init();
   2678c:	f01e faf0 	bl	44d70 <bt_id_init>
	if (err) {
   26790:	4604      	mov	r4, r0
   26792:	2800      	cmp	r0, #0
   26794:	f47f ae95 	bne.w	264c2 <bt_init+0xea>
		err = bt_conn_init();
   26798:	f006 fc4a 	bl	2d030 <bt_conn_init>
		if (err) {
   2679c:	4604      	mov	r4, r0
   2679e:	2800      	cmp	r0, #0
   267a0:	f47f ae8f 	bne.w	264c2 <bt_init+0xea>
		if (!bt_dev.id_count) {
   267a4:	79eb      	ldrb	r3, [r5, #7]
   267a6:	2b00      	cmp	r3, #0
   267a8:	f43f ae8b 	beq.w	264c2 <bt_init+0xea>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   267ac:	2108      	movs	r1, #8
   267ae:	480b      	ldr	r0, [pc, #44]	; (267dc <bt_init+0x404>)
   267b0:	f01d fef8 	bl	445a4 <atomic_or>
	bt_finalize_init();
   267b4:	f005 f86e 	bl	2b894 <bt_finalize_init>
	return 0;
   267b8:	e683      	b.n	264c2 <bt_init+0xea>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
   267ba:	a103      	add	r1, pc, #12	; (adr r1, 267c8 <bt_init+0x3f0>)
   267bc:	e9d1 0100 	ldrd	r0, r1, [r1]
   267c0:	e7a6      	b.n	26710 <bt_init+0x338>
   267c2:	bf00      	nop
   267c4:	f3af 8000 	nop.w
   267c8:	02008890 	.word	0x02008890
   267cc:	20008000 	.word	0x20008000
   267d0:	02008810 	.word	0x02008810
   267d4:	200000b9 	.word	0x200000b9
   267d8:	200000b8 	.word	0x200000b8
   267dc:	200000cc 	.word	0x200000cc

000267e0 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
   267e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
   267e4:	e9d0 350b 	ldrd	r3, r5, [r0, #44]	; 0x2c
	start_to_address_actual_us =
   267e8:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
   267ec:	195c      	adds	r4, r3, r5
	start_to_address_expected_us = EVENT_JITTER_US +
   267ee:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
   267f0:	45a0      	cmp	r8, r4
{
   267f2:	460f      	mov	r7, r1
   267f4:	4616      	mov	r6, r2
	if (start_to_address_actual_us <= start_to_address_expected_us) {
   267f6:	d819      	bhi.n	2682c <ull_drift_ticks_get+0x4c>
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
   267f8:	4d1d      	ldr	r5, [pc, #116]	; (26870 <ull_drift_ticks_get+0x90>)
   267fa:	fba3 0105 	umull	r0, r1, r3, r5
   267fe:	a31a      	add	r3, pc, #104	; (adr r3, 26868 <ull_drift_ticks_get+0x88>)
   26800:	e9d3 2300 	ldrd	r2, r3, [r3]
   26804:	f7ff fc7c 	bl	26100 <__aeabi_uldivmod>
   26808:	4603      	mov	r3, r0
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
   2680a:	eba4 0008 	sub.w	r0, r4, r8
   2680e:	fba0 0105 	umull	r0, r1, r0, r5
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
   26812:	f023 447f 	bic.w	r4, r3, #4278190080	; 0xff000000
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
   26816:	a314      	add	r3, pc, #80	; (adr r3, 26868 <ull_drift_ticks_get+0x88>)
   26818:	e9d3 2300 	ldrd	r2, r3, [r3]
   2681c:	f7ff fc70 	bl	26100 <__aeabi_uldivmod>
   26820:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
   26824:	603c      	str	r4, [r7, #0]
		*ticks_drift_minus =
   26826:	6030      	str	r0, [r6, #0]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
   26828:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
   2682c:	f8df 9040 	ldr.w	r9, [pc, #64]	; 26870 <ull_drift_ticks_get+0x90>
   26830:	a30d      	add	r3, pc, #52	; (adr r3, 26868 <ull_drift_ticks_get+0x88>)
   26832:	e9d3 2300 	ldrd	r2, r3, [r3]
   26836:	fba8 0109 	umull	r0, r1, r8, r9
   2683a:	f7ff fc61 	bl	26100 <__aeabi_uldivmod>
   2683e:	4604      	mov	r4, r0
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
   26840:	f105 0030 	add.w	r0, r5, #48	; 0x30
   26844:	a308      	add	r3, pc, #32	; (adr r3, 26868 <ull_drift_ticks_get+0x88>)
   26846:	e9d3 2300 	ldrd	r2, r3, [r3]
   2684a:	fba0 0109 	umull	r0, r1, r0, r9
   2684e:	f7ff fc57 	bl	26100 <__aeabi_uldivmod>
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
   26852:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
   26856:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
   2685a:	603c      	str	r4, [r7, #0]
		*ticks_drift_minus =
   2685c:	6030      	str	r0, [r6, #0]
}
   2685e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   26862:	bf00      	nop
   26864:	f3af 8000 	nop.w
   26868:	1afd498d 	.word	0x1afd498d
   2686c:	00000007 	.word	0x00000007
   26870:	3b9aca00 	.word	0x3b9aca00
   26874:	00000000 	.word	0x00000000

00026878 <ll_adv_enable>:
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	uint8_t hci_err;
	uint32_t ret;

	if (!enable) {
   26878:	2800      	cmp	r0, #0
   2687a:	f000 8189 	beq.w	26b90 <ll_adv_enable+0x318>
{
   2687e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
   26882:	4dcb      	ldr	r5, [pc, #812]	; (26bb0 <ll_adv_enable+0x338>)
   26884:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
   26888:	07d8      	lsls	r0, r3, #31
{
   2688a:	b08d      	sub	sp, #52	; 0x34
	if (!adv || adv->is_enabled) {
   2688c:	f100 81cf 	bmi.w	26c2e <ll_adv_enable+0x3b6>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   26890:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   26894:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   26898:	eb05 0282 	add.w	r2, r5, r2, lsl #2
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   2689c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   268a0:	6ad7      	ldr	r7, [r2, #44]	; 0x2c
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   268a2:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		pdu_adv_to_update = pdu;
	}

	if (pdu_adv_to_update) {
   268a6:	b30f      	cbz	r7, 268ec <ll_adv_enable+0x74>
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		} else if (ll_adv_cmds_is_ext() && pdu->tx_addr) {
			own_id_addr = adv->rnd_addr;
#endif
		} else {
			own_id_addr = ll_addr_get(pdu->tx_addr);
   268a8:	463c      	mov	r4, r7
   268aa:	f814 0b02 	ldrb.w	r0, [r4], #2
   268ae:	f3c0 1080 	ubfx	r0, r0, #6, #1
   268b2:	f00a fe75 	bl	315a0 <ll_addr_get>
	} else {
		tx_addr = own_id_addr;
	}

	adv_addr = adv_pdu_adva_get(pdu);
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
   268b6:	2206      	movs	r2, #6
			own_id_addr = ll_addr_get(pdu->tx_addr);
   268b8:	4601      	mov	r1, r0
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
   268ba:	4620      	mov	r0, r4
   268bc:	f01d fd2c 	bl	44318 <memcpy>
		if (pdu_adv_to_update->tx_addr &&
   268c0:	783b      	ldrb	r3, [r7, #0]
   268c2:	0659      	lsls	r1, r3, #25
   268c4:	d506      	bpl.n	268d4 <ll_adv_enable+0x5c>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
   268c6:	2106      	movs	r1, #6
   268c8:	4620      	mov	r0, r4
   268ca:	f009 fbed 	bl	300a8 <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
   268ce:	2800      	cmp	r0, #0
   268d0:	f000 81af 	beq.w	26c32 <ll_adv_enable+0x3ba>
			own_id_addr = ll_addr_get(pdu->tx_addr);
   268d4:	4644      	mov	r4, r8
   268d6:	f814 0b02 	ldrb.w	r0, [r4], #2
   268da:	f3c0 1080 	ubfx	r0, r0, #6, #1
   268de:	f00a fe5f 	bl	315a0 <ll_addr_get>
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
   268e2:	2206      	movs	r2, #6
			own_id_addr = ll_addr_get(pdu->tx_addr);
   268e4:	4601      	mov	r1, r0
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
   268e6:	4620      	mov	r0, r4
   268e8:	f01d fd16 	bl	44318 <memcpy>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
   268ec:	783b      	ldrb	r3, [r7, #0]
   268ee:	f013 0f0e 	tst.w	r3, #14
   268f2:	f040 80e6 	bne.w	26ac2 <ll_adv_enable+0x24a>
		if (lll->conn) {
   268f6:	6a2b      	ldr	r3, [r5, #32]
   268f8:	b11b      	cbz	r3, 26902 <ll_adv_enable+0x8a>
	return BT_HCI_ERR_CMD_DISALLOWED;
   268fa:	200c      	movs	r0, #12
}
   268fc:	b00d      	add	sp, #52	; 0x34
   268fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		link = ll_rx_link_alloc();
   26902:	f00c fd21 	bl	33348 <ll_rx_link_alloc>
		if (!link) {
   26906:	4681      	mov	r9, r0
   26908:	2800      	cmp	r0, #0
   2690a:	f000 819f 	beq.w	26c4c <ll_adv_enable+0x3d4>
		node_rx = ll_rx_alloc();
   2690e:	f00c fd27 	bl	33360 <ll_rx_alloc>
		if (!node_rx) {
   26912:	4682      	mov	sl, r0
   26914:	2800      	cmp	r0, #0
   26916:	f000 8196 	beq.w	26c46 <ll_adv_enable+0x3ce>
		conn = ll_conn_acquire();
   2691a:	f00e fd45 	bl	353a8 <ll_conn_acquire>
		if (!conn) {
   2691e:	4604      	mov	r4, r0
   26920:	2800      	cmp	r0, #0
   26922:	f000 8195 	beq.w	26c50 <ll_adv_enable+0x3d8>
		if (!conn_lll->link_tx_free) {
   26926:	6f40      	ldr	r0, [r0, #116]	; 0x74
		conn_lll->handle = 0xFFFF;
   26928:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2692c:	8523      	strh	r3, [r4, #40]	; 0x28
		conn_lll = &conn->lll;
   2692e:	f104 0b1c 	add.w	fp, r4, #28
		if (!conn_lll->link_tx_free) {
   26932:	2800      	cmp	r0, #0
   26934:	f000 8183 	beq.w	26c3e <ll_adv_enable+0x3c6>
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
   26938:	f104 0268 	add.w	r2, r4, #104	; 0x68
   2693c:	f104 0164 	add.w	r1, r4, #100	; 0x64
   26940:	f009 fbbe 	bl	300c0 <memq_init>
			conn_lll->phy_tx = PHY_1M;
   26944:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   26948:	4a9a      	ldr	r2, [pc, #616]	; (26bb4 <ll_adv_enable+0x33c>)
			conn_lll->phy_tx = PHY_1M;
   2694a:	f423 63ef 	bic.w	r3, r3, #1912	; 0x778
   2694e:	f023 0307 	bic.w	r3, r3, #7
   26952:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   26956:	f043 0301 	orr.w	r3, r3, #1
   2695a:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
		conn_lll->data_chan_sel = 0;
   2695e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   26962:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   26966:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2696a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn_lll->sn = 0;
   2696e:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   26972:	f023 0307 	bic.w	r3, r3, #7
   26976:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		conn_lll->periph.initiated = 0;
   2697a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   2697e:	f023 0307 	bic.w	r3, r3, #7
   26982:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		conn->common.fex_valid = 0;
   26986:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   2698a:	f023 0307 	bic.w	r3, r3, #7
   2698e:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
		conn->llcp_cu.pause_tx = 0U;
   26992:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
		conn_lll->link_tx_free = NULL;
   26996:	2600      	movs	r6, #0
		conn->llcp_cu.pause_tx = 0U;
   26998:	f366 1304 	bfi	r3, r6, #4, #1
   2699c:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   269a0:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
   269a4:	e9c4 3216 	strd	r3, r2, [r4, #88]	; 0x58
		conn->connect_expire = 6;
   269a8:	2306      	movs	r3, #6
   269aa:	f8a4 30c0 	strh.w	r3, [r4, #192]	; 0xc0
		conn_lll->periph.window_widening_event_us = 0;
   269ae:	e9c4 6612 	strd	r6, r6, [r4, #72]	; 0x48
		conn_lll->link_tx_free = NULL;
   269b2:	6766      	str	r6, [r4, #116]	; 0x74
		conn_lll->packet_tx_head_len = 0;
   269b4:	f8a4 6078 	strh.w	r6, [r4, #120]	; 0x78
		conn_lll->event_counter = 0;
   269b8:	8666      	strh	r6, [r4, #50]	; 0x32
		conn_lll->latency_prepare = 0;
   269ba:	f8c4 602e 	str.w	r6, [r4, #46]	; 0x2e
		conn_lll->data_chan_use = 0;
   269be:	f884 603b 	strb.w	r6, [r4, #59]	; 0x3b
		conn_lll->periph.window_size_prepare_us = 0;
   269c2:	6526      	str	r6, [r4, #80]	; 0x50
		conn->supervision_expire = 0;
   269c4:	f8a4 60c4 	strh.w	r6, [r4, #196]	; 0xc4
		conn->procedure_expire = 0;
   269c8:	f8a4 60c8 	strh.w	r6, [r4, #200]	; 0xc8
		conn->apto_expire = 0U;
   269cc:	f8a4 60d0 	strh.w	r6, [r4, #208]	; 0xd0
		conn->appto_expire = 0U;
   269d0:	f8a4 60cc 	strh.w	r6, [r4, #204]	; 0xcc
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
   269d4:	f884 60e6 	strb.w	r6, [r4, #230]	; 0xe6
   269d8:	f8a4 60e4 	strh.w	r6, [r4, #228]	; 0xe4
		conn->llcp_rx = NULL;
   269dc:	f8c4 6108 	str.w	r6, [r4, #264]	; 0x108
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
   269e0:	f8a4 610c 	strh.w	r6, [r4, #268]	; 0x10c
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
   269e4:	f8a4 6120 	strh.w	r6, [r4, #288]	; 0x120
		conn->llcp_feature.features_conn = ll_feat_get();
   269e8:	f00b fff6 	bl	329d8 <ll_feat_get>
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
   269ec:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
		conn->llcp_version.req = conn->llcp_version.ack = 0;
   269f0:	f8a4 6138 	strh.w	r6, [r4, #312]	; 0x138
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
   269f4:	f023 0303 	bic.w	r3, r3, #3
   269f8:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
		conn_lll->enc_rx = conn_lll->enc_tx = 0U;
   269fc:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
		conn->llcp_terminate.req = conn->llcp_terminate.ack = 0;
   26a00:	f8a4 6140 	strh.w	r6, [r4, #320]	; 0x140
		conn_lll->enc_rx = conn_lll->enc_tx = 0U;
   26a04:	f023 0318 	bic.w	r3, r3, #24
   26a08:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
   26a0c:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
		conn->llcp_terminate.reason_final = 0;
   26a10:	f884 6143 	strb.w	r6, [r4, #323]	; 0x143
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
   26a14:	f023 0307 	bic.w	r3, r3, #7
   26a18:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
		conn->llcp_conn_param.disabled = 0U;
   26a1c:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		conn->llcp_terminate.node_rx.hdr.link = link;
   26a20:	f8c4 9144 	str.w	r9, [r4, #324]	; 0x144
		conn->llcp_conn_param.disabled = 0U;
   26a24:	f366 1386 	bfi	r3, r6, #6, #1
   26a28:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
		conn->llcp_length.disabled = 0U;
   26a2c:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
		conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
   26a30:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
		conn->llcp_length.disabled = 0U;
   26a34:	f366 03c3 	bfi	r3, r6, #3, #1
		conn->llcp_feature.features_peer = 0;
   26a38:	2200      	movs	r2, #0
		conn->llcp_length.disabled = 0U;
   26a3a:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
		conn->llcp_feature.features_peer = 0;
   26a3e:	2300      	movs	r3, #0
		conn->llcp_feature.features_conn = ll_feat_get();
   26a40:	e9c4 014a 	strd	r0, r1, [r4, #296]	; 0x128
		conn->llcp_feature.features_peer = 0;
   26a44:	e9c4 234c 	strd	r2, r3, [r4, #304]	; 0x130
		conn->periph.llcp_type = 0U;
   26a48:	f884 60d9 	strb.w	r6, [r4, #217]	; 0xd9
		conn->llcp_conn_param.req = 0U;
   26a4c:	f8a4 6184 	strh.w	r6, [r4, #388]	; 0x184
		conn->llcp_conn_param.cache.timeout = 0U;
   26a50:	f8a4 6196 	strh.w	r6, [r4, #406]	; 0x196
		conn->periph.ticks_to_offset = 0U;
   26a54:	f8c4 60e0 	str.w	r6, [r4, #224]	; 0xe0
		conn->llcp_length.req = conn->llcp_length.ack = 0U;
   26a58:	f8a4 61b4 	strh.w	r6, [r4, #436]	; 0x1b4
		conn->llcp_length.cache.tx_octets = 0U;
   26a5c:	f8a4 61c0 	strh.w	r6, [r4, #448]	; 0x1c0
		conn->default_tx_octets = ull_conn_default_tx_octets_get();
   26a60:	f00e ffdc 	bl	35a1c <ull_conn_default_tx_octets_get>
   26a64:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2
		conn->default_tx_time = ull_conn_default_tx_time_get();
   26a68:	f00e ffde 	bl	35a28 <ull_conn_default_tx_time_get>
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
   26a6c:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
   26a70:	4b51      	ldr	r3, [pc, #324]	; (26bb8 <ll_adv_enable+0x340>)
		conn->default_tx_time = ull_conn_default_tx_time_get();
   26a72:	f8a4 00d4 	strh.w	r0, [r4, #212]	; 0xd4
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
   26a76:	4013      	ands	r3, r2
   26a78:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
   26a7c:	f00e ffda 	bl	35a34 <ull_conn_default_phy_tx_get>
   26a80:	f894 31c8 	ldrb.w	r3, [r4, #456]	; 0x1c8
   26a84:	f360 0302 	bfi	r3, r0, #0, #3
   26a88:	f884 31c8 	strb.w	r3, [r4, #456]	; 0x1c8
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   26a8c:	f00e ffd8 	bl	35a40 <ull_conn_default_phy_rx_get>
   26a90:	f894 31c8 	ldrb.w	r3, [r4, #456]	; 0x1c8
		lll->conn = conn_lll;
   26a94:	f8c5 b020 	str.w	fp, [r5, #32]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   26a98:	f360 03c5 	bfi	r3, r0, #3, #3
		adv->node_rx_cc_free = node_rx;
   26a9c:	e9c5 9a18 	strd	r9, sl, [r5, #96]	; 0x60
		conn->tx_data = conn->tx_data_last = 0;
   26aa0:	e9c4 6676 	strd	r6, r6, [r4, #472]	; 0x1d8
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
   26aa4:	e9c4 6674 	strd	r6, r6, [r4, #464]	; 0x1d0
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->ref = 0U;
	hdr->disabled_cb = hdr->disabled_param = NULL;
   26aa8:	e9c4 6605 	strd	r6, r6, [r4, #20]
   26aac:	f8c4 61cc 	str.w	r6, [r4, #460]	; 0x1cc
	hdr->ref = 0U;
   26ab0:	7026      	strb	r6, [r4, #0]

static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
   26ab2:	61e4      	str	r4, [r4, #28]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   26ab4:	f884 31c8 	strb.w	r3, [r4, #456]	; 0x1c8
		err = lll_clock_wait();
   26ab8:	f013 faca 	bl	3a050 <lll_clock_wait>
		if (err) {
   26abc:	2800      	cmp	r0, #0
   26abe:	f040 80ba 	bne.w	26c36 <ll_adv_enable+0x3be>
	uint8_t ch_map = lll->chan_map;
   26ac2:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
   26ac6:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
   26ac8:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
   26acc:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
	uint8_t ch_map = lll->chan_map;
   26ad0:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
   26ad4:	f009 fc7e 	bl	303d4 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
   26ad8:	4602      	mov	r2, r0
   26ada:	2800      	cmp	r0, #0
   26adc:	d05a      	beq.n	26b94 <ll_adv_enable+0x31c>
	uint16_t time_us = adv_time_get(pdu_adv, pdu_scan, adv_chn_cnt, phy,
   26ade:	f898 1001 	ldrb.w	r1, [r8, #1]
   26ae2:	4638      	mov	r0, r7
   26ae4:	f00d fb52 	bl	3418c <adv_time_get.constprop.0.isra.0>
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
   26ae8:	4934      	ldr	r1, [pc, #208]	; (26bbc <ll_adv_enable+0x344>)
	uint16_t interval = adv->interval;
   26aea:	f8b5 6068 	ldrh.w	r6, [r5, #104]	; 0x68
   26aee:	2400      	movs	r4, #0
	adv->ull.ticks_prepare_to_start =
   26af0:	2331      	movs	r3, #49	; 0x31
   26af2:	60ab      	str	r3, [r5, #8]
	hdr->disabled_cb = hdr->disabled_param = NULL;
   26af4:	e9c5 4405 	strd	r4, r4, [r5, #20]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
   26af8:	a32b      	add	r3, pc, #172	; (adr r3, 26ba8 <ll_adv_enable+0x330>)
   26afa:	e9d3 2300 	ldrd	r2, r3, [r3]
	hdr->ref = 0U;
   26afe:	702c      	strb	r4, [r5, #0]
	adv->ull.ticks_active_to_start = 0;
   26b00:	606c      	str	r4, [r5, #4]
	adv->ull.ticks_preempt_to_start =
   26b02:	60ec      	str	r4, [r5, #12]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
   26b04:	fba0 0101 	umull	r0, r1, r0, r1
   26b08:	f7ff fafa 	bl	26100 <__aeabi_uldivmod>
   26b0c:	6128      	str	r0, [r5, #16]
	ticks_anchor = ticker_ticks_now_get();
   26b0e:	f00a fd1d 	bl	3154c <ticker_ticks_now_get>
   26b12:	4680      	mov	r8, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
   26b14:	b93e      	cbnz	r6, 26b26 <ll_adv_enable+0x2ae>
   26b16:	783c      	ldrb	r4, [r7, #0]
   26b18:	f004 040f 	and.w	r4, r4, #15
   26b1c:	f1a4 0401 	sub.w	r4, r4, #1
   26b20:	fab4 f484 	clz	r4, r4
   26b24:	0964      	lsrs	r4, r4, #5
   26b26:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
				   (adv->ull.ticks_slot + ticks_slot_overhead),
   26b2a:	692b      	ldr	r3, [r5, #16]
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
   26b2c:	f364 0000 	bfi	r0, r4, #0, #1
	if (lll->is_hdcd) {
   26b30:	f010 0401 	ands.w	r4, r0, #1
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
   26b34:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
	if (lll->is_hdcd) {
   26b38:	d048      	beq.n	26bcc <ll_adv_enable+0x354>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26b3a:	2000      	movs	r0, #0
   26b3c:	4a20      	ldr	r2, [pc, #128]	; (26bc0 <ll_adv_enable+0x348>)
   26b3e:	4f21      	ldr	r7, [pc, #132]	; (26bc4 <ll_adv_enable+0x34c>)
   26b40:	9304      	str	r3, [sp, #16]
		ret_cb = TICKER_STATUS_BUSY;
   26b42:	2402      	movs	r4, #2
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26b44:	ae0b      	add	r6, sp, #44	; 0x2c
   26b46:	9301      	str	r3, [sp, #4]
   26b48:	9205      	str	r2, [sp, #20]
   26b4a:	2103      	movs	r1, #3
   26b4c:	e9cd 0002 	strd	r0, r0, [sp, #8]
   26b50:	9608      	str	r6, [sp, #32]
   26b52:	9506      	str	r5, [sp, #24]
   26b54:	4643      	mov	r3, r8
   26b56:	9000      	str	r0, [sp, #0]
   26b58:	9707      	str	r7, [sp, #28]
   26b5a:	4622      	mov	r2, r4
		ret_cb = TICKER_STATUS_BUSY;
   26b5c:	940b      	str	r4, [sp, #44]	; 0x2c
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26b5e:	f00a fc27 	bl	313b0 <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
   26b62:	4631      	mov	r1, r6
   26b64:	f00c fca8 	bl	334b8 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
   26b68:	b9a0      	cbnz	r0, 26b94 <ll_adv_enable+0x31c>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26b6a:	4917      	ldr	r1, [pc, #92]	; (26bc8 <ll_adv_enable+0x350>)
   26b6c:	9105      	str	r1, [sp, #20]
   26b6e:	f24a 33d8 	movw	r3, #41944	; 0xa3d8
   26b72:	9300      	str	r3, [sp, #0]
   26b74:	e9cd 0003 	strd	r0, r0, [sp, #12]
   26b78:	e9cd 0001 	strd	r0, r0, [sp, #4]
   26b7c:	9707      	str	r7, [sp, #28]
   26b7e:	9608      	str	r6, [sp, #32]
   26b80:	9506      	str	r5, [sp, #24]
   26b82:	4643      	mov	r3, r8
   26b84:	2201      	movs	r2, #1
   26b86:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
   26b88:	940b      	str	r4, [sp, #44]	; 0x2c
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26b8a:	f00a fc11 	bl	313b0 <ticker_start>
   26b8e:	e043      	b.n	26c18 <ll_adv_enable+0x3a0>
		return disable(handle);
   26b90:	f00d ba4e 	b.w	34030 <disable.constprop.0>
	if (adv->lll.conn) {
   26b94:	6a2b      	ldr	r3, [r5, #32]
   26b96:	2b00      	cmp	r3, #0
   26b98:	f43f aeaf 	beq.w	268fa <ll_adv_enable+0x82>
		conn_release(adv);
   26b9c:	f00d fa06 	bl	33fac <conn_release.constprop.0>
   26ba0:	e6ab      	b.n	268fa <ll_adv_enable+0x82>
   26ba2:	bf00      	nop
   26ba4:	f3af 8000 	nop.w
   26ba8:	1afd498d 	.word	0x1afd498d
   26bac:	00000007 	.word	0x00000007
   26bb0:	2000274c 	.word	0x2000274c
   26bb4:	01480148 	.word	0x01480148
   26bb8:	f6ff0000 	.word	0xf6ff0000
   26bbc:	3b9aca00 	.word	0x3b9aca00
   26bc0:	000341fd 	.word	0x000341fd
   26bc4:	00032a79 	.word	0x00032a79
   26bc8:	00033d51 	.word	0x00033d51
		ll_adv_ticker_ext[handle].ticks_slot_window =
   26bcc:	4a26      	ldr	r2, [pc, #152]	; (26c68 <ll_adv_enable+0x3f0>)
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   26bce:	4827      	ldr	r0, [pc, #156]	; (26c6c <ll_adv_enable+0x3f4>)
		ret = ticker_start_ext(
   26bd0:	9304      	str	r3, [sp, #16]
			ULL_ADV_RANDOM_DELAY + ticks_slot;
   26bd2:	f203 1347 	addw	r3, r3, #327	; 0x147
		ret = ticker_start_ext(
   26bd6:	9506      	str	r5, [sp, #24]
   26bd8:	9402      	str	r4, [sp, #8]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   26bda:	2191      	movs	r1, #145	; 0x91
		ll_adv_ticker_ext[handle].ticks_slot_window =
   26bdc:	6013      	str	r3, [r2, #0]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   26bde:	fba6 0300 	umull	r0, r3, r6, r0
   26be2:	fb01 3106 	mla	r1, r1, r6, r3
		ret = ticker_start_ext(
   26be6:	4b22      	ldr	r3, [pc, #136]	; (26c70 <ll_adv_enable+0x3f8>)
   26be8:	9307      	str	r3, [sp, #28]
   26bea:	4b22      	ldr	r3, [pc, #136]	; (26c74 <ll_adv_enable+0x3fc>)
   26bec:	9305      	str	r3, [sp, #20]
   26bee:	f64f 73ff 	movw	r3, #65535	; 0xffff
   26bf2:	9209      	str	r2, [sp, #36]	; 0x24
		ret_cb = TICKER_STATUS_BUSY;
   26bf4:	2702      	movs	r7, #2
		ret = ticker_start_ext(
   26bf6:	9303      	str	r3, [sp, #12]
   26bf8:	ae0b      	add	r6, sp, #44	; 0x2c
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   26bfa:	a319      	add	r3, pc, #100	; (adr r3, 26c60 <ll_adv_enable+0x3e8>)
   26bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret_cb = TICKER_STATUS_BUSY;
   26c00:	970b      	str	r7, [sp, #44]	; 0x2c
		ret = ticker_start_ext(
   26c02:	9608      	str	r6, [sp, #32]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   26c04:	f7ff fa7c 	bl	26100 <__aeabi_uldivmod>
		ret = ticker_start_ext(
   26c08:	4643      	mov	r3, r8
   26c0a:	e9cd 4000 	strd	r4, r0, [sp]
   26c0e:	463a      	mov	r2, r7
   26c10:	4620      	mov	r0, r4
   26c12:	2103      	movs	r1, #3
   26c14:	f00a fb76 	bl	31304 <ticker_start_ext>
	ret = ull_ticker_status_take(ret, &ret_cb);
   26c18:	4631      	mov	r1, r6
   26c1a:	f00c fc4d 	bl	334b8 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
   26c1e:	2800      	cmp	r0, #0
   26c20:	d1b8      	bne.n	26b94 <ll_adv_enable+0x31c>
	adv->is_enabled = 1;
   26c22:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
   26c26:	f043 0301 	orr.w	r3, r3, #1
   26c2a:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
			return 0;
   26c2e:	2000      	movs	r0, #0
   26c30:	e664      	b.n	268fc <ll_adv_enable+0x84>
			return BT_HCI_ERR_INVALID_PARAM;
   26c32:	2012      	movs	r0, #18
   26c34:	e662      	b.n	268fc <ll_adv_enable+0x84>
			conn_release(adv);
   26c36:	f00d f9b9 	bl	33fac <conn_release.constprop.0>
			return BT_HCI_ERR_HW_FAILURE;
   26c3a:	2003      	movs	r0, #3
   26c3c:	e65e      	b.n	268fc <ll_adv_enable+0x84>
			conn_lll->link_tx_free = &conn_lll->link_tx;
   26c3e:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   26c42:	6760      	str	r0, [r4, #116]	; 0x74
   26c44:	e678      	b.n	26938 <ll_adv_enable+0xc0>
			ll_rx_link_release(link);
   26c46:	4648      	mov	r0, r9
   26c48:	f00c fb84 	bl	33354 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   26c4c:	2007      	movs	r0, #7
   26c4e:	e655      	b.n	268fc <ll_adv_enable+0x84>
			ll_rx_release(node_rx);
   26c50:	4650      	mov	r0, sl
   26c52:	f00c fb8b 	bl	3336c <ll_rx_release>
			ll_rx_link_release(link);
   26c56:	4648      	mov	r0, r9
   26c58:	f00c fb7c 	bl	33354 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   26c5c:	e7f6      	b.n	26c4c <ll_adv_enable+0x3d4>
   26c5e:	bf00      	nop
   26c60:	1afd498d 	.word	0x1afd498d
   26c64:	00000007 	.word	0x00000007
   26c68:	20002740 	.word	0x20002740
   26c6c:	84e72a00 	.word	0x84e72a00
   26c70:	00032a79 	.word	0x00032a79
   26c74:	000341fd 	.word	0x000341fd

00026c78 <ull_adv_time_update>:
{
   26c78:	b570      	push	{r4, r5, r6, lr}
	chan_map = lll->chan_map;
   26c7a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
   26c7e:	b08a      	sub	sp, #40	; 0x28
	chan_map = lll->chan_map;
   26c80:	f3c3 0342 	ubfx	r3, r3, #1, #3
{
   26c84:	460d      	mov	r5, r1
   26c86:	4604      	mov	r4, r0
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   26c88:	2101      	movs	r1, #1
   26c8a:	f10d 0023 	add.w	r0, sp, #35	; 0x23
{
   26c8e:	4616      	mov	r6, r2
	chan_map = lll->chan_map;
   26c90:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   26c94:	f009 fb9e 	bl	303d4 <util_ones_count_get>
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
   26c98:	7871      	ldrb	r1, [r6, #1]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   26c9a:	4602      	mov	r2, r0
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
   26c9c:	4628      	mov	r0, r5
   26c9e:	f00d fa75 	bl	3418c <adv_time_get.constprop.0.isra.0>
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
   26ca2:	491d      	ldr	r1, [pc, #116]	; (26d18 <ull_adv_time_update+0xa0>)
   26ca4:	a31a      	add	r3, pc, #104	; (adr r3, 26d10 <ull_adv_time_update+0x98>)
   26ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
   26caa:	fba0 0101 	umull	r0, r1, r0, r1
   26cae:	f7ff fa27 	bl	26100 <__aeabi_uldivmod>
	if (adv->ull.ticks_slot > time_ticks) {
   26cb2:	6923      	ldr	r3, [r4, #16]
   26cb4:	4298      	cmp	r0, r3
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
   26cb6:	4605      	mov	r5, r0
	if (adv->ull.ticks_slot > time_ticks) {
   26cb8:	d222      	bcs.n	26d00 <ull_adv_time_update+0x88>
		ticks_minus = adv->ull.ticks_slot - time_ticks;
   26cba:	1a1b      	subs	r3, r3, r0
		ticks_plus = 0U;
   26cbc:	2200      	movs	r2, #0
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   26cbe:	9201      	str	r2, [sp, #4]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   26cc0:	4a16      	ldr	r2, [pc, #88]	; (26d1c <ull_adv_time_update+0xa4>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   26cc2:	9302      	str	r3, [sp, #8]
	ret_cb = TICKER_STATUS_BUSY;
   26cc4:	2102      	movs	r1, #2
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   26cc6:	4b16      	ldr	r3, [pc, #88]	; (26d20 <ull_adv_time_update+0xa8>)
	ret_cb = TICKER_STATUS_BUSY;
   26cc8:	9109      	str	r1, [sp, #36]	; 0x24
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   26cca:	1aa2      	subs	r2, r4, r2
   26ccc:	40ca      	lsrs	r2, r1
   26cce:	fba3 3202 	umull	r3, r2, r3, r2
   26cd2:	08d2      	lsrs	r2, r2, #3
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   26cd4:	2300      	movs	r3, #0
   26cd6:	440a      	add	r2, r1
   26cd8:	ae09      	add	r6, sp, #36	; 0x24
   26cda:	4912      	ldr	r1, [pc, #72]	; (26d24 <ull_adv_time_update+0xac>)
   26cdc:	9105      	str	r1, [sp, #20]
   26cde:	e9cd 3303 	strd	r3, r3, [sp, #12]
   26ce2:	2103      	movs	r1, #3
   26ce4:	b2d2      	uxtb	r2, r2
   26ce6:	9606      	str	r6, [sp, #24]
   26ce8:	9300      	str	r3, [sp, #0]
   26cea:	4618      	mov	r0, r3
   26cec:	f00a fbd4 	bl	31498 <ticker_update>
	ret = ull_ticker_status_take(ret, &ret_cb);
   26cf0:	4631      	mov	r1, r6
   26cf2:	f00c fbe1 	bl	334b8 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
   26cf6:	b938      	cbnz	r0, 26d08 <ull_adv_time_update+0x90>
	adv->ull.ticks_slot = time_ticks;
   26cf8:	6125      	str	r5, [r4, #16]
		return BT_HCI_ERR_SUCCESS;
   26cfa:	2000      	movs	r0, #0
}
   26cfc:	b00a      	add	sp, #40	; 0x28
   26cfe:	bd70      	pop	{r4, r5, r6, pc}
	} else if (adv->ull.ticks_slot < time_ticks) {
   26d00:	d9fb      	bls.n	26cfa <ull_adv_time_update+0x82>
		ticks_plus = time_ticks - adv->ull.ticks_slot;
   26d02:	1ac2      	subs	r2, r0, r3
		ticks_minus = 0U;
   26d04:	2300      	movs	r3, #0
   26d06:	e7da      	b.n	26cbe <ull_adv_time_update+0x46>
		return BT_HCI_ERR_CMD_DISALLOWED;
   26d08:	200c      	movs	r0, #12
}
   26d0a:	b00a      	add	sp, #40	; 0x28
   26d0c:	bd70      	pop	{r4, r5, r6, pc}
   26d0e:	bf00      	nop
   26d10:	1afd498d 	.word	0x1afd498d
   26d14:	00000007 	.word	0x00000007
   26d18:	3b9aca00 	.word	0x3b9aca00
   26d1c:	2000274c 	.word	0x2000274c
   26d20:	4bda12f7 	.word	0x4bda12f7
   26d24:	00032a79 	.word	0x00032a79

00026d28 <event_conn_upd_prep>:
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
}

static inline int event_conn_upd_prep(struct ll_conn *conn, uint16_t lazy,
				      uint32_t ticks_at_expire)
{
   26d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_conn *lll = &conn->lll;
	uint16_t instant_latency;
	uint16_t event_counter;

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
   26d2c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   26d2e:	8e46      	ldrh	r6, [r0, #50]	; 0x32

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
   26d30:	f8b0 70e8 	ldrh.w	r7, [r0, #232]	; 0xe8
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
   26d34:	441e      	add	r6, r3
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
   26d36:	f890 310e 	ldrb.w	r3, [r0, #270]	; 0x10e
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
   26d3a:	b2b6      	uxth	r6, r6
   26d3c:	4431      	add	r1, r6
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
   26d3e:	f013 0307 	ands.w	r3, r3, #7
{
   26d42:	b08b      	sub	sp, #44	; 0x2c
   26d44:	4604      	mov	r4, r0
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
   26d46:	fa1f f981 	uxth.w	r9, r1
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
   26d4a:	f040 818d 	bne.w	27068 <event_conn_upd_prep+0x340>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
   26d4e:	eba9 0107 	sub.w	r1, r9, r7
   26d52:	fa1f f981 	uxth.w	r9, r1
		conn->llcp_cu.pause_tx = 1U;

		/* enqueue control PDU */
		ctrl_tx_enqueue(conn, tx);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
	} else if (instant_latency <= 0x7FFF) {
   26d56:	0409      	lsls	r1, r1, #16
   26d58:	f100 81e7 	bmi.w	2712a <event_conn_upd_prep+0x402>
   26d5c:	4690      	mov	r8, r2
		uint32_t ticker_status;
		uint32_t periodic_us;
		uint16_t latency;

#if defined(CONFIG_BT_PERIPHERAL) && defined(CONFIG_BT_CTLR_LE_ENC)
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   26d5e:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
   26d62:	2a00      	cmp	r2, #0
   26d64:	f2c0 8149 	blt.w	26ffa <event_conn_upd_prep+0x2d2>
			conn->periph.llcp_type = LLCP_NONE;
		} else
#endif /* CONFIG_BT_PERIPHERAL && CONFIG_BT_CTLR_LE_ENC */
		{
			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;
   26d68:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   26d6c:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5

		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   26d70:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   26d74:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
		conn->llcp_cu.ack = conn->llcp_cu.req;
   26d78:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
   26d7c:	f884 110d 	strb.w	r1, [r4, #269]	; 0x10d
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   26d80:	4293      	cmp	r3, r2
   26d82:	d006      	beq.n	26d92 <event_conn_upd_prep+0x6a>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
   26d84:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   26d88:	f003 030f 	and.w	r3, r3, #15
   26d8c:	2b06      	cmp	r3, #6
   26d8e:	f000 823c 	beq.w	2720a <event_conn_upd_prep+0x4e2>
	return conn_upd_curr && (conn_upd_curr != conn);
}

static inline void cpr_active_check_and_reset(struct ll_conn *conn)
{
	if (conn == conn_upd_curr) {
   26d92:	4ba7      	ldr	r3, [pc, #668]	; (27030 <event_conn_upd_prep+0x308>)
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
   26d94:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
   26d98:	681a      	ldr	r2, [r3, #0]
   26d9a:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
   26d9c:	bf04      	itt	eq
   26d9e:	2200      	moveq	r2, #0
   26da0:	601a      	streq	r2, [r3, #0]
		LL_ASSERT(rx && rx->hdr.link);
   26da2:	2d00      	cmp	r5, #0
   26da4:	f000 8131 	beq.w	2700a <event_conn_upd_prep+0x2e2>
   26da8:	682b      	ldr	r3, [r5, #0]
   26daa:	2b00      	cmp	r3, #0
   26dac:	f000 812d 	beq.w	2700a <event_conn_upd_prep+0x2e2>
		conn->llcp_rx = rx->hdr.link->mem;
   26db0:	685b      	ldr	r3, [r3, #4]

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
   26db2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
		conn->llcp_rx = rx->hdr.link->mem;
   26db4:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
		if ((conn->llcp_cu.interval != lll->interval) ||
   26db8:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
   26dbc:	4293      	cmp	r3, r2
   26dbe:	d105      	bne.n	26dcc <event_conn_upd_prep+0xa4>
   26dc0:	f8b4 1112 	ldrh.w	r1, [r4, #274]	; 0x112
   26dc4:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   26dc6:	4291      	cmp	r1, r2
   26dc8:	f000 8203 	beq.w	271d2 <event_conn_upd_prep+0x4aa>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
				       lll->interval * CONN_INT_UNIT_US) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
   26dcc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   26dce:	80eb      	strh	r3, [r5, #6]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   26dd0:	2319      	movs	r3, #25
   26dd2:	712b      	strb	r3, [r5, #4]

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
   26dd4:	2300      	movs	r3, #0
   26dd6:	772b      	strb	r3, [r5, #28]
			cu->interval = conn->llcp_cu.interval;
   26dd8:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
   26ddc:	83eb      	strh	r3, [r5, #30]
			cu->latency = conn->llcp_cu.latency;
   26dde:	f8b4 3112 	ldrh.w	r3, [r4, #274]	; 0x112
   26de2:	842b      	strh	r3, [r5, #32]
			cu->timeout = conn->llcp_cu.timeout;
   26de4:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
#if defined(CONFIG_BT_CTLR_RX_ENQUEUE_HOLD)
			/* hold node rx until the instant's anchor point sync */
			rx_hold_put(conn, rx->hdr.link, rx);
#else /* !CONFIG_BT_CTLR_RX_ENQUEUE_HOLD */
			/* enqueue rx node towards Thread */
			ll_rx_put(rx->hdr.link, rx);
   26de8:	6828      	ldr	r0, [r5, #0]
			cu->timeout = conn->llcp_cu.timeout;
   26dea:	846b      	strh	r3, [r5, #34]	; 0x22
			ll_rx_put(rx->hdr.link, rx);
   26dec:	4629      	mov	r1, r5
   26dee:	f00c fac3 	bl	33378 <ll_rx_put>
			ll_rx_sched();
   26df2:	f00c facb 	bl	3338c <ll_rx_sched>
			ll_rx_sched();
		}

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
   26df6:	68a3      	ldr	r3, [r4, #8]
   26df8:	2b00      	cmp	r3, #0
   26dfa:	f2c0 80f2 	blt.w	26fe2 <event_conn_upd_prep+0x2ba>
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
   26dfe:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
		latency = conn_interval_old / conn->llcp_cu.interval;
   26e02:	f8b4 5110 	ldrh.w	r5, [r4, #272]	; 0x110
		conn_interval_old = instant_latency * lll->interval;
   26e06:	fb1c fc09 	smulbb	ip, ip, r9
   26e0a:	fa1f fc8c 	uxth.w	ip, ip
		latency = conn_interval_old / conn->llcp_cu.interval;
   26e0e:	fbbc f3f5 	udiv	r3, ip, r5
		conn_interval_new = latency * conn->llcp_cu.interval;
   26e12:	fb15 f003 	smulbb	r0, r5, r3
   26e16:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
   26e18:	4584      	cmp	ip, r0
		latency = conn_interval_old / conn->llcp_cu.interval;
   26e1a:	fa1f fa83 	uxth.w	sl, r3
		if (conn_interval_new > conn_interval_old) {
   26e1e:	f080 80ce 	bcs.w	26fbe <event_conn_upd_prep+0x296>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
   26e22:	eba0 000c 	sub.w	r0, r0, ip
   26e26:	f240 42e2 	movw	r2, #1250	; 0x4e2
   26e2a:	4982      	ldr	r1, [pc, #520]	; (27034 <event_conn_upd_prep+0x30c>)
   26e2c:	fb02 f000 	mul.w	r0, r2, r0
   26e30:	fba0 0101 	umull	r0, r1, r0, r1
   26e34:	a37c      	add	r3, pc, #496	; (adr r3, 27028 <event_conn_upd_prep+0x300>)
   26e36:	e9d3 2300 	ldrd	r2, r3, [r3]
   26e3a:	f7ff f961 	bl	26100 <__aeabi_uldivmod>
   26e3e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   26e42:	4480      	add	r8, r0
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
				(conn_interval_old - conn_interval_new) *
				CONN_INT_UNIT_US);
		}
		lll->latency_prepare += lazy;
		lll->latency_prepare -= (instant_latency - latency);
   26e44:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   26e46:	441f      	add	r7, r3
   26e48:	1bbf      	subs	r7, r7, r6
			CONN_INT_UNIT_US;
		periodic_us = conn_interval_us;

		if (0) {
#if defined(CONFIG_BT_PERIPHERAL)
		} else if (lll->role) {
   26e4a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		lll->latency_prepare -= (instant_latency - latency);
   26e4e:	4457      	add	r7, sl
   26e50:	85e7      	strh	r7, [r4, #46]	; 0x2e
		} else if (lll->role) {
   26e52:	2b00      	cmp	r3, #0
		conn_interval_us = conn->llcp_cu.interval *
   26e54:	f240 47e2 	movw	r7, #1250	; 0x4e2
   26e58:	fb07 f605 	mul.w	r6, r7, r5
		} else if (lll->role) {
   26e5c:	f2c0 8168 	blt.w	27130 <event_conn_upd_prep+0x408>
			 */
			ticks_win_offset += 1U;
#endif /* CONFIG_BT_CENTRAL */

		} else {
			LL_ASSERT(0);
   26e60:	4a75      	ldr	r2, [pc, #468]	; (27038 <event_conn_upd_prep+0x310>)
   26e62:	4976      	ldr	r1, [pc, #472]	; (2703c <event_conn_upd_prep+0x314>)
   26e64:	4876      	ldr	r0, [pc, #472]	; (27040 <event_conn_upd_prep+0x318>)
   26e66:	f44f 6358 	mov.w	r3, #3456	; 0xd80
   26e6a:	f01b fbad 	bl	425c8 <assert_print>
   26e6e:	4040      	eors	r0, r0
   26e70:	f380 8811 	msr	BASEPRI, r0
   26e74:	f04f 0003 	mov.w	r0, #3
   26e78:	df02      	svc	2
		uint32_t ticks_win_offset = 0U;
   26e7a:	2700      	movs	r7, #0
		periodic_us = conn_interval_us;
   26e7c:	46b3      	mov	fp, r6

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
					  conn_interval_us);
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   26e7e:	4a71      	ldr	r2, [pc, #452]	; (27044 <event_conn_upd_prep+0x31c>)
		lll->interval = conn->llcp_cu.interval;
   26e80:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
   26e84:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   26e88:	486f      	ldr	r0, [pc, #444]	; (27048 <event_conn_upd_prep+0x320>)
		lll->interval = conn->llcp_cu.interval;
   26e8a:	f8c4 102a 	str.w	r1, [r4, #42]	; 0x2a
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   26e8e:	4432      	add	r2, r6
   26e90:	fbb2 f2f6 	udiv	r2, r2, r6
   26e94:	f8a4 20c6 	strh.w	r2, [r4, #198]	; 0xc6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
   26e98:	f242 7210 	movw	r2, #10000	; 0x2710
   26e9c:	0c09      	lsrs	r1, r1, #16
   26e9e:	fb02 6303 	mla	r3, r2, r3, r6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   26ea2:	4430      	add	r0, r6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
   26ea4:	3b01      	subs	r3, #1
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   26ea6:	fbb0 f0f6 	udiv	r0, r0, r6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
   26eaa:	fbb3 f3f6 	udiv	r3, r3, r6
   26eae:	f8a4 30c2 	strh.w	r3, [r4, #194]	; 0xc2
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   26eb2:	b283      	uxth	r3, r0
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   26eb4:	1d88      	adds	r0, r1, #6
   26eb6:	4283      	cmp	r3, r0
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   26eb8:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   26ebc:	dd04      	ble.n	26ec8 <event_conn_upd_prep+0x1a0>
   26ebe:	f5c1 417f 	rsb	r1, r1, #65280	; 0xff00
   26ec2:	31fa      	adds	r1, #250	; 0xfa
   26ec4:	440b      	add	r3, r1
   26ec6:	b29b      	uxth	r3, r3
   26ec8:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
				     (conn->apto_reload - (lll->latency + 6)) :
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
   26ecc:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
   26ed0:	071b      	lsls	r3, r3, #28
			conn->supervision_expire = 0U;
   26ed2:	bf44      	itt	mi
   26ed4:	2300      	movmi	r3, #0
   26ed6:	f8a4 30c4 	strhmi.w	r3, [r4, #196]	; 0xc4
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		uint32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
   26eda:	2102      	movs	r1, #2
   26edc:	2001      	movs	r0, #1
   26ede:	f014 ff9d 	bl	3be1c <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
   26ee2:	2200      	movs	r2, #0
   26ee4:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
   26ee6:	4682      	mov	sl, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
   26ee8:	2001      	movs	r0, #1
   26eea:	f009 f939 	bl	30160 <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   26eee:	4957      	ldr	r1, [pc, #348]	; (2704c <event_conn_upd_prep+0x324>)
   26ef0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
   26ef4:	4620      	mov	r0, r4
   26ef6:	f009 f8c3 	bl	30080 <mem_index_get>
			      0);
#endif

		/* start peripheral/central with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   26efa:	f100 0903 	add.w	r9, r0, #3
   26efe:	fa5f f989 	uxtb.w	r9, r9
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
   26f02:	4b53      	ldr	r3, [pc, #332]	; (27050 <event_conn_upd_prep+0x328>)
   26f04:	9400      	str	r4, [sp, #0]
   26f06:	464a      	mov	r2, r9
   26f08:	2101      	movs	r1, #1
   26f0a:	2000      	movs	r0, #0
   26f0c:	f00a fadc 	bl	314c8 <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   26f10:	f030 0302 	bics.w	r3, r0, #2
   26f14:	d00c      	beq.n	26f30 <event_conn_upd_prep+0x208>
   26f16:	4a48      	ldr	r2, [pc, #288]	; (27038 <event_conn_upd_prep+0x310>)
   26f18:	494e      	ldr	r1, [pc, #312]	; (27054 <event_conn_upd_prep+0x32c>)
   26f1a:	4849      	ldr	r0, [pc, #292]	; (27040 <event_conn_upd_prep+0x318>)
   26f1c:	f640 53af 	movw	r3, #3503	; 0xdaf
   26f20:	f01b fb52 	bl	425c8 <assert_print>
   26f24:	4040      	eors	r0, r0
   26f26:	f380 8811 	msr	BASEPRI, r0
   26f2a:	f04f 0003 	mov.w	r0, #3
   26f2e:	df02      	svc	2
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
   26f30:	4e40      	ldr	r6, [pc, #256]	; (27034 <event_conn_upd_prep+0x30c>)
   26f32:	fbab 6b06 	umull	r6, fp, fp, r6
   26f36:	a33c      	add	r3, pc, #240	; (adr r3, 27028 <event_conn_upd_prep+0x300>)
   26f38:	e9d3 2300 	ldrd	r2, r3, [r3]
   26f3c:	4630      	mov	r0, r6
   26f3e:	4659      	mov	r1, fp
   26f40:	f7ff f8de 	bl	26100 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   26f44:	9408      	str	r4, [sp, #32]
   26f46:	9406      	str	r4, [sp, #24]
   26f48:	6923      	ldr	r3, [r4, #16]
   26f4a:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(periodic_us),
   26f4c:	4b42      	ldr	r3, [pc, #264]	; (27058 <event_conn_upd_prep+0x330>)
   26f4e:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
   26f52:	fba5 3103 	umull	r3, r1, r5, r3
   26f56:	1af0      	subs	r0, r6, r3
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   26f58:	4b40      	ldr	r3, [pc, #256]	; (2705c <event_conn_upd_prep+0x334>)
   26f5a:	9307      	str	r3, [sp, #28]
				     HAL_TICKER_REMAINDER(periodic_us),
   26f5c:	f04f 0207 	mov.w	r2, #7
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   26f60:	4b3f      	ldr	r3, [pc, #252]	; (27060 <event_conn_upd_prep+0x338>)
   26f62:	9305      	str	r3, [sp, #20]
				     HAL_TICKER_REMAINDER(periodic_us),
   26f64:	fb02 1105 	mla	r1, r2, r5, r1
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   26f68:	f64f 73fe 	movw	r3, #65534	; 0xfffe
				     HAL_TICKER_REMAINDER(periodic_us),
   26f6c:	eb6b 0101 	sbc.w	r1, fp, r1
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   26f70:	9303      	str	r3, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
   26f72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   26f76:	2300      	movs	r3, #0
   26f78:	f7ff f8c2 	bl	26100 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   26f7c:	4643      	mov	r3, r8
   26f7e:	e9cd 5001 	strd	r5, r0, [sp, #4]
   26f82:	9700      	str	r7, [sp, #0]
   26f84:	464a      	mov	r2, r9
   26f86:	2101      	movs	r1, #1
   26f88:	2000      	movs	r0, #0
   26f8a:	f00a fa11 	bl	313b0 <ticker_start>
#else
				     ull_central_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   26f8e:	f030 0302 	bics.w	r3, r0, #2
   26f92:	d00c      	beq.n	26fae <event_conn_upd_prep+0x286>
   26f94:	4a28      	ldr	r2, [pc, #160]	; (27038 <event_conn_upd_prep+0x310>)
   26f96:	492f      	ldr	r1, [pc, #188]	; (27054 <event_conn_upd_prep+0x32c>)
   26f98:	4829      	ldr	r0, [pc, #164]	; (27040 <event_conn_upd_prep+0x318>)
   26f9a:	f640 53c9 	movw	r3, #3529	; 0xdc9
   26f9e:	f01b fb13 	bl	425c8 <assert_print>
   26fa2:	4040      	eors	r0, r0
   26fa4:	f380 8811 	msr	BASEPRI, r0
   26fa8:	f04f 0003 	mov.w	r0, #3
   26fac:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
   26fae:	f1ba 0f00 	cmp.w	sl, #0
   26fb2:	f040 8108 	bne.w	271c6 <event_conn_upd_prep+0x49e>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
				      TICKER_USER_ID_ULL_LOW, 1);
		}
#endif

		return 0;
   26fb6:	2000      	movs	r0, #0
	}

	return -EINPROGRESS;
}
   26fb8:	b00b      	add	sp, #44	; 0x2c
   26fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   26fbe:	fb05 c113 	mls	r1, r5, r3, ip
   26fc2:	481c      	ldr	r0, [pc, #112]	; (27034 <event_conn_upd_prep+0x30c>)
   26fc4:	f240 43e2 	movw	r3, #1250	; 0x4e2
   26fc8:	b289      	uxth	r1, r1
   26fca:	fb03 f101 	mul.w	r1, r3, r1
   26fce:	fba1 0100 	umull	r0, r1, r1, r0
   26fd2:	a315      	add	r3, pc, #84	; (adr r3, 27028 <event_conn_upd_prep+0x300>)
   26fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
   26fd8:	f7ff f892 	bl	26100 <__aeabi_uldivmod>
   26fdc:	eba8 0800 	sub.w	r8, r8, r0
   26fe0:	e730      	b.n	26e44 <event_conn_upd_prep+0x11c>
			uint32_t ticks_prepare_to_start =
   26fe2:	68e1      	ldr	r1, [r4, #12]
   26fe4:	6862      	ldr	r2, [r4, #4]
			conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
   26fe6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   26fea:	4291      	cmp	r1, r2
   26fec:	bf2c      	ite	cs
   26fee:	4488      	addcs	r8, r1
   26ff0:	4490      	addcc	r8, r2
   26ff2:	60a3      	str	r3, [r4, #8]
			ticks_at_expire -= (conn->ull.ticks_prepare_to_start -
   26ff4:	eba8 0803 	sub.w	r8, r8, r3
   26ff8:	e701      	b.n	26dfe <event_conn_upd_prep+0xd6>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   26ffa:	f890 20d9 	ldrb.w	r2, [r0, #217]	; 0xd9
   26ffe:	2a00      	cmp	r2, #0
   27000:	f43f aeb2 	beq.w	26d68 <event_conn_upd_prep+0x40>
			conn->periph.llcp_type = LLCP_NONE;
   27004:	f880 30d9 	strb.w	r3, [r0, #217]	; 0xd9
   27008:	e6b2      	b.n	26d70 <event_conn_upd_prep+0x48>
		LL_ASSERT(rx && rx->hdr.link);
   2700a:	4a0b      	ldr	r2, [pc, #44]	; (27038 <event_conn_upd_prep+0x310>)
   2700c:	4915      	ldr	r1, [pc, #84]	; (27064 <event_conn_upd_prep+0x33c>)
   2700e:	480c      	ldr	r0, [pc, #48]	; (27040 <event_conn_upd_prep+0x318>)
   27010:	f640 43fa 	movw	r3, #3322	; 0xcfa
   27014:	f01b fad8 	bl	425c8 <assert_print>
   27018:	4040      	eors	r0, r0
   2701a:	f380 8811 	msr	BASEPRI, r0
   2701e:	f04f 0003 	mov.w	r0, #3
   27022:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   27024:	682b      	ldr	r3, [r5, #0]
   27026:	e6c3      	b.n	26db0 <event_conn_upd_prep+0x88>
   27028:	1afd498d 	.word	0x1afd498d
   2702c:	00000007 	.word	0x00000007
   27030:	20002968 	.word	0x20002968
   27034:	3b9aca00 	.word	0x3b9aca00
   27038:	00049c60 	.word	0x00049c60
   2703c:	00049810 	.word	0x00049810
   27040:	000497b0 	.word	0x000497b0
   27044:	026259ff 	.word	0x026259ff
   27048:	01c9c37f 	.word	0x01c9c37f
   2704c:	20001618 	.word	0x20001618
   27050:	00034bd9 	.word	0x00034bd9
   27054:	00049d40 	.word	0x00049d40
   27058:	1afd498d 	.word	0x1afd498d
   2705c:	00034b81 	.word	0x00034b81
   27060:	00039255 	.word	0x00039255
   27064:	00049d2c 	.word	0x00049d2c
		rx = ll_pdu_rx_alloc_peek(1);
   27068:	2001      	movs	r0, #1
   2706a:	f00c f995 	bl	33398 <ll_pdu_rx_alloc_peek>
		if (!rx) {
   2706e:	4606      	mov	r6, r0
   27070:	2800      	cmp	r0, #0
   27072:	f000 80dc 	beq.w	2722e <event_conn_upd_prep+0x506>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   27076:	487c      	ldr	r0, [pc, #496]	; (27268 <event_conn_upd_prep+0x540>)
   27078:	f008 ffca 	bl	30010 <mem_acquire>
		if (!tx) {
   2707c:	4605      	mov	r5, r0
   2707e:	2800      	cmp	r0, #0
   27080:	f000 80d5 	beq.w	2722e <event_conn_upd_prep+0x506>
	if (!conn_upd_curr) {
   27084:	4b79      	ldr	r3, [pc, #484]	; (2726c <event_conn_upd_prep+0x544>)
   27086:	681a      	ldr	r2, [r3, #0]
   27088:	2a00      	cmp	r2, #0
   2708a:	f000 80c7 	beq.w	2721c <event_conn_upd_prep+0x4f4>
		(void)ll_pdu_rx_alloc();
   2708e:	f00c f9a5 	bl	333dc <ll_pdu_rx_alloc>
		rx->hdr.link->mem = conn->llcp_rx;
   27092:	6833      	ldr	r3, [r6, #0]
   27094:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   27098:	605a      	str	r2, [r3, #4]
		conn->llcp_rx = rx;
   2709a:	f8c4 6108 	str.w	r6, [r4, #264]	; 0x108
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   2709e:	792b      	ldrb	r3, [r5, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
   270a0:	2100      	movs	r1, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   270a2:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
   270a6:	220c      	movs	r2, #12
   270a8:	716a      	strb	r2, [r5, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   270aa:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
   270ac:	71e9      	strb	r1, [r5, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
   270ae:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
   270b2:	722b      	strb	r3, [r5, #8]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
   270b4:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   270b8:	4a6d      	ldr	r2, [pc, #436]	; (27270 <event_conn_upd_prep+0x548>)
   270ba:	fba2 2303 	umull	r2, r3, r2, r3
   270be:	0a9b      	lsrs	r3, r3, #10
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
   270c0:	f8a5 3009 	strh.w	r3, [r5, #9]
		sys_cpu_to_le16(conn->llcp_cu.interval);
   270c4:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
   270c8:	f8a5 300b 	strh.w	r3, [r5, #11]
		sys_cpu_to_le16(conn->llcp_cu.latency);
   270cc:	f8b4 3112 	ldrh.w	r3, [r4, #274]	; 0x112
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
   270d0:	f8a5 300d 	strh.w	r3, [r5, #13]
		sys_cpu_to_le16(conn->llcp_cu.timeout);
   270d4:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
   270d8:	f8a5 300f 	strh.w	r3, [r5, #15]
					      conn->lll.latency + 6;
   270dc:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   270de:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
					      conn->lll.latency + 6;
   270e2:	3306      	adds	r3, #6
   270e4:	444b      	add	r3, r9
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   270e6:	f361 0202 	bfi	r2, r1, #0, #3
					      conn->lll.latency + 6;
   270ea:	b29b      	uxth	r3, r3
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   270ec:	f884 210e 	strb.w	r2, [r4, #270]	; 0x10e
		conn->llcp.conn_upd.instant = event_counter +
   270f0:	f8a4 30e8 	strh.w	r3, [r4, #232]	; 0xe8
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
   270f4:	f8a5 3011 	strh.w	r3, [r5, #17]
		conn->llcp_cu.pause_tx = 1U;
   270f8:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
		if (!conn->tx_ctrl) {
   270fc:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
	    conn->tx_head &&
   27100:	f8d4 11cc 	ldr.w	r1, [r4, #460]	; 0x1cc
		conn->llcp_cu.pause_tx = 1U;
   27104:	f043 0310 	orr.w	r3, r3, #16
   27108:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
		if (!conn->tx_ctrl) {
   2710c:	2a00      	cmp	r2, #0
   2710e:	f000 8087 	beq.w	27220 <event_conn_upd_prep+0x4f8>
	tx->next = conn->tx_ctrl_last->next;
   27112:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   27116:	681b      	ldr	r3, [r3, #0]
   27118:	602b      	str	r3, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   2711a:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   2711e:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
   27120:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
	if (!tx->next) {
   27124:	682b      	ldr	r3, [r5, #0]
   27126:	2b00      	cmp	r3, #0
   27128:	d07e      	beq.n	27228 <event_conn_upd_prep+0x500>
	return -EINPROGRESS;
   2712a:	f06f 0076 	mvn.w	r0, #118	; 0x76
   2712e:	e743      	b.n	26fb8 <event_conn_upd_prep+0x290>
				lll->periph.window_widening_periodic_us *
   27130:	6c22      	ldr	r2, [r4, #64]	; 0x40
			lll->periph.window_widening_prepare_us -=
   27132:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   27134:	fb02 3319 	mls	r3, r2, r9, r3
   27138:	64a3      	str	r3, [r4, #72]	; 0x48
				ceiling_fraction(((lll_clock_ppm_local_get() +
   2713a:	f012 ffd9 	bl	3a0f0 <lll_clock_ppm_local_get>
   2713e:	4605      	mov	r5, r0
   27140:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
   27144:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   27148:	f012 ffd6 	bl	3a0f8 <lll_clock_ppm_get>
   2714c:	4405      	add	r5, r0
   2714e:	fb06 f505 	mul.w	r5, r6, r5
   27152:	4b48      	ldr	r3, [pc, #288]	; (27274 <event_conn_upd_prep+0x54c>)
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
   27154:	f894 211c 	ldrb.w	r2, [r4, #284]	; 0x11c
				ceiling_fraction(((lll_clock_ppm_local_get() +
   27158:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
   2715c:	f205 253f 	addw	r5, r5, #575	; 0x23f
   27160:	fba3 3505 	umull	r3, r5, r3, r5
   27164:	0cad      	lsrs	r5, r5, #18
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
   27166:	fb07 f202 	mul.w	r2, r7, r2
			lll->periph.window_widening_prepare_us +=
   2716a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			lll->periph.window_size_prepare_us =
   2716c:	6522      	str	r2, [r4, #80]	; 0x50
				lll->periph.window_widening_periodic_us *
   2716e:	fb05 f00a 	mul.w	r0, r5, sl
				(conn_interval_us >> 1) - EVENT_IFS_US;
   27172:	0872      	lsrs	r2, r6, #1
			lll->periph.window_widening_prepare_us +=
   27174:	4403      	add	r3, r0
				(conn_interval_us >> 1) - EVENT_IFS_US;
   27176:	3a96      	subs	r2, #150	; 0x96
   27178:	4293      	cmp	r3, r2
   2717a:	bf28      	it	cs
   2717c:	4613      	movcs	r3, r2
			lll->periph.window_widening_periodic_us =
   2717e:	6425      	str	r5, [r4, #64]	; 0x40
			periodic_us -= lll->periph.window_widening_periodic_us;
   27180:	eba6 0b05 	sub.w	fp, r6, r5
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   27184:	4d3c      	ldr	r5, [pc, #240]	; (27278 <event_conn_upd_prep+0x550>)
   27186:	e9c4 2311 	strd	r2, r3, [r4, #68]	; 0x44
			conn->periph.ticks_to_offset = 0U;
   2718a:	2300      	movs	r3, #0
   2718c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   27190:	fba0 0105 	umull	r0, r1, r0, r5
   27194:	a332      	add	r3, pc, #200	; (adr r3, 27260 <event_conn_upd_prep+0x538>)
   27196:	e9d3 2300 	ldrd	r2, r3, [r3]
   2719a:	f7fe ffb1 	bl	26100 <__aeabi_uldivmod>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   2719e:	4b34      	ldr	r3, [pc, #208]	; (27270 <event_conn_upd_prep+0x548>)
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   271a0:	eba8 0800 	sub.w	r8, r8, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   271a4:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
   271a8:	fba3 3000 	umull	r3, r0, r3, r0
   271ac:	0a80      	lsrs	r0, r0, #10
   271ae:	fb07 f000 	mul.w	r0, r7, r0
   271b2:	a32b      	add	r3, pc, #172	; (adr r3, 27260 <event_conn_upd_prep+0x538>)
   271b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   271b8:	fba0 0105 	umull	r0, r1, r0, r5
   271bc:	f7fe ffa0 	bl	26100 <__aeabi_uldivmod>
   271c0:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			periodic_us -= lll->periph.window_widening_periodic_us;
   271c4:	e65b      	b.n	26e7e <event_conn_upd_prep+0x156>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
   271c6:	2201      	movs	r2, #1
   271c8:	2102      	movs	r1, #2
   271ca:	4610      	mov	r0, r2
   271cc:	f008 ffc8 	bl	30160 <mayfly_enable>
   271d0:	e6f1      	b.n	26fb6 <event_conn_upd_prep+0x28e>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
   271d2:	f240 41e2 	movw	r1, #1250	; 0x4e2
   271d6:	f8b4 2114 	ldrh.w	r2, [r4, #276]	; 0x114
   271da:	fb01 f303 	mul.w	r3, r1, r3
   271de:	f242 7110 	movw	r1, #10000	; 0x2710
   271e2:	fb01 3202 	mla	r2, r1, r2, r3
   271e6:	3a01      	subs	r2, #1
   271e8:	fbb2 f3f3 	udiv	r3, r2, r3
		    (conn->llcp_cu.latency != lll->latency) ||
   271ec:	f8b4 20c2 	ldrh.w	r2, [r4, #194]	; 0xc2
   271f0:	b29b      	uxth	r3, r3
   271f2:	429a      	cmp	r2, r3
   271f4:	f47f adea 	bne.w	26dcc <event_conn_upd_prep+0xa4>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   271f8:	2301      	movs	r3, #1
			ll_rx_put(rx->hdr.link, rx);
   271fa:	6828      	ldr	r0, [r5, #0]
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   271fc:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   271fe:	4629      	mov	r1, r5
   27200:	f00c f8ba 	bl	33378 <ll_rx_put>
			ll_rx_sched();
   27204:	f00c f8c2 	bl	3338c <ll_rx_sched>
   27208:	e5f5      	b.n	26df6 <event_conn_upd_prep+0xce>
	return 0;
}

static void cpr_cache_initiate_or_complete(struct ll_conn *conn)
{
	if (conn->llcp_conn_param.cache.timeout) {
   2720a:	f8b4 3196 	ldrh.w	r3, [r4, #406]	; 0x196
   2720e:	b98b      	cbnz	r3, 27234 <event_conn_upd_prep+0x50c>
		conn->llcp_conn_param.remote = 0U;

		/* Invalidate cache */
		conn->llcp_conn_param.cache.timeout = 0U;
	} else {
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   27210:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
			conn->procedure_expire = 0U;
   27214:	2300      	movs	r3, #0
   27216:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   2721a:	e5ba      	b.n	26d92 <event_conn_upd_prep+0x6a>
		conn_upd_curr = conn;
   2721c:	601c      	str	r4, [r3, #0]
   2721e:	e736      	b.n	2708e <event_conn_upd_prep+0x366>
			tx->next = conn->tx_head;
   27220:	6029      	str	r1, [r5, #0]
				conn->tx_ctrl = tx;
   27222:	e9c4 5573 	strd	r5, r5, [r4, #460]	; 0x1cc
				conn->tx_ctrl_last = tx;
   27226:	e77b      	b.n	27120 <event_conn_upd_prep+0x3f8>
		conn->tx_data_last = tx;
   27228:	f8c4 51dc 	str.w	r5, [r4, #476]	; 0x1dc
   2722c:	e77d      	b.n	2712a <event_conn_upd_prep+0x402>
			return -ENOBUFS;
   2722e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27232:	e6c1      	b.n	26fb8 <event_conn_upd_prep+0x290>
		conn->llcp_conn_param.timeout =
   27234:	f8a4 318e 	strh.w	r3, [r4, #398]	; 0x18e
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
   27238:	f8b4 3186 	ldrh.w	r3, [r4, #390]	; 0x186
   2723c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   27240:	f043 0310 	orr.w	r3, r3, #16
   27244:	f8a4 3186 	strh.w	r3, [r4, #390]	; 0x186
		conn->llcp_conn_param.interval_min =
   27248:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
   2724c:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
		conn->llcp_conn_param.latency =
   27250:	f8b4 3194 	ldrh.w	r3, [r4, #404]	; 0x194
   27254:	f8a4 318c 	strh.w	r3, [r4, #396]	; 0x18c
		conn->llcp_conn_param.cache.timeout = 0U;
   27258:	2300      	movs	r3, #0
   2725a:	f8a4 3196 	strh.w	r3, [r4, #406]	; 0x196
   2725e:	e7d9      	b.n	27214 <event_conn_upd_prep+0x4ec>
   27260:	1afd498d 	.word	0x1afd498d
   27264:	00000007 	.word	0x00000007
   27268:	20002820 	.word	0x20002820
   2726c:	20002968 	.word	0x20002968
   27270:	d1b71759 	.word	0xd1b71759
   27274:	431bde83 	.word	0x431bde83
   27278:	3b9aca00 	.word	0x3b9aca00
   2727c:	00000000 	.word	0x00000000

00027280 <ull_periph_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param);

void ull_periph_setup(struct node_rx_hdr *rx, struct node_rx_ftr *ftr,
		     struct lll_conn *lll)
{
   27280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	memq_link_t *link;
	uint16_t timeout;
	uint8_t chan_sel;
	void *node;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
   27284:	680b      	ldr	r3, [r1, #0]
   27286:	f8d3 9000 	ldr.w	r9, [r3]
	conn = lll->hdr.parent;

	/* Populate the peripheral context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;

	peer_addr_type = pdu_adv->tx_addr;
   2728a:	7f03      	ldrb	r3, [r0, #28]
{
   2728c:	b093      	sub	sp, #76	; 0x4c
	conn = lll->hdr.parent;
   2728e:	4690      	mov	r8, r2
	peer_addr_type = pdu_adv->tx_addr;
   27290:	f3c3 1380 	ubfx	r3, r3, #6, #1
{
   27294:	4616      	mov	r6, r2
   27296:	4605      	mov	r5, r0
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
   27298:	2206      	movs	r2, #6
{
   2729a:	460f      	mov	r7, r1
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
   2729c:	f100 011e 	add.w	r1, r0, #30
   272a0:	a810      	add	r0, sp, #64	; 0x40
	peer_addr_type = pdu_adv->tx_addr;
   272a2:	930a      	str	r3, [sp, #40]	; 0x28
	conn = lll->hdr.parent;
   272a4:	f858 4b08 	ldr.w	r4, [r8], #8
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
   272a8:	f01d f836 	bl	44318 <memcpy>
		peer_addr_type += 2;
	} else {
#else /* CONFIG_BT_CTLR_PRIVACY */
	if (1) {
#endif /* CONFIG_BT_CTLR_PRIVACY */
		memcpy(peer_id_addr, peer_addr, BDADDR_SIZE);
   272ac:	a910      	add	r1, sp, #64	; 0x40
   272ae:	2206      	movs	r2, #6
   272b0:	a80e      	add	r0, sp, #56	; 0x38
   272b2:	f01d f831 	bl	44318 <memcpy>
	}

	/* Use the link stored in the node rx to enqueue connection
	 * complete node rx towards LL context.
	 */
	link = rx->link;
   272b6:	4629      	mov	r1, r5
	conn->own_id_addr_type = own_id_addr_type;
	(void)memcpy(conn->own_id_addr, own_id_addr,
		     sizeof(conn->own_id_addr));
#endif /* CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN */

	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
   272b8:	4640      	mov	r0, r8
	link = rx->link;
   272ba:	f851 bb2e 	ldr.w	fp, [r1], #46
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
   272be:	2203      	movs	r2, #3
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
   272c0:	f106 0a04 	add.w	sl, r6, #4
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
   272c4:	f01d f828 	bl	44318 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
   272c8:	f106 0818 	add.w	r8, r6, #24
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
   272cc:	2204      	movs	r2, #4
   272ce:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   272d2:	4650      	mov	r0, sl
   272d4:	f01d f820 	bl	44318 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
   272d8:	2205      	movs	r2, #5
   272da:	f105 013a 	add.w	r1, r5, #58	; 0x3a
   272de:	4640      	mov	r0, r8
   272e0:	f01d f81a 	bl	44318 <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
   272e4:	4640      	mov	r0, r8
   272e6:	2105      	movs	r1, #5
   272e8:	f009 f874 	bl	303d4 <util_ones_count_get>
   272ec:	7f73      	ldrb	r3, [r6, #29]
   272ee:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   272f2:	f360 0305 	bfi	r3, r0, #0, #6
   272f6:	7773      	strb	r3, [r6, #29]
			       sizeof(lll->data_chan_map));
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
   272f8:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
   272fc:	f3c3 0204 	ubfx	r2, r3, #0, #5
   27300:	77b2      	strb	r2, [r6, #30]
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
   27302:	8eaa      	ldrh	r2, [r5, #52]	; 0x34
   27304:	81f2      	strh	r2, [r6, #14]
	if ((lll->data_chan_count < CHM_USED_COUNT_MIN) ||
   27306:	2801      	cmp	r0, #1
   27308:	d908      	bls.n	2731c <ull_periph_setup+0x9c>
   2730a:	f003 031f 	and.w	r3, r3, #31
   2730e:	331b      	adds	r3, #27
   27310:	f003 031f 	and.w	r3, r3, #31
   27314:	2b0b      	cmp	r3, #11
   27316:	d801      	bhi.n	2731c <ull_periph_setup+0x9c>
   27318:	b292      	uxth	r2, r2
	    (lll->data_chan_hop < CHM_HOP_COUNT_MIN) ||
	    (lll->data_chan_hop > CHM_HOP_COUNT_MAX) ||
   2731a:	b9ca      	cbnz	r2, 27350 <ull_periph_setup+0xd0>

static void invalid_release(struct ull_hdr *hdr, struct lll_conn *lll,
			    memq_link_t *link, struct node_rx_hdr *rx)
{
	/* Reset the advertising disabled callback */
	hdr->disabled_cb = NULL;
   2731c:	2200      	movs	r2, #0
   2731e:	f8c9 2014 	str.w	r2, [r9, #20]

	/* Let the advertiser continue with connectable advertising */
	lll->periph.initiated = 0U;
   27322:	f896 3020 	ldrb.w	r3, [r6, #32]
   27326:	f362 0300 	bfi	r3, r2, #0, #1
   2732a:	f886 3020 	strb.w	r3, [r6, #32]
		struct node_rx_pdu *rx_csa;

		/* pick the rx node instance stored within the
		 * connection rx node.
		 */
		rx_csa = rx->rx_ftr.extra;
   2732e:	68ec      	ldr	r4, [r5, #12]
	rx->type = NODE_RX_TYPE_RELEASE;
   27330:	2601      	movs	r6, #1

		/* Enqueue the connection event to be release */
		ll_rx_put(link, rx);
   27332:	4658      	mov	r0, fp
   27334:	4629      	mov	r1, r5
	rx->type = NODE_RX_TYPE_RELEASE;
   27336:	712e      	strb	r6, [r5, #4]
		ll_rx_put(link, rx);
   27338:	f00c f81e 	bl	33378 <ll_rx_put>
		/* Mark for buffer for release */
		rx->type = NODE_RX_TYPE_RELEASE;
	}

	/* Enqueue connection or CSA event to be release */
	ll_rx_put(link, rx);
   2733c:	6820      	ldr	r0, [r4, #0]
		rx->type = NODE_RX_TYPE_RELEASE;
   2733e:	7126      	strb	r6, [r4, #4]
	ll_rx_put(link, rx);
   27340:	4621      	mov	r1, r4
   27342:	f00c f819 	bl	33378 <ll_rx_put>
	ll_rx_sched();
   27346:	f00c f821 	bl	3338c <ll_rx_sched>
}
   2734a:	b013      	add	sp, #76	; 0x4c
   2734c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	((struct lll_adv *)ftr->param)->conn = NULL;
   27350:	683b      	ldr	r3, [r7, #0]
   27352:	2200      	movs	r2, #0
   27354:	605a      	str	r2, [r3, #4]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
   27356:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   27358:	8233      	strh	r3, [r6, #16]
	conn->periph.sca = pdu_adv->connect_ind.sca;
   2735a:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
   2735e:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
   27362:	f8b6 800e 	ldrh.w	r8, [r6, #14]
	conn->periph.sca = pdu_adv->connect_ind.sca;
   27366:	095b      	lsrs	r3, r3, #5
   27368:	f363 02c5 	bfi	r2, r3, #3, #3
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
   2736c:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
	conn->periph.sca = pdu_adv->connect_ind.sca;
   2736e:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
   27372:	f240 42e2 	movw	r2, #1250	; 0x4e2
   27376:	fb02 f808 	mul.w	r8, r2, r8
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
   2737a:	930c      	str	r3, [sp, #48]	; 0x30
		ceiling_fraction(((lll_clock_ppm_local_get() +
   2737c:	f012 feb8 	bl	3a0f0 <lll_clock_ppm_local_get>
   27380:	900b      	str	r0, [sp, #44]	; 0x2c
   27382:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
   27386:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   2738a:	f012 feb5 	bl	3a0f8 <lll_clock_ppm_get>
   2738e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   27390:	4418      	add	r0, r3
   27392:	fb08 f000 	mul.w	r0, r8, r0
   27396:	4bae      	ldr	r3, [pc, #696]	; (27650 <ull_periph_setup+0x3d0>)
   27398:	f500 2074 	add.w	r0, r0, #999424	; 0xf4000
   2739c:	f200 203f 	addw	r0, r0, #575	; 0x23f
   273a0:	fba3 3000 	umull	r3, r0, r3, r0
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
   273a4:	ea4f 0358 	mov.w	r3, r8, lsr #1
		ceiling_fraction(((lll_clock_ppm_local_get() +
   273a8:	0c80      	lsrs	r0, r0, #18
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
   273aa:	3b96      	subs	r3, #150	; 0x96
	lll->periph.window_widening_periodic_us =
   273ac:	6270      	str	r0, [r6, #36]	; 0x24
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
   273ae:	62b3      	str	r3, [r6, #40]	; 0x28
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
   273b0:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
   273b4:	f240 42e2 	movw	r2, #1250	; 0x4e2
   273b8:	fb02 f303 	mul.w	r3, r2, r3
   273bc:	63b3      	str	r3, [r6, #56]	; 0x38
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
   273be:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   273c0:	4aa4      	ldr	r2, [pc, #656]	; (27654 <ull_periph_setup+0x3d4>)
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
   273c2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
   273c6:	4619      	mov	r1, r3
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   273c8:	4442      	add	r2, r8
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   273ca:	4ba3      	ldr	r3, [pc, #652]	; (27658 <ull_periph_setup+0x3d8>)
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   273cc:	fbb2 f2f8 	udiv	r2, r2, r8
   273d0:	f8a4 20c6 	strh.w	r2, [r4, #198]	; 0xc6
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
   273d4:	b28a      	uxth	r2, r1
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
   273d6:	f242 7110 	movw	r1, #10000	; 0x2710
   273da:	fb01 8202 	mla	r2, r1, r2, r8
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   273de:	4443      	add	r3, r8
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
   273e0:	3a01      	subs	r2, #1
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   273e2:	fbb3 f3f8 	udiv	r3, r3, r8
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
   273e6:	fbb2 f2f8 	udiv	r2, r2, r8
   273ea:	f8a4 20c2 	strh.w	r2, [r4, #194]	; 0xc2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   273ee:	b29a      	uxth	r2, r3
   273f0:	f8a4 20ce 	strh.w	r2, [r4, #206]	; 0xce
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   273f4:	8a31      	ldrh	r1, [r6, #16]
   273f6:	1d88      	adds	r0, r1, #6
   273f8:	4282      	cmp	r2, r0
   273fa:	dd04      	ble.n	27406 <ull_periph_setup+0x186>
   273fc:	f5c1 417f 	rsb	r1, r1, #65280	; 0xff00
   27400:	31fa      	adds	r1, #250	; 0xfa
   27402:	440a      	add	r2, r1
   27404:	b292      	uxth	r2, r2
   27406:	f8a4 20ca 	strh.w	r2, [r4, #202]	; 0xca
	memcpy((void *)&conn->periph.force, &lll->access_addr[0],
   2740a:	4651      	mov	r1, sl
   2740c:	2204      	movs	r2, #4
   2740e:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
   27412:	f01c ff81 	bl	44318 <memcpy>
		chan_sel = pdu_adv->chan_sel;
   27416:	462b      	mov	r3, r5
   27418:	f813 2f1c 	ldrb.w	r2, [r3, #28]!
   2741c:	f3c2 1240 	ubfx	r2, r2, #5, #1
   27420:	920b      	str	r2, [sp, #44]	; 0x2c
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   27422:	07da      	lsls	r2, r3, #31
   27424:	f100 80ef 	bmi.w	27606 <ull_periph_setup+0x386>
	cc->peer_addr_type = peer_addr_type;
   27428:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   2742c:	77ab      	strb	r3, [r5, #30]
	cc->status = 0U;
   2742e:	f44f 7380 	mov.w	r3, #256	; 0x100
	memcpy(cc->peer_addr, peer_id_addr, BDADDR_SIZE);
   27432:	a90e      	add	r1, sp, #56	; 0x38
	cc->status = 0U;
   27434:	83ab      	strh	r3, [r5, #28]
	memcpy(cc->peer_addr, peer_id_addr, BDADDR_SIZE);
   27436:	2206      	movs	r2, #6
   27438:	f105 001f 	add.w	r0, r5, #31
   2743c:	f01c ff6c 	bl	44318 <memcpy>
	cc->interval = lll->interval;
   27440:	89f3      	ldrh	r3, [r6, #14]
   27442:	84eb      	strh	r3, [r5, #38]	; 0x26
	cc->latency = lll->latency;
   27444:	8a33      	ldrh	r3, [r6, #16]
   27446:	852b      	strh	r3, [r5, #40]	; 0x28
	cc->timeout = timeout;
   27448:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
   2744c:	856b      	strh	r3, [r5, #42]	; 0x2a
	cc->sca = conn->periph.sca;
   2744e:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   27452:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   27456:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
	lll->handle = ll_conn_handle_get(conn);
   2745a:	4620      	mov	r0, r4
   2745c:	f00d ffb0 	bl	353c0 <ll_conn_handle_get>
   27460:	81b0      	strh	r0, [r6, #12]
	rx->handle = lll->handle;
   27462:	80e8      	strh	r0, [r5, #6]
		ll_rx_put(link, rx);
   27464:	4629      	mov	r1, r5
   27466:	4658      	mov	r0, fp
		rx_csa = (void *)ftr->extra;
   27468:	687d      	ldr	r5, [r7, #4]
		ll_rx_put(link, rx);
   2746a:	f00b ff85 	bl	33378 <ll_rx_put>
		rx->handle = lll->handle;
   2746e:	89b3      	ldrh	r3, [r6, #12]
   27470:	80eb      	strh	r3, [r5, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
   27472:	231c      	movs	r3, #28
   27474:	712b      	strb	r3, [r5, #4]
		if (chan_sel) {
   27476:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		link = rx->link;
   27478:	f8d5 b000 	ldr.w	fp, [r5]
		if (chan_sel) {
   2747c:	2b00      	cmp	r3, #0
   2747e:	f040 80b8 	bne.w	275f2 <ull_periph_setup+0x372>
   27482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			cs->csa = 0x00;
   27484:	772b      	strb	r3, [r5, #28]
	ll_rx_put(link, rx);
   27486:	4629      	mov	r1, r5
   27488:	4658      	mov	r0, fp
   2748a:	f00b ff75 	bl	33378 <ll_rx_put>
	ll_rx_sched();
   2748e:	f00b ff7d 	bl	3338c <ll_rx_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
   27492:	f896 0045 	ldrb.w	r0, [r6, #69]	; 0x45
	max_tx_time = lll->max_tx_time;
   27496:	f8b6 a040 	ldrh.w	sl, [r6, #64]	; 0x40
	max_rx_time = lll->max_rx_time;
   2749a:	f8b6 5042 	ldrh.w	r5, [r6, #66]	; 0x42
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
   2749e:	2101      	movs	r1, #1
   274a0:	f000 0007 	and.w	r0, r0, #7
   274a4:	f012 fc38 	bl	39d18 <lll_radio_rx_ready_delay_get>
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   274a8:	4455      	add	r5, sl
   274aa:	f505 7561 	add.w	r5, r5, #900	; 0x384
   274ae:	1829      	adds	r1, r5, r0
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
   274b0:	4683      	mov	fp, r0
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   274b2:	486a      	ldr	r0, [pc, #424]	; (2765c <ull_periph_setup+0x3dc>)
	conn->ull.ticks_active_to_start = 0U;
   274b4:	f04f 0a00 	mov.w	sl, #0
	conn->ull.ticks_prepare_to_start =
   274b8:	2331      	movs	r3, #49	; 0x31
   274ba:	60a3      	str	r3, [r4, #8]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   274bc:	fba1 0100 	umull	r0, r1, r1, r0
   274c0:	a361      	add	r3, pc, #388	; (adr r3, 27648 <ull_periph_setup+0x3c8>)
   274c2:	e9d3 2300 	ldrd	r2, r3, [r3]
	conn->ull.ticks_active_to_start = 0U;
   274c6:	f8c4 a004 	str.w	sl, [r4, #4]
	conn->ull.ticks_preempt_to_start =
   274ca:	f8c4 a00c 	str.w	sl, [r4, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   274ce:	f7fe fe17 	bl	26100 <__aeabi_uldivmod>
   274d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn->ull.ticks_slot =
   274d6:	6120      	str	r0, [r4, #16]
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
   274d8:	990c      	ldr	r1, [sp, #48]	; 0x30
	conn_offset_us = ftr->radio_end_us;
   274da:	68fb      	ldr	r3, [r7, #12]
	conn_interval_us -= lll->periph.window_widening_periodic_us;
   274dc:	6a75      	ldr	r5, [r6, #36]	; 0x24
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
   274de:	f240 42e2 	movw	r2, #1250	; 0x4e2
   274e2:	fb02 3301 	mla	r3, r2, r1, r3
	conn_offset_us -= EVENT_JITTER_US;
   274e6:	f203 43b2 	addw	r3, r3, #1202	; 0x4b2
	conn_offset_us -= ready_delay_us;
   274ea:	eba3 030b 	sub.w	r3, r3, fp
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
   274ee:	4652      	mov	r2, sl
   274f0:	2102      	movs	r1, #2
   274f2:	2001      	movs	r0, #1
	conn_offset_us -= ready_delay_us;
   274f4:	930a      	str	r3, [sp, #40]	; 0x28
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
   274f6:	f008 fe33 	bl	30160 <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
   274fa:	4648      	mov	r0, r9
   274fc:	f00d f82e 	bl	3455c <ull_adv_handle_get>
   27500:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   27502:	4b57      	ldr	r3, [pc, #348]	; (27660 <ull_periph_setup+0x3e0>)
   27504:	f8cd 9000 	str.w	r9, [sp]
   27508:	b2d2      	uxtb	r2, r2
   2750a:	4650      	mov	r0, sl
   2750c:	2101      	movs	r1, #1
   2750e:	f009 ffdb 	bl	314c8 <ticker_stop>
}

static void ticker_op_stop_adv_cb(uint32_t status, void *param)
{
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   27512:	2801      	cmp	r0, #1
	conn_interval_us -= lll->periph.window_widening_periodic_us;
   27514:	eba8 0505 	sub.w	r5, r8, r5
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   27518:	f000 8082 	beq.w	27620 <ull_periph_setup+0x3a0>
	if (adv->lll.is_hdcd) {
   2751c:	f899 3024 	ldrb.w	r3, [r9, #36]	; 0x24
   27520:	07db      	lsls	r3, r3, #31
   27522:	d45e      	bmi.n	275e2 <ull_periph_setup+0x362>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   27524:	4620      	mov	r0, r4
   27526:	f00d ff4b 	bl	353c0 <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   2752a:	f8df 9130 	ldr.w	r9, [pc, #304]	; 2765c <ull_periph_setup+0x3dc>
   2752e:	fba5 8509 	umull	r8, r5, r5, r9
   27532:	a345      	add	r3, pc, #276	; (adr r3, 27648 <ull_periph_setup+0x3c8>)
   27534:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   27538:	4682      	mov	sl, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   2753a:	4629      	mov	r1, r5
   2753c:	4640      	mov	r0, r8
   2753e:	f7fe fddf 	bl	26100 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   27542:	68bb      	ldr	r3, [r7, #8]
   27544:	4a47      	ldr	r2, [pc, #284]	; (27664 <ull_periph_setup+0x3e4>)
   27546:	9207      	str	r2, [sp, #28]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   27548:	f10a 0703 	add.w	r7, sl, #3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   2754c:	f1a3 0a49 	sub.w	sl, r3, #73	; 0x49
				     HAL_TICKER_REMAINDER(conn_interval_us),
   27550:	4b45      	ldr	r3, [pc, #276]	; (27668 <ull_periph_setup+0x3e8>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   27552:	9406      	str	r4, [sp, #24]
				     HAL_TICKER_REMAINDER(conn_interval_us),
   27554:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
   27558:	fba6 3103 	umull	r3, r1, r6, r3
   2755c:	ebb8 0003 	subs.w	r0, r8, r3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   27560:	4b42      	ldr	r3, [pc, #264]	; (2766c <ull_periph_setup+0x3ec>)
   27562:	9305      	str	r3, [sp, #20]
   27564:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
   27568:	9308      	str	r3, [sp, #32]
   2756a:	6923      	ldr	r3, [r4, #16]
   2756c:	f04f 0b00 	mov.w	fp, #0
   27570:	e9cd b303 	strd	fp, r3, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
   27574:	f04f 0307 	mov.w	r3, #7
   27578:	fb03 1106 	mla	r1, r3, r6, r1
   2757c:	eb65 0101 	sbc.w	r1, r5, r1
   27580:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   27584:	2300      	movs	r3, #0
   27586:	f7fe fdbb 	bl	26100 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   2758a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   2758c:	e9cd 6001 	strd	r6, r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   27590:	fba3 0109 	umull	r0, r1, r3, r9
   27594:	a32c      	add	r3, pc, #176	; (adr r3, 27648 <ull_periph_setup+0x3c8>)
   27596:	e9d3 2300 	ldrd	r2, r3, [r3]
   2759a:	f7fe fdb1 	bl	26100 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   2759e:	b2ff      	uxtb	r7, r7
   275a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   275a4:	9000      	str	r0, [sp, #0]
   275a6:	4653      	mov	r3, sl
   275a8:	463a      	mov	r2, r7
   275aa:	2101      	movs	r1, #1
   275ac:	4658      	mov	r0, fp
   275ae:	f009 feff 	bl	313b0 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   275b2:	f030 0302 	bics.w	r3, r0, #2
   275b6:	d00c      	beq.n	275d2 <ull_periph_setup+0x352>
   275b8:	4a2d      	ldr	r2, [pc, #180]	; (27670 <ull_periph_setup+0x3f0>)
   275ba:	492e      	ldr	r1, [pc, #184]	; (27674 <ull_periph_setup+0x3f4>)
   275bc:	482e      	ldr	r0, [pc, #184]	; (27678 <ull_periph_setup+0x3f8>)
   275be:	f240 13d7 	movw	r3, #471	; 0x1d7
   275c2:	f01b f801 	bl	425c8 <assert_print>
   275c6:	4040      	eors	r0, r0
   275c8:	f380 8811 	msr	BASEPRI, r0
   275cc:	f04f 0003 	mov.w	r0, #3
   275d0:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
   275d2:	2201      	movs	r2, #1
   275d4:	2102      	movs	r1, #2
   275d6:	4610      	mov	r0, r2
   275d8:	f008 fdc2 	bl	30160 <mayfly_enable>
}
   275dc:	b013      	add	sp, #76	; 0x4c
   275de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   275e2:	2300      	movs	r3, #0
   275e4:	2201      	movs	r2, #1
   275e6:	9300      	str	r3, [sp, #0]
   275e8:	4618      	mov	r0, r3
   275ea:	4611      	mov	r1, r2
   275ec:	f009 ff6c 	bl	314c8 <ticker_stop>
   275f0:	e798      	b.n	27524 <ull_periph_setup+0x2a4>
			lll->data_chan_sel = 1;
   275f2:	7f73      	ldrb	r3, [r6, #29]
   275f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   275f8:	7773      	strb	r3, [r6, #29]
			lll->data_chan_id = lll_chan_id(lll->access_addr);
   275fa:	4650      	mov	r0, sl
   275fc:	f011 ff4e 	bl	3949c <lll_chan_id>
   27600:	2301      	movs	r3, #1
   27602:	83f0      	strh	r0, [r6, #30]
			cs->csa = 0x01;
   27604:	e73e      	b.n	27484 <ull_periph_setup+0x204>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   27606:	4a1a      	ldr	r2, [pc, #104]	; (27670 <ull_periph_setup+0x3f0>)
   27608:	491c      	ldr	r1, [pc, #112]	; (2767c <ull_periph_setup+0x3fc>)
   2760a:	481b      	ldr	r0, [pc, #108]	; (27678 <ull_periph_setup+0x3f8>)
   2760c:	23ff      	movs	r3, #255	; 0xff
   2760e:	f01a ffdb 	bl	425c8 <assert_print>
   27612:	4040      	eors	r0, r0
   27614:	f380 8811 	msr	BASEPRI, r0
   27618:	f04f 0003 	mov.w	r0, #3
   2761c:	df02      	svc	2
   2761e:	e703      	b.n	27428 <ull_periph_setup+0x1a8>
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   27620:	f00b ff8a 	bl	33538 <ull_disable_mark_get>
   27624:	4581      	cmp	r9, r0
   27626:	f43f af79 	beq.w	2751c <ull_periph_setup+0x29c>
   2762a:	4a11      	ldr	r2, [pc, #68]	; (27670 <ull_periph_setup+0x3f0>)
   2762c:	4914      	ldr	r1, [pc, #80]	; (27680 <ull_periph_setup+0x400>)
   2762e:	4812      	ldr	r0, [pc, #72]	; (27678 <ull_periph_setup+0x3f8>)
   27630:	f240 23a1 	movw	r3, #673	; 0x2a1
   27634:	f01a ffc8 	bl	425c8 <assert_print>
   27638:	4040      	eors	r0, r0
   2763a:	f380 8811 	msr	BASEPRI, r0
   2763e:	f04f 0003 	mov.w	r0, #3
   27642:	df02      	svc	2
		  param == ull_disable_mark_get());
}
   27644:	e76a      	b.n	2751c <ull_periph_setup+0x29c>
   27646:	bf00      	nop
   27648:	1afd498d 	.word	0x1afd498d
   2764c:	00000007 	.word	0x00000007
   27650:	431bde83 	.word	0x431bde83
   27654:	026259ff 	.word	0x026259ff
   27658:	01c9c37f 	.word	0x01c9c37f
   2765c:	3b9aca00 	.word	0x3b9aca00
   27660:	00039219 	.word	0x00039219
   27664:	000391e9 	.word	0x000391e9
   27668:	1afd498d 	.word	0x1afd498d
   2766c:	00039255 	.word	0x00039255
   27670:	00049e84 	.word	0x00049e84
   27674:	00049d40 	.word	0x00049d40
   27678:	000497b0 	.word	0x000497b0
   2767c:	0004989c 	.word	0x0004989c
   27680:	00049ee0 	.word	0x00049ee0
   27684:	00000000 	.word	0x00000000

00027688 <nrf_flash_sync_exe>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
	_ticker_sync_context.slot = duration;
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
   27688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2768c:	b08f      	sub	sp, #60	; 0x3c
			      /* (MAYFLY_CALL_ID_PROGRAM) */
			   ticker_id, /* flash ticker id */
			   ticker_ticks_now_get(), /* current tick */
			   0, /* first int. immediately */
			   /* period */
			   HAL_TICKER_US_TO_TICKS(
   2768e:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 27768 <nrf_flash_sync_exe+0xe0>
{
   27692:	900b      	str	r0, [sp, #44]	; 0x2c
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   27694:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   27698:	f10d 0036 	add.w	r0, sp, #54	; 0x36
   2769c:	f00b fee6 	bl	3346c <ll_timeslice_ticker_id_get>
			   HAL_TICKER_US_TO_TICKS(
   276a0:	4f32      	ldr	r7, [pc, #200]	; (2776c <nrf_flash_sync_exe+0xe4>)
	ret = ticker_start(instance_index,
   276a2:	f89d a036 	ldrb.w	sl, [sp, #54]	; 0x36
   276a6:	f89d b037 	ldrb.w	fp, [sp, #55]	; 0x37
   276aa:	f009 ff4f 	bl	3154c <ticker_ticks_now_get>
			   HAL_TICKER_US_TO_TICKS(
   276ae:	f8d8 4000 	ldr.w	r4, [r8]
	ret = ticker_start(instance_index,
   276b2:	900a      	str	r0, [sp, #40]	; 0x28
			   HAL_TICKER_US_TO_TICKS(
   276b4:	fba4 5407 	umull	r5, r4, r4, r7
   276b8:	a329      	add	r3, pc, #164	; (adr r3, 27760 <nrf_flash_sync_exe+0xd8>)
   276ba:	e9d3 2300 	ldrd	r2, r3, [r3]
	ret = ticker_start(instance_index,
   276be:	2600      	movs	r6, #0
			   HAL_TICKER_US_TO_TICKS(
   276c0:	4621      	mov	r1, r4
   276c2:	4628      	mov	r0, r5
   276c4:	f7fe fd1c 	bl	26100 <__aeabi_uldivmod>
	ret = ticker_start(instance_index,
   276c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   276ca:	9306      	str	r3, [sp, #24]
   276cc:	e9cd 6607 	strd	r6, r6, [sp, #28]
   276d0:	4b27      	ldr	r3, [pc, #156]	; (27770 <nrf_flash_sync_exe+0xe8>)
   276d2:	9305      	str	r3, [sp, #20]
			   HAL_TICKER_US_TO_TICKS(
   276d4:	4681      	mov	r9, r0
				_ticker_sync_context.interval),
			   /* period remainder */
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
			   0, /* lazy, voluntary skips */
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
   276d6:	f8d8 0004 	ldr.w	r0, [r8, #4]
   276da:	a321      	add	r3, pc, #132	; (adr r3, 27760 <nrf_flash_sync_exe+0xd8>)
   276dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   276e0:	fba0 0107 	umull	r0, r1, r0, r7
   276e4:	f7fe fd0c 	bl	26100 <__aeabi_uldivmod>
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
   276e8:	4b22      	ldr	r3, [pc, #136]	; (27774 <nrf_flash_sync_exe+0xec>)
   276ea:	f029 477f 	bic.w	r7, r9, #4278190080	; 0xff000000
   276ee:	fba7 3103 	umull	r3, r1, r7, r3
	ret = ticker_start(instance_index,
   276f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
   276f6:	2207      	movs	r2, #7
	ret = ticker_start(instance_index,
   276f8:	e9cd 6003 	strd	r6, r0, [sp, #12]
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
   276fc:	fb02 1107 	mla	r1, r2, r7, r1
   27700:	1ae8      	subs	r0, r5, r3
   27702:	eb64 0101 	sbc.w	r1, r4, r1
   27706:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2770a:	2300      	movs	r3, #0
   2770c:	f7fe fcf8 	bl	26100 <__aeabi_uldivmod>
	ret = ticker_start(instance_index,
   27710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27712:	9600      	str	r6, [sp, #0]
   27714:	e9cd 7001 	strd	r7, r0, [sp, #4]
   27718:	465a      	mov	r2, fp
   2771a:	2103      	movs	r1, #3
   2771c:	4650      	mov	r0, sl
   2771e:	f009 fe47 	bl	313b0 <ticker_start>
			   time_slot_callback_prepare,
			   op_desc,
			   NULL, /* no op callback */
			   NULL);

	if (ret != TICKER_STATUS_SUCCESS && ret != TICKER_STATUS_BUSY) {
   27722:	f030 0402 	bics.w	r4, r0, #2
   27726:	d116      	bne.n	27756 <nrf_flash_sync_exe+0xce>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
   27728:	4a13      	ldr	r2, [pc, #76]	; (27778 <nrf_flash_sync_exe+0xf0>)
   2772a:	4814      	ldr	r0, [pc, #80]	; (2777c <nrf_flash_sync_exe+0xf4>)
   2772c:	2300      	movs	r3, #0
   2772e:	f019 fa41 	bl	40bb4 <z_impl_k_sem_take>
		/* Failed to enqueue the ticker start operation request */
		result = -ECANCELED;
	} else if (k_sem_take(&sem_sync, K_MSEC(FLASH_TIMEOUT_MS)) != 0) {
   27732:	b168      	cbz	r0, 27750 <nrf_flash_sync_exe+0xc8>
		/* Stop any scheduled jobs, from thread context */
		ret = ticker_stop(instance_index, 3U, ticker_id, NULL, NULL);
   27734:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   27738:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
   2773c:	9400      	str	r4, [sp, #0]
   2773e:	4623      	mov	r3, r4
   27740:	2103      	movs	r1, #3
   27742:	f009 fec1 	bl	314c8 <ticker_stop>
		__ASSERT((ret == TICKER_STATUS_SUCCESS ||
			  ret == TICKER_STATUS_BUSY),
			 "Failed to stop ticker.\n");

		/* wait for operation's complete overrun*/
		result = -ETIMEDOUT;
   27746:	f06f 0073 	mvn.w	r0, #115	; 0x73
	} else {
		result = _ticker_sync_context.result;
	}

	return result;
}
   2774a:	b00f      	add	sp, #60	; 0x3c
   2774c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		result = _ticker_sync_context.result;
   27750:	f8d8 000c 	ldr.w	r0, [r8, #12]
   27754:	e7f9      	b.n	2774a <nrf_flash_sync_exe+0xc2>
		result = -ECANCELED;
   27756:	f06f 008b 	mvn.w	r0, #139	; 0x8b
	return result;
   2775a:	e7f6      	b.n	2774a <nrf_flash_sync_exe+0xc2>
   2775c:	f3af 8000 	nop.w
   27760:	1afd498d 	.word	0x1afd498d
   27764:	00000007 	.word	0x00000007
   27768:	20003660 	.word	0x20003660
   2776c:	3b9aca00 	.word	0x3b9aca00
   27770:	0003de75 	.word	0x0003de75
   27774:	1afd498d 	.word	0x1afd498d
   27778:	000b7b44 	.word	0x000b7b44
   2777c:	20003648 	.word	0x20003648

00027780 <nrf_flash_sync_check_time_limit>:
{
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
   27780:	b538      	push	{r3, r4, r5, lr}
	uint32_t ticks_diff;

	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
   27782:	4d0f      	ldr	r5, [pc, #60]	; (277c0 <nrf_flash_sync_check_time_limit+0x40>)
{
   27784:	4604      	mov	r4, r0
	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
   27786:	f009 fee1 	bl	3154c <ticker_ticks_now_get>
   2778a:	68a9      	ldr	r1, [r5, #8]
   2778c:	f009 fee0 	bl	31550 <ticker_ticks_diff_get>
					   _ticker_sync_context.ticks_begin);
	if (ticks_diff + ticks_diff/iteration >
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
   27790:	6869      	ldr	r1, [r5, #4]
	if (ticks_diff + ticks_diff/iteration >
   27792:	fbb0 f4f4 	udiv	r4, r0, r4
   27796:	4404      	add	r4, r0
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
   27798:	480a      	ldr	r0, [pc, #40]	; (277c4 <nrf_flash_sync_check_time_limit+0x44>)
   2779a:	a307      	add	r3, pc, #28	; (adr r3, 277b8 <nrf_flash_sync_check_time_limit+0x38>)
   2779c:	e9d3 2300 	ldrd	r2, r3, [r3]
   277a0:	fba1 0100 	umull	r0, r1, r1, r0
   277a4:	f7fe fcac 	bl	26100 <__aeabi_uldivmod>
   277a8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return true;
	}

	return false;
}
   277ac:	4284      	cmp	r4, r0
   277ae:	bf94      	ite	ls
   277b0:	2000      	movls	r0, #0
   277b2:	2001      	movhi	r0, #1
   277b4:	bd38      	pop	{r3, r4, r5, pc}
   277b6:	bf00      	nop
   277b8:	1afd498d 	.word	0x1afd498d
   277bc:	00000007 	.word	0x00000007
   277c0:	20003660 	.word	0x20003660
   277c4:	3b9aca00 	.word	0x3b9aca00

000277c8 <activity_expiry_function>:
        }
}

K_WORK_DEFINE(activity_work, activity_work_handler);

void activity_expiry_function() { k_work_submit(&activity_work); }
   277c8:	4801      	ldr	r0, [pc, #4]	; (277d0 <activity_expiry_function+0x8>)
   277ca:	f019 bb6b 	b.w	40ea4 <k_work_submit>
   277ce:	bf00      	nop
   277d0:	20000268 	.word	0x20000268

000277d4 <activity_init>:

K_TIMER_DEFINE(activity_timer, activity_expiry_function, NULL);

int activity_init() {
   277d4:	b507      	push	{r0, r1, r2, lr}
	return z_impl_k_uptime_ticks();
   277d6:	f020 ff0c 	bl	485f2 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   277da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   277de:	fba0 0302 	umull	r0, r3, r0, r2
   277e2:	fb02 3101 	mla	r1, r2, r1, r3
   277e6:	0bc0      	lsrs	r0, r0, #15
    activity_last_uptime = k_uptime_get();
   277e8:	4a07      	ldr	r2, [pc, #28]	; (27808 <activity_init+0x34>)
   277ea:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   277ee:	6010      	str	r0, [r2, #0]

    k_timer_start(&activity_timer, K_SECONDS(1), K_SECONDS(1));
   277f0:	2300      	movs	r3, #0
	compiler_barrier();
   277f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
	z_impl_k_timer_start(timer, duration, period);
   277f6:	4805      	ldr	r0, [pc, #20]	; (2780c <activity_init+0x38>)
   277f8:	e9cd 2300 	strd	r2, r3, [sp]
   277fc:	f01a f916 	bl	41a2c <z_impl_k_timer_start>
    return 0;
}
   27800:	2000      	movs	r0, #0
   27802:	b003      	add	sp, #12
   27804:	f85d fb04 	ldr.w	pc, [sp], #4
   27808:	20001a68 	.word	0x20001a68
   2780c:	20000b88 	.word	0x20000b88

00027810 <raise_event>:
int raise_event() {
   27810:	b508      	push	{r3, lr}
    return ZMK_EVENT_RAISE(new_zmk_activity_state_changed(
   27812:	4b04      	ldr	r3, [pc, #16]	; (27824 <raise_event+0x14>)
   27814:	7818      	ldrb	r0, [r3, #0]
   27816:	f000 f997 	bl	27b48 <new_zmk_activity_state_changed>
}
   2781a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return ZMK_EVENT_RAISE(new_zmk_activity_state_changed(
   2781e:	f01a ba08 	b.w	41c32 <zmk_event_manager_raise>
   27822:	bf00      	nop
   27824:	20003a2e 	.word	0x20003a2e

00027828 <set_state>:
    if (activity_state == state)
   27828:	4b04      	ldr	r3, [pc, #16]	; (2783c <set_state+0x14>)
   2782a:	781a      	ldrb	r2, [r3, #0]
   2782c:	4282      	cmp	r2, r0
   2782e:	d002      	beq.n	27836 <set_state+0xe>
    activity_state = state;
   27830:	7018      	strb	r0, [r3, #0]
    return raise_event();
   27832:	f7ff bfed 	b.w	27810 <raise_event>
}
   27836:	2000      	movs	r0, #0
   27838:	4770      	bx	lr
   2783a:	bf00      	nop
   2783c:	20003a2e 	.word	0x20003a2e

00027840 <activity_event_listener>:
int activity_event_listener(const zmk_event_t *eh) {
   27840:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
   27842:	f020 fed6 	bl	485f2 <z_impl_k_uptime_ticks>
   27846:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2784a:	fba0 0302 	umull	r0, r3, r0, r2
   2784e:	fb02 3101 	mla	r1, r2, r1, r3
   27852:	0bc0      	lsrs	r0, r0, #15
    activity_last_uptime = k_uptime_get();
   27854:	4a04      	ldr	r2, [pc, #16]	; (27868 <activity_event_listener+0x28>)
   27856:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   2785a:	6010      	str	r0, [r2, #0]
}
   2785c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return set_state(ZMK_ACTIVITY_ACTIVE);
   27860:	2000      	movs	r0, #0
   27862:	f7ff bfe1 	b.w	27828 <set_state>
   27866:	bf00      	nop
   27868:	20001a68 	.word	0x20001a68

0002786c <activity_work_handler>:
void activity_work_handler(struct k_work *work) {
   2786c:	b508      	push	{r3, lr}
   2786e:	f020 fec0 	bl	485f2 <z_impl_k_uptime_ticks>
   27872:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   27876:	fba0 0302 	umull	r0, r3, r0, r2
   2787a:	fb02 3101 	mla	r1, r2, r1, r3
    int32_t inactive_time = current - activity_last_uptime;
   2787e:	4a08      	ldr	r2, [pc, #32]	; (278a0 <activity_work_handler+0x34>)
   27880:	0bc3      	lsrs	r3, r0, #15
   27882:	6812      	ldr	r2, [r2, #0]
   27884:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   27888:	1a9b      	subs	r3, r3, r2
        if (inactive_time > MAX_IDLE_MS) {
   2788a:	f247 5230 	movw	r2, #30000	; 0x7530
   2788e:	4293      	cmp	r3, r2
   27890:	dd04      	ble.n	2789c <activity_work_handler+0x30>
}
   27892:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            set_state(ZMK_ACTIVITY_IDLE);
   27896:	2001      	movs	r0, #1
   27898:	f7ff bfc6 	b.w	27828 <set_state>
}
   2789c:	bd08      	pop	{r3, pc}
   2789e:	bf00      	nop
   278a0:	20001a68 	.word	0x20001a68

000278a4 <zmk_kscan_process_msgq>:

    k_msgq_put(&zmk_kscan_msgq, &ev, K_NO_WAIT);
    k_work_submit(&msg_processor.work);
}

void zmk_kscan_process_msgq(struct k_work *item) {
   278a4:	b530      	push	{r4, r5, lr}
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
   278a6:	4c19      	ldr	r4, [pc, #100]	; (2790c <zmk_kscan_process_msgq+0x68>)
   278a8:	b08d      	sub	sp, #52	; 0x34
   278aa:	2200      	movs	r2, #0
   278ac:	2300      	movs	r3, #0
   278ae:	a903      	add	r1, sp, #12
   278b0:	4620      	mov	r0, r4
   278b2:	f019 f815 	bl	408e0 <z_impl_k_msgq_get>
    struct zmk_kscan_event ev;

    while (k_msgq_get(&zmk_kscan_msgq, &ev, K_NO_WAIT) == 0) {
   278b6:	b108      	cbz	r0, 278bc <zmk_kscan_process_msgq+0x18>
            (struct zmk_position_state_changed){.source = ZMK_POSITION_STATE_CHANGE_SOURCE_LOCAL,
                                                .state = pressed,
                                                .position = position,
                                                .timestamp = k_uptime_get()}));
    }
}
   278b8:	b00d      	add	sp, #52	; 0x34
   278ba:	bd30      	pop	{r4, r5, pc}
        int32_t position = zmk_matrix_transform_row_column_to_position(ev.row, ev.column);
   278bc:	e9dd 1504 	ldrd	r1, r5, [sp, #16]
   278c0:	9803      	ldr	r0, [sp, #12]
   278c2:	f000 f857 	bl	27974 <zmk_matrix_transform_row_column_to_position>
        if (position < 0) {
   278c6:	2800      	cmp	r0, #0
   278c8:	dbef      	blt.n	278aa <zmk_kscan_process_msgq+0x6>
        ZMK_EVENT_RAISE(new_zmk_position_state_changed(
   278ca:	23ff      	movs	r3, #255	; 0xff
   278cc:	f88d 3018 	strb.w	r3, [sp, #24]
        bool pressed = (ev.state == ZMK_KSCAN_EVENT_STATE_PRESSED);
   278d0:	fab5 f385 	clz	r3, r5
   278d4:	095b      	lsrs	r3, r3, #5
        ZMK_EVENT_RAISE(new_zmk_position_state_changed(
   278d6:	9007      	str	r0, [sp, #28]
        bool pressed = (ev.state == ZMK_KSCAN_EVENT_STATE_PRESSED);
   278d8:	f88d 3020 	strb.w	r3, [sp, #32]
	return z_impl_k_uptime_ticks();
   278dc:	f020 fe89 	bl	485f2 <z_impl_k_uptime_ticks>
   278e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   278e4:	fba0 0302 	umull	r0, r3, r0, r2
   278e8:	fb02 3101 	mla	r1, r2, r1, r3
   278ec:	0bc0      	lsrs	r0, r0, #15
   278ee:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   278f2:	0bc9      	lsrs	r1, r1, #15
        ZMK_EVENT_RAISE(new_zmk_position_state_changed(
   278f4:	e88d 0003 	stmia.w	sp, {r0, r1}
   278f8:	ab06      	add	r3, sp, #24
   278fa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   278fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   27900:	f000 f92e 	bl	27b60 <new_zmk_position_state_changed>
   27904:	f01a f995 	bl	41c32 <zmk_event_manager_raise>
                                                .timestamp = k_uptime_get()}));
   27908:	e7cf      	b.n	278aa <zmk_kscan_process_msgq+0x6>
   2790a:	bf00      	nop
   2790c:	20000d0c 	.word	0x20000d0c

00027910 <zmk_kscan_callback>:
                               bool pressed) {
   27910:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        .state = (pressed ? ZMK_KSCAN_EVENT_STATE_PRESSED : ZMK_KSCAN_EVENT_STATE_RELEASED)};
   27912:	f083 0301 	eor.w	r3, r3, #1
    struct zmk_kscan_event ev = {
   27916:	e9cd 1201 	strd	r1, r2, [sp, #4]
        .state = (pressed ? ZMK_KSCAN_EVENT_STATE_PRESSED : ZMK_KSCAN_EVENT_STATE_RELEASED)};
   2791a:	9303      	str	r3, [sp, #12]
	return z_impl_k_msgq_put(msgq, data, timeout);
   2791c:	2200      	movs	r2, #0
   2791e:	2300      	movs	r3, #0
   27920:	a901      	add	r1, sp, #4
   27922:	4804      	ldr	r0, [pc, #16]	; (27934 <zmk_kscan_callback+0x24>)
   27924:	f018 ff86 	bl	40834 <z_impl_k_msgq_put>
    k_work_submit(&msg_processor.work);
   27928:	4803      	ldr	r0, [pc, #12]	; (27938 <zmk_kscan_callback+0x28>)
   2792a:	f019 fabb 	bl	40ea4 <k_work_submit>
}
   2792e:	b005      	add	sp, #20
   27930:	f85d fb04 	ldr.w	pc, [sp], #4
   27934:	20000d0c 	.word	0x20000d0c
   27938:	20001a6c 	.word	0x20001a6c

0002793c <zmk_kscan_init>:

int zmk_kscan_init(const struct device *dev) {
   2793c:	b510      	push	{r4, lr}
    if (dev == NULL) {
   2793e:	4604      	mov	r4, r0
   27940:	b178      	cbz	r0, 27962 <zmk_kscan_init+0x26>
        LOG_ERR("Failed to get the KSCAN device");
        return -EINVAL;
    }

    k_work_init(&msg_processor.work, zmk_kscan_process_msgq);
   27942:	4909      	ldr	r1, [pc, #36]	; (27968 <zmk_kscan_init+0x2c>)
   27944:	4809      	ldr	r0, [pc, #36]	; (2796c <zmk_kscan_init+0x30>)
   27946:	f020 fc62 	bl	4820e <k_work_init>
					kscan_callback_t callback)
{
	const struct kscan_driver_api *api =
				(struct kscan_driver_api *)dev->api;

	return api->config(dev, callback);
   2794a:	68a3      	ldr	r3, [r4, #8]
   2794c:	4908      	ldr	r1, [pc, #32]	; (27970 <zmk_kscan_init+0x34>)
   2794e:	681b      	ldr	r3, [r3, #0]
   27950:	4620      	mov	r0, r4
   27952:	4798      	blx	r3
static inline int z_impl_kscan_enable_callback(const struct device *dev)
{
	const struct kscan_driver_api *api =
			(const struct kscan_driver_api *)dev->api;

	if (api->enable_callback == NULL) {
   27954:	68a3      	ldr	r3, [r4, #8]
   27956:	689b      	ldr	r3, [r3, #8]
   27958:	b10b      	cbz	r3, 2795e <zmk_kscan_init+0x22>
		return -ENOSYS;
	}

	return api->enable_callback(dev);
   2795a:	4620      	mov	r0, r4
   2795c:	4798      	blx	r3

    kscan_config(dev, zmk_kscan_callback);
    kscan_enable_callback(dev);

    return 0;
   2795e:	2000      	movs	r0, #0
}
   27960:	bd10      	pop	{r4, pc}
        return -EINVAL;
   27962:	f06f 0015 	mvn.w	r0, #21
   27966:	e7fb      	b.n	27960 <zmk_kscan_init+0x24>
   27968:	000278a5 	.word	0x000278a5
   2796c:	20001a6c 	.word	0x20001a6c
   27970:	00027911 	.word	0x00027911

00027974 <zmk_matrix_transform_row_column_to_position>:

#if DT_NODE_HAS_PROP(ZMK_KEYMAP_TRANSFORM_NODE, row_offset)
    row += DT_PROP(ZMK_KEYMAP_TRANSFORM_NODE, row_offset);
#endif

    const uint32_t matrix_index = (row * ZMK_MATRIX_COLS) + column;
   27974:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   27978:	3108      	adds	r1, #8

#ifdef ZMK_KEYMAP_TRANSFORM_NODE
    if (matrix_index >= ARRAY_SIZE(transform)) {
   2797a:	294c      	cmp	r1, #76	; 0x4c
   2797c:	d805      	bhi.n	2798a <zmk_matrix_transform_row_column_to_position+0x16>
        return -EINVAL;
    }

    const uint32_t value = transform[matrix_index];
   2797e:	4b04      	ldr	r3, [pc, #16]	; (27990 <zmk_matrix_transform_row_column_to_position+0x1c>)
   27980:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]

    if (!value) {
   27984:	b108      	cbz	r0, 2798a <zmk_matrix_transform_row_column_to_position+0x16>
        return -EINVAL;
    }

    return value - INDEX_OFFSET;
   27986:	3801      	subs	r0, #1
   27988:	4770      	bx	lr
        return -EINVAL;
   2798a:	f06f 0015 	mvn.w	r0, #21
#else
    return matrix_index;
#endif /* ZMK_KEYMAP_TRANSFORM_NODE */
};
   2798e:	4770      	bx	lr
   27990:	00048eec 	.word	0x00048eec

00027994 <zmk_event_manager_handle_from>:
extern struct zmk_event_type *__event_type_end[];

extern struct zmk_event_subscription __event_subscriptions_start[];
extern struct zmk_event_subscription __event_subscriptions_end[];

int zmk_event_manager_handle_from(zmk_event_t *event, uint8_t start_index) {
   27994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int ret = 0;
    uint8_t len = __event_subscriptions_end - __event_subscriptions_start;
   27998:	4b13      	ldr	r3, [pc, #76]	; (279e8 <zmk_event_manager_handle_from+0x54>)
   2799a:	4e14      	ldr	r6, [pc, #80]	; (279ec <zmk_event_manager_handle_from+0x58>)
   2799c:	eba3 0806 	sub.w	r8, r3, r6
int zmk_event_manager_handle_from(zmk_event_t *event, uint8_t start_index) {
   279a0:	4607      	mov	r7, r0
    for (int i = start_index; i < len; i++) {
   279a2:	460d      	mov	r5, r1
   279a4:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
   279a8:	f3c8 08c7 	ubfx	r8, r8, #3, #8
   279ac:	45a8      	cmp	r8, r5
   279ae:	dc06      	bgt.n	279be <zmk_event_manager_handle_from+0x2a>
        switch (ret) {
        case ZMK_EV_EVENT_BUBBLE:
            continue;
        case ZMK_EV_EVENT_HANDLED:
            LOG_DBG("Listener handled the event");
            ret = 0;
   279b0:	2400      	movs	r4, #0
            goto release;
        }
    }

release:
    k_free(event);
   279b2:	4638      	mov	r0, r7
   279b4:	f020 ffc8 	bl	48948 <k_free>
    return ret;
}
   279b8:	4620      	mov	r0, r4
   279ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (ev_sub->event_type != event->event) {
   279be:	6832      	ldr	r2, [r6, #0]
   279c0:	683b      	ldr	r3, [r7, #0]
   279c2:	429a      	cmp	r2, r3
   279c4:	d10b      	bne.n	279de <zmk_event_manager_handle_from+0x4a>
        event->last_listener_index = i;
   279c6:	713d      	strb	r5, [r7, #4]
        ret = ev_sub->listener->callback(event);
   279c8:	6873      	ldr	r3, [r6, #4]
   279ca:	4638      	mov	r0, r7
   279cc:	681b      	ldr	r3, [r3, #0]
   279ce:	4798      	blx	r3
        switch (ret) {
   279d0:	2801      	cmp	r0, #1
        ret = ev_sub->listener->callback(event);
   279d2:	4604      	mov	r4, r0
        switch (ret) {
   279d4:	d0ec      	beq.n	279b0 <zmk_event_manager_handle_from+0x1c>
   279d6:	2802      	cmp	r0, #2
   279d8:	d004      	beq.n	279e4 <zmk_event_manager_handle_from+0x50>
   279da:	2800      	cmp	r0, #0
   279dc:	d1e9      	bne.n	279b2 <zmk_event_manager_handle_from+0x1e>
    for (int i = start_index; i < len; i++) {
   279de:	3501      	adds	r5, #1
   279e0:	3608      	adds	r6, #8
   279e2:	e7e3      	b.n	279ac <zmk_event_manager_handle_from+0x18>
        switch (ret) {
   279e4:	2400      	movs	r4, #0
   279e6:	e7e7      	b.n	279b8 <zmk_event_manager_handle_from+0x24>
   279e8:	0004abb4 	.word	0x0004abb4
   279ec:	0004ab9c 	.word	0x0004ab9c

000279f0 <ext_power_save_state_work>:
    bool settings_init;
#endif
};

#if IS_ENABLED(CONFIG_SETTINGS)
static void ext_power_save_state_work(struct k_work *work) {
   279f0:	b500      	push	{lr}
   279f2:	b08b      	sub	sp, #44	; 0x2c
    char setting_path[40];
    const struct device *ext_power = DEVICE_DT_GET(DT_DRV_INST(0));
    struct ext_power_generic_data *data = ext_power->data;

    snprintf(setting_path, 40, "ext_power/state/%s", DT_INST_PROP(0, label));
   279f4:	4b06      	ldr	r3, [pc, #24]	; (27a10 <ext_power_save_state_work+0x20>)
   279f6:	4a07      	ldr	r2, [pc, #28]	; (27a14 <ext_power_save_state_work+0x24>)
   279f8:	2128      	movs	r1, #40	; 0x28
   279fa:	4668      	mov	r0, sp
   279fc:	f002 ff6a 	bl	2a8d4 <snprintf>
    settings_save_one(setting_path, &data->status, sizeof(data->status));
   27a00:	4905      	ldr	r1, [pc, #20]	; (27a18 <ext_power_save_state_work+0x28>)
   27a02:	2201      	movs	r2, #1
   27a04:	4668      	mov	r0, sp
   27a06:	f001 ffeb 	bl	299e0 <settings_save_one>
}
   27a0a:	b00b      	add	sp, #44	; 0x2c
   27a0c:	f85d fb04 	ldr.w	pc, [sp], #4
   27a10:	0004a4b8 	.word	0x0004a4b8
   27a14:	0004a4c2 	.word	0x0004a4c2
   27a18:	20003a2f 	.word	0x20003a2f

00027a1c <ext_power_generic_init>:

struct settings_handler ext_power_conf = {.name = "ext_power/state",
                                          .h_set = ext_power_settings_set};
#endif

static int ext_power_generic_init(const struct device *dev) {
   27a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    struct ext_power_generic_data *data = dev->data;
    const struct ext_power_generic_config *config = dev->config;
   27a20:	6846      	ldr	r6, [r0, #4]
    struct ext_power_generic_data *data = dev->data;
   27a22:	6907      	ldr	r7, [r0, #16]
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
				  spec->pin,
   27a24:	7931      	ldrb	r1, [r6, #4]
				  spec->dt_flags | extra_flags);
   27a26:	88f3      	ldrh	r3, [r6, #6]
static int ext_power_generic_init(const struct device *dev) {
   27a28:	4604      	mov	r4, r0
	return gpio_pin_configure(spec->port,
   27a2a:	6830      	ldr	r0, [r6, #0]
	struct gpio_driver_data *data =
   27a2c:	f8d0 e010 	ldr.w	lr, [r0, #16]
	const struct gpio_driver_api *api =
   27a30:	f8d0 8008 	ldr.w	r8, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   27a34:	f8de 5000 	ldr.w	r5, [lr]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   27a38:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
   27a3a:	bf54      	ite	pl
   27a3c:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   27a40:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   27a44:	f04f 0c01 	mov.w	ip, #1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   27a48:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   27a4c:	fa0c fc01 	lsl.w	ip, ip, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   27a50:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   27a52:	bf4c      	ite	mi
   27a54:	ea45 050c 	orrmi.w	r5, r5, ip
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   27a58:	ea25 050c 	bicpl.w	r5, r5, ip
   27a5c:	f8ce 5000 	str.w	r5, [lr]
	return api->pin_configure(port, pin, flags);
   27a60:	f8d8 3000 	ldr.w	r3, [r8]
   27a64:	4798      	blx	r3

    if (gpio_pin_configure_dt(&config->control, GPIO_OUTPUT_INACTIVE)) {
   27a66:	bb60      	cbnz	r0, 27ac2 <ext_power_generic_init+0xa6>
        LOG_ERR("Failed to configure ext-power control pin");
        return -EIO;
    }

#if IS_ENABLED(CONFIG_SETTINGS)
    settings_subsys_init();
   27a68:	f002 f90e 	bl	29c88 <settings_subsys_init>

    int err = settings_register(&ext_power_conf);
   27a6c:	4816      	ldr	r0, [pc, #88]	; (27ac8 <ext_power_generic_init+0xac>)
   27a6e:	f002 f847 	bl	29b00 <settings_register>
    if (err) {
   27a72:	4605      	mov	r5, r0
   27a74:	bb10      	cbnz	r0, 27abc <ext_power_generic_init+0xa0>
        LOG_ERR("Failed to register the ext_power settings handler (err %d)", err);
        return err;
    }

    k_work_init_delayable(&ext_power_save_work, ext_power_save_state_work);
   27a76:	4915      	ldr	r1, [pc, #84]	; (27acc <ext_power_generic_init+0xb0>)
   27a78:	4815      	ldr	r0, [pc, #84]	; (27ad0 <ext_power_generic_init+0xb4>)
   27a7a:	f020 fc0c 	bl	48296 <k_work_init_delayable>

    // Set default value (on) if settings isn't set
    settings_load_subtree("ext_power");
   27a7e:	4815      	ldr	r0, [pc, #84]	; (27ad4 <ext_power_generic_init+0xb8>)
   27a80:	f001 ffe8 	bl	29a54 <settings_load_subtree>
    if (!data->settings_init) {
   27a84:	787b      	ldrb	r3, [r7, #1]
   27a86:	b95b      	cbnz	r3, 27aa0 <ext_power_generic_init+0x84>

        data->status = true;
   27a88:	2301      	movs	r3, #1
   27a8a:	703b      	strb	r3, [r7, #0]
        k_work_schedule(&ext_power_save_work, K_NO_WAIT);
   27a8c:	2200      	movs	r2, #0
   27a8e:	2300      	movs	r3, #0
   27a90:	480f      	ldr	r0, [pc, #60]	; (27ad0 <ext_power_generic_init+0xb4>)
   27a92:	f019 fa6f 	bl	40f74 <k_work_schedule>
__syscall int ext_power_enable(const struct device *dev);

static inline int z_impl_ext_power_enable(const struct device *dev) {
    const struct ext_power_api *api = (const struct ext_power_api *)dev->api;

    if (api->enable == NULL) {
   27a96:	68a3      	ldr	r3, [r4, #8]
   27a98:	681b      	ldr	r3, [r3, #0]
   27a9a:	b10b      	cbz	r3, 27aa0 <ext_power_generic_init+0x84>
        return -ENOTSUP;
    }

    return api->enable(dev);
   27a9c:	4620      	mov	r0, r4
   27a9e:	4798      	blx	r3
#else
    // Default to the ext_power being open when no settings
    ext_power_enable(dev);
#endif

    if (config->init_delay_ms) {
   27aa0:	8931      	ldrh	r1, [r6, #8]
   27aa2:	b159      	cbz	r1, 27abc <ext_power_generic_init+0xa0>
   27aa4:	f240 30e7 	movw	r0, #999	; 0x3e7
   27aa8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   27aac:	2300      	movs	r3, #0
   27aae:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
   27ab2:	2100      	movs	r1, #0
   27ab4:	f7fe fb24 	bl	26100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   27ab8:	f019 fd62 	bl	41580 <z_impl_k_sleep>
        k_msleep(config->init_delay_ms);
    }

    return 0;
}
   27abc:	4628      	mov	r0, r5
   27abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -EIO;
   27ac2:	f06f 0504 	mvn.w	r5, #4
   27ac6:	e7f9      	b.n	27abc <ext_power_generic_init+0xa0>
   27ac8:	20000278 	.word	0x20000278
   27acc:	000279f1 	.word	0x000279f1
   27ad0:	20000f08 	.word	0x20000f08
   27ad4:	0004a4d5 	.word	0x0004a4d5

00027ad8 <ext_power_save_state>:
int ext_power_save_state() {
   27ad8:	b508      	push	{r3, lr}
    int ret = k_work_reschedule(&ext_power_save_work, K_MSEC(CONFIG_ZMK_SETTINGS_SAVE_DEBOUNCE));
   27ada:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   27ade:	2300      	movs	r3, #0
   27ae0:	4802      	ldr	r0, [pc, #8]	; (27aec <ext_power_save_state+0x14>)
   27ae2:	f019 fa7b 	bl	40fdc <k_work_reschedule>
}
   27ae6:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   27aea:	bd08      	pop	{r3, pc}
   27aec:	20000f08 	.word	0x20000f08

00027af0 <ext_power_settings_set>:
                                  void *cb_arg) {
   27af0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   27af2:	460c      	mov	r4, r1
   27af4:	4616      	mov	r6, r2
    if (settings_name_steq(name, DT_INST_PROP(0, label), &next) && !next) {
   27af6:	4911      	ldr	r1, [pc, #68]	; (27b3c <ext_power_settings_set+0x4c>)
   27af8:	aa01      	add	r2, sp, #4
                                  void *cb_arg) {
   27afa:	461f      	mov	r7, r3
    if (settings_name_steq(name, DT_INST_PROP(0, label), &next) && !next) {
   27afc:	f01b f87f 	bl	42bfe <settings_name_steq>
   27b00:	b1b0      	cbz	r0, 27b30 <ext_power_settings_set+0x40>
   27b02:	9b01      	ldr	r3, [sp, #4]
   27b04:	b9a3      	cbnz	r3, 27b30 <ext_power_settings_set+0x40>
        if (len != sizeof(data->status)) {
   27b06:	2c01      	cmp	r4, #1
   27b08:	d115      	bne.n	27b36 <ext_power_settings_set+0x46>
        rc = read_cb(cb_arg, &data->status, sizeof(data->status));
   27b0a:	4d0d      	ldr	r5, [pc, #52]	; (27b40 <ext_power_settings_set+0x50>)
   27b0c:	4622      	mov	r2, r4
   27b0e:	4629      	mov	r1, r5
   27b10:	4638      	mov	r0, r7
   27b12:	47b0      	blx	r6
        if (rc >= 0) {
   27b14:	2800      	cmp	r0, #0
   27b16:	db06      	blt.n	27b26 <ext_power_settings_set+0x36>
            if (data->status) {
   27b18:	782b      	ldrb	r3, [r5, #0]
                ext_power_generic_enable(ext_power);
   27b1a:	480a      	ldr	r0, [pc, #40]	; (27b44 <ext_power_settings_set+0x54>)
            data->settings_init = true;
   27b1c:	706c      	strb	r4, [r5, #1]
            if (data->status) {
   27b1e:	b123      	cbz	r3, 27b2a <ext_power_settings_set+0x3a>
                ext_power_generic_enable(ext_power);
   27b20:	f01a f89d 	bl	41c5e <ext_power_generic_enable>
    return -ENOENT;
   27b24:	2000      	movs	r0, #0
}
   27b26:	b003      	add	sp, #12
   27b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
                ext_power_generic_disable(ext_power);
   27b2a:	f01a f8aa 	bl	41c82 <ext_power_generic_disable>
   27b2e:	e7f9      	b.n	27b24 <ext_power_settings_set+0x34>
    return -ENOENT;
   27b30:	f06f 0001 	mvn.w	r0, #1
   27b34:	e7f7      	b.n	27b26 <ext_power_settings_set+0x36>
            return -EINVAL;
   27b36:	f06f 0015 	mvn.w	r0, #21
   27b3a:	e7f4      	b.n	27b26 <ext_power_settings_set+0x36>
   27b3c:	0004a4b8 	.word	0x0004a4b8
   27b40:	20003a2f 	.word	0x20003a2f
   27b44:	00048b08 	.word	0x00048b08

00027b48 <new_zmk_activity_state_changed>:
 */

#include <zephyr/kernel.h>
#include <zmk/events/activity_state_changed.h>

   27b48:	b510      	push	{r4, lr}
   27b4a:	4604      	mov	r4, r0
   27b4c:	200c      	movs	r0, #12
   27b4e:	f020 ff02 	bl	48956 <k_malloc>
   27b52:	4a02      	ldr	r2, [pc, #8]	; (27b5c <new_zmk_activity_state_changed+0x14>)
   27b54:	6002      	str	r2, [r0, #0]
   27b56:	7204      	strb	r4, [r0, #8]
   27b58:	bd10      	pop	{r4, pc}
   27b5a:	bf00      	nop
   27b5c:	00049038 	.word	0x00049038

00027b60 <new_zmk_position_state_changed>:
 */

#include <zephyr/kernel.h>
#include <zmk/events/position_state_changed.h>

   27b60:	b084      	sub	sp, #16
   27b62:	b570      	push	{r4, r5, r6, lr}
   27b64:	ac04      	add	r4, sp, #16
   27b66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   27b6a:	2020      	movs	r0, #32
   27b6c:	f020 fef3 	bl	48956 <k_malloc>
   27b70:	4604      	mov	r4, r0
   27b72:	4b08      	ldr	r3, [pc, #32]	; (27b94 <new_zmk_position_state_changed+0x34>)
   27b74:	f844 3b08 	str.w	r3, [r4], #8
   27b78:	ad04      	add	r5, sp, #16
   27b7a:	4606      	mov	r6, r0
   27b7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   27b7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   27b80:	e895 0003 	ldmia.w	r5, {r0, r1}
   27b84:	e884 0003 	stmia.w	r4, {r0, r1}
   27b88:	4630      	mov	r0, r6
   27b8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   27b8e:	b004      	add	sp, #16
   27b90:	4770      	bx	lr
   27b92:	bf00      	nop
   27b94:	0004903c 	.word	0x0004903c

00027b98 <as_zmk_position_state_changed>:
   27b98:	6802      	ldr	r2, [r0, #0]
   27b9a:	4b03      	ldr	r3, [pc, #12]	; (27ba8 <as_zmk_position_state_changed+0x10>)
   27b9c:	429a      	cmp	r2, r3
   27b9e:	bf0c      	ite	eq
   27ba0:	3008      	addeq	r0, #8
   27ba2:	2000      	movne	r0, #0
   27ba4:	4770      	bx	lr
   27ba6:	bf00      	nop
   27ba8:	0004903c 	.word	0x0004903c

00027bac <new_zmk_usb_conn_state_changed>:
 */

#include <zephyr/kernel.h>
#include <zmk/events/usb_conn_state_changed.h>

   27bac:	b510      	push	{r4, lr}
   27bae:	4604      	mov	r4, r0
   27bb0:	200c      	movs	r0, #12
   27bb2:	f020 fed0 	bl	48956 <k_malloc>
   27bb6:	4a02      	ldr	r2, [pc, #8]	; (27bc0 <new_zmk_usb_conn_state_changed+0x14>)
   27bb8:	6002      	str	r2, [r0, #0]
   27bba:	7204      	strb	r4, [r0, #8]
   27bbc:	bd10      	pop	{r4, pc}
   27bbe:	bf00      	nop
   27bc0:	00049044 	.word	0x00049044

00027bc4 <on_keymap_binding_pressed>:

    return 0;
}

static int on_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                     struct zmk_behavior_binding_event event) {
   27bc4:	b082      	sub	sp, #8
   27bc6:	b538      	push	{r3, r4, r5, lr}
   27bc8:	a904      	add	r1, sp, #16
   27bca:	e881 000c 	stmia.w	r1, {r2, r3}
   27bce:	4605      	mov	r5, r0
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   27bd0:	4811      	ldr	r0, [pc, #68]	; (27c18 <on_keymap_binding_pressed+0x54>)
   27bd2:	f018 fc13 	bl	403fc <z_impl_device_get_binding>
   27bd6:	4604      	mov	r4, r0
    const struct device *ext_power = device_get_binding("EXT_POWER");
    if (ext_power == NULL) {
   27bd8:	b1a0      	cbz	r0, 27c04 <on_keymap_binding_pressed+0x40>
        LOG_ERR("Unable to retrieve ext_power device: %d", binding->param1);
        return -EIO;
    }

    switch (binding->param1) {
   27bda:	686b      	ldr	r3, [r5, #4]
   27bdc:	2b01      	cmp	r3, #1
   27bde:	d00c      	beq.n	27bfa <on_keymap_binding_pressed+0x36>
   27be0:	2b02      	cmp	r3, #2
   27be2:	d005      	beq.n	27bf0 <on_keymap_binding_pressed+0x2c>
   27be4:	b9a3      	cbnz	r3, 27c10 <on_keymap_binding_pressed+0x4c>
    default:
        LOG_ERR("Unknown ext_power command: %d", binding->param1);
    }

    return -ENOTSUP;
}
   27be6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   27bea:	b002      	add	sp, #8
            return ext_power_disable(ext_power);
   27bec:	f01a b86f 	b.w	41cce <ext_power_disable>
        if (ext_power_get(ext_power) > 0)
   27bf0:	f01a f874 	bl	41cdc <ext_power_get>
   27bf4:	2800      	cmp	r0, #0
            return ext_power_disable(ext_power);
   27bf6:	4620      	mov	r0, r4
        if (ext_power_get(ext_power) > 0)
   27bf8:	dcf5      	bgt.n	27be6 <on_keymap_binding_pressed+0x22>
}
   27bfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   27bfe:	b002      	add	sp, #8
            return ext_power_enable(ext_power);
   27c00:	f01a b85e 	b.w	41cc0 <ext_power_enable>
        return -EIO;
   27c04:	f06f 0004 	mvn.w	r0, #4
}
   27c08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   27c0c:	b002      	add	sp, #8
   27c0e:	4770      	bx	lr
    switch (binding->param1) {
   27c10:	f06f 0085 	mvn.w	r0, #133	; 0x85
   27c14:	e7f8      	b.n	27c08 <on_keymap_binding_pressed+0x44>
   27c16:	bf00      	nop
   27c18:	0004a4b8 	.word	0x0004a4b8

00027c1c <on_keymap_binding_convert_central_state_dependent_params>:
                                                         struct zmk_behavior_binding_event event) {
   27c1c:	b082      	sub	sp, #8
   27c1e:	b510      	push	{r4, lr}
   27c20:	a902      	add	r1, sp, #8
   27c22:	e881 000c 	stmia.w	r1, {r2, r3}
   27c26:	4604      	mov	r4, r0
   27c28:	480b      	ldr	r0, [pc, #44]	; (27c58 <on_keymap_binding_convert_central_state_dependent_params+0x3c>)
   27c2a:	f018 fbe7 	bl	403fc <z_impl_device_get_binding>
    if (ext_power == NULL) {
   27c2e:	b178      	cbz	r0, 27c50 <on_keymap_binding_convert_central_state_dependent_params+0x34>
    if (binding->param1 == EXT_POWER_TOGGLE_CMD) {
   27c30:	6863      	ldr	r3, [r4, #4]
   27c32:	2b02      	cmp	r3, #2
   27c34:	d004      	beq.n	27c40 <on_keymap_binding_convert_central_state_dependent_params+0x24>
    return 0;
   27c36:	2000      	movs	r0, #0
}
   27c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27c3c:	b002      	add	sp, #8
   27c3e:	4770      	bx	lr
        binding->param1 = ext_power_get(ext_power) > 0 ? EXT_POWER_OFF_CMD : EXT_POWER_ON_CMD;
   27c40:	f01a f84c 	bl	41cdc <ext_power_get>
   27c44:	2800      	cmp	r0, #0
   27c46:	bfcc      	ite	gt
   27c48:	2000      	movgt	r0, #0
   27c4a:	2001      	movle	r0, #1
   27c4c:	6060      	str	r0, [r4, #4]
   27c4e:	e7f2      	b.n	27c36 <on_keymap_binding_convert_central_state_dependent_params+0x1a>
        return -EIO;
   27c50:	f06f 0004 	mvn.w	r0, #4
   27c54:	e7f0      	b.n	27c38 <on_keymap_binding_convert_central_state_dependent_params+0x1c>
   27c56:	bf00      	nop
   27c58:	0004a4b8 	.word	0x0004a4b8

00027c5c <new_zmk_battery_state_changed>:
 */

#include <zephyr/kernel.h>
#include <zmk/events/battery_state_changed.h>

   27c5c:	b510      	push	{r4, lr}
   27c5e:	4604      	mov	r4, r0
   27c60:	200c      	movs	r0, #12
   27c62:	f020 fe78 	bl	48956 <k_malloc>
   27c66:	4a02      	ldr	r2, [pc, #8]	; (27c70 <new_zmk_battery_state_changed+0x14>)
   27c68:	6002      	str	r2, [r0, #0]
   27c6a:	7204      	strb	r4, [r0, #8]
   27c6c:	bd10      	pop	{r4, pc}
   27c6e:	bf00      	nop
   27c70:	00049080 	.word	0x00049080

00027c74 <zmk_battery_timer>:
    }
}

K_WORK_DEFINE(battery_work, zmk_battery_work);

static void zmk_battery_timer(struct k_timer *timer) {
   27c74:	b508      	push	{r3, lr}
    k_work_submit_to_queue(zmk_workqueue_lowprio_work_q(), &battery_work);
   27c76:	f000 fa0b 	bl	28090 <zmk_workqueue_lowprio_work_q>
}
   27c7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    k_work_submit_to_queue(zmk_workqueue_lowprio_work_q(), &battery_work);
   27c7e:	4901      	ldr	r1, [pc, #4]	; (27c84 <zmk_battery_timer+0x10>)
   27c80:	f020 baf2 	b.w	48268 <k_work_submit_to_queue>
   27c84:	20000290 	.word	0x20000290

00027c88 <zmk_battery_init>:

K_TIMER_DEFINE(battery_timer, zmk_battery_timer, NULL);

static int zmk_battery_init(const struct device *_arg) {
   27c88:	b507      	push	{r0, r1, r2, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   27c8a:	480a      	ldr	r0, [pc, #40]	; (27cb4 <zmk_battery_init+0x2c>)
   27c8c:	f020 f844 	bl	47d18 <z_device_is_ready>
    }

    LOG_WRN("Finding battery device labeled BATTERY is deprecated. Use zmk,battery chosen node.");
#endif

    if (!device_is_ready(battery)) {
   27c90:	b168      	cbz	r0, 27cae <zmk_battery_init+0x26>
	z_impl_k_timer_start(timer, duration, period);
   27c92:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   27c96:	2300      	movs	r3, #0
   27c98:	e9cd 2300 	strd	r2, r3, [sp]
   27c9c:	4806      	ldr	r0, [pc, #24]	; (27cb8 <zmk_battery_init+0x30>)
   27c9e:	2200      	movs	r2, #0
   27ca0:	2300      	movs	r3, #0
   27ca2:	f019 fec3 	bl	41a2c <z_impl_k_timer_start>
        return -ENODEV;
    }

    k_timer_start(&battery_timer, K_NO_WAIT, K_SECONDS(CONFIG_ZMK_BATTERY_REPORT_INTERVAL));

    return 0;
   27ca6:	2000      	movs	r0, #0
}
   27ca8:	b003      	add	sp, #12
   27caa:	f85d fb04 	ldr.w	pc, [sp], #4
        return -ENODEV;
   27cae:	f06f 0012 	mvn.w	r0, #18
   27cb2:	e7f9      	b.n	27ca8 <zmk_battery_init+0x20>
   27cb4:	00048b38 	.word	0x00048b38
   27cb8:	20000bf8 	.word	0x20000bf8

00027cbc <zmk_battery_work>:
static void zmk_battery_work(struct k_work *work) {
   27cbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
						  enum sensor_channel type)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, type);
   27cbe:	4c0f      	ldr	r4, [pc, #60]	; (27cfc <zmk_battery_work+0x40>)
   27cc0:	68a5      	ldr	r5, [r4, #8]
   27cc2:	212c      	movs	r1, #44	; 0x2c
   27cc4:	68eb      	ldr	r3, [r5, #12]
   27cc6:	4620      	mov	r0, r4
   27cc8:	4798      	blx	r3
    if (rc != 0) {
   27cca:	b9a0      	cbnz	r0, 27cf6 <zmk_battery_work+0x3a>
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
   27ccc:	212c      	movs	r1, #44	; 0x2c
   27cce:	692b      	ldr	r3, [r5, #16]
   27cd0:	466a      	mov	r2, sp
   27cd2:	4620      	mov	r0, r4
   27cd4:	4798      	blx	r3
    if (rc != 0) {
   27cd6:	b970      	cbnz	r0, 27cf6 <zmk_battery_work+0x3a>
    if (last_state_of_charge != state_of_charge.val1) {
   27cd8:	4c09      	ldr	r4, [pc, #36]	; (27d00 <zmk_battery_work+0x44>)
   27cda:	9800      	ldr	r0, [sp, #0]
   27cdc:	7823      	ldrb	r3, [r4, #0]
   27cde:	4283      	cmp	r3, r0
   27ce0:	d009      	beq.n	27cf6 <zmk_battery_work+0x3a>
        last_state_of_charge = state_of_charge.val1;
   27ce2:	b2c0      	uxtb	r0, r0
   27ce4:	7020      	strb	r0, [r4, #0]
        rc = bt_bas_set_battery_level(last_state_of_charge);
   27ce6:	f000 fd87 	bl	287f8 <bt_bas_set_battery_level>
        if (rc != 0) {
   27cea:	b920      	cbnz	r0, 27cf6 <zmk_battery_work+0x3a>
        rc = ZMK_EVENT_RAISE(new_zmk_battery_state_changed(
   27cec:	7820      	ldrb	r0, [r4, #0]
   27cee:	f7ff ffb5 	bl	27c5c <new_zmk_battery_state_changed>
   27cf2:	f019 ff9e 	bl	41c32 <zmk_event_manager_raise>
}
   27cf6:	b003      	add	sp, #12
   27cf8:	bd30      	pop	{r4, r5, pc}
   27cfa:	bf00      	nop
   27cfc:	00048b38 	.word	0x00048b38
   27d00:	20003a31 	.word	0x20003a31

00027d04 <new_zmk_split_peripheral_status_changed>:
 */

#include <zephyr/kernel.h>
#include <zmk/events/split_peripheral_status_changed.h>

   27d04:	b510      	push	{r4, lr}
   27d06:	4604      	mov	r4, r0
   27d08:	200c      	movs	r0, #12
   27d0a:	f020 fe24 	bl	48956 <k_malloc>
   27d0e:	4a02      	ldr	r2, [pc, #8]	; (27d18 <new_zmk_split_peripheral_status_changed+0x14>)
   27d10:	6002      	str	r2, [r0, #0]
   27d12:	7204      	strb	r4, [r0, #8]
   27d14:	bd10      	pop	{r4, pc}
   27d16:	bf00      	nop
   27d18:	00049084 	.word	0x00049084

00027d1c <split_svc_pos_state>:
static uint8_t position_state[POS_STATE_LEN];

static struct zmk_split_run_behavior_payload behavior_run_payload;

static ssize_t split_svc_pos_state(struct bt_conn *conn, const struct bt_gatt_attr *attrs,
                                   void *buf, uint16_t len, uint16_t offset) {
   27d1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return bt_gatt_attr_read(conn, attrs, buf, len, offset, &position_state,
   27d1e:	2410      	movs	r4, #16
   27d20:	9402      	str	r4, [sp, #8]
   27d22:	4c04      	ldr	r4, [pc, #16]	; (27d34 <split_svc_pos_state+0x18>)
   27d24:	9401      	str	r4, [sp, #4]
   27d26:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   27d2a:	9400      	str	r4, [sp, #0]
   27d2c:	f01e fb92 	bl	46454 <bt_gatt_attr_read>
                             sizeof(position_state));
}
   27d30:	b004      	add	sp, #16
   27d32:	bd10      	pop	{r4, pc}
   27d34:	20003a45 	.word	0x20003a45

00027d38 <service_init>:
           channel_data_size * sizeof(struct zmk_sensor_channel_data));
    return send_sensor_state(ev);
}
#endif /* ZMK_KEYMAP_HAS_SENSORS */

int service_init(const struct device *_arg) {
   27d38:	b507      	push	{r0, r1, r2, lr}
    static const struct k_work_queue_config queue_config = {
        .name = "Split Peripheral Notification Queue"};
    k_work_queue_start(&service_work_q, service_q_stack, K_THREAD_STACK_SIZEOF(service_q_stack),
   27d3a:	4b06      	ldr	r3, [pc, #24]	; (27d54 <service_init+0x1c>)
   27d3c:	9300      	str	r3, [sp, #0]
   27d3e:	4906      	ldr	r1, [pc, #24]	; (27d58 <service_init+0x20>)
   27d40:	4806      	ldr	r0, [pc, #24]	; (27d5c <service_init+0x24>)
   27d42:	2305      	movs	r3, #5
   27d44:	f44f 7224 	mov.w	r2, #656	; 0x290
   27d48:	f019 f8b2 	bl	40eb0 <k_work_queue_start>
                       CONFIG_ZMK_SPLIT_BLE_PERIPHERAL_PRIORITY, &queue_config);

    return 0;
}
   27d4c:	2000      	movs	r0, #0
   27d4e:	b003      	add	sp, #12
   27d50:	f85d fb04 	ldr.w	pc, [sp], #4
   27d54:	0004908c 	.word	0x0004908c
   27d58:	20003b28 	.word	0x20003b28
   27d5c:	20000f38 	.word	0x20000f38

00027d60 <send_position_state_callback>:
void send_position_state_callback(struct k_work *work) {
   27d60:	b570      	push	{r4, r5, r6, lr}
	return z_impl_k_msgq_get(msgq, data, timeout);
   27d62:	4d0f      	ldr	r5, [pc, #60]	; (27da0 <send_position_state_callback+0x40>)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));

	params.attr = attr;
   27d64:	4e0f      	ldr	r6, [pc, #60]	; (27da4 <send_position_state_callback+0x44>)
   27d66:	b08a      	sub	sp, #40	; 0x28
   27d68:	2200      	movs	r2, #0
   27d6a:	2300      	movs	r3, #0
   27d6c:	4669      	mov	r1, sp
   27d6e:	4628      	mov	r0, r5
   27d70:	f018 fdb6 	bl	408e0 <z_impl_k_msgq_get>
    while (k_msgq_get(&position_state_msgq, &state, K_NO_WAIT) == 0) {
   27d74:	4604      	mov	r4, r0
   27d76:	b108      	cbz	r0, 27d7c <send_position_state_callback+0x1c>
};
   27d78:	b00a      	add	sp, #40	; 0x28
   27d7a:	bd70      	pop	{r4, r5, r6, pc}
	memset(&params, 0, sizeof(params));
   27d7c:	4621      	mov	r1, r4
   27d7e:	2218      	movs	r2, #24
   27d80:	a804      	add	r0, sp, #16
   27d82:	f01c fad4 	bl	4432e <memset>
	params.data = data;
	params.len = len;
   27d86:	2310      	movs	r3, #16
#if defined(CONFIG_BT_EATT)
	params.chan_opt = BT_ATT_CHAN_OPT_NONE;
#endif /* CONFIG_BT_EATT */

	return bt_gatt_notify_cb(conn, &params);
   27d88:	eb0d 0103 	add.w	r1, sp, r3
   27d8c:	4620      	mov	r0, r4
	params.attr = attr;
   27d8e:	9605      	str	r6, [sp, #20]
	params.data = data;
   27d90:	f8cd d018 	str.w	sp, [sp, #24]
	params.len = len;
   27d94:	f8ad 301c 	strh.w	r3, [sp, #28]
	return bt_gatt_notify_cb(conn, &params);
   27d98:	f006 feec 	bl	2eb74 <bt_gatt_notify_cb>
   27d9c:	e7e4      	b.n	27d68 <send_position_state_callback+0x8>
   27d9e:	bf00      	nop
   27da0:	20000cdc 	.word	0x20000cdc
   27da4:	000490a8 	.word	0x000490a8

00027da8 <send_position_state>:
int send_position_state() {
   27da8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return z_impl_k_msgq_put(msgq, data, timeout);
   27daa:	490e      	ldr	r1, [pc, #56]	; (27de4 <send_position_state+0x3c>)
   27dac:	480e      	ldr	r0, [pc, #56]	; (27de8 <send_position_state+0x40>)
   27dae:	f640 42cd 	movw	r2, #3277	; 0xccd
   27db2:	2300      	movs	r3, #0
   27db4:	f018 fd3e 	bl	40834 <z_impl_k_msgq_put>
    if (err) {
   27db8:	4604      	mov	r4, r0
   27dba:	b170      	cbz	r0, 27dda <send_position_state+0x32>
        switch (err) {
   27dbc:	f110 0f0b 	cmn.w	r0, #11
   27dc0:	d108      	bne.n	27dd4 <send_position_state+0x2c>
	return z_impl_k_msgq_get(msgq, data, timeout);
   27dc2:	2200      	movs	r2, #0
   27dc4:	2300      	movs	r3, #0
   27dc6:	4669      	mov	r1, sp
   27dc8:	4807      	ldr	r0, [pc, #28]	; (27de8 <send_position_state+0x40>)
   27dca:	f018 fd89 	bl	408e0 <z_impl_k_msgq_get>
            return send_position_state();
   27dce:	f7ff ffeb 	bl	27da8 <send_position_state>
   27dd2:	4604      	mov	r4, r0
}
   27dd4:	4620      	mov	r0, r4
   27dd6:	b004      	add	sp, #16
   27dd8:	bd10      	pop	{r4, pc}
    k_work_submit_to_queue(&service_work_q, &service_position_notify_work);
   27dda:	4904      	ldr	r1, [pc, #16]	; (27dec <send_position_state+0x44>)
   27ddc:	4804      	ldr	r0, [pc, #16]	; (27df0 <send_position_state+0x48>)
   27dde:	f020 fa43 	bl	48268 <k_work_submit_to_queue>
    return 0;
   27de2:	e7f7      	b.n	27dd4 <send_position_state+0x2c>
   27de4:	20003a45 	.word	0x20003a45
   27de8:	20000cdc 	.word	0x20000cdc
   27dec:	200002a0 	.word	0x200002a0
   27df0:	20000f38 	.word	0x20000f38

00027df4 <zmk_split_bt_position_pressed>:
    WRITE_BIT(position_state[position / 8], position % 8, true);
   27df4:	08c2      	lsrs	r2, r0, #3
   27df6:	4905      	ldr	r1, [pc, #20]	; (27e0c <zmk_split_bt_position_pressed+0x18>)
   27df8:	f000 0007 	and.w	r0, r0, #7
   27dfc:	2301      	movs	r3, #1
   27dfe:	4083      	lsls	r3, r0
   27e00:	5c88      	ldrb	r0, [r1, r2]
   27e02:	4303      	orrs	r3, r0
   27e04:	548b      	strb	r3, [r1, r2]
    return send_position_state();
   27e06:	f7ff bfcf 	b.w	27da8 <send_position_state>
   27e0a:	bf00      	nop
   27e0c:	20003a45 	.word	0x20003a45

00027e10 <zmk_split_bt_position_released>:
int zmk_split_bt_position_released(uint8_t position) {
   27e10:	b410      	push	{r4}
    WRITE_BIT(position_state[position / 8], position % 8, false);
   27e12:	08c1      	lsrs	r1, r0, #3
   27e14:	4c05      	ldr	r4, [pc, #20]	; (27e2c <zmk_split_bt_position_released+0x1c>)
   27e16:	f000 0007 	and.w	r0, r0, #7
   27e1a:	5c63      	ldrb	r3, [r4, r1]
   27e1c:	2201      	movs	r2, #1
   27e1e:	4082      	lsls	r2, r0
   27e20:	ea23 0302 	bic.w	r3, r3, r2
   27e24:	5463      	strb	r3, [r4, r1]
}
   27e26:	bc10      	pop	{r4}
    return send_position_state();
   27e28:	f7ff bfbe 	b.w	27da8 <send_position_state>
   27e2c:	20003a45 	.word	0x20003a45

00027e30 <zmk_peripheral_ble_init>:
    .le_param_updated = le_param_updated,
};

bool zmk_split_bt_peripheral_is_connected() { return is_connected; }

static int zmk_peripheral_ble_init(const struct device *_arg) {
   27e30:	b510      	push	{r4, lr}
    int err = bt_enable(NULL);
   27e32:	2000      	movs	r0, #0
   27e34:	f003 fd40 	bl	2b8b8 <bt_enable>

    if (err) {
   27e38:	4604      	mov	r4, r0
   27e3a:	b978      	cbnz	r0, 27e5c <zmk_peripheral_ble_init+0x2c>
        LOG_ERR("BLUETOOTH FAILED (%d)", err);
        return err;
    }

#if IS_ENABLED(CONFIG_SETTINGS)
    settings_subsys_init();
   27e3c:	f001 ff24 	bl	29c88 <settings_subsys_init>

    settings_load_subtree("ble");
   27e40:	4807      	ldr	r0, [pc, #28]	; (27e60 <zmk_peripheral_ble_init+0x30>)
   27e42:	f001 fe07 	bl	29a54 <settings_load_subtree>
    settings_load_subtree("bt");
   27e46:	4807      	ldr	r0, [pc, #28]	; (27e64 <zmk_peripheral_ble_init+0x34>)
   27e48:	f001 fe04 	bl	29a54 <settings_load_subtree>
#if IS_ENABLED(CONFIG_ZMK_BLE_CLEAR_BONDS_ON_START)
    LOG_WRN("Clearing all existing BLE bond information from the keyboard");

    bt_unpair(BT_ID_DEFAULT, NULL);
#else
    bt_conn_cb_register(&conn_callbacks);
   27e4c:	4806      	ldr	r0, [pc, #24]	; (27e68 <zmk_peripheral_ble_init+0x38>)
   27e4e:	f004 ff65 	bl	2cd1c <bt_conn_cb_register>

    low_duty_advertising = false;
   27e52:	4b06      	ldr	r3, [pc, #24]	; (27e6c <zmk_peripheral_ble_init+0x3c>)
    k_work_submit(&advertising_work);
   27e54:	4806      	ldr	r0, [pc, #24]	; (27e70 <zmk_peripheral_ble_init+0x40>)
    low_duty_advertising = false;
   27e56:	701c      	strb	r4, [r3, #0]
    k_work_submit(&advertising_work);
   27e58:	f019 f824 	bl	40ea4 <k_work_submit>
#endif

    return 0;
}
   27e5c:	4620      	mov	r0, r4
   27e5e:	bd10      	pop	{r4, pc}
   27e60:	0004a5ce 	.word	0x0004a5ce
   27e64:	0004a5d2 	.word	0x0004a5d2
   27e68:	200002d8 	.word	0x200002d8
   27e6c:	20003a55 	.word	0x20003a55
   27e70:	200002f8 	.word	0x200002f8

00027e74 <connected>:
    is_connected = (err == 0);
   27e74:	4b0a      	ldr	r3, [pc, #40]	; (27ea0 <connected+0x2c>)
   27e76:	fab1 f081 	clz	r0, r1
static void connected(struct bt_conn *conn, uint8_t err) {
   27e7a:	b510      	push	{r4, lr}
    is_connected = (err == 0);
   27e7c:	0940      	lsrs	r0, r0, #5
   27e7e:	460c      	mov	r4, r1
   27e80:	7018      	strb	r0, [r3, #0]
    ZMK_EVENT_RAISE(new_zmk_split_peripheral_status_changed(
   27e82:	f7ff ff3f 	bl	27d04 <new_zmk_split_peripheral_status_changed>
   27e86:	f019 fed4 	bl	41c32 <zmk_event_manager_raise>
    if (err == BT_HCI_ERR_ADV_TIMEOUT) {
   27e8a:	2c3c      	cmp	r4, #60	; 0x3c
   27e8c:	d107      	bne.n	27e9e <connected+0x2a>
        low_duty_advertising = true;
   27e8e:	4b05      	ldr	r3, [pc, #20]	; (27ea4 <connected+0x30>)
        k_work_submit(&advertising_work);
   27e90:	4805      	ldr	r0, [pc, #20]	; (27ea8 <connected+0x34>)
        low_duty_advertising = true;
   27e92:	2201      	movs	r2, #1
   27e94:	701a      	strb	r2, [r3, #0]
}
   27e96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        k_work_submit(&advertising_work);
   27e9a:	f019 b803 	b.w	40ea4 <k_work_submit>
}
   27e9e:	bd10      	pop	{r4, pc}
   27ea0:	20003a56 	.word	0x20003a56
   27ea4:	20003a55 	.word	0x20003a55
   27ea8:	200002f8 	.word	0x200002f8

00027eac <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   27eac:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   27eae:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   27eb0:	b08a      	sub	sp, #40	; 0x28
   27eb2:	4604      	mov	r4, r0
   27eb4:	460e      	mov	r6, r1
   27eb6:	ad07      	add	r5, sp, #28
	switch (addr->type) {
   27eb8:	2b03      	cmp	r3, #3
   27eba:	d820      	bhi.n	27efe <bt_addr_le_to_str.constprop.0.isra.0+0x52>
   27ebc:	e8df f003 	tbb	[pc, r3]
   27ec0:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   27ec4:	4911      	ldr	r1, [pc, #68]	; (27f0c <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   27ec6:	4628      	mov	r0, r5
   27ec8:	f01c f9e5 	bl	44296 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   27ecc:	9505      	str	r5, [sp, #20]
   27ece:	7863      	ldrb	r3, [r4, #1]
   27ed0:	9304      	str	r3, [sp, #16]
   27ed2:	78a3      	ldrb	r3, [r4, #2]
   27ed4:	9303      	str	r3, [sp, #12]
   27ed6:	78e3      	ldrb	r3, [r4, #3]
   27ed8:	9302      	str	r3, [sp, #8]
   27eda:	7923      	ldrb	r3, [r4, #4]
   27edc:	9301      	str	r3, [sp, #4]
   27ede:	7963      	ldrb	r3, [r4, #5]
   27ee0:	9300      	str	r3, [sp, #0]
   27ee2:	79a3      	ldrb	r3, [r4, #6]
   27ee4:	4a0a      	ldr	r2, [pc, #40]	; (27f10 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
   27ee6:	211e      	movs	r1, #30
   27ee8:	4630      	mov	r0, r6
   27eea:	f01a f87a 	bl	41fe2 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
   27eee:	b00a      	add	sp, #40	; 0x28
   27ef0:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   27ef2:	4908      	ldr	r1, [pc, #32]	; (27f14 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
   27ef4:	e7e7      	b.n	27ec6 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
   27ef6:	4908      	ldr	r1, [pc, #32]	; (27f18 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
   27ef8:	e7e5      	b.n	27ec6 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
   27efa:	4908      	ldr	r1, [pc, #32]	; (27f1c <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
   27efc:	e7e3      	b.n	27ec6 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   27efe:	4a08      	ldr	r2, [pc, #32]	; (27f20 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
   27f00:	210a      	movs	r1, #10
   27f02:	4628      	mov	r0, r5
   27f04:	f01a f86d 	bl	41fe2 <snprintk>
		break;
   27f08:	e7e0      	b.n	27ecc <bt_addr_le_to_str.constprop.0.isra.0+0x20>
   27f0a:	bf00      	nop
   27f0c:	0004a5d5 	.word	0x0004a5d5
   27f10:	0004a5fe 	.word	0x0004a5fe
   27f14:	0004a5dc 	.word	0x0004a5dc
   27f18:	0004a5e3 	.word	0x0004a5e3
   27f1c:	0004a5ed 	.word	0x0004a5ed
   27f20:	0004a5f7 	.word	0x0004a5f7

00027f24 <disconnected>:
static void disconnected(struct bt_conn *conn, uint8_t reason) {
   27f24:	b510      	push	{r4, lr}
   27f26:	b088      	sub	sp, #32
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   27f28:	f01d f9f2 	bl	45310 <bt_conn_get_dst>
   27f2c:	4669      	mov	r1, sp
   27f2e:	f7ff ffbd 	bl	27eac <bt_addr_le_to_str.constprop.0.isra.0>
    is_connected = false;
   27f32:	2400      	movs	r4, #0
   27f34:	4b06      	ldr	r3, [pc, #24]	; (27f50 <disconnected+0x2c>)
    ZMK_EVENT_RAISE(new_zmk_split_peripheral_status_changed(
   27f36:	4620      	mov	r0, r4
    is_connected = false;
   27f38:	701c      	strb	r4, [r3, #0]
    ZMK_EVENT_RAISE(new_zmk_split_peripheral_status_changed(
   27f3a:	f7ff fee3 	bl	27d04 <new_zmk_split_peripheral_status_changed>
   27f3e:	f019 fe78 	bl	41c32 <zmk_event_manager_raise>
    low_duty_advertising = false;
   27f42:	4b04      	ldr	r3, [pc, #16]	; (27f54 <disconnected+0x30>)
    k_work_submit(&advertising_work);
   27f44:	4804      	ldr	r0, [pc, #16]	; (27f58 <disconnected+0x34>)
    low_duty_advertising = false;
   27f46:	701c      	strb	r4, [r3, #0]
    k_work_submit(&advertising_work);
   27f48:	f018 ffac 	bl	40ea4 <k_work_submit>
}
   27f4c:	b008      	add	sp, #32
   27f4e:	bd10      	pop	{r4, pc}
   27f50:	20003a56 	.word	0x20003a56
   27f54:	20003a55 	.word	0x20003a55
   27f58:	200002f8 	.word	0x200002f8

00027f5c <advertising_cb>:
static void advertising_cb(struct k_work *work) {
   27f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    bt_addr_le_t central_addr = bt_addr_le_none;
   27f5e:	4d1f      	ldr	r5, [pc, #124]	; (27fdc <advertising_cb+0x80>)
    const int err = start_advertising(low_duty_advertising);
   27f60:	4b1f      	ldr	r3, [pc, #124]	; (27fe0 <advertising_cb+0x84>)
    bt_addr_le_t central_addr = bt_addr_le_none;
   27f62:	6828      	ldr	r0, [r5, #0]
   27f64:	88aa      	ldrh	r2, [r5, #4]
    const int err = start_advertising(low_duty_advertising);
   27f66:	781f      	ldrb	r7, [r3, #0]
    bt_foreach_bond(BT_ID_DEFAULT, each_bond, &central_addr);
   27f68:	491e      	ldr	r1, [pc, #120]	; (27fe4 <advertising_cb+0x88>)
    bt_addr_le_t central_addr = bt_addr_le_none;
   27f6a:	79ab      	ldrb	r3, [r5, #6]
static void advertising_cb(struct k_work *work) {
   27f6c:	b08b      	sub	sp, #44	; 0x2c
    bt_addr_le_t central_addr = bt_addr_le_none;
   27f6e:	ac03      	add	r4, sp, #12
   27f70:	9003      	str	r0, [sp, #12]
   27f72:	f8ad 2010 	strh.w	r2, [sp, #16]
    bt_foreach_bond(BT_ID_DEFAULT, each_bond, &central_addr);
   27f76:	2000      	movs	r0, #0
   27f78:	4622      	mov	r2, r4
    bt_addr_le_t central_addr = bt_addr_le_none;
   27f7a:	f88d 3012 	strb.w	r3, [sp, #18]
    bt_foreach_bond(BT_ID_DEFAULT, each_bond, &central_addr);
   27f7e:	f007 ff21 	bl	2fdc4 <bt_foreach_bond>
	return memcmp(a, b, sizeof(*a));
   27f82:	2207      	movs	r2, #7
   27f84:	4629      	mov	r1, r5
   27f86:	4620      	mov	r0, r4
   27f88:	f01c f9b6 	bl	442f8 <memcmp>
    if (bt_addr_le_cmp(&central_addr, BT_ADDR_LE_NONE) != 0) {
   27f8c:	4606      	mov	r6, r0
   27f8e:	b1c8      	cbz	r0, 27fc4 <advertising_cb+0x68>
        struct bt_le_adv_param adv_param = low_duty ? *BT_LE_ADV_CONN_DIR_LOW_DUTY(&central_addr)
   27f90:	2300      	movs	r3, #0
                                                    : *BT_LE_ADV_CONN_DIR(&central_addr);
   27f92:	429f      	cmp	r7, r3
   27f94:	bf0b      	itete	eq
   27f96:	4619      	moveq	r1, r3
   27f98:	21a0      	movne	r1, #160	; 0xa0
   27f9a:	461a      	moveq	r2, r3
   27f9c:	22f0      	movne	r2, #240	; 0xf0
   27f9e:	bf14      	ite	ne
   27fa0:	2013      	movne	r0, #19
   27fa2:	2003      	moveq	r0, #3
        struct bt_le_adv_param adv_param = low_duty ? *BT_LE_ADV_CONN_DIR_LOW_DUTY(&central_addr)
   27fa4:	e9cd 0106 	strd	r0, r1, [sp, #24]
   27fa8:	e9cd 2408 	strd	r2, r4, [sp, #32]
   27fac:	f8ad 3014 	strh.w	r3, [sp, #20]
   27fb0:	f88d 3016 	strb.w	r3, [sp, #22]
        return bt_le_adv_start(&adv_param, NULL, 0, NULL, 0);
   27fb4:	9300      	str	r3, [sp, #0]
   27fb6:	461a      	mov	r2, r3
   27fb8:	4619      	mov	r1, r3
        return bt_le_adv_start(BT_LE_ADV_CONN, zmk_ble_ad, ARRAY_SIZE(zmk_ble_ad), NULL, 0);
   27fba:	a805      	add	r0, sp, #20
   27fbc:	f004 f97a 	bl	2c2b4 <bt_le_adv_start>
}
   27fc0:	b00b      	add	sp, #44	; 0x2c
   27fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return bt_le_adv_start(BT_LE_ADV_CONN, zmk_ble_ad, ARRAY_SIZE(zmk_ble_ad), NULL, 0);
   27fc4:	4d08      	ldr	r5, [pc, #32]	; (27fe8 <advertising_cb+0x8c>)
   27fc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   27fc8:	ac05      	add	r4, sp, #20
   27fca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   27fcc:	682b      	ldr	r3, [r5, #0]
   27fce:	6023      	str	r3, [r4, #0]
   27fd0:	4906      	ldr	r1, [pc, #24]	; (27fec <advertising_cb+0x90>)
   27fd2:	9600      	str	r6, [sp, #0]
   27fd4:	4633      	mov	r3, r6
   27fd6:	2203      	movs	r2, #3
   27fd8:	e7ef      	b.n	27fba <advertising_cb+0x5e>
   27fda:	bf00      	nop
   27fdc:	0004a7b0 	.word	0x0004a7b0
   27fe0:	20003a55 	.word	0x20003a55
   27fe4:	00027ff1 	.word	0x00027ff1
   27fe8:	00048e60 	.word	0x00048e60
   27fec:	00049120 	.word	0x00049120

00027ff0 <each_bond>:
static void each_bond(const struct bt_bond_info *info, void *user_data) {
   27ff0:	b538      	push	{r3, r4, r5, lr}
   27ff2:	2207      	movs	r2, #7
   27ff4:	460c      	mov	r4, r1
   27ff6:	4906      	ldr	r1, [pc, #24]	; (28010 <each_bond+0x20>)
   27ff8:	4605      	mov	r5, r0
   27ffa:	f01c f97d 	bl	442f8 <memcmp>
    if (bt_addr_le_cmp(&info->addr, BT_ADDR_LE_NONE) != 0) {
   27ffe:	b130      	cbz	r0, 2800e <each_bond+0x1e>
	memcpy(dst, src, sizeof(*dst));
   28000:	4629      	mov	r1, r5
   28002:	4620      	mov	r0, r4
   28004:	2207      	movs	r2, #7
}
   28006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2800a:	f01c b985 	b.w	44318 <memcpy>
   2800e:	bd38      	pop	{r3, r4, r5, pc}
   28010:	0004a7b0 	.word	0x0004a7b0

00028014 <usb_status_cb>:
        return ZMK_USB_CONN_POWERED;
    }
}

void usb_status_cb(enum usb_dc_status_code status, const uint8_t *params) {
    usb_status = status;
   28014:	4b02      	ldr	r3, [pc, #8]	; (28020 <usb_status_cb+0xc>)
   28016:	7018      	strb	r0, [r3, #0]
    k_work_submit(&usb_status_notifier_work);
   28018:	4802      	ldr	r0, [pc, #8]	; (28024 <usb_status_cb+0x10>)
   2801a:	f018 bf43 	b.w	40ea4 <k_work_submit>
   2801e:	bf00      	nop
   28020:	20000b41 	.word	0x20000b41
   28024:	20000308 	.word	0x20000308

00028028 <zmk_usb_init>:
};

static int zmk_usb_init(const struct device *_arg) {
   28028:	b508      	push	{r3, lr}
    int usb_enable_ret;

    usb_enable_ret = usb_enable(usb_status_cb);
   2802a:	4804      	ldr	r0, [pc, #16]	; (2803c <zmk_usb_init+0x14>)
   2802c:	f001 f9f2 	bl	29414 <usb_enable>

    if (usb_enable_ret != 0) {
        LOG_ERR("Unable to enable USB");
        return -EINVAL;
   28030:	2800      	cmp	r0, #0
    }

    return 0;
}
   28032:	bf18      	it	ne
   28034:	f06f 0015 	mvnne.w	r0, #21
   28038:	bd08      	pop	{r3, pc}
   2803a:	bf00      	nop
   2803c:	00028015 	.word	0x00028015

00028040 <zmk_usb_get_conn_state>:
    switch (usb_status) {
   28040:	4b08      	ldr	r3, [pc, #32]	; (28064 <zmk_usb_get_conn_state+0x24>)
   28042:	781b      	ldrb	r3, [r3, #0]
   28044:	2b0b      	cmp	r3, #11
   28046:	f04f 0001 	mov.w	r0, #1
   2804a:	d80a      	bhi.n	28062 <zmk_usb_get_conn_state+0x22>
   2804c:	4098      	lsls	r0, r3
   2804e:	f410 7f1a 	tst.w	r0, #616	; 0x268
   28052:	d105      	bne.n	28060 <zmk_usb_get_conn_state+0x20>
   28054:	f410 6f01 	tst.w	r0, #2064	; 0x810
   28058:	bf0c      	ite	eq
   2805a:	2001      	moveq	r0, #1
   2805c:	2000      	movne	r0, #0
   2805e:	4770      	bx	lr
        return ZMK_USB_CONN_HID;
   28060:	2002      	movs	r0, #2
}
   28062:	4770      	bx	lr
   28064:	20000b41 	.word	0x20000b41

00028068 <workqueue_init>:

struct k_work_q *zmk_workqueue_lowprio_work_q() {
    return &lowprio_work_q;
}

static int workqueue_init() {
   28068:	b507      	push	{r0, r1, r2, lr}
    static const struct k_work_queue_config queue_config = {.name = "Low Priority Work Queue"};
    k_work_queue_start(&lowprio_work_q, lowprio_q_stack, K_THREAD_STACK_SIZEOF(lowprio_q_stack),
   2806a:	4b06      	ldr	r3, [pc, #24]	; (28084 <workqueue_init+0x1c>)
   2806c:	9300      	str	r3, [sp, #0]
   2806e:	4906      	ldr	r1, [pc, #24]	; (28088 <workqueue_init+0x20>)
   28070:	4806      	ldr	r0, [pc, #24]	; (2808c <workqueue_init+0x24>)
   28072:	230a      	movs	r3, #10
   28074:	f44f 7240 	mov.w	r2, #768	; 0x300
   28078:	f018 ff1a 	bl	40eb0 <k_work_queue_start>
                       CONFIG_ZMK_LOW_PRIORITY_THREAD_PRIORITY, &queue_config);
    return 0;
}
   2807c:	2000      	movs	r0, #0
   2807e:	b003      	add	sp, #12
   28080:	f85d fb04 	ldr.w	pc, [sp], #4
   28084:	00049138 	.word	0x00049138
   28088:	20003db8 	.word	0x20003db8
   2808c:	20000fd8 	.word	0x20000fd8

00028090 <zmk_workqueue_lowprio_work_q>:
}
   28090:	4800      	ldr	r0, [pc, #0]	; (28094 <zmk_workqueue_lowprio_work_q+0x4>)
   28092:	4770      	bx	lr
   28094:	20000fd8 	.word	0x20000fd8

00028098 <main>:
#include <drivers/ext_power.h>

void main(void) {
    LOG_INF("Welcome to ZMK!\n");

    if (zmk_kscan_init(DEVICE_DT_GET(ZMK_MATRIX_NODE_ID)) != 0) {
   28098:	4801      	ldr	r0, [pc, #4]	; (280a0 <main+0x8>)
   2809a:	f7ff bc4f 	b.w	2793c <zmk_kscan_init>
   2809e:	bf00      	nop
   280a0:	00048b98 	.word	0x00048b98

000280a4 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   280a4:	b510      	push	{r4, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   280a6:	4c09      	ldr	r4, [pc, #36]	; (280cc <crc8_ccitt+0x28>)
   280a8:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   280aa:	4291      	cmp	r1, r2
   280ac:	d100      	bne.n	280b0 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   280ae:	bd10      	pop	{r4, pc}
		val ^= p[i];
   280b0:	f811 3b01 	ldrb.w	r3, [r1], #1
   280b4:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   280b6:	0903      	lsrs	r3, r0, #4
   280b8:	0100      	lsls	r0, r0, #4
   280ba:	5ce3      	ldrb	r3, [r4, r3]
   280bc:	b2c0      	uxtb	r0, r0
   280be:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   280c0:	0918      	lsrs	r0, r3, #4
   280c2:	011b      	lsls	r3, r3, #4
   280c4:	5c20      	ldrb	r0, [r4, r0]
   280c6:	b2db      	uxtb	r3, r3
   280c8:	4058      	eors	r0, r3
	for (i = 0; i < cnt; i++) {
   280ca:	e7ee      	b.n	280aa <crc8_ccitt+0x6>
   280cc:	0004a639 	.word	0x0004a639

000280d0 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
   280d0:	4b01      	ldr	r3, [pc, #4]	; (280d8 <char_out+0x8>)
   280d2:	681b      	ldr	r3, [r3, #0]
   280d4:	4718      	bx	r3
   280d6:	bf00      	nop
   280d8:	20000318 	.word	0x20000318

000280dc <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
   280dc:	b507      	push	{r0, r1, r2, lr}
   280de:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   280e0:	2100      	movs	r1, #0
   280e2:	4602      	mov	r2, r0
   280e4:	9100      	str	r1, [sp, #0]
   280e6:	4803      	ldr	r0, [pc, #12]	; (280f4 <vprintk+0x18>)
   280e8:	f000 f92a 	bl	28340 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   280ec:	b003      	add	sp, #12
   280ee:	f85d fb04 	ldr.w	pc, [sp], #4
   280f2:	bf00      	nop
   280f4:	000280d1 	.word	0x000280d1

000280f8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   280f8:	b530      	push	{r4, r5, lr}
   280fa:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
   280fc:	2500      	movs	r5, #0
   280fe:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
   28102:	4604      	mov	r4, r0
   28104:	9500      	str	r5, [sp, #0]
   28106:	a903      	add	r1, sp, #12
   28108:	4805      	ldr	r0, [pc, #20]	; (28120 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
   2810a:	9505      	str	r5, [sp, #20]
   2810c:	f000 f918 	bl	28340 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   28110:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
   28114:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   28116:	bfb8      	it	lt
   28118:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   2811a:	b007      	add	sp, #28
   2811c:	bd30      	pop	{r4, r5, pc}
   2811e:	bf00      	nop
   28120:	00041fa3 	.word	0x00041fa3

00028124 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   28124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   28128:	8b05      	ldrh	r5, [r0, #24]
{
   2812a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   2812c:	0728      	lsls	r0, r5, #28
{
   2812e:	4690      	mov	r8, r2
	if (processing) {
   28130:	d411      	bmi.n	28156 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
   28132:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   28134:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   28138:	f040 80cd 	bne.w	282d6 <process_event+0x1b2>
			evt = process_recheck(mgr);
   2813c:	4620      	mov	r0, r4
   2813e:	f019 ff78 	bl	42032 <process_recheck>
		}

		if (evt == EVT_NOP) {
   28142:	b178      	cbz	r0, 28164 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
   28144:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   28146:	8b21      	ldrh	r1, [r4, #24]
   28148:	2804      	cmp	r0, #4
   2814a:	d811      	bhi.n	28170 <process_event+0x4c>
   2814c:	e8df f000 	tbb	[pc, r0]
   28150:	856d10c3 	.word	0x856d10c3
   28154:	95          	.byte	0x95
   28155:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
   28156:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   28158:	bf0c      	ite	eq
   2815a:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
   2815e:	f045 0520 	orrne.w	r5, r5, #32
   28162:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   28164:	f388 8811 	msr	BASEPRI, r8
   28168:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   2816c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   28170:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   28174:	45aa      	cmp	sl, r5
   28176:	f000 80a6 	beq.w	282c6 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
   2817a:	2700      	movs	r7, #0
   2817c:	46b9      	mov	r9, r7
   2817e:	463e      	mov	r6, r7
   28180:	68a3      	ldr	r3, [r4, #8]
   28182:	2b00      	cmp	r3, #0
   28184:	f000 80bd 	beq.w	28302 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   28188:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   2818c:	8321      	strh	r1, [r4, #24]
   2818e:	f388 8811 	msr	BASEPRI, r8
   28192:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   28196:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   28198:	2900      	cmp	r1, #0
   2819a:	f000 80bb 	beq.w	28314 <process_event+0x1f0>
	return node->next;
   2819e:	680d      	ldr	r5, [r1, #0]
   281a0:	2900      	cmp	r1, #0
   281a2:	f000 80b7 	beq.w	28314 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
   281a6:	f8d1 8004 	ldr.w	r8, [r1, #4]
   281aa:	4633      	mov	r3, r6
   281ac:	4652      	mov	r2, sl
   281ae:	4620      	mov	r0, r4
   281b0:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   281b2:	2d00      	cmp	r5, #0
   281b4:	d076      	beq.n	282a4 <process_event+0x180>
   281b6:	682b      	ldr	r3, [r5, #0]
   281b8:	4629      	mov	r1, r5
   281ba:	461d      	mov	r5, r3
   281bc:	e7f0      	b.n	281a0 <process_event+0x7c>
   281be:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   281c2:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   281c4:	2a01      	cmp	r2, #1
   281c6:	d81b      	bhi.n	28200 <process_event+0xdc>
	list->head = NULL;
   281c8:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   281ca:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   281ce:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   281d0:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   281d2:	b289      	uxth	r1, r1
	list->tail = NULL;
   281d4:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   281d8:	d109      	bne.n	281ee <process_event+0xca>
   281da:	463b      	mov	r3, r7
   281dc:	e003      	b.n	281e6 <process_event+0xc2>
				mgr->refs += 1U;
   281de:	8b62      	ldrh	r2, [r4, #26]
   281e0:	3201      	adds	r2, #1
   281e2:	8362      	strh	r2, [r4, #26]
	return node->next;
   281e4:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   281e6:	2b00      	cmp	r3, #0
   281e8:	d1f9      	bne.n	281de <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   281ea:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   281ee:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   281f0:	4620      	mov	r0, r4
   281f2:	f019 ff1e 	bl	42032 <process_recheck>
   281f6:	2800      	cmp	r0, #0
   281f8:	d07b      	beq.n	282f2 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   281fa:	f041 0120 	orr.w	r1, r1, #32
   281fe:	e077      	b.n	282f0 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
   28200:	2b04      	cmp	r3, #4
   28202:	d10a      	bne.n	2821a <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   28204:	f021 0107 	bic.w	r1, r1, #7
   28208:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   2820a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   2820c:	4620      	mov	r0, r4
   2820e:	f019 ff10 	bl	42032 <process_recheck>
   28212:	b110      	cbz	r0, 2821a <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   28214:	f041 0120 	orr.w	r1, r1, #32
   28218:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   2821a:	8b21      	ldrh	r1, [r4, #24]
   2821c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   28220:	45aa      	cmp	sl, r5
   28222:	d050      	beq.n	282c6 <process_event+0x1a2>
   28224:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
   28226:	46b9      	mov	r9, r7
   28228:	e7aa      	b.n	28180 <process_event+0x5c>
			transit = mgr->transitions->start;
   2822a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2822c:	f021 0107 	bic.w	r1, r1, #7
   28230:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
   28234:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
   28236:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
   2823a:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   2823c:	d12d      	bne.n	2829a <process_event+0x176>
		    || (transit != NULL)) {
   2823e:	f1b9 0f00 	cmp.w	r9, #0
   28242:	d040      	beq.n	282c6 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   28244:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   28248:	8321      	strh	r1, [r4, #24]
   2824a:	f388 8811 	msr	BASEPRI, r8
   2824e:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
   28252:	493a      	ldr	r1, [pc, #232]	; (2833c <process_event+0x218>)
   28254:	4620      	mov	r0, r4
   28256:	47c8      	blx	r9
   28258:	e029      	b.n	282ae <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2825a:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
   2825e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   28260:	f041 0104 	orr.w	r1, r1, #4
   28264:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   28266:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
   28268:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
   2826c:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   2826e:	d0e6      	beq.n	2823e <process_event+0x11a>
   28270:	2700      	movs	r7, #0
		res = 0;
   28272:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   28274:	f04f 0a04 	mov.w	sl, #4
   28278:	e782      	b.n	28180 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2827a:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
   2827e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   28280:	f041 0105 	orr.w	r1, r1, #5
   28284:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   28286:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
   28288:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
   2828c:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   2828e:	d0d6      	beq.n	2823e <process_event+0x11a>
   28290:	2700      	movs	r7, #0
		res = 0;
   28292:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   28294:	f04f 0a05 	mov.w	sl, #5
   28298:	e772      	b.n	28180 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
   2829a:	2700      	movs	r7, #0
		res = 0;
   2829c:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   2829e:	f04f 0a06 	mov.w	sl, #6
   282a2:	e76d      	b.n	28180 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   282a4:	462b      	mov	r3, r5
   282a6:	e787      	b.n	281b8 <process_event+0x94>
			if (transit != NULL) {
   282a8:	f1b9 0f00 	cmp.w	r9, #0
   282ac:	d1d1      	bne.n	28252 <process_event+0x12e>
	__asm__ volatile(
   282ae:	f04f 0320 	mov.w	r3, #32
   282b2:	f3ef 8811 	mrs	r8, BASEPRI
   282b6:	f383 8812 	msr	BASEPRI_MAX, r3
   282ba:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   282be:	8b23      	ldrh	r3, [r4, #24]
   282c0:	f023 0308 	bic.w	r3, r3, #8
   282c4:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   282c6:	8b25      	ldrh	r5, [r4, #24]
   282c8:	06ea      	lsls	r2, r5, #27
   282ca:	d52e      	bpl.n	2832a <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   282cc:	f025 0310 	bic.w	r3, r5, #16
   282d0:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   282d2:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
   282d6:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   282d8:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   282da:	2e00      	cmp	r6, #0
   282dc:	f6bf af6f 	bge.w	281be <process_event+0x9a>
	list->head = NULL;
   282e0:	2300      	movs	r3, #0
		*clients = mgr->clients;
   282e2:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
   282e4:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   282e8:	f021 0107 	bic.w	r1, r1, #7
   282ec:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
   282f0:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   282f2:	8b21      	ldrh	r1, [r4, #24]
   282f4:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   282f8:	45aa      	cmp	sl, r5
   282fa:	f04f 0900 	mov.w	r9, #0
   282fe:	f47f af3f 	bne.w	28180 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
   28302:	2f00      	cmp	r7, #0
   28304:	d09b      	beq.n	2823e <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   28306:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   2830a:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
   2830c:	f388 8811 	msr	BASEPRI, r8
   28310:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
   28314:	2f00      	cmp	r7, #0
   28316:	d0c7      	beq.n	282a8 <process_event+0x184>
	return node->next;
   28318:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
   2831a:	4639      	mov	r1, r7
   2831c:	4633      	mov	r3, r6
   2831e:	4652      	mov	r2, sl
   28320:	4620      	mov	r0, r4
   28322:	f019 feb2 	bl	4208a <notify_one>
	list->head = node;
   28326:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
   28328:	e7f4      	b.n	28314 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   2832a:	06ab      	lsls	r3, r5, #26
   2832c:	f57f af1a 	bpl.w	28164 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   28330:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   28334:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   28336:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   2833a:	e6ff      	b.n	2813c <process_event+0x18>
   2833c:	000420b7 	.word	0x000420b7

00028340 <z_cbvprintf_impl>:
 *
 * @return printed byte count if CONFIG_CBPRINTF_LIBC_SUBSTS is set
 */
int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fmt,
		     va_list ap, uint32_t flags)
{
   28340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28344:	b08d      	sub	sp, #52	; 0x34
   28346:	461d      	mov	r5, r3

	const bool tagged_ap = (flags & Z_CBVPRINTF_PROCESS_FLAG_TAGGED_ARGS)
			       == Z_CBVPRINTF_PROCESS_FLAG_TAGGED_ARGS;

	/* we pre-increment in the loop  afterwards */
	fmt--;
   28348:	1e53      	subs	r3, r2, #1
{
   2834a:	4682      	mov	sl, r0
   2834c:	9101      	str	r1, [sp, #4]
	fmt--;
   2834e:	9303      	str	r3, [sp, #12]
	size_t count = 0;
   28350:	f04f 0900 	mov.w	r9, #0

start:
	while (*++fmt != '%') {
   28354:	9b03      	ldr	r3, [sp, #12]
   28356:	7858      	ldrb	r0, [r3, #1]
   28358:	2825      	cmp	r0, #37	; 0x25
   2835a:	f103 0401 	add.w	r4, r3, #1
   2835e:	d119      	bne.n	28394 <z_cbvprintf_impl+0x54>
	prefix = "";
	padding_mode = 0;
	length_mod = 0;
	special = 0;

	for (fmt++ ; ; fmt++) {
   28360:	461e      	mov	r6, r3
	special = 0;
   28362:	2000      	movs	r0, #0
	precision = -1;
   28364:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	for (fmt++ ; ; fmt++) {
   28368:	3602      	adds	r6, #2
	length_mod = 0;
   2836a:	4603      	mov	r3, r0
	padding_mode = 0;
   2836c:	9002      	str	r0, [sp, #8]
	min_width = -1;
   2836e:	4644      	mov	r4, r8
		switch (*fmt) {
   28370:	7831      	ldrb	r1, [r6, #0]
   28372:	9603      	str	r6, [sp, #12]
   28374:	2939      	cmp	r1, #57	; 0x39
   28376:	d854      	bhi.n	28422 <z_cbvprintf_impl+0xe2>
   28378:	291f      	cmp	r1, #31
   2837a:	d814      	bhi.n	283a6 <z_cbvprintf_impl+0x66>
   2837c:	2900      	cmp	r1, #0
   2837e:	f000 81f0 	beq.w	28762 <z_cbvprintf_impl+0x422>
			precision = 0;
			break;
		}

		default:
			OUTC('%');
   28382:	9901      	ldr	r1, [sp, #4]
   28384:	2025      	movs	r0, #37	; 0x25
   28386:	47d0      	blx	sl
			OUTC(*fmt);
   28388:	9901      	ldr	r1, [sp, #4]
   2838a:	7830      	ldrb	r0, [r6, #0]
   2838c:	47d0      	blx	sl
   2838e:	f109 0902 	add.w	r9, r9, #2
			goto start;
   28392:	e7df      	b.n	28354 <z_cbvprintf_impl+0x14>
		if (*fmt == '\0') {
   28394:	2800      	cmp	r0, #0
   28396:	f000 81e4 	beq.w	28762 <z_cbvprintf_impl+0x422>
		OUTC(*fmt);
   2839a:	9901      	ldr	r1, [sp, #4]
   2839c:	47d0      	blx	sl
   2839e:	f109 0901 	add.w	r9, r9, #1
	while (*++fmt != '%') {
   283a2:	9403      	str	r4, [sp, #12]
   283a4:	e7d6      	b.n	28354 <z_cbvprintf_impl+0x14>
		switch (*fmt) {
   283a6:	f1a1 0220 	sub.w	r2, r1, #32
   283aa:	2a19      	cmp	r2, #25
   283ac:	d8e9      	bhi.n	28382 <z_cbvprintf_impl+0x42>
   283ae:	a701      	add	r7, pc, #4	; (adr r7, 283b4 <z_cbvprintf_impl+0x74>)
   283b0:	f857 f022 	ldr.w	pc, [r7, r2, lsl #2]
   283b4:	0002841d 	.word	0x0002841d
   283b8:	00028383 	.word	0x00028383
   283bc:	00028383 	.word	0x00028383
   283c0:	0002841d 	.word	0x0002841d
   283c4:	00028383 	.word	0x00028383
   283c8:	0002849d 	.word	0x0002849d
   283cc:	00028383 	.word	0x00028383
   283d0:	00028383 	.word	0x00028383
   283d4:	00028383 	.word	0x00028383
   283d8:	00028383 	.word	0x00028383
   283dc:	000284e9 	.word	0x000284e9
   283e0:	0002841d 	.word	0x0002841d
   283e4:	00028383 	.word	0x00028383
   283e8:	000284fd 	.word	0x000284fd
   283ec:	000284a9 	.word	0x000284a9
   283f0:	00028383 	.word	0x00028383
   283f4:	000284b7 	.word	0x000284b7
   283f8:	000284d7 	.word	0x000284d7
   283fc:	000284d7 	.word	0x000284d7
   28400:	000284d7 	.word	0x000284d7
   28404:	000284d7 	.word	0x000284d7
   28408:	000284d7 	.word	0x000284d7
   2840c:	000284d7 	.word	0x000284d7
   28410:	000284d7 	.word	0x000284d7
   28414:	000284d7 	.word	0x000284d7
   28418:	000284d7 	.word	0x000284d7
   2841c:	4608      	mov	r0, r1
   2841e:	3601      	adds	r6, #1
   28420:	e7a6      	b.n	28370 <z_cbvprintf_impl+0x30>
   28422:	2958      	cmp	r1, #88	; 0x58
   28424:	f000 80ee 	beq.w	28604 <z_cbvprintf_impl+0x2c4>
   28428:	f1a1 0263 	sub.w	r2, r1, #99	; 0x63
   2842c:	b2d7      	uxtb	r7, r2
   2842e:	2f17      	cmp	r7, #23
   28430:	d8a7      	bhi.n	28382 <z_cbvprintf_impl+0x42>
   28432:	2a17      	cmp	r2, #23
   28434:	d8a5      	bhi.n	28382 <z_cbvprintf_impl+0x42>
   28436:	a701      	add	r7, pc, #4	; (adr r7, 2843c <z_cbvprintf_impl+0xfc>)
   28438:	f857 f022 	ldr.w	pc, [r7, r2, lsl #2]
   2843c:	000286ab 	.word	0x000286ab
   28440:	00028523 	.word	0x00028523
   28444:	00028383 	.word	0x00028383
   28448:	00028383 	.word	0x00028383
   2844c:	00028383 	.word	0x00028383
   28450:	00028503 	.word	0x00028503
   28454:	00028523 	.word	0x00028523
   28458:	00028383 	.word	0x00028383
   2845c:	00028383 	.word	0x00028383
   28460:	00028503 	.word	0x00028503
   28464:	00028383 	.word	0x00028383
   28468:	00028383 	.word	0x00028383
   2846c:	00028383 	.word	0x00028383
   28470:	000285df 	.word	0x000285df
   28474:	00028383 	.word	0x00028383
   28478:	00028383 	.word	0x00028383
   2847c:	0002867f 	.word	0x0002867f
   28480:	00028383 	.word	0x00028383
   28484:	00028523 	.word	0x00028523
   28488:	00028383 	.word	0x00028383
   2848c:	00028383 	.word	0x00028383
   28490:	000285df 	.word	0x000285df
   28494:	00028383 	.word	0x00028383
   28498:	00028503 	.word	0x00028503
			OUTC('%');
   2849c:	9901      	ldr	r1, [sp, #4]
   2849e:	2025      	movs	r0, #37	; 0x25
   284a0:	47d0      	blx	sl
   284a2:	f109 0901 	add.w	r9, r9, #1
			goto start;
   284a6:	e755      	b.n	28354 <z_cbvprintf_impl+0x14>
			padding_mode &= (char)~PAD_ZERO;
   284a8:	9a02      	ldr	r2, [sp, #8]
   284aa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   284ae:	9202      	str	r2, [sp, #8]
			precision = 0;
   284b0:	f04f 0800 	mov.w	r8, #0
			continue;
   284b4:	e7b3      	b.n	2841e <z_cbvprintf_impl+0xde>
			if (min_width < 0 && precision < 0 && !padding_mode) {
   284b6:	2c00      	cmp	r4, #0
   284b8:	da0d      	bge.n	284d6 <z_cbvprintf_impl+0x196>
   284ba:	f1b8 0f00 	cmp.w	r8, #0
   284be:	da0d      	bge.n	284dc <z_cbvprintf_impl+0x19c>
   284c0:	9a02      	ldr	r2, [sp, #8]
   284c2:	2a00      	cmp	r2, #0
   284c4:	f000 8145 	beq.w	28752 <z_cbvprintf_impl+0x412>
				if (min_width < 0) {
   284c8:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
				min_width = 10 * min_width + *fmt - '0';
   284cc:	220a      	movs	r2, #10
   284ce:	fb02 1404 	mla	r4, r2, r4, r1
   284d2:	3c30      	subs	r4, #48	; 0x30
   284d4:	e7a3      	b.n	2841e <z_cbvprintf_impl+0xde>
			if (precision >= 0) {
   284d6:	f1b8 0f00 	cmp.w	r8, #0
   284da:	dbf5      	blt.n	284c8 <z_cbvprintf_impl+0x188>
				precision = 10 * precision + *fmt - '0';
   284dc:	220a      	movs	r2, #10
   284de:	fb02 1208 	mla	r2, r2, r8, r1
   284e2:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
   284e6:	e79a      	b.n	2841e <z_cbvprintf_impl+0xde>
			if (precision >= 0) {
   284e8:	f1b8 0f00 	cmp.w	r8, #0
				precision = va_arg(ap, int);
   284ec:	f855 2b04 	ldr.w	r2, [r5], #4
			if (precision >= 0) {
   284f0:	f280 8131 	bge.w	28756 <z_cbvprintf_impl+0x416>
				if (min_width < 0) {
   284f4:	2a00      	cmp	r2, #0
   284f6:	f280 8130 	bge.w	2875a <z_cbvprintf_impl+0x41a>
					min_width = -min_width;
   284fa:	4254      	negs	r4, r2
		switch (*fmt) {
   284fc:	2202      	movs	r2, #2
				padding_mode = PAD_ZERO;
   284fe:	9202      	str	r2, [sp, #8]
   28500:	e78d      	b.n	2841e <z_cbvprintf_impl+0xde>
			if (*fmt == 'h' && length_mod == 'h') {
   28502:	2968      	cmp	r1, #104	; 0x68
   28504:	d103      	bne.n	2850e <z_cbvprintf_impl+0x1ce>
   28506:	2b68      	cmp	r3, #104	; 0x68
   28508:	d106      	bne.n	28518 <z_cbvprintf_impl+0x1d8>
				length_mod = 'H';
   2850a:	2348      	movs	r3, #72	; 0x48
   2850c:	e787      	b.n	2841e <z_cbvprintf_impl+0xde>
			} else if (*fmt == 'l' && length_mod == 'l') {
   2850e:	296c      	cmp	r1, #108	; 0x6c
   28510:	d102      	bne.n	28518 <z_cbvprintf_impl+0x1d8>
   28512:	2b6c      	cmp	r3, #108	; 0x6c
   28514:	f000 8123 	beq.w	2875e <z_cbvprintf_impl+0x41e>
			} else if (length_mod == '\0') {
   28518:	2b00      	cmp	r3, #0
   2851a:	f47f af32 	bne.w	28382 <z_cbvprintf_impl+0x42>
		switch (*fmt) {
   2851e:	460b      	mov	r3, r1
   28520:	e77d      	b.n	2841e <z_cbvprintf_impl+0xde>
			if (length_mod == 'z') {
   28522:	2b7a      	cmp	r3, #122	; 0x7a
   28524:	d106      	bne.n	28534 <z_cbvprintf_impl+0x1f4>
			} else if (*fmt == 'u') {
   28526:	2975      	cmp	r1, #117	; 0x75
				precision = va_arg(ap, int);
   28528:	f855 6b04 	ldr.w	r6, [r5], #4
			} else if (*fmt == 'u') {
   2852c:	d114      	bne.n	28558 <z_cbvprintf_impl+0x218>
				d = va_arg(ap, unsigned int);
   2852e:	f04f 0b00 	mov.w	fp, #0
			if (*fmt != 'u' && (int_value_type)d < 0) {
   28532:	e00c      	b.n	2854e <z_cbvprintf_impl+0x20e>
			} else if (length_mod == 'l') {
   28534:	2b6c      	cmp	r3, #108	; 0x6c
   28536:	d0f6      	beq.n	28526 <z_cbvprintf_impl+0x1e6>
			} else if (length_mod == 'L') {
   28538:	2b4c      	cmp	r3, #76	; 0x4c
   2853a:	d1f4      	bne.n	28526 <z_cbvprintf_impl+0x1e6>
					unsigned long long llu =
   2853c:	3507      	adds	r5, #7
   2853e:	f025 0307 	bic.w	r3, r5, #7
				if (*fmt == 'u') {
   28542:	2975      	cmp	r1, #117	; 0x75
					unsigned long long llu =
   28544:	e9d3 6b00 	ldrd	r6, fp, [r3]
   28548:	f103 0508 	add.w	r5, r3, #8
				if (*fmt == 'u') {
   2854c:	d106      	bne.n	2855c <z_cbvprintf_impl+0x21c>
			} else if (special == ' ') {
   2854e:	2820      	cmp	r0, #32
   28550:	d13e      	bne.n	285d0 <z_cbvprintf_impl+0x290>
				prefix = " ";
   28552:	4f86      	ldr	r7, [pc, #536]	; (2876c <z_cbvprintf_impl+0x42c>)
				min_width--;
   28554:	3c01      	subs	r4, #1
   28556:	e009      	b.n	2856c <z_cbvprintf_impl+0x22c>
				d = va_arg(ap, int);
   28558:	ea4f 7be6 	mov.w	fp, r6, asr #31
			if (*fmt != 'u' && (int_value_type)d < 0) {
   2855c:	f1bb 0f00 	cmp.w	fp, #0
   28560:	daf5      	bge.n	2854e <z_cbvprintf_impl+0x20e>
				d = -d;
   28562:	4276      	negs	r6, r6
				prefix = "-";
   28564:	4f82      	ldr	r7, [pc, #520]	; (28770 <z_cbvprintf_impl+0x430>)
				d = -d;
   28566:	eb6b 0b4b 	sbc.w	fp, fp, fp, lsl #1
				min_width--;
   2856a:	3c01      	subs	r4, #1
	int i = 0;
   2856c:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   28570:	9305      	str	r3, [sp, #20]
   28572:	2300      	movs	r3, #0
   28574:	9304      	str	r3, [sp, #16]
		unsigned int c = num % base;
   28576:	4630      	mov	r0, r6
   28578:	4659      	mov	r1, fp
   2857a:	220a      	movs	r2, #10
   2857c:	2300      	movs	r3, #0
   2857e:	f7fd fdbf 	bl	26100 <__aeabi_uldivmod>
		buftop[--i] = c + '0';
   28582:	9b04      	ldr	r3, [sp, #16]
   28584:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
   28588:	f8cd c010 	str.w	ip, [sp, #16]
   2858c:	f8dd c014 	ldr.w	ip, [sp, #20]
   28590:	3230      	adds	r2, #48	; 0x30
   28592:	f80c 2d01 	strb.w	r2, [ip, #-1]!
   28596:	f8cd c014 	str.w	ip, [sp, #20]
		num /= base;
   2859a:	46b4      	mov	ip, r6
   2859c:	465a      	mov	r2, fp
	} while (num);
   2859e:	f1bc 0f0a 	cmp.w	ip, #10
   285a2:	f172 0200 	sbcs.w	r2, r2, #0
		num /= base;
   285a6:	4606      	mov	r6, r0
   285a8:	468b      	mov	fp, r1
	} while (num);
   285aa:	d2e4      	bcs.n	28576 <z_cbvprintf_impl+0x236>
	return -i;
   285ac:	f1c3 0b01 	rsb	fp, r3, #1
			data = buf + sizeof(buf) - data_len;
   285b0:	3330      	adds	r3, #48	; 0x30
			data = buf + sizeof(buf) - data_len;
   285b2:	eb0d 0603 	add.w	r6, sp, r3
		}

		if (precision < 0 && (padding_mode & PAD_ZERO)) {
   285b6:	f1b8 0f00 	cmp.w	r8, #0
			data = buf + sizeof(buf) - data_len;
   285ba:	f1a6 0604 	sub.w	r6, r6, #4
		if (precision < 0 && (padding_mode & PAD_ZERO)) {
   285be:	da6d      	bge.n	2869c <z_cbvprintf_impl+0x35c>
   285c0:	9b02      	ldr	r3, [sp, #8]
   285c2:	07d9      	lsls	r1, r3, #31
   285c4:	d47c      	bmi.n	286c0 <z_cbvprintf_impl+0x380>
			precision = min_width;
		}
		min_width -= data_len;
		precision -= data_len;
   285c6:	eba8 030b 	sub.w	r3, r8, fp
		min_width -= data_len;
   285ca:	eba4 040b 	sub.w	r4, r4, fp
   285ce:	e013      	b.n	285f8 <z_cbvprintf_impl+0x2b8>
			} else if (special == '+') {
   285d0:	282b      	cmp	r0, #43	; 0x2b
				prefix = "+";
   285d2:	bf0a      	itet	eq
   285d4:	4f67      	ldreq	r7, [pc, #412]	; (28774 <z_cbvprintf_impl+0x434>)
	prefix = "";
   285d6:	4f68      	ldrne	r7, [pc, #416]	; (28778 <z_cbvprintf_impl+0x438>)
				min_width--;
   285d8:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
   285dc:	e7c6      	b.n	2856c <z_cbvprintf_impl+0x22c>
			if (*fmt == 'p') {
   285de:	2970      	cmp	r1, #112	; 0x70
   285e0:	d10f      	bne.n	28602 <z_cbvprintf_impl+0x2c2>
				x = (uintptr_t)va_arg(ap, void *);
   285e2:	f855 2b04 	ldr.w	r2, [r5], #4
   285e6:	2300      	movs	r3, #0
				if (x == (uint_value_type)0) {
   285e8:	b9fa      	cbnz	r2, 2862a <z_cbvprintf_impl+0x2ea>
					data = "(nil)";
   285ea:	4e64      	ldr	r6, [pc, #400]	; (2877c <z_cbvprintf_impl+0x43c>)
		min_width -= data_len;
   285ec:	3c05      	subs	r4, #5
		precision -= data_len;
   285ee:	f06f 0304 	mvn.w	r3, #4
					data_len = 5;
   285f2:	f04f 0b05 	mov.w	fp, #5
	prefix = "";
   285f6:	4f60      	ldr	r7, [pc, #384]	; (28778 <z_cbvprintf_impl+0x438>)
		if (precision > 0) {
			min_width -= precision;
		}

		if (!(padding_mode & PAD_TAIL)) {
   285f8:	9a02      	ldr	r2, [sp, #8]
   285fa:	0792      	lsls	r2, r2, #30
   285fc:	d46f      	bmi.n	286de <z_cbvprintf_impl+0x39e>
   285fe:	46a0      	mov	r8, r4
   28600:	e065      	b.n	286ce <z_cbvprintf_impl+0x38e>
		switch (*fmt) {
   28602:	2178      	movs	r1, #120	; 0x78
			} else if (length_mod == 'l') {
   28604:	2b6c      	cmp	r3, #108	; 0x6c
   28606:	d103      	bne.n	28610 <z_cbvprintf_impl+0x2d0>
				x = va_arg(ap, unsigned int);
   28608:	f855 2b04 	ldr.w	r2, [r5], #4
   2860c:	2300      	movs	r3, #0
   2860e:	e008      	b.n	28622 <z_cbvprintf_impl+0x2e2>
			} else if (length_mod == 'L') {
   28610:	2b4c      	cmp	r3, #76	; 0x4c
   28612:	d1f9      	bne.n	28608 <z_cbvprintf_impl+0x2c8>
				unsigned long long llx =
   28614:	3507      	adds	r5, #7
   28616:	f025 0307 	bic.w	r3, r5, #7
   2861a:	461d      	mov	r5, r3
   2861c:	685b      	ldr	r3, [r3, #4]
   2861e:	f855 2b08 	ldr.w	r2, [r5], #8
			if (special == '#') {
   28622:	2823      	cmp	r0, #35	; 0x23
   28624:	d125      	bne.n	28672 <z_cbvprintf_impl+0x332>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
   28626:	0688      	lsls	r0, r1, #26
   28628:	d521      	bpl.n	2866e <z_cbvprintf_impl+0x32e>
   2862a:	4f55      	ldr	r7, [pc, #340]	; (28780 <z_cbvprintf_impl+0x440>)
				min_width -= 2;
   2862c:	3c02      	subs	r4, #2
			data_len = convert_value(x, 16, ALPHA(*fmt),
   2862e:	f001 0160 	and.w	r1, r1, #96	; 0x60
   28632:	f1a1 0b39 	sub.w	fp, r1, #57	; 0x39
	int i = 0;
   28636:	f10d 0e2d 	add.w	lr, sp, #45	; 0x2d
   2863a:	2600      	movs	r6, #0
		unsigned int c = num % base;
   2863c:	f002 010f 	and.w	r1, r2, #15
		if (c >= 10) {
   28640:	2909      	cmp	r1, #9
			c += alpha;
   28642:	bf88      	it	hi
   28644:	4459      	addhi	r1, fp
		buftop[--i] = c + '0';
   28646:	3130      	adds	r1, #48	; 0x30
   28648:	f80e 1d01 	strb.w	r1, [lr, #-1]!
	} while (num);
   2864c:	2a10      	cmp	r2, #16
		num /= base;
   2864e:	ea4f 1112 	mov.w	r1, r2, lsr #4
   28652:	ea41 7103 	orr.w	r1, r1, r3, lsl #28
   28656:	ea4f 1013 	mov.w	r0, r3, lsr #4
	} while (num);
   2865a:	f173 0300 	sbcs.w	r3, r3, #0
		buftop[--i] = c + '0';
   2865e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
	} while (num);
   28662:	d208      	bcs.n	28676 <z_cbvprintf_impl+0x336>
	return -i;
   28664:	f1c6 0b01 	rsb	fp, r6, #1
			data = buf + sizeof(buf) - data_len;
   28668:	f106 0330 	add.w	r3, r6, #48	; 0x30
   2866c:	e7a1      	b.n	285b2 <z_cbvprintf_impl+0x272>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
   2866e:	4f45      	ldr	r7, [pc, #276]	; (28784 <z_cbvprintf_impl+0x444>)
   28670:	e7dc      	b.n	2862c <z_cbvprintf_impl+0x2ec>
	prefix = "";
   28672:	4f41      	ldr	r7, [pc, #260]	; (28778 <z_cbvprintf_impl+0x438>)
   28674:	e7db      	b.n	2862e <z_cbvprintf_impl+0x2ee>
		buftop[--i] = c + '0';
   28676:	4666      	mov	r6, ip
		num /= base;
   28678:	460a      	mov	r2, r1
   2867a:	4603      	mov	r3, r0
   2867c:	e7de      	b.n	2863c <z_cbvprintf_impl+0x2fc>
			data = va_arg(ap, char *);
   2867e:	f855 6b04 	ldr.w	r6, [r5], #4
			data_len = strlen(data);
   28682:	4630      	mov	r0, r6
   28684:	f01b fe11 	bl	442aa <strlen>
			if (precision >= 0 && data_len > precision) {
   28688:	f1b8 0f00 	cmp.w	r8, #0
			data_len = strlen(data);
   2868c:	4683      	mov	fp, r0
			if (precision >= 0 && data_len > precision) {
   2868e:	db02      	blt.n	28696 <z_cbvprintf_impl+0x356>
   28690:	4540      	cmp	r0, r8
   28692:	bfa8      	it	ge
   28694:	46c3      	movge	fp, r8
	prefix = "";
   28696:	4f38      	ldr	r7, [pc, #224]	; (28778 <z_cbvprintf_impl+0x438>)
			precision = 0;
   28698:	f04f 0800 	mov.w	r8, #0
		precision -= data_len;
   2869c:	eba8 030b 	sub.w	r3, r8, fp
		if (precision > 0) {
   286a0:	2b00      	cmp	r3, #0
   286a2:	dd92      	ble.n	285ca <z_cbvprintf_impl+0x28a>
			min_width -= precision;
   286a4:	eba4 0408 	sub.w	r4, r4, r8
   286a8:	e7a6      	b.n	285f8 <z_cbvprintf_impl+0x2b8>
			buf[0] = c;
   286aa:	f855 3b04 	ldr.w	r3, [r5], #4
   286ae:	f88d 3018 	strb.w	r3, [sp, #24]
		min_width -= data_len;
   286b2:	3c01      	subs	r4, #1
		precision -= data_len;
   286b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
			data_len = 1;
   286b8:	f04f 0b01 	mov.w	fp, #1
			data = buf;
   286bc:	ae06      	add	r6, sp, #24
   286be:	e79a      	b.n	285f6 <z_cbvprintf_impl+0x2b6>
   286c0:	46a0      	mov	r8, r4
   286c2:	e7eb      	b.n	2869c <z_cbvprintf_impl+0x35c>
   286c4:	9302      	str	r3, [sp, #8]
			while (--min_width >= 0) {
				OUTC(' ');
   286c6:	9901      	ldr	r1, [sp, #4]
   286c8:	2020      	movs	r0, #32
   286ca:	47d0      	blx	sl
   286cc:	9b02      	ldr	r3, [sp, #8]
			while (--min_width >= 0) {
   286ce:	f1b8 0801 	subs.w	r8, r8, #1
   286d2:	d5f7      	bpl.n	286c4 <z_cbvprintf_impl+0x384>
   286d4:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
   286d8:	3c01      	subs	r4, #1
   286da:	4491      	add	r9, r2
   286dc:	1aa4      	subs	r4, r4, r2
   286de:	46b8      	mov	r8, r7
   286e0:	e006      	b.n	286f0 <z_cbvprintf_impl+0x3b0>
   286e2:	9304      	str	r3, [sp, #16]
   286e4:	9202      	str	r2, [sp, #8]
			}
		}
		while (*prefix) {
			OUTC(*prefix++);
   286e6:	9901      	ldr	r1, [sp, #4]
   286e8:	47d0      	blx	sl
   286ea:	9a02      	ldr	r2, [sp, #8]
   286ec:	9b04      	ldr	r3, [sp, #16]
   286ee:	4690      	mov	r8, r2
		while (*prefix) {
   286f0:	4642      	mov	r2, r8
   286f2:	f812 0b01 	ldrb.w	r0, [r2], #1
   286f6:	2800      	cmp	r0, #0
   286f8:	d1f3      	bne.n	286e2 <z_cbvprintf_impl+0x3a2>
   286fa:	461a      	mov	r2, r3
		}
		while (--precision >= 0) {
   286fc:	3a01      	subs	r2, #1
   286fe:	d515      	bpl.n	2872c <z_cbvprintf_impl+0x3ec>
   28700:	2b00      	cmp	r3, #0
   28702:	bfac      	ite	ge
   28704:	ebc7 0703 	rsbge	r7, r7, r3
   28708:	427f      	neglt	r7, r7
   2870a:	465b      	mov	r3, fp
			OUTC('0');
		}
		while (--data_len >= 0) {
   2870c:	3b01      	subs	r3, #1
   2870e:	d515      	bpl.n	2873c <z_cbvprintf_impl+0x3fc>
   28710:	f1bb 0f00 	cmp.w	fp, #0
   28714:	bfa8      	it	ge
   28716:	445f      	addge	r7, fp
   28718:	444f      	add	r7, r9
   2871a:	4626      	mov	r6, r4
			OUTC(*data++);
		}
		while (--min_width >= 0) {
   2871c:	3e01      	subs	r6, #1
   2871e:	d514      	bpl.n	2874a <z_cbvprintf_impl+0x40a>
   28720:	2c00      	cmp	r4, #0
   28722:	bfa8      	it	ge
   28724:	193f      	addge	r7, r7, r4
   28726:	eb07 0908 	add.w	r9, r7, r8
   2872a:	e613      	b.n	28354 <z_cbvprintf_impl+0x14>
   2872c:	9304      	str	r3, [sp, #16]
   2872e:	9202      	str	r2, [sp, #8]
			OUTC('0');
   28730:	9901      	ldr	r1, [sp, #4]
   28732:	2030      	movs	r0, #48	; 0x30
   28734:	47d0      	blx	sl
   28736:	9b04      	ldr	r3, [sp, #16]
   28738:	9a02      	ldr	r2, [sp, #8]
   2873a:	e7df      	b.n	286fc <z_cbvprintf_impl+0x3bc>
   2873c:	9302      	str	r3, [sp, #8]
			OUTC(*data++);
   2873e:	9901      	ldr	r1, [sp, #4]
   28740:	f816 0b01 	ldrb.w	r0, [r6], #1
   28744:	47d0      	blx	sl
   28746:	9b02      	ldr	r3, [sp, #8]
   28748:	e7e0      	b.n	2870c <z_cbvprintf_impl+0x3cc>
			OUTC(' ');
   2874a:	9901      	ldr	r1, [sp, #4]
   2874c:	2020      	movs	r0, #32
   2874e:	47d0      	blx	sl
   28750:	e7e4      	b.n	2871c <z_cbvprintf_impl+0x3dc>
				padding_mode = PAD_ZERO;
   28752:	2201      	movs	r2, #1
   28754:	e6d3      	b.n	284fe <z_cbvprintf_impl+0x1be>
				precision = va_arg(ap, int);
   28756:	4690      	mov	r8, r2
   28758:	e661      	b.n	2841e <z_cbvprintf_impl+0xde>
   2875a:	4614      	mov	r4, r2
   2875c:	e65f      	b.n	2841e <z_cbvprintf_impl+0xde>
				length_mod = 'L';
   2875e:	234c      	movs	r3, #76	; 0x4c
   28760:	e65d      	b.n	2841e <z_cbvprintf_impl+0xde>
		}

		goto start;
	}
}
   28762:	4648      	mov	r0, r9
   28764:	b00d      	add	sp, #52	; 0x34
   28766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2876a:	bf00      	nop
   2876c:	0004a64b 	.word	0x0004a64b
   28770:	0004a649 	.word	0x0004a649
   28774:	0004a64d 	.word	0x0004a64d
   28778:	0004ab83 	.word	0x0004ab83
   2877c:	0004a655 	.word	0x0004a655
   28780:	0004a64f 	.word	0x0004a64f
   28784:	0004a652 	.word	0x0004a652

00028788 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   28788:	b508      	push	{r3, lr}
	__asm__ volatile(
   2878a:	f04f 0220 	mov.w	r2, #32
   2878e:	f3ef 8311 	mrs	r3, BASEPRI
   28792:	f382 8812 	msr	BASEPRI_MAX, r2
   28796:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   2879a:	f002 f8cd 	bl	2a938 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   2879e:	4803      	ldr	r0, [pc, #12]	; (287ac <sys_reboot+0x24>)
   287a0:	f019 fc12 	bl	41fc8 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   287a4:	f001 fd90 	bl	2a2c8 <arch_cpu_idle>
   287a8:	e7fc      	b.n	287a4 <sys_reboot+0x1c>
   287aa:	bf00      	nop
   287ac:	0004a65b 	.word	0x0004a65b

000287b0 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   287b0:	f015 bf4c 	b.w	3e64c <SystemInit>

000287b4 <read_pnp_id>:

#if CONFIG_BT_DIS_PNP
static ssize_t read_pnp_id(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, void *buf,
			   uint16_t len, uint16_t offset)
{
   287b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &dis_pnp_id,
   287b6:	2407      	movs	r4, #7
   287b8:	9402      	str	r4, [sp, #8]
   287ba:	4c04      	ldr	r4, [pc, #16]	; (287cc <read_pnp_id+0x18>)
   287bc:	9401      	str	r4, [sp, #4]
   287be:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   287c2:	9400      	str	r4, [sp, #0]
   287c4:	f01d fe46 	bl	46454 <bt_gatt_attr_read>
				 sizeof(dis_pnp_id));
}
   287c8:	b004      	add	sp, #16
   287ca:	bd10      	pop	{r4, pc}
   287cc:	20000b42 	.word	0x20000b42

000287d0 <read_blvl>:
}

static ssize_t read_blvl(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       uint16_t len, uint16_t offset)
{
   287d0:	b510      	push	{r4, lr}
	uint8_t lvl8 = battery_level;
   287d2:	4c08      	ldr	r4, [pc, #32]	; (287f4 <read_blvl+0x24>)
{
   287d4:	b086      	sub	sp, #24
	uint8_t lvl8 = battery_level;
   287d6:	7824      	ldrb	r4, [r4, #0]
   287d8:	f88d 4017 	strb.w	r4, [sp, #23]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &lvl8,
   287dc:	2401      	movs	r4, #1
   287de:	9402      	str	r4, [sp, #8]
   287e0:	f10d 0417 	add.w	r4, sp, #23
   287e4:	9401      	str	r4, [sp, #4]
   287e6:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   287ea:	9400      	str	r4, [sp, #0]
   287ec:	f01d fe32 	bl	46454 <bt_gatt_attr_read>
				 sizeof(lvl8));
}
   287f0:	b006      	add	sp, #24
   287f2:	bd10      	pop	{r4, pc}
   287f4:	20000b49 	.word	0x20000b49

000287f8 <bt_bas_set_battery_level>:
{
	return battery_level;
}

int bt_bas_set_battery_level(uint8_t level)
{
   287f8:	b500      	push	{lr}
   287fa:	b089      	sub	sp, #36	; 0x24
	int rc;

	if (level > 100U) {
   287fc:	2864      	cmp	r0, #100	; 0x64
{
   287fe:	f88d 0007 	strb.w	r0, [sp, #7]
	if (level > 100U) {
   28802:	d819      	bhi.n	28838 <bt_bas_set_battery_level+0x40>
		return -EINVAL;
	}

	battery_level = level;
   28804:	4b0e      	ldr	r3, [pc, #56]	; (28840 <bt_bas_set_battery_level+0x48>)
	memset(&params, 0, sizeof(params));
   28806:	2218      	movs	r2, #24
   28808:	7018      	strb	r0, [r3, #0]
   2880a:	2100      	movs	r1, #0
   2880c:	a802      	add	r0, sp, #8
   2880e:	f01b fd8e 	bl	4432e <memset>
	params.attr = attr;
   28812:	4b0c      	ldr	r3, [pc, #48]	; (28844 <bt_bas_set_battery_level+0x4c>)
   28814:	9303      	str	r3, [sp, #12]
	params.data = data;
   28816:	f10d 0307 	add.w	r3, sp, #7
   2881a:	9304      	str	r3, [sp, #16]
	return bt_gatt_notify_cb(conn, &params);
   2881c:	a902      	add	r1, sp, #8
	params.len = len;
   2881e:	2301      	movs	r3, #1
	return bt_gatt_notify_cb(conn, &params);
   28820:	2000      	movs	r0, #0
	params.len = len;
   28822:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
   28826:	f006 f9a5 	bl	2eb74 <bt_gatt_notify_cb>

	rc = bt_gatt_notify(NULL, &bas.attrs[1], &level, sizeof(level));

	return rc == -ENOTCONN ? 0 : rc;
   2882a:	f110 0f80 	cmn.w	r0, #128	; 0x80
   2882e:	bf08      	it	eq
   28830:	2000      	moveq	r0, #0
}
   28832:	b009      	add	sp, #36	; 0x24
   28834:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   28838:	f06f 0015 	mvn.w	r0, #21
   2883c:	e7f9      	b.n	28832 <bt_bas_set_battery_level+0x3a>
   2883e:	bf00      	nop
   28840:	20000b49 	.word	0x20000b49
   28844:	000491e0 	.word	0x000491e0

00028848 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
   28848:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2884c:	460f      	mov	r7, r1
   2884e:	4606      	mov	r6, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   28850:	2108      	movs	r1, #8
   28852:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

	*addr -= ate_size;
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
   28854:	f8df 9050 	ldr.w	r9, [pc, #80]	; 288a8 <nvs_recover_last_ate+0x60>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   28858:	f019 ff6e 	bl	42738 <nvs_al_size.isra.0>
	*addr -= ate_size;
   2885c:	683c      	ldr	r4, [r7, #0]
   2885e:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   28860:	4680      	mov	r8, r0
	*addr -= ate_size;
   28862:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
   28864:	ea04 0509 	and.w	r5, r4, r9
	while (ate_end_addr > data_end_addr) {
   28868:	42ac      	cmp	r4, r5
   2886a:	d803      	bhi.n	28874 <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
   2886c:	2000      	movs	r0, #0
}
   2886e:	b003      	add	sp, #12
   28870:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   28874:	2308      	movs	r3, #8
   28876:	466a      	mov	r2, sp
   28878:	4621      	mov	r1, r4
   2887a:	4630      	mov	r0, r6
   2887c:	f019 fecf 	bl	4261e <nvs_flash_rd>
		if (rc) {
   28880:	2800      	cmp	r0, #0
   28882:	d1f4      	bne.n	2886e <nvs_recover_last_ate+0x26>
		if (nvs_ate_valid(fs, &end_ate)) {
   28884:	4669      	mov	r1, sp
   28886:	4630      	mov	r0, r6
   28888:	f019 ff60 	bl	4274c <nvs_ate_valid>
   2888c:	b140      	cbz	r0, 288a0 <nvs_recover_last_ate+0x58>
			data_end_addr += end_ate.offset + end_ate.len;
   2888e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   28892:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
   28896:	603c      	str	r4, [r7, #0]
			data_end_addr &= ADDR_SECT_MASK;
   28898:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
   2889c:	4413      	add	r3, r2
   2889e:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
   288a0:	eba4 0408 	sub.w	r4, r4, r8
   288a4:	e7e0      	b.n	28868 <nvs_recover_last_ate+0x20>
   288a6:	bf00      	nop
   288a8:	ffff0000 	.word	0xffff0000

000288ac <nvs_mount>:

	return 0;
}

int nvs_mount(struct nvs_fs *fs)
{
   288ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   288b0:	4604      	mov	r4, r0
   288b2:	b088      	sub	sp, #32

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
   288b4:	f100 0714 	add.w	r7, r0, #20
	return z_impl_k_mutex_init(mutex);
   288b8:	4638      	mov	r0, r7
   288ba:	f01f fb2d 	bl	47f18 <z_impl_k_mutex_init>

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
   288be:	6aa0      	ldr	r0, [r4, #40]	; 0x28
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   288c0:	6883      	ldr	r3, [r0, #8]
   288c2:	68db      	ldr	r3, [r3, #12]
   288c4:	4798      	blx	r3
   288c6:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
   288c8:	b928      	cbnz	r0, 288d6 <nvs_mount+0x2a>
		LOG_ERR("Could not obtain flash parameters");
		return -EINVAL;
   288ca:	f06f 0515 	mvn.w	r5, #21
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
   288ce:	4628      	mov	r0, r5
   288d0:	b008      	add	sp, #32
   288d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	write_block_size = flash_get_write_block_size(fs->flash_device);
   288d6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
   288d8:	6883      	ldr	r3, [r0, #8]
   288da:	68db      	ldr	r3, [r3, #12]
   288dc:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
   288de:	6803      	ldr	r3, [r0, #0]
   288e0:	3b01      	subs	r3, #1
   288e2:	2b1f      	cmp	r3, #31
   288e4:	d8f1      	bhi.n	288ca <nvs_mount+0x1e>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
   288e6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   288e8:	6821      	ldr	r1, [r4, #0]
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   288ea:	aa05      	add	r2, sp, #20
   288ec:	f01e fe62 	bl	475b4 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
   288f0:	2800      	cmp	r0, #0
   288f2:	d1ea      	bne.n	288ca <nvs_mount+0x1e>
	if (!fs->sector_size || fs->sector_size % info.size) {
   288f4:	89a5      	ldrh	r5, [r4, #12]
   288f6:	2d00      	cmp	r5, #0
   288f8:	d0e7      	beq.n	288ca <nvs_mount+0x1e>
   288fa:	9b06      	ldr	r3, [sp, #24]
   288fc:	fbb5 f2f3 	udiv	r2, r5, r3
   28900:	fb03 5512 	mls	r5, r3, r2, r5
   28904:	2d00      	cmp	r5, #0
   28906:	d1e0      	bne.n	288ca <nvs_mount+0x1e>
	if (fs->sector_count < 2) {
   28908:	89e3      	ldrh	r3, [r4, #14]
   2890a:	2b01      	cmp	r3, #1
   2890c:	d9dd      	bls.n	288ca <nvs_mount+0x1e>
	uint8_t erase_value = fs->flash_parameters->erase_value;
   2890e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
   28910:	9500      	str	r5, [sp, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
   28912:	f893 9004 	ldrb.w	r9, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   28916:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2891a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2891e:	4638      	mov	r0, r7
   28920:	f018 f838 	bl	40994 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   28924:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   28926:	2108      	movs	r1, #8
   28928:	f019 ff06 	bl	42738 <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
   2892c:	46a8      	mov	r8, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2892e:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
   28930:	89e3      	ldrh	r3, [r4, #14]
   28932:	fa1f fa85 	uxth.w	sl, r5
   28936:	4553      	cmp	r3, sl
   28938:	d808      	bhi.n	2894c <nvs_mount+0xa0>
	if (closed_sectors == fs->sector_count) {
   2893a:	89e3      	ldrh	r3, [r4, #14]
   2893c:	4543      	cmp	r3, r8
   2893e:	d123      	bne.n	28988 <nvs_mount+0xdc>
	return z_impl_k_mutex_unlock(mutex);
   28940:	4638      	mov	r0, r7
   28942:	f018 f8a1 	bl	40a88 <z_impl_k_mutex_unlock>
		rc = -EDEADLK;
   28946:	f06f 052c 	mvn.w	r5, #44	; 0x2c
   2894a:	e7c0      	b.n	288ce <nvs_mount+0x22>
		       (uint16_t)(fs->sector_size - ate_size);
   2894c:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
   2894e:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
   28950:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
   28952:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   28956:	464a      	mov	r2, r9
   28958:	2308      	movs	r3, #8
   2895a:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
   2895c:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   2895e:	f019 fea3 	bl	426a8 <nvs_flash_cmp_const>
		if (rc) {
   28962:	b178      	cbz	r0, 28984 <nvs_mount+0xd8>
			nvs_sector_advance(fs, &addr);
   28964:	4669      	mov	r1, sp
   28966:	4620      	mov	r0, r4
   28968:	f019 fe67 	bl	4263a <nvs_sector_advance>
			closed_sectors++;
   2896c:	f108 0801 	add.w	r8, r8, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   28970:	9900      	ldr	r1, [sp, #0]
   28972:	2308      	movs	r3, #8
   28974:	464a      	mov	r2, r9
   28976:	4620      	mov	r0, r4
			closed_sectors++;
   28978:	fa1f f888 	uxth.w	r8, r8
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   2897c:	f019 fe94 	bl	426a8 <nvs_flash_cmp_const>
			if (!rc) {
   28980:	2800      	cmp	r0, #0
   28982:	d0da      	beq.n	2893a <nvs_mount+0x8e>
	for (i = 0; i < fs->sector_count; i++) {
   28984:	3501      	adds	r5, #1
   28986:	e7d3      	b.n	28930 <nvs_mount+0x84>
	if (i == fs->sector_count) {
   28988:	4553      	cmp	r3, sl
   2898a:	d10b      	bne.n	289a4 <nvs_mount+0xf8>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
   2898c:	9900      	ldr	r1, [sp, #0]
   2898e:	2308      	movs	r3, #8
   28990:	464a      	mov	r2, r9
   28992:	1b89      	subs	r1, r1, r6
   28994:	4620      	mov	r0, r4
   28996:	f019 fe87 	bl	426a8 <nvs_flash_cmp_const>
		if (!rc) {
   2899a:	b918      	cbnz	r0, 289a4 <nvs_mount+0xf8>
			nvs_sector_advance(fs, &addr);
   2899c:	4669      	mov	r1, sp
   2899e:	4620      	mov	r0, r4
   289a0:	f019 fe4b 	bl	4263a <nvs_sector_advance>
	rc = nvs_recover_last_ate(fs, &addr);
   289a4:	4669      	mov	r1, sp
   289a6:	4620      	mov	r0, r4
   289a8:	f7ff ff4e 	bl	28848 <nvs_recover_last_ate>
	if (rc) {
   289ac:	4605      	mov	r5, r0
   289ae:	b118      	cbz	r0, 289b8 <nvs_mount+0x10c>
   289b0:	4638      	mov	r0, r7
   289b2:	f018 f869 	bl	40a88 <z_impl_k_mutex_unlock>
	if (rc) {
   289b6:	e78a      	b.n	288ce <nvs_mount+0x22>
	fs->ate_wra = addr;
   289b8:	9b00      	ldr	r3, [sp, #0]
   289ba:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
   289bc:	ea4f 4813 	mov.w	r8, r3, lsr #16
   289c0:	ea4f 4808 	mov.w	r8, r8, lsl #16
   289c4:	f8c4 8008 	str.w	r8, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
   289c8:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   289cc:	4299      	cmp	r1, r3
   289ce:	d30f      	bcc.n	289f0 <nvs_mount+0x144>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   289d0:	2308      	movs	r3, #8
   289d2:	aa01      	add	r2, sp, #4
   289d4:	4620      	mov	r0, r4
   289d6:	f019 fe22 	bl	4261e <nvs_flash_rd>
		if (rc) {
   289da:	4605      	mov	r5, r0
   289dc:	2800      	cmp	r0, #0
   289de:	d1e7      	bne.n	289b0 <nvs_mount+0x104>
   289e0:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
   289e2:	f813 2b01 	ldrb.w	r2, [r3], #1
   289e6:	4591      	cmp	r9, r2
   289e8:	d133      	bne.n	28a52 <nvs_mount+0x1a6>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   289ea:	3501      	adds	r5, #1
   289ec:	2d08      	cmp	r5, #8
   289ee:	d1f8      	bne.n	289e2 <nvs_mount+0x136>
	addr = fs->ate_wra & ADDR_SECT_MASK;
   289f0:	6863      	ldr	r3, [r4, #4]
   289f2:	0c1b      	lsrs	r3, r3, #16
   289f4:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
   289f6:	4669      	mov	r1, sp
   289f8:	4620      	mov	r0, r4
	addr = fs->ate_wra & ADDR_SECT_MASK;
   289fa:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
   289fc:	f019 fe1d 	bl	4263a <nvs_sector_advance>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
   28a00:	89a3      	ldrh	r3, [r4, #12]
   28a02:	9900      	ldr	r1, [sp, #0]
   28a04:	464a      	mov	r2, r9
   28a06:	4620      	mov	r0, r4
   28a08:	f019 fe4e 	bl	426a8 <nvs_flash_cmp_const>
	if (rc < 0) {
   28a0c:	1e05      	subs	r5, r0, #0
   28a0e:	dbcf      	blt.n	289b0 <nvs_mount+0x104>
		addr = fs->ate_wra + ate_size;
   28a10:	6863      	ldr	r3, [r4, #4]
	if (rc) {
   28a12:	d076      	beq.n	28b02 <nvs_mount+0x256>
		addr = fs->ate_wra + ate_size;
   28a14:	eb06 0803 	add.w	r8, r6, r3
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   28a18:	f64f 79ff 	movw	r9, #65535	; 0xffff
   28a1c:	89a3      	ldrh	r3, [r4, #12]
		addr = fs->ate_wra + ate_size;
   28a1e:	f8cd 8000 	str.w	r8, [sp]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   28a22:	fa1f f288 	uxth.w	r2, r8
   28a26:	1b9b      	subs	r3, r3, r6
   28a28:	429a      	cmp	r2, r3
   28a2a:	d32e      	bcc.n	28a8a <nvs_mount+0x1de>
		bool gc_done_marker = false;
   28a2c:	2300      	movs	r3, #0
			addr = fs->ate_wra & ADDR_SECT_MASK;
   28a2e:	6861      	ldr	r1, [r4, #4]
		if (gc_done_marker) {
   28a30:	2b00      	cmp	r3, #0
   28a32:	d043      	beq.n	28abc <nvs_mount+0x210>
			addr = fs->ate_wra & ADDR_SECT_MASK;
   28a34:	0c09      	lsrs	r1, r1, #16
   28a36:	0409      	lsls	r1, r1, #16
   28a38:	9100      	str	r1, [sp, #0]
			nvs_sector_advance(fs, &addr);
   28a3a:	4620      	mov	r0, r4
   28a3c:	4669      	mov	r1, sp
   28a3e:	f019 fdfc 	bl	4263a <nvs_sector_advance>
			rc = nvs_flash_erase_sector(fs, addr);
   28a42:	9900      	ldr	r1, [sp, #0]
   28a44:	4620      	mov	r0, r4
   28a46:	f019 fe54 	bl	426f2 <nvs_flash_erase_sector>
		rc = nvs_gc(fs);
   28a4a:	4605      	mov	r5, r0
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   28a4c:	2d00      	cmp	r5, #0
   28a4e:	d074      	beq.n	28b3a <nvs_mount+0x28e>
   28a50:	e7ae      	b.n	289b0 <nvs_mount+0x104>
		if (nvs_ate_valid(fs, &last_ate)) {
   28a52:	a901      	add	r1, sp, #4
   28a54:	4620      	mov	r0, r4
   28a56:	f019 fe79 	bl	4274c <nvs_ate_valid>
   28a5a:	6862      	ldr	r2, [r4, #4]
   28a5c:	b910      	cbnz	r0, 28a64 <nvs_mount+0x1b8>
		fs->ate_wra -= ate_size;
   28a5e:	1b92      	subs	r2, r2, r6
   28a60:	6062      	str	r2, [r4, #4]
   28a62:	e7b1      	b.n	289c8 <nvs_mount+0x11c>
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   28a64:	f8bd 5008 	ldrh.w	r5, [sp, #8]
   28a68:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   28a6c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
   28a6e:	f8c4 8008 	str.w	r8, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   28a72:	4429      	add	r1, r5
   28a74:	f019 fe60 	bl	42738 <nvs_al_size.isra.0>
   28a78:	4440      	add	r0, r8
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   28a7a:	4290      	cmp	r0, r2
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   28a7c:	60a0      	str	r0, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   28a7e:	d1ee      	bne.n	28a5e <nvs_mount+0x1b2>
   28a80:	2d00      	cmp	r5, #0
   28a82:	d0ec      	beq.n	28a5e <nvs_mount+0x1b2>
				rc = -ESPIPE;
   28a84:	f06f 051c 	mvn.w	r5, #28
   28a88:	e068      	b.n	28b5c <nvs_mount+0x2b0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   28a8a:	2308      	movs	r3, #8
   28a8c:	aa03      	add	r2, sp, #12
   28a8e:	4641      	mov	r1, r8
   28a90:	4620      	mov	r0, r4
   28a92:	f019 fdc4 	bl	4261e <nvs_flash_rd>
			if (rc) {
   28a96:	4605      	mov	r5, r0
   28a98:	2800      	cmp	r0, #0
   28a9a:	d189      	bne.n	289b0 <nvs_mount+0x104>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
   28a9c:	a903      	add	r1, sp, #12
   28a9e:	4620      	mov	r0, r4
   28aa0:	f019 fe54 	bl	4274c <nvs_ate_valid>
   28aa4:	b130      	cbz	r0, 28ab4 <nvs_mount+0x208>
   28aa6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   28aaa:	454b      	cmp	r3, r9
   28aac:	d102      	bne.n	28ab4 <nvs_mount+0x208>
			    (gc_done_ate.id == 0xffff) &&
   28aae:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   28ab2:	b10b      	cbz	r3, 28ab8 <nvs_mount+0x20c>
			addr += ate_size;
   28ab4:	44b0      	add	r8, r6
   28ab6:	e7b1      	b.n	28a1c <nvs_mount+0x170>
				gc_done_marker = true;
   28ab8:	2301      	movs	r3, #1
   28aba:	e7b8      	b.n	28a2e <nvs_mount+0x182>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   28abc:	4620      	mov	r0, r4
   28abe:	f019 fe18 	bl	426f2 <nvs_flash_erase_sector>
		if (rc) {
   28ac2:	4605      	mov	r5, r0
   28ac4:	2800      	cmp	r0, #0
   28ac6:	f47f af73 	bne.w	289b0 <nvs_mount+0x104>
		fs->ate_wra &= ADDR_SECT_MASK;
   28aca:	6863      	ldr	r3, [r4, #4]
   28acc:	4a26      	ldr	r2, [pc, #152]	; (28b68 <nvs_mount+0x2bc>)
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   28ace:	89a1      	ldrh	r1, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
   28ad0:	4013      	ands	r3, r2
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   28ad2:	440b      	add	r3, r1
   28ad4:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
   28ad8:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
   28ada:	4013      	ands	r3, r2
   28adc:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   28ade:	4620      	mov	r0, r4
   28ae0:	f019 ff16 	bl	42910 <nvs_gc>
   28ae4:	e7b1      	b.n	28a4a <nvs_mount+0x19e>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
   28ae6:	1a5b      	subs	r3, r3, r1
   28ae8:	464a      	mov	r2, r9
   28aea:	4620      	mov	r0, r4
   28aec:	f019 fddc 	bl	426a8 <nvs_flash_cmp_const>
		if (rc < 0) {
   28af0:	1e05      	subs	r5, r0, #0
   28af2:	f6ff af5d 	blt.w	289b0 <nvs_mount+0x104>
		if (!rc) {
   28af6:	d008      	beq.n	28b0a <nvs_mount+0x25e>
		fs->data_wra += fs->flash_parameters->write_block_size;
   28af8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   28afa:	68a3      	ldr	r3, [r4, #8]
   28afc:	6812      	ldr	r2, [r2, #0]
   28afe:	4413      	add	r3, r2
   28b00:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
   28b02:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   28b06:	428b      	cmp	r3, r1
   28b08:	d8ed      	bhi.n	28ae6 <nvs_mount+0x23a>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   28b0a:	6861      	ldr	r1, [r4, #4]
   28b0c:	89a3      	ldrh	r3, [r4, #12]
   28b0e:	eb01 0246 	add.w	r2, r1, r6, lsl #1
   28b12:	429a      	cmp	r2, r3
   28b14:	d19a      	bne.n	28a4c <nvs_mount+0x1a0>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   28b16:	f8df 8050 	ldr.w	r8, [pc, #80]	; 28b68 <nvs_mount+0x2bc>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   28b1a:	68a2      	ldr	r2, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   28b1c:	ea01 0308 	and.w	r3, r1, r8
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   28b20:	429a      	cmp	r2, r3
   28b22:	d093      	beq.n	28a4c <nvs_mount+0x1a0>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   28b24:	4620      	mov	r0, r4
   28b26:	f019 fde4 	bl	426f2 <nvs_flash_erase_sector>
		if (rc) {
   28b2a:	4605      	mov	r5, r0
   28b2c:	2800      	cmp	r0, #0
   28b2e:	f47f af3f 	bne.w	289b0 <nvs_mount+0x104>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   28b32:	6863      	ldr	r3, [r4, #4]
   28b34:	ea03 0308 	and.w	r3, r3, r8
   28b38:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
   28b3a:	89a3      	ldrh	r3, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   28b3c:	88a2      	ldrh	r2, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
   28b3e:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   28b42:	429a      	cmp	r2, r3
   28b44:	d006      	beq.n	28b54 <nvs_mount+0x2a8>
   28b46:	4638      	mov	r0, r7
   28b48:	f017 ff9e 	bl	40a88 <z_impl_k_mutex_unlock>
	fs->ready = true;
   28b4c:	2301      	movs	r3, #1
   28b4e:	7423      	strb	r3, [r4, #16]
	return 0;
   28b50:	2500      	movs	r5, #0
   28b52:	e6bc      	b.n	288ce <nvs_mount+0x22>
		rc = nvs_add_gc_done_ate(fs);
   28b54:	4620      	mov	r0, r4
   28b56:	f019 fec6 	bl	428e6 <nvs_add_gc_done_ate>
   28b5a:	4605      	mov	r5, r0
   28b5c:	4638      	mov	r0, r7
   28b5e:	f017 ff93 	bl	40a88 <z_impl_k_mutex_unlock>
	if (rc) {
   28b62:	2d00      	cmp	r5, #0
   28b64:	d0f2      	beq.n	28b4c <nvs_mount+0x2a0>
   28b66:	e6b2      	b.n	288ce <nvs_mount+0x22>
   28b68:	ffff0000 	.word	0xffff0000

00028b6c <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
   28b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28b70:	461d      	mov	r5, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
   28b72:	7c03      	ldrb	r3, [r0, #16]
{
   28b74:	b089      	sub	sp, #36	; 0x24
   28b76:	4604      	mov	r4, r0
   28b78:	4689      	mov	r9, r1
   28b7a:	4690      	mov	r8, r2
	if (!fs->ready) {
   28b7c:	2b00      	cmp	r3, #0
   28b7e:	f000 80bd 	beq.w	28cfc <nvs_write+0x190>
		LOG_ERR("NVS not initialized");
		return -EACCES;
	}

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   28b82:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   28b84:	2108      	movs	r1, #8
   28b86:	4610      	mov	r0, r2
   28b88:	f019 fdd6 	bl	42738 <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
   28b8c:	4629      	mov	r1, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   28b8e:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
   28b90:	4610      	mov	r0, r2
   28b92:	f019 fdd1 	bl	42738 <nvs_al_size.isra.0>

	/* The maximum data size is sector size - 4 ate
	 * where: 1 ate for data, 1 ate for sector close, 1 ate for gc done,
	 * and 1 ate to always allow a delete.
	 */
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   28b96:	89a3      	ldrh	r3, [r4, #12]
   28b98:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
   28b9c:	429d      	cmp	r5, r3
	data_size = nvs_al_size(fs, len);
   28b9e:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   28ba0:	f200 80af 	bhi.w	28d02 <nvs_write+0x196>
   28ba4:	b11d      	cbz	r5, 28bae <nvs_write+0x42>
	    ((len > 0) && (data == NULL))) {
   28ba6:	f1b8 0f00 	cmp.w	r8, #0
   28baa:	f000 80aa 	beq.w	28d02 <nvs_write+0x196>
		return -EINVAL;
	}

	/* find latest entry with same id */
	wlk_addr = fs->ate_wra;
   28bae:	6863      	ldr	r3, [r4, #4]
   28bb0:	9303      	str	r3, [sp, #12]
	rd_addr = wlk_addr;

	while (1) {
		rd_addr = wlk_addr;
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   28bb2:	aa04      	add	r2, sp, #16
   28bb4:	a903      	add	r1, sp, #12
   28bb6:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   28bb8:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   28bbc:	f019 fdfe 	bl	427bc <nvs_prev_ate>
		if (rc) {
   28bc0:	4606      	mov	r6, r0
   28bc2:	2800      	cmp	r0, #0
   28bc4:	d165      	bne.n	28c92 <nvs_write+0x126>
			return rc;
		}
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   28bc6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   28bca:	454b      	cmp	r3, r9
   28bcc:	d005      	beq.n	28bda <nvs_write+0x6e>
			prev_found = true;
			break;
		}
		if (wlk_addr == fs->ate_wra) {
   28bce:	6862      	ldr	r2, [r4, #4]
   28bd0:	9b03      	ldr	r3, [sp, #12]
   28bd2:	429a      	cmp	r2, r3
   28bd4:	d1ed      	bne.n	28bb2 <nvs_write+0x46>
				return rc;
			}
		}
	} else {
		/* skip delete entry for non-existing entry */
		if (len == 0) {
   28bd6:	b9e5      	cbnz	r5, 28c12 <nvs_write+0xa6>
   28bd8:	e05b      	b.n	28c92 <nvs_write+0x126>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   28bda:	a904      	add	r1, sp, #16
   28bdc:	4620      	mov	r0, r4
   28bde:	f019 fdb5 	bl	4274c <nvs_ate_valid>
   28be2:	2800      	cmp	r0, #0
   28be4:	d0f3      	beq.n	28bce <nvs_write+0x62>
		rd_addr += wlk_ate.offset;
   28be6:	f8bd 0012 	ldrh.w	r0, [sp, #18]
			if (wlk_ate.len == 0U) {
   28bea:	f8bd 3014 	ldrh.w	r3, [sp, #20]
		if (len == 0) {
   28bee:	b175      	cbz	r5, 28c0e <nvs_write+0xa2>
		} else if (len == wlk_ate.len) {
   28bf0:	429d      	cmp	r5, r3
   28bf2:	d10e      	bne.n	28c12 <nvs_write+0xa6>
		rd_addr &= ADDR_SECT_MASK;
   28bf4:	ea4f 411b 	mov.w	r1, fp, lsr #16
   28bf8:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   28bfa:	4401      	add	r1, r0
   28bfc:	462b      	mov	r3, r5
   28bfe:	4642      	mov	r2, r8
   28c00:	4620      	mov	r0, r4
   28c02:	f019 fd27 	bl	42654 <nvs_flash_block_cmp>
			if (rc <= 0) {
   28c06:	2800      	cmp	r0, #0
   28c08:	dc03      	bgt.n	28c12 <nvs_write+0xa6>
   28c0a:	4606      	mov	r6, r0
   28c0c:	e041      	b.n	28c92 <nvs_write+0x126>
			if (wlk_ate.len == 0U) {
   28c0e:	2b00      	cmp	r3, #0
   28c10:	d03f      	beq.n	28c92 <nvs_write+0x126>
			return 0;
		}
	}

	/* calculate required space if the entry contains data */
	if (data_size) {
   28c12:	2f00      	cmp	r7, #0
   28c14:	d141      	bne.n	28c9a <nvs_write+0x12e>
		/* Leave space for delete ate */
		required_space = data_size + ate_size;
	}

	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   28c16:	f104 0314 	add.w	r3, r4, #20
   28c1a:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   28c1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   28c20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28c24:	f104 0014 	add.w	r0, r4, #20
   28c28:	f017 feb4 	bl	40994 <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
   28c2c:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 28d08 <nvs_write+0x19c>

	gc_count = 0;
	while (1) {
		if (gc_count == fs->sector_count) {
   28c30:	89e3      	ldrh	r3, [r4, #14]
   28c32:	429e      	cmp	r6, r3
   28c34:	d05f      	beq.n	28cf6 <nvs_write+0x18a>
			 */
			rc = -ENOSPC;
			goto end;
		}

		if (fs->ate_wra >= (fs->data_wra + required_space)) {
   28c36:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   28c3a:	18f9      	adds	r1, r7, r3
   28c3c:	428a      	cmp	r2, r1
   28c3e:	d32f      	bcc.n	28ca0 <nvs_write+0x134>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   28c40:	f8ad 301a 	strh.w	r3, [sp, #26]
	nvs_ate_crc8_update(&entry);
   28c44:	a806      	add	r0, sp, #24
	entry.part = 0xff;
   28c46:	23ff      	movs	r3, #255	; 0xff
   28c48:	f88d 301e 	strb.w	r3, [sp, #30]
	entry.id = id;
   28c4c:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.len = (uint16_t)len;
   28c50:	f8ad 501c 	strh.w	r5, [sp, #28]
	nvs_ate_crc8_update(&entry);
   28c54:	f019 fd67 	bl	42726 <nvs_ate_crc8_update>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   28c58:	68a1      	ldr	r1, [r4, #8]
   28c5a:	462b      	mov	r3, r5
   28c5c:	4642      	mov	r2, r8
   28c5e:	4620      	mov	r0, r4
   28c60:	f019 fdf6 	bl	42850 <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
   28c64:	4629      	mov	r1, r5
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   28c66:	4682      	mov	sl, r0
	fs->data_wra += nvs_al_size(fs, len);
   28c68:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   28c6a:	f019 fd65 	bl	42738 <nvs_al_size.isra.0>
   28c6e:	68a2      	ldr	r2, [r4, #8]
   28c70:	4402      	add	r2, r0
   28c72:	60a2      	str	r2, [r4, #8]
	if (rc) {
   28c74:	f1ba 0f00 	cmp.w	sl, #0
   28c78:	d107      	bne.n	28c8a <nvs_write+0x11e>
	rc = nvs_flash_ate_wrt(fs, &entry);
   28c7a:	a906      	add	r1, sp, #24
   28c7c:	4620      	mov	r0, r4
   28c7e:	f019 fe21 	bl	428c4 <nvs_flash_ate_wrt>
		if (rc) {
			goto end;
		}
		gc_count++;
	}
	rc = len;
   28c82:	2800      	cmp	r0, #0
   28c84:	bf14      	ite	ne
   28c86:	4682      	movne	sl, r0
   28c88:	46aa      	moveq	sl, r5
	return z_impl_k_mutex_unlock(mutex);
   28c8a:	9801      	ldr	r0, [sp, #4]
   28c8c:	f017 fefc 	bl	40a88 <z_impl_k_mutex_unlock>
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
   28c90:	4656      	mov	r6, sl
}
   28c92:	4630      	mov	r0, r6
   28c94:	b009      	add	sp, #36	; 0x24
   28c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		required_space = data_size + ate_size;
   28c9a:	4457      	add	r7, sl
   28c9c:	b2bf      	uxth	r7, r7
   28c9e:	e7ba      	b.n	28c16 <nvs_write+0xaa>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   28ca0:	2108      	movs	r1, #8
   28ca2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   28ca4:	f019 fd48 	bl	42738 <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
   28ca8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   28cac:	f8ad 3018 	strh.w	r3, [sp, #24]
	close_ate.len = 0U;
   28cb0:	2300      	movs	r3, #0
   28cb2:	f8ad 301c 	strh.w	r3, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   28cb6:	1813      	adds	r3, r2, r0
   28cb8:	f8ad 301a 	strh.w	r3, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
   28cbc:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
   28cbe:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
   28cc2:	441a      	add	r2, r3
   28cc4:	1a10      	subs	r0, r2, r0
   28cc6:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   28cc8:	a806      	add	r0, sp, #24
   28cca:	f019 fd2c 	bl	42726 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   28cce:	a906      	add	r1, sp, #24
   28cd0:	4620      	mov	r0, r4
   28cd2:	f019 fdf7 	bl	428c4 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   28cd6:	1d21      	adds	r1, r4, #4
   28cd8:	4620      	mov	r0, r4
   28cda:	f019 fcae 	bl	4263a <nvs_sector_advance>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   28cde:	6863      	ldr	r3, [r4, #4]
   28ce0:	ea03 030b 	and.w	r3, r3, fp
   28ce4:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   28ce6:	4620      	mov	r0, r4
   28ce8:	f019 fe12 	bl	42910 <nvs_gc>
		if (rc) {
   28cec:	4682      	mov	sl, r0
   28cee:	2800      	cmp	r0, #0
   28cf0:	d1cb      	bne.n	28c8a <nvs_write+0x11e>
		gc_count++;
   28cf2:	3601      	adds	r6, #1
		if (gc_count == fs->sector_count) {
   28cf4:	e79c      	b.n	28c30 <nvs_write+0xc4>
			rc = -ENOSPC;
   28cf6:	f06f 0a1b 	mvn.w	sl, #27
   28cfa:	e7c6      	b.n	28c8a <nvs_write+0x11e>
		return -EACCES;
   28cfc:	f06f 060c 	mvn.w	r6, #12
   28d00:	e7c7      	b.n	28c92 <nvs_write+0x126>
		return -EINVAL;
   28d02:	f06f 0615 	mvn.w	r6, #21
   28d06:	e7c4      	b.n	28c92 <nvs_write+0x126>
   28d08:	ffff0000 	.word	0xffff0000

00028d0c <class_handler>:
 * usb_enable() is no longer needed.
 */

static int class_handler(struct usb_setup_packet *pSetup,
			 int32_t *len, uint8_t **data)
{
   28d0c:	b4f0      	push	{r4, r5, r6, r7}
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   28d0e:	4b0c      	ldr	r3, [pc, #48]	; (28d40 <class_handler+0x34>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28d10:	4e0c      	ldr	r6, [pc, #48]	; (28d44 <class_handler+0x38>)
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   28d12:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28d14:	4b0c      	ldr	r3, [pc, #48]	; (28d48 <class_handler+0x3c>)
   28d16:	42b3      	cmp	r3, r6
   28d18:	d303      	bcc.n	28d22 <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
   28d1a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   28d1e:	bcf0      	pop	{r4, r5, r6, r7}
   28d20:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
   28d22:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   28d24:	42bd      	cmp	r5, r7
   28d26:	d309      	bcc.n	28d3c <class_handler+0x30>
		if (iface->class_handler &&
   28d28:	691c      	ldr	r4, [r3, #16]
   28d2a:	b13c      	cbz	r4, 28d3c <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
   28d2c:	f895 c002 	ldrb.w	ip, [r5, #2]
   28d30:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
   28d32:	45ac      	cmp	ip, r5
   28d34:	d102      	bne.n	28d3c <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
   28d36:	4623      	mov	r3, r4
}
   28d38:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
   28d3a:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28d3c:	3324      	adds	r3, #36	; 0x24
   28d3e:	e7ea      	b.n	28d16 <class_handler+0xa>
   28d40:	20001a7c 	.word	0x20001a7c
   28d44:	20000f01 	.word	0x20000f01
   28d48:	20000f01 	.word	0x20000f01

00028d4c <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
   28d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28d50:	4c13      	ldr	r4, [pc, #76]	; (28da0 <custom_handler+0x54>)
   28d52:	f8df 8050 	ldr.w	r8, [pc, #80]	; 28da4 <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   28d56:	f8df 9050 	ldr.w	r9, [pc, #80]	; 28da8 <custom_handler+0x5c>
{
   28d5a:	4605      	mov	r5, r0
   28d5c:	460e      	mov	r6, r1
   28d5e:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28d60:	4544      	cmp	r4, r8
   28d62:	d303      	bcc.n	28d6c <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
   28d64:	f06f 0085 	mvn.w	r0, #133	; 0x85
   28d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
   28d6c:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   28d6e:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
   28d72:	429a      	cmp	r2, r3
   28d74:	d312      	bcc.n	28d9c <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
   28d76:	69a3      	ldr	r3, [r4, #24]
   28d78:	b183      	cbz	r3, 28d9c <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
   28d7a:	7890      	ldrb	r0, [r2, #2]
   28d7c:	7929      	ldrb	r1, [r5, #4]
   28d7e:	4288      	cmp	r0, r1
   28d80:	d105      	bne.n	28d8e <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
   28d82:	463a      	mov	r2, r7
   28d84:	4631      	mov	r1, r6
   28d86:	4628      	mov	r0, r5
}
   28d88:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
   28d8c:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
   28d8e:	7952      	ldrb	r2, [r2, #5]
   28d90:	2a01      	cmp	r2, #1
   28d92:	d103      	bne.n	28d9c <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
   28d94:	463a      	mov	r2, r7
   28d96:	4631      	mov	r1, r6
   28d98:	4628      	mov	r0, r5
   28d9a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28d9c:	3424      	adds	r4, #36	; 0x24
   28d9e:	e7df      	b.n	28d60 <custom_handler+0x14>
   28da0:	20000f01 	.word	0x20000f01
   28da4:	20000f01 	.word	0x20000f01
   28da8:	20001a7c 	.word	0x20001a7c

00028dac <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
   28dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28db0:	4c0b      	ldr	r4, [pc, #44]	; (28de0 <vendor_handler+0x34>)
   28db2:	f8df 8030 	ldr.w	r8, [pc, #48]	; 28de4 <vendor_handler+0x38>
{
   28db6:	4605      	mov	r5, r0
   28db8:	460e      	mov	r6, r1
   28dba:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28dbc:	4544      	cmp	r4, r8
   28dbe:	d302      	bcc.n	28dc6 <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
   28dc0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   28dc4:	e009      	b.n	28dda <vendor_handler+0x2e>
		if (iface->vendor_handler) {
   28dc6:	6963      	ldr	r3, [r4, #20]
   28dc8:	b90b      	cbnz	r3, 28dce <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28dca:	3424      	adds	r4, #36	; 0x24
   28dcc:	e7f6      	b.n	28dbc <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
   28dce:	463a      	mov	r2, r7
   28dd0:	4631      	mov	r1, r6
   28dd2:	4628      	mov	r0, r5
   28dd4:	4798      	blx	r3
   28dd6:	2800      	cmp	r0, #0
   28dd8:	d1f7      	bne.n	28dca <vendor_handler+0x1e>
}
   28dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28dde:	bf00      	nop
   28de0:	20000f01 	.word	0x20000f01
   28de4:	20000f01 	.word	0x20000f01

00028de8 <set_endpoint>:
{
   28de8:	b507      	push	{r0, r1, r2, lr}
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
   28dea:	7883      	ldrb	r3, [r0, #2]
   28dec:	f88d 3000 	strb.w	r3, [sp]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
   28df0:	7903      	ldrb	r3, [r0, #4]
   28df2:	7942      	ldrb	r2, [r0, #5]
   28df4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   28df8:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
   28dfc:	78c3      	ldrb	r3, [r0, #3]
	ret = usb_dc_ep_configure(&ep_cfg);
   28dfe:	4668      	mov	r0, sp
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
   28e00:	f003 0303 	and.w	r3, r3, #3
   28e04:	f88d 3004 	strb.w	r3, [sp, #4]
	ret = usb_dc_ep_configure(&ep_cfg);
   28e08:	f013 fe6c 	bl	3cae4 <usb_dc_ep_configure>
	if (ret == -EALREADY) {
   28e0c:	f110 0f78 	cmn.w	r0, #120	; 0x78
   28e10:	d004      	beq.n	28e1c <set_endpoint+0x34>
	} else if (ret) {
   28e12:	b118      	cbz	r0, 28e1c <set_endpoint+0x34>
		return false;
   28e14:	2000      	movs	r0, #0
}
   28e16:	b003      	add	sp, #12
   28e18:	f85d fb04 	ldr.w	pc, [sp], #4
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
   28e1c:	f89d 0000 	ldrb.w	r0, [sp]
   28e20:	f013 fee8 	bl	3cbf4 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
   28e24:	f110 0f78 	cmn.w	r0, #120	; 0x78
   28e28:	d001      	beq.n	28e2e <set_endpoint+0x46>
	} else if (ret) {
   28e2a:	2800      	cmp	r0, #0
   28e2c:	d1f2      	bne.n	28e14 <set_endpoint+0x2c>
	usb_dev.configured = true;
   28e2e:	4b02      	ldr	r3, [pc, #8]	; (28e38 <set_endpoint+0x50>)
   28e30:	2001      	movs	r0, #1
   28e32:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
	return true;
   28e36:	e7ee      	b.n	28e16 <set_endpoint+0x2e>
   28e38:	20001a7c 	.word	0x20001a7c

00028e3c <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
   28e3c:	4802      	ldr	r0, [pc, #8]	; (28e48 <usb_reset_alt_setting+0xc>)
   28e3e:	2208      	movs	r2, #8
   28e40:	2100      	movs	r1, #0
   28e42:	f01b ba74 	b.w	4432e <memset>
   28e46:	bf00      	nop
   28e48:	20001b37 	.word	0x20001b37

00028e4c <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
   28e4c:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28e4e:	4b0b      	ldr	r3, [pc, #44]	; (28e7c <is_ep_valid.part.0+0x30>)
   28e50:	4c0b      	ldr	r4, [pc, #44]	; (28e80 <is_ep_valid.part.0+0x34>)
   28e52:	42a3      	cmp	r3, r4
   28e54:	d301      	bcc.n	28e5a <is_ep_valid.part.0+0xe>
	return false;
   28e56:	2000      	movs	r0, #0
}
   28e58:	bd70      	pop	{r4, r5, r6, pc}
		ep_data = cfg_data->endpoint;
   28e5a:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   28e5c:	7f1e      	ldrb	r6, [r3, #28]
   28e5e:	2200      	movs	r2, #0
			if (ep_data[n].ep_addr == ep) {
   28e60:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   28e62:	b2d5      	uxtb	r5, r2
   28e64:	42ae      	cmp	r6, r5
   28e66:	d801      	bhi.n	28e6c <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28e68:	3324      	adds	r3, #36	; 0x24
   28e6a:	e7f2      	b.n	28e52 <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
   28e6c:	3201      	adds	r2, #1
   28e6e:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
   28e72:	4285      	cmp	r5, r0
   28e74:	d1f5      	bne.n	28e62 <is_ep_valid.part.0+0x16>
		return true;
   28e76:	2001      	movs	r0, #1
   28e78:	e7ee      	b.n	28e58 <is_ep_valid.part.0+0xc>
   28e7a:	bf00      	nop
   28e7c:	20000f01 	.word	0x20000f01
   28e80:	20000f01 	.word	0x20000f01

00028e84 <usb_handle_request.constprop.0>:
static bool usb_handle_request(struct usb_setup_packet *setup,
   28e84:	b508      	push	{r3, lr}
	handler = usb_dev.req_handlers[type];
   28e86:	4809      	ldr	r0, [pc, #36]	; (28eac <usb_handle_request.constprop.0+0x28>)
	uint32_t type = setup->RequestType.type;
   28e88:	7803      	ldrb	r3, [r0, #0]
   28e8a:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
   28e8e:	330a      	adds	r3, #10
   28e90:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
   28e94:	b13b      	cbz	r3, 28ea6 <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
   28e96:	f100 0208 	add.w	r2, r0, #8
   28e9a:	f100 0110 	add.w	r1, r0, #16
   28e9e:	4798      	blx	r3
   28ea0:	43c0      	mvns	r0, r0
   28ea2:	0fc0      	lsrs	r0, r0, #31
}
   28ea4:	bd08      	pop	{r3, pc}
		return false;
   28ea6:	4618      	mov	r0, r3
   28ea8:	e7fc      	b.n	28ea4 <usb_handle_request.constprop.0+0x20>
   28eaa:	bf00      	nop
   28eac:	20001a7c 	.word	0x20001a7c

00028eb0 <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
   28eb0:	2804      	cmp	r0, #4
{
   28eb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28eb6:	f8df 808c 	ldr.w	r8, [pc, #140]	; 28f44 <forward_status_cb+0x94>
   28eba:	4604      	mov	r4, r0
   28ebc:	460e      	mov	r6, r1
	if (status == USB_DC_DISCONNECTED) {
   28ebe:	d113      	bne.n	28ee8 <forward_status_cb+0x38>
		usb_reset_alt_setting();
   28ec0:	f7ff ffbc 	bl	28e3c <usb_reset_alt_setting>
		if (usb_dev.configured) {
   28ec4:	4b20      	ldr	r3, [pc, #128]	; (28f48 <forward_status_cb+0x98>)
   28ec6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
   28eca:	b1ab      	cbz	r3, 28ef8 <forward_status_cb+0x48>
			usb_cancel_transfers();
   28ecc:	f000 fcf2 	bl	298b4 <usb_cancel_transfers>
   28ed0:	4d1e      	ldr	r5, [pc, #120]	; (28f4c <forward_status_cb+0x9c>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28ed2:	4545      	cmp	r5, r8
   28ed4:	d226      	bcs.n	28f24 <forward_status_cb+0x74>
		ep_data = cfg_data->endpoint;
   28ed6:	f8d5 9020 	ldr.w	r9, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   28eda:	2700      	movs	r7, #0
   28edc:	7f2a      	ldrb	r2, [r5, #28]
   28ede:	b2fb      	uxtb	r3, r7
   28ee0:	429a      	cmp	r2, r3
   28ee2:	d817      	bhi.n	28f14 <forward_status_cb+0x64>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28ee4:	3524      	adds	r5, #36	; 0x24
   28ee6:	e7f4      	b.n	28ed2 <forward_status_cb+0x22>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND || status == USB_DC_RESET) {
   28ee8:	2805      	cmp	r0, #5
   28eea:	d110      	bne.n	28f0e <forward_status_cb+0x5e>
		if (usb_dev.configured) {
   28eec:	4b16      	ldr	r3, [pc, #88]	; (28f48 <forward_status_cb+0x98>)
   28eee:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
   28ef2:	b10b      	cbz	r3, 28ef8 <forward_status_cb+0x48>
			usb_cancel_transfers();
   28ef4:	f000 fcde 	bl	298b4 <usb_cancel_transfers>
   28ef8:	4d14      	ldr	r5, [pc, #80]	; (28f4c <forward_status_cb+0x9c>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28efa:	4545      	cmp	r5, r8
   28efc:	d317      	bcc.n	28f2e <forward_status_cb+0x7e>
	if (usb_dev.user_status_callback) {
   28efe:	4b12      	ldr	r3, [pc, #72]	; (28f48 <forward_status_cb+0x98>)
   28f00:	6a1b      	ldr	r3, [r3, #32]
   28f02:	b1e3      	cbz	r3, 28f3e <forward_status_cb+0x8e>
		usb_dev.user_status_callback(status, param);
   28f04:	4631      	mov	r1, r6
   28f06:	4620      	mov	r0, r4
}
   28f08:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		usb_dev.user_status_callback(status, param);
   28f0c:	4718      	bx	r3
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND || status == USB_DC_RESET) {
   28f0e:	2801      	cmp	r0, #1
   28f10:	d1f2      	bne.n	28ef8 <forward_status_cb+0x48>
   28f12:	e7d7      	b.n	28ec4 <forward_status_cb+0x14>
	return usb_dc_ep_disable(ep_data->ep_addr);
   28f14:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
			if (ret < 0) {
   28f18:	3701      	adds	r7, #1
	return usb_dc_ep_disable(ep_data->ep_addr);
   28f1a:	7918      	ldrb	r0, [r3, #4]
   28f1c:	f013 fe94 	bl	3cc48 <usb_dc_ep_disable>
			if (ret < 0) {
   28f20:	2800      	cmp	r0, #0
   28f22:	dadb      	bge.n	28edc <forward_status_cb+0x2c>
				usb_dev.configured = false;
   28f24:	4b08      	ldr	r3, [pc, #32]	; (28f48 <forward_status_cb+0x98>)
   28f26:	2200      	movs	r2, #0
   28f28:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   28f2c:	e7e4      	b.n	28ef8 <forward_status_cb+0x48>
		if (cfg_data->cb_usb_status) {
   28f2e:	68eb      	ldr	r3, [r5, #12]
   28f30:	b11b      	cbz	r3, 28f3a <forward_status_cb+0x8a>
			cfg_data->cb_usb_status(cfg_data, status, param);
   28f32:	4632      	mov	r2, r6
   28f34:	4621      	mov	r1, r4
   28f36:	4628      	mov	r0, r5
   28f38:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28f3a:	3524      	adds	r5, #36	; 0x24
   28f3c:	e7dd      	b.n	28efa <forward_status_cb+0x4a>
}
   28f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28f42:	bf00      	nop
   28f44:	20000f01 	.word	0x20000f01
   28f48:	20001a7c 	.word	0x20001a7c
   28f4c:	20000f01 	.word	0x20000f01

00028f50 <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
   28f50:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
   28f52:	b2c4      	uxtb	r4, r0
	if (USB_EP_GET_IDX(ep) == 0) {
   28f54:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
   28f56:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
   28f58:	f88d 4007 	strb.w	r4, [sp, #7]
	if (USB_EP_GET_IDX(ep) == 0) {
   28f5c:	d007      	beq.n	28f6e <usb_halt_endpoint_req.isra.0+0x1e>
   28f5e:	4620      	mov	r0, r4
   28f60:	f7ff ff74 	bl	28e4c <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
   28f64:	b178      	cbz	r0, 28f86 <usb_halt_endpoint_req.isra.0+0x36>
	return (usb_dev.configuration != 0);
   28f66:	4b0d      	ldr	r3, [pc, #52]	; (28f9c <usb_halt_endpoint_req.isra.0+0x4c>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
   28f68:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
   28f6c:	b158      	cbz	r0, 28f86 <usb_halt_endpoint_req.isra.0+0x36>
		if (halt) {
   28f6e:	4e0b      	ldr	r6, [pc, #44]	; (28f9c <usb_halt_endpoint_req.isra.0+0x4c>)
			usb_dc_ep_set_stall(ep);
   28f70:	4620      	mov	r0, r4
		if (halt) {
   28f72:	b155      	cbz	r5, 28f8a <usb_halt_endpoint_req.isra.0+0x3a>
			usb_dc_ep_set_stall(ep);
   28f74:	f013 fdda 	bl	3cb2c <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
   28f78:	69f3      	ldr	r3, [r6, #28]
   28f7a:	b11b      	cbz	r3, 28f84 <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
   28f7c:	f10d 0107 	add.w	r1, sp, #7
   28f80:	2008      	movs	r0, #8
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
   28f82:	4798      	blx	r3
		return true;
   28f84:	2001      	movs	r0, #1
}
   28f86:	b002      	add	sp, #8
   28f88:	bd70      	pop	{r4, r5, r6, pc}
			usb_dc_ep_clear_stall(ep);
   28f8a:	f013 fdf7 	bl	3cb7c <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
   28f8e:	69f3      	ldr	r3, [r6, #28]
   28f90:	2b00      	cmp	r3, #0
   28f92:	d0f7      	beq.n	28f84 <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
   28f94:	f10d 0107 	add.w	r1, sp, #7
   28f98:	2009      	movs	r0, #9
   28f9a:	e7f2      	b.n	28f82 <usb_halt_endpoint_req.isra.0+0x32>
   28f9c:	20001a7c 	.word	0x20001a7c

00028fa0 <usb_handle_standard_request>:
{
   28fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (usb_dev.custom_req_handler &&
   28fa4:	4ea4      	ldr	r6, [pc, #656]	; (29238 <usb_handle_standard_request+0x298>)
   28fa6:	69b3      	ldr	r3, [r6, #24]
{
   28fa8:	4604      	mov	r4, r0
   28faa:	460f      	mov	r7, r1
   28fac:	4615      	mov	r5, r2
	if (usb_dev.custom_req_handler &&
   28fae:	b9fb      	cbnz	r3, 28ff0 <usb_handle_standard_request+0x50>
	switch (setup->RequestType.recipient) {
   28fb0:	7823      	ldrb	r3, [r4, #0]
   28fb2:	f003 031f 	and.w	r3, r3, #31
   28fb6:	2b01      	cmp	r3, #1
   28fb8:	f000 809d 	beq.w	290f6 <usb_handle_standard_request+0x156>
   28fbc:	2b02      	cmp	r3, #2
   28fbe:	f000 8107 	beq.w	291d0 <usb_handle_standard_request+0x230>
   28fc2:	bb33      	cbnz	r3, 29012 <usb_handle_standard_request+0x72>
	if (usb_reqtype_is_to_host(setup)) {
   28fc4:	f994 0000 	ldrsb.w	r0, [r4]
	uint8_t *data = *data_buf;
   28fc8:	682a      	ldr	r2, [r5, #0]
		switch (setup->bRequest) {
   28fca:	7861      	ldrb	r1, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
   28fcc:	2800      	cmp	r0, #0
   28fce:	da34      	bge.n	2903a <usb_handle_standard_request+0x9a>
		switch (setup->bRequest) {
   28fd0:	2906      	cmp	r1, #6
   28fd2:	d012      	beq.n	28ffa <usb_handle_standard_request+0x5a>
   28fd4:	2908      	cmp	r1, #8
   28fd6:	d02b      	beq.n	29030 <usb_handle_standard_request+0x90>
   28fd8:	b9d9      	cbnz	r1, 29012 <usb_handle_standard_request+0x72>
		data[0] |= USB_GET_STATUS_SELF_POWERED;
   28fda:	2301      	movs	r3, #1
   28fdc:	7013      	strb	r3, [r2, #0]
	data[1] = 0U;
   28fde:	7051      	strb	r1, [r2, #1]
		data[0] |= (usb_dev.remote_wakeup ?
   28fe0:	f896 30c3 	ldrb.w	r3, [r6, #195]	; 0xc3
   28fe4:	005b      	lsls	r3, r3, #1
   28fe6:	f043 0301 	orr.w	r3, r3, #1
   28fea:	7013      	strb	r3, [r2, #0]
		*len = 2;
   28fec:	2302      	movs	r3, #2
   28fee:	e12c      	b.n	2924a <usb_handle_standard_request+0x2aa>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
   28ff0:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
   28ff2:	2800      	cmp	r0, #0
   28ff4:	d1dc      	bne.n	28fb0 <usb_handle_standard_request+0x10>
		return 0;
   28ff6:	2000      	movs	r0, #0
   28ff8:	e00d      	b.n	29016 <usb_handle_standard_request+0x76>
			return usb_get_descriptor(setup, len, data_buf);
   28ffa:	8862      	ldrh	r2, [r4, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
   28ffc:	0a10      	lsrs	r0, r2, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
   28ffe:	1f01      	subs	r1, r0, #4
   29000:	2901      	cmp	r1, #1
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
   29002:	4684      	mov	ip, r0
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
   29004:	d905      	bls.n	29012 <usb_handle_standard_request+0x72>
   29006:	2807      	cmp	r0, #7
   29008:	d803      	bhi.n	29012 <usb_handle_standard_request+0x72>
	p = (uint8_t *)usb_dev.descriptors;
   2900a:	6a71      	ldr	r1, [r6, #36]	; 0x24
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
   2900c:	b2d2      	uxtb	r2, r2
	while (p[DESC_bLength] != 0U) {
   2900e:	780c      	ldrb	r4, [r1, #0]
   29010:	b91c      	cbnz	r4, 2901a <usb_handle_standard_request+0x7a>
			rc = -EINVAL;
   29012:	f06f 0015 	mvn.w	r0, #21
}
   29016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (p[DESC_bDescriptorType] == type) {
   2901a:	784e      	ldrb	r6, [r1, #1]
   2901c:	4566      	cmp	r6, ip
   2901e:	d103      	bne.n	29028 <usb_handle_standard_request+0x88>
			if (cur_index == index) {
   29020:	429a      	cmp	r2, r3
   29022:	f000 810d 	beq.w	29240 <usb_handle_standard_request+0x2a0>
			cur_index++;
   29026:	3301      	adds	r3, #1
		p += p[DESC_bLength];
   29028:	4421      	add	r1, r4
   2902a:	e7f0      	b.n	2900e <usb_handle_standard_request+0x6e>
			*len = p[DESC_bLength];
   2902c:	780b      	ldrb	r3, [r1, #0]
   2902e:	e10c      	b.n	2924a <usb_handle_standard_request+0x2aa>
			data[0] = usb_dev.configuration;
   29030:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
   29034:	7013      	strb	r3, [r2, #0]
				*len = 1;
   29036:	2301      	movs	r3, #1
   29038:	e107      	b.n	2924a <usb_handle_standard_request+0x2aa>
		switch (setup->bRequest) {
   2903a:	3901      	subs	r1, #1
   2903c:	2908      	cmp	r1, #8
   2903e:	d8e8      	bhi.n	29012 <usb_handle_standard_request+0x72>
   29040:	a301      	add	r3, pc, #4	; (adr r3, 29048 <usb_handle_standard_request+0xa8>)
   29042:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   29046:	bf00      	nop
   29048:	000290e1 	.word	0x000290e1
   2904c:	00029013 	.word	0x00029013
   29050:	000290ef 	.word	0x000290ef
   29054:	00029013 	.word	0x00029013
   29058:	0002906d 	.word	0x0002906d
   2905c:	00029013 	.word	0x00029013
   29060:	00029013 	.word	0x00029013
   29064:	00029013 	.word	0x00029013
   29068:	00029079 	.word	0x00029079
			return !usb_dc_set_address(setup->wValue);
   2906c:	78a0      	ldrb	r0, [r4, #2]
   2906e:	f013 fd27 	bl	3cac0 <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
   29072:	2800      	cmp	r0, #0
   29074:	d0bf      	beq.n	28ff6 <usb_handle_standard_request+0x56>
   29076:	e7cc      	b.n	29012 <usb_handle_standard_request+0x72>
	if (setup->wValue == 0U) {
   29078:	8863      	ldrh	r3, [r4, #2]
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
   2907a:	6a75      	ldr	r5, [r6, #36]	; 0x24
	if (setup->wValue == 0U) {
   2907c:	bb63      	cbnz	r3, 290d8 <usb_handle_standard_request+0x138>
		usb_reset_alt_setting();
   2907e:	f7ff fedd 	bl	28e3c <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
   29082:	8863      	ldrh	r3, [r4, #2]
   29084:	f886 30ba 	strb.w	r3, [r6, #186]	; 0xba
		if (usb_dev.status_callback) {
   29088:	69f3      	ldr	r3, [r6, #28]
   2908a:	2b00      	cmp	r3, #0
   2908c:	d0b3      	beq.n	28ff6 <usb_handle_standard_request+0x56>
			usb_dev.status_callback(USB_DC_CONFIGURED,
   2908e:	496b      	ldr	r1, [pc, #428]	; (2923c <usb_handle_standard_request+0x29c>)
   29090:	2003      	movs	r0, #3
   29092:	4798      	blx	r3
   29094:	e7af      	b.n	28ff6 <usb_handle_standard_request+0x56>
		switch (p[DESC_bDescriptorType]) {
   29096:	786b      	ldrb	r3, [r5, #1]
   29098:	2b04      	cmp	r3, #4
   2909a:	d010      	beq.n	290be <usb_handle_standard_request+0x11e>
   2909c:	2b05      	cmp	r3, #5
   2909e:	d011      	beq.n	290c4 <usb_handle_standard_request+0x124>
   290a0:	2b02      	cmp	r3, #2
   290a2:	d104      	bne.n	290ae <usb_handle_standard_request+0x10e>
			cur_config = p[CONF_DESC_bConfigurationValue];
   290a4:	796f      	ldrb	r7, [r5, #5]
			if (cur_config == setup->wValue) {
   290a6:	8863      	ldrh	r3, [r4, #2]
				found = true;
   290a8:	42bb      	cmp	r3, r7
   290aa:	bf08      	it	eq
   290ac:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
   290ae:	782b      	ldrb	r3, [r5, #0]
   290b0:	441d      	add	r5, r3
	while (p[DESC_bLength] != 0U) {
   290b2:	782b      	ldrb	r3, [r5, #0]
   290b4:	2b00      	cmp	r3, #0
   290b6:	d1ee      	bne.n	29096 <usb_handle_standard_request+0xf6>
	if (found) {
   290b8:	2800      	cmp	r0, #0
   290ba:	d0aa      	beq.n	29012 <usb_handle_standard_request+0x72>
   290bc:	e7df      	b.n	2907e <usb_handle_standard_request+0xde>
			cur_alt_setting =
   290be:	f895 8003 	ldrb.w	r8, [r5, #3]
			break;
   290c2:	e7f4      	b.n	290ae <usb_handle_standard_request+0x10e>
			if ((cur_config != setup->wValue) ||
   290c4:	8863      	ldrh	r3, [r4, #2]
   290c6:	42bb      	cmp	r3, r7
   290c8:	d1f1      	bne.n	290ae <usb_handle_standard_request+0x10e>
   290ca:	f1b8 0f00 	cmp.w	r8, #0
   290ce:	d1ee      	bne.n	290ae <usb_handle_standard_request+0x10e>
			found = set_endpoint((struct usb_ep_descriptor *)p);
   290d0:	4628      	mov	r0, r5
   290d2:	f7ff fe89 	bl	28de8 <set_endpoint>
			break;
   290d6:	e7ea      	b.n	290ae <usb_handle_standard_request+0x10e>
	uint8_t cur_config = 0xFF;
   290d8:	27ff      	movs	r7, #255	; 0xff
	bool found = false;
   290da:	2000      	movs	r0, #0
	uint8_t cur_alt_setting = 0xFF;
   290dc:	46b8      	mov	r8, r7
   290de:	e7e8      	b.n	290b2 <usb_handle_standard_request+0x112>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
   290e0:	8863      	ldrh	r3, [r4, #2]
   290e2:	2b01      	cmp	r3, #1
   290e4:	d195      	bne.n	29012 <usb_handle_standard_request+0x72>
					usb_dev.remote_wakeup = false;
   290e6:	2300      	movs	r3, #0
					usb_dev.remote_wakeup = true;
   290e8:	f886 30c3 	strb.w	r3, [r6, #195]	; 0xc3
					return true;
   290ec:	e783      	b.n	28ff6 <usb_handle_standard_request+0x56>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
   290ee:	8863      	ldrh	r3, [r4, #2]
   290f0:	2b01      	cmp	r3, #1
   290f2:	d18e      	bne.n	29012 <usb_handle_standard_request+0x72>
   290f4:	e7f8      	b.n	290e8 <usb_handle_standard_request+0x148>
	if (!is_device_configured() ||
   290f6:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
   290fa:	f8d5 c000 	ldr.w	ip, [r5]
   290fe:	2b00      	cmp	r3, #0
   29100:	d087      	beq.n	29012 <usb_handle_standard_request+0x72>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
   29102:	6a75      	ldr	r5, [r6, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
   29104:	88a3      	ldrh	r3, [r4, #4]
   29106:	f894 e004 	ldrb.w	lr, [r4, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
   2910a:	462a      	mov	r2, r5
	while (p[DESC_bLength] != 0U) {
   2910c:	7810      	ldrb	r0, [r2, #0]
   2910e:	2800      	cmp	r0, #0
   29110:	f43f af7f 	beq.w	29012 <usb_handle_standard_request+0x72>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
   29114:	7851      	ldrb	r1, [r2, #1]
   29116:	2902      	cmp	r1, #2
   29118:	d104      	bne.n	29124 <usb_handle_standard_request+0x184>
			if (interface < cfg_descr->bNumInterfaces) {
   2911a:	f892 8004 	ldrb.w	r8, [r2, #4]
   2911e:	45f0      	cmp	r8, lr
   29120:	f200 8095 	bhi.w	2924e <usb_handle_standard_request+0x2ae>
		p += p[DESC_bLength];
   29124:	4402      	add	r2, r0
   29126:	e7f1      	b.n	2910c <usb_handle_standard_request+0x16c>
			data[0] = 0U;
   29128:	f88c 2000 	strb.w	r2, [ip]
			data[1] = 0U;
   2912c:	f88c 2001 	strb.w	r2, [ip, #1]
			*len = 2;
   29130:	6039      	str	r1, [r7, #0]
			return true;
   29132:	e760      	b.n	28ff6 <usb_handle_standard_request+0x56>
		p += p[DESC_bLength];
   29134:	4415      	add	r5, r2
   29136:	e096      	b.n	29266 <usb_handle_standard_request+0x2c6>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
   29138:	2a0b      	cmp	r2, #11
   2913a:	f47f af6a 	bne.w	29012 <usb_handle_standard_request+0x72>
	bool ret = false;
   2913e:	2700      	movs	r7, #0
	uint8_t cur_iface = 0xFF;
   29140:	f04f 08ff 	mov.w	r8, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
   29144:	46c1      	mov	r9, r8
	const uint8_t *if_desc = NULL;
   29146:	46ba      	mov	sl, r7
   29148:	e006      	b.n	29158 <usb_handle_standard_request+0x1b8>
		switch (p[DESC_bDescriptorType]) {
   2914a:	786b      	ldrb	r3, [r5, #1]
   2914c:	2b04      	cmp	r3, #4
   2914e:	d00f      	beq.n	29170 <usb_handle_standard_request+0x1d0>
   29150:	2b05      	cmp	r3, #5
   29152:	d021      	beq.n	29198 <usb_handle_standard_request+0x1f8>
		p += p[DESC_bLength];
   29154:	782b      	ldrb	r3, [r5, #0]
   29156:	441d      	add	r5, r3
	while (p[DESC_bLength] != 0U) {
   29158:	782b      	ldrb	r3, [r5, #0]
   2915a:	2b00      	cmp	r3, #0
   2915c:	d1f5      	bne.n	2914a <usb_handle_standard_request+0x1aa>
	if (usb_dev.status_callback) {
   2915e:	69f3      	ldr	r3, [r6, #28]
   29160:	b113      	cbz	r3, 29168 <usb_handle_standard_request+0x1c8>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
   29162:	4651      	mov	r1, sl
   29164:	2007      	movs	r0, #7
   29166:	4798      	blx	r3
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
   29168:	2f00      	cmp	r7, #0
   2916a:	f47f af44 	bne.w	28ff6 <usb_handle_standard_request+0x56>
   2916e:	e750      	b.n	29012 <usb_handle_standard_request+0x72>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
   29170:	f895 8002 	ldrb.w	r8, [r5, #2]
			if (cur_iface == setup->wIndex &&
   29174:	88a3      	ldrh	r3, [r4, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
   29176:	f895 9003 	ldrb.w	r9, [r5, #3]
			if (cur_iface == setup->wIndex &&
   2917a:	4598      	cmp	r8, r3
   2917c:	d1ea      	bne.n	29154 <usb_handle_standard_request+0x1b4>
			    cur_alt_setting == setup->wValue) {
   2917e:	8863      	ldrh	r3, [r4, #2]
			if (cur_iface == setup->wIndex &&
   29180:	4599      	cmp	r9, r3
   29182:	d1e7      	bne.n	29154 <usb_handle_standard_request+0x1b4>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
   29184:	f1b8 0f07 	cmp.w	r8, #7
   29188:	d81f      	bhi.n	291ca <usb_handle_standard_request+0x22a>
		usb_dev.alt_setting[iface] = alt_setting;
   2918a:	eb06 0308 	add.w	r3, r6, r8
		return true;
   2918e:	46aa      	mov	sl, r5
				ret = usb_set_alt_setting(setup->wIndex,
   29190:	f883 90bb 	strb.w	r9, [r3, #187]	; 0xbb
	return true;
   29194:	2701      	movs	r7, #1
   29196:	e7dd      	b.n	29154 <usb_handle_standard_request+0x1b4>
			if (cur_iface == setup->wIndex) {
   29198:	88a3      	ldrh	r3, [r4, #4]
   2919a:	4543      	cmp	r3, r8
   2919c:	d1da      	bne.n	29154 <usb_handle_standard_request+0x1b4>
	if (cur_alt_setting != alt_setting) {
   2919e:	78a3      	ldrb	r3, [r4, #2]
   291a0:	454b      	cmp	r3, r9
   291a2:	d00d      	beq.n	291c0 <usb_handle_standard_request+0x220>
		ret = reset_endpoint(ep_desc);
   291a4:	78af      	ldrb	r7, [r5, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
   291a6:	4638      	mov	r0, r7
   291a8:	f000 fb66 	bl	29878 <usb_cancel_transfer>
	ret = usb_dc_ep_disable(ep_cfg.ep_addr);
   291ac:	4638      	mov	r0, r7
   291ae:	f013 fd4b 	bl	3cc48 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
   291b2:	f110 0f78 	cmn.w	r0, #120	; 0x78
   291b6:	d0ed      	beq.n	29194 <usb_handle_standard_request+0x1f4>
	} else if (ret) {
   291b8:	fab0 f780 	clz	r7, r0
   291bc:	097f      	lsrs	r7, r7, #5
   291be:	e7c9      	b.n	29154 <usb_handle_standard_request+0x1b4>
		ret = set_endpoint(ep_desc);
   291c0:	4628      	mov	r0, r5
   291c2:	f7ff fe11 	bl	28de8 <set_endpoint>
   291c6:	4607      	mov	r7, r0
   291c8:	e7c4      	b.n	29154 <usb_handle_standard_request+0x1b4>
   291ca:	46aa      	mov	sl, r5
	return false;
   291cc:	2700      	movs	r7, #0
   291ce:	e7c1      	b.n	29154 <usb_handle_standard_request+0x1b4>
	if (usb_reqtype_is_to_host(setup)) {
   291d0:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
   291d4:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
   291d6:	2a00      	cmp	r2, #0
   291d8:	da18      	bge.n	2920c <usb_handle_standard_request+0x26c>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
   291da:	2b00      	cmp	r3, #0
   291dc:	f47f af19 	bne.w	29012 <usb_handle_standard_request+0x72>
	uint8_t ep = setup->wIndex;
   291e0:	7924      	ldrb	r4, [r4, #4]
   291e2:	682d      	ldr	r5, [r5, #0]
	if (USB_EP_GET_IDX(ep) == 0) {
   291e4:	0663      	lsls	r3, r4, #25
   291e6:	d00a      	beq.n	291fe <usb_handle_standard_request+0x25e>
   291e8:	4620      	mov	r0, r4
   291ea:	f7ff fe2f 	bl	28e4c <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
   291ee:	2800      	cmp	r0, #0
   291f0:	f43f af0f 	beq.w	29012 <usb_handle_standard_request+0x72>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
   291f4:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
   291f8:	2b00      	cmp	r3, #0
   291fa:	f43f af0a 	beq.w	29012 <usb_handle_standard_request+0x72>
		usb_dc_ep_is_stalled(ep, &data[0]);
   291fe:	4629      	mov	r1, r5
   29200:	4620      	mov	r0, r4
   29202:	f013 fcdb 	bl	3cbbc <usb_dc_ep_is_stalled>
		data[1] = 0U;
   29206:	2300      	movs	r3, #0
   29208:	706b      	strb	r3, [r5, #1]
   2920a:	e6ef      	b.n	28fec <usb_handle_standard_request+0x4c>
		switch (setup->bRequest) {
   2920c:	2b01      	cmp	r3, #1
   2920e:	d008      	beq.n	29222 <usb_handle_standard_request+0x282>
   29210:	2b03      	cmp	r3, #3
   29212:	f47f aefe 	bne.w	29012 <usb_handle_standard_request+0x72>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
   29216:	8863      	ldrh	r3, [r4, #2]
   29218:	2b00      	cmp	r3, #0
   2921a:	f47f aefa 	bne.w	29012 <usb_handle_standard_request+0x72>
				return usb_halt_endpoint_req(setup, true);
   2921e:	2101      	movs	r1, #1
   29220:	e003      	b.n	2922a <usb_handle_standard_request+0x28a>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
   29222:	8861      	ldrh	r1, [r4, #2]
   29224:	2900      	cmp	r1, #0
   29226:	f47f aef4 	bne.w	29012 <usb_handle_standard_request+0x72>
				return usb_halt_endpoint_req(setup, true);
   2922a:	88a0      	ldrh	r0, [r4, #4]
   2922c:	f7ff fe90 	bl	28f50 <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
   29230:	2800      	cmp	r0, #0
   29232:	f47f aee0 	bne.w	28ff6 <usb_handle_standard_request+0x56>
   29236:	e6ec      	b.n	29012 <usb_handle_standard_request+0x72>
   29238:	20001a7c 	.word	0x20001a7c
   2923c:	20001b36 	.word	0x20001b36
		if (type == USB_DESC_CONFIGURATION) {
   29240:	2802      	cmp	r0, #2
		*data = p;
   29242:	6029      	str	r1, [r5, #0]
		if (type == USB_DESC_CONFIGURATION) {
   29244:	f47f aef2 	bne.w	2902c <usb_handle_standard_request+0x8c>
			*len = (p[CONF_DESC_wTotalLength]) |
   29248:	884b      	ldrh	r3, [r1, #2]
		*len = 2;
   2924a:	603b      	str	r3, [r7, #0]
		return true;
   2924c:	e6d3      	b.n	28ff6 <usb_handle_standard_request+0x56>
	if (usb_reqtype_is_to_host(setup)) {
   2924e:	f994 0000 	ldrsb.w	r0, [r4]
		switch (setup->bRequest) {
   29252:	7862      	ldrb	r2, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
   29254:	2800      	cmp	r0, #0
   29256:	f6bf af6f 	bge.w	29138 <usb_handle_standard_request+0x198>
		switch (setup->bRequest) {
   2925a:	2a00      	cmp	r2, #0
   2925c:	f43f af64 	beq.w	29128 <usb_handle_standard_request+0x188>
   29260:	2a0a      	cmp	r2, #10
   29262:	f47f aed6 	bne.w	29012 <usb_handle_standard_request+0x72>
	while (p[DESC_bLength] != 0U) {
   29266:	782a      	ldrb	r2, [r5, #0]
   29268:	2a00      	cmp	r2, #0
   2926a:	f43f aed2 	beq.w	29012 <usb_handle_standard_request+0x72>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
   2926e:	7869      	ldrb	r1, [r5, #1]
   29270:	2904      	cmp	r1, #4
   29272:	f47f af5f 	bne.w	29134 <usb_handle_standard_request+0x194>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
   29276:	78a9      	ldrb	r1, [r5, #2]
			if (cur_iface == setup->wIndex) {
   29278:	428b      	cmp	r3, r1
   2927a:	f47f af5b 	bne.w	29134 <usb_handle_standard_request+0x194>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
   2927e:	2b07      	cmp	r3, #7
		return usb_dev.alt_setting[iface];
   29280:	bf96      	itet	ls
   29282:	199b      	addls	r3, r3, r6
	return 0;
   29284:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
   29286:	f893 30bb 	ldrbls.w	r3, [r3, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
   2928a:	f88c 3000 	strb.w	r3, [ip]
   2928e:	e6d2      	b.n	29036 <usb_handle_standard_request+0x96>

00029290 <usb_data_to_host>:
{
   29290:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
   29292:	4c13      	ldr	r4, [pc, #76]	; (292e0 <usb_data_to_host+0x50>)
   29294:	7d23      	ldrb	r3, [r4, #20]
   29296:	b9cb      	cbnz	r3, 292cc <usb_data_to_host+0x3c>
		uint32_t chunk = usb_dev.data_buf_residue;
   29298:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
   2929a:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
   2929c:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
   2929e:	ab01      	add	r3, sp, #4
   292a0:	2080      	movs	r0, #128	; 0x80
   292a2:	f019 fc6d 	bl	42b80 <usb_write>
		usb_dev.data_buf += chunk;
   292a6:	9a01      	ldr	r2, [sp, #4]
   292a8:	68a3      	ldr	r3, [r4, #8]
   292aa:	4413      	add	r3, r2
   292ac:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
   292ae:	68e3      	ldr	r3, [r4, #12]
   292b0:	1a9b      	subs	r3, r3, r2
   292b2:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
   292b4:	b943      	cbnz	r3, 292c8 <usb_data_to_host+0x38>
   292b6:	b13a      	cbz	r2, 292c8 <usb_data_to_host+0x38>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
   292b8:	6923      	ldr	r3, [r4, #16]
   292ba:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
   292bc:	429a      	cmp	r2, r3
   292be:	dd03      	ble.n	292c8 <usb_data_to_host+0x38>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
   292c0:	069b      	lsls	r3, r3, #26
   292c2:	d101      	bne.n	292c8 <usb_data_to_host+0x38>
				usb_dev.zlp_flag = true;
   292c4:	2301      	movs	r3, #1
   292c6:	7523      	strb	r3, [r4, #20]
}
   292c8:	b002      	add	sp, #8
   292ca:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
   292cc:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
   292ce:	461a      	mov	r2, r3
   292d0:	4619      	mov	r1, r3
   292d2:	2080      	movs	r0, #128	; 0x80
		usb_dev.zlp_flag = false;
   292d4:	7523      	strb	r3, [r4, #20]
}
   292d6:	b002      	add	sp, #8
   292d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
   292dc:	f013 bcda 	b.w	3cc94 <usb_dc_ep_write>
   292e0:	20001a7c 	.word	0x20001a7c

000292e4 <usb_handle_control_transfer>:
{
   292e4:	b530      	push	{r4, r5, lr}
   292e6:	b085      	sub	sp, #20
	uint32_t chunk = 0U;
   292e8:	2300      	movs	r3, #0
{
   292ea:	4602      	mov	r2, r0
   292ec:	460d      	mov	r5, r1
	uint32_t chunk = 0U;
   292ee:	9301      	str	r3, [sp, #4]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
   292f0:	2800      	cmp	r0, #0
   292f2:	d158      	bne.n	293a6 <usb_handle_control_transfer+0xc2>
   292f4:	2900      	cmp	r1, #0
   292f6:	d135      	bne.n	29364 <usb_handle_control_transfer+0x80>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
   292f8:	2208      	movs	r2, #8
   292fa:	460b      	mov	r3, r1
   292fc:	eb0d 0102 	add.w	r1, sp, r2
   29300:	f01d ffd7 	bl	472b2 <usb_dc_ep_read>
   29304:	2800      	cmp	r0, #0
   29306:	da04      	bge.n	29312 <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   29308:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
   2930a:	f013 fc0f 	bl	3cb2c <usb_dc_ep_set_stall>
}
   2930e:	b005      	add	sp, #20
   29310:	bd30      	pop	{r4, r5, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
   29312:	4c2a      	ldr	r4, [pc, #168]	; (293bc <usb_handle_control_transfer+0xd8>)
   29314:	9a02      	ldr	r2, [sp, #8]
   29316:	6022      	str	r2, [r4, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
   29318:	9a03      	ldr	r2, [sp, #12]
   2931a:	6062      	str	r2, [r4, #4]
		usb_dev.data_buf = usb_dev.req_data;
   2931c:	f104 0238 	add.w	r2, r4, #56	; 0x38
   29320:	60a2      	str	r2, [r4, #8]
		if (usb_reqtype_is_to_device(setup)) {
   29322:	f99d 2008 	ldrsb.w	r2, [sp, #8]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
   29326:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		usb_dev.zlp_flag = false;
   2932a:	7525      	strb	r5, [r4, #20]
		if (usb_reqtype_is_to_device(setup)) {
   2932c:	2a00      	cmp	r2, #0
		usb_dev.data_buf_residue = 0;
   2932e:	e9c4 5503 	strd	r5, r5, [r4, #12]
		if (usb_reqtype_is_to_device(setup)) {
   29332:	db0a      	blt.n	2934a <usb_handle_control_transfer+0x66>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
   29334:	2b80      	cmp	r3, #128	; 0x80
   29336:	d904      	bls.n	29342 <usb_handle_control_transfer+0x5e>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   29338:	2080      	movs	r0, #128	; 0x80
   2933a:	f013 fbf7 	bl	3cb2c <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
   2933e:	2000      	movs	r0, #0
   29340:	e7e3      	b.n	2930a <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
   29342:	b113      	cbz	r3, 2934a <usb_handle_control_transfer+0x66>
				usb_dev.data_buf_residue = setup->wLength;
   29344:	e9c4 3303 	strd	r3, r3, [r4, #12]
				return;
   29348:	e7e1      	b.n	2930e <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
   2934a:	f7ff fd9b 	bl	28e84 <usb_handle_request.constprop.0>
   2934e:	2800      	cmp	r0, #0
   29350:	d0da      	beq.n	29308 <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
   29352:	88e2      	ldrh	r2, [r4, #6]
   29354:	6923      	ldr	r3, [r4, #16]
   29356:	429a      	cmp	r2, r3
   29358:	bfd4      	ite	le
   2935a:	60e2      	strle	r2, [r4, #12]
   2935c:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
   2935e:	f7ff ff97 	bl	29290 <usb_data_to_host>
   29362:	e7d4      	b.n	2930e <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
   29364:	4c15      	ldr	r4, [pc, #84]	; (293bc <usb_handle_control_transfer+0xd8>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   29366:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
   2936a:	2d00      	cmp	r5, #0
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   2936c:	ab01      	add	r3, sp, #4
		if (usb_dev.data_buf_residue <= 0) {
   2936e:	dc04      	bgt.n	2937a <usb_handle_control_transfer+0x96>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   29370:	f01d ff9f 	bl	472b2 <usb_dc_ep_read>
   29374:	2800      	cmp	r0, #0
   29376:	daca      	bge.n	2930e <usb_handle_control_transfer+0x2a>
   29378:	e7c6      	b.n	29308 <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   2937a:	462a      	mov	r2, r5
   2937c:	f01d ff99 	bl	472b2 <usb_dc_ep_read>
   29380:	2800      	cmp	r0, #0
   29382:	dbd9      	blt.n	29338 <usb_handle_control_transfer+0x54>
		usb_dev.data_buf += chunk;
   29384:	9a01      	ldr	r2, [sp, #4]
   29386:	68a3      	ldr	r3, [r4, #8]
   29388:	4413      	add	r3, r2
   2938a:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
   2938c:	68e3      	ldr	r3, [r4, #12]
   2938e:	1a9b      	subs	r3, r3, r2
   29390:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
   29392:	2b00      	cmp	r3, #0
   29394:	d1bb      	bne.n	2930e <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
   29396:	f104 0338 	add.w	r3, r4, #56	; 0x38
   2939a:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
   2939c:	f7ff fd72 	bl	28e84 <usb_handle_request.constprop.0>
   293a0:	2800      	cmp	r0, #0
   293a2:	d1dc      	bne.n	2935e <usb_handle_control_transfer+0x7a>
   293a4:	e7b0      	b.n	29308 <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
   293a6:	2880      	cmp	r0, #128	; 0x80
   293a8:	d1b1      	bne.n	2930e <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
   293aa:	4b04      	ldr	r3, [pc, #16]	; (293bc <usb_handle_control_transfer+0xd8>)
   293ac:	68da      	ldr	r2, [r3, #12]
   293ae:	2a00      	cmp	r2, #0
   293b0:	d1d5      	bne.n	2935e <usb_handle_control_transfer+0x7a>
   293b2:	7d1b      	ldrb	r3, [r3, #20]
   293b4:	2b00      	cmp	r3, #0
   293b6:	d1d2      	bne.n	2935e <usb_handle_control_transfer+0x7a>
   293b8:	e7a9      	b.n	2930e <usb_handle_control_transfer+0x2a>
   293ba:	bf00      	nop
   293bc:	20001a7c 	.word	0x20001a7c

000293c0 <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
   293c0:	4b05      	ldr	r3, [pc, #20]	; (293d8 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
   293c2:	4a06      	ldr	r2, [pc, #24]	; (293dc <usb_set_config+0x1c>)
   293c4:	629a      	str	r2, [r3, #40]	; 0x28
   293c6:	4a06      	ldr	r2, [pc, #24]	; (293e0 <usb_set_config+0x20>)
   293c8:	62da      	str	r2, [r3, #44]	; 0x2c
   293ca:	4a06      	ldr	r2, [pc, #24]	; (293e4 <usb_set_config+0x24>)
   293cc:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
   293ce:	4a06      	ldr	r2, [pc, #24]	; (293e8 <usb_set_config+0x28>)
	usb_dev.descriptors = usb_descriptors;
   293d0:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
   293d2:	619a      	str	r2, [r3, #24]

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);

	return 0;
}
   293d4:	2000      	movs	r0, #0
   293d6:	4770      	bx	lr
   293d8:	20001a7c 	.word	0x20001a7c
   293dc:	00028fa1 	.word	0x00028fa1
   293e0:	00028d0d 	.word	0x00028d0d
   293e4:	00028dad 	.word	0x00028dad
   293e8:	00028d4d 	.word	0x00028d4d

000293ec <usb_device_init>:
/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(const struct device *dev)
{
   293ec:	b510      	push	{r4, lr}
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
   293ee:	4b08      	ldr	r3, [pc, #32]	; (29410 <usb_device_init+0x24>)
   293f0:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
   293f4:	b934      	cbnz	r4, 29404 <usb_device_init+0x18>
		return -EALREADY;
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
   293f6:	f000 f8cb 	bl	29590 <usb_get_device_descriptor>
	if (!device_descriptor) {
   293fa:	b130      	cbz	r0, 2940a <usb_device_init+0x1e>
		LOG_ERR("Failed to configure USB device stack");
		return -1;
	}

	usb_set_config(device_descriptor);
   293fc:	f7ff ffe0 	bl	293c0 <usb_set_config>

	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
   29400:	4620      	mov	r0, r4
}
   29402:	bd10      	pop	{r4, pc}
		return -EALREADY;
   29404:	f06f 0077 	mvn.w	r0, #119	; 0x77
   29408:	e7fb      	b.n	29402 <usb_device_init+0x16>
		return -1;
   2940a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2940e:	e7f8      	b.n	29402 <usb_device_init+0x16>
   29410:	20001a7c 	.word	0x20001a7c

00029414 <usb_enable>:
{
   29414:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   29418:	4604      	mov	r4, r0
	if (usb_dev.enabled == true) {
   2941a:	4d35      	ldr	r5, [pc, #212]	; (294f0 <usb_enable+0xdc>)
	return z_impl_k_mutex_lock(mutex, timeout);
   2941c:	4835      	ldr	r0, [pc, #212]	; (294f4 <usb_enable+0xe0>)
   2941e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29422:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29426:	f017 fab5 	bl	40994 <z_impl_k_mutex_lock>
   2942a:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
   2942e:	2e00      	cmp	r6, #0
   29430:	d15b      	bne.n	294ea <usb_enable+0xd6>
	usb_dev.status_callback = cb;
   29432:	4831      	ldr	r0, [pc, #196]	; (294f8 <usb_enable+0xe4>)
	usb_dev.user_status_callback = status_cb;
   29434:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
   29436:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
   29438:	f013 fd46 	bl	3cec8 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
   2943c:	f013 fb02 	bl	3ca44 <usb_dc_attach>
	if (ret < 0) {
   29440:	1e04      	subs	r4, r0, #0
   29442:	db36      	blt.n	294b2 <usb_enable+0x9e>
	ret = usb_transfer_init();
   29444:	f000 fa5a 	bl	298fc <usb_transfer_init>
	if (ret < 0) {
   29448:	1e04      	subs	r4, r0, #0
   2944a:	db32      	blt.n	294b2 <usb_enable+0x9e>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
   2944c:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_configure(&ep0_cfg);
   2944e:	4668      	mov	r0, sp
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
   29450:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
   29454:	f88d 6004 	strb.w	r6, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
   29458:	f88d 6000 	strb.w	r6, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
   2945c:	f013 fb42 	bl	3cae4 <usb_dc_ep_configure>
	if (ret < 0) {
   29460:	1e04      	subs	r4, r0, #0
   29462:	db26      	blt.n	294b2 <usb_enable+0x9e>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
   29464:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
   29466:	4668      	mov	r0, sp
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
   29468:	f88d 7000 	strb.w	r7, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
   2946c:	f013 fb3a 	bl	3cae4 <usb_dc_ep_configure>
	if (ret < 0) {
   29470:	1e04      	subs	r4, r0, #0
   29472:	db1e      	blt.n	294b2 <usb_enable+0x9e>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
   29474:	4921      	ldr	r1, [pc, #132]	; (294fc <usb_enable+0xe8>)
   29476:	4630      	mov	r0, r6
   29478:	f013 fd12 	bl	3cea0 <usb_dc_ep_set_callback>
	if (ret < 0) {
   2947c:	1e04      	subs	r4, r0, #0
   2947e:	db18      	blt.n	294b2 <usb_enable+0x9e>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
   29480:	491e      	ldr	r1, [pc, #120]	; (294fc <usb_enable+0xe8>)
   29482:	4638      	mov	r0, r7
   29484:	f013 fd0c 	bl	3cea0 <usb_dc_ep_set_callback>
	if (ret < 0) {
   29488:	1e04      	subs	r4, r0, #0
   2948a:	db12      	blt.n	294b2 <usb_enable+0x9e>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2948c:	4c1c      	ldr	r4, [pc, #112]	; (29500 <usb_enable+0xec>)
   2948e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 29504 <usb_enable+0xf0>
   29492:	4544      	cmp	r4, r8
   29494:	d314      	bcc.n	294c0 <usb_enable+0xac>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
   29496:	2000      	movs	r0, #0
   29498:	f013 fbac 	bl	3cbf4 <usb_dc_ep_enable>
	if (ret < 0) {
   2949c:	1e04      	subs	r4, r0, #0
   2949e:	db08      	blt.n	294b2 <usb_enable+0x9e>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
   294a0:	2080      	movs	r0, #128	; 0x80
   294a2:	f013 fba7 	bl	3cbf4 <usb_dc_ep_enable>
	if (ret < 0) {
   294a6:	1e04      	subs	r4, r0, #0
   294a8:	db03      	blt.n	294b2 <usb_enable+0x9e>
	usb_dev.enabled = true;
   294aa:	2301      	movs	r3, #1
   294ac:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
	ret = 0;
   294b0:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
   294b2:	4810      	ldr	r0, [pc, #64]	; (294f4 <usb_enable+0xe0>)
   294b4:	f017 fae8 	bl	40a88 <z_impl_k_mutex_unlock>
}
   294b8:	4620      	mov	r0, r4
   294ba:	b002      	add	sp, #8
   294bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ep_data = cfg_data->endpoint;
   294c0:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   294c2:	2600      	movs	r6, #0
   294c4:	7f22      	ldrb	r2, [r4, #28]
   294c6:	b2f3      	uxtb	r3, r6
   294c8:	429a      	cmp	r2, r3
   294ca:	d801      	bhi.n	294d0 <usb_enable+0xbc>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   294cc:	3424      	adds	r4, #36	; 0x24
   294ce:	e7e0      	b.n	29492 <usb_enable+0x7e>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
   294d0:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   294d4:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   294d8:	7910      	ldrb	r0, [r2, #4]
   294da:	f013 fce1 	bl	3cea0 <usb_dc_ep_set_callback>
   294de:	3601      	adds	r6, #1
   294e0:	2800      	cmp	r0, #0
   294e2:	d0ef      	beq.n	294c4 <usb_enable+0xb0>
   294e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   294e8:	e7e3      	b.n	294b2 <usb_enable+0x9e>
		ret = -EALREADY;
   294ea:	f06f 0477 	mvn.w	r4, #119	; 0x77
   294ee:	e7e0      	b.n	294b2 <usb_enable+0x9e>
   294f0:	20001a7c 	.word	0x20001a7c
   294f4:	20000cc8 	.word	0x20000cc8
   294f8:	00028eb1 	.word	0x00028eb1
   294fc:	000292e5 	.word	0x000292e5
   29500:	20000f01 	.word	0x20000f01
   29504:	20000f01 	.word	0x20000f01

00029508 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
   29508:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
   2950a:	4b1f      	ldr	r3, [pc, #124]	; (29588 <usb_update_sn_string_descriptor+0x80>)
{
   2950c:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
   2950e:	aa05      	add	r2, sp, #20
   29510:	f103 0510 	add.w	r5, r3, #16
   29514:	6818      	ldr	r0, [r3, #0]
   29516:	6859      	ldr	r1, [r3, #4]
   29518:	4614      	mov	r4, r2
   2951a:	c403      	stmia	r4!, {r0, r1}
   2951c:	3308      	adds	r3, #8
   2951e:	42ab      	cmp	r3, r5
   29520:	4622      	mov	r2, r4
   29522:	d1f7      	bne.n	29514 <usb_update_sn_string_descriptor+0xc>
   29524:	781b      	ldrb	r3, [r3, #0]
   29526:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
   29528:	2210      	movs	r2, #16
   2952a:	2100      	movs	r1, #0
   2952c:	a801      	add	r0, sp, #4
   2952e:	f01a fefe 	bl	4432e <memset>
	memset(sn, 0, sizeof(sn));
   29532:	2212      	movs	r2, #18
   29534:	2100      	movs	r1, #0
   29536:	4815      	ldr	r0, [pc, #84]	; (2958c <usb_update_sn_string_descriptor+0x84>)
   29538:	f01a fef9 	bl	4432e <memset>
		union { uintptr_t x; size_t val; } parm1 = { .val = length };
		return (ssize_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
   2953c:	2110      	movs	r1, #16
   2953e:	a801      	add	r0, sp, #4
   29540:	f01d ffcb 	bl	474da <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
   29544:	2800      	cmp	r0, #0
   29546:	dd1b      	ble.n	29580 <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
   29548:	2808      	cmp	r0, #8
   2954a:	bfb8      	it	lt
   2954c:	2008      	movlt	r0, #8
   2954e:	3809      	subs	r0, #9
   29550:	ab01      	add	r3, sp, #4
   29552:	490e      	ldr	r1, [pc, #56]	; (2958c <usb_update_sn_string_descriptor+0x84>)
   29554:	181a      	adds	r2, r3, r0
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
   29556:	2000      	movs	r0, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
   29558:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   2955c:	ac0a      	add	r4, sp, #40	; 0x28
   2955e:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   29562:	f003 030f 	and.w	r3, r3, #15
   29566:	3328      	adds	r3, #40	; 0x28
   29568:	446b      	add	r3, sp
		for (int i = 0; i < usblen; i++) {
   2956a:	3001      	adds	r0, #1
			sn[i * 2] = hex[hwid[i + skip] >> 4];
   2956c:	f814 4c14 	ldrb.w	r4, [r4, #-20]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   29570:	f813 3c14 	ldrb.w	r3, [r3, #-20]
			sn[i * 2] = hex[hwid[i + skip] >> 4];
   29574:	700c      	strb	r4, [r1, #0]
		for (int i = 0; i < usblen; i++) {
   29576:	2808      	cmp	r0, #8
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   29578:	704b      	strb	r3, [r1, #1]
		for (int i = 0; i < usblen; i++) {
   2957a:	f101 0102 	add.w	r1, r1, #2
   2957e:	d1eb      	bne.n	29558 <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
   29580:	4802      	ldr	r0, [pc, #8]	; (2958c <usb_update_sn_string_descriptor+0x84>)
   29582:	b00b      	add	sp, #44	; 0x2c
   29584:	bd30      	pop	{r4, r5, pc}
   29586:	bf00      	nop
   29588:	0004a690 	.word	0x0004a690
   2958c:	20003a57 	.word	0x20003a57

00029590 <usb_get_device_descriptor>:
	return 0;
}


uint8_t *usb_get_device_descriptor(void)
{
   29590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29594:	4c64      	ldr	r4, [pc, #400]	; (29728 <usb_get_device_descriptor+0x198>)
   29596:	b085      	sub	sp, #20
	uint8_t str_descr_idx = 0U;
   29598:	2600      	movs	r6, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
   2959a:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
   2959e:	46b1      	mov	r9, r6
	struct usb_cfg_data *cfg_data = NULL;
   295a0:	4635      	mov	r5, r6
	struct usb_cfg_descriptor *cfg_descr = NULL;
   295a2:	46b2      	mov	sl, r6
	while (head->bLength != 0U) {
   295a4:	7823      	ldrb	r3, [r4, #0]
   295a6:	b92b      	cbnz	r3, 295b4 <usb_get_device_descriptor+0x24>
	if ((head + 1) != __usb_descriptor_end) {
   295a8:	4b60      	ldr	r3, [pc, #384]	; (2972c <usb_get_device_descriptor+0x19c>)
   295aa:	3402      	adds	r4, #2
   295ac:	429c      	cmp	r4, r3
   295ae:	d1f3      	bne.n	29598 <usb_get_device_descriptor+0x8>
	if (usb_fix_descriptor(__usb_descriptor_start)) {
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
   295b0:	485d      	ldr	r0, [pc, #372]	; (29728 <usb_get_device_descriptor+0x198>)
   295b2:	e01c      	b.n	295ee <usb_get_device_descriptor+0x5e>
		switch (head->bDescriptorType) {
   295b4:	7863      	ldrb	r3, [r4, #1]
   295b6:	2b05      	cmp	r3, #5
   295b8:	d805      	bhi.n	295c6 <usb_get_device_descriptor+0x36>
   295ba:	e8df f003 	tbb	[pc, r3]
   295be:	047b      	.short	0x047b
   295c0:	25077b03 	.word	0x25077b03
   295c4:	46a2      	mov	sl, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
   295c6:	7823      	ldrb	r3, [r4, #0]
   295c8:	441c      	add	r4, r3
   295ca:	e7eb      	b.n	295a4 <usb_get_device_descriptor+0x14>
			if (if_descr->bAlternateSetting) {
   295cc:	78e3      	ldrb	r3, [r4, #3]
   295ce:	2b00      	cmp	r3, #0
   295d0:	d1f9      	bne.n	295c6 <usb_get_device_descriptor+0x36>
			if (if_descr->bInterfaceNumber == 0U) {
   295d2:	78a3      	ldrb	r3, [r4, #2]
   295d4:	b173      	cbz	r3, 295f4 <usb_get_device_descriptor+0x64>
			numof_ifaces++;
   295d6:	f109 0901 	add.w	r9, r9, #1
   295da:	fa5f f989 	uxtb.w	r9, r9
			break;
   295de:	e7f2      	b.n	295c6 <usb_get_device_descriptor+0x36>
		if (cfg_data->interface_descriptor == iface) {
   295e0:	686a      	ldr	r2, [r5, #4]
   295e2:	4294      	cmp	r4, r2
   295e4:	d009      	beq.n	295fa <usb_get_device_descriptor+0x6a>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   295e6:	3524      	adds	r5, #36	; 0x24
   295e8:	429d      	cmp	r5, r3
   295ea:	d3f9      	bcc.n	295e0 <usb_get_device_descriptor+0x50>
		return NULL;
   295ec:	2000      	movs	r0, #0
}
   295ee:	b005      	add	sp, #20
   295f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   295f4:	4d4e      	ldr	r5, [pc, #312]	; (29730 <usb_get_device_descriptor+0x1a0>)
   295f6:	4b4f      	ldr	r3, [pc, #316]	; (29734 <usb_get_device_descriptor+0x1a4>)
   295f8:	e7f6      	b.n	295e8 <usb_get_device_descriptor+0x58>
				if (cfg_data->interface_config) {
   295fa:	68ab      	ldr	r3, [r5, #8]
   295fc:	2b00      	cmp	r3, #0
   295fe:	d0ea      	beq.n	295d6 <usb_get_device_descriptor+0x46>
					cfg_data->interface_config(head,
   29600:	4649      	mov	r1, r9
   29602:	4620      	mov	r0, r4
   29604:	4798      	blx	r3
   29606:	e7e6      	b.n	295d6 <usb_get_device_descriptor+0x46>
			if (!cfg_data) {
   29608:	2d00      	cmp	r5, #0
   2960a:	d0ef      	beq.n	295ec <usb_get_device_descriptor+0x5c>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
   2960c:	2300      	movs	r3, #0
   2960e:	2101      	movs	r1, #1
   29610:	7f2a      	ldrb	r2, [r5, #28]
   29612:	4293      	cmp	r3, r2
   29614:	d2ea      	bcs.n	295ec <usb_get_device_descriptor+0x5c>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
   29616:	6a2a      	ldr	r2, [r5, #32]
   29618:	78a7      	ldrb	r7, [r4, #2]
   2961a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   2961e:	7910      	ldrb	r0, [r2, #4]
   29620:	4287      	cmp	r7, r0
   29622:	d001      	beq.n	29628 <usb_get_device_descriptor+0x98>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
   29624:	3301      	adds	r3, #1
   29626:	e7f3      	b.n	29610 <usb_get_device_descriptor+0x80>
   29628:	2701      	movs	r7, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
   2962a:	78e0      	ldrb	r0, [r4, #3]
   2962c:	f000 0003 	and.w	r0, r0, #3
   29630:	f88d 000c 	strb.w	r0, [sp, #12]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
   29634:	7920      	ldrb	r0, [r4, #4]
   29636:	f894 c005 	ldrb.w	ip, [r4, #5]
   2963a:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
   2963e:	f8ad 000a 	strh.w	r0, [sp, #10]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   29642:	f994 0002 	ldrsb.w	r0, [r4, #2]
   29646:	2800      	cmp	r0, #0
   29648:	fa5f f887 	uxtb.w	r8, r7
   2964c:	da27      	bge.n	2969e <usb_get_device_descriptor+0x10e>
				if ((*requested_ep & (1U << (idx + 16U)))) {
   2964e:	f107 0010 	add.w	r0, r7, #16
   29652:	fa01 f000 	lsl.w	r0, r1, r0
   29656:	ea10 0f0b 	tst.w	r0, fp
   2965a:	d127      	bne.n	296ac <usb_get_device_descriptor+0x11c>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
   2965c:	f048 0080 	orr.w	r0, r8, #128	; 0x80
   29660:	f88d 0008 	strb.w	r0, [sp, #8]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
   29664:	a802      	add	r0, sp, #8
   29666:	e9cd 3200 	strd	r3, r2, [sp]
   2966a:	f01d fe0a 	bl	47282 <usb_dc_ep_check_cap>
   2966e:	e9dd 3200 	ldrd	r3, r2, [sp]
   29672:	2101      	movs	r1, #1
   29674:	b9d0      	cbnz	r0, 296ac <usb_get_device_descriptor+0x11c>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
   29676:	f89d 3008 	ldrb.w	r3, [sp, #8]
   2967a:	70a3      	strb	r3, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   2967c:	f013 0f80 	tst.w	r3, #128	; 0x80
					*requested_ep |= (1U << (idx + 16U));
   29680:	bf18      	it	ne
   29682:	f108 0810 	addne.w	r8, r8, #16
				ep_data[i].ep_addr = ep_cfg.ep_addr;
   29686:	7113      	strb	r3, [r2, #4]
					*requested_ep |= (1U << (idx + 16U));
   29688:	bf18      	it	ne
   2968a:	fa5f f888 	uxtbne.w	r8, r8
   2968e:	460b      	mov	r3, r1
					*requested_ep |= (1U << idx);
   29690:	bf0c      	ite	eq
   29692:	40bb      	lsleq	r3, r7
					*requested_ep |= (1U << (idx + 16U));
   29694:	fa01 f308 	lslne.w	r3, r1, r8
					*requested_ep |= (1U << idx);
   29698:	ea4b 0b03 	orr.w	fp, fp, r3
				return 0;
   2969c:	e793      	b.n	295c6 <usb_get_device_descriptor+0x36>
				if ((*requested_ep & (1U << (idx)))) {
   2969e:	fa01 f007 	lsl.w	r0, r1, r7
   296a2:	ea10 0f0b 	tst.w	r0, fp
   296a6:	d101      	bne.n	296ac <usb_get_device_descriptor+0x11c>
   296a8:	4640      	mov	r0, r8
   296aa:	e7d9      	b.n	29660 <usb_get_device_descriptor+0xd0>
		for (uint8_t idx = 1; idx < 16U; idx++) {
   296ac:	3701      	adds	r7, #1
   296ae:	2f10      	cmp	r7, #16
   296b0:	d1bb      	bne.n	2962a <usb_get_device_descriptor+0x9a>
   296b2:	e7b7      	b.n	29624 <usb_get_device_descriptor+0x94>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
   296b4:	2e03      	cmp	r6, #3
   296b6:	d11d      	bne.n	296f4 <usb_get_device_descriptor+0x164>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
   296b8:	f7ff ff26 	bl	29508 <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
   296bc:	4607      	mov	r7, r0
   296be:	b168      	cbz	r0, 296dc <usb_get_device_descriptor+0x14c>
	runtime_sn_len = strlen(runtime_sn);
   296c0:	f01a fdf3 	bl	442aa <strlen>
	if (!runtime_sn_len) {
   296c4:	4680      	mov	r8, r0
   296c6:	b148      	cbz	r0, 296dc <usb_get_device_descriptor+0x14c>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
   296c8:	481b      	ldr	r0, [pc, #108]	; (29738 <usb_get_device_descriptor+0x1a8>)
   296ca:	f01a fdee 	bl	442aa <strlen>
	if (runtime_sn_len != default_sn_len) {
   296ce:	4580      	cmp	r8, r0
   296d0:	d104      	bne.n	296dc <usb_get_device_descriptor+0x14c>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
   296d2:	4642      	mov	r2, r8
   296d4:	4639      	mov	r1, r7
   296d6:	1ca0      	adds	r0, r4, #2
   296d8:	f01a fe1e 	bl	44318 <memcpy>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
   296dc:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
   296de:	f06f 0102 	mvn.w	r1, #2
   296e2:	18e2      	adds	r2, r4, r3
   296e4:	1b09      	subs	r1, r1, r4
   296e6:	eb04 0353 	add.w	r3, r4, r3, lsr #1
   296ea:	42d1      	cmn	r1, r2
   296ec:	d513      	bpl.n	29716 <usb_get_device_descriptor+0x186>
			str_descr_idx += 1U;
   296ee:	3601      	adds	r6, #1
   296f0:	b2f6      	uxtb	r6, r6
			break;
   296f2:	e768      	b.n	295c6 <usb_get_device_descriptor+0x36>
			if (str_descr_idx) {
   296f4:	2e00      	cmp	r6, #0
   296f6:	d1f1      	bne.n	296dc <usb_get_device_descriptor+0x14c>
				if (!cfg_descr) {
   296f8:	f1ba 0f00 	cmp.w	sl, #0
   296fc:	f43f af76 	beq.w	295ec <usb_get_device_descriptor+0x5c>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
   29700:	eba4 030a 	sub.w	r3, r4, sl
	dst[0] = val;
   29704:	f88a 3002 	strb.w	r3, [sl, #2]
	dst[1] = val >> 8;
   29708:	f3c3 2307 	ubfx	r3, r3, #8, #8
   2970c:	f88a 3003 	strb.w	r3, [sl, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
   29710:	f88a 9004 	strb.w	r9, [sl, #4]
   29714:	e7eb      	b.n	296ee <usb_get_device_descriptor+0x15e>
		buf[i] = 0U;
   29716:	f04f 0000 	mov.w	r0, #0
   2971a:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
   2971e:	f813 0901 	ldrb.w	r0, [r3], #-1
   29722:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
   29726:	e7e0      	b.n	296ea <usb_get_device_descriptor+0x15a>
   29728:	20000ea4 	.word	0x20000ea4
   2972c:	20000f01 	.word	0x20000f01
   29730:	20000f01 	.word	0x20000f01
   29734:	20000f01 	.word	0x20000f01
   29738:	0004a690 	.word	0x0004a690

0002973c <usb_ep_get_transfer>:
/** Max number of parallel transfers */
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
   2973c:	b510      	push	{r4, lr}
   2973e:	4b09      	ldr	r3, [pc, #36]	; (29764 <usb_ep_get_transfer+0x28>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   29740:	2100      	movs	r1, #0
   29742:	461a      	mov	r2, r3
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
   29744:	781c      	ldrb	r4, [r3, #0]
   29746:	4284      	cmp	r4, r0
   29748:	d105      	bne.n	29756 <usb_ep_get_transfer+0x1a>
   2974a:	685c      	ldr	r4, [r3, #4]
   2974c:	b11c      	cbz	r4, 29756 <usb_ep_get_transfer+0x1a>
			return &ut_data[i];
   2974e:	2348      	movs	r3, #72	; 0x48
   29750:	fb03 2001 	mla	r0, r3, r1, r2
		}
	}

	return NULL;
}
   29754:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   29756:	3101      	adds	r1, #1
   29758:	2904      	cmp	r1, #4
   2975a:	f103 0348 	add.w	r3, r3, #72	; 0x48
   2975e:	d1f1      	bne.n	29744 <usb_ep_get_transfer+0x8>
	return NULL;
   29760:	2000      	movs	r0, #0
   29762:	e7f7      	b.n	29754 <usb_ep_get_transfer+0x18>
   29764:	20001b40 	.word	0x20001b40

00029768 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
   29768:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
   2976c:	f850 3c30 	ldr.w	r3, [r0, #-48]
	ep = trans->ep;
   29770:	f810 6c34 	ldrb.w	r6, [r0, #-52]
	if (trans->status != -EBUSY) {
   29774:	3310      	adds	r3, #16
{
   29776:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
   29778:	d110      	bne.n	2979c <usb_transfer_work+0x34>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
   2977a:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
   2977c:	f850 2c28 	ldr.w	r2, [r0, #-40]
	if (trans->flags & USB_TRANS_WRITE) {
   29780:	0799      	lsls	r1, r3, #30
   29782:	d53c      	bpl.n	297fe <usb_transfer_work+0x96>
		if (!trans->bsize) {
   29784:	bb02      	cbnz	r2, 297c8 <usb_transfer_work+0x60>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
   29786:	f013 0304 	ands.w	r3, r3, #4
   2978a:	d104      	bne.n	29796 <usb_transfer_work+0x2e>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
   2978c:	461a      	mov	r2, r3
   2978e:	4619      	mov	r1, r3
   29790:	4630      	mov	r0, r6
   29792:	f019 f9f5 	bl	42b80 <usb_write>
			}
			trans->status = 0;
   29796:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
   29798:	f844 3c30 	str.w	r3, [r4, #-48]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
   2979c:	f854 3c30 	ldr.w	r3, [r4, #-48]
   297a0:	3310      	adds	r3, #16
   297a2:	d00e      	beq.n	297c2 <usb_transfer_work+0x5a>
   297a4:	f854 5c20 	ldr.w	r5, [r4, #-32]
   297a8:	b15d      	cbz	r5, 297c2 <usb_transfer_work+0x5a>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
   297aa:	f854 7c24 	ldr.w	r7, [r4, #-36]
		void *priv = trans->priv;
   297ae:	f854 8c1c 	ldr.w	r8, [r4, #-28]

		if (k_is_in_isr()) {
   297b2:	f01e fb97 	bl	47ee4 <k_is_in_isr>
   297b6:	2800      	cmp	r0, #0
   297b8:	d04c      	beq.n	29854 <usb_transfer_work+0xec>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   297ba:	482e      	ldr	r0, [pc, #184]	; (29874 <usb_transfer_work+0x10c>)
   297bc:	4621      	mov	r1, r4
   297be:	f01e fd53 	bl	48268 <k_work_submit_to_queue>
		/* Transfer completion callback */
		if (trans->status != -ECANCELED) {
			cb(ep, tsize, priv);
		}
	}
}
   297c2:	b002      	add	sp, #8
   297c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
   297c8:	f850 1c2c 	ldr.w	r1, [r0, #-44]
   297cc:	ab01      	add	r3, sp, #4
   297ce:	4630      	mov	r0, r6
   297d0:	f019 f9d6 	bl	42b80 <usb_write>
		if (ret) {
   297d4:	b110      	cbz	r0, 297dc <usb_transfer_work+0x74>
			trans->status = -EINVAL;
   297d6:	f06f 0315 	mvn.w	r3, #21
   297da:	e7dd      	b.n	29798 <usb_transfer_work+0x30>
		trans->buffer += bytes;
   297dc:	9a01      	ldr	r2, [sp, #4]
   297de:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   297e2:	4413      	add	r3, r2
   297e4:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
   297e8:	f854 3c28 	ldr.w	r3, [r4, #-40]
   297ec:	1a9b      	subs	r3, r3, r2
   297ee:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
   297f2:	f854 3c24 	ldr.w	r3, [r4, #-36]
   297f6:	4413      	add	r3, r2
   297f8:	f844 3c24 	str.w	r3, [r4, #-36]
   297fc:	e7ce      	b.n	2979c <usb_transfer_work+0x34>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
   297fe:	f850 1c2c 	ldr.w	r1, [r0, #-44]
   29802:	ab01      	add	r3, sp, #4
   29804:	4630      	mov	r0, r6
   29806:	f013 fac1 	bl	3cd8c <usb_dc_ep_read_wait>
		if (ret) {
   2980a:	2800      	cmp	r0, #0
   2980c:	d1e3      	bne.n	297d6 <usb_transfer_work+0x6e>
		trans->buffer += bytes;
   2980e:	9d01      	ldr	r5, [sp, #4]
   29810:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   29814:	442b      	add	r3, r5
   29816:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
   2981a:	f854 3c28 	ldr.w	r3, [r4, #-40]
   2981e:	1b5b      	subs	r3, r3, r5
   29820:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
   29824:	f854 3c24 	ldr.w	r3, [r4, #-36]
   29828:	442b      	add	r3, r5
   2982a:	f844 3c24 	str.w	r3, [r4, #-36]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
   2982e:	2d00      	cmp	r5, #0
   29830:	d0b1      	beq.n	29796 <usb_transfer_work+0x2e>
   29832:	4630      	mov	r0, r6
   29834:	f013 fb4e 	bl	3ced4 <usb_dc_ep_mps>
   29838:	fbb5 f3f0 	udiv	r3, r5, r0
   2983c:	fb03 5510 	mls	r5, r3, r0, r5
   29840:	2d00      	cmp	r5, #0
   29842:	d1a8      	bne.n	29796 <usb_transfer_work+0x2e>
   29844:	f854 3c28 	ldr.w	r3, [r4, #-40]
   29848:	2b00      	cmp	r3, #0
   2984a:	d0a4      	beq.n	29796 <usb_transfer_work+0x2e>
		usb_dc_ep_read_continue(ep);
   2984c:	4630      	mov	r0, r6
   2984e:	f013 fae5 	bl	3ce1c <usb_dc_ep_read_continue>
   29852:	e7a3      	b.n	2979c <usb_transfer_work+0x34>
		trans->cb = NULL;
   29854:	f844 0c20 	str.w	r0, [r4, #-32]
	z_impl_k_sem_give(sem);
   29858:	f1a4 0018 	sub.w	r0, r4, #24
   2985c:	f017 f984 	bl	40b68 <z_impl_k_sem_give>
		if (trans->status != -ECANCELED) {
   29860:	f854 3c30 	ldr.w	r3, [r4, #-48]
   29864:	338c      	adds	r3, #140	; 0x8c
   29866:	d0ac      	beq.n	297c2 <usb_transfer_work+0x5a>
			cb(ep, tsize, priv);
   29868:	4642      	mov	r2, r8
   2986a:	4639      	mov	r1, r7
   2986c:	4630      	mov	r0, r6
   2986e:	47a8      	blx	r5
   29870:	e7a7      	b.n	297c2 <usb_transfer_work+0x5a>
   29872:	bf00      	nop
   29874:	200019c0 	.word	0x200019c0

00029878 <usb_cancel_transfer>:
	irq_unlock(key);
	return ret;
}

void usb_cancel_transfer(uint8_t ep)
{
   29878:	b510      	push	{r4, lr}
   2987a:	f04f 0320 	mov.w	r3, #32
   2987e:	f3ef 8411 	mrs	r4, BASEPRI
   29882:	f383 8812 	msr	BASEPRI_MAX, r3
   29886:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
   2988a:	f7ff ff57 	bl	2973c <usb_ep_get_transfer>
	if (!trans) {
   2988e:	b150      	cbz	r0, 298a6 <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
   29890:	6843      	ldr	r3, [r0, #4]
   29892:	3310      	adds	r3, #16
   29894:	d107      	bne.n	298a6 <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
   29896:	f06f 038b 	mvn.w	r3, #139	; 0x8b
   2989a:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   2989c:	f100 0134 	add.w	r1, r0, #52	; 0x34
   298a0:	4803      	ldr	r0, [pc, #12]	; (298b0 <usb_cancel_transfer+0x38>)
   298a2:	f01e fce1 	bl	48268 <k_work_submit_to_queue>
	__asm__ volatile(
   298a6:	f384 8811 	msr	BASEPRI, r4
   298aa:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
   298ae:	bd10      	pop	{r4, pc}
   298b0:	200019c0 	.word	0x200019c0

000298b4 <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
   298b4:	b570      	push	{r4, r5, r6, lr}
   298b6:	4c0f      	ldr	r4, [pc, #60]	; (298f4 <usb_cancel_transfers+0x40>)
   298b8:	2504      	movs	r5, #4
	__asm__ volatile(
   298ba:	f04f 0320 	mov.w	r3, #32
   298be:	f3ef 8611 	mrs	r6, BASEPRI
   298c2:	f383 8812 	msr	BASEPRI_MAX, r3
   298c6:	f3bf 8f6f 	isb	sy
		struct usb_transfer_data *trans = &ut_data[i];
		unsigned int key;

		key = irq_lock();

		if (trans->status == -EBUSY) {
   298ca:	6863      	ldr	r3, [r4, #4]
   298cc:	3310      	adds	r3, #16
   298ce:	d107      	bne.n	298e0 <usb_cancel_transfers+0x2c>
			trans->status = -ECANCELED;
   298d0:	f06f 038b 	mvn.w	r3, #139	; 0x8b
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   298d4:	4808      	ldr	r0, [pc, #32]	; (298f8 <usb_cancel_transfers+0x44>)
			trans->status = -ECANCELED;
   298d6:	6063      	str	r3, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   298d8:	f104 0134 	add.w	r1, r4, #52	; 0x34
   298dc:	f01e fcc4 	bl	48268 <k_work_submit_to_queue>
	__asm__ volatile(
   298e0:	f386 8811 	msr	BASEPRI, r6
   298e4:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   298e8:	3d01      	subs	r5, #1
   298ea:	f104 0448 	add.w	r4, r4, #72	; 0x48
   298ee:	d1e4      	bne.n	298ba <usb_cancel_transfers+0x6>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
   298f0:	bd70      	pop	{r4, r5, r6, pc}
   298f2:	bf00      	nop
   298f4:	20001b40 	.word	0x20001b40
   298f8:	200019c0 	.word	0x200019c0

000298fc <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
   298fc:	b570      	push	{r4, r5, r6, lr}
   298fe:	4c0a      	ldr	r4, [pc, #40]	; (29928 <usb_transfer_init+0x2c>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
		k_work_init(&ut_data[i].work, usb_transfer_work);
   29900:	4e0a      	ldr	r6, [pc, #40]	; (2992c <usb_transfer_init+0x30>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   29902:	2500      	movs	r5, #0
		k_work_init(&ut_data[i].work, usb_transfer_work);
   29904:	4631      	mov	r1, r6
   29906:	4620      	mov	r0, r4
   29908:	f01e fc81 	bl	4820e <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
   2990c:	2201      	movs	r2, #1
   2990e:	f1a4 0018 	sub.w	r0, r4, #24
   29912:	4611      	mov	r1, r2
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   29914:	3501      	adds	r5, #1
   29916:	f01e fbf8 	bl	4810a <z_impl_k_sem_init>
   2991a:	2d04      	cmp	r5, #4
   2991c:	f104 0448 	add.w	r4, r4, #72	; 0x48
   29920:	d1f0      	bne.n	29904 <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
   29922:	2000      	movs	r0, #0
   29924:	bd70      	pop	{r4, r5, r6, pc}
   29926:	bf00      	nop
   29928:	20001b74 	.word	0x20001b74
   2992c:	00029769 	.word	0x00029769

00029930 <flash_area_open>:
		user_cb(&flash_map[i], user_data);
	}
}

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
   29930:	b570      	push	{r4, r5, r6, lr}
	const struct flash_area *area;

	if (flash_map == NULL) {
   29932:	4b11      	ldr	r3, [pc, #68]	; (29978 <flash_area_open+0x48>)
   29934:	681c      	ldr	r4, [r3, #0]
{
   29936:	460d      	mov	r5, r1
	if (flash_map == NULL) {
   29938:	b1dc      	cbz	r4, 29972 <flash_area_open+0x42>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   2993a:	4b10      	ldr	r3, [pc, #64]	; (2997c <flash_area_open+0x4c>)
   2993c:	6819      	ldr	r1, [r3, #0]
   2993e:	2300      	movs	r3, #0
   29940:	428b      	cmp	r3, r1
   29942:	db02      	blt.n	2994a <flash_area_open+0x1a>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
   29944:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;

	return 0;
}
   29948:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
   2994a:	4622      	mov	r2, r4
   2994c:	f812 6b10 	ldrb.w	r6, [r2], #16
   29950:	4286      	cmp	r6, r0
   29952:	d002      	beq.n	2995a <flash_area_open+0x2a>
	for (int i = 0; i < flash_map_entries; i++) {
   29954:	3301      	adds	r3, #1
   29956:	4614      	mov	r4, r2
   29958:	e7f2      	b.n	29940 <flash_area_open+0x10>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
   2995a:	68e0      	ldr	r0, [r4, #12]
   2995c:	b910      	cbnz	r0, 29964 <flash_area_open+0x34>
		return -ENODEV;
   2995e:	f06f 0012 	mvn.w	r0, #18
   29962:	e7f1      	b.n	29948 <flash_area_open+0x18>
   29964:	f01e f9d8 	bl	47d18 <z_device_is_ready>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
   29968:	2800      	cmp	r0, #0
   2996a:	d0f8      	beq.n	2995e <flash_area_open+0x2e>
	*fap = area;
   2996c:	602c      	str	r4, [r5, #0]
	return 0;
   2996e:	2000      	movs	r0, #0
   29970:	e7ea      	b.n	29948 <flash_area_open+0x18>
		return -EACCES;
   29972:	f06f 000c 	mvn.w	r0, #12
   29976:	e7e7      	b.n	29948 <flash_area_open+0x18>
   29978:	20000354 	.word	0x20000354
   2997c:	0004921c 	.word	0x0004921c

00029980 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   29980:	b570      	push	{r4, r5, r6, lr}
   29982:	b088      	sub	sp, #32
   29984:	4605      	mov	r5, r0
   29986:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
   29988:	b2c0      	uxtb	r0, r0
   2998a:	4669      	mov	r1, sp
{
   2998c:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
   2998e:	f7ff ffcf 	bl	29930 <flash_area_open>
	if (rc < 0 || fa == NULL) {
   29992:	2800      	cmp	r0, #0
   29994:	db1b      	blt.n	299ce <flash_area_get_sectors+0x4e>
   29996:	9800      	ldr	r0, [sp, #0]
   29998:	b1c8      	cbz	r0, 299ce <flash_area_get_sectors+0x4e>
	cb_data->area_off = fa->fa_off;
   2999a:	6843      	ldr	r3, [r0, #4]
   2999c:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
   2999e:	6883      	ldr	r3, [r0, #8]
	cb_data->ret_len = *cnt;
   299a0:	6822      	ldr	r2, [r4, #0]
	cb_data->area_idx = idx;
   299a2:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
   299a4:	e9cd 3603 	strd	r3, r6, [sp, #12]
	cb_data->ret_idx = 0U;
   299a8:	2300      	movs	r3, #0
	cb_data->status = 0;
   299aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
   299ae:	9305      	str	r3, [sp, #20]
	flash_dev = fa->fa_dev;
   299b0:	68c5      	ldr	r5, [r0, #12]
	flash_area_close(fa);
   299b2:	f019 f8fd 	bl	42bb0 <flash_area_close>
	if (flash_dev == NULL) {
   299b6:	b16d      	cbz	r5, 299d4 <flash_area_get_sectors+0x54>
	flash_page_foreach(flash_dev, cb, cb_data);
   299b8:	4628      	mov	r0, r5
   299ba:	4908      	ldr	r1, [pc, #32]	; (299dc <flash_area_get_sectors+0x5c>)
   299bc:	aa01      	add	r2, sp, #4
   299be:	f01d fdfd 	bl	475bc <flash_page_foreach>
	if (cb_data->status == 0) {
   299c2:	9807      	ldr	r0, [sp, #28]
   299c4:	b908      	cbnz	r0, 299ca <flash_area_get_sectors+0x4a>
		*cnt = cb_data->ret_idx;
   299c6:	9b05      	ldr	r3, [sp, #20]
   299c8:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   299ca:	b008      	add	sp, #32
   299cc:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   299ce:	f06f 0015 	mvn.w	r0, #21
   299d2:	e7fa      	b.n	299ca <flash_area_get_sectors+0x4a>
		return -ENODEV;
   299d4:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   299d8:	e7f7      	b.n	299ca <flash_area_get_sectors+0x4a>
   299da:	bf00      	nop
   299dc:	00042bb3 	.word	0x00042bb3

000299e0 <settings_save_one>:

/*
 * Append a single value to persisted config. Don't store duplicate value.
 */
int settings_save_one(const char *name, const void *value, size_t val_len)
{
   299e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   299e4:	4b0f      	ldr	r3, [pc, #60]	; (29a24 <settings_save_one+0x44>)
   299e6:	681c      	ldr	r4, [r3, #0]
{
   299e8:	4605      	mov	r5, r0
   299ea:	460e      	mov	r6, r1
   299ec:	4617      	mov	r7, r2
	if (!cs) {
   299ee:	b1ac      	cbz	r4, 29a1c <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   299f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   299f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   299f8:	480b      	ldr	r0, [pc, #44]	; (29a28 <settings_save_one+0x48>)
   299fa:	f016 ffcb 	bl	40994 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   299fe:	6863      	ldr	r3, [r4, #4]
   29a00:	4632      	mov	r2, r6
   29a02:	f8d3 8008 	ldr.w	r8, [r3, #8]
   29a06:	4629      	mov	r1, r5
   29a08:	463b      	mov	r3, r7
   29a0a:	4620      	mov	r0, r4
   29a0c:	47c0      	blx	r8
   29a0e:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   29a10:	4805      	ldr	r0, [pc, #20]	; (29a28 <settings_save_one+0x48>)
   29a12:	f017 f839 	bl	40a88 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   29a16:	4620      	mov	r0, r4
   29a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   29a1c:	f06f 0401 	mvn.w	r4, #1
   29a20:	e7f9      	b.n	29a16 <settings_save_one+0x36>
   29a22:	bf00      	nop
   29a24:	20001c60 	.word	0x20001c60
   29a28:	20000cb4 	.word	0x20000cb4

00029a2c <settings_src_register>:
	parent->next = child;
   29a2c:	2300      	movs	r3, #0
   29a2e:	6003      	str	r3, [r0, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   29a30:	4b04      	ldr	r3, [pc, #16]	; (29a44 <settings_src_register+0x18>)
   29a32:	685a      	ldr	r2, [r3, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   29a34:	b912      	cbnz	r2, 29a3c <settings_src_register+0x10>
	list->head = node;
   29a36:	e9c3 0000 	strd	r0, r0, [r3]
}
   29a3a:	4770      	bx	lr
	parent->next = child;
   29a3c:	6010      	str	r0, [r2, #0]
	list->tail = node;
   29a3e:	6058      	str	r0, [r3, #4]
}
   29a40:	4770      	bx	lr
   29a42:	bf00      	nop
   29a44:	20001c64 	.word	0x20001c64

00029a48 <settings_dst_register>:
	settings_save_dst = cs;
   29a48:	4b01      	ldr	r3, [pc, #4]	; (29a50 <settings_dst_register+0x8>)
   29a4a:	6018      	str	r0, [r3, #0]
}
   29a4c:	4770      	bx	lr
   29a4e:	bf00      	nop
   29a50:	20001c60 	.word	0x20001c60

00029a54 <settings_load_subtree>:
{
   29a54:	b530      	push	{r4, r5, lr}
   29a56:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
   29a58:	2300      	movs	r3, #0
{
   29a5a:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   29a5c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   29a60:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   29a62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29a66:	480c      	ldr	r0, [pc, #48]	; (29a98 <settings_load_subtree+0x44>)
   29a68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29a6c:	f016 ff92 	bl	40994 <z_impl_k_mutex_lock>
	return list->head;
   29a70:	4b0a      	ldr	r3, [pc, #40]	; (29a9c <settings_load_subtree+0x48>)
   29a72:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   29a74:	b94c      	cbnz	r4, 29a8a <settings_load_subtree+0x36>
	rc = settings_commit_subtree(subtree);
   29a76:	4628      	mov	r0, r5
   29a78:	f000 f8ce 	bl	29c18 <settings_commit_subtree>
   29a7c:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   29a7e:	4806      	ldr	r0, [pc, #24]	; (29a98 <settings_load_subtree+0x44>)
   29a80:	f017 f802 	bl	40a88 <z_impl_k_mutex_unlock>
}
   29a84:	4620      	mov	r0, r4
   29a86:	b005      	add	sp, #20
   29a88:	bd30      	pop	{r4, r5, pc}
		cs->cs_itf->csi_load(cs, &arg);
   29a8a:	6863      	ldr	r3, [r4, #4]
   29a8c:	4620      	mov	r0, r4
   29a8e:	681b      	ldr	r3, [r3, #0]
   29a90:	a901      	add	r1, sp, #4
   29a92:	4798      	blx	r3
	return node->next;
   29a94:	6824      	ldr	r4, [r4, #0]
   29a96:	e7ed      	b.n	29a74 <settings_load_subtree+0x20>
   29a98:	20000cb4 	.word	0x20000cb4
   29a9c:	20001c64 	.word	0x20001c64

00029aa0 <settings_load_subtree_direct>:
{
   29aa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
   29aa2:	e9cd 0101 	strd	r0, r1, [sp, #4]
   29aa6:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   29aa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29aac:	480a      	ldr	r0, [pc, #40]	; (29ad8 <settings_load_subtree_direct+0x38>)
   29aae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29ab2:	f016 ff6f 	bl	40994 <z_impl_k_mutex_lock>
	return list->head;
   29ab6:	4b09      	ldr	r3, [pc, #36]	; (29adc <settings_load_subtree_direct+0x3c>)
   29ab8:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   29aba:	b92c      	cbnz	r4, 29ac8 <settings_load_subtree_direct+0x28>
	return z_impl_k_mutex_unlock(mutex);
   29abc:	4806      	ldr	r0, [pc, #24]	; (29ad8 <settings_load_subtree_direct+0x38>)
   29abe:	f016 ffe3 	bl	40a88 <z_impl_k_mutex_unlock>
}
   29ac2:	4620      	mov	r0, r4
   29ac4:	b004      	add	sp, #16
   29ac6:	bd10      	pop	{r4, pc}
		cs->cs_itf->csi_load(cs, &arg);
   29ac8:	6863      	ldr	r3, [r4, #4]
   29aca:	4620      	mov	r0, r4
   29acc:	681b      	ldr	r3, [r3, #0]
   29ace:	a901      	add	r1, sp, #4
   29ad0:	4798      	blx	r3
	return node->next;
   29ad2:	6824      	ldr	r4, [r4, #0]
   29ad4:	e7f1      	b.n	29aba <settings_load_subtree_direct+0x1a>
   29ad6:	bf00      	nop
   29ad8:	20000cb4 	.word	0x20000cb4
   29adc:	20001c64 	.word	0x20001c64

00029ae0 <settings_store_init>:
	list->head = NULL;
   29ae0:	4b02      	ldr	r3, [pc, #8]	; (29aec <settings_store_init+0xc>)
   29ae2:	2200      	movs	r2, #0
	list->tail = NULL;
   29ae4:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   29ae8:	4770      	bx	lr
   29aea:	bf00      	nop
   29aec:	20001c64 	.word	0x20001c64

00029af0 <settings_init>:
	list->head = NULL;
   29af0:	4b02      	ldr	r3, [pc, #8]	; (29afc <settings_init+0xc>)
   29af2:	2200      	movs	r2, #0
	list->tail = NULL;
   29af4:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   29af8:	f7ff bff2 	b.w	29ae0 <settings_store_init>
   29afc:	20001c6c 	.word	0x20001c6c

00029b00 <settings_register>:
}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
int settings_register(struct settings_handler *handler)
{
   29b00:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   29b02:	4c1b      	ldr	r4, [pc, #108]	; (29b70 <settings_register+0x70>)
   29b04:	4e1b      	ldr	r6, [pc, #108]	; (29b74 <settings_register+0x74>)
{
   29b06:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   29b08:	42b4      	cmp	r4, r6
   29b0a:	d312      	bcc.n	29b32 <settings_register+0x32>
	return list->head;
   29b0c:	4e1a      	ldr	r6, [pc, #104]	; (29b78 <settings_register+0x78>)
	return z_impl_k_mutex_lock(mutex, timeout);
   29b0e:	481b      	ldr	r0, [pc, #108]	; (29b7c <settings_register+0x7c>)
   29b10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29b14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29b18:	f016 ff3c 	bl	40994 <z_impl_k_mutex_lock>
   29b1c:	6834      	ldr	r4, [r6, #0]
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   29b1e:	b17c      	cbz	r4, 29b40 <settings_register+0x40>
		if (strcmp(handler->name, ch->name) == 0) {
   29b20:	6828      	ldr	r0, [r5, #0]
   29b22:	f854 1c14 	ldr.w	r1, [r4, #-20]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   29b26:	3c14      	subs	r4, #20
		if (strcmp(handler->name, ch->name) == 0) {
   29b28:	f01a fbc6 	bl	442b8 <strcmp>
   29b2c:	b1c8      	cbz	r0, 29b62 <settings_register+0x62>
	return node->next;
   29b2e:	6964      	ldr	r4, [r4, #20]
   29b30:	e7f5      	b.n	29b1e <settings_register+0x1e>
		if (strcmp(handler->name, ch->name) == 0) {
   29b32:	6821      	ldr	r1, [r4, #0]
   29b34:	6828      	ldr	r0, [r5, #0]
   29b36:	f01a fbbf 	bl	442b8 <strcmp>
   29b3a:	b1a8      	cbz	r0, 29b68 <settings_register+0x68>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   29b3c:	3414      	adds	r4, #20
   29b3e:	e7e3      	b.n	29b08 <settings_register+0x8>
	parent->next = child;
   29b40:	2200      	movs	r2, #0
   29b42:	616a      	str	r2, [r5, #20]
	return list->tail;
   29b44:	6872      	ldr	r2, [r6, #4]
			rc = -EEXIST;
			goto end;
		}
	}
	sys_slist_append(&settings_handlers, &handler->node);
   29b46:	f105 0314 	add.w	r3, r5, #20
Z_GENLIST_APPEND(slist, snode)
   29b4a:	b93a      	cbnz	r2, 29b5c <settings_register+0x5c>
	list->head = node;
   29b4c:	e9c6 3300 	strd	r3, r3, [r6]
	int rc = 0;
   29b50:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
   29b52:	480a      	ldr	r0, [pc, #40]	; (29b7c <settings_register+0x7c>)
   29b54:	f016 ff98 	bl	40a88 <z_impl_k_mutex_unlock>

end:
	k_mutex_unlock(&settings_lock);
	return rc;
}
   29b58:	4620      	mov	r0, r4
   29b5a:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   29b5c:	6013      	str	r3, [r2, #0]
	list->tail = node;
   29b5e:	6073      	str	r3, [r6, #4]
}
   29b60:	e7f6      	b.n	29b50 <settings_register+0x50>
			rc = -EEXIST;
   29b62:	f06f 0410 	mvn.w	r4, #16
   29b66:	e7f4      	b.n	29b52 <settings_register+0x52>
			return -EEXIST;
   29b68:	f06f 0410 	mvn.w	r4, #16
   29b6c:	e7f4      	b.n	29b58 <settings_register+0x58>
   29b6e:	bf00      	nop
   29b70:	00048de0 	.word	0x00048de0
   29b74:	00048e58 	.word	0x00048e58
   29b78:	20001c6c 	.word	0x20001c6c
   29b7c:	20000cb4 	.word	0x20000cb4

00029b80 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   29b80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   29b84:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   29b86:	460c      	mov	r4, r1
   29b88:	b109      	cbz	r1, 29b8e <settings_parse_and_lookup+0xe>
		*next = NULL;
   29b8a:	2300      	movs	r3, #0
   29b8c:	600b      	str	r3, [r1, #0]
{
   29b8e:	4d1f      	ldr	r5, [pc, #124]	; (29c0c <settings_parse_and_lookup+0x8c>)
	}

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   29b90:	f8df 907c 	ldr.w	r9, [pc, #124]	; 29c10 <settings_parse_and_lookup+0x90>
{
   29b94:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   29b96:	454d      	cmp	r5, r9
   29b98:	d30f      	bcc.n	29bba <settings_parse_and_lookup+0x3a>
	return list->head;
   29b9a:	4b1e      	ldr	r3, [pc, #120]	; (29c14 <settings_parse_and_lookup+0x94>)
   29b9c:	681d      	ldr	r5, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   29b9e:	b385      	cbz	r5, 29c02 <settings_parse_and_lookup+0x82>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   29ba0:	f855 8c14 	ldr.w	r8, [r5, #-20]
   29ba4:	aa01      	add	r2, sp, #4
   29ba6:	4641      	mov	r1, r8
   29ba8:	4638      	mov	r0, r7
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   29baa:	3d14      	subs	r5, #20
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   29bac:	f019 f827 	bl	42bfe <settings_name_steq>
   29bb0:	b310      	cbz	r0, 29bf8 <settings_parse_and_lookup+0x78>
			continue;
		}
		if (!bestmatch) {
   29bb2:	b9d6      	cbnz	r6, 29bea <settings_parse_and_lookup+0x6a>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
   29bb4:	bb14      	cbnz	r4, 29bfc <settings_parse_and_lookup+0x7c>
{
   29bb6:	462e      	mov	r6, r5
   29bb8:	e01e      	b.n	29bf8 <settings_parse_and_lookup+0x78>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   29bba:	f8d5 8000 	ldr.w	r8, [r5]
   29bbe:	aa01      	add	r2, sp, #4
   29bc0:	4641      	mov	r1, r8
   29bc2:	4638      	mov	r0, r7
   29bc4:	f019 f81b 	bl	42bfe <settings_name_steq>
   29bc8:	b150      	cbz	r0, 29be0 <settings_parse_and_lookup+0x60>
		if (!bestmatch) {
   29bca:	b916      	cbnz	r6, 29bd2 <settings_parse_and_lookup+0x52>
			if (next) {
   29bcc:	b954      	cbnz	r4, 29be4 <settings_parse_and_lookup+0x64>
{
   29bce:	462e      	mov	r6, r5
   29bd0:	e006      	b.n	29be0 <settings_parse_and_lookup+0x60>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   29bd2:	6831      	ldr	r1, [r6, #0]
   29bd4:	2200      	movs	r2, #0
   29bd6:	4640      	mov	r0, r8
   29bd8:	f019 f811 	bl	42bfe <settings_name_steq>
   29bdc:	2800      	cmp	r0, #0
   29bde:	d1f5      	bne.n	29bcc <settings_parse_and_lookup+0x4c>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   29be0:	3514      	adds	r5, #20
   29be2:	e7d8      	b.n	29b96 <settings_parse_and_lookup+0x16>
				*next = tmpnext;
   29be4:	9b01      	ldr	r3, [sp, #4]
   29be6:	6023      	str	r3, [r4, #0]
   29be8:	e7f1      	b.n	29bce <settings_parse_and_lookup+0x4e>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   29bea:	6831      	ldr	r1, [r6, #0]
   29bec:	2200      	movs	r2, #0
   29bee:	4640      	mov	r0, r8
   29bf0:	f019 f805 	bl	42bfe <settings_name_steq>
   29bf4:	2800      	cmp	r0, #0
   29bf6:	d1dd      	bne.n	29bb4 <settings_parse_and_lookup+0x34>
	return node->next;
   29bf8:	696d      	ldr	r5, [r5, #20]
   29bfa:	e7d0      	b.n	29b9e <settings_parse_and_lookup+0x1e>
				*next = tmpnext;
   29bfc:	9b01      	ldr	r3, [sp, #4]
   29bfe:	6023      	str	r3, [r4, #0]
   29c00:	e7d9      	b.n	29bb6 <settings_parse_and_lookup+0x36>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   29c02:	4630      	mov	r0, r6
   29c04:	b003      	add	sp, #12
   29c06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   29c0a:	bf00      	nop
   29c0c:	00048de0 	.word	0x00048de0
   29c10:	00048e58 	.word	0x00048e58
   29c14:	20001c6c 	.word	0x20001c6c

00029c18 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   29c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc;
	int rc2;

	rc = 0;

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   29c1a:	4c18      	ldr	r4, [pc, #96]	; (29c7c <settings_commit_subtree+0x64>)
   29c1c:	4f18      	ldr	r7, [pc, #96]	; (29c80 <settings_commit_subtree+0x68>)
{
   29c1e:	4606      	mov	r6, r0
	rc = 0;
   29c20:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   29c22:	42bc      	cmp	r4, r7
   29c24:	d308      	bcc.n	29c38 <settings_commit_subtree+0x20>
	return list->head;
   29c26:	4b17      	ldr	r3, [pc, #92]	; (29c84 <settings_commit_subtree+0x6c>)
   29c28:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   29c2a:	b32c      	cbz	r4, 29c78 <settings_commit_subtree+0x60>
   29c2c:	3c14      	subs	r4, #20
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   29c2e:	b9b6      	cbnz	r6, 29c5e <settings_commit_subtree+0x46>
			continue;
		}
		if (ch->h_commit) {
   29c30:	68e3      	ldr	r3, [r4, #12]
   29c32:	b9e3      	cbnz	r3, 29c6e <settings_commit_subtree+0x56>
	return node->next;
   29c34:	6964      	ldr	r4, [r4, #20]
   29c36:	e7f8      	b.n	29c2a <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   29c38:	b92e      	cbnz	r6, 29c46 <settings_commit_subtree+0x2e>
		if (ch->h_commit) {
   29c3a:	68e3      	ldr	r3, [r4, #12]
   29c3c:	b95b      	cbnz	r3, 29c56 <settings_commit_subtree+0x3e>
{
   29c3e:	4628      	mov	r0, r5
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   29c40:	3414      	adds	r4, #20
   29c42:	4605      	mov	r5, r0
   29c44:	e7ed      	b.n	29c22 <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   29c46:	6820      	ldr	r0, [r4, #0]
   29c48:	2200      	movs	r2, #0
   29c4a:	4631      	mov	r1, r6
   29c4c:	f018 ffd7 	bl	42bfe <settings_name_steq>
   29c50:	2800      	cmp	r0, #0
   29c52:	d1f2      	bne.n	29c3a <settings_commit_subtree+0x22>
   29c54:	e7f3      	b.n	29c3e <settings_commit_subtree+0x26>
			rc2 = ch->h_commit();
   29c56:	4798      	blx	r3
			if (!rc) {
   29c58:	2d00      	cmp	r5, #0
   29c5a:	d1f0      	bne.n	29c3e <settings_commit_subtree+0x26>
   29c5c:	e7f0      	b.n	29c40 <settings_commit_subtree+0x28>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   29c5e:	6820      	ldr	r0, [r4, #0]
   29c60:	2200      	movs	r2, #0
   29c62:	4631      	mov	r1, r6
   29c64:	f018 ffcb 	bl	42bfe <settings_name_steq>
   29c68:	2800      	cmp	r0, #0
   29c6a:	d1e1      	bne.n	29c30 <settings_commit_subtree+0x18>
   29c6c:	e7e2      	b.n	29c34 <settings_commit_subtree+0x1c>
			rc2 = ch->h_commit();
   29c6e:	4798      	blx	r3
			if (!rc) {
				rc = rc2;
   29c70:	2d00      	cmp	r5, #0
   29c72:	bf08      	it	eq
   29c74:	4605      	moveq	r5, r0
   29c76:	e7dd      	b.n	29c34 <settings_commit_subtree+0x1c>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   29c78:	4628      	mov	r0, r5
   29c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29c7c:	00048de0 	.word	0x00048de0
   29c80:	00048e58 	.word	0x00048e58
   29c84:	20001c6c 	.word	0x20001c6c

00029c88 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   29c88:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   29c8a:	4c07      	ldr	r4, [pc, #28]	; (29ca8 <settings_subsys_init+0x20>)
   29c8c:	7823      	ldrb	r3, [r4, #0]
   29c8e:	b10b      	cbz	r3, 29c94 <settings_subsys_init+0xc>
		return 0;
   29c90:	2000      	movs	r0, #0
	if (!err) {
		settings_subsys_initialized = true;
	}

	return err;
}
   29c92:	bd10      	pop	{r4, pc}
	settings_init();
   29c94:	f7ff ff2c 	bl	29af0 <settings_init>
	err = settings_backend_init(); /* func rises kernel panic once error */
   29c98:	f000 f866 	bl	29d68 <settings_backend_init>
	if (!err) {
   29c9c:	2800      	cmp	r0, #0
   29c9e:	d1f8      	bne.n	29c92 <settings_subsys_init+0xa>
		settings_subsys_initialized = true;
   29ca0:	2301      	movs	r3, #1
   29ca2:	7023      	strb	r3, [r4, #0]
   29ca4:	e7f4      	b.n	29c90 <settings_subsys_init+0x8>
   29ca6:	bf00      	nop
   29ca8:	20003a69 	.word	0x20003a69

00029cac <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   29cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
   29cb0:	8f04      	ldrh	r4, [r0, #56]	; 0x38
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
   29cb2:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 29d64 <settings_nvs_load+0xb8>
	name_id = cf->last_name_id + 1;
   29cb6:	3401      	adds	r4, #1
{
   29cb8:	b098      	sub	sp, #96	; 0x60
   29cba:	4680      	mov	r8, r0
   29cbc:	4689      	mov	r9, r1
	name_id = cf->last_name_id + 1;
   29cbe:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   29cc0:	f100 0608 	add.w	r6, r0, #8
		name_id--;
   29cc4:	1e65      	subs	r5, r4, #1
   29cc6:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
   29cc8:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   29ccc:	d047      	beq.n	29d5e <settings_nvs_load+0xb2>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   29cce:	234a      	movs	r3, #74	; 0x4a
   29cd0:	aa05      	add	r2, sp, #20
   29cd2:	4629      	mov	r1, r5
   29cd4:	4630      	mov	r0, r6
   29cd6:	f018 ff4c 	bl	42b72 <nvs_read>
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   29cda:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
   29cde:	343f      	adds	r4, #63	; 0x3f
   29ce0:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   29ce2:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   29ce4:	4621      	mov	r1, r4
   29ce6:	2301      	movs	r3, #1
   29ce8:	f10d 020b 	add.w	r2, sp, #11
   29cec:	4630      	mov	r0, r6
   29cee:	f018 ff40 	bl	42b72 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
   29cf2:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   29cf4:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
   29cf6:	dc03      	bgt.n	29d00 <settings_nvs_load+0x54>
   29cf8:	2800      	cmp	r0, #0
   29cfa:	dc03      	bgt.n	29d04 <settings_nvs_load+0x58>
{
   29cfc:	462c      	mov	r4, r5
   29cfe:	e7e1      	b.n	29cc4 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
   29d00:	2800      	cmp	r0, #0
   29d02:	dc16      	bgt.n	29d32 <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
   29d04:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   29d08:	42ab      	cmp	r3, r5
   29d0a:	d109      	bne.n	29d20 <settings_nvs_load+0x74>
				cf->last_name_id--;
   29d0c:	4642      	mov	r2, r8
   29d0e:	1e6b      	subs	r3, r5, #1
   29d10:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   29d14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   29d18:	2302      	movs	r3, #2
   29d1a:	4630      	mov	r0, r6
   29d1c:	f7fe ff26 	bl	28b6c <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
   29d20:	4629      	mov	r1, r5
   29d22:	4630      	mov	r0, r6
   29d24:	f018 fec1 	bl	42aaa <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
   29d28:	4621      	mov	r1, r4
   29d2a:	4630      	mov	r0, r6
   29d2c:	f018 febd 	bl	42aaa <nvs_delete>
			continue;
   29d30:	e7e4      	b.n	29cfc <settings_nvs_load+0x50>
		name[rc1] = '\0';
   29d32:	f107 0360 	add.w	r3, r7, #96	; 0x60
   29d36:	eb0d 0703 	add.w	r7, sp, r3
   29d3a:	2300      	movs	r3, #0
   29d3c:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
   29d40:	4652      	mov	r2, sl
   29d42:	f8cd 9000 	str.w	r9, [sp]
   29d46:	ab03      	add	r3, sp, #12
   29d48:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
   29d4a:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
   29d4c:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
   29d50:	f018 ff8b 	bl	42c6a <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
   29d54:	2800      	cmp	r0, #0
   29d56:	d0d1      	beq.n	29cfc <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
   29d58:	b018      	add	sp, #96	; 0x60
   29d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29d5e:	2000      	movs	r0, #0
	return ret;
   29d60:	e7fa      	b.n	29d58 <settings_nvs_load+0xac>
   29d62:	bf00      	nop
   29d64:	00042cd9 	.word	0x00042cd9

00029d68 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
   29d68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
   29d6a:	2301      	movs	r3, #1

	rc = flash_area_open(SETTINGS_PARTITION, &fa);
   29d6c:	4669      	mov	r1, sp
   29d6e:	2002      	movs	r0, #2
	uint32_t sector_cnt = 1;
   29d70:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(SETTINGS_PARTITION, &fa);
   29d72:	f7ff fddd 	bl	29930 <flash_area_open>
	if (rc) {
   29d76:	4604      	mov	r4, r0
   29d78:	2800      	cmp	r0, #0
   29d7a:	d134      	bne.n	29de6 <settings_backend_init+0x7e>
		return rc;
	}

	rc = flash_area_get_sectors(SETTINGS_PARTITION, &sector_cnt,
   29d7c:	aa02      	add	r2, sp, #8
   29d7e:	a901      	add	r1, sp, #4
   29d80:	2002      	movs	r0, #2
   29d82:	f7ff fdfd 	bl	29980 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
   29d86:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(SETTINGS_PARTITION, &sector_cnt,
   29d8a:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
   29d8c:	d02b      	beq.n	29de6 <settings_backend_init+0x7e>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
   29d8e:	b138      	cbz	r0, 29da0 <settings_backend_init+0x38>
   29d90:	340c      	adds	r4, #12
   29d92:	d005      	beq.n	29da0 <settings_backend_init+0x38>
		k_panic();
   29d94:	4040      	eors	r0, r0
   29d96:	f380 8811 	msr	BASEPRI, r0
   29d9a:	f04f 0004 	mov.w	r0, #4
   29d9e:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
   29da0:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
   29da2:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   29da6:	d223      	bcs.n	29df0 <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
   29da8:	9a00      	ldr	r2, [sp, #0]
   29daa:	2300      	movs	r3, #0
   29dac:	6894      	ldr	r4, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
   29dae:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
   29db0:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
   29db2:	4284      	cmp	r4, r0
   29db4:	d31a      	bcc.n	29dec <settings_backend_init+0x84>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
   29db6:	3301      	adds	r3, #1
   29db8:	2b08      	cmp	r3, #8
   29dba:	d1f9      	bne.n	29db0 <settings_backend_init+0x48>
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   29dbc:	4d0e      	ldr	r5, [pc, #56]	; (29df8 <settings_backend_init+0x90>)
   29dbe:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.cf_nvs.sector_count = cnt;
   29dc0:	82eb      	strh	r3, [r5, #22]
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   29dc2:	6853      	ldr	r3, [r2, #4]
   29dc4:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev = fa->fa_dev;

	rc = settings_nvs_backend_init(&default_settings_nvs);
   29dc6:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev = fa->fa_dev;
   29dc8:	68d3      	ldr	r3, [r2, #12]
   29dca:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
   29dcc:	f019 f81e 	bl	42e0c <settings_nvs_backend_init>
	if (rc) {
   29dd0:	4604      	mov	r4, r0
   29dd2:	b940      	cbnz	r0, 29de6 <settings_backend_init+0x7e>
	cf->cf_store.cs_itf = &settings_nvs_itf;
   29dd4:	4e09      	ldr	r6, [pc, #36]	; (29dfc <settings_backend_init+0x94>)
   29dd6:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
   29dd8:	4628      	mov	r0, r5
   29dda:	f7ff fe27 	bl	29a2c <settings_src_register>
	settings_dst_register(&cf->cf_store);
   29dde:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   29de0:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
   29de2:	f7ff fe31 	bl	29a48 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
   29de6:	4620      	mov	r0, r4
   29de8:	b004      	add	sp, #16
   29dea:	bd70      	pop	{r4, r5, r6, pc}
   29dec:	b29b      	uxth	r3, r3
   29dee:	e7e5      	b.n	29dbc <settings_backend_init+0x54>
		return -EDOM;
   29df0:	f06f 0420 	mvn.w	r4, #32
   29df4:	e7f7      	b.n	29de6 <settings_backend_init+0x7e>
   29df6:	bf00      	nop
   29df8:	20001c74 	.word	0x20001c74
   29dfc:	20000358 	.word	0x20000358

00029e00 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   29e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29e04:	4605      	mov	r5, r0
	__asm__ volatile(
   29e06:	f04f 0320 	mov.w	r3, #32
   29e0a:	f3ef 8611 	mrs	r6, BASEPRI
   29e0e:	f383 8812 	msr	BASEPRI_MAX, r3
   29e12:	f3bf 8f6f 	isb	sy
	return list->head;
   29e16:	4b0e      	ldr	r3, [pc, #56]	; (29e50 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   29e18:	4f0e      	ldr	r7, [pc, #56]	; (29e54 <pm_state_notify+0x54>)
   29e1a:	681c      	ldr	r4, [r3, #0]
   29e1c:	f8df 8038 	ldr.w	r8, [pc, #56]	; 29e58 <pm_state_notify+0x58>
   29e20:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   29e24:	b92c      	cbnz	r4, 29e32 <pm_state_notify+0x32>
	__asm__ volatile(
   29e26:	f386 8811 	msr	BASEPRI, r6
   29e2a:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   29e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
   29e32:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   29e36:	2d00      	cmp	r5, #0
   29e38:	bf18      	it	ne
   29e3a:	4613      	movne	r3, r2
		if (callback) {
   29e3c:	b12b      	cbz	r3, 29e4a <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   29e3e:	f898 2014 	ldrb.w	r2, [r8, #20]
   29e42:	fb09 f202 	mul.w	r2, r9, r2
   29e46:	5cb8      	ldrb	r0, [r7, r2]
   29e48:	4798      	blx	r3
	return node->next;
   29e4a:	6824      	ldr	r4, [r4, #0]
   29e4c:	e7ea      	b.n	29e24 <pm_state_notify+0x24>
   29e4e:	bf00      	nop
   29e50:	20001ccc 	.word	0x20001ccc
   29e54:	20001cc0 	.word	0x20001cc0
   29e58:	20003978 	.word	0x20003978

00029e5c <pm_system_resume>:

void pm_system_resume(void)
{
   29e5c:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   29e5e:	4b19      	ldr	r3, [pc, #100]	; (29ec4 <pm_system_resume+0x68>)
   29e60:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29e62:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   29e66:	f004 031f 	and.w	r3, r4, #31
   29e6a:	2201      	movs	r2, #1
   29e6c:	409a      	lsls	r2, r3
   29e6e:	4b16      	ldr	r3, [pc, #88]	; (29ec8 <pm_system_resume+0x6c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   29e70:	0961      	lsrs	r1, r4, #5
   29e72:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   29e76:	43d0      	mvns	r0, r2
   29e78:	e853 1f00 	ldrex	r1, [r3]
   29e7c:	ea01 0500 	and.w	r5, r1, r0
   29e80:	e843 5600 	strex	r6, r5, [r3]
   29e84:	2e00      	cmp	r6, #0
   29e86:	d1f7      	bne.n	29e78 <pm_system_resume+0x1c>
   29e88:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   29e8c:	420a      	tst	r2, r1
   29e8e:	d013      	beq.n	29eb8 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
   29e90:	4b0e      	ldr	r3, [pc, #56]	; (29ecc <pm_system_resume+0x70>)
   29e92:	4d0f      	ldr	r5, [pc, #60]	; (29ed0 <pm_system_resume+0x74>)
   29e94:	b18b      	cbz	r3, 29eba <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
   29e96:	230c      	movs	r3, #12
   29e98:	4363      	muls	r3, r4
   29e9a:	18ea      	adds	r2, r5, r3
   29e9c:	5ce8      	ldrb	r0, [r5, r3]
   29e9e:	7851      	ldrb	r1, [r2, #1]
   29ea0:	f01a fa67 	bl	44372 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   29ea4:	2000      	movs	r0, #0
   29ea6:	f7ff ffab 	bl	29e00 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   29eaa:	230c      	movs	r3, #12
   29eac:	435c      	muls	r4, r3
   29eae:	192a      	adds	r2, r5, r4
   29eb0:	2300      	movs	r3, #0
   29eb2:	512b      	str	r3, [r5, r4]
   29eb4:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   29eb8:	bd70      	pop	{r4, r5, r6, pc}
   29eba:	f383 8811 	msr	BASEPRI, r3
   29ebe:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   29ec2:	e7ef      	b.n	29ea4 <pm_system_resume+0x48>
   29ec4:	20003978 	.word	0x20003978
   29ec8:	20001cd4 	.word	0x20001cd4
   29ecc:	00044373 	.word	0x00044373
   29ed0:	20001cc0 	.word	0x20001cc0

00029ed4 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   29ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   29ed8:	4b35      	ldr	r3, [pc, #212]	; (29fb0 <pm_system_suspend+0xdc>)
{
   29eda:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   29edc:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
   29ede:	f04f 0320 	mov.w	r3, #32
   29ee2:	f3ef 8811 	mrs	r8, BASEPRI
   29ee6:	f383 8812 	msr	BASEPRI_MAX, r3
   29eea:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   29eee:	240c      	movs	r4, #12
   29ef0:	4b30      	ldr	r3, [pc, #192]	; (29fb4 <pm_system_suspend+0xe0>)
   29ef2:	4e31      	ldr	r6, [pc, #196]	; (29fb8 <pm_system_suspend+0xe4>)
   29ef4:	436c      	muls	r4, r5
   29ef6:	191a      	adds	r2, r3, r4
   29ef8:	5d19      	ldrb	r1, [r3, r4]
   29efa:	2900      	cmp	r1, #0
   29efc:	d04c      	beq.n	29f98 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   29efe:	ca07      	ldmia	r2, {r0, r1, r2}
   29f00:	eb06 0c04 	add.w	ip, r6, r4
   29f04:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   29f08:	2200      	movs	r2, #0
   29f0a:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
   29f0c:	f388 8811 	msr	BASEPRI, r8
   29f10:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   29f14:	230c      	movs	r3, #12
   29f16:	436b      	muls	r3, r5
   29f18:	18f2      	adds	r2, r6, r3
   29f1a:	5cf0      	ldrb	r0, [r6, r3]
   29f1c:	2800      	cmp	r0, #0
   29f1e:	d039      	beq.n	29f94 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   29f20:	1c7b      	adds	r3, r7, #1
   29f22:	d010      	beq.n	29f46 <pm_system_suspend+0x72>
			return (uint32_t)((t * to_hz + off) / from_hz);
   29f24:	f8d2 c008 	ldr.w	ip, [r2, #8]
   29f28:	4c24      	ldr	r4, [pc, #144]	; (29fbc <pm_system_suspend+0xe8>)
   29f2a:	4a25      	ldr	r2, [pc, #148]	; (29fc0 <pm_system_suspend+0xec>)
   29f2c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   29f30:	2100      	movs	r1, #0
   29f32:	fbec 4100 	umlal	r4, r1, ip, r0
   29f36:	2300      	movs	r3, #0
   29f38:	4620      	mov	r0, r4
   29f3a:	f7fc f8e1 	bl	26100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   29f3e:	2101      	movs	r1, #1
   29f40:	1a38      	subs	r0, r7, r0
   29f42:	f01e fb36 	bl	485b2 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   29f46:	f017 fa5d 	bl	41404 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   29f4a:	2001      	movs	r0, #1
   29f4c:	f7ff ff58 	bl	29e00 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29f50:	f3bf 8f5b 	dmb	ish
   29f54:	4b1b      	ldr	r3, [pc, #108]	; (29fc4 <pm_system_suspend+0xf0>)
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   29f56:	096a      	lsrs	r2, r5, #5
   29f58:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   29f5c:	f005 011f 	and.w	r1, r5, #31
   29f60:	2201      	movs	r2, #1
   29f62:	408a      	lsls	r2, r1
   29f64:	e853 0f00 	ldrex	r0, [r3]
   29f68:	4310      	orrs	r0, r2
   29f6a:	e843 0100 	strex	r1, r0, [r3]
   29f6e:	2900      	cmp	r1, #0
   29f70:	d1f8      	bne.n	29f64 <pm_system_suspend+0x90>
   29f72:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   29f76:	4b14      	ldr	r3, [pc, #80]	; (29fc8 <pm_system_suspend+0xf4>)
   29f78:	b13b      	cbz	r3, 29f8a <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
   29f7a:	230c      	movs	r3, #12
   29f7c:	fb03 f005 	mul.w	r0, r3, r5
   29f80:	1833      	adds	r3, r6, r0
   29f82:	5c30      	ldrb	r0, [r6, r0]
   29f84:	7859      	ldrb	r1, [r3, #1]
   29f86:	f01a f9e8 	bl	4435a <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   29f8a:	f7ff ff67 	bl	29e5c <pm_system_resume>
	k_sched_unlock();
   29f8e:	f017 fa4d 	bl	4142c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   29f92:	2001      	movs	r0, #1
}
   29f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
   29f98:	4601      	mov	r1, r0
   29f9a:	4628      	mov	r0, r5
   29f9c:	f000 f816 	bl	29fcc <pm_policy_next_state>
		if (info != NULL) {
   29fa0:	2800      	cmp	r0, #0
   29fa2:	d0b3      	beq.n	29f0c <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
   29fa4:	c807      	ldmia	r0, {r0, r1, r2}
   29fa6:	4434      	add	r4, r6
   29fa8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   29fac:	e7ae      	b.n	29f0c <pm_system_suspend+0x38>
   29fae:	bf00      	nop
   29fb0:	20003978 	.word	0x20003978
   29fb4:	20001cb4 	.word	0x20001cb4
   29fb8:	20001cc0 	.word	0x20001cc0
   29fbc:	000f423f 	.word	0x000f423f
   29fc0:	000f4240 	.word	0x000f4240
   29fc4:	20001cd4 	.word	0x20001cd4
   29fc8:	0004435b 	.word	0x0004435b

00029fcc <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   29fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29fd0:	b085      	sub	sp, #20
   29fd2:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   29fd4:	a903      	add	r1, sp, #12
   29fd6:	f000 f843 	bl	2a060 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   29fda:	4b1e      	ldr	r3, [pc, #120]	; (2a054 <pm_policy_next_state+0x88>)
   29fdc:	9d03      	ldr	r5, [sp, #12]
   29fde:	f8d3 a000 	ldr.w	sl, [r3]
   29fe2:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2a058 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   29fe6:	1e43      	subs	r3, r0, #1
   29fe8:	b21b      	sxth	r3, r3
   29fea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   29fee:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   29ff0:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   29ff4:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   29ff8:	f04f 0b00 	mov.w	fp, #0
   29ffc:	b924      	cbnz	r4, 2a008 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   29ffe:	46a1      	mov	r9, r4
}
   2a000:	4648      	mov	r0, r9
   2a002:	b005      	add	sp, #20
   2a004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a008:	6868      	ldr	r0, [r5, #4]
   2a00a:	4a14      	ldr	r2, [pc, #80]	; (2a05c <pm_policy_next_state+0x90>)
   2a00c:	46c4      	mov	ip, r8
   2a00e:	4659      	mov	r1, fp
   2a010:	fbe0 c107 	umlal	ip, r1, r0, r7
   2a014:	2300      	movs	r3, #0
   2a016:	4660      	mov	r0, ip
   2a018:	f7fc f872 	bl	26100 <__aeabi_uldivmod>
   2a01c:	9001      	str	r0, [sp, #4]
   2a01e:	68a8      	ldr	r0, [r5, #8]
   2a020:	4a0e      	ldr	r2, [pc, #56]	; (2a05c <pm_policy_next_state+0x90>)
   2a022:	46c4      	mov	ip, r8
   2a024:	4659      	mov	r1, fp
   2a026:	fbe0 c107 	umlal	ip, r1, r0, r7
   2a02a:	2300      	movs	r3, #0
   2a02c:	4660      	mov	r0, ip
   2a02e:	f7fc f867 	bl	26100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   2a032:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
		const struct pm_state_info *state = &cpu_states[i];
   2a036:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   2a038:	d001      	beq.n	2a03e <pm_policy_next_state+0x72>
   2a03a:	4582      	cmp	sl, r0
   2a03c:	d905      	bls.n	2a04a <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   2a03e:	1c73      	adds	r3, r6, #1
   2a040:	d0de      	beq.n	2a000 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   2a042:	9b01      	ldr	r3, [sp, #4]
   2a044:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   2a046:	42b0      	cmp	r0, r6
   2a048:	d9da      	bls.n	2a000 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   2a04a:	3c01      	subs	r4, #1
   2a04c:	b2a4      	uxth	r4, r4
   2a04e:	3d0c      	subs	r5, #12
   2a050:	e7d4      	b.n	29ffc <pm_policy_next_state+0x30>
   2a052:	bf00      	nop
   2a054:	2000036c 	.word	0x2000036c
   2a058:	000f423f 	.word	0x000f423f
   2a05c:	000f4240 	.word	0x000f4240

0002a060 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   2a060:	b908      	cbnz	r0, 2a066 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   2a062:	4b02      	ldr	r3, [pc, #8]	; (2a06c <pm_state_cpu_get_all+0xc>)
   2a064:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   2a066:	2000      	movs	r0, #0
   2a068:	4770      	bx	lr
   2a06a:	bf00      	nop
   2a06c:	00049260 	.word	0x00049260

0002a070 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
   2a070:	4b01      	ldr	r3, [pc, #4]	; (2a078 <uECC_get_rng+0x8>)
   2a072:	6818      	ldr	r0, [r3, #0]
   2a074:	4770      	bx	lr
   2a076:	bf00      	nop
   2a078:	20000370 	.word	0x20000370

0002a07c <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
   2a07c:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   2a07e:	2208      	movs	r2, #8
{
   2a080:	b089      	sub	sp, #36	; 0x24
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   2a082:	f019 f89a 	bl	431ba <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
   2a086:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   2a088:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
   2a08a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   2a08c:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
   2a08e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   2a090:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
   2a092:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   2a094:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   2a096:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   2a098:	9307      	str	r3, [sp, #28]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   2a09a:	4613      	mov	r3, r2
   2a09c:	466a      	mov	r2, sp
{
   2a09e:	460c      	mov	r4, r1
   2a0a0:	4606      	mov	r6, r0
	tmp[0] = tmp[1] = tmp[2] = 0;
   2a0a2:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   2a0a4:	4611      	mov	r1, r2
   2a0a6:	4610      	mov	r0, r2
	tmp[0] = tmp[1] = tmp[2] = 0;
   2a0a8:	e9cd 7701 	strd	r7, r7, [sp, #4]
   2a0ac:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   2a0ae:	f018 ff92 	bl	42fd6 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2a0b2:	4631      	mov	r1, r6
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   2a0b4:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2a0b6:	4630      	mov	r0, r6
   2a0b8:	f018 ff8d 	bl	42fd6 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
   2a0bc:	6b21      	ldr	r1, [r4, #48]	; 0x30
   2a0be:	9103      	str	r1, [sp, #12]
	tmp[4] = product[13];
   2a0c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2a0c2:	9104      	str	r1, [sp, #16]
	tmp[5] = product[14];
   2a0c4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   2a0c6:	9105      	str	r1, [sp, #20]
	tmp[6] = product[15];
   2a0c8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2a0ca:	4405      	add	r5, r0
	tmp[7] = 0;
   2a0cc:	e9cd 1706 	strd	r1, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   2a0d0:	4610      	mov	r0, r2
   2a0d2:	4611      	mov	r1, r2
   2a0d4:	f018 ff7f 	bl	42fd6 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2a0d8:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   2a0da:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2a0dc:	4630      	mov	r0, r6
   2a0de:	f018 ff7a 	bl	42fd6 <uECC_vli_add>
   2a0e2:	4405      	add	r5, r0

	/* s3 */
	tmp[0] = product[8];
   2a0e4:	6a20      	ldr	r0, [r4, #32]
   2a0e6:	9000      	str	r0, [sp, #0]
	tmp[1] = product[9];
   2a0e8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   2a0ea:	9001      	str	r0, [sp, #4]
	tmp[2] = product[10];
   2a0ec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   2a0ee:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
   2a0f0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   2a0f2:	9006      	str	r0, [sp, #24]
	tmp[7] = product[15];
   2a0f4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   2a0f6:	9007      	str	r0, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2a0f8:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   2a0fa:	e9cd 7704 	strd	r7, r7, [sp, #16]
   2a0fe:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2a100:	f018 ff69 	bl	42fd6 <uECC_vli_add>
   2a104:	4405      	add	r5, r0

	/* s4 */
	tmp[0] = product[9];
   2a106:	6a60      	ldr	r0, [r4, #36]	; 0x24
   2a108:	9000      	str	r0, [sp, #0]
	tmp[1] = product[10];
   2a10a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
   2a10c:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
	tmp[1] = product[10];
   2a110:	9001      	str	r0, [sp, #4]
	tmp[2] = product[11];
   2a112:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2a114:	9002      	str	r0, [sp, #8]
	tmp[4] = product[14];
   2a116:	f8cd c010 	str.w	ip, [sp, #16]
	tmp[3] = product[13];
   2a11a:	6b60      	ldr	r0, [r4, #52]	; 0x34
	tmp[5] = product[15];
   2a11c:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
	tmp[3] = product[13];
   2a120:	9003      	str	r0, [sp, #12]
	tmp[6] = product[13];
   2a122:	e9cd c005 	strd	ip, r0, [sp, #20]
	tmp[7] = product[8];
   2a126:	6a20      	ldr	r0, [r4, #32]
   2a128:	9007      	str	r0, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2a12a:	4630      	mov	r0, r6
   2a12c:	f018 ff53 	bl	42fd6 <uECC_vli_add>
   2a130:	4405      	add	r5, r0

	/* d1 */
	tmp[0] = product[11];
   2a132:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2a134:	9000      	str	r0, [sp, #0]
	tmp[1] = product[12];
   2a136:	6b20      	ldr	r0, [r4, #48]	; 0x30
   2a138:	9001      	str	r0, [sp, #4]
	tmp[2] = product[13];
   2a13a:	6b60      	ldr	r0, [r4, #52]	; 0x34
   2a13c:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
   2a13e:	6a20      	ldr	r0, [r4, #32]
   2a140:	9006      	str	r0, [sp, #24]
	tmp[7] = product[10];
   2a142:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   2a144:	9007      	str	r0, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2a146:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   2a148:	e9cd 7704 	strd	r7, r7, [sp, #16]
   2a14c:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2a14e:	f019 f867 	bl	43220 <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
   2a152:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2a154:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
   2a156:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2a158:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
   2a15a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2a15c:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
   2a15e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2a160:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
   2a162:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2a164:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
   2a166:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2a168:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2a16a:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2a16c:	2308      	movs	r3, #8
   2a16e:	4630      	mov	r0, r6
   2a170:	f019 f856 	bl	43220 <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
   2a174:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2a176:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
   2a178:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2a17a:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
   2a17c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2a17e:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
   2a180:	6a23      	ldr	r3, [r4, #32]
   2a182:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
   2a184:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2a186:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
   2a188:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
   2a18a:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
   2a18e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2a190:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2a192:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2a194:	2308      	movs	r3, #8
   2a196:	4630      	mov	r0, r6
   2a198:	f019 f842 	bl	43220 <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
   2a19c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2a19e:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
   2a1a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
   2a1a2:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
   2a1a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2a1a8:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
   2a1aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2a1ac:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
   2a1ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2a1b0:	9305      	str	r3, [sp, #20]
	tmp[6] = 0;
	tmp[7] = product[13];
   2a1b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2a1b4:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2a1b6:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2a1b8:	2308      	movs	r3, #8
   2a1ba:	4630      	mov	r0, r6
   2a1bc:	f019 f830 	bl	43220 <uECC_vli_sub>

	if (carry < 0) {
   2a1c0:	1a2d      	subs	r5, r5, r0
   2a1c2:	d410      	bmi.n	2a1e6 <vli_mmod_fast_secp256r1+0x16a>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   2a1c4:	4c0d      	ldr	r4, [pc, #52]	; (2a1fc <vli_mmod_fast_secp256r1+0x180>)
		while (carry || 
   2a1c6:	b935      	cbnz	r5, 2a1d6 <vli_mmod_fast_secp256r1+0x15a>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   2a1c8:	2208      	movs	r2, #8
   2a1ca:	4631      	mov	r1, r6
   2a1cc:	4620      	mov	r0, r4
   2a1ce:	f019 f800 	bl	431d2 <uECC_vli_cmp_unsafe>
		while (carry || 
   2a1d2:	2801      	cmp	r0, #1
   2a1d4:	d00f      	beq.n	2a1f6 <vli_mmod_fast_secp256r1+0x17a>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   2a1d6:	2308      	movs	r3, #8
   2a1d8:	4622      	mov	r2, r4
   2a1da:	4631      	mov	r1, r6
   2a1dc:	4630      	mov	r0, r6
   2a1de:	f019 f81f 	bl	43220 <uECC_vli_sub>
   2a1e2:	1a2d      	subs	r5, r5, r0
   2a1e4:	e7ef      	b.n	2a1c6 <vli_mmod_fast_secp256r1+0x14a>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   2a1e6:	4a05      	ldr	r2, [pc, #20]	; (2a1fc <vli_mmod_fast_secp256r1+0x180>)
   2a1e8:	2308      	movs	r3, #8
   2a1ea:	4631      	mov	r1, r6
   2a1ec:	4630      	mov	r0, r6
   2a1ee:	f018 fef2 	bl	42fd6 <uECC_vli_add>
		while (carry < 0);
   2a1f2:	182d      	adds	r5, r5, r0
   2a1f4:	d4f8      	bmi.n	2a1e8 <vli_mmod_fast_secp256r1+0x16c>
		}
	}
}
   2a1f6:	b009      	add	sp, #36	; 0x24
   2a1f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a1fa:	bf00      	nop
   2a1fc:	00049264 	.word	0x00049264

0002a200 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   2a200:	4904      	ldr	r1, [pc, #16]	; (2a214 <sub_bytes+0x14>)
   2a202:	1e43      	subs	r3, r0, #1
   2a204:	300f      	adds	r0, #15
   2a206:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2a20a:	5c8a      	ldrb	r2, [r1, r2]
   2a20c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   2a20e:	4283      	cmp	r3, r0
   2a210:	d1f9      	bne.n	2a206 <sub_bytes+0x6>
	}
}
   2a212:	4770      	bx	lr
   2a214:	0004a6a1 	.word	0x0004a6a1

0002a218 <tc_aes128_set_encrypt_key>:
{
   2a218:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   2a21a:	4e26      	ldr	r6, [pc, #152]	; (2a2b4 <tc_aes128_set_encrypt_key+0x9c>)
{
   2a21c:	4607      	mov	r7, r0
   2a21e:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   2a220:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   2a222:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   2a224:	ad01      	add	r5, sp, #4
   2a226:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2a228:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2a22a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2a22c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   2a230:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   2a234:	4638      	mov	r0, r7
   2a236:	2f00      	cmp	r7, #0
   2a238:	d038      	beq.n	2a2ac <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   2a23a:	2c00      	cmp	r4, #0
   2a23c:	d038      	beq.n	2a2b0 <tc_aes128_set_encrypt_key+0x98>
   2a23e:	1f38      	subs	r0, r7, #4
   2a240:	4621      	mov	r1, r4
   2a242:	4602      	mov	r2, r0
   2a244:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   2a246:	784b      	ldrb	r3, [r1, #1]
   2a248:	780d      	ldrb	r5, [r1, #0]
   2a24a:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   2a24c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   2a250:	78cd      	ldrb	r5, [r1, #3]
   2a252:	432b      	orrs	r3, r5
   2a254:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   2a256:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   2a258:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   2a25c:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   2a25e:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   2a262:	d1f0      	bne.n	2a246 <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   2a264:	4c14      	ldr	r4, [pc, #80]	; (2a2b8 <tc_aes128_set_encrypt_key+0xa0>)
   2a266:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   2a268:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   2a26a:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   2a26c:	d116      	bne.n	2a29c <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   2a26e:	f3c3 4207 	ubfx	r2, r3, #16, #8
   2a272:	5ca5      	ldrb	r5, [r4, r2]
   2a274:	0e1a      	lsrs	r2, r3, #24
   2a276:	5ca2      	ldrb	r2, [r4, r2]
   2a278:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   2a27c:	f3c3 2507 	ubfx	r5, r3, #8, #8
   2a280:	b2db      	uxtb	r3, r3
   2a282:	5d65      	ldrb	r5, [r4, r5]
   2a284:	5ce3      	ldrb	r3, [r4, r3]
   2a286:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   2a28a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   2a28e:	f021 0303 	bic.w	r3, r1, #3
   2a292:	3330      	adds	r3, #48	; 0x30
   2a294:	446b      	add	r3, sp
   2a296:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   2a29a:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   2a29c:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   2a2a0:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   2a2a2:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   2a2a4:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   2a2a6:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   2a2a8:	d1de      	bne.n	2a268 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   2a2aa:	2001      	movs	r0, #1
}
   2a2ac:	b00d      	add	sp, #52	; 0x34
   2a2ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   2a2b0:	4620      	mov	r0, r4
   2a2b2:	e7fb      	b.n	2a2ac <tc_aes128_set_encrypt_key+0x94>
   2a2b4:	00048e74 	.word	0x00048e74
   2a2b8:	0004a6a1 	.word	0x0004a6a1

0002a2bc <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   2a2bc:	4901      	ldr	r1, [pc, #4]	; (2a2c4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   2a2be:	2210      	movs	r2, #16
	str	r2, [r1]
   2a2c0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   2a2c2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   2a2c4:	e000ed10 	.word	0xe000ed10

0002a2c8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   2a2c8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   2a2ca:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   2a2cc:	f380 8811 	msr	BASEPRI, r0
	isb
   2a2d0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   2a2d4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   2a2d8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   2a2da:	b662      	cpsie	i
	isb
   2a2dc:	f3bf 8f6f 	isb	sy

	bx	lr
   2a2e0:	4770      	bx	lr
   2a2e2:	bf00      	nop

0002a2e4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   2a2e4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   2a2e6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   2a2e8:	f381 8811 	msr	BASEPRI, r1

	wfe
   2a2ec:	bf20      	wfe

	msr	BASEPRI, r0
   2a2ee:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   2a2f2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   2a2f4:	4770      	bx	lr
   2a2f6:	bf00      	nop

0002a2f8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   2a2f8:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   2a2fa:	2800      	cmp	r0, #0
   2a2fc:	db07      	blt.n	2a30e <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2a2fe:	4a04      	ldr	r2, [pc, #16]	; (2a310 <arch_irq_enable+0x18>)
   2a300:	0941      	lsrs	r1, r0, #5
   2a302:	2301      	movs	r3, #1
   2a304:	f000 001f 	and.w	r0, r0, #31
   2a308:	4083      	lsls	r3, r0
   2a30a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   2a30e:	4770      	bx	lr
   2a310:	e000e100 	.word	0xe000e100

0002a314 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   2a314:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   2a316:	2800      	cmp	r0, #0
   2a318:	db0c      	blt.n	2a334 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2a31a:	0943      	lsrs	r3, r0, #5
   2a31c:	4906      	ldr	r1, [pc, #24]	; (2a338 <arch_irq_disable+0x24>)
   2a31e:	f000 001f 	and.w	r0, r0, #31
   2a322:	3320      	adds	r3, #32
   2a324:	2201      	movs	r2, #1
   2a326:	4082      	lsls	r2, r0
   2a328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   2a32c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2a330:	f3bf 8f6f 	isb	sy
}
   2a334:	4770      	bx	lr
   2a336:	bf00      	nop
   2a338:	e000e100 	.word	0xe000e100

0002a33c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   2a33c:	4b05      	ldr	r3, [pc, #20]	; (2a354 <arch_irq_is_enabled+0x18>)
   2a33e:	0942      	lsrs	r2, r0, #5
   2a340:	f000 001f 	and.w	r0, r0, #31
   2a344:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   2a348:	2301      	movs	r3, #1
   2a34a:	fa03 f000 	lsl.w	r0, r3, r0
}
   2a34e:	4010      	ands	r0, r2
   2a350:	4770      	bx	lr
   2a352:	bf00      	nop
   2a354:	e000e100 	.word	0xe000e100

0002a358 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   2a358:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   2a35a:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2a35c:	bfa8      	it	ge
   2a35e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
   2a362:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2a366:	bfb8      	it	lt
   2a368:	4b06      	ldrlt	r3, [pc, #24]	; (2a384 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2a36a:	ea4f 1141 	mov.w	r1, r1, lsl #5
   2a36e:	bfac      	ite	ge
   2a370:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2a374:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2a378:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2a37a:	bfb4      	ite	lt
   2a37c:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2a37e:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
   2a382:	4770      	bx	lr
   2a384:	e000ed14 	.word	0xe000ed14

0002a388 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   2a388:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   2a38a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   2a38c:	4b04      	ldr	r3, [pc, #16]	; (2a3a0 <_arch_isr_direct_pm+0x18>)
   2a38e:	699a      	ldr	r2, [r3, #24]
   2a390:	b11a      	cbz	r2, 2a39a <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   2a392:	2200      	movs	r2, #0
   2a394:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   2a396:	f01d fdb0 	bl	47efa <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   2a39a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   2a39c:	bd08      	pop	{r3, pc}
   2a39e:	bf00      	nop
   2a3a0:	20003978 	.word	0x20003978

0002a3a4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   2a3a4:	bf30      	wfi
    b z_SysNmiOnReset
   2a3a6:	f7ff bffd 	b.w	2a3a4 <z_SysNmiOnReset>
   2a3aa:	bf00      	nop

0002a3ac <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   2a3ac:	4a0f      	ldr	r2, [pc, #60]	; (2a3ec <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   2a3ae:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   2a3b0:	4b0f      	ldr	r3, [pc, #60]	; (2a3f0 <z_arm_prep_c+0x44>)
   2a3b2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   2a3b6:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   2a3b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2a3bc:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   2a3c0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   2a3c4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   2a3c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
   2a3cc:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   2a3d0:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   2a3d4:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   2a3d8:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   2a3dc:	f016 f858 	bl	40490 <z_bss_zero>
	z_data_copy();
   2a3e0:	f017 f960 	bl	416a4 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   2a3e4:	f000 f99c 	bl	2a720 <z_arm_interrupt_init>
	z_cstart();
   2a3e8:	f016 f892 	bl	40510 <z_cstart>
   2a3ec:	00026000 	.word	0x00026000
   2a3f0:	e000ed00 	.word	0xe000ed00

0002a3f4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   2a3f4:	4a09      	ldr	r2, [pc, #36]	; (2a41c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   2a3f6:	490a      	ldr	r1, [pc, #40]	; (2a420 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   2a3f8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   2a3fa:	6809      	ldr	r1, [r1, #0]
   2a3fc:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   2a3fe:	4909      	ldr	r1, [pc, #36]	; (2a424 <arch_swap+0x30>)
	_current->arch.basepri = key;
   2a400:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   2a402:	684b      	ldr	r3, [r1, #4]
   2a404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   2a408:	604b      	str	r3, [r1, #4]
   2a40a:	2300      	movs	r3, #0
   2a40c:	f383 8811 	msr	BASEPRI, r3
   2a410:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   2a414:	6893      	ldr	r3, [r2, #8]
}
   2a416:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   2a418:	4770      	bx	lr
   2a41a:	bf00      	nop
   2a41c:	20003978 	.word	0x20003978
   2a420:	0004a490 	.word	0x0004a490
   2a424:	e000ed00 	.word	0xe000ed00

0002a428 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   2a428:	490f      	ldr	r1, [pc, #60]	; (2a468 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
   2a42a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   2a42c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   2a430:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   2a432:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   2a436:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   2a43a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   2a43c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   2a440:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   2a444:	4f09      	ldr	r7, [pc, #36]	; (2a46c <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   2a446:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   2a44a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   2a44c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   2a44e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   2a450:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   2a452:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   2a454:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   2a456:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   2a45a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   2a45e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   2a462:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   2a466:	4770      	bx	lr
    ldr r1, =_kernel
   2a468:	20003978 	.word	0x20003978
    ldr v4, =_SCS_ICSR
   2a46c:	e000ed04 	.word	0xe000ed04

0002a470 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   2a470:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   2a474:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   2a476:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   2a47a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   2a47e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   2a480:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   2a484:	2902      	cmp	r1, #2
    beq _oops
   2a486:	d0ff      	beq.n	2a488 <_oops>

0002a488 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   2a488:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   2a48a:	f019 fded 	bl	44068 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   2a48e:	bd01      	pop	{r0, pc}

0002a490 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   2a490:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   2a494:	9b00      	ldr	r3, [sp, #0]
   2a496:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   2a49a:	490a      	ldr	r1, [pc, #40]	; (2a4c4 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   2a49c:	9b01      	ldr	r3, [sp, #4]
   2a49e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   2a4a2:	9b02      	ldr	r3, [sp, #8]
   2a4a4:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   2a4a8:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   2a4ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   2a4b0:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   2a4b4:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   2a4b8:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   2a4ba:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   2a4bc:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   2a4be:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   2a4c0:	4770      	bx	lr
   2a4c2:	bf00      	nop
   2a4c4:	0004222b 	.word	0x0004222b

0002a4c8 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   2a4c8:	4b07      	ldr	r3, [pc, #28]	; (2a4e8 <arch_switch_to_main_thread+0x20>)
   2a4ca:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   2a4cc:	4610      	mov	r0, r2
   2a4ce:	f381 8809 	msr	PSP, r1
   2a4d2:	2100      	movs	r1, #0
   2a4d4:	b663      	cpsie	if
   2a4d6:	f381 8811 	msr	BASEPRI, r1
   2a4da:	f3bf 8f6f 	isb	sy
   2a4de:	2200      	movs	r2, #0
   2a4e0:	2300      	movs	r3, #0
   2a4e2:	f017 fea2 	bl	4222a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   2a4e6:	bf00      	nop
   2a4e8:	20003978 	.word	0x20003978

0002a4ec <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   2a4ec:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   2a4ee:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   2a4f0:	4a0b      	ldr	r2, [pc, #44]	; (2a520 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   2a4f2:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   2a4f4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   2a4f6:	bf1e      	ittt	ne
	movne	r1, #0
   2a4f8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   2a4fa:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   2a4fc:	f01d fcfd 	blne	47efa <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   2a500:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   2a502:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   2a506:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   2a50a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   2a50e:	4905      	ldr	r1, [pc, #20]	; (2a524 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   2a510:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   2a512:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   2a514:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   2a516:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   2a51a:	4903      	ldr	r1, [pc, #12]	; (2a528 <_isr_wrapper+0x3c>)
	bx r1
   2a51c:	4708      	bx	r1
   2a51e:	0000      	.short	0x0000
	ldr r2, =_kernel
   2a520:	20003978 	.word	0x20003978
	ldr r1, =_sw_isr_table
   2a524:	00048bb0 	.word	0x00048bb0
	ldr r1, =z_arm_int_exit
   2a528:	0002a52d 	.word	0x0002a52d

0002a52c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   2a52c:	4b04      	ldr	r3, [pc, #16]	; (2a540 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   2a52e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   2a530:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   2a532:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   2a534:	d003      	beq.n	2a53e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   2a536:	4903      	ldr	r1, [pc, #12]	; (2a544 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   2a538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   2a53c:	600a      	str	r2, [r1, #0]

0002a53e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   2a53e:	4770      	bx	lr
	ldr r3, =_kernel
   2a540:	20003978 	.word	0x20003978
	ldr r1, =_SCS_ICSR
   2a544:	e000ed04 	.word	0xe000ed04

0002a548 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   2a548:	4b0d      	ldr	r3, [pc, #52]	; (2a580 <bus_fault.constprop.0+0x38>)
   2a54a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   2a54c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   2a54e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2a550:	0592      	lsls	r2, r2, #22
   2a552:	d508      	bpl.n	2a566 <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   2a554:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   2a556:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2a558:	0412      	lsls	r2, r2, #16
   2a55a:	d504      	bpl.n	2a566 <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
   2a55c:	b118      	cbz	r0, 2a566 <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   2a55e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2a560:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   2a564:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   2a566:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   2a568:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2a56a:	05d2      	lsls	r2, r2, #23
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   2a56c:	4a04      	ldr	r2, [pc, #16]	; (2a580 <bus_fault.constprop.0+0x38>)
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   2a56e:	bf58      	it	pl
   2a570:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   2a572:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   2a574:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   2a576:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   2a57a:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   2a57c:	7008      	strb	r0, [r1, #0]

	return reason;
}
   2a57e:	4770      	bx	lr
   2a580:	e000ed00 	.word	0xe000ed00

0002a584 <mem_manage_fault.constprop.0>:
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   2a584:	4b11      	ldr	r3, [pc, #68]	; (2a5cc <mem_manage_fault.constprop.0+0x48>)
   2a586:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   2a588:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   2a58a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2a58c:	0792      	lsls	r2, r2, #30
   2a58e:	d508      	bpl.n	2a5a2 <mem_manage_fault.constprop.0+0x1e>
		uint32_t temp = SCB->MMFAR;
   2a590:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   2a592:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2a594:	0612      	lsls	r2, r2, #24
   2a596:	d504      	bpl.n	2a5a2 <mem_manage_fault.constprop.0+0x1e>
			if (from_hard_fault != 0) {
   2a598:	b118      	cbz	r0, 2a5a2 <mem_manage_fault.constprop.0+0x1e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   2a59a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2a59c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   2a5a0:	629a      	str	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   2a5a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   2a5a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   2a5a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2a5a8:	06d0      	lsls	r0, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   2a5aa:	bf58      	it	pl
   2a5ac:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   2a5ae:	4b07      	ldr	r3, [pc, #28]	; (2a5cc <mem_manage_fault.constprop.0+0x48>)
   2a5b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2a5b2:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   2a5b4:	bf42      	ittt	mi
   2a5b6:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   2a5b8:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   2a5bc:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   2a5be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   2a5c0:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   2a5c2:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   2a5c6:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   2a5c8:	7008      	strb	r0, [r1, #0]
}
   2a5ca:	4770      	bx	lr
   2a5cc:	e000ed00 	.word	0xe000ed00

0002a5d0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   2a5d0:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   2a5d2:	4b49      	ldr	r3, [pc, #292]	; (2a6f8 <z_arm_fault+0x128>)
   2a5d4:	685b      	ldr	r3, [r3, #4]
{
   2a5d6:	b08a      	sub	sp, #40	; 0x28
   2a5d8:	4606      	mov	r6, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   2a5da:	f3c3 0308 	ubfx	r3, r3, #0, #9
   2a5de:	2500      	movs	r5, #0
   2a5e0:	f385 8811 	msr	BASEPRI, r5
   2a5e4:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   2a5e8:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
   2a5ec:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
   2a5f0:	d111      	bne.n	2a616 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   2a5f2:	f002 000c 	and.w	r0, r2, #12
   2a5f6:	2808      	cmp	r0, #8
   2a5f8:	d00d      	beq.n	2a616 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   2a5fa:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
   2a5fc:	bf4c      	ite	mi
   2a5fe:	460e      	movmi	r6, r1
			*nested_exc = true;
   2a600:	2501      	movpl	r5, #1
	*recoverable = false;
   2a602:	2200      	movs	r2, #0
	switch (fault) {
   2a604:	3b03      	subs	r3, #3
	*recoverable = false;
   2a606:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
   2a60a:	2b03      	cmp	r3, #3
   2a60c:	d84c      	bhi.n	2a6a8 <z_arm_fault+0xd8>
   2a60e:	e8df f003 	tbb	[pc, r3]
   2a612:	6404      	.short	0x6404
   2a614:	6c68      	.short	0x6c68
		return NULL;
   2a616:	462e      	mov	r6, r5
   2a618:	e7f3      	b.n	2a602 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   2a61a:	4b37      	ldr	r3, [pc, #220]	; (2a6f8 <z_arm_fault+0x128>)
   2a61c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2a61e:	0791      	lsls	r1, r2, #30
   2a620:	d442      	bmi.n	2a6a8 <z_arm_fault+0xd8>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   2a622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2a624:	2a00      	cmp	r2, #0
   2a626:	db3f      	blt.n	2a6a8 <z_arm_fault+0xd8>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   2a628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2a62a:	0052      	lsls	r2, r2, #1
   2a62c:	d53c      	bpl.n	2a6a8 <z_arm_fault+0xd8>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   2a62e:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   2a630:	69b1      	ldr	r1, [r6, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   2a632:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   2a636:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   2a638:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2a63c:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   2a640:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   2a642:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   2a646:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   2a64a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   2a64c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2a650:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   2a654:	f64d 7202 	movw	r2, #57090	; 0xdf02
   2a658:	4291      	cmp	r1, r2
   2a65a:	d008      	beq.n	2a66e <z_arm_fault+0x9e>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   2a65c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2a65e:	b2d2      	uxtb	r2, r2
   2a660:	b13a      	cbz	r2, 2a672 <z_arm_fault+0xa2>
			reason = mem_manage_fault(esf, 1, recoverable);
   2a662:	f10d 0107 	add.w	r1, sp, #7
   2a666:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   2a668:	f7ff ff8c 	bl	2a584 <mem_manage_fault.constprop.0>
   2a66c:	e00a      	b.n	2a684 <z_arm_fault+0xb4>
			reason = esf->basic.r0;
   2a66e:	6834      	ldr	r4, [r6, #0]
   2a670:	e01b      	b.n	2a6aa <z_arm_fault+0xda>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   2a672:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2a674:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
   2a678:	d006      	beq.n	2a688 <z_arm_fault+0xb8>
			reason = bus_fault(esf, 1, recoverable);
   2a67a:	f10d 0107 	add.w	r1, sp, #7
   2a67e:	2001      	movs	r0, #1
   2a680:	f7ff ff62 	bl	2a548 <bus_fault.constprop.0>
   2a684:	4604      	mov	r4, r0
   2a686:	e010      	b.n	2a6aa <z_arm_fault+0xda>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   2a688:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2a68a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   2a68e:	d30b      	bcc.n	2a6a8 <z_arm_fault+0xd8>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   2a690:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   2a692:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   2a694:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   2a696:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   2a698:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   2a69a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   2a69c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2a69e:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   2a6a2:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   2a6a6:	629a      	str	r2, [r3, #40]	; 0x28
		return NULL;
   2a6a8:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   2a6aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2a6ae:	b993      	cbnz	r3, 2a6d6 <z_arm_fault+0x106>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   2a6b0:	2220      	movs	r2, #32
   2a6b2:	4631      	mov	r1, r6
   2a6b4:	a802      	add	r0, sp, #8
   2a6b6:	f019 fe2f 	bl	44318 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   2a6ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2a6bc:	b1bd      	cbz	r5, 2a6ee <z_arm_fault+0x11e>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   2a6be:	f3c3 0208 	ubfx	r2, r3, #0, #9
   2a6c2:	b922      	cbnz	r2, 2a6ce <z_arm_fault+0xfe>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   2a6c4:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   2a6c8:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   2a6cc:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   2a6ce:	a902      	add	r1, sp, #8
   2a6d0:	4620      	mov	r0, r4
   2a6d2:	f019 fcc7 	bl	44064 <z_arm_fatal_error>
}
   2a6d6:	b00a      	add	sp, #40	; 0x28
   2a6d8:	bd70      	pop	{r4, r5, r6, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   2a6da:	f10d 0107 	add.w	r1, sp, #7
   2a6de:	2000      	movs	r0, #0
   2a6e0:	e7c2      	b.n	2a668 <z_arm_fault+0x98>
		reason = bus_fault(esf, 0, recoverable);
   2a6e2:	f10d 0107 	add.w	r1, sp, #7
   2a6e6:	2000      	movs	r0, #0
   2a6e8:	e7ca      	b.n	2a680 <z_arm_fault+0xb0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   2a6ea:	4b03      	ldr	r3, [pc, #12]	; (2a6f8 <z_arm_fault+0x128>)
   2a6ec:	e7d0      	b.n	2a690 <z_arm_fault+0xc0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   2a6ee:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   2a6f2:	f023 0301 	bic.w	r3, r3, #1
   2a6f6:	e7e9      	b.n	2a6cc <z_arm_fault+0xfc>
   2a6f8:	e000ed00 	.word	0xe000ed00

0002a6fc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   2a6fc:	4a02      	ldr	r2, [pc, #8]	; (2a708 <z_arm_fault_init+0xc>)
   2a6fe:	6953      	ldr	r3, [r2, #20]
   2a700:	f043 0310 	orr.w	r3, r3, #16
   2a704:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   2a706:	4770      	bx	lr
   2a708:	e000ed00 	.word	0xe000ed00

0002a70c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   2a70c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   2a710:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   2a714:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   2a716:	4672      	mov	r2, lr
	bl z_arm_fault
   2a718:	f7ff ff5a 	bl	2a5d0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   2a71c:	bd01      	pop	{r0, pc}
   2a71e:	bf00      	nop

0002a720 <z_arm_interrupt_init>:
   2a720:	4804      	ldr	r0, [pc, #16]	; (2a734 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   2a722:	2300      	movs	r3, #0
   2a724:	2120      	movs	r1, #32
   2a726:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   2a728:	3301      	adds	r3, #1
   2a72a:	2b30      	cmp	r3, #48	; 0x30
   2a72c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   2a730:	d1f9      	bne.n	2a726 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   2a732:	4770      	bx	lr
   2a734:	e000e100 	.word	0xe000e100

0002a738 <__start>:
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   2a738:	f7fe f83a 	bl	287b0 <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   2a73c:	2020      	movs	r0, #32
    msr BASEPRI, r0
   2a73e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   2a742:	4808      	ldr	r0, [pc, #32]	; (2a764 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   2a744:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   2a748:	1840      	adds	r0, r0, r1
    msr PSP, r0
   2a74a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   2a74e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   2a752:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   2a754:	4308      	orrs	r0, r1
    msr CONTROL, r0
   2a756:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   2a75a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   2a75e:	f7ff fe25 	bl	2a3ac <z_arm_prep_c>
   2a762:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   2a764:	20005810 	.word	0x20005810

0002a768 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   2a768:	4b08      	ldr	r3, [pc, #32]	; (2a78c <z_impl_k_thread_abort+0x24>)
   2a76a:	689b      	ldr	r3, [r3, #8]
   2a76c:	4283      	cmp	r3, r0
   2a76e:	d10b      	bne.n	2a788 <z_impl_k_thread_abort+0x20>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2a770:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   2a774:	b143      	cbz	r3, 2a788 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   2a776:	4b06      	ldr	r3, [pc, #24]	; (2a790 <z_impl_k_thread_abort+0x28>)
   2a778:	685a      	ldr	r2, [r3, #4]
   2a77a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   2a77e:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   2a780:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   2a782:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   2a786:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   2a788:	f016 bf1a 	b.w	415c0 <z_thread_abort>
   2a78c:	20003978 	.word	0x20003978
   2a790:	e000ed00 	.word	0xe000ed00

0002a794 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   2a794:	4b02      	ldr	r3, [pc, #8]	; (2a7a0 <z_arm_configure_static_mpu_regions+0xc>)
   2a796:	4a03      	ldr	r2, [pc, #12]	; (2a7a4 <z_arm_configure_static_mpu_regions+0x10>)
   2a798:	4803      	ldr	r0, [pc, #12]	; (2a7a8 <z_arm_configure_static_mpu_regions+0x14>)
   2a79a:	2101      	movs	r1, #1
   2a79c:	f000 b860 	b.w	2a860 <arm_core_mpu_configure_static_mpu_regions>
   2a7a0:	20040000 	.word	0x20040000
   2a7a4:	20000000 	.word	0x20000000
   2a7a8:	00049310 	.word	0x00049310

0002a7ac <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   2a7ac:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   2a7ae:	4e20      	ldr	r6, [pc, #128]	; (2a830 <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   2a7b0:	2500      	movs	r5, #0
   2a7b2:	428d      	cmp	r5, r1
   2a7b4:	da39      	bge.n	2a82a <mpu_configure_regions+0x7e>
		if (regions[i].size == 0U) {
   2a7b6:	6844      	ldr	r4, [r0, #4]
   2a7b8:	b374      	cbz	r4, 2a818 <mpu_configure_regions+0x6c>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   2a7ba:	b153      	cbz	r3, 2a7d2 <mpu_configure_regions+0x26>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   2a7bc:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   2a7c0:	ea14 0f0c 	tst.w	r4, ip
   2a7c4:	d12f      	bne.n	2a826 <mpu_configure_regions+0x7a>
		&&
   2a7c6:	2c1f      	cmp	r4, #31
   2a7c8:	d92d      	bls.n	2a826 <mpu_configure_regions+0x7a>
		((part->start & (part->size - 1U)) == 0U);
   2a7ca:	6807      	ldr	r7, [r0, #0]
		&&
   2a7cc:	ea1c 0f07 	tst.w	ip, r7
   2a7d0:	d129      	bne.n	2a826 <mpu_configure_regions+0x7a>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   2a7d2:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   2a7d4:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   2a7d6:	f8d0 c008 	ldr.w	ip, [r0, #8]
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   2a7da:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
   2a7de:	d91e      	bls.n	2a81e <mpu_configure_regions+0x72>
	if (size > (1UL << 31)) {
   2a7e0:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   2a7e4:	d81d      	bhi.n	2a822 <mpu_configure_regions+0x76>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   2a7e6:	3c01      	subs	r4, #1
   2a7e8:	fab4 f484 	clz	r4, r4
   2a7ec:	f1c4 041f 	rsb	r4, r4, #31
   2a7f0:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   2a7f2:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   2a7f6:	ea4c 0c04 	orr.w	ip, ip, r4
   2a7fa:	d814      	bhi.n	2a826 <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   2a7fc:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
   2a800:	4314      	orrs	r4, r2
   2a802:	f044 0410 	orr.w	r4, r4, #16
   2a806:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   2a80a:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   2a80e:	f04c 0401 	orr.w	r4, ip, #1
   2a812:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		if (reg_index == -EINVAL) {
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
   2a816:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
   2a818:	3501      	adds	r5, #1
   2a81a:	300c      	adds	r0, #12
   2a81c:	e7c9      	b.n	2a7b2 <mpu_configure_regions+0x6>
		return REGION_32B;
   2a81e:	2408      	movs	r4, #8
   2a820:	e7e7      	b.n	2a7f2 <mpu_configure_regions+0x46>
		return REGION_4G;
   2a822:	243e      	movs	r4, #62	; 0x3e
   2a824:	e7e5      	b.n	2a7f2 <mpu_configure_regions+0x46>
			return -EINVAL;
   2a826:	f06f 0215 	mvn.w	r2, #21
	}

	return reg_index;
}
   2a82a:	4610      	mov	r0, r2
   2a82c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a82e:	bf00      	nop
   2a830:	e000ed00 	.word	0xe000ed00

0002a834 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   2a834:	4b04      	ldr	r3, [pc, #16]	; (2a848 <arm_core_mpu_enable+0x14>)
   2a836:	2205      	movs	r2, #5
   2a838:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   2a83c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2a840:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   2a844:	4770      	bx	lr
   2a846:	bf00      	nop
   2a848:	e000ed00 	.word	0xe000ed00

0002a84c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   2a84c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   2a850:	4b02      	ldr	r3, [pc, #8]	; (2a85c <arm_core_mpu_disable+0x10>)
   2a852:	2200      	movs	r2, #0
   2a854:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   2a858:	4770      	bx	lr
   2a85a:	bf00      	nop
   2a85c:	e000ed00 	.word	0xe000ed00

0002a860 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   2a860:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   2a862:	4c03      	ldr	r4, [pc, #12]	; (2a870 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   2a864:	2301      	movs	r3, #1
   2a866:	7822      	ldrb	r2, [r4, #0]
   2a868:	f7ff ffa0 	bl	2a7ac <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   2a86c:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   2a86e:	bd10      	pop	{r4, pc}
   2a870:	20003a6a 	.word	0x20003a6a

0002a874 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   2a874:	4914      	ldr	r1, [pc, #80]	; (2a8c8 <z_arm_mpu_init+0x54>)
   2a876:	6808      	ldr	r0, [r1, #0]
   2a878:	2808      	cmp	r0, #8
{
   2a87a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   2a87c:	d821      	bhi.n	2a8c2 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   2a87e:	f7ff ffe5 	bl	2a84c <arm_core_mpu_disable>
   2a882:	4c12      	ldr	r4, [pc, #72]	; (2a8cc <z_arm_mpu_init+0x58>)
   2a884:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   2a886:	2200      	movs	r2, #0
   2a888:	4290      	cmp	r0, r2
   2a88a:	f101 010c 	add.w	r1, r1, #12
   2a88e:	d105      	bne.n	2a89c <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   2a890:	4b0f      	ldr	r3, [pc, #60]	; (2a8d0 <z_arm_mpu_init+0x5c>)
   2a892:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   2a894:	f7ff ffce 	bl	2a834 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   2a898:	2000      	movs	r0, #0
}
   2a89a:	bd10      	pop	{r4, pc}
   2a89c:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   2a8a0:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   2a8a4:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   2a8a8:	4313      	orrs	r3, r2
   2a8aa:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   2a8ae:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   2a8b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
   2a8b6:	f043 0301 	orr.w	r3, r3, #1
   2a8ba:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   2a8be:	3201      	adds	r2, #1
   2a8c0:	e7e2      	b.n	2a888 <z_arm_mpu_init+0x14>
		return -1;
   2a8c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a8c6:	e7e8      	b.n	2a89a <z_arm_mpu_init+0x26>
   2a8c8:	0004931c 	.word	0x0004931c
   2a8cc:	e000ed00 	.word	0xe000ed00
   2a8d0:	20003a6a 	.word	0x20003a6a

0002a8d4 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *ZRESTRICT str, size_t len,
	     const char *ZRESTRICT format, ...)
{
   2a8d4:	b40c      	push	{r2, r3}
   2a8d6:	b510      	push	{r4, lr}
   2a8d8:	b086      	sub	sp, #24

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
   2a8da:	b909      	cbnz	r1, 2a8e0 <snprintf+0xc>
		str = &dummy; /* write final NUL to dummy, can't change *s */
   2a8dc:	f10d 000b 	add.w	r0, sp, #11
   2a8e0:	2400      	movs	r4, #0
	}

	p.ptr = str;
	p.len = (int) len;
   2a8e2:	e9cd 0104 	strd	r0, r1, [sp, #16]

	va_start(vargs, format);
   2a8e6:	ab09      	add	r3, sp, #36	; 0x24
   2a8e8:	9a08      	ldr	r2, [sp, #32]
   2a8ea:	9400      	str	r4, [sp, #0]
   2a8ec:	a904      	add	r1, sp, #16
   2a8ee:	4805      	ldr	r0, [pc, #20]	; (2a904 <snprintf+0x30>)
   2a8f0:	9303      	str	r3, [sp, #12]
   2a8f2:	f7fd fd25 	bl	28340 <z_cbvprintf_impl>
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
	va_end(vargs);

	*(p.ptr) = 0;
   2a8f6:	9b04      	ldr	r3, [sp, #16]
   2a8f8:	701c      	strb	r4, [r3, #0]
	return r;
}
   2a8fa:	b006      	add	sp, #24
   2a8fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a900:	b002      	add	sp, #8
   2a902:	4770      	bx	lr
   2a904:	00044341 	.word	0x00044341

0002a908 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   2a908:	f04f 0320 	mov.w	r3, #32
   2a90c:	f3ef 8211 	mrs	r2, BASEPRI
   2a910:	f383 8812 	msr	BASEPRI_MAX, r3
   2a914:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   2a918:	4906      	ldr	r1, [pc, #24]	; (2a934 <nordicsemi_nrf52_init+0x2c>)
   2a91a:	2301      	movs	r3, #1
   2a91c:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   2a920:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   2a924:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   2a928:	f382 8811 	msr	BASEPRI, r2
   2a92c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   2a930:	2000      	movs	r0, #0
   2a932:	4770      	bx	lr
   2a934:	4001e000 	.word	0x4001e000

0002a938 <sys_arch_reboot>:
    *p_gpregret = val;
   2a938:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2a93c:	b2c0      	uxtb	r0, r0
   2a93e:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   2a942:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   2a946:	4905      	ldr	r1, [pc, #20]	; (2a95c <sys_arch_reboot+0x24>)
   2a948:	4b05      	ldr	r3, [pc, #20]	; (2a960 <sys_arch_reboot+0x28>)
   2a94a:	68ca      	ldr	r2, [r1, #12]
   2a94c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   2a950:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   2a952:	60cb      	str	r3, [r1, #12]
   2a954:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   2a958:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   2a95a:	e7fd      	b.n	2a958 <sys_arch_reboot+0x20>
   2a95c:	e000ed00 	.word	0xe000ed00
   2a960:	05fa0004 	.word	0x05fa0004

0002a964 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   2a964:	b120      	cbz	r0, 2a970 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   2a966:	4b03      	ldr	r3, [pc, #12]	; (2a974 <arch_busy_wait+0x10>)
   2a968:	0180      	lsls	r0, r0, #6
   2a96a:	f043 0301 	orr.w	r3, r3, #1
   2a96e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   2a970:	4770      	bx	lr
   2a972:	bf00      	nop
   2a974:	00048ee0 	.word	0x00048ee0

0002a978 <ecc_process>:

	bt_recv(buf);
}

static void ecc_process(struct k_work *work)
{
   2a978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a97a:	4e59      	ldr	r6, [pc, #356]	; (2aae0 <ecc_process+0x168>)
   2a97c:	f3bf 8f5b 	dmb	ish
   2a980:	6834      	ldr	r4, [r6, #0]
   2a982:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   2a986:	f014 0401 	ands.w	r4, r4, #1
   2a98a:	d050      	beq.n	2aa2e <ecc_process+0xb6>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   2a98c:	4f55      	ldr	r7, [pc, #340]	; (2aae4 <ecc_process+0x16c>)
   2a98e:	4c56      	ldr	r4, [pc, #344]	; (2aae8 <ecc_process+0x170>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
   2a990:	4d56      	ldr	r5, [pc, #344]	; (2aaec <ecc_process+0x174>)
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   2a992:	4857      	ldr	r0, [pc, #348]	; (2aaf0 <ecc_process+0x178>)
   2a994:	463a      	mov	r2, r7
   2a996:	4621      	mov	r1, r4
   2a998:	f018 fa71 	bl	42e7e <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
   2a99c:	b3e0      	cbz	r0, 2aa18 <ecc_process+0xa0>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
   2a99e:	2220      	movs	r2, #32
   2a9a0:	4629      	mov	r1, r5
   2a9a2:	4620      	mov	r0, r4
   2a9a4:	f019 fca8 	bl	442f8 <memcmp>
   2a9a8:	2800      	cmp	r0, #0
   2a9aa:	d0f2      	beq.n	2a992 <ecc_process+0x1a>
	return 0;
   2a9ac:	2700      	movs	r7, #0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   2a9ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2a9b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a9b6:	2001      	movs	r0, #1
   2a9b8:	f000 fa70 	bl	2ae9c <bt_buf_get_rx>
   2a9bc:	f100 0508 	add.w	r5, r0, #8
   2a9c0:	2102      	movs	r1, #2
   2a9c2:	4604      	mov	r4, r0
   2a9c4:	4628      	mov	r0, r5
   2a9c6:	f01c fc02 	bl	471ce <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   2a9ca:	233e      	movs	r3, #62	; 0x3e
   2a9cc:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   2a9ce:	2342      	movs	r3, #66	; 0x42
   2a9d0:	7043      	strb	r3, [r0, #1]
   2a9d2:	2101      	movs	r1, #1
   2a9d4:	4628      	mov	r0, r5
   2a9d6:	f01c fbfa 	bl	471ce <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   2a9da:	2308      	movs	r3, #8
   2a9dc:	7003      	strb	r3, [r0, #0]
   2a9de:	2141      	movs	r1, #65	; 0x41
   2a9e0:	4628      	mov	r0, r5
   2a9e2:	f01c fbf4 	bl	471ce <net_buf_simple_add>
   2a9e6:	4605      	mov	r5, r0
	evt->status = status;
   2a9e8:	f800 7b01 	strb.w	r7, [r0], #1
	if (status) {
   2a9ec:	b1b7      	cbz	r7, 2aa1c <ecc_process+0xa4>
		(void)memset(evt->key, 0, sizeof(evt->key));
   2a9ee:	2240      	movs	r2, #64	; 0x40
   2a9f0:	2100      	movs	r1, #0
   2a9f2:	f019 fc9c 	bl	4432e <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2a9f6:	f3bf 8f5b 	dmb	ish
   2a9fa:	e856 3f00 	ldrex	r3, [r6]
   2a9fe:	f023 0301 	bic.w	r3, r3, #1
   2aa02:	e846 3200 	strex	r2, r3, [r6]
   2aa06:	2a00      	cmp	r2, #0
   2aa08:	d1f7      	bne.n	2a9fa <ecc_process+0x82>
   2aa0a:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   2aa0e:	4620      	mov	r0, r4
	} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
		emulate_le_generate_dhkey();
	} else {
		__ASSERT(0, "Unhandled ECC command");
	}
}
   2aa10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_recv(buf);
   2aa14:	f000 be92 	b.w	2b73c <bt_recv>
			return BT_HCI_ERR_UNSPECIFIED;
   2aa18:	271f      	movs	r7, #31
   2aa1a:	e7c8      	b.n	2a9ae <ecc_process+0x36>
		sys_memcpy_swap(evt->key, ecc.public_key_be, BT_PUB_KEY_COORD_LEN);
   2aa1c:	4934      	ldr	r1, [pc, #208]	; (2aaf0 <ecc_process+0x178>)
   2aa1e:	f019 fcf8 	bl	44412 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[BT_PUB_KEY_COORD_LEN],
   2aa22:	3120      	adds	r1, #32
   2aa24:	f105 0021 	add.w	r0, r5, #33	; 0x21
   2aa28:	f019 fcf3 	bl	44412 <sys_memcpy_swap.constprop.0>
   2aa2c:	e7e3      	b.n	2a9f6 <ecc_process+0x7e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2aa2e:	f3bf 8f5b 	dmb	ish
   2aa32:	6833      	ldr	r3, [r6, #0]
   2aa34:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
   2aa38:	079b      	lsls	r3, r3, #30
   2aa3a:	d550      	bpl.n	2aade <ecc_process+0x166>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
   2aa3c:	4929      	ldr	r1, [pc, #164]	; (2aae4 <ecc_process+0x16c>)
   2aa3e:	482c      	ldr	r0, [pc, #176]	; (2aaf0 <ecc_process+0x178>)
   2aa40:	f019 f8db 	bl	43bfa <uECC_valid_public_key>
	if (ret < 0) {
   2aa44:	2800      	cmp	r0, #0
   2aa46:	db11      	blt.n	2aa6c <ecc_process+0xf4>
   2aa48:	f3bf 8f5b 	dmb	ish
		ret = uECC_shared_secret(ecc.public_key_be,
   2aa4c:	4926      	ldr	r1, [pc, #152]	; (2aae8 <ecc_process+0x170>)
   2aa4e:	6833      	ldr	r3, [r6, #0]
   2aa50:	4826      	ldr	r0, [pc, #152]	; (2aaec <ecc_process+0x174>)
   2aa52:	f3bf 8f5b 	dmb	ish
   2aa56:	f013 0f04 	tst.w	r3, #4
   2aa5a:	f101 0220 	add.w	r2, r1, #32
   2aa5e:	4b21      	ldr	r3, [pc, #132]	; (2aae4 <ecc_process+0x16c>)
   2aa60:	bf18      	it	ne
   2aa62:	4601      	movne	r1, r0
   2aa64:	4610      	mov	r0, r2
   2aa66:	f018 fa59 	bl	42f1c <uECC_shared_secret>
   2aa6a:	4604      	mov	r4, r0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   2aa6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2aa70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2aa74:	2001      	movs	r0, #1
   2aa76:	f000 fa11 	bl	2ae9c <bt_buf_get_rx>
   2aa7a:	f100 0708 	add.w	r7, r0, #8
   2aa7e:	2102      	movs	r1, #2
   2aa80:	4605      	mov	r5, r0
   2aa82:	4638      	mov	r0, r7
   2aa84:	f01c fba3 	bl	471ce <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   2aa88:	233e      	movs	r3, #62	; 0x3e
   2aa8a:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   2aa8c:	2322      	movs	r3, #34	; 0x22
   2aa8e:	7043      	strb	r3, [r0, #1]
   2aa90:	2101      	movs	r1, #1
   2aa92:	4638      	mov	r0, r7
   2aa94:	f01c fb9b 	bl	471ce <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   2aa98:	2309      	movs	r3, #9
   2aa9a:	7003      	strb	r3, [r0, #0]
   2aa9c:	2121      	movs	r1, #33	; 0x21
   2aa9e:	4638      	mov	r0, r7
   2aaa0:	f01c fb95 	bl	471ce <net_buf_simple_add>
   2aaa4:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
   2aaa6:	3001      	adds	r0, #1
   2aaa8:	b99c      	cbnz	r4, 2aad2 <ecc_process+0x15a>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
   2aaaa:	221f      	movs	r2, #31
   2aaac:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   2aaae:	21ff      	movs	r1, #255	; 0xff
   2aab0:	2220      	movs	r2, #32
   2aab2:	f019 fc3c 	bl	4432e <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2aab6:	f3bf 8f5b 	dmb	ish
   2aaba:	e856 3f00 	ldrex	r3, [r6]
   2aabe:	f023 0302 	bic.w	r3, r3, #2
   2aac2:	e846 3200 	strex	r2, r3, [r6]
   2aac6:	2a00      	cmp	r2, #0
   2aac8:	d1f7      	bne.n	2aaba <ecc_process+0x142>
   2aaca:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   2aace:	4628      	mov	r0, r5
   2aad0:	e79e      	b.n	2aa10 <ecc_process+0x98>
		evt->status = 0U;
   2aad2:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
   2aad4:	4906      	ldr	r1, [pc, #24]	; (2aaf0 <ecc_process+0x178>)
		evt->status = 0U;
   2aad6:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
   2aad8:	f019 fc9b 	bl	44412 <sys_memcpy_swap.constprop.0>
   2aadc:	e7eb      	b.n	2aab6 <ecc_process+0x13e>
}
   2aade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2aae0:	20001cd8 	.word	0x20001cd8
   2aae4:	0004933c 	.word	0x0004933c
   2aae8:	20003a6b 	.word	0x20003a6b
   2aaec:	0004a7ca 	.word	0x0004a7ca
   2aaf0:	20003a8b 	.word	0x20003a8b

0002aaf4 <le_gen_dhkey>:
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
}

static uint8_t le_gen_dhkey(uint8_t *key, uint8_t key_type)
{
   2aaf4:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2aaf6:	4c21      	ldr	r4, [pc, #132]	; (2ab7c <le_gen_dhkey+0x88>)
   2aaf8:	f3bf 8f5b 	dmb	ish
   2aafc:	6823      	ldr	r3, [r4, #0]
   2aafe:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   2ab02:	07da      	lsls	r2, r3, #31
{
   2ab04:	4606      	mov	r6, r0
   2ab06:	460d      	mov	r5, r1
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   2ab08:	d501      	bpl.n	2ab0e <le_gen_dhkey+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   2ab0a:	200c      	movs	r0, #12
			  key_type == BT_HCI_LE_KEY_TYPE_DEBUG);

	bt_long_wq_submit(&ecc_work);

	return BT_HCI_ERR_SUCCESS;
}
   2ab0c:	bd70      	pop	{r4, r5, r6, pc}
	if (key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   2ab0e:	2901      	cmp	r1, #1
   2ab10:	d831      	bhi.n	2ab76 <le_gen_dhkey+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2ab12:	f3bf 8f5b 	dmb	ish
   2ab16:	e854 3f00 	ldrex	r3, [r4]
   2ab1a:	f043 0202 	orr.w	r2, r3, #2
   2ab1e:	e844 2100 	strex	r1, r2, [r4]
   2ab22:	2900      	cmp	r1, #0
   2ab24:	d1f7      	bne.n	2ab16 <le_gen_dhkey+0x22>
   2ab26:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
   2ab2a:	079b      	lsls	r3, r3, #30
   2ab2c:	d4ed      	bmi.n	2ab0a <le_gen_dhkey+0x16>
	sys_memcpy_swap(ecc.public_key_be, key, BT_PUB_KEY_COORD_LEN);
   2ab2e:	4814      	ldr	r0, [pc, #80]	; (2ab80 <le_gen_dhkey+0x8c>)
   2ab30:	4631      	mov	r1, r6
   2ab32:	f019 fc6e 	bl	44412 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.public_key_be[BT_PUB_KEY_COORD_LEN], &key[BT_PUB_KEY_COORD_LEN],
   2ab36:	4813      	ldr	r0, [pc, #76]	; (2ab84 <le_gen_dhkey+0x90>)
   2ab38:	f106 0120 	add.w	r1, r6, #32
   2ab3c:	f019 fc69 	bl	44412 <sys_memcpy_swap.constprop.0>
   2ab40:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
   2ab44:	b175      	cbz	r5, 2ab64 <le_gen_dhkey+0x70>
   2ab46:	e854 3f00 	ldrex	r3, [r4]
   2ab4a:	f043 0304 	orr.w	r3, r3, #4
   2ab4e:	e844 3200 	strex	r2, r3, [r4]
   2ab52:	2a00      	cmp	r2, #0
   2ab54:	d1f7      	bne.n	2ab46 <le_gen_dhkey+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2ab56:	f3bf 8f5b 	dmb	ish
	bt_long_wq_submit(&ecc_work);
   2ab5a:	480b      	ldr	r0, [pc, #44]	; (2ab88 <le_gen_dhkey+0x94>)
   2ab5c:	f000 f962 	bl	2ae24 <bt_long_wq_submit>
   2ab60:	2000      	movs	r0, #0
   2ab62:	e7d3      	b.n	2ab0c <le_gen_dhkey+0x18>
   2ab64:	e854 3f00 	ldrex	r3, [r4]
   2ab68:	f023 0304 	bic.w	r3, r3, #4
   2ab6c:	e844 3200 	strex	r2, r3, [r4]
   2ab70:	2a00      	cmp	r2, #0
   2ab72:	d0f0      	beq.n	2ab56 <le_gen_dhkey+0x62>
   2ab74:	e7f6      	b.n	2ab64 <le_gen_dhkey+0x70>
		return BT_HCI_ERR_INVALID_PARAM;
   2ab76:	2012      	movs	r0, #18
   2ab78:	e7c8      	b.n	2ab0c <le_gen_dhkey+0x18>
   2ab7a:	bf00      	nop
   2ab7c:	20001cd8 	.word	0x20001cd8
   2ab80:	20003a8b 	.word	0x20003a8b
   2ab84:	20003aab 	.word	0x20003aab
   2ab88:	20000374 	.word	0x20000374

0002ab8c <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
   2ab8c:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   2ab8e:	7d06      	ldrb	r6, [r0, #20]
   2ab90:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
   2ab92:	b976      	cbnz	r6, 2abb2 <bt_hci_ecc_send+0x26>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
   2ab94:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
   2ab96:	881d      	ldrh	r5, [r3, #0]
   2ab98:	f242 0226 	movw	r2, #8230	; 0x2026
   2ab9c:	4295      	cmp	r5, r2
   2ab9e:	d045      	beq.n	2ac2c <bt_hci_ecc_send+0xa0>
   2aba0:	d80f      	bhi.n	2abc2 <bt_hci_ecc_send+0x36>
   2aba2:	f242 0201 	movw	r2, #8193	; 0x2001
   2aba6:	4295      	cmp	r5, r2
   2aba8:	d04f      	beq.n	2ac4a <bt_hci_ecc_send+0xbe>
   2abaa:	f242 0325 	movw	r3, #8229	; 0x2025
   2abae:	429d      	cmp	r5, r3
   2abb0:	d013      	beq.n	2abda <bt_hci_ecc_send+0x4e>
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
   2abb2:	4b2a      	ldr	r3, [pc, #168]	; (2ac5c <bt_hci_ecc_send+0xd0>)
   2abb4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   2abb8:	4620      	mov	r0, r4
   2abba:	695b      	ldr	r3, [r3, #20]
}
   2abbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
   2abc0:	4718      	bx	r3
		switch (sys_le16_to_cpu(chdr->opcode)) {
   2abc2:	f242 035e 	movw	r3, #8286	; 0x205e
   2abc6:	429d      	cmp	r5, r3
   2abc8:	d1f3      	bne.n	2abb2 <bt_hci_ecc_send+0x26>
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
   2abca:	2103      	movs	r1, #3
   2abcc:	3008      	adds	r0, #8
   2abce:	f01c fb1d 	bl	4720c <net_buf_simple_pull>
	cmd = (void *)buf->data;
   2abd2:	68a0      	ldr	r0, [r4, #8]
	status = le_gen_dhkey(cmd->key, cmd->key_type);
   2abd4:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   2abd8:	e02e      	b.n	2ac38 <bt_hci_ecc_send+0xac>
   2abda:	2103      	movs	r1, #3
   2abdc:	3008      	adds	r0, #8
   2abde:	f01c fb15 	bl	4720c <net_buf_simple_pull>
	net_buf_unref(buf);
   2abe2:	4620      	mov	r0, r4
   2abe4:	f011 fb94 	bl	3c310 <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2abe8:	f3bf 8f5b 	dmb	ish
   2abec:	4b1c      	ldr	r3, [pc, #112]	; (2ac60 <bt_hci_ecc_send+0xd4>)
   2abee:	681a      	ldr	r2, [r3, #0]
   2abf0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
   2abf4:	0792      	lsls	r2, r2, #30
   2abf6:	d507      	bpl.n	2ac08 <bt_hci_ecc_send+0x7c>
		status = BT_HCI_ERR_CMD_DISALLOWED;
   2abf8:	260c      	movs	r6, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
   2abfa:	4631      	mov	r1, r6
   2abfc:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
   2ac00:	f019 fbe3 	bl	443ca <send_cmd_status>
}
   2ac04:	2000      	movs	r0, #0
   2ac06:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2ac08:	f3bf 8f5b 	dmb	ish
   2ac0c:	e853 2f00 	ldrex	r2, [r3]
   2ac10:	f042 0101 	orr.w	r1, r2, #1
   2ac14:	e843 1000 	strex	r0, r1, [r3]
   2ac18:	2800      	cmp	r0, #0
   2ac1a:	d1f7      	bne.n	2ac0c <bt_hci_ecc_send+0x80>
   2ac1c:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
   2ac20:	07d3      	lsls	r3, r2, #31
   2ac22:	d4e9      	bmi.n	2abf8 <bt_hci_ecc_send+0x6c>
		bt_long_wq_submit(&ecc_work);
   2ac24:	480f      	ldr	r0, [pc, #60]	; (2ac64 <bt_hci_ecc_send+0xd8>)
   2ac26:	f000 f8fd 	bl	2ae24 <bt_long_wq_submit>
		status = BT_HCI_ERR_SUCCESS;
   2ac2a:	e7e6      	b.n	2abfa <bt_hci_ecc_send+0x6e>
   2ac2c:	2103      	movs	r1, #3
   2ac2e:	3008      	adds	r0, #8
   2ac30:	f01c faec 	bl	4720c <net_buf_simple_pull>
	status = le_gen_dhkey(cmd->key, BT_HCI_LE_KEY_TYPE_GENERATED);
   2ac34:	68a0      	ldr	r0, [r4, #8]
   2ac36:	4631      	mov	r1, r6
   2ac38:	f7ff ff5c 	bl	2aaf4 <le_gen_dhkey>
   2ac3c:	4606      	mov	r6, r0
	net_buf_unref(buf);
   2ac3e:	4620      	mov	r0, r4
   2ac40:	f011 fb66 	bl	3c310 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
   2ac44:	4631      	mov	r1, r6
   2ac46:	4628      	mov	r0, r5
   2ac48:	e7da      	b.n	2ac00 <bt_hci_ecc_send+0x74>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
   2ac4a:	78da      	ldrb	r2, [r3, #3]
   2ac4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   2ac50:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
   2ac52:	791a      	ldrb	r2, [r3, #4]
   2ac54:	f022 0201 	bic.w	r2, r2, #1
   2ac58:	711a      	strb	r2, [r3, #4]
}
   2ac5a:	e7aa      	b.n	2abb2 <bt_hci_ecc_send+0x26>
   2ac5c:	20000000 	.word	0x20000000
   2ac60:	20001cd8 	.word	0x20001cd8
   2ac64:	20000374 	.word	0x20000374

0002ac68 <save_id>:
static void save_id(struct k_work *work)
{
	int err;
	BT_INFO("Saving ID");
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   2ac68:	4903      	ldr	r1, [pc, #12]	; (2ac78 <save_id+0x10>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   2ac6a:	4804      	ldr	r0, [pc, #16]	; (2ac7c <save_id+0x14>)
   2ac6c:	79ca      	ldrb	r2, [r1, #7]
   2ac6e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   2ac72:	f7fe beb5 	b.w	299e0 <settings_save_one>
   2ac76:	bf00      	nop
   2ac78:	20000000 	.word	0x20000000
   2ac7c:	0004a7ea 	.word	0x0004a7ea

0002ac80 <set>:
{
   2ac80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2ac82:	4c1b      	ldr	r4, [pc, #108]	; (2acf0 <set+0x70>)
   2ac84:	f3bf 8f5b 	dmb	ish
   2ac88:	461f      	mov	r7, r3
   2ac8a:	6823      	ldr	r3, [r4, #0]
   2ac8c:	f3bf 8f5b 	dmb	ish
   2ac90:	4616      	mov	r6, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   2ac92:	07da      	lsls	r2, r3, #31
{
   2ac94:	4605      	mov	r5, r0
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   2ac96:	d524      	bpl.n	2ace2 <set+0x62>
	if (!name) {
   2ac98:	b918      	cbnz	r0, 2aca2 <set+0x22>
		return -ENOENT;
   2ac9a:	f06f 0001 	mvn.w	r0, #1
}
   2ac9e:	b003      	add	sp, #12
   2aca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	len = settings_name_next(name, &next);
   2aca2:	a901      	add	r1, sp, #4
   2aca4:	f017 ffcf 	bl	42c46 <settings_name_next>
	if (!strncmp(name, "id", len)) {
   2aca8:	4912      	ldr	r1, [pc, #72]	; (2acf4 <set+0x74>)
	len = settings_name_next(name, &next);
   2acaa:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
   2acac:	4628      	mov	r0, r5
   2acae:	f019 fb0f 	bl	442d0 <strncmp>
   2acb2:	2800      	cmp	r0, #0
   2acb4:	d1f1      	bne.n	2ac9a <set+0x1a>
   2acb6:	f3bf 8f5b 	dmb	ish
   2acba:	6823      	ldr	r3, [r4, #0]
   2acbc:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   2acc0:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   2acc4:	071b      	lsls	r3, r3, #28
   2acc6:	d40c      	bmi.n	2ace2 <set+0x62>
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   2acc8:	3ccc      	subs	r4, #204	; 0xcc
   2acca:	2207      	movs	r2, #7
   2accc:	4621      	mov	r1, r4
   2acce:	4638      	mov	r0, r7
   2acd0:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
   2acd2:	2806      	cmp	r0, #6
   2acd4:	d807      	bhi.n	2ace6 <set+0x66>
			(void)memset(bt_dev.id_addr, 0,
   2acd6:	2207      	movs	r2, #7
   2acd8:	4629      	mov	r1, r5
   2acda:	4620      	mov	r0, r4
   2acdc:	f019 fb27 	bl	4432e <memset>
			bt_dev.id_count = 0U;
   2ace0:	71e5      	strb	r5, [r4, #7]
		return 0;
   2ace2:	2000      	movs	r0, #0
   2ace4:	e7db      	b.n	2ac9e <set+0x1e>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   2ace6:	2307      	movs	r3, #7
   2ace8:	fbb0 f0f3 	udiv	r0, r0, r3
   2acec:	71e0      	strb	r0, [r4, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   2acee:	e7f8      	b.n	2ace2 <set+0x62>
   2acf0:	200000cc 	.word	0x200000cc
   2acf4:	0004a5ea 	.word	0x0004a5ea

0002acf8 <bt_settings_encode_key>:
{
   2acf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2acfc:	b088      	sub	sp, #32
		snprintk(path, path_size,
   2acfe:	799c      	ldrb	r4, [r3, #6]
{
   2ad00:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
   2ad04:	795d      	ldrb	r5, [r3, #5]
   2ad06:	791e      	ldrb	r6, [r3, #4]
   2ad08:	78df      	ldrb	r7, [r3, #3]
   2ad0a:	f893 c002 	ldrb.w	ip, [r3, #2]
   2ad0e:	f893 e001 	ldrb.w	lr, [r3, #1]
   2ad12:	781b      	ldrb	r3, [r3, #0]
	if (key) {
   2ad14:	f1b8 0f00 	cmp.w	r8, #0
   2ad18:	d00e      	beq.n	2ad38 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
   2ad1a:	e9cd 3806 	strd	r3, r8, [sp, #24]
   2ad1e:	e9cd ce04 	strd	ip, lr, [sp, #16]
   2ad22:	4613      	mov	r3, r2
   2ad24:	e9cd 6702 	strd	r6, r7, [sp, #8]
   2ad28:	e9cd 4500 	strd	r4, r5, [sp]
   2ad2c:	4a08      	ldr	r2, [pc, #32]	; (2ad50 <bt_settings_encode_key+0x58>)
   2ad2e:	f017 f958 	bl	41fe2 <snprintk>
}
   2ad32:	b008      	add	sp, #32
   2ad34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
   2ad38:	e9cd e305 	strd	lr, r3, [sp, #20]
   2ad3c:	e9cd 7c03 	strd	r7, ip, [sp, #12]
   2ad40:	4613      	mov	r3, r2
   2ad42:	e9cd 5601 	strd	r5, r6, [sp, #4]
   2ad46:	4a03      	ldr	r2, [pc, #12]	; (2ad54 <bt_settings_encode_key+0x5c>)
   2ad48:	9400      	str	r4, [sp, #0]
   2ad4a:	f017 f94a 	bl	41fe2 <snprintk>
}
   2ad4e:	e7f0      	b.n	2ad32 <bt_settings_encode_key+0x3a>
   2ad50:	0004a7f0 	.word	0x0004a7f0
   2ad54:	0004a814 	.word	0x0004a814

0002ad58 <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
   2ad58:	4801      	ldr	r0, [pc, #4]	; (2ad60 <bt_settings_save_id+0x8>)
   2ad5a:	f016 b8a3 	b.w	40ea4 <k_work_submit>
   2ad5e:	bf00      	nop
   2ad60:	20000384 	.word	0x20000384

0002ad64 <commit>:
}

static int commit(void)
{
   2ad64:	b570      	push	{r4, r5, r6, lr}
   2ad66:	4c1a      	ldr	r4, [pc, #104]	; (2add0 <commit+0x6c>)
   2ad68:	f3bf 8f5b 	dmb	ish
   2ad6c:	6823      	ldr	r3, [r4, #0]
   2ad6e:	f3bf 8f5b 	dmb	ish
	int err;

	BT_DBG("");

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   2ad72:	f013 0f01 	tst.w	r3, #1
   2ad76:	4625      	mov	r5, r4
   2ad78:	d01d      	beq.n	2adb6 <commit+0x52>
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
   2ad7a:	f814 3cc5 	ldrb.w	r3, [r4, #-197]
   2ad7e:	f1a4 06cc 	sub.w	r6, r4, #204	; 0xcc
   2ad82:	b1d3      	cbz	r3, 2adba <commit+0x56>
   2ad84:	f3bf 8f5b 	dmb	ish
   2ad88:	6823      	ldr	r3, [r4, #0]
   2ad8a:	f3bf 8f5b 	dmb	ish
			BT_ERR("Unable to setup an identity address");
			return err;
		}
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2ad8e:	075a      	lsls	r2, r3, #29
   2ad90:	d401      	bmi.n	2ad96 <commit+0x32>
		bt_finalize_init();
   2ad92:	f000 fd7f 	bl	2b894 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2ad96:	f3bf 8f5b 	dmb	ish
   2ad9a:	e855 3f00 	ldrex	r3, [r5]
   2ad9e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
   2ada2:	e845 2100 	strex	r1, r2, [r5]
   2ada6:	2900      	cmp	r1, #0
   2ada8:	d1f7      	bne.n	2ad9a <commit+0x36>
   2adaa:	f3bf 8f5b 	dmb	ish
	}

	/* If any part of the Identity Information of the device has been
	 * generated this Identity needs to be saved persistently.
	 */
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   2adae:	03db      	lsls	r3, r3, #15
   2adb0:	d501      	bpl.n	2adb6 <commit+0x52>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
   2adb2:	f7ff ffd1 	bl	2ad58 <bt_settings_save_id>
		return 0;
   2adb6:	2000      	movs	r0, #0
   2adb8:	e009      	b.n	2adce <commit+0x6a>
		err = bt_setup_public_id_addr();
   2adba:	f001 f811 	bl	2bde0 <bt_setup_public_id_addr>
		if (err) {
   2adbe:	b930      	cbnz	r0, 2adce <commit+0x6a>
	if (!bt_dev.id_count) {
   2adc0:	79f3      	ldrb	r3, [r6, #7]
   2adc2:	2b00      	cmp	r3, #0
   2adc4:	d1de      	bne.n	2ad84 <commit+0x20>
		err = bt_setup_random_id_addr();
   2adc6:	f001 f84b 	bl	2be60 <bt_setup_random_id_addr>
		if (err) {
   2adca:	2800      	cmp	r0, #0
   2adcc:	d0da      	beq.n	2ad84 <commit+0x20>
	}

	return 0;
}
   2adce:	bd70      	pop	{r4, r5, r6, pc}
   2add0:	200000cc 	.word	0x200000cc

0002add4 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   2add4:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};

	k_work_queue_init(&bt_long_wq);
   2add6:	4d0a      	ldr	r5, [pc, #40]	; (2ae00 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   2add8:	4b0a      	ldr	r3, [pc, #40]	; (2ae04 <long_wq_init+0x30>)
{
   2adda:	b085      	sub	sp, #20
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   2addc:	2400      	movs	r4, #0
	k_work_queue_init(&bt_long_wq);
   2adde:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   2ade0:	9302      	str	r3, [sp, #8]
   2ade2:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   2ade4:	f01d fa51 	bl	4828a <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   2ade8:	ab02      	add	r3, sp, #8
   2adea:	9300      	str	r3, [sp, #0]
   2adec:	4628      	mov	r0, r5
   2adee:	4906      	ldr	r1, [pc, #24]	; (2ae08 <long_wq_init+0x34>)
   2adf0:	230a      	movs	r3, #10
   2adf2:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   2adf6:	f016 f85b 	bl	40eb0 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   2adfa:	4620      	mov	r0, r4
   2adfc:	b005      	add	sp, #20
   2adfe:	bd30      	pop	{r4, r5, pc}
   2ae00:	20001078 	.word	0x20001078
   2ae04:	0004a835 	.word	0x0004a835
   2ae08:	200040b8 	.word	0x200040b8

0002ae0c <bt_long_wq_schedule>:
{
   2ae0c:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   2ae0e:	4801      	ldr	r0, [pc, #4]	; (2ae14 <bt_long_wq_schedule+0x8>)
   2ae10:	f016 b886 	b.w	40f20 <k_work_schedule_for_queue>
   2ae14:	20001078 	.word	0x20001078

0002ae18 <bt_long_wq_reschedule>:
{
   2ae18:	4601      	mov	r1, r0
	return k_work_reschedule_for_queue(&bt_long_wq, dwork, timeout);
   2ae1a:	4801      	ldr	r0, [pc, #4]	; (2ae20 <bt_long_wq_reschedule+0x8>)
   2ae1c:	f016 b8b0 	b.w	40f80 <k_work_reschedule_for_queue>
   2ae20:	20001078 	.word	0x20001078

0002ae24 <bt_long_wq_submit>:
{
   2ae24:	4601      	mov	r1, r0
	return k_work_submit_to_queue(&bt_long_wq, work);
   2ae26:	4801      	ldr	r0, [pc, #4]	; (2ae2c <bt_long_wq_submit+0x8>)
   2ae28:	f01d ba1e 	b.w	48268 <k_work_submit_to_queue>
   2ae2c:	20001078 	.word	0x20001078

0002ae30 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   2ae30:	b430      	push	{r4, r5}
   2ae32:	4603      	mov	r3, r0
   2ae34:	4608      	mov	r0, r1
	switch (src->type) {
   2ae36:	781a      	ldrb	r2, [r3, #0]
   2ae38:	2a01      	cmp	r2, #1
   2ae3a:	d013      	beq.n	2ae64 <uuid_to_uuid128+0x34>
   2ae3c:	2a02      	cmp	r2, #2
   2ae3e:	d026      	beq.n	2ae8e <uuid_to_uuid128+0x5e>
   2ae40:	b972      	cbnz	r2, 2ae60 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   2ae42:	4a15      	ldr	r2, [pc, #84]	; (2ae98 <uuid_to_uuid128+0x68>)
   2ae44:	f102 0410 	add.w	r4, r2, #16
   2ae48:	f852 5b04 	ldr.w	r5, [r2], #4
   2ae4c:	f841 5b04 	str.w	r5, [r1], #4
   2ae50:	42a2      	cmp	r2, r4
   2ae52:	d1f9      	bne.n	2ae48 <uuid_to_uuid128+0x18>
   2ae54:	7812      	ldrb	r2, [r2, #0]
   2ae56:	700a      	strb	r2, [r1, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   2ae58:	885b      	ldrh	r3, [r3, #2]
	dst[0] = val;
   2ae5a:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   2ae5c:	0a1b      	lsrs	r3, r3, #8
   2ae5e:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   2ae60:	bc30      	pop	{r4, r5}
   2ae62:	4770      	bx	lr
		*dst = uuid128_base;
   2ae64:	4a0c      	ldr	r2, [pc, #48]	; (2ae98 <uuid_to_uuid128+0x68>)
   2ae66:	f102 0410 	add.w	r4, r2, #16
   2ae6a:	f852 5b04 	ldr.w	r5, [r2], #4
   2ae6e:	f841 5b04 	str.w	r5, [r1], #4
   2ae72:	42a2      	cmp	r2, r4
   2ae74:	d1f9      	bne.n	2ae6a <uuid_to_uuid128+0x3a>
   2ae76:	7812      	ldrb	r2, [r2, #0]
   2ae78:	700a      	strb	r2, [r1, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   2ae7a:	685b      	ldr	r3, [r3, #4]
	dst[0] = val;
   2ae7c:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   2ae7e:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   2ae82:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   2ae84:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
   2ae86:	0a1b      	lsrs	r3, r3, #8
   2ae88:	7382      	strb	r2, [r0, #14]
   2ae8a:	7403      	strb	r3, [r0, #16]
}
   2ae8c:	e7e8      	b.n	2ae60 <uuid_to_uuid128+0x30>
}
   2ae8e:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
   2ae90:	2211      	movs	r2, #17
   2ae92:	4619      	mov	r1, r3
   2ae94:	f019 ba40 	b.w	44318 <memcpy>
   2ae98:	0004a83e 	.word	0x0004a83e

0002ae9c <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   2ae9c:	b538      	push	{r3, r4, r5, lr}
   2ae9e:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
   2aea0:	4805      	ldr	r0, [pc, #20]	; (2aeb8 <bt_buf_get_rx+0x1c>)
   2aea2:	f01c f932 	bl	4710a <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   2aea6:	4604      	mov	r4, r0
   2aea8:	b120      	cbz	r0, 2aeb4 <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
   2aeaa:	2100      	movs	r1, #0
   2aeac:	3008      	adds	r0, #8
   2aeae:	f01c f94b 	bl	47148 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   2aeb2:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   2aeb4:	4620      	mov	r0, r4
   2aeb6:	bd38      	pop	{r3, r4, r5, pc}
   2aeb8:	20000e4c 	.word	0x20000e4c

0002aebc <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   2aebc:	b510      	push	{r4, lr}
   2aebe:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   2aec0:	490a      	ldr	r1, [pc, #40]	; (2aeec <bt_buf_get_cmd_complete+0x30>)
{
   2aec2:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   2aec4:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
   2aec8:	b920      	cbnz	r0, 2aed4 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   2aeca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   2aece:	2001      	movs	r0, #1
   2aed0:	f7ff bfe4 	b.w	2ae9c <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   2aed4:	f01c f949 	bl	4716a <net_buf_ref>
   2aed8:	2301      	movs	r3, #1
		buf->len = 0U;
   2aeda:	2100      	movs	r1, #0
   2aedc:	7503      	strb	r3, [r0, #20]
   2aede:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
   2aee0:	4604      	mov	r4, r0
   2aee2:	3008      	adds	r0, #8
   2aee4:	f01c f930 	bl	47148 <net_buf_simple_reserve>
}
   2aee8:	4620      	mov	r0, r4
   2aeea:	bd10      	pop	{r4, pc}
   2aeec:	20000000 	.word	0x20000000

0002aef0 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   2aef0:	b570      	push	{r4, r5, r6, lr}
   2aef2:	4604      	mov	r4, r0
	switch (evt) {
   2aef4:	2c0f      	cmp	r4, #15
{
   2aef6:	460d      	mov	r5, r1
   2aef8:	4610      	mov	r0, r2
   2aefa:	4619      	mov	r1, r3
	switch (evt) {
   2aefc:	d805      	bhi.n	2af0a <bt_buf_get_evt+0x1a>
   2aefe:	2c0d      	cmp	r4, #13
   2af00:	d90d      	bls.n	2af1e <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   2af02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   2af06:	f7ff bfd9 	b.w	2aebc <bt_buf_get_cmd_complete>
	switch (evt) {
   2af0a:	2c13      	cmp	r4, #19
   2af0c:	d107      	bne.n	2af1e <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   2af0e:	480c      	ldr	r0, [pc, #48]	; (2af40 <bt_buf_get_evt+0x50>)
   2af10:	f01c f8fb 	bl	4710a <net_buf_alloc_fixed>
			if (buf) {
   2af14:	4604      	mov	r4, r0
   2af16:	b938      	cbnz	r0, 2af28 <bt_buf_get_evt+0x38>
{
   2af18:	2400      	movs	r4, #0
}
   2af1a:	4620      	mov	r0, r4
   2af1c:	bd70      	pop	{r4, r5, r6, pc}
   2af1e:	4602      	mov	r2, r0
   2af20:	460b      	mov	r3, r1
		if (discardable) {
   2af22:	b145      	cbz	r5, 2af36 <bt_buf_get_evt+0x46>
   2af24:	4807      	ldr	r0, [pc, #28]	; (2af44 <bt_buf_get_evt+0x54>)
   2af26:	e7f3      	b.n	2af10 <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   2af28:	2100      	movs	r1, #0
   2af2a:	3008      	adds	r0, #8
   2af2c:	f01c f90c 	bl	47148 <net_buf_simple_reserve>
   2af30:	2301      	movs	r3, #1
   2af32:	7523      	strb	r3, [r4, #20]
}
   2af34:	e7f1      	b.n	2af1a <bt_buf_get_evt+0x2a>
}
   2af36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   2af3a:	2001      	movs	r0, #1
   2af3c:	f7ff bfae 	b.w	2ae9c <bt_buf_get_rx>
   2af40:	20000e78 	.word	0x20000e78
   2af44:	20000dc8 	.word	0x20000dc8

0002af48 <hci_disconn_complete_prio>:
{
   2af48:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   2af4a:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   2af4c:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   2af50:	781b      	ldrb	r3, [r3, #0]
   2af52:	b963      	cbnz	r3, 2af6e <hci_disconn_complete_prio+0x26>
	conn = bt_conn_lookup_handle(handle);
   2af54:	4620      	mov	r0, r4
   2af56:	f001 fd13 	bl	2c980 <bt_conn_lookup_handle>
	if (!conn) {
   2af5a:	4605      	mov	r5, r0
   2af5c:	b940      	cbnz	r0, 2af70 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   2af5e:	4b08      	ldr	r3, [pc, #32]	; (2af80 <hci_disconn_complete_prio+0x38>)
   2af60:	881a      	ldrh	r2, [r3, #0]
   2af62:	b922      	cbnz	r2, 2af6e <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   2af64:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   2af68:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   2af6c:	8018      	strh	r0, [r3, #0]
}
   2af6e:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   2af70:	2101      	movs	r1, #1
   2af72:	f001 fd0d 	bl	2c990 <bt_conn_set_state>
	bt_conn_unref(conn);
   2af76:	4628      	mov	r0, r5
}
   2af78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   2af7c:	f01a b909 	b.w	45192 <bt_conn_unref>
   2af80:	200039b8 	.word	0x200039b8

0002af84 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   2af84:	b510      	push	{r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   2af86:	4c08      	ldr	r4, [pc, #32]	; (2afa8 <find_pending_connect.part.0+0x24>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   2af88:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   2af8a:	2205      	movs	r2, #5
   2af8c:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   2af90:	f001 ff02 	bl	2cd98 <bt_conn_lookup_state_le>
		if (!conn) {
   2af94:	b938      	cbnz	r0, 2afa6 <find_pending_connect.part.0+0x22>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   2af96:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   2af9a:	4904      	ldr	r1, [pc, #16]	; (2afac <find_pending_connect.part.0+0x28>)
}
   2af9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   2afa0:	2204      	movs	r2, #4
   2afa2:	f001 bef9 	b.w	2cd98 <bt_conn_lookup_state_le>
}
   2afa6:	bd10      	pop	{r4, pc}
   2afa8:	20000000 	.word	0x20000000
   2afac:	0004a7b0 	.word	0x0004a7b0

0002afb0 <hci_le_meta_event>:
{
   2afb0:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   2afb2:	2101      	movs	r1, #1
   2afb4:	4604      	mov	r4, r0
   2afb6:	3008      	adds	r0, #8
   2afb8:	f01c f930 	bl	4721c <net_buf_simple_pull_mem>
	err = handle_event_common(event, buf, handlers, num_handlers);
   2afbc:	4621      	mov	r1, r4
   2afbe:	4a03      	ldr	r2, [pc, #12]	; (2afcc <hci_le_meta_event+0x1c>)
   2afc0:	7800      	ldrb	r0, [r0, #0]
}
   2afc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = handle_event_common(event, buf, handlers, num_handlers);
   2afc6:	230a      	movs	r3, #10
   2afc8:	f019 bb70 	b.w	446ac <handle_event_common.isra.0>
   2afcc:	00049474 	.word	0x00049474

0002afd0 <hci_cmd_done>:
{
   2afd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2afd2:	4607      	mov	r7, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   2afd4:	7990      	ldrb	r0, [r2, #6]
{
   2afd6:	460e      	mov	r6, r1
   2afd8:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   2afda:	f011 f8d7 	bl	3c18c <net_buf_pool_get>
   2afde:	4b28      	ldr	r3, [pc, #160]	; (2b080 <hci_cmd_done+0xb0>)
   2afe0:	4283      	cmp	r3, r0
   2afe2:	d14b      	bne.n	2b07c <hci_cmd_done+0xac>
	if (cmd(buf)->opcode != opcode) {
   2afe4:	4620      	mov	r0, r4
   2afe6:	f011 f8d9 	bl	3c19c <net_buf_id>
   2afea:	4d26      	ldr	r5, [pc, #152]	; (2b084 <hci_cmd_done+0xb4>)
   2afec:	230c      	movs	r3, #12
   2afee:	fb03 5000 	mla	r0, r3, r0, r5
   2aff2:	8843      	ldrh	r3, [r0, #2]
   2aff4:	42bb      	cmp	r3, r7
   2aff6:	d141      	bne.n	2b07c <hci_cmd_done+0xac>
	if (bt_dev.sent_cmd) {
   2aff8:	4f23      	ldr	r7, [pc, #140]	; (2b088 <hci_cmd_done+0xb8>)
   2affa:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
   2affe:	b120      	cbz	r0, 2b00a <hci_cmd_done+0x3a>
		net_buf_unref(bt_dev.sent_cmd);
   2b000:	f011 f986 	bl	3c310 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   2b004:	2300      	movs	r3, #0
   2b006:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   2b00a:	4620      	mov	r0, r4
   2b00c:	f011 f8c6 	bl	3c19c <net_buf_id>
   2b010:	270c      	movs	r7, #12
   2b012:	fb07 5000 	mla	r0, r7, r0, r5
   2b016:	6843      	ldr	r3, [r0, #4]
   2b018:	b19b      	cbz	r3, 2b042 <hci_cmd_done+0x72>
   2b01a:	b996      	cbnz	r6, 2b042 <hci_cmd_done+0x72>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   2b01c:	4620      	mov	r0, r4
   2b01e:	f011 f8bd 	bl	3c19c <net_buf_id>
   2b022:	fb07 5000 	mla	r0, r7, r0, r5
	atomic_val_t mask = ATOMIC_MASK(bit);
   2b026:	2101      	movs	r1, #1
   2b028:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   2b02a:	e9d2 0300 	ldrd	r0, r3, [r2]
	if (val) {
   2b02e:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   2b030:	f003 071f 	and.w	r7, r3, #31
   2b034:	40b9      	lsls	r1, r7
	if (val) {
   2b036:	095b      	lsrs	r3, r3, #5
   2b038:	b1d2      	cbz	r2, 2b070 <hci_cmd_done+0xa0>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2b03a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2b03e:	f019 fab1 	bl	445a4 <atomic_or>
	if (cmd(buf)->sync) {
   2b042:	4620      	mov	r0, r4
   2b044:	f011 f8aa 	bl	3c19c <net_buf_id>
   2b048:	270c      	movs	r7, #12
   2b04a:	fb07 5000 	mla	r0, r7, r0, r5
   2b04e:	6883      	ldr	r3, [r0, #8]
   2b050:	b1a3      	cbz	r3, 2b07c <hci_cmd_done+0xac>
		cmd(buf)->status = status;
   2b052:	4620      	mov	r0, r4
   2b054:	f011 f8a2 	bl	3c19c <net_buf_id>
   2b058:	4378      	muls	r0, r7
   2b05a:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   2b05c:	4620      	mov	r0, r4
   2b05e:	f011 f89d 	bl	3c19c <net_buf_id>
   2b062:	fb07 5500 	mla	r5, r7, r0, r5
   2b066:	68a8      	ldr	r0, [r5, #8]
}
   2b068:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_impl_k_sem_give(sem);
   2b06c:	f015 bd7c 	b.w	40b68 <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2b070:	43c9      	mvns	r1, r1
   2b072:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2b076:	f019 fb30 	bl	446da <atomic_and.isra.0>
   2b07a:	e7e2      	b.n	2b042 <hci_cmd_done+0x72>
   2b07c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b07e:	bf00      	nop
   2b080:	20000e20 	.word	0x20000e20
   2b084:	20001cdc 	.word	0x20001cdc
   2b088:	20000000 	.word	0x20000000

0002b08c <hci_cmd_status>:
{
   2b08c:	b538      	push	{r3, r4, r5, lr}
   2b08e:	2104      	movs	r1, #4
   2b090:	4604      	mov	r4, r0
   2b092:	3008      	adds	r0, #8
   2b094:	f01c f8c2 	bl	4721c <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   2b098:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   2b09a:	7801      	ldrb	r1, [r0, #0]
   2b09c:	8840      	ldrh	r0, [r0, #2]
   2b09e:	4622      	mov	r2, r4
   2b0a0:	f7ff ff96 	bl	2afd0 <hci_cmd_done>
	if (ncmd) {
   2b0a4:	b125      	cbz	r5, 2b0b0 <hci_cmd_status+0x24>
   2b0a6:	4803      	ldr	r0, [pc, #12]	; (2b0b4 <hci_cmd_status+0x28>)
}
   2b0a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2b0ac:	f015 bd5c 	b.w	40b68 <z_impl_k_sem_give>
   2b0b0:	bd38      	pop	{r3, r4, r5, pc}
   2b0b2:	bf00      	nop
   2b0b4:	20000120 	.word	0x20000120

0002b0b8 <hci_cmd_complete>:
{
   2b0b8:	b538      	push	{r3, r4, r5, lr}
   2b0ba:	2103      	movs	r1, #3
   2b0bc:	4604      	mov	r4, r0
   2b0be:	3008      	adds	r0, #8
   2b0c0:	f01c f8ac 	bl	4721c <net_buf_simple_pull_mem>
	status = buf->data[0];
   2b0c4:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   2b0c6:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   2b0c8:	7819      	ldrb	r1, [r3, #0]
   2b0ca:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   2b0ce:	4622      	mov	r2, r4
   2b0d0:	f7ff ff7e 	bl	2afd0 <hci_cmd_done>
	if (ncmd) {
   2b0d4:	b125      	cbz	r5, 2b0e0 <hci_cmd_complete+0x28>
   2b0d6:	4803      	ldr	r0, [pc, #12]	; (2b0e4 <hci_cmd_complete+0x2c>)
}
   2b0d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2b0dc:	f015 bd44 	b.w	40b68 <z_impl_k_sem_give>
   2b0e0:	bd38      	pop	{r3, r4, r5, pc}
   2b0e2:	bf00      	nop
   2b0e4:	20000120 	.word	0x20000120

0002b0e8 <hci_tx_thread>:
{
   2b0e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   2b0ec:	4f3c      	ldr	r7, [pc, #240]	; (2b1e0 <hci_tx_thread+0xf8>)
		BT_ASSERT(err == 0);
   2b0ee:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 2b1e4 <hci_tx_thread+0xfc>
			ev_count += bt_conn_prepare_events(&events[1]);
   2b0f2:	f107 0914 	add.w	r9, r7, #20
		events[0].state = K_POLL_STATE_NOT_READY;
   2b0f6:	68fb      	ldr	r3, [r7, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   2b0f8:	4648      	mov	r0, r9
		events[0].state = K_POLL_STATE_NOT_READY;
   2b0fa:	f36f 3394 	bfc	r3, #14, #7
   2b0fe:	60fb      	str	r3, [r7, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   2b100:	f001 fc04 	bl	2c90c <bt_conn_prepare_events>
   2b104:	1c45      	adds	r5, r0, #1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   2b106:	4836      	ldr	r0, [pc, #216]	; (2b1e0 <hci_tx_thread+0xf8>)
   2b108:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b10c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b110:	4629      	mov	r1, r5
   2b112:	f016 fcd7 	bl	41ac4 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   2b116:	b160      	cbz	r0, 2b132 <hci_tx_thread+0x4a>
   2b118:	4933      	ldr	r1, [pc, #204]	; (2b1e8 <hci_tx_thread+0x100>)
   2b11a:	4834      	ldr	r0, [pc, #208]	; (2b1ec <hci_tx_thread+0x104>)
   2b11c:	f640 13d3 	movw	r3, #2515	; 0x9d3
   2b120:	4642      	mov	r2, r8
   2b122:	f017 fa51 	bl	425c8 <assert_print>
   2b126:	4040      	eors	r0, r0
   2b128:	f380 8811 	msr	BASEPRI, r0
   2b12c:	f04f 0003 	mov.w	r0, #3
   2b130:	df02      	svc	2
{
   2b132:	4e2b      	ldr	r6, [pc, #172]	; (2b1e0 <hci_tx_thread+0xf8>)
	for (; count; ev++, count--) {
   2b134:	b915      	cbnz	r5, 2b13c <hci_tx_thread+0x54>
	z_impl_k_yield();
   2b136:	f016 f9a1 	bl	4147c <z_impl_k_yield>
	while (1) {
   2b13a:	e7dc      	b.n	2b0f6 <hci_tx_thread+0xe>
		switch (ev->state) {
   2b13c:	68f3      	ldr	r3, [r6, #12]
   2b13e:	f3c3 3386 	ubfx	r3, r3, #14, #7
   2b142:	2b04      	cmp	r3, #4
   2b144:	d142      	bne.n	2b1cc <hci_tx_thread+0xe4>
			if (ev->tag == BT_EVENT_CMD_TX) {
   2b146:	7b33      	ldrb	r3, [r6, #12]
   2b148:	2b00      	cmp	r3, #0
   2b14a:	d142      	bne.n	2b1d2 <hci_tx_thread+0xea>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   2b14c:	4828      	ldr	r0, [pc, #160]	; (2b1f0 <hci_tx_thread+0x108>)
   2b14e:	2200      	movs	r2, #0
   2b150:	2300      	movs	r3, #0
   2b152:	f01b ffdf 	bl	47114 <net_buf_get>
	BT_ASSERT(buf);
   2b156:	4604      	mov	r4, r0
   2b158:	b960      	cbnz	r0, 2b174 <hci_tx_thread+0x8c>
   2b15a:	4926      	ldr	r1, [pc, #152]	; (2b1f4 <hci_tx_thread+0x10c>)
   2b15c:	4823      	ldr	r0, [pc, #140]	; (2b1ec <hci_tx_thread+0x104>)
   2b15e:	f640 136c 	movw	r3, #2412	; 0x96c
   2b162:	4642      	mov	r2, r8
   2b164:	f017 fa30 	bl	425c8 <assert_print>
   2b168:	4040      	eors	r0, r0
   2b16a:	f380 8811 	msr	BASEPRI, r0
   2b16e:	f04f 0003 	mov.w	r0, #3
   2b172:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   2b174:	f8df a080 	ldr.w	sl, [pc, #128]	; 2b1f8 <hci_tx_thread+0x110>
	return z_impl_k_sem_take(sem, timeout);
   2b178:	4820      	ldr	r0, [pc, #128]	; (2b1fc <hci_tx_thread+0x114>)
   2b17a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b17e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b182:	f015 fd17 	bl	40bb4 <z_impl_k_sem_take>
   2b186:	f8da 0138 	ldr.w	r0, [sl, #312]	; 0x138
   2b18a:	b120      	cbz	r0, 2b196 <hci_tx_thread+0xae>
		net_buf_unref(bt_dev.sent_cmd);
   2b18c:	f011 f8c0 	bl	3c310 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   2b190:	2300      	movs	r3, #0
   2b192:	f8ca 3138 	str.w	r3, [sl, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   2b196:	4620      	mov	r0, r4
   2b198:	f01b ffe7 	bl	4716a <net_buf_ref>
   2b19c:	f8ca 0138 	str.w	r0, [sl, #312]	; 0x138
		return bt_hci_ecc_send(buf);
   2b1a0:	4620      	mov	r0, r4
   2b1a2:	f7ff fcf3 	bl	2ab8c <bt_hci_ecc_send>
	if (err) {
   2b1a6:	b188      	cbz	r0, 2b1cc <hci_tx_thread+0xe4>
	z_impl_k_sem_give(sem);
   2b1a8:	4814      	ldr	r0, [pc, #80]	; (2b1fc <hci_tx_thread+0x114>)
   2b1aa:	f015 fcdd 	bl	40b68 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   2b1ae:	4620      	mov	r0, r4
   2b1b0:	f010 fff4 	bl	3c19c <net_buf_id>
   2b1b4:	4b12      	ldr	r3, [pc, #72]	; (2b200 <hci_tx_thread+0x118>)
   2b1b6:	220c      	movs	r2, #12
   2b1b8:	fb02 3000 	mla	r0, r2, r0, r3
   2b1bc:	211f      	movs	r1, #31
   2b1be:	8840      	ldrh	r0, [r0, #2]
   2b1c0:	4622      	mov	r2, r4
   2b1c2:	f7ff ff05 	bl	2afd0 <hci_cmd_done>
		net_buf_unref(buf);
   2b1c6:	4620      	mov	r0, r4
   2b1c8:	f011 f8a2 	bl	3c310 <net_buf_unref>
	for (; count; ev++, count--) {
   2b1cc:	3614      	adds	r6, #20
   2b1ce:	3d01      	subs	r5, #1
   2b1d0:	e7b0      	b.n	2b134 <hci_tx_thread+0x4c>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   2b1d2:	2b01      	cmp	r3, #1
   2b1d4:	d1fa      	bne.n	2b1cc <hci_tx_thread+0xe4>
					conn = CONTAINER_OF(ev->fifo,
   2b1d6:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   2b1d8:	3838      	subs	r0, #56	; 0x38
   2b1da:	f001 fec1 	bl	2cf60 <bt_conn_process_tx>
   2b1de:	e7f5      	b.n	2b1cc <hci_tx_thread+0xe4>
   2b1e0:	20000394 	.word	0x20000394
   2b1e4:	0004a84f 	.word	0x0004a84f
   2b1e8:	0004a883 	.word	0x0004a883
   2b1ec:	0004a88c 	.word	0x0004a88c
   2b1f0:	2000013c 	.word	0x2000013c
   2b1f4:	0004a8a9 	.word	0x0004a8a9
   2b1f8:	20000000 	.word	0x20000000
   2b1fc:	20000120 	.word	0x20000120
   2b200:	20001cdc 	.word	0x20001cdc

0002b204 <bt_hci_cmd_state_set_init>:
{
   2b204:	b510      	push	{r4, lr}
	state->bit = bit;
   2b206:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   2b20a:	f89d 3008 	ldrb.w	r3, [sp, #8]
   2b20e:	720b      	strb	r3, [r1, #8]
{
   2b210:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   2b212:	f010 ffc3 	bl	3c19c <net_buf_id>
   2b216:	4b03      	ldr	r3, [pc, #12]	; (2b224 <bt_hci_cmd_state_set_init+0x20>)
   2b218:	220c      	movs	r2, #12
   2b21a:	fb02 3300 	mla	r3, r2, r0, r3
   2b21e:	605c      	str	r4, [r3, #4]
}
   2b220:	bd10      	pop	{r4, pc}
   2b222:	bf00      	nop
   2b224:	20001cdc 	.word	0x20001cdc

0002b228 <bt_hci_cmd_create>:
{
   2b228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   2b22c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b230:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b234:	4606      	mov	r6, r0
   2b236:	4817      	ldr	r0, [pc, #92]	; (2b294 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
   2b238:	4d17      	ldr	r5, [pc, #92]	; (2b298 <bt_hci_cmd_create+0x70>)
{
   2b23a:	460f      	mov	r7, r1
   2b23c:	f01b ff65 	bl	4710a <net_buf_alloc_fixed>
   2b240:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   2b242:	f100 0a08 	add.w	sl, r0, #8
   2b246:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   2b248:	f04f 0800 	mov.w	r8, #0
   2b24c:	4650      	mov	r0, sl
   2b24e:	f01b ff7b 	bl	47148 <net_buf_simple_reserve>
   2b252:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
   2b256:	4620      	mov	r0, r4
   2b258:	f010 ffa0 	bl	3c19c <net_buf_id>
   2b25c:	f04f 090c 	mov.w	r9, #12
   2b260:	fb09 5000 	mla	r0, r9, r0, r5
   2b264:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   2b266:	4620      	mov	r0, r4
   2b268:	f010 ff98 	bl	3c19c <net_buf_id>
   2b26c:	fb09 5000 	mla	r0, r9, r0, r5
   2b270:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   2b274:	4620      	mov	r0, r4
   2b276:	f010 ff91 	bl	3c19c <net_buf_id>
   2b27a:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   2b27e:	2103      	movs	r1, #3
   2b280:	f8c5 8004 	str.w	r8, [r5, #4]
   2b284:	4650      	mov	r0, sl
   2b286:	f01b ffa2 	bl	471ce <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   2b28a:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   2b28c:	7087      	strb	r7, [r0, #2]
}
   2b28e:	4620      	mov	r0, r4
   2b290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2b294:	20000e20 	.word	0x20000e20
   2b298:	20001cdc 	.word	0x20001cdc

0002b29c <bt_hci_cmd_send>:
{
   2b29c:	b538      	push	{r3, r4, r5, lr}
   2b29e:	4605      	mov	r5, r0
	if (!buf) {
   2b2a0:	460c      	mov	r4, r1
   2b2a2:	b919      	cbnz	r1, 2b2ac <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   2b2a4:	f7ff ffc0 	bl	2b228 <bt_hci_cmd_create>
		if (!buf) {
   2b2a8:	4604      	mov	r4, r0
   2b2aa:	b198      	cbz	r0, 2b2d4 <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   2b2ac:	f640 4335 	movw	r3, #3125	; 0xc35
   2b2b0:	429d      	cmp	r5, r3
   2b2b2:	d109      	bne.n	2b2c8 <bt_hci_cmd_send+0x2c>
		return bt_hci_ecc_send(buf);
   2b2b4:	4620      	mov	r0, r4
   2b2b6:	f7ff fc69 	bl	2ab8c <bt_hci_ecc_send>
		if (err) {
   2b2ba:	4605      	mov	r5, r0
   2b2bc:	b140      	cbz	r0, 2b2d0 <bt_hci_cmd_send+0x34>
			net_buf_unref(buf);
   2b2be:	4620      	mov	r0, r4
   2b2c0:	f011 f826 	bl	3c310 <net_buf_unref>
}
   2b2c4:	4628      	mov	r0, r5
   2b2c6:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   2b2c8:	4804      	ldr	r0, [pc, #16]	; (2b2dc <bt_hci_cmd_send+0x40>)
   2b2ca:	4621      	mov	r1, r4
   2b2cc:	f01b ff40 	bl	47150 <net_buf_put>
	return 0;
   2b2d0:	2500      	movs	r5, #0
   2b2d2:	e7f7      	b.n	2b2c4 <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
   2b2d4:	f06f 0568 	mvn.w	r5, #104	; 0x68
   2b2d8:	e7f4      	b.n	2b2c4 <bt_hci_cmd_send+0x28>
   2b2da:	bf00      	nop
   2b2dc:	2000013c 	.word	0x2000013c

0002b2e0 <bt_hci_cmd_send_sync>:
{
   2b2e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b2e2:	4615      	mov	r5, r2
   2b2e4:	b087      	sub	sp, #28
	if (!buf) {
   2b2e6:	460c      	mov	r4, r1
   2b2e8:	b921      	cbnz	r1, 2b2f4 <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
   2b2ea:	f7ff ff9d 	bl	2b228 <bt_hci_cmd_create>
		if (!buf) {
   2b2ee:	4604      	mov	r4, r0
   2b2f0:	2800      	cmp	r0, #0
   2b2f2:	d047      	beq.n	2b384 <bt_hci_cmd_send_sync+0xa4>
	return z_impl_k_sem_init(sem, initial_count, limit);
   2b2f4:	2201      	movs	r2, #1
   2b2f6:	2100      	movs	r1, #0
   2b2f8:	4668      	mov	r0, sp
   2b2fa:	f01c ff06 	bl	4810a <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   2b2fe:	4620      	mov	r0, r4
   2b300:	f010 ff4c 	bl	3c19c <net_buf_id>
   2b304:	4f21      	ldr	r7, [pc, #132]	; (2b38c <bt_hci_cmd_send_sync+0xac>)
   2b306:	230c      	movs	r3, #12
   2b308:	fb03 7000 	mla	r0, r3, r0, r7
   2b30c:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   2b310:	4620      	mov	r0, r4
   2b312:	f01b ff2a 	bl	4716a <net_buf_ref>
   2b316:	4601      	mov	r1, r0
   2b318:	481d      	ldr	r0, [pc, #116]	; (2b390 <bt_hci_cmd_send_sync+0xb0>)
   2b31a:	f01b ff19 	bl	47150 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   2b31e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   2b322:	2300      	movs	r3, #0
   2b324:	4668      	mov	r0, sp
   2b326:	f015 fc45 	bl	40bb4 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   2b32a:	4606      	mov	r6, r0
   2b32c:	b180      	cbz	r0, 2b350 <bt_hci_cmd_send_sync+0x70>
   2b32e:	4a19      	ldr	r2, [pc, #100]	; (2b394 <bt_hci_cmd_send_sync+0xb4>)
   2b330:	4919      	ldr	r1, [pc, #100]	; (2b398 <bt_hci_cmd_send_sync+0xb8>)
   2b332:	481a      	ldr	r0, [pc, #104]	; (2b39c <bt_hci_cmd_send_sync+0xbc>)
   2b334:	f240 1347 	movw	r3, #327	; 0x147
   2b338:	f017 f946 	bl	425c8 <assert_print>
   2b33c:	4818      	ldr	r0, [pc, #96]	; (2b3a0 <bt_hci_cmd_send_sync+0xc0>)
   2b33e:	4631      	mov	r1, r6
   2b340:	f017 f942 	bl	425c8 <assert_print>
   2b344:	4040      	eors	r0, r0
   2b346:	f380 8811 	msr	BASEPRI, r0
   2b34a:	f04f 0003 	mov.w	r0, #3
   2b34e:	df02      	svc	2
	status = cmd(buf)->status;
   2b350:	4620      	mov	r0, r4
   2b352:	f010 ff23 	bl	3c19c <net_buf_id>
   2b356:	230c      	movs	r3, #12
   2b358:	4358      	muls	r0, r3
   2b35a:	5c3e      	ldrb	r6, [r7, r0]
	if (status) {
   2b35c:	b156      	cbz	r6, 2b374 <bt_hci_cmd_send_sync+0x94>
		net_buf_unref(buf);
   2b35e:	4620      	mov	r0, r4
   2b360:	f010 ffd6 	bl	3c310 <net_buf_unref>
			return -ECONNREFUSED;
   2b364:	2e09      	cmp	r6, #9
   2b366:	bf14      	ite	ne
   2b368:	f06f 0004 	mvnne.w	r0, #4
   2b36c:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   2b370:	b007      	add	sp, #28
   2b372:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
   2b374:	b115      	cbz	r5, 2b37c <bt_hci_cmd_send_sync+0x9c>
		*rsp = buf;
   2b376:	602c      	str	r4, [r5, #0]
	return 0;
   2b378:	2000      	movs	r0, #0
   2b37a:	e7f9      	b.n	2b370 <bt_hci_cmd_send_sync+0x90>
		net_buf_unref(buf);
   2b37c:	4620      	mov	r0, r4
   2b37e:	f010 ffc7 	bl	3c310 <net_buf_unref>
   2b382:	e7f9      	b.n	2b378 <bt_hci_cmd_send_sync+0x98>
			return -ENOBUFS;
   2b384:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2b388:	e7f2      	b.n	2b370 <bt_hci_cmd_send_sync+0x90>
   2b38a:	bf00      	nop
   2b38c:	20001cdc 	.word	0x20001cdc
   2b390:	2000013c 	.word	0x2000013c
   2b394:	0004a84f 	.word	0x0004a84f
   2b398:	0004a883 	.word	0x0004a883
   2b39c:	0004a88c 	.word	0x0004a88c
   2b3a0:	0004a8ad 	.word	0x0004a8ad

0002b3a4 <bt_hci_le_rand>:
{
   2b3a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   2b3a6:	4b14      	ldr	r3, [pc, #80]	; (2b3f8 <bt_hci_le_rand+0x54>)
   2b3a8:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
   2b3ac:	2b00      	cmp	r3, #0
{
   2b3ae:	4605      	mov	r5, r0
   2b3b0:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   2b3b2:	da1d      	bge.n	2b3f0 <bt_hci_le_rand+0x4c>
	while (len > 0) {
   2b3b4:	b914      	cbnz	r4, 2b3bc <bt_hci_le_rand+0x18>
	return 0;
   2b3b6:	4620      	mov	r0, r4
}
   2b3b8:	b003      	add	sp, #12
   2b3ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   2b3bc:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   2b3be:	aa01      	add	r2, sp, #4
   2b3c0:	f04f 0100 	mov.w	r1, #0
   2b3c4:	f242 0018 	movw	r0, #8216	; 0x2018
		count = MIN(len, sizeof(rp->rand));
   2b3c8:	4626      	mov	r6, r4
   2b3ca:	bf28      	it	cs
   2b3cc:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   2b3ce:	f7ff ff87 	bl	2b2e0 <bt_hci_cmd_send_sync>
		if (err) {
   2b3d2:	2800      	cmp	r0, #0
   2b3d4:	d1f0      	bne.n	2b3b8 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   2b3d6:	9f01      	ldr	r7, [sp, #4]
		memcpy(buffer, rp->rand, count);
   2b3d8:	68b9      	ldr	r1, [r7, #8]
   2b3da:	4632      	mov	r2, r6
   2b3dc:	3101      	adds	r1, #1
   2b3de:	4628      	mov	r0, r5
   2b3e0:	f018 ff9a 	bl	44318 <memcpy>
		net_buf_unref(rsp);
   2b3e4:	4638      	mov	r0, r7
   2b3e6:	f010 ff93 	bl	3c310 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   2b3ea:	4435      	add	r5, r6
		len -= count;
   2b3ec:	1ba4      	subs	r4, r4, r6
   2b3ee:	e7e1      	b.n	2b3b4 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   2b3f0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2b3f4:	e7e0      	b.n	2b3b8 <bt_hci_le_rand+0x14>
   2b3f6:	bf00      	nop
   2b3f8:	20000000 	.word	0x20000000

0002b3fc <bt_get_phy>:
	switch (hci_phy) {
   2b3fc:	3801      	subs	r0, #1
   2b3fe:	b2c0      	uxtb	r0, r0
   2b400:	2802      	cmp	r0, #2
   2b402:	bf9a      	itte	ls
   2b404:	4b01      	ldrls	r3, [pc, #4]	; (2b40c <bt_get_phy+0x10>)
   2b406:	5c18      	ldrbls	r0, [r3, r0]
{
   2b408:	2000      	movhi	r0, #0
}
   2b40a:	4770      	bx	lr
   2b40c:	0004a980 	.word	0x0004a980

0002b410 <bt_hci_le_enh_conn_complete>:
{
   2b410:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   2b414:	f8b0 7001 	ldrh.w	r7, [r0, #1]
		if (disconnected_handles[i] == handle) {
   2b418:	4a7f      	ldr	r2, [pc, #508]	; (2b618 <bt_hci_le_enh_conn_complete+0x208>)
	handle |= ~BT_ACL_HANDLE_MASK;
   2b41a:	ea6f 5307 	mvn.w	r3, r7, lsl #20
		if (disconnected_handles[i] == handle) {
   2b41e:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   2b420:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   2b424:	b29b      	uxth	r3, r3
   2b426:	4299      	cmp	r1, r3
{
   2b428:	4605      	mov	r5, r0
   2b42a:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
   2b42e:	bf08      	it	eq
   2b430:	8016      	strheq	r6, [r2, #0]
{
   2b432:	b089      	sub	sp, #36	; 0x24
			return true;
   2b434:	bf08      	it	eq
   2b436:	2601      	moveq	r6, #1
	bt_id_pending_keys_update();
   2b438:	f000 fb2a 	bl	2ba90 <bt_id_pending_keys_update>
	if (evt->status) {
   2b43c:	782c      	ldrb	r4, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   2b43e:	fa1f f887 	uxth.w	r8, r7
	if (evt->status) {
   2b442:	b1bc      	cbz	r4, 2b474 <bt_hci_le_enh_conn_complete+0x64>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2b444:	2c3c      	cmp	r4, #60	; 0x3c
   2b446:	d135      	bne.n	2b4b4 <bt_hci_le_enh_conn_complete+0xa4>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   2b448:	f000 fe04 	bl	2c054 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2b44c:	f06f 0140 	mvn.w	r1, #64	; 0x40
   2b450:	3010      	adds	r0, #16
   2b452:	f019 f942 	bl	446da <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   2b456:	2000      	movs	r0, #0
   2b458:	f7ff fd94 	bl	2af84 <find_pending_connect.part.0>
		if (!conn) {
   2b45c:	4605      	mov	r5, r0
   2b45e:	b348      	cbz	r0, 2b4b4 <bt_hci_le_enh_conn_complete+0xa4>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   2b460:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2b462:	2100      	movs	r1, #0
   2b464:	f001 fa94 	bl	2c990 <bt_conn_set_state>
		bt_conn_unref(conn);
   2b468:	4628      	mov	r0, r5
}
   2b46a:	b009      	add	sp, #36	; 0x24
   2b46c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
   2b470:	f019 be8f 	b.w	45192 <bt_conn_unref>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   2b474:	792b      	ldrb	r3, [r5, #4]
   2b476:	3b02      	subs	r3, #2
   2b478:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   2b47a:	f105 0904 	add.w	r9, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   2b47e:	d81c      	bhi.n	2b4ba <bt_hci_le_enh_conn_complete+0xaa>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   2b480:	4649      	mov	r1, r9
   2b482:	a806      	add	r0, sp, #24
   2b484:	f019 f88b 	bl	4459e <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   2b488:	f89d 3018 	ldrb.w	r3, [sp, #24]
	memcpy(dst, src, sizeof(*dst));
   2b48c:	2206      	movs	r2, #6
   2b48e:	3b02      	subs	r3, #2
   2b490:	f105 0111 	add.w	r1, r5, #17
   2b494:	f10d 0011 	add.w	r0, sp, #17
   2b498:	f88d 3018 	strb.w	r3, [sp, #24]
   2b49c:	f018 ff3c 	bl	44318 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   2b4a0:	2301      	movs	r3, #1
   2b4a2:	f88d 3010 	strb.w	r3, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   2b4a6:	78eb      	ldrb	r3, [r5, #3]
   2b4a8:	2b01      	cmp	r3, #1
   2b4aa:	d019      	beq.n	2b4e0 <bt_hci_le_enh_conn_complete+0xd0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   2b4ac:	211f      	movs	r1, #31
   2b4ae:	4640      	mov	r0, r8
   2b4b0:	f019 fa73 	bl	4499a <bt_hci_disconnect>
}
   2b4b4:	b009      	add	sp, #36	; 0x24
   2b4b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   2b4ba:	78eb      	ldrb	r3, [r5, #3]
   2b4bc:	2b01      	cmp	r3, #1
   2b4be:	bf04      	itt	eq
   2b4c0:	4b56      	ldreq	r3, [pc, #344]	; (2b61c <bt_hci_le_enh_conn_complete+0x20c>)
   2b4c2:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   2b4c6:	4649      	mov	r1, r9
   2b4c8:	4620      	mov	r0, r4
   2b4ca:	f019 fc25 	bl	44d18 <bt_lookup_id_addr>
   2b4ce:	4601      	mov	r1, r0
   2b4d0:	a806      	add	r0, sp, #24
   2b4d2:	f019 f864 	bl	4459e <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   2b4d6:	4649      	mov	r1, r9
   2b4d8:	a804      	add	r0, sp, #16
   2b4da:	f019 f860 	bl	4459e <bt_addr_le_copy>
   2b4de:	e7e2      	b.n	2b4a6 <bt_hci_le_enh_conn_complete+0x96>
   2b4e0:	a806      	add	r0, sp, #24
   2b4e2:	f7ff fd4f 	bl	2af84 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2b4e6:	78eb      	ldrb	r3, [r5, #3]
   2b4e8:	2b01      	cmp	r3, #1
   2b4ea:	4604      	mov	r4, r0
   2b4ec:	d10a      	bne.n	2b504 <bt_hci_le_enh_conn_complete+0xf4>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   2b4ee:	f000 fdb1 	bl	2c054 <bt_le_adv_lookup_legacy>
   2b4f2:	f06f 0140 	mvn.w	r1, #64	; 0x40
   2b4f6:	4681      	mov	r9, r0
   2b4f8:	3010      	adds	r0, #16
   2b4fa:	f019 f8ee 	bl	446da <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   2b4fe:	4648      	mov	r0, r9
   2b500:	f019 fd80 	bl	45004 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   2b504:	2c00      	cmp	r4, #0
   2b506:	d0d1      	beq.n	2b4ac <bt_hci_le_enh_conn_complete+0x9c>
	conn->handle = handle;
   2b508:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   2b50a:	a906      	add	r1, sp, #24
	conn->handle = handle;
   2b50c:	f820 7b88 	strh.w	r7, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   2b510:	f019 f845 	bl	4459e <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   2b514:	f8b5 3017 	ldrh.w	r3, [r5, #23]
   2b518:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   2b51c:	f8b5 3019 	ldrh.w	r3, [r5, #25]
   2b520:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   2b524:	f8b5 301b 	ldrh.w	r3, [r5, #27]
   2b528:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   2b52c:	78eb      	ldrb	r3, [r5, #3]
   2b52e:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   2b530:	2200      	movs	r2, #0
   2b532:	7322      	strb	r2, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2b534:	2b01      	cmp	r3, #1
	conn->le.phy.tx_phy = BT_GAP_LE_PHY_1M;
   2b536:	f240 1201 	movw	r2, #257	; 0x101
   2b53a:	f8a4 20b8 	strh.w	r2, [r4, #184]	; 0xb8
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2b53e:	d115      	bne.n	2b56c <bt_hci_le_enh_conn_complete+0x15c>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   2b540:	a904      	add	r1, sp, #16
   2b542:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   2b546:	f019 f82a 	bl	4459e <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   2b54a:	f000 fd83 	bl	2c054 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   2b54e:	7a21      	ldrb	r1, [r4, #8]
   2b550:	4d32      	ldr	r5, [pc, #200]	; (2b61c <bt_hci_le_enh_conn_complete+0x20c>)
   2b552:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   2b556:	4429      	add	r1, r5
   2b558:	f104 0096 	add.w	r0, r4, #150	; 0x96
   2b55c:	f019 f81f 	bl	4459e <bt_addr_le_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   2b560:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
   2b564:	065d      	lsls	r5, r3, #25
   2b566:	d501      	bpl.n	2b56c <bt_hci_le_enh_conn_complete+0x15c>
			bt_le_adv_resume();
   2b568:	f000 ff18 	bl	2c39c <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   2b56c:	2107      	movs	r1, #7
   2b56e:	4620      	mov	r0, r4
   2b570:	f001 fa0e 	bl	2c990 <bt_conn_set_state>
	if (is_disconnected) {
   2b574:	b11e      	cbz	r6, 2b57e <bt_hci_le_enh_conn_complete+0x16e>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   2b576:	2101      	movs	r1, #1
   2b578:	4620      	mov	r0, r4
   2b57a:	f001 fa09 	bl	2c990 <bt_conn_set_state>
	bt_conn_connected(conn);
   2b57e:	4620      	mov	r0, r4
   2b580:	f019 fe43 	bl	4520a <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   2b584:	7b63      	ldrb	r3, [r4, #13]
   2b586:	2b07      	cmp	r3, #7
   2b588:	d142      	bne.n	2b610 <bt_hci_le_enh_conn_complete+0x200>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2b58a:	f3bf 8f5b 	dmb	ish
   2b58e:	6863      	ldr	r3, [r4, #4]
   2b590:	4e22      	ldr	r6, [pc, #136]	; (2b61c <bt_hci_le_enh_conn_complete+0x20c>)
   2b592:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   2b596:	f413 6f00 	tst.w	r3, #2048	; 0x800
   2b59a:	d118      	bne.n	2b5ce <bt_hci_le_enh_conn_complete+0x1be>
   2b59c:	78e3      	ldrb	r3, [r4, #3]
   2b59e:	b11b      	cbz	r3, 2b5a8 <bt_hci_le_enh_conn_complete+0x198>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   2b5a0:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   2b5a4:	0718      	lsls	r0, r3, #28
   2b5a6:	d512      	bpl.n	2b5ce <bt_hci_le_enh_conn_complete+0x1be>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   2b5a8:	2102      	movs	r1, #2
   2b5aa:	f242 0016 	movw	r0, #8214	; 0x2016
   2b5ae:	f7ff fe3b 	bl	2b228 <bt_hci_cmd_create>
	if (!buf) {
   2b5b2:	4605      	mov	r5, r0
   2b5b4:	b158      	cbz	r0, 2b5ce <bt_hci_le_enh_conn_complete+0x1be>
   2b5b6:	2102      	movs	r1, #2
   2b5b8:	3008      	adds	r0, #8
   2b5ba:	f01b fe08 	bl	471ce <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2b5be:	8823      	ldrh	r3, [r4, #0]
   2b5c0:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   2b5c2:	2200      	movs	r2, #0
   2b5c4:	4629      	mov	r1, r5
   2b5c6:	f242 0016 	movw	r0, #8214	; 0x2016
   2b5ca:	f7ff fe89 	bl	2b2e0 <bt_hci_cmd_send_sync>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   2b5ce:	f896 30d1 	ldrb.w	r3, [r6, #209]	; 0xd1
   2b5d2:	07d9      	lsls	r1, r3, #31
   2b5d4:	d506      	bpl.n	2b5e4 <bt_hci_le_enh_conn_complete+0x1d4>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   2b5d6:	2100      	movs	r1, #0
   2b5d8:	2302      	movs	r3, #2
   2b5da:	9100      	str	r1, [sp, #0]
   2b5dc:	461a      	mov	r2, r3
   2b5de:	4620      	mov	r0, r4
   2b5e0:	f019 fa14 	bl	44a0c <bt_le_set_phy>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   2b5e4:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   2b5e8:	069a      	lsls	r2, r3, #26
   2b5ea:	d511      	bpl.n	2b610 <bt_hci_le_enh_conn_complete+0x200>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   2b5ec:	f8d6 3154 	ldr.w	r3, [r6, #340]	; 0x154
   2b5f0:	689b      	ldr	r3, [r3, #8]
   2b5f2:	079b      	lsls	r3, r3, #30
   2b5f4:	d50c      	bpl.n	2b610 <bt_hci_le_enh_conn_complete+0x200>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   2b5f6:	f10d 010e 	add.w	r1, sp, #14
   2b5fa:	a803      	add	r0, sp, #12
   2b5fc:	f019 f99a 	bl	44934 <hci_le_read_max_data_len>
			if (!err) {
   2b600:	b930      	cbnz	r0, 2b610 <bt_hci_le_enh_conn_complete+0x200>
				err = bt_le_set_data_len(conn,
   2b602:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   2b606:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   2b60a:	4620      	mov	r0, r4
   2b60c:	f019 f9e0 	bl	449d0 <bt_le_set_data_len>
	bt_conn_unref(conn);
   2b610:	4620      	mov	r0, r4
   2b612:	f019 fdbe 	bl	45192 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2b616:	e74d      	b.n	2b4b4 <bt_hci_le_enh_conn_complete+0xa4>
   2b618:	200039b8 	.word	0x200039b8
   2b61c:	20000000 	.word	0x20000000

0002b620 <le_legacy_conn_complete>:
{
   2b620:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   2b622:	6881      	ldr	r1, [r0, #8]
   2b624:	4c17      	ldr	r4, [pc, #92]	; (2b684 <le_legacy_conn_complete+0x64>)
	enh.status         = evt->status;
   2b626:	780b      	ldrb	r3, [r1, #0]
{
   2b628:	b088      	sub	sp, #32
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   2b62a:	a801      	add	r0, sp, #4
	enh.status         = evt->status;
   2b62c:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   2b630:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   2b634:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   2b638:	78cb      	ldrb	r3, [r1, #3]
   2b63a:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   2b63e:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   2b642:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   2b646:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   2b64a:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   2b64e:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   2b652:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   2b656:	7c4b      	ldrb	r3, [r1, #17]
   2b658:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   2b65c:	3104      	adds	r1, #4
   2b65e:	f018 ff9e 	bl	4459e <bt_addr_le_copy>
   2b662:	4621      	mov	r1, r4
   2b664:	2206      	movs	r2, #6
   2b666:	f10d 000b 	add.w	r0, sp, #11
   2b66a:	f018 fe55 	bl	44318 <memcpy>
   2b66e:	2206      	movs	r2, #6
   2b670:	4621      	mov	r1, r4
   2b672:	f10d 0011 	add.w	r0, sp, #17
   2b676:	f018 fe4f 	bl	44318 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   2b67a:	4668      	mov	r0, sp
   2b67c:	f7ff fec8 	bl	2b410 <bt_hci_le_enh_conn_complete>
}
   2b680:	b008      	add	sp, #32
   2b682:	bd10      	pop	{r4, pc}
   2b684:	0004a7c4 	.word	0x0004a7c4

0002b688 <bt_security_err_get>:
	switch (hci_err) {
   2b688:	2829      	cmp	r0, #41	; 0x29
   2b68a:	bf9a      	itte	ls
   2b68c:	4b01      	ldrls	r3, [pc, #4]	; (2b694 <bt_security_err_get+0xc>)
   2b68e:	5c18      	ldrbls	r0, [r3, r0]
{
   2b690:	2009      	movhi	r0, #9
}
   2b692:	4770      	bx	lr
   2b694:	0004a956 	.word	0x0004a956

0002b698 <hci_event_prio>:
{
   2b698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b69c:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   2b69e:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   2b6a2:	4630      	mov	r0, r6
   2b6a4:	f01b fdca 	bl	4723c <net_buf_simple_headroom>
	state->len = buf->len;
   2b6a8:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   2b6ac:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   2b6b0:	4605      	mov	r5, r0
   2b6b2:	d80c      	bhi.n	2b6ce <hci_event_prio+0x36>
   2b6b4:	4a1c      	ldr	r2, [pc, #112]	; (2b728 <hci_event_prio+0x90>)
   2b6b6:	491d      	ldr	r1, [pc, #116]	; (2b72c <hci_event_prio+0x94>)
   2b6b8:	481d      	ldr	r0, [pc, #116]	; (2b730 <hci_event_prio+0x98>)
   2b6ba:	f640 536f 	movw	r3, #3439	; 0xd6f
   2b6be:	f016 ff83 	bl	425c8 <assert_print>
   2b6c2:	4040      	eors	r0, r0
   2b6c4:	f380 8811 	msr	BASEPRI, r0
   2b6c8:	f04f 0003 	mov.w	r0, #3
   2b6cc:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   2b6ce:	4630      	mov	r0, r6
   2b6d0:	2102      	movs	r1, #2
   2b6d2:	f01b fda3 	bl	4721c <net_buf_simple_pull_mem>
   2b6d6:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   2b6d8:	7800      	ldrb	r0, [r0, #0]
   2b6da:	f018 ff35 	bl	44548 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   2b6de:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   2b6e0:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   2b6e2:	d40c      	bmi.n	2b6fe <hci_event_prio+0x66>
   2b6e4:	4a10      	ldr	r2, [pc, #64]	; (2b728 <hci_event_prio+0x90>)
   2b6e6:	4913      	ldr	r1, [pc, #76]	; (2b734 <hci_event_prio+0x9c>)
   2b6e8:	4811      	ldr	r0, [pc, #68]	; (2b730 <hci_event_prio+0x98>)
   2b6ea:	f640 5373 	movw	r3, #3443	; 0xd73
   2b6ee:	f016 ff6b 	bl	425c8 <assert_print>
   2b6f2:	4040      	eors	r0, r0
   2b6f4:	f380 8811 	msr	BASEPRI, r0
   2b6f8:	f04f 0003 	mov.w	r0, #3
   2b6fc:	df02      	svc	2
	err = handle_event_common(event, buf, handlers, num_handlers);
   2b6fe:	2305      	movs	r3, #5
   2b700:	4a0d      	ldr	r2, [pc, #52]	; (2b738 <hci_event_prio+0xa0>)
   2b702:	7838      	ldrb	r0, [r7, #0]
   2b704:	4621      	mov	r1, r4
   2b706:	f018 ffd1 	bl	446ac <handle_event_common.isra.0>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   2b70a:	07b3      	lsls	r3, r6, #30
   2b70c:	d507      	bpl.n	2b71e <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   2b70e:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
   2b710:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   2b714:	fa13 f585 	uxtah	r5, r3, r5
   2b718:	60a5      	str	r5, [r4, #8]
}
   2b71a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   2b71e:	4620      	mov	r0, r4
}
   2b720:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   2b724:	f010 bdf4 	b.w	3c310 <net_buf_unref>
   2b728:	0004a84f 	.word	0x0004a84f
   2b72c:	0004a8cd 	.word	0x0004a8cd
   2b730:	0004a88c 	.word	0x0004a88c
   2b734:	0004a8e6 	.word	0x0004a8e6
   2b738:	0004941c 	.word	0x0004941c

0002b73c <bt_recv>:
{
   2b73c:	b570      	push	{r4, r5, r6, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   2b73e:	7d03      	ldrb	r3, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   2b740:	2b01      	cmp	r3, #1
{
   2b742:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
   2b744:	d036      	beq.n	2b7b4 <bt_recv+0x78>
   2b746:	2b03      	cmp	r3, #3
   2b748:	d163      	bne.n	2b812 <bt_recv+0xd6>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   2b74a:	8983      	ldrh	r3, [r0, #12]
   2b74c:	2b03      	cmp	r3, #3
   2b74e:	d80c      	bhi.n	2b76a <bt_recv+0x2e>
   2b750:	4a32      	ldr	r2, [pc, #200]	; (2b81c <bt_recv+0xe0>)
   2b752:	4933      	ldr	r1, [pc, #204]	; (2b820 <bt_recv+0xe4>)
   2b754:	4833      	ldr	r0, [pc, #204]	; (2b824 <bt_recv+0xe8>)
   2b756:	f240 13eb 	movw	r3, #491	; 0x1eb
   2b75a:	f016 ff35 	bl	425c8 <assert_print>
   2b75e:	4040      	eors	r0, r0
   2b760:	f380 8811 	msr	BASEPRI, r0
   2b764:	f04f 0003 	mov.w	r0, #3
   2b768:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   2b76a:	2104      	movs	r1, #4
   2b76c:	f104 0008 	add.w	r0, r4, #8
   2b770:	f01b fd54 	bl	4721c <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   2b774:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   2b776:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   2b778:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   2b77a:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   2b77c:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
   2b77e:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   2b782:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
   2b784:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
   2b786:	d003      	beq.n	2b790 <bt_recv+0x54>
	net_buf_unref(buf);
   2b788:	4620      	mov	r0, r4
   2b78a:	f010 fdc1 	bl	3c310 <net_buf_unref>
}
   2b78e:	e00f      	b.n	2b7b0 <bt_recv+0x74>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   2b790:	f001 f8f6 	bl	2c980 <bt_conn_lookup_handle>
	if (!conn) {
   2b794:	4605      	mov	r5, r0
   2b796:	2800      	cmp	r0, #0
   2b798:	d0f6      	beq.n	2b788 <bt_recv+0x4c>
	acl(buf)->index = bt_conn_index(conn);
   2b79a:	f001 f9ad 	bl	2caf8 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   2b79e:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   2b7a0:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   2b7a2:	4621      	mov	r1, r4
   2b7a4:	4628      	mov	r0, r5
   2b7a6:	f019 fc8b 	bl	450c0 <bt_conn_recv>
	bt_conn_unref(conn);
   2b7aa:	4628      	mov	r0, r5
   2b7ac:	f019 fcf1 	bl	45192 <bt_conn_unref>
		return 0;
   2b7b0:	2000      	movs	r0, #0
}
   2b7b2:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   2b7b4:	8983      	ldrh	r3, [r0, #12]
   2b7b6:	2b01      	cmp	r3, #1
   2b7b8:	d80c      	bhi.n	2b7d4 <bt_recv+0x98>
   2b7ba:	4a18      	ldr	r2, [pc, #96]	; (2b81c <bt_recv+0xe0>)
   2b7bc:	4918      	ldr	r1, [pc, #96]	; (2b820 <bt_recv+0xe4>)
   2b7be:	4819      	ldr	r0, [pc, #100]	; (2b824 <bt_recv+0xe8>)
   2b7c0:	f640 1359 	movw	r3, #2393	; 0x959
   2b7c4:	f016 ff00 	bl	425c8 <assert_print>
   2b7c8:	4040      	eors	r0, r0
   2b7ca:	f380 8811 	msr	BASEPRI, r0
   2b7ce:	f04f 0003 	mov.w	r0, #3
   2b7d2:	df02      	svc	2
   2b7d4:	2102      	movs	r1, #2
   2b7d6:	f104 0008 	add.w	r0, r4, #8
   2b7da:	f01b fd1f 	bl	4721c <net_buf_simple_pull_mem>
   2b7de:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   2b7e0:	7800      	ldrb	r0, [r0, #0]
   2b7e2:	f018 feb1 	bl	44548 <bt_hci_evt_get_flags>
   2b7e6:	0783      	lsls	r3, r0, #30
   2b7e8:	d40c      	bmi.n	2b804 <bt_recv+0xc8>
   2b7ea:	4a0c      	ldr	r2, [pc, #48]	; (2b81c <bt_recv+0xe0>)
   2b7ec:	490e      	ldr	r1, [pc, #56]	; (2b828 <bt_recv+0xec>)
   2b7ee:	480d      	ldr	r0, [pc, #52]	; (2b824 <bt_recv+0xe8>)
   2b7f0:	f640 135d 	movw	r3, #2397	; 0x95d
   2b7f4:	f016 fee8 	bl	425c8 <assert_print>
   2b7f8:	4040      	eors	r0, r0
   2b7fa:	f380 8811 	msr	BASEPRI, r0
   2b7fe:	f04f 0003 	mov.w	r0, #3
   2b802:	df02      	svc	2
	err = handle_event_common(event, buf, handlers, num_handlers);
   2b804:	4a09      	ldr	r2, [pc, #36]	; (2b82c <bt_recv+0xf0>)
   2b806:	7828      	ldrb	r0, [r5, #0]
   2b808:	2306      	movs	r3, #6
   2b80a:	4621      	mov	r1, r4
   2b80c:	f018 ff4e 	bl	446ac <handle_event_common.isra.0>
   2b810:	e7ba      	b.n	2b788 <bt_recv+0x4c>
		net_buf_unref(buf);
   2b812:	f010 fd7d 	bl	3c310 <net_buf_unref>
		return -EINVAL;
   2b816:	f06f 0015 	mvn.w	r0, #21
   2b81a:	e7ca      	b.n	2b7b2 <bt_recv+0x76>
   2b81c:	0004a84f 	.word	0x0004a84f
   2b820:	0004a8cd 	.word	0x0004a8cd
   2b824:	0004a88c 	.word	0x0004a88c
   2b828:	0004a8ff 	.word	0x0004a8ff
   2b82c:	00049444 	.word	0x00049444

0002b830 <bt_recv_prio>:
{
   2b830:	b510      	push	{r4, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
   2b832:	7d03      	ldrb	r3, [r0, #20]
   2b834:	2b01      	cmp	r3, #1
{
   2b836:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
   2b838:	d00c      	beq.n	2b854 <bt_recv_prio+0x24>
   2b83a:	4a09      	ldr	r2, [pc, #36]	; (2b860 <bt_recv_prio+0x30>)
   2b83c:	4909      	ldr	r1, [pc, #36]	; (2b864 <bt_recv_prio+0x34>)
   2b83e:	480a      	ldr	r0, [pc, #40]	; (2b868 <bt_recv_prio+0x38>)
   2b840:	f640 53c5 	movw	r3, #3525	; 0xdc5
   2b844:	f016 fec0 	bl	425c8 <assert_print>
   2b848:	4040      	eors	r0, r0
   2b84a:	f380 8811 	msr	BASEPRI, r0
   2b84e:	f04f 0003 	mov.w	r0, #3
   2b852:	df02      	svc	2
	hci_event_prio(buf);
   2b854:	4620      	mov	r0, r4
   2b856:	f7ff ff1f 	bl	2b698 <hci_event_prio>
}
   2b85a:	2000      	movs	r0, #0
   2b85c:	bd10      	pop	{r4, pc}
   2b85e:	bf00      	nop
   2b860:	0004a84f 	.word	0x0004a84f
   2b864:	0004a92d 	.word	0x0004a92d
   2b868:	0004a88c 	.word	0x0004a88c

0002b86c <bt_hci_driver_register>:
	if (bt_dev.drv) {
   2b86c:	4a08      	ldr	r2, [pc, #32]	; (2b890 <bt_hci_driver_register+0x24>)
{
   2b86e:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   2b870:	f8d2 0154 	ldr.w	r0, [r2, #340]	; 0x154
   2b874:	b930      	cbnz	r0, 2b884 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   2b876:	68d9      	ldr	r1, [r3, #12]
   2b878:	b139      	cbz	r1, 2b88a <bt_hci_driver_register+0x1e>
   2b87a:	6959      	ldr	r1, [r3, #20]
   2b87c:	b129      	cbz	r1, 2b88a <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   2b87e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
	return 0;
   2b882:	4770      	bx	lr
		return -EALREADY;
   2b884:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2b888:	4770      	bx	lr
		return -EINVAL;
   2b88a:	f06f 0015 	mvn.w	r0, #21
}
   2b88e:	4770      	bx	lr
   2b890:	20000000 	.word	0x20000000

0002b894 <bt_finalize_init>:
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2b894:	4801      	ldr	r0, [pc, #4]	; (2b89c <bt_finalize_init+0x8>)
   2b896:	2104      	movs	r1, #4
   2b898:	f018 be84 	b.w	445a4 <atomic_or>
   2b89c:	200000cc 	.word	0x200000cc

0002b8a0 <init_work>:

static void init_work(struct k_work *work)
{
   2b8a0:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
   2b8a2:	f7fa fd99 	bl	263d8 <bt_init>
	if (ready_cb) {
   2b8a6:	4b03      	ldr	r3, [pc, #12]	; (2b8b4 <init_work+0x14>)
   2b8a8:	681b      	ldr	r3, [r3, #0]
   2b8aa:	b113      	cbz	r3, 2b8b2 <init_work+0x12>
		ready_cb(err);
	}
}
   2b8ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   2b8b0:	4718      	bx	r3
}
   2b8b2:	bd10      	pop	{r4, pc}
   2b8b4:	20001cf4 	.word	0x20001cf4

0002b8b8 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   2b8b8:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
   2b8ba:	4d28      	ldr	r5, [pc, #160]	; (2b95c <bt_enable+0xa4>)
   2b8bc:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
{
   2b8c0:	b088      	sub	sp, #32
   2b8c2:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   2b8c4:	2b00      	cmp	r3, #0
   2b8c6:	d043      	beq.n	2b950 <bt_enable+0x98>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2b8c8:	f06f 0102 	mvn.w	r1, #2
   2b8cc:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   2b8d0:	f018 ff03 	bl	446da <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   2b8d4:	2101      	movs	r1, #1
   2b8d6:	f018 fe65 	bl	445a4 <atomic_or>
		return -ENODEV;
	}

	atomic_clear_bit(bt_dev.flags, BT_DEV_DISABLE);

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   2b8da:	07c3      	lsls	r3, r0, #31
   2b8dc:	d43b      	bmi.n	2b956 <bt_enable+0x9e>
		return -EALREADY;
	}

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		err = bt_settings_init();
   2b8de:	f018 fdda 	bl	44496 <bt_settings_init>
		if (err) {
   2b8e2:	4604      	mov	r4, r0
   2b8e4:	bb88      	cbnz	r0, 2b94a <bt_enable+0x92>
		if (err) {
			BT_WARN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
   2b8e6:	4b1e      	ldr	r3, [pc, #120]	; (2b960 <bt_enable+0xa8>)
   2b8e8:	601e      	str	r6, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   2b8ea:	2201      	movs	r2, #1
   2b8ec:	4611      	mov	r1, r2
   2b8ee:	f505 7090 	add.w	r0, r5, #288	; 0x120
   2b8f2:	f01c fc0a 	bl	4810a <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   2b8f6:	f505 709e 	add.w	r0, r5, #316	; 0x13c
   2b8fa:	f01c fb86 	bl	4800a <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2b8fe:	2200      	movs	r2, #0
   2b900:	2300      	movs	r3, #0
   2b902:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2b906:	f06f 0308 	mvn.w	r3, #8
   2b90a:	e9cd 4302 	strd	r4, r3, [sp, #8]
   2b90e:	e9cd 4400 	strd	r4, r4, [sp]
   2b912:	4b14      	ldr	r3, [pc, #80]	; (2b964 <bt_enable+0xac>)
   2b914:	4914      	ldr	r1, [pc, #80]	; (2b968 <bt_enable+0xb0>)
   2b916:	9404      	str	r4, [sp, #16]
   2b918:	f44f 7240 	mov.w	r2, #768	; 0x300
   2b91c:	4813      	ldr	r0, [pc, #76]	; (2b96c <bt_enable+0xb4>)
   2b91e:	f014 fee5 	bl	406ec <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   2b922:	4913      	ldr	r1, [pc, #76]	; (2b970 <bt_enable+0xb8>)
   2b924:	4811      	ldr	r0, [pc, #68]	; (2b96c <bt_enable+0xb4>)
   2b926:	f01c fae3 	bl	47ef0 <z_impl_k_thread_name_set>
			   CONFIG_BT_RX_STACK_SIZE,
			   K_PRIO_COOP(CONFIG_BT_RX_PRIO), NULL);
	k_thread_name_set(&bt_workq.thread, "BT RX");
#endif

	err = bt_dev.drv->open();
   2b92a:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   2b92e:	68db      	ldr	r3, [r3, #12]
   2b930:	4798      	blx	r3
	if (err) {
   2b932:	4604      	mov	r4, r0
   2b934:	b948      	cbnz	r0, 2b94a <bt_enable+0x92>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
   2b936:	b926      	cbnz	r6, 2b942 <bt_enable+0x8a>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   2b938:	b008      	add	sp, #32
   2b93a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
   2b93e:	f7fa bd4b 	b.w	263d8 <bt_init>
	k_work_submit(&bt_dev.init);
   2b942:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   2b946:	f015 faad 	bl	40ea4 <k_work_submit>
}
   2b94a:	4620      	mov	r0, r4
   2b94c:	b008      	add	sp, #32
   2b94e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   2b950:	f06f 0412 	mvn.w	r4, #18
   2b954:	e7f9      	b.n	2b94a <bt_enable+0x92>
		return -EALREADY;
   2b956:	f06f 0477 	mvn.w	r4, #119	; 0x77
   2b95a:	e7f6      	b.n	2b94a <bt_enable+0x92>
   2b95c:	20000000 	.word	0x20000000
   2b960:	20001cf4 	.word	0x20001cf4
   2b964:	0002b0e9 	.word	0x0002b0e9
   2b968:	200045d0 	.word	0x200045d0
   2b96c:	20001118 	.word	0x20001118
   2b970:	0004a950 	.word	0x0004a950

0002b974 <bt_is_ready>:
   2b974:	4b04      	ldr	r3, [pc, #16]	; (2b988 <bt_is_ready+0x14>)
   2b976:	f3bf 8f5b 	dmb	ish
   2b97a:	6818      	ldr	r0, [r3, #0]
   2b97c:	f3bf 8f5b 	dmb	ish
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   2b980:	f3c0 0080 	ubfx	r0, r0, #2, #1
   2b984:	4770      	bx	lr
   2b986:	bf00      	nop
   2b988:	200000cc 	.word	0x200000cc

0002b98c <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   2b98c:	4800      	ldr	r0, [pc, #0]	; (2b990 <bt_get_name+0x4>)
   2b98e:	4770      	bx	lr
   2b990:	0004ab83 	.word	0x0004ab83

0002b994 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   2b994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   2b996:	4f0b      	ldr	r7, [pc, #44]	; (2b9c4 <id_find+0x30>)
{
   2b998:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   2b99a:	2500      	movs	r5, #0
   2b99c:	79fb      	ldrb	r3, [r7, #7]
   2b99e:	b2ec      	uxtb	r4, r5
   2b9a0:	42a3      	cmp	r3, r4
   2b9a2:	d802      	bhi.n	2b9aa <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   2b9a4:	f06f 0001 	mvn.w	r0, #1
   2b9a8:	e00a      	b.n	2b9c0 <id_find+0x2c>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   2b9aa:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   2b9ae:	2207      	movs	r2, #7
   2b9b0:	4439      	add	r1, r7
   2b9b2:	4630      	mov	r0, r6
   2b9b4:	f018 fca0 	bl	442f8 <memcmp>
   2b9b8:	3501      	adds	r5, #1
   2b9ba:	2800      	cmp	r0, #0
   2b9bc:	d1ee      	bne.n	2b99c <id_find+0x8>
   2b9be:	4620      	mov	r0, r4
}
   2b9c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b9c2:	bf00      	nop
   2b9c4:	20000000 	.word	0x20000000

0002b9c8 <set_random_address>:
{
   2b9c8:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   2b9ca:	4913      	ldr	r1, [pc, #76]	; (2ba18 <set_random_address+0x50>)
   2b9cc:	2206      	movs	r2, #6
   2b9ce:	4605      	mov	r5, r0
   2b9d0:	f018 fc92 	bl	442f8 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   2b9d4:	b1d8      	cbz	r0, 2ba0e <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   2b9d6:	2106      	movs	r1, #6
   2b9d8:	f242 0005 	movw	r0, #8197	; 0x2005
   2b9dc:	f7ff fc24 	bl	2b228 <bt_hci_cmd_create>
	if (!buf) {
   2b9e0:	4604      	mov	r4, r0
   2b9e2:	b1b0      	cbz	r0, 2ba12 <set_random_address+0x4a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2b9e4:	2206      	movs	r2, #6
   2b9e6:	4629      	mov	r1, r5
   2b9e8:	3008      	adds	r0, #8
   2b9ea:	f01b fbf6 	bl	471da <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   2b9ee:	2200      	movs	r2, #0
   2b9f0:	4621      	mov	r1, r4
   2b9f2:	f242 0005 	movw	r0, #8197	; 0x2005
   2b9f6:	f7ff fc73 	bl	2b2e0 <bt_hci_cmd_send_sync>
	if (err) {
   2b9fa:	b948      	cbnz	r0, 2ba10 <set_random_address+0x48>
	memcpy(dst, src, sizeof(*dst));
   2b9fc:	2206      	movs	r2, #6
   2b9fe:	4806      	ldr	r0, [pc, #24]	; (2ba18 <set_random_address+0x50>)
   2ba00:	4629      	mov	r1, r5
   2ba02:	f018 fc89 	bl	44318 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   2ba06:	4b05      	ldr	r3, [pc, #20]	; (2ba1c <set_random_address+0x54>)
   2ba08:	2201      	movs	r2, #1
   2ba0a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		return 0;
   2ba0e:	2000      	movs	r0, #0
}
   2ba10:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   2ba12:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2ba16:	e7fb      	b.n	2ba10 <set_random_address+0x48>
   2ba18:	20000061 	.word	0x20000061
   2ba1c:	20000000 	.word	0x20000000

0002ba20 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   2ba20:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2ba22:	4604      	mov	r4, r0
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   2ba24:	460d      	mov	r5, r1
   2ba26:	b1b1      	cbz	r1, 2ba56 <id_create.constprop.0+0x36>
	return memcmp(a, b, sizeof(*a));
   2ba28:	4916      	ldr	r1, [pc, #88]	; (2ba84 <id_create.constprop.0+0x64>)
   2ba2a:	2207      	movs	r2, #7
   2ba2c:	4628      	mov	r0, r5
   2ba2e:	f018 fc63 	bl	442f8 <memcmp>
   2ba32:	b180      	cbz	r0, 2ba56 <id_create.constprop.0+0x36>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   2ba34:	4814      	ldr	r0, [pc, #80]	; (2ba88 <id_create.constprop.0+0x68>)
   2ba36:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   2ba3a:	4629      	mov	r1, r5
   2ba3c:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   2ba3e:	f019 f8dd 	bl	44bfc <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2ba42:	4812      	ldr	r0, [pc, #72]	; (2ba8c <id_create.constprop.0+0x6c>)
   2ba44:	f019 f8dd 	bl	44c02 <atomic_get>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   2ba48:	0743      	lsls	r3, r0, #29
   2ba4a:	d501      	bpl.n	2ba50 <id_create.constprop.0+0x30>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
   2ba4c:	f7ff f984 	bl	2ad58 <bt_settings_save_id>
	}

	return 0;
   2ba50:	2000      	movs	r0, #0
}
   2ba52:	b003      	add	sp, #12
   2ba54:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   2ba56:	4668      	mov	r0, sp
   2ba58:	f018 fd68 	bl	4452c <bt_addr_le_create_static>
			if (err) {
   2ba5c:	2800      	cmp	r0, #0
   2ba5e:	d1f8      	bne.n	2ba52 <id_create.constprop.0+0x32>
		} while (id_find(&new_addr) >= 0);
   2ba60:	4668      	mov	r0, sp
   2ba62:	f7ff ff97 	bl	2b994 <id_find>
   2ba66:	2800      	cmp	r0, #0
   2ba68:	daf5      	bge.n	2ba56 <id_create.constprop.0+0x36>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   2ba6a:	4b07      	ldr	r3, [pc, #28]	; (2ba88 <id_create.constprop.0+0x68>)
   2ba6c:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   2ba70:	441c      	add	r4, r3
   2ba72:	4669      	mov	r1, sp
   2ba74:	4620      	mov	r0, r4
   2ba76:	f019 f8c1 	bl	44bfc <bt_addr_le_copy>
		if (addr) {
   2ba7a:	2d00      	cmp	r5, #0
   2ba7c:	d0e1      	beq.n	2ba42 <id_create.constprop.0+0x22>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   2ba7e:	4621      	mov	r1, r4
   2ba80:	4628      	mov	r0, r5
   2ba82:	e7dc      	b.n	2ba3e <id_create.constprop.0+0x1e>
   2ba84:	0004a7b7 	.word	0x0004a7b7
   2ba88:	20000000 	.word	0x20000000
   2ba8c:	200000cc 	.word	0x200000cc

0002ba90 <bt_id_pending_keys_update>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2ba90:	4b0a      	ldr	r3, [pc, #40]	; (2babc <bt_id_pending_keys_update+0x2c>)
   2ba92:	f3bf 8f5b 	dmb	ish
   2ba96:	e853 2f00 	ldrex	r2, [r3]
   2ba9a:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   2ba9e:	e843 1000 	strex	r0, r1, [r3]
   2baa2:	2800      	cmp	r0, #0
   2baa4:	d1f7      	bne.n	2ba96 <bt_id_pending_keys_update+0x6>
   2baa6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   2baaa:	0413      	lsls	r3, r2, #16
   2baac:	d504      	bpl.n	2bab8 <bt_id_pending_keys_update+0x28>
			bt_keys_foreach_type(BT_KEYS_IRK, pending_id_update, NULL);
   2baae:	4904      	ldr	r1, [pc, #16]	; (2bac0 <bt_id_pending_keys_update+0x30>)
   2bab0:	2200      	movs	r2, #0
   2bab2:	2002      	movs	r0, #2
   2bab4:	f004 b9a4 	b.w	2fe00 <bt_keys_foreach_type>
}
   2bab8:	4770      	bx	lr
   2baba:	bf00      	nop
   2babc:	200000cc 	.word	0x200000cc
   2bac0:	00044d51 	.word	0x00044d51

0002bac4 <bt_id_add>:
{
   2bac4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   2bac6:	4c47      	ldr	r4, [pc, #284]	; (2bbe4 <bt_id_add+0x120>)
   2bac8:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   2bacc:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
{
   2bad0:	4605      	mov	r5, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   2bad2:	b10a      	cbz	r2, 2bad8 <bt_id_add+0x14>
   2bad4:	429a      	cmp	r2, r3
   2bad6:	d208      	bcs.n	2baea <bt_id_add+0x26>
		bt_dev.le.rl_entries++;
   2bad8:	3301      	adds	r3, #1
   2bada:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   2bade:	7a2b      	ldrb	r3, [r5, #8]
   2bae0:	f043 0304 	orr.w	r3, r3, #4
   2bae4:	722b      	strb	r3, [r5, #8]
}
   2bae6:	b003      	add	sp, #12
   2bae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   2baea:	2100      	movs	r1, #0
   2baec:	2206      	movs	r2, #6
   2baee:	4608      	mov	r0, r1
   2baf0:	f001 f952 	bl	2cd98 <bt_conn_lookup_state_le>
	if (conn) {
   2baf4:	4606      	mov	r6, r0
   2baf6:	b1a8      	cbz	r0, 2bb24 <bt_id_add+0x60>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2baf8:	f3bf 8f5b 	dmb	ish
   2bafc:	34cc      	adds	r4, #204	; 0xcc
   2bafe:	e854 3f00 	ldrex	r3, [r4]
   2bb02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   2bb06:	e844 3200 	strex	r2, r3, [r4]
   2bb0a:	2a00      	cmp	r2, #0
   2bb0c:	d1f7      	bne.n	2bafe <bt_id_add+0x3a>
   2bb0e:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   2bb12:	7a2b      	ldrb	r3, [r5, #8]
   2bb14:	f043 0301 	orr.w	r3, r3, #1
   2bb18:	722b      	strb	r3, [r5, #8]
}
   2bb1a:	b003      	add	sp, #12
   2bb1c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   2bb20:	f019 bb37 	b.w	45192 <bt_conn_unref>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   2bb24:	4601      	mov	r1, r0
   2bb26:	4830      	ldr	r0, [pc, #192]	; (2bbe8 <bt_id_add+0x124>)
   2bb28:	f000 fa8e 	bl	2c048 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   2bb2c:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   2bb30:	b9b3      	cbnz	r3, 2bb60 <bt_id_add+0x9c>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   2bb32:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
   2bb36:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   2bb3a:	429a      	cmp	r2, r3
   2bb3c:	d11f      	bne.n	2bb7e <bt_id_add+0xba>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   2bb3e:	2200      	movs	r2, #0
   2bb40:	4611      	mov	r1, r2
   2bb42:	f242 0029 	movw	r0, #8233	; 0x2029
   2bb46:	f7ff fbcb 	bl	2b2e0 <bt_hci_cmd_send_sync>
		if (err) {
   2bb4a:	b970      	cbnz	r0, 2bb6a <bt_id_add+0xa6>
		bt_dev.le.rl_entries++;
   2bb4c:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   2bb50:	3301      	adds	r3, #1
   2bb52:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   2bb56:	7a2b      	ldrb	r3, [r5, #8]
   2bb58:	f043 0304 	orr.w	r3, r3, #4
   2bb5c:	722b      	strb	r3, [r5, #8]
		goto done;
   2bb5e:	e004      	b.n	2bb6a <bt_id_add+0xa6>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   2bb60:	4630      	mov	r0, r6
   2bb62:	f019 f8a5 	bl	44cb0 <addr_res_enable>
		if (err) {
   2bb66:	2800      	cmp	r0, #0
   2bb68:	d0e3      	beq.n	2bb32 <bt_id_add+0x6e>
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   2bb6a:	2001      	movs	r0, #1
   2bb6c:	f019 f8a0 	bl	44cb0 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   2bb70:	481e      	ldr	r0, [pc, #120]	; (2bbec <bt_id_add+0x128>)
   2bb72:	2100      	movs	r1, #0
}
   2bb74:	b003      	add	sp, #12
   2bb76:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   2bb7a:	f000 ba65 	b.w	2c048 <bt_le_ext_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   2bb7e:	462a      	mov	r2, r5
   2bb80:	1c6f      	adds	r7, r5, #1
   2bb82:	f812 0b2a 	ldrb.w	r0, [r2], #42
   2bb86:	4639      	mov	r1, r7
   2bb88:	f019 f841 	bl	44c0e <hci_id_add>
	if (err) {
   2bb8c:	4606      	mov	r6, r0
   2bb8e:	2800      	cmp	r0, #0
   2bb90:	d1eb      	bne.n	2bb6a <bt_id_add+0xa6>
	bt_dev.le.rl_entries++;
   2bb92:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   2bb96:	3301      	adds	r3, #1
   2bb98:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   2bb9c:	7a2b      	ldrb	r3, [r5, #8]
   2bb9e:	f043 0304 	orr.w	r3, r3, #4
   2bba2:	722b      	strb	r3, [r5, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   2bba4:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
   2bba8:	075b      	lsls	r3, r3, #29
   2bbaa:	d5de      	bpl.n	2bb6a <bt_id_add+0xa6>
	bt_addr_le_copy(&cp.id_addr, addr);
   2bbac:	4639      	mov	r1, r7
   2bbae:	4668      	mov	r0, sp
   2bbb0:	f019 f824 	bl	44bfc <bt_addr_le_copy>
	cp.mode = mode;
   2bbb4:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   2bbb6:	2108      	movs	r1, #8
   2bbb8:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   2bbbc:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   2bbc0:	f7ff fb32 	bl	2b228 <bt_hci_cmd_create>
	if (!buf) {
   2bbc4:	4604      	mov	r4, r0
   2bbc6:	2800      	cmp	r0, #0
   2bbc8:	d0cf      	beq.n	2bb6a <bt_id_add+0xa6>
   2bbca:	2208      	movs	r2, #8
   2bbcc:	4669      	mov	r1, sp
   2bbce:	4410      	add	r0, r2
   2bbd0:	f01b fb03 	bl	471da <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   2bbd4:	4632      	mov	r2, r6
   2bbd6:	4621      	mov	r1, r4
   2bbd8:	f242 004e 	movw	r0, #8270	; 0x204e
   2bbdc:	f7ff fb80 	bl	2b2e0 <bt_hci_cmd_send_sync>
	if (err) {
   2bbe0:	e7c3      	b.n	2bb6a <bt_id_add+0xa6>
   2bbe2:	bf00      	nop
   2bbe4:	20000000 	.word	0x20000000
   2bbe8:	00044ce1 	.word	0x00044ce1
   2bbec:	00044c6d 	.word	0x00044c6d

0002bbf0 <bt_id_del>:
{
   2bbf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size ||
   2bbf4:	4c3c      	ldr	r4, [pc, #240]	; (2bce8 <bt_id_del+0xf8>)
   2bbf6:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   2bbfa:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
{
   2bbfe:	4605      	mov	r5, r0
	if (!bt_dev.le.rl_size ||
   2bc00:	b112      	cbz	r2, 2bc08 <bt_id_del+0x18>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   2bc02:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   2bc04:	4293      	cmp	r3, r2
   2bc06:	dd08      	ble.n	2bc1a <bt_id_del+0x2a>
		bt_dev.le.rl_entries--;
   2bc08:	3b01      	subs	r3, #1
   2bc0a:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   2bc0e:	7a2b      	ldrb	r3, [r5, #8]
   2bc10:	f023 0304 	bic.w	r3, r3, #4
   2bc14:	722b      	strb	r3, [r5, #8]
}
   2bc16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   2bc1a:	2100      	movs	r1, #0
   2bc1c:	2206      	movs	r2, #6
   2bc1e:	4608      	mov	r0, r1
   2bc20:	f001 f8ba 	bl	2cd98 <bt_conn_lookup_state_le>
	if (conn) {
   2bc24:	4606      	mov	r6, r0
   2bc26:	b1a0      	cbz	r0, 2bc52 <bt_id_del+0x62>
   2bc28:	f3bf 8f5b 	dmb	ish
   2bc2c:	34cc      	adds	r4, #204	; 0xcc
   2bc2e:	e854 3f00 	ldrex	r3, [r4]
   2bc32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   2bc36:	e844 3200 	strex	r2, r3, [r4]
   2bc3a:	2a00      	cmp	r2, #0
   2bc3c:	d1f7      	bne.n	2bc2e <bt_id_del+0x3e>
   2bc3e:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   2bc42:	7a2b      	ldrb	r3, [r5, #8]
   2bc44:	f043 0302 	orr.w	r3, r3, #2
   2bc48:	722b      	strb	r3, [r5, #8]
}
   2bc4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   2bc4e:	f019 baa0 	b.w	45192 <bt_conn_unref>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   2bc52:	4601      	mov	r1, r0
   2bc54:	4825      	ldr	r0, [pc, #148]	; (2bcec <bt_id_del+0xfc>)
   2bc56:	f000 f9f7 	bl	2c048 <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   2bc5a:	4630      	mov	r0, r6
   2bc5c:	f019 f828 	bl	44cb0 <addr_res_enable>
	if (err) {
   2bc60:	4607      	mov	r7, r0
   2bc62:	b988      	cbnz	r0, 2bc88 <bt_id_del+0x98>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   2bc64:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   2bc68:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   2bc6c:	429a      	cmp	r2, r3
   2bc6e:	d217      	bcs.n	2bca0 <bt_id_del+0xb0>
		bt_dev.le.rl_entries--;
   2bc70:	3b01      	subs	r3, #1
   2bc72:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   2bc76:	7a2b      	ldrb	r3, [r5, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   2bc78:	491d      	ldr	r1, [pc, #116]	; (2bcf0 <bt_id_del+0x100>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   2bc7a:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   2bc7e:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   2bc80:	722b      	strb	r3, [r5, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   2bc82:	2002      	movs	r0, #2
   2bc84:	f004 f8bc 	bl	2fe00 <bt_keys_foreach_type>
	if (bt_dev.le.rl_entries) {
   2bc88:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   2bc8c:	b113      	cbz	r3, 2bc94 <bt_id_del+0xa4>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   2bc8e:	2001      	movs	r0, #1
   2bc90:	f019 f80e 	bl	44cb0 <addr_res_enable>
}
   2bc94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   2bc98:	4816      	ldr	r0, [pc, #88]	; (2bcf4 <bt_id_del+0x104>)
   2bc9a:	2100      	movs	r1, #0
   2bc9c:	f000 b9d4 	b.w	2c048 <bt_le_ext_adv_foreach>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   2bca0:	2107      	movs	r1, #7
   2bca2:	f242 0028 	movw	r0, #8232	; 0x2028
   2bca6:	f7ff fabf 	bl	2b228 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   2bcaa:	f105 0801 	add.w	r8, r5, #1
	if (!buf) {
   2bcae:	4606      	mov	r6, r0
   2bcb0:	2800      	cmp	r0, #0
   2bcb2:	d0e9      	beq.n	2bc88 <bt_id_del+0x98>
	return net_buf_simple_add(&buf->b, len);
   2bcb4:	2107      	movs	r1, #7
   2bcb6:	3008      	adds	r0, #8
   2bcb8:	f01b fa89 	bl	471ce <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   2bcbc:	4641      	mov	r1, r8
   2bcbe:	f018 ff9d 	bl	44bfc <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   2bcc2:	463a      	mov	r2, r7
   2bcc4:	4631      	mov	r1, r6
   2bcc6:	f242 0028 	movw	r0, #8232	; 0x2028
   2bcca:	f7ff fb09 	bl	2b2e0 <bt_hci_cmd_send_sync>
	if (err) {
   2bcce:	2800      	cmp	r0, #0
   2bcd0:	d1da      	bne.n	2bc88 <bt_id_del+0x98>
	bt_dev.le.rl_entries--;
   2bcd2:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   2bcd6:	3b01      	subs	r3, #1
   2bcd8:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   2bcdc:	7a2b      	ldrb	r3, [r5, #8]
   2bcde:	f023 0304 	bic.w	r3, r3, #4
   2bce2:	722b      	strb	r3, [r5, #8]
   2bce4:	e7d0      	b.n	2bc88 <bt_id_del+0x98>
   2bce6:	bf00      	nop
   2bce8:	20000000 	.word	0x20000000
   2bcec:	00044ce1 	.word	0x00044ce1
   2bcf0:	00044c9b 	.word	0x00044c9b
   2bcf4:	00044c6d 	.word	0x00044c6d

0002bcf8 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   2bcf8:	b570      	push	{r4, r5, r6, lr}
   2bcfa:	460d      	mov	r5, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   2bcfc:	4604      	mov	r4, r0
   2bcfe:	b918      	cbnz	r0, 2bd08 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   2bd00:	b1c5      	cbz	r5, 2bd34 <bt_id_create+0x3c>
			return -EINVAL;
   2bd02:	f06f 0015 	mvn.w	r0, #21
	if (err) {
		return err;
	}

	return new_id;
}
   2bd06:	bd70      	pop	{r4, r5, r6, pc}
   2bd08:	491b      	ldr	r1, [pc, #108]	; (2bd78 <bt_id_create+0x80>)
   2bd0a:	2207      	movs	r2, #7
   2bd0c:	f018 faf4 	bl	442f8 <memcmp>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   2bd10:	2800      	cmp	r0, #0
   2bd12:	d0f5      	beq.n	2bd00 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   2bd14:	7823      	ldrb	r3, [r4, #0]
   2bd16:	2b01      	cmp	r3, #1
   2bd18:	d1f3      	bne.n	2bd02 <bt_id_create+0xa>
   2bd1a:	79a3      	ldrb	r3, [r4, #6]
   2bd1c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2bd20:	2bc0      	cmp	r3, #192	; 0xc0
   2bd22:	d1ee      	bne.n	2bd02 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   2bd24:	4620      	mov	r0, r4
   2bd26:	f7ff fe35 	bl	2b994 <id_find>
   2bd2a:	2800      	cmp	r0, #0
   2bd2c:	dbe8      	blt.n	2bd00 <bt_id_create+0x8>
			return -EALREADY;
   2bd2e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2bd32:	e7e8      	b.n	2bd06 <bt_id_create+0xe>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   2bd34:	4e11      	ldr	r6, [pc, #68]	; (2bd7c <bt_id_create+0x84>)
   2bd36:	79f3      	ldrb	r3, [r6, #7]
   2bd38:	2b01      	cmp	r3, #1
   2bd3a:	d01a      	beq.n	2bd72 <bt_id_create+0x7a>
   2bd3c:	f106 00cc 	add.w	r0, r6, #204	; 0xcc
   2bd40:	f018 ff5f 	bl	44c02 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   2bd44:	07c3      	lsls	r3, r0, #31
   2bd46:	d50a      	bpl.n	2bd5e <bt_id_create+0x66>
	new_id = bt_dev.id_count++;
   2bd48:	79f5      	ldrb	r5, [r6, #7]
	err = id_create(new_id, addr, irk);
   2bd4a:	4621      	mov	r1, r4
	new_id = bt_dev.id_count++;
   2bd4c:	1c6b      	adds	r3, r5, #1
	err = id_create(new_id, addr, irk);
   2bd4e:	4628      	mov	r0, r5
	new_id = bt_dev.id_count++;
   2bd50:	71f3      	strb	r3, [r6, #7]
	err = id_create(new_id, addr, irk);
   2bd52:	f7ff fe65 	bl	2ba20 <id_create.constprop.0>
	new_id = bt_dev.id_count++;
   2bd56:	2800      	cmp	r0, #0
   2bd58:	bf08      	it	eq
   2bd5a:	4628      	moveq	r0, r5
   2bd5c:	e7d3      	b.n	2bd06 <bt_id_create+0xe>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   2bd5e:	2c00      	cmp	r4, #0
   2bd60:	d0cf      	beq.n	2bd02 <bt_id_create+0xa>
   2bd62:	4905      	ldr	r1, [pc, #20]	; (2bd78 <bt_id_create+0x80>)
   2bd64:	2207      	movs	r2, #7
   2bd66:	4620      	mov	r0, r4
   2bd68:	f018 fac6 	bl	442f8 <memcmp>
   2bd6c:	2800      	cmp	r0, #0
   2bd6e:	d1eb      	bne.n	2bd48 <bt_id_create+0x50>
   2bd70:	e7c7      	b.n	2bd02 <bt_id_create+0xa>
		return -ENOMEM;
   2bd72:	f06f 000b 	mvn.w	r0, #11
   2bd76:	e7c6      	b.n	2bd06 <bt_id_create+0xe>
   2bd78:	0004a7b7 	.word	0x0004a7b7
   2bd7c:	20000000 	.word	0x20000000

0002bd80 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   2bd80:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2bd82:	4605      	mov	r5, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   2bd84:	aa01      	add	r2, sp, #4
   2bd86:	2100      	movs	r1, #0
   2bd88:	f241 0009 	movw	r0, #4105	; 0x1009
   2bd8c:	f7ff faa8 	bl	2b2e0 <bt_hci_cmd_send_sync>
	if (err) {
   2bd90:	4606      	mov	r6, r0
   2bd92:	b958      	cbnz	r0, 2bdac <bt_id_read_public_addr+0x2c>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   2bd94:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
   2bd96:	4910      	ldr	r1, [pc, #64]	; (2bdd8 <bt_id_read_public_addr+0x58>)

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   2bd98:	689c      	ldr	r4, [r3, #8]
   2bd9a:	3401      	adds	r4, #1
   2bd9c:	2206      	movs	r2, #6
   2bd9e:	4620      	mov	r0, r4
   2bda0:	f018 faaa 	bl	442f8 <memcmp>
   2bda4:	b928      	cbnz	r0, 2bdb2 <bt_id_read_public_addr+0x32>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
   2bda6:	9801      	ldr	r0, [sp, #4]
   2bda8:	f010 fab2 	bl	3c310 <net_buf_unref>
		return 0U;
   2bdac:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   2bdae:	b002      	add	sp, #8
   2bdb0:	bd70      	pop	{r4, r5, r6, pc}
   2bdb2:	490a      	ldr	r1, [pc, #40]	; (2bddc <bt_id_read_public_addr+0x5c>)
   2bdb4:	2206      	movs	r2, #6
   2bdb6:	4620      	mov	r0, r4
   2bdb8:	f018 fa9e 	bl	442f8 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   2bdbc:	2800      	cmp	r0, #0
   2bdbe:	d0f2      	beq.n	2bda6 <bt_id_read_public_addr+0x26>
	memcpy(dst, src, sizeof(*dst));
   2bdc0:	2206      	movs	r2, #6
   2bdc2:	4621      	mov	r1, r4
   2bdc4:	1c68      	adds	r0, r5, #1
   2bdc6:	f018 faa7 	bl	44318 <memcpy>
	net_buf_unref(rsp);
   2bdca:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   2bdcc:	702e      	strb	r6, [r5, #0]
	net_buf_unref(rsp);
   2bdce:	f010 fa9f 	bl	3c310 <net_buf_unref>
	return 1U;
   2bdd2:	2001      	movs	r0, #1
   2bdd4:	e7eb      	b.n	2bdae <bt_id_read_public_addr+0x2e>
   2bdd6:	bf00      	nop
   2bdd8:	0004a7c4 	.word	0x0004a7c4
   2bddc:	0004a7be 	.word	0x0004a7be

0002bde0 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   2bde0:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   2bde2:	4668      	mov	r0, sp
   2bde4:	f7ff ffcc 	bl	2bd80 <bt_id_read_public_addr>
   2bde8:	4b04      	ldr	r3, [pc, #16]	; (2bdfc <bt_setup_public_id_addr+0x1c>)
   2bdea:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   2bdec:	b118      	cbz	r0, 2bdf6 <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
   2bdee:	4669      	mov	r1, sp
   2bdf0:	2000      	movs	r0, #0
   2bdf2:	f7ff fe15 	bl	2ba20 <id_create.constprop.0>
}
   2bdf6:	b003      	add	sp, #12
   2bdf8:	f85d fb04 	ldr.w	pc, [sp], #4
   2bdfc:	20000000 	.word	0x20000000

0002be00 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   2be00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   2be04:	4b15      	ldr	r3, [pc, #84]	; (2be5c <bt_read_static_addr+0x5c>)
   2be06:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
   2be0a:	07db      	lsls	r3, r3, #31
{
   2be0c:	4607      	mov	r7, r0
   2be0e:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   2be10:	d404      	bmi.n	2be1c <bt_read_static_addr+0x1c>
		BT_WARN("Read Static Addresses command not available");
		return 0;
   2be12:	2500      	movs	r5, #0
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   2be14:	4628      	mov	r0, r5
   2be16:	b002      	add	sp, #8
   2be18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   2be1c:	aa01      	add	r2, sp, #4
   2be1e:	2100      	movs	r1, #0
   2be20:	f64f 4009 	movw	r0, #64521	; 0xfc09
   2be24:	f7ff fa5c 	bl	2b2e0 <bt_hci_cmd_send_sync>
	if (err) {
   2be28:	4604      	mov	r4, r0
   2be2a:	2800      	cmp	r0, #0
   2be2c:	d1f1      	bne.n	2be12 <bt_read_static_addr+0x12>
	rp = (void *)rsp->data;
   2be2e:	9b01      	ldr	r3, [sp, #4]
   2be30:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   2be32:	785d      	ldrb	r5, [r3, #1]
   2be34:	42b5      	cmp	r5, r6
   2be36:	bf28      	it	cs
   2be38:	4635      	movcs	r5, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   2be3a:	f04f 0816 	mov.w	r8, #22
   2be3e:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   2be40:	42a5      	cmp	r5, r4
   2be42:	dc03      	bgt.n	2be4c <bt_read_static_addr+0x4c>
	net_buf_unref(rsp);
   2be44:	9801      	ldr	r0, [sp, #4]
   2be46:	f010 fa63 	bl	3c310 <net_buf_unref>
	if (!cnt) {
   2be4a:	e7e3      	b.n	2be14 <bt_read_static_addr+0x14>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   2be4c:	fb08 7004 	mla	r0, r8, r4, r7
   2be50:	2216      	movs	r2, #22
   2be52:	4631      	mov	r1, r6
   2be54:	f018 fa60 	bl	44318 <memcpy>
	for (i = 0; i < cnt; i++) {
   2be58:	3401      	adds	r4, #1
   2be5a:	e7f1      	b.n	2be40 <bt_read_static_addr+0x40>
   2be5c:	20000000 	.word	0x20000000

0002be60 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   2be60:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   2be62:	4e15      	ldr	r6, [pc, #84]	; (2beb8 <bt_setup_random_id_addr+0x58>)
   2be64:	79f4      	ldrb	r4, [r6, #7]
{
   2be66:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   2be68:	b92c      	cbnz	r4, 2be76 <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   2be6a:	2101      	movs	r1, #1
   2be6c:	a802      	add	r0, sp, #8
   2be6e:	f7ff ffc7 	bl	2be00 <bt_read_static_addr>
   2be72:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
   2be74:	b9c8      	cbnz	r0, 2beaa <bt_setup_random_id_addr+0x4a>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   2be76:	2100      	movs	r1, #0
   2be78:	4608      	mov	r0, r1
}
   2be7a:	b009      	add	sp, #36	; 0x24
   2be7c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
   2be80:	f7ff bf3a 	b.w	2bcf8 <bt_id_create>
   2be84:	ab02      	add	r3, sp, #8
   2be86:	fb07 3105 	mla	r1, r7, r5, r3
   2be8a:	2206      	movs	r2, #6
   2be8c:	f10d 0001 	add.w	r0, sp, #1
   2be90:	f018 fa42 	bl	44318 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   2be94:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   2be96:	4669      	mov	r1, sp
   2be98:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
   2be9a:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   2be9e:	f7ff fdbf 	bl	2ba20 <id_create.constprop.0>
				if (err) {
   2bea2:	3401      	adds	r4, #1
   2bea4:	b110      	cbz	r0, 2beac <bt_setup_random_id_addr+0x4c>
}
   2bea6:	b009      	add	sp, #36	; 0x24
   2bea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   2beaa:	2716      	movs	r7, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   2beac:	79f3      	ldrb	r3, [r6, #7]
   2beae:	b2e5      	uxtb	r5, r4
   2beb0:	42ab      	cmp	r3, r5
   2beb2:	d8e7      	bhi.n	2be84 <bt_setup_random_id_addr+0x24>
			return 0;
   2beb4:	2000      	movs	r0, #0
   2beb6:	e7f6      	b.n	2bea6 <bt_setup_random_id_addr+0x46>
   2beb8:	20000000 	.word	0x20000000

0002bebc <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   2bebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   2bec0:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
   2bec2:	7804      	ldrb	r4, [r0, #0]
{
   2bec4:	460e      	mov	r6, r1
   2bec6:	4690      	mov	r8, r2
   2bec8:	461d      	mov	r5, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   2beca:	d52e      	bpl.n	2bf2a <bt_id_set_adv_own_addr+0x6e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   2becc:	4f21      	ldr	r7, [pc, #132]	; (2bf54 <bt_id_set_adv_own_addr+0x98>)
   2bece:	b1a2      	cbz	r2, 2befa <bt_id_set_adv_own_addr+0x3e>
   2bed0:	0688      	lsls	r0, r1, #26
   2bed2:	d40b      	bmi.n	2beec <bt_id_set_adv_own_addr+0x30>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   2bed4:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   2bed8:	5cf8      	ldrb	r0, [r7, r3]
   2beda:	2801      	cmp	r0, #1
   2bedc:	d014      	beq.n	2bf08 <bt_id_set_adv_own_addr+0x4c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   2bede:	7028      	strb	r0, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   2bee0:	06b2      	lsls	r2, r6, #26
   2bee2:	d51f      	bpl.n	2bf24 <bt_id_set_adv_own_addr+0x68>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   2bee4:	f040 0002 	orr.w	r0, r0, #2
   2bee8:	7028      	strb	r0, [r5, #0]
   2beea:	e01b      	b.n	2bf24 <bt_id_set_adv_own_addr+0x68>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   2beec:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
   2bef0:	0659      	lsls	r1, r3, #25
   2bef2:	d4ef      	bmi.n	2bed4 <bt_id_set_adv_own_addr+0x18>
			return -ENOTSUP;
   2bef4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2bef8:	e015      	b.n	2bf26 <bt_id_set_adv_own_addr+0x6a>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   2befa:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   2befe:	5cfb      	ldrb	r3, [r7, r3]
   2bf00:	2b01      	cmp	r3, #1
   2bf02:	d001      	beq.n	2bf08 <bt_id_set_adv_own_addr+0x4c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
			}

			*own_addr_type = id_addr->type;
   2bf04:	702b      	strb	r3, [r5, #0]
		} else {
			err = bt_id_set_adv_private_addr(adv);
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}

		if (err) {
   2bf06:	e00d      	b.n	2bf24 <bt_id_set_adv_own_addr+0x68>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   2bf08:	2007      	movs	r0, #7
   2bf0a:	fb00 7004 	mla	r0, r0, r4, r7
		return set_random_address(addr);
   2bf0e:	3001      	adds	r0, #1
   2bf10:	f7ff fd5a 	bl	2b9c8 <set_random_address>
				if (err) {
   2bf14:	b938      	cbnz	r0, 2bf26 <bt_id_set_adv_own_addr+0x6a>
			*own_addr_type = id_addr->type;
   2bf16:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   2bf1a:	5d38      	ldrb	r0, [r7, r4]
   2bf1c:	7028      	strb	r0, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   2bf1e:	f1b8 0f00 	cmp.w	r8, #0
   2bf22:	d1dd      	bne.n	2bee0 <bt_id_set_adv_own_addr+0x24>
			return err;
		}
	}

	return 0;
   2bf24:	2000      	movs	r0, #0
}
   2bf26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   2bf2a:	074b      	lsls	r3, r1, #29
   2bf2c:	d50e      	bpl.n	2bf4c <bt_id_set_adv_own_addr+0x90>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   2bf2e:	4e09      	ldr	r6, [pc, #36]	; (2bf54 <bt_id_set_adv_own_addr+0x98>)
   2bf30:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   2bf34:	5df3      	ldrb	r3, [r6, r7]
   2bf36:	2b01      	cmp	r3, #1
   2bf38:	d1e4      	bne.n	2bf04 <bt_id_set_adv_own_addr+0x48>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   2bf3a:	2007      	movs	r0, #7
   2bf3c:	fb10 3004 	smlabb	r0, r0, r4, r3
		return set_random_address(addr);
   2bf40:	4430      	add	r0, r6
   2bf42:	f7ff fd41 	bl	2b9c8 <set_random_address>
			*own_addr_type = id_addr->type;
   2bf46:	5df3      	ldrb	r3, [r6, r7]
   2bf48:	702b      	strb	r3, [r5, #0]
		if (err) {
   2bf4a:	e7ec      	b.n	2bf26 <bt_id_set_adv_own_addr+0x6a>
			err = bt_id_set_adv_private_addr(adv);
   2bf4c:	f018 feec 	bl	44d28 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   2bf50:	2301      	movs	r3, #1
   2bf52:	e7f9      	b.n	2bf48 <bt_id_set_adv_own_addr+0x8c>
   2bf54:	20000000 	.word	0x20000000

0002bf58 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   2bf58:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   2bf5a:	4605      	mov	r5, r0
   2bf5c:	4b16      	ldr	r3, [pc, #88]	; (2bfb8 <le_adv_start_add_conn+0x60>)
   2bf5e:	f815 2b09 	ldrb.w	r2, [r5], #9
   2bf62:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   2bf66:	4604      	mov	r4, r0
   2bf68:	460e      	mov	r6, r1
	return memcmp(a, b, sizeof(*a));
   2bf6a:	2207      	movs	r2, #7
   2bf6c:	4913      	ldr	r1, [pc, #76]	; (2bfbc <le_adv_start_add_conn+0x64>)
   2bf6e:	4628      	mov	r0, r5
   2bf70:	f018 f9c2 	bl	442f8 <memcmp>
   2bf74:	4603      	mov	r3, r0
   2bf76:	7820      	ldrb	r0, [r4, #0]

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   2bf78:	b96b      	cbnz	r3, 2bf96 <le_adv_start_add_conn+0x3e>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   2bf7a:	4911      	ldr	r1, [pc, #68]	; (2bfc0 <le_adv_start_add_conn+0x68>)
   2bf7c:	f000 fed6 	bl	2cd2c <bt_conn_add_le>
		if (!conn) {
   2bf80:	4604      	mov	r4, r0
   2bf82:	b910      	cbnz	r0, 2bf8a <le_adv_start_add_conn+0x32>
			return -ENOMEM;
   2bf84:	f06f 000b 	mvn.w	r0, #11
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
   2bf88:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   2bf8a:	2104      	movs	r1, #4
   2bf8c:	f000 fd00 	bl	2c990 <bt_conn_set_state>
		*out_conn = conn;
   2bf90:	6034      	str	r4, [r6, #0]
		return 0;
   2bf92:	2000      	movs	r0, #0
   2bf94:	e7f8      	b.n	2bf88 <le_adv_start_add_conn+0x30>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   2bf96:	4629      	mov	r1, r5
   2bf98:	f019 f9b2 	bl	45300 <bt_conn_exists_le>
   2bf9c:	b940      	cbnz	r0, 2bfb0 <le_adv_start_add_conn+0x58>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   2bf9e:	7820      	ldrb	r0, [r4, #0]
   2bfa0:	4629      	mov	r1, r5
   2bfa2:	f000 fec3 	bl	2cd2c <bt_conn_add_le>
	if (!conn) {
   2bfa6:	4604      	mov	r4, r0
   2bfa8:	2800      	cmp	r0, #0
   2bfaa:	d0eb      	beq.n	2bf84 <le_adv_start_add_conn+0x2c>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   2bfac:	2105      	movs	r1, #5
   2bfae:	e7ed      	b.n	2bf8c <le_adv_start_add_conn+0x34>
		return -EINVAL;
   2bfb0:	f06f 0015 	mvn.w	r0, #21
   2bfb4:	e7e8      	b.n	2bf88 <le_adv_start_add_conn+0x30>
   2bfb6:	bf00      	nop
   2bfb8:	20000000 	.word	0x20000000
   2bfbc:	0004a7b7 	.word	0x0004a7b7
   2bfc0:	0004a7b0 	.word	0x0004a7b0

0002bfc4 <valid_adv_param>:
{
   2bfc4:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   2bfc6:	6843      	ldr	r3, [r0, #4]
{
   2bfc8:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   2bfca:	0558      	lsls	r0, r3, #21
   2bfcc:	d501      	bpl.n	2bfd2 <valid_adv_param+0xe>
		return false;
   2bfce:	2000      	movs	r0, #0
}
   2bfd0:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   2bfd2:	6922      	ldr	r2, [r4, #16]
   2bfd4:	b10a      	cbz	r2, 2bfda <valid_adv_param+0x16>
   2bfd6:	07d9      	lsls	r1, r3, #31
   2bfd8:	d5f9      	bpl.n	2bfce <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   2bfda:	4d19      	ldr	r5, [pc, #100]	; (2c040 <valid_adv_param+0x7c>)
   2bfdc:	7820      	ldrb	r0, [r4, #0]
   2bfde:	79eb      	ldrb	r3, [r5, #7]
   2bfe0:	4283      	cmp	r3, r0
   2bfe2:	d9f4      	bls.n	2bfce <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   2bfe4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   2bfe8:	4916      	ldr	r1, [pc, #88]	; (2c044 <valid_adv_param+0x80>)
   2bfea:	2207      	movs	r2, #7
   2bfec:	4428      	add	r0, r5
   2bfee:	f018 f983 	bl	442f8 <memcmp>
	if (param->id >= bt_dev.id_count ||
   2bff2:	2800      	cmp	r0, #0
   2bff4:	d0eb      	beq.n	2bfce <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   2bff6:	6860      	ldr	r0, [r4, #4]
   2bff8:	07c2      	lsls	r2, r0, #31
   2bffa:	d406      	bmi.n	2c00a <valid_adv_param+0x46>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   2bffc:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   2c000:	2b08      	cmp	r3, #8
   2c002:	d802      	bhi.n	2c00a <valid_adv_param+0x46>
   2c004:	68a3      	ldr	r3, [r4, #8]
   2c006:	2b9f      	cmp	r3, #159	; 0x9f
   2c008:	d9e1      	bls.n	2bfce <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   2c00a:	f010 0f30 	tst.w	r0, #48	; 0x30
   2c00e:	d002      	beq.n	2c016 <valid_adv_param+0x52>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   2c010:	6923      	ldr	r3, [r4, #16]
   2c012:	2b00      	cmp	r3, #0
   2c014:	d0db      	beq.n	2bfce <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   2c016:	06c3      	lsls	r3, r0, #27
   2c018:	d401      	bmi.n	2c01e <valid_adv_param+0x5a>
   2c01a:	6923      	ldr	r3, [r4, #16]
   2c01c:	b943      	cbnz	r3, 2c030 <valid_adv_param+0x6c>
		if (param->interval_min > param->interval_max ||
   2c01e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   2c022:	429a      	cmp	r2, r3
   2c024:	d8d3      	bhi.n	2bfce <valid_adv_param+0xa>
   2c026:	2a1f      	cmp	r2, #31
   2c028:	d9d1      	bls.n	2bfce <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   2c02a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   2c02e:	d8ce      	bhi.n	2bfce <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   2c030:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   2c034:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   2c038:	bf18      	it	ne
   2c03a:	2001      	movne	r0, #1
   2c03c:	e7c8      	b.n	2bfd0 <valid_adv_param+0xc>
   2c03e:	bf00      	nop
   2c040:	20000000 	.word	0x20000000
   2c044:	0004a7b7 	.word	0x0004a7b7

0002c048 <bt_le_ext_adv_foreach>:
{
   2c048:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   2c04a:	4801      	ldr	r0, [pc, #4]	; (2c050 <bt_le_ext_adv_foreach+0x8>)
   2c04c:	4718      	bx	r3
   2c04e:	bf00      	nop
   2c050:	20000018 	.word	0x20000018

0002c054 <bt_le_adv_lookup_legacy>:
}
   2c054:	4800      	ldr	r0, [pc, #0]	; (2c058 <bt_le_adv_lookup_legacy+0x4>)
   2c056:	4770      	bx	lr
   2c058:	20000018 	.word	0x20000018

0002c05c <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   2c05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   2c060:	f8d1 9010 	ldr.w	r9, [r1, #16]
{
   2c064:	b08d      	sub	sp, #52	; 0x34
   2c066:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
   2c068:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
   2c06a:	ebb9 0603 	subs.w	r6, r9, r3
{
   2c06e:	4605      	mov	r5, r0
   2c070:	488d      	ldr	r0, [pc, #564]	; (2c2a8 <bt_le_adv_start_legacy+0x24c>)
   2c072:	9205      	str	r2, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable = false;
   2c074:	bf18      	it	ne
   2c076:	2601      	movne	r6, #1
	struct bt_conn *conn = NULL;
   2c078:	9307      	str	r3, [sp, #28]
   2c07a:	f018 fe8a 	bl	44d92 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2c07e:	0742      	lsls	r2, r0, #29
{
   2c080:	460c      	mov	r4, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2c082:	f140 8106 	bpl.w	2c292 <bt_le_adv_start_legacy+0x236>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   2c086:	4608      	mov	r0, r1
   2c088:	f7ff ff9c 	bl	2bfc4 <valid_adv_param>
   2c08c:	b928      	cbnz	r0, 2c09a <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   2c08e:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   2c092:	4658      	mov	r0, fp
   2c094:	b00d      	add	sp, #52	; 0x34
   2c096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   2c09a:	4620      	mov	r0, r4
   2c09c:	f018 fe56 	bl	44d4c <bt_id_adv_random_addr_check>
   2c0a0:	4680      	mov	r8, r0
   2c0a2:	2800      	cmp	r0, #0
   2c0a4:	d0f3      	beq.n	2c08e <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2c0a6:	f105 0710 	add.w	r7, r5, #16
   2c0aa:	4638      	mov	r0, r7
   2c0ac:	f018 fe71 	bl	44d92 <atomic_get>
   2c0b0:	0643      	lsls	r3, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2c0b2:	f3c0 1b80 	ubfx	fp, r0, #6, #1
   2c0b6:	f100 80ef 	bmi.w	2c298 <bt_le_adv_start_legacy+0x23c>
	(void)memset(&set_param, 0, sizeof(set_param));
   2c0ba:	220f      	movs	r2, #15
   2c0bc:	4659      	mov	r1, fp
   2c0be:	a808      	add	r0, sp, #32
   2c0c0:	f018 f935 	bl	4432e <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   2c0c4:	68a3      	ldr	r3, [r4, #8]
   2c0c6:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.channel_map  = get_adv_channel_map(param->options);
   2c0ca:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   2c0cc:	68e3      	ldr	r3, [r4, #12]
   2c0ce:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   2c0d2:	f018 fe4f 	bl	44d74 <get_adv_channel_map>
	if (adv->id != param->id) {
   2c0d6:	782a      	ldrb	r2, [r5, #0]
   2c0d8:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   2c0da:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
   2c0de:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   2c0e0:	f88d b02e 	strb.w	fp, [sp, #46]	; 0x2e
	if (adv->id != param->id) {
   2c0e4:	d004      	beq.n	2c0f0 <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c0e6:	4870      	ldr	r0, [pc, #448]	; (2c2a8 <bt_le_adv_start_legacy+0x24c>)
   2c0e8:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   2c0ec:	f018 fe57 	bl	44d9e <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   2c0f0:	4a6e      	ldr	r2, [pc, #440]	; (2c2ac <bt_le_adv_start_legacy+0x250>)
	adv->id = param->id;
   2c0f2:	7823      	ldrb	r3, [r4, #0]
   2c0f4:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   2c0f6:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   2c0fa:	6861      	ldr	r1, [r4, #4]
   2c0fc:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   2c100:	4632      	mov	r2, r6
   2c102:	4628      	mov	r0, r5
   2c104:	f7ff feda 	bl	2bebc <bt_id_set_adv_own_addr>
	if (err) {
   2c108:	4683      	mov	fp, r0
   2c10a:	2800      	cmp	r0, #0
   2c10c:	d1c1      	bne.n	2c092 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   2c10e:	f105 0009 	add.w	r0, r5, #9
	memcpy(dst, src, sizeof(*dst));
   2c112:	2207      	movs	r2, #7
	if (dir_adv) {
   2c114:	f1b9 0f00 	cmp.w	r9, #0
   2c118:	d013      	beq.n	2c142 <bt_le_adv_start_legacy+0xe6>
   2c11a:	6921      	ldr	r1, [r4, #16]
   2c11c:	f018 f8fc 	bl	44318 <memcpy>
	name_type = get_adv_name_type_param(param);
   2c120:	4620      	mov	r0, r4
   2c122:	f018 ff38 	bl	44f96 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   2c126:	6862      	ldr	r2, [r4, #4]
	name_type = get_adv_name_type_param(param);
   2c128:	4606      	mov	r6, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   2c12a:	07d0      	lsls	r0, r2, #31
   2c12c:	d416      	bmi.n	2c15c <bt_le_adv_start_legacy+0x100>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   2c12e:	0592      	lsls	r2, r2, #22
   2c130:	d403      	bmi.n	2c13a <bt_le_adv_start_legacy+0xde>
   2c132:	9b16      	ldr	r3, [sp, #88]	; 0x58
   2c134:	b90b      	cbnz	r3, 2c13a <bt_le_adv_start_legacy+0xde>
   2c136:	2e02      	cmp	r6, #2
   2c138:	d14d      	bne.n	2c1d6 <bt_le_adv_start_legacy+0x17a>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   2c13a:	2302      	movs	r3, #2
   2c13c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   2c140:	e01a      	b.n	2c178 <bt_le_adv_start_legacy+0x11c>
   2c142:	495b      	ldr	r1, [pc, #364]	; (2c2b0 <bt_le_adv_start_legacy+0x254>)
   2c144:	f018 f8e8 	bl	44318 <memcpy>
	name_type = get_adv_name_type_param(param);
   2c148:	4620      	mov	r0, r4
   2c14a:	f018 ff24 	bl	44f96 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   2c14e:	6862      	ldr	r2, [r4, #4]
   2c150:	07d1      	lsls	r1, r2, #31
	name_type = get_adv_name_type_param(param);
   2c152:	4606      	mov	r6, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   2c154:	d5eb      	bpl.n	2c12e <bt_le_adv_start_legacy+0xd2>
			set_param.type = BT_HCI_ADV_IND;
   2c156:	f88d 9024 	strb.w	r9, [sp, #36]	; 0x24
   2c15a:	e00d      	b.n	2c178 <bt_le_adv_start_legacy+0x11c>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   2c15c:	f012 0f10 	tst.w	r2, #16
   2c160:	bf0c      	ite	eq
   2c162:	2201      	moveq	r2, #1
   2c164:	2204      	movne	r2, #4
   2c166:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
   2c16a:	6921      	ldr	r1, [r4, #16]
   2c16c:	2207      	movs	r2, #7
   2c16e:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   2c172:	f018 f8d1 	bl	44318 <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   2c176:	46d8      	mov	r8, fp
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   2c178:	210f      	movs	r1, #15
   2c17a:	f242 0006 	movw	r0, #8198	; 0x2006
   2c17e:	f7ff f853 	bl	2b228 <bt_hci_cmd_create>
	if (!buf) {
   2c182:	4683      	mov	fp, r0
   2c184:	2800      	cmp	r0, #0
   2c186:	f000 808a 	beq.w	2c29e <bt_le_adv_start_legacy+0x242>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2c18a:	220f      	movs	r2, #15
   2c18c:	a908      	add	r1, sp, #32
   2c18e:	3008      	adds	r0, #8
   2c190:	f01b f823 	bl	471da <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   2c194:	2200      	movs	r2, #0
   2c196:	4659      	mov	r1, fp
   2c198:	f242 0006 	movw	r0, #8198	; 0x2006
   2c19c:	f7ff f8a0 	bl	2b2e0 <bt_hci_cmd_send_sync>
	if (err) {
   2c1a0:	2800      	cmp	r0, #0
   2c1a2:	d17f      	bne.n	2c2a4 <bt_le_adv_start_legacy+0x248>
	if (!dir_adv) {
   2c1a4:	f1b9 0f00 	cmp.w	r9, #0
   2c1a8:	d01b      	beq.n	2c1e2 <bt_le_adv_start_legacy+0x186>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   2c1aa:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2c1ac:	07db      	lsls	r3, r3, #31
   2c1ae:	d426      	bmi.n	2c1fe <bt_le_adv_start_legacy+0x1a2>
	return bt_le_adv_set_enable_legacy(adv, enable);
   2c1b0:	4628      	mov	r0, r5
   2c1b2:	2101      	movs	r1, #1
   2c1b4:	f018 feff 	bl	44fb6 <bt_le_adv_set_enable_legacy>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   2c1b8:	9d07      	ldr	r5, [sp, #28]
	if (err) {
   2c1ba:	4683      	mov	fp, r0
   2c1bc:	2800      	cmp	r0, #0
   2c1be:	d060      	beq.n	2c282 <bt_le_adv_start_legacy+0x226>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   2c1c0:	2d00      	cmp	r5, #0
   2c1c2:	f43f af66 	beq.w	2c092 <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2c1c6:	4628      	mov	r0, r5
   2c1c8:	2100      	movs	r1, #0
   2c1ca:	f000 fbe1 	bl	2c990 <bt_conn_set_state>
			bt_conn_unref(conn);
   2c1ce:	4628      	mov	r0, r5
   2c1d0:	f018 ffdf 	bl	45192 <bt_conn_unref>
   2c1d4:	e75d      	b.n	2c092 <bt_le_adv_start_legacy+0x36>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   2c1d6:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   2c1d8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   2c1dc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   2c1e0:	e7ca      	b.n	2c178 <bt_le_adv_start_legacy+0x11c>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   2c1e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   2c1e4:	9300      	str	r3, [sp, #0]
   2c1e6:	e9cd 8601 	strd	r8, r6, [sp, #4]
   2c1ea:	9b16      	ldr	r3, [sp, #88]	; 0x58
   2c1ec:	9905      	ldr	r1, [sp, #20]
   2c1ee:	4652      	mov	r2, sl
   2c1f0:	4628      	mov	r0, r5
   2c1f2:	f018 fe59 	bl	44ea8 <le_adv_update.constprop.0>
		if (err) {
   2c1f6:	4683      	mov	fp, r0
   2c1f8:	2800      	cmp	r0, #0
   2c1fa:	d0d6      	beq.n	2c1aa <bt_le_adv_start_legacy+0x14e>
   2c1fc:	e749      	b.n	2c092 <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   2c1fe:	a907      	add	r1, sp, #28
   2c200:	4628      	mov	r0, r5
   2c202:	f7ff fea9 	bl	2bf58 <le_adv_start_add_conn>
		if (err) {
   2c206:	4683      	mov	fp, r0
   2c208:	2800      	cmp	r0, #0
   2c20a:	d0d1      	beq.n	2c1b0 <bt_le_adv_start_legacy+0x154>
			if (err == -ENOMEM && !dir_adv &&
   2c20c:	f110 0f0c 	cmn.w	r0, #12
   2c210:	f47f af3f 	bne.w	2c092 <bt_le_adv_start_legacy+0x36>
   2c214:	f1b9 0f00 	cmp.w	r9, #0
   2c218:	f47f af3b 	bne.w	2c092 <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   2c21c:	6862      	ldr	r2, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   2c21e:	0790      	lsls	r0, r2, #30
   2c220:	f53f af37 	bmi.w	2c092 <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   2c224:	6863      	ldr	r3, [r4, #4]
   2c226:	f083 0302 	eor.w	r3, r3, #2
   2c22a:	f3c3 0b40 	ubfx	fp, r3, #1, #1
   2c22e:	f00b 0201 	and.w	r2, fp, #1
   2c232:	210d      	movs	r1, #13
   2c234:	4638      	mov	r0, r7
   2c236:	f018 fe20 	bl	44e7a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   2c23a:	1e73      	subs	r3, r6, #1
   2c23c:	425a      	negs	r2, r3
   2c23e:	415a      	adcs	r2, r3
   2c240:	2107      	movs	r1, #7
   2c242:	4638      	mov	r0, r7
   2c244:	f018 fe19 	bl	44e7a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   2c248:	1eb1      	subs	r1, r6, #2
   2c24a:	424a      	negs	r2, r1
   2c24c:	414a      	adcs	r2, r1
   2c24e:	4638      	mov	r0, r7
   2c250:	2108      	movs	r1, #8
   2c252:	f018 fe12 	bl	44e7a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   2c256:	6862      	ldr	r2, [r4, #4]
   2c258:	2109      	movs	r1, #9
   2c25a:	f002 0201 	and.w	r2, r2, #1
   2c25e:	4638      	mov	r0, r7
   2c260:	f018 fe0b 	bl	44e7a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   2c264:	4642      	mov	r2, r8
   2c266:	210a      	movs	r1, #10
   2c268:	4638      	mov	r0, r7
   2c26a:	f018 fe06 	bl	44e7a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   2c26e:	6862      	ldr	r2, [r4, #4]
   2c270:	210c      	movs	r1, #12
   2c272:	f3c2 0280 	ubfx	r2, r2, #2, #1
   2c276:	4638      	mov	r0, r7
   2c278:	f018 fdff 	bl	44e7a <atomic_set_bit_to>
	return 0;
   2c27c:	f04f 0b00 	mov.w	fp, #0
   2c280:	e707      	b.n	2c092 <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   2c282:	b115      	cbz	r5, 2c28a <bt_le_adv_start_legacy+0x22e>
		bt_conn_unref(conn);
   2c284:	4628      	mov	r0, r5
   2c286:	f018 ff84 	bl	45192 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   2c28a:	f1b9 0f00 	cmp.w	r9, #0
   2c28e:	d1ce      	bne.n	2c22e <bt_le_adv_start_legacy+0x1d2>
   2c290:	e7c8      	b.n	2c224 <bt_le_adv_start_legacy+0x1c8>
		return -EAGAIN;
   2c292:	f06f 0b0a 	mvn.w	fp, #10
   2c296:	e6fc      	b.n	2c092 <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   2c298:	f06f 0b77 	mvn.w	fp, #119	; 0x77
   2c29c:	e6f9      	b.n	2c092 <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   2c29e:	f06f 0b68 	mvn.w	fp, #104	; 0x68
   2c2a2:	e6f6      	b.n	2c092 <bt_le_adv_start_legacy+0x36>
   2c2a4:	4683      	mov	fp, r0
   2c2a6:	e6f4      	b.n	2c092 <bt_le_adv_start_legacy+0x36>
   2c2a8:	200000cc 	.word	0x200000cc
   2c2ac:	20000000 	.word	0x20000000
   2c2b0:	0004a7b7 	.word	0x0004a7b7

0002c2b4 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   2c2b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2c2b6:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   2c2b8:	9a06      	ldr	r2, [sp, #24]
{
   2c2ba:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   2c2bc:	e9cd 3200 	strd	r3, r2, [sp]
   2c2c0:	462b      	mov	r3, r5
   2c2c2:	460a      	mov	r2, r1
   2c2c4:	4601      	mov	r1, r0
   2c2c6:	4811      	ldr	r0, [pc, #68]	; (2c30c <bt_le_adv_start+0x58>)
   2c2c8:	f7ff fec8 	bl	2c05c <bt_le_adv_start_legacy>
   2c2cc:	4621      	mov	r1, r4
   2c2ce:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   2c2d0:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   2c2d2:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   2c2d6:	429d      	cmp	r5, r3
   2c2d8:	d102      	bne.n	2c2e0 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   2c2da:	4630      	mov	r0, r6
   2c2dc:	b002      	add	sp, #8
   2c2de:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   2c2e0:	880a      	ldrh	r2, [r1, #0]
   2c2e2:	4282      	cmp	r2, r0
   2c2e4:	d104      	bne.n	2c2f0 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   2c2e6:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   2c2e8:	b112      	cbz	r2, 2c2f0 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   2c2ea:	7812      	ldrb	r2, [r2, #0]
   2c2ec:	07d2      	lsls	r2, r2, #31
   2c2ee:	d402      	bmi.n	2c2f6 <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   2c2f0:	3301      	adds	r3, #1
   2c2f2:	3108      	adds	r1, #8
   2c2f4:	e7ef      	b.n	2c2d6 <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   2c2f6:	4906      	ldr	r1, [pc, #24]	; (2c310 <bt_le_adv_start+0x5c>)
   2c2f8:	4806      	ldr	r0, [pc, #24]	; (2c314 <bt_le_adv_start+0x60>)
   2c2fa:	f01b ffcc 	bl	48296 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   2c2fe:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2c302:	2300      	movs	r3, #0
   2c304:	4803      	ldr	r0, [pc, #12]	; (2c314 <bt_le_adv_start+0x60>)
   2c306:	f014 fe69 	bl	40fdc <k_work_reschedule>
   2c30a:	e7e6      	b.n	2c2da <bt_le_adv_start+0x26>
   2c30c:	20000018 	.word	0x20000018
   2c310:	0004500b 	.word	0x0004500b
   2c314:	20000030 	.word	0x20000030

0002c318 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   2c318:	b510      	push	{r4, lr}
	if (!adv) {
		BT_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   2c31a:	481a      	ldr	r0, [pc, #104]	; (2c384 <bt_le_adv_stop+0x6c>)
   2c31c:	f018 fe72 	bl	45004 <bt_le_lim_adv_cancel_timeout>
   2c320:	4819      	ldr	r0, [pc, #100]	; (2c388 <bt_le_adv_stop+0x70>)
   2c322:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   2c326:	f018 fd3a 	bl	44d9e <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2c32a:	4817      	ldr	r0, [pc, #92]	; (2c388 <bt_le_adv_stop+0x70>)
   2c32c:	f018 fd31 	bl	44d92 <atomic_get>
   2c330:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2c332:	065a      	lsls	r2, r3, #25
   2c334:	f3c0 1080 	ubfx	r0, r0, #6, #1
   2c338:	d523      	bpl.n	2c382 <bt_le_adv_stop+0x6a>
   2c33a:	4813      	ldr	r0, [pc, #76]	; (2c388 <bt_le_adv_stop+0x70>)
   2c33c:	f018 fd29 	bl	44d92 <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2c340:	0583      	lsls	r3, r0, #22
   2c342:	d514      	bpl.n	2c36e <bt_le_adv_stop+0x56>
	return memcmp(a, b, sizeof(*a));
   2c344:	4911      	ldr	r1, [pc, #68]	; (2c38c <bt_le_adv_stop+0x74>)
   2c346:	4812      	ldr	r0, [pc, #72]	; (2c390 <bt_le_adv_stop+0x78>)
   2c348:	2207      	movs	r2, #7
   2c34a:	f017 ffd5 	bl	442f8 <memcmp>
   2c34e:	4b11      	ldr	r3, [pc, #68]	; (2c394 <bt_le_adv_stop+0x7c>)
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   2c350:	b998      	cbnz	r0, 2c37a <bt_le_adv_stop+0x62>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   2c352:	4911      	ldr	r1, [pc, #68]	; (2c398 <bt_le_adv_stop+0x80>)
   2c354:	2204      	movs	r2, #4
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   2c356:	7e18      	ldrb	r0, [r3, #24]
   2c358:	f000 fd1e 	bl	2cd98 <bt_conn_lookup_state_le>
   2c35c:	4604      	mov	r4, r0
	if (conn) {
   2c35e:	b130      	cbz	r0, 2c36e <bt_le_adv_stop+0x56>
		conn->err = status;
   2c360:	2100      	movs	r1, #0
   2c362:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2c364:	f000 fb14 	bl	2c990 <bt_conn_set_state>
		bt_conn_unref(conn);
   2c368:	4620      	mov	r0, r4
   2c36a:	f018 ff12 	bl	45192 <bt_conn_unref>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   2c36e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   2c372:	4804      	ldr	r0, [pc, #16]	; (2c384 <bt_le_adv_stop+0x6c>)
   2c374:	2100      	movs	r1, #0
   2c376:	f018 be1e 	b.w	44fb6 <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   2c37a:	2205      	movs	r2, #5
   2c37c:	f103 0121 	add.w	r1, r3, #33	; 0x21
   2c380:	e7e9      	b.n	2c356 <bt_le_adv_stop+0x3e>
}
   2c382:	bd10      	pop	{r4, pc}
   2c384:	20000018 	.word	0x20000018
   2c388:	20000028 	.word	0x20000028
   2c38c:	0004a7b7 	.word	0x0004a7b7
   2c390:	20000021 	.word	0x20000021
   2c394:	20000000 	.word	0x20000000
   2c398:	0004a7b0 	.word	0x0004a7b0

0002c39c <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   2c39c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2c39e:	4c20      	ldr	r4, [pc, #128]	; (2c420 <bt_le_adv_resume+0x84>)
   2c3a0:	4620      	mov	r0, r4
   2c3a2:	f018 fcf6 	bl	44d92 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   2c3a6:	0480      	lsls	r0, r0, #18
   2c3a8:	d538      	bpl.n	2c41c <bt_le_adv_resume+0x80>
   2c3aa:	4620      	mov	r0, r4
   2c3ac:	f018 fcf1 	bl	44d92 <atomic_get>
   2c3b0:	0641      	lsls	r1, r0, #25
   2c3b2:	d433      	bmi.n	2c41c <bt_le_adv_resume+0x80>
   2c3b4:	4620      	mov	r0, r4
   2c3b6:	f018 fcec 	bl	44d92 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   2c3ba:	0582      	lsls	r2, r0, #22
   2c3bc:	d52e      	bpl.n	2c41c <bt_le_adv_resume+0x80>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   2c3be:	a901      	add	r1, sp, #4
   2c3c0:	f1a4 0010 	sub.w	r0, r4, #16
   2c3c4:	f7ff fdc8 	bl	2bf58 <le_adv_start_add_conn>
	if (err) {
   2c3c8:	4605      	mov	r5, r0
   2c3ca:	bb38      	cbnz	r0, 2c41c <bt_le_adv_resume+0x80>
	return bt_le_adv_set_enable_legacy(adv, enable);
   2c3cc:	2101      	movs	r1, #1
   2c3ce:	f1a4 0010 	sub.w	r0, r4, #16
   2c3d2:	f018 fdf0 	bl	44fb6 <bt_le_adv_set_enable_legacy>
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   2c3d6:	9e01      	ldr	r6, [sp, #4]
	if (err) {
   2c3d8:	b928      	cbnz	r0, 2c3e6 <bt_le_adv_resume+0x4a>
	bt_conn_unref(conn);
   2c3da:	4630      	mov	r0, r6
	if (persist_paused) {
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   2c3dc:	b002      	add	sp, #8
   2c3de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   2c3e2:	f018 bed6 	b.w	45192 <bt_conn_unref>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2c3e6:	4629      	mov	r1, r5
   2c3e8:	4630      	mov	r0, r6
   2c3ea:	f000 fad1 	bl	2c990 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c3ee:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   2c3f2:	4620      	mov	r0, r4
   2c3f4:	f018 fcd3 	bl	44d9e <atomic_and>
   2c3f8:	4605      	mov	r5, r0
	bt_conn_unref(conn);
   2c3fa:	4630      	mov	r0, r6
   2c3fc:	f018 fec9 	bl	45192 <bt_conn_unref>
	if (persist_paused) {
   2c400:	04ab      	lsls	r3, r5, #18
   2c402:	d50b      	bpl.n	2c41c <bt_le_adv_resume+0x80>
   2c404:	f3bf 8f5b 	dmb	ish
   2c408:	e854 3f00 	ldrex	r3, [r4]
   2c40c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   2c410:	e844 3200 	strex	r2, r3, [r4]
   2c414:	2a00      	cmp	r2, #0
   2c416:	d1f7      	bne.n	2c408 <bt_le_adv_resume+0x6c>
   2c418:	f3bf 8f5b 	dmb	ish
}
   2c41c:	b002      	add	sp, #8
   2c41e:	bd70      	pop	{r4, r5, r6, pc}
   2c420:	20000028 	.word	0x20000028

0002c424 <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   2c424:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   2c426:	4904      	ldr	r1, [pc, #16]	; (2c438 <bt_pub_key_is_debug+0x14>)
   2c428:	2240      	movs	r2, #64	; 0x40
   2c42a:	f017 ff65 	bl	442f8 <memcmp>
}
   2c42e:	fab0 f080 	clz	r0, r0
   2c432:	0940      	lsrs	r0, r0, #5
   2c434:	bd08      	pop	{r3, pc}
   2c436:	bf00      	nop
   2c438:	0004a983 	.word	0x0004a983

0002c43c <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   2c43c:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   2c43e:	4b31      	ldr	r3, [pc, #196]	; (2c504 <bt_pub_key_gen+0xc8>)
   2c440:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   2c444:	f003 0306 	and.w	r3, r3, #6
   2c448:	2b06      	cmp	r3, #6
   2c44a:	d152      	bne.n	2c4f2 <bt_pub_key_gen+0xb6>
			new_cb->func(debug_public_key);
			return 0;
		}
	}

	if (!new_cb) {
   2c44c:	2800      	cmp	r0, #0
   2c44e:	d053      	beq.n	2c4f8 <bt_pub_key_gen+0xbc>
	return list->head;
   2c450:	4e2d      	ldr	r6, [pc, #180]	; (2c508 <bt_pub_key_gen+0xcc>)
   2c452:	6832      	ldr	r2, [r6, #0]
		return -EINVAL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2c454:	b132      	cbz	r2, 2c464 <bt_pub_key_gen+0x28>
   2c456:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   2c458:	4283      	cmp	r3, r0
   2c45a:	d050      	beq.n	2c4fe <bt_pub_key_gen+0xc2>
	return node->next;
   2c45c:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2c45e:	b10b      	cbz	r3, 2c464 <bt_pub_key_gen+0x28>
   2c460:	3b04      	subs	r3, #4
   2c462:	e7f9      	b.n	2c458 <bt_pub_key_gen+0x1c>
	parent->next = child;
   2c464:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   2c466:	6872      	ldr	r2, [r6, #4]
			BT_WARN("Callback already registered");
			return -EALREADY;
		}
	}

	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   2c468:	1d03      	adds	r3, r0, #4
	list->head = node;
   2c46a:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2c46c:	b902      	cbnz	r2, 2c470 <bt_pub_key_gen+0x34>
	list->tail = node;
   2c46e:	6073      	str	r3, [r6, #4]
   2c470:	4c26      	ldr	r4, [pc, #152]	; (2c50c <bt_pub_key_gen+0xd0>)
   2c472:	f3bf 8f5b 	dmb	ish
   2c476:	e854 2f00 	ldrex	r2, [r4]
   2c47a:	f042 0320 	orr.w	r3, r2, #32
   2c47e:	e844 3100 	strex	r1, r3, [r4]
   2c482:	2900      	cmp	r1, #0
   2c484:	d1f7      	bne.n	2c476 <bt_pub_key_gen+0x3a>
   2c486:	f3bf 8f5b 	dmb	ish

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   2c48a:	f012 0220 	ands.w	r2, r2, #32
   2c48e:	d002      	beq.n	2c496 <bt_pub_key_gen+0x5a>

		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
   2c490:	2500      	movs	r5, #0
}
   2c492:	4628      	mov	r0, r5
   2c494:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2c496:	f3bf 8f5b 	dmb	ish
   2c49a:	e854 3f00 	ldrex	r3, [r4]
   2c49e:	f023 0310 	bic.w	r3, r3, #16
   2c4a2:	e844 3100 	strex	r1, r3, [r4]
   2c4a6:	2900      	cmp	r1, #0
   2c4a8:	d1f7      	bne.n	2c49a <bt_pub_key_gen+0x5e>
   2c4aa:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   2c4ae:	4611      	mov	r1, r2
   2c4b0:	f242 0025 	movw	r0, #8229	; 0x2025
   2c4b4:	f7fe ff14 	bl	2b2e0 <bt_hci_cmd_send_sync>
	if (err) {
   2c4b8:	4605      	mov	r5, r0
   2c4ba:	2800      	cmp	r0, #0
   2c4bc:	d0e8      	beq.n	2c490 <bt_pub_key_gen+0x54>
   2c4be:	f3bf 8f5b 	dmb	ish
   2c4c2:	e854 3f00 	ldrex	r3, [r4]
   2c4c6:	f023 0320 	bic.w	r3, r3, #32
   2c4ca:	e844 3200 	strex	r2, r3, [r4]
   2c4ce:	2a00      	cmp	r2, #0
   2c4d0:	d1f7      	bne.n	2c4c2 <bt_pub_key_gen+0x86>
   2c4d2:	f3bf 8f5b 	dmb	ish
	return list->head;
   2c4d6:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2c4d8:	b13c      	cbz	r4, 2c4ea <bt_pub_key_gen+0xae>
			if (cb->func) {
   2c4da:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2c4de:	3c04      	subs	r4, #4
			if (cb->func) {
   2c4e0:	b10b      	cbz	r3, 2c4e6 <bt_pub_key_gen+0xaa>
				cb->func(NULL);
   2c4e2:	2000      	movs	r0, #0
   2c4e4:	4798      	blx	r3
	return node->next;
   2c4e6:	6864      	ldr	r4, [r4, #4]
   2c4e8:	e7f6      	b.n	2c4d8 <bt_pub_key_gen+0x9c>
	list->head = NULL;
   2c4ea:	2300      	movs	r3, #0
	list->tail = NULL;
   2c4ec:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   2c4f0:	e7cf      	b.n	2c492 <bt_pub_key_gen+0x56>
		return -ENOTSUP;
   2c4f2:	f06f 0585 	mvn.w	r5, #133	; 0x85
   2c4f6:	e7cc      	b.n	2c492 <bt_pub_key_gen+0x56>
		return -EINVAL;
   2c4f8:	f06f 0515 	mvn.w	r5, #21
   2c4fc:	e7c9      	b.n	2c492 <bt_pub_key_gen+0x56>
			return -EALREADY;
   2c4fe:	f06f 0577 	mvn.w	r5, #119	; 0x77
   2c502:	e7c6      	b.n	2c492 <bt_pub_key_gen+0x56>
   2c504:	20000000 	.word	0x20000000
   2c508:	20001cfc 	.word	0x20001cfc
   2c50c:	200000cc 	.word	0x200000cc

0002c510 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c510:	4b05      	ldr	r3, [pc, #20]	; (2c528 <bt_pub_key_get+0x18>)
   2c512:	f3bf 8f5b 	dmb	ish
   2c516:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
   2c518:	4804      	ldr	r0, [pc, #16]	; (2c52c <bt_pub_key_get+0x1c>)
   2c51a:	f3bf 8f5b 	dmb	ish
	return NULL;
   2c51e:	f013 0f10 	tst.w	r3, #16
}
   2c522:	bf08      	it	eq
   2c524:	2000      	moveq	r0, #0
   2c526:	4770      	bx	lr
   2c528:	200000cc 	.word	0x200000cc
   2c52c:	20003acb 	.word	0x20003acb

0002c530 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   2c530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
   2c532:	4d1f      	ldr	r5, [pc, #124]	; (2c5b0 <bt_dh_key_gen+0x80>)
   2c534:	682b      	ldr	r3, [r5, #0]
   2c536:	428b      	cmp	r3, r1
{
   2c538:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
   2c53a:	d032      	beq.n	2c5a2 <bt_dh_key_gen+0x72>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   2c53c:	b113      	cbz	r3, 2c544 <bt_dh_key_gen+0x14>
		return -EBUSY;
   2c53e:	f06f 000f 	mvn.w	r0, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   2c542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c544:	4b1b      	ldr	r3, [pc, #108]	; (2c5b4 <bt_dh_key_gen+0x84>)
   2c546:	f3bf 8f5b 	dmb	ish
   2c54a:	681a      	ldr	r2, [r3, #0]
   2c54c:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   2c550:	f3c2 1740 	ubfx	r7, r2, #5, #1
   2c554:	0692      	lsls	r2, r2, #26
   2c556:	d4f2      	bmi.n	2c53e <bt_dh_key_gen+0xe>
   2c558:	f3bf 8f5b 	dmb	ish
   2c55c:	681b      	ldr	r3, [r3, #0]
   2c55e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   2c562:	06db      	lsls	r3, r3, #27
   2c564:	d520      	bpl.n	2c5a8 <bt_dh_key_gen+0x78>
	dh_key_cb = cb;
   2c566:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   2c568:	f242 0026 	movw	r0, #8230	; 0x2026
   2c56c:	2140      	movs	r1, #64	; 0x40
   2c56e:	f7fe fe5b 	bl	2b228 <bt_hci_cmd_create>
	if (!buf) {
   2c572:	4604      	mov	r4, r0
   2c574:	b190      	cbz	r0, 2c59c <bt_dh_key_gen+0x6c>
	return net_buf_simple_add(&buf->b, len);
   2c576:	2140      	movs	r1, #64	; 0x40
   2c578:	3008      	adds	r0, #8
   2c57a:	f01a fe28 	bl	471ce <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   2c57e:	2240      	movs	r2, #64	; 0x40
   2c580:	4631      	mov	r1, r6
   2c582:	f017 fec9 	bl	44318 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   2c586:	463a      	mov	r2, r7
   2c588:	4621      	mov	r1, r4
   2c58a:	f242 0026 	movw	r0, #8230	; 0x2026
   2c58e:	f7fe fea7 	bl	2b2e0 <bt_hci_cmd_send_sync>
	if (err) {
   2c592:	2800      	cmp	r0, #0
   2c594:	d0d5      	beq.n	2c542 <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
   2c596:	2300      	movs	r3, #0
   2c598:	602b      	str	r3, [r5, #0]
		return err;
   2c59a:	e7d2      	b.n	2c542 <bt_dh_key_gen+0x12>
		return -ENOBUFS;
   2c59c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c5a0:	e7f9      	b.n	2c596 <bt_dh_key_gen+0x66>
		return -EALREADY;
   2c5a2:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2c5a6:	e7cc      	b.n	2c542 <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
   2c5a8:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   2c5ac:	e7c9      	b.n	2c542 <bt_dh_key_gen+0x12>
   2c5ae:	bf00      	nop
   2c5b0:	20001cf8 	.word	0x20001cf8
   2c5b4:	200000cc 	.word	0x200000cc

0002c5b8 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   2c5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2c5ba:	4c1b      	ldr	r4, [pc, #108]	; (2c628 <bt_hci_evt_le_pkey_complete+0x70>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   2c5bc:	6886      	ldr	r6, [r0, #8]
   2c5be:	f3bf 8f5b 	dmb	ish
   2c5c2:	e854 3f00 	ldrex	r3, [r4]
   2c5c6:	f023 0320 	bic.w	r3, r3, #32
   2c5ca:	e844 3200 	strex	r2, r3, [r4]
   2c5ce:	2a00      	cmp	r2, #0
   2c5d0:	d1f7      	bne.n	2c5c2 <bt_hci_evt_le_pkey_complete+0xa>
   2c5d2:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   2c5d6:	7833      	ldrb	r3, [r6, #0]
   2c5d8:	b983      	cbnz	r3, 2c5fc <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   2c5da:	4814      	ldr	r0, [pc, #80]	; (2c62c <bt_hci_evt_le_pkey_complete+0x74>)
   2c5dc:	2240      	movs	r2, #64	; 0x40
   2c5de:	1c71      	adds	r1, r6, #1
   2c5e0:	f017 fe9a 	bl	44318 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c5e4:	f3bf 8f5b 	dmb	ish
   2c5e8:	e854 3f00 	ldrex	r3, [r4]
   2c5ec:	f043 0310 	orr.w	r3, r3, #16
   2c5f0:	e844 3200 	strex	r2, r3, [r4]
   2c5f4:	2a00      	cmp	r2, #0
   2c5f6:	d1f7      	bne.n	2c5e8 <bt_hci_evt_le_pkey_complete+0x30>
   2c5f8:	f3bf 8f5b 	dmb	ish
	return list->head;
   2c5fc:	4d0c      	ldr	r5, [pc, #48]	; (2c630 <bt_hci_evt_le_pkey_complete+0x78>)
   2c5fe:	682c      	ldr	r4, [r5, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2c600:	b16c      	cbz	r4, 2c61e <bt_hci_evt_le_pkey_complete+0x66>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   2c602:	4f0a      	ldr	r7, [pc, #40]	; (2c62c <bt_hci_evt_le_pkey_complete+0x74>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2c604:	3c04      	subs	r4, #4
		if (cb->func) {
   2c606:	6823      	ldr	r3, [r4, #0]
   2c608:	b12b      	cbz	r3, 2c616 <bt_hci_evt_le_pkey_complete+0x5e>
			cb->func(evt->status ? NULL : pub_key);
   2c60a:	7832      	ldrb	r2, [r6, #0]
   2c60c:	2a00      	cmp	r2, #0
   2c60e:	bf0c      	ite	eq
   2c610:	4638      	moveq	r0, r7
   2c612:	2000      	movne	r0, #0
   2c614:	4798      	blx	r3
	return node->next;
   2c616:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2c618:	b10c      	cbz	r4, 2c61e <bt_hci_evt_le_pkey_complete+0x66>
   2c61a:	3c04      	subs	r4, #4
   2c61c:	e7f3      	b.n	2c606 <bt_hci_evt_le_pkey_complete+0x4e>
	list->head = NULL;
   2c61e:	2300      	movs	r3, #0
	list->tail = NULL;
   2c620:	e9c5 3300 	strd	r3, r3, [r5]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   2c624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c626:	bf00      	nop
   2c628:	200000cc 	.word	0x200000cc
   2c62c:	20003acb 	.word	0x20003acb
   2c630:	20001cfc 	.word	0x20001cfc

0002c634 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   2c634:	4905      	ldr	r1, [pc, #20]	; (2c64c <bt_hci_evt_le_dhkey_complete+0x18>)
   2c636:	680b      	ldr	r3, [r1, #0]
   2c638:	b133      	cbz	r3, 2c648 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   2c63a:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   2c63c:	2000      	movs	r0, #0
   2c63e:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   2c640:	7811      	ldrb	r1, [r2, #0]
   2c642:	b901      	cbnz	r1, 2c646 <bt_hci_evt_le_dhkey_complete+0x12>
   2c644:	1c50      	adds	r0, r2, #1
   2c646:	4718      	bx	r3
	}
}
   2c648:	4770      	bx	lr
   2c64a:	bf00      	nop
   2c64c:	20001cf8 	.word	0x20001cf8

0002c650 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   2c650:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   2c652:	4b0b      	ldr	r3, [pc, #44]	; (2c680 <notify_connected+0x30>)
   2c654:	681d      	ldr	r5, [r3, #0]
{
   2c656:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   2c658:	b925      	cbnz	r5, 2c664 <notify_connected+0x14>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2c65a:	4d0a      	ldr	r5, [pc, #40]	; (2c684 <notify_connected+0x34>)
   2c65c:	4e0a      	ldr	r6, [pc, #40]	; (2c688 <notify_connected+0x38>)
   2c65e:	42b5      	cmp	r5, r6
   2c660:	d307      	bcc.n	2c672 <notify_connected+0x22>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
   2c662:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->connected) {
   2c664:	682b      	ldr	r3, [r5, #0]
   2c666:	b113      	cbz	r3, 2c66e <notify_connected+0x1e>
			cb->connected(conn, conn->err);
   2c668:	7b21      	ldrb	r1, [r4, #12]
   2c66a:	4620      	mov	r0, r4
   2c66c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   2c66e:	69ed      	ldr	r5, [r5, #28]
   2c670:	e7f2      	b.n	2c658 <notify_connected+0x8>
		if (cb->connected) {
   2c672:	682b      	ldr	r3, [r5, #0]
   2c674:	b113      	cbz	r3, 2c67c <notify_connected+0x2c>
			cb->connected(conn, conn->err);
   2c676:	7b21      	ldrb	r1, [r4, #12]
   2c678:	4620      	mov	r0, r4
   2c67a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2c67c:	3520      	adds	r5, #32
   2c67e:	e7ee      	b.n	2c65e <notify_connected+0xe>
   2c680:	20001d34 	.word	0x20001d34
   2c684:	00048db8 	.word	0x00048db8
   2c688:	00048db8 	.word	0x00048db8

0002c68c <tx_notify>:
{
   2c68c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_fifo_put(&free_tx, tx);
   2c690:	4f15      	ldr	r7, [pc, #84]	; (2c6e8 <tx_notify+0x5c>)
{
   2c692:	4604      	mov	r4, r0
	tx->cb = NULL;
   2c694:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
   2c698:	f04f 0220 	mov.w	r2, #32
   2c69c:	f3ef 8311 	mrs	r3, BASEPRI
   2c6a0:	f382 8812 	msr	BASEPRI_MAX, r2
   2c6a4:	f3bf 8f6f 	isb	sy
	return list->head;
   2c6a8:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   2c6aa:	b929      	cbnz	r1, 2c6b8 <tx_notify+0x2c>
	__asm__ volatile(
   2c6ac:	f383 8811 	msr	BASEPRI, r3
   2c6b0:	f3bf 8f6f 	isb	sy
}
   2c6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2c6b8:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   2c6ba:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   2c6bc:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2c6be:	4281      	cmp	r1, r0
	list->tail = node;
   2c6c0:	bf08      	it	eq
   2c6c2:	6262      	streq	r2, [r4, #36]	; 0x24
   2c6c4:	f383 8811 	msr	BASEPRI, r3
   2c6c8:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   2c6cc:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   2c6d0:	f8c1 800c 	str.w	r8, [r1, #12]
	tx->user_data = NULL;
   2c6d4:	e9c1 8801 	strd	r8, r8, [r1, #4]
	k_fifo_put(&free_tx, tx);
   2c6d8:	4638      	mov	r0, r7
   2c6da:	f01b fcc2 	bl	48062 <k_queue_append>
		cb(conn, user_data, 0);
   2c6de:	2200      	movs	r2, #0
   2c6e0:	4631      	mov	r1, r6
   2c6e2:	4620      	mov	r0, r4
   2c6e4:	47a8      	blx	r5
	while (1) {
   2c6e6:	e7d7      	b.n	2c698 <tx_notify+0xc>
   2c6e8:	20000d6c 	.word	0x20000d6c

0002c6ec <conn_tx_destroy>:
{
   2c6ec:	b570      	push	{r4, r5, r6, lr}
	void *user_data = tx->user_data;
   2c6ee:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->cb = NULL;
   2c6f2:	2200      	movs	r2, #0
	tx->user_data = NULL;
   2c6f4:	e9c1 2201 	strd	r2, r2, [r1, #4]
{
   2c6f8:	4604      	mov	r4, r0
	tx->pending_no_cb = 0U;
   2c6fa:	60ca      	str	r2, [r1, #12]
	k_fifo_put(&free_tx, tx);
   2c6fc:	4805      	ldr	r0, [pc, #20]	; (2c714 <conn_tx_destroy+0x28>)
   2c6fe:	f01b fcb0 	bl	48062 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   2c702:	4631      	mov	r1, r6
   2c704:	4620      	mov	r0, r4
   2c706:	462b      	mov	r3, r5
   2c708:	f06f 026d 	mvn.w	r2, #109	; 0x6d
}
   2c70c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   2c710:	4718      	bx	r3
   2c712:	bf00      	nop
   2c714:	20000d6c 	.word	0x20000d6c

0002c718 <send_frag>:
{
   2c718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2c71c:	4604      	mov	r4, r0
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   2c71e:	694d      	ldr	r5, [r1, #20]
{
   2c720:	460e      	mov	r6, r1
   2c722:	4617      	mov	r7, r2
   2c724:	4699      	mov	r9, r3
	return z_impl_k_sem_take(sem, timeout);
   2c726:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c72a:	483e      	ldr	r0, [pc, #248]	; (2c824 <send_frag+0x10c>)
   2c72c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2c730:	f014 fa40 	bl	40bb4 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   2c734:	7b63      	ldrb	r3, [r4, #13]
   2c736:	2b07      	cmp	r3, #7
   2c738:	d167      	bne.n	2c80a <send_frag+0xf2>
	__asm__ volatile(
   2c73a:	f04f 0320 	mov.w	r3, #32
   2c73e:	f3ef 8211 	mrs	r2, BASEPRI
   2c742:	f383 8812 	msr	BASEPRI_MAX, r3
   2c746:	f3bf 8f6f 	isb	sy
	if (tx) {
   2c74a:	2d00      	cmp	r5, #0
   2c74c:	d03e      	beq.n	2c7cc <send_frag+0xb4>
	parent->next = child;
   2c74e:	2300      	movs	r3, #0
   2c750:	602b      	str	r3, [r5, #0]
	return list->tail;
   2c752:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   2c754:	2b00      	cmp	r3, #0
   2c756:	d136      	bne.n	2c7c6 <send_frag+0xae>
	list->head = node;
   2c758:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   2c75c:	f382 8811 	msr	BASEPRI, r2
   2c760:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   2c764:	2104      	movs	r1, #4
   2c766:	f106 0008 	add.w	r0, r6, #8
   2c76a:	f01a fd47 	bl	471fc <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   2c76e:	8823      	ldrh	r3, [r4, #0]
   2c770:	f007 07fd 	and.w	r7, r7, #253	; 0xfd
   2c774:	ea43 3707 	orr.w	r7, r3, r7, lsl #12
   2c778:	8007      	strh	r7, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2c77a:	89b3      	ldrh	r3, [r6, #12]
   2c77c:	3b04      	subs	r3, #4
   2c77e:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   2c780:	2302      	movs	r3, #2
   2c782:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   2c784:	4630      	mov	r0, r6
   2c786:	f018 f9f4 	bl	44b72 <bt_send>
	if (err) {
   2c78a:	2800      	cmp	r0, #0
   2c78c:	d047      	beq.n	2c81e <send_frag+0x106>
	__asm__ volatile(
   2c78e:	f04f 0320 	mov.w	r3, #32
   2c792:	f3ef 8711 	mrs	r7, BASEPRI
   2c796:	f383 8812 	msr	BASEPRI_MAX, r3
   2c79a:	f3bf 8f6f 	isb	sy
		if (tx) {
   2c79e:	b315      	cbz	r5, 2c7e6 <send_frag+0xce>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   2c7a0:	4629      	mov	r1, r5
   2c7a2:	f104 0014 	add.w	r0, r4, #20
   2c7a6:	f018 fc32 	bl	4500e <sys_slist_find_and_remove>
	__asm__ volatile(
   2c7aa:	f387 8811 	msr	BASEPRI, r7
   2c7ae:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   2c7b2:	481c      	ldr	r0, [pc, #112]	; (2c824 <send_frag+0x10c>)
   2c7b4:	f014 f9d8 	bl	40b68 <z_impl_k_sem_give>
		tx_data(buf)->tx = NULL;
   2c7b8:	2300      	movs	r3, #0
   2c7ba:	6173      	str	r3, [r6, #20]
		conn_tx_destroy(conn, tx);
   2c7bc:	4629      	mov	r1, r5
   2c7be:	4620      	mov	r0, r4
   2c7c0:	f7ff ff94 	bl	2c6ec <conn_tx_destroy>
   2c7c4:	e01b      	b.n	2c7fe <send_frag+0xe6>
	parent->next = child;
   2c7c6:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2c7c8:	61a5      	str	r5, [r4, #24]
}
   2c7ca:	e7c7      	b.n	2c75c <send_frag+0x44>
	return list->tail;
   2c7cc:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   2c7ce:	b133      	cbz	r3, 2c7de <send_frag+0xc6>
			pending_no_cb = &tail_tx->pending_no_cb;
   2c7d0:	f103 080c 	add.w	r8, r3, #12
   2c7d4:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   2c7d6:	3301      	adds	r3, #1
   2c7d8:	f8c8 3000 	str.w	r3, [r8]
   2c7dc:	e7be      	b.n	2c75c <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   2c7de:	69e3      	ldr	r3, [r4, #28]
   2c7e0:	f104 081c 	add.w	r8, r4, #28
   2c7e4:	e7f7      	b.n	2c7d6 <send_frag+0xbe>
			(*pending_no_cb)--;
   2c7e6:	f8d8 3000 	ldr.w	r3, [r8]
   2c7ea:	3b01      	subs	r3, #1
   2c7ec:	f8c8 3000 	str.w	r3, [r8]
   2c7f0:	f387 8811 	msr	BASEPRI, r7
   2c7f4:	f3bf 8f6f 	isb	sy
   2c7f8:	480a      	ldr	r0, [pc, #40]	; (2c824 <send_frag+0x10c>)
   2c7fa:	f014 f9b5 	bl	40b68 <z_impl_k_sem_give>
	if (always_consume) {
   2c7fe:	f1b9 0f00 	cmp.w	r9, #0
   2c802:	d108      	bne.n	2c816 <send_frag+0xfe>
	return false;
   2c804:	2000      	movs	r0, #0
}
   2c806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2c80a:	4806      	ldr	r0, [pc, #24]	; (2c824 <send_frag+0x10c>)
   2c80c:	f014 f9ac 	bl	40b68 <z_impl_k_sem_give>
	if (tx) {
   2c810:	2d00      	cmp	r5, #0
   2c812:	d1d1      	bne.n	2c7b8 <send_frag+0xa0>
   2c814:	e7f3      	b.n	2c7fe <send_frag+0xe6>
		net_buf_unref(buf);
   2c816:	4630      	mov	r0, r6
   2c818:	f00f fd7a 	bl	3c310 <net_buf_unref>
   2c81c:	e7f2      	b.n	2c804 <send_frag+0xec>
	return true;
   2c81e:	2001      	movs	r0, #1
   2c820:	e7f1      	b.n	2c806 <send_frag+0xee>
   2c822:	bf00      	nop
   2c824:	20000100 	.word	0x20000100

0002c828 <bt_conn_get_pkts>:
}
   2c828:	4800      	ldr	r0, [pc, #0]	; (2c82c <bt_conn_get_pkts+0x4>)
   2c82a:	4770      	bx	lr
   2c82c:	20000100 	.word	0x20000100

0002c830 <bt_conn_new>:
{
   2c830:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   2c832:	2200      	movs	r2, #0
   2c834:	4604      	mov	r4, r0
   2c836:	428a      	cmp	r2, r1
   2c838:	d102      	bne.n	2c840 <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   2c83a:	2400      	movs	r4, #0
}
   2c83c:	4620      	mov	r0, r4
   2c83e:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2c840:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
   2c844:	2001      	movs	r0, #1
   2c846:	f3bf 8f5b 	dmb	ish
   2c84a:	e853 5f00 	ldrex	r5, [r3]
   2c84e:	2d00      	cmp	r5, #0
   2c850:	d104      	bne.n	2c85c <bt_conn_new+0x2c>
   2c852:	e843 0c00 	strex	ip, r0, [r3]
   2c856:	f1bc 0f00 	cmp.w	ip, #0
   2c85a:	d1f6      	bne.n	2c84a <bt_conn_new+0x1a>
   2c85c:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   2c860:	d002      	beq.n	2c868 <bt_conn_new+0x38>
   2c862:	34c0      	adds	r4, #192	; 0xc0
	for (i = 0; i < size; i++) {
   2c864:	4402      	add	r2, r0
   2c866:	e7e6      	b.n	2c836 <bt_conn_new+0x6>
	if (!conn) {
   2c868:	2c00      	cmp	r4, #0
   2c86a:	d0e6      	beq.n	2c83a <bt_conn_new+0xa>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   2c86c:	22bc      	movs	r2, #188	; 0xbc
   2c86e:	2100      	movs	r1, #0
   2c870:	4620      	mov	r0, r4
   2c872:	f017 fd5c 	bl	4432e <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   2c876:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2c87a:	4904      	ldr	r1, [pc, #16]	; (2c88c <bt_conn_new+0x5c>)
   2c87c:	f01b fd0b 	bl	48296 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   2c880:	4903      	ldr	r1, [pc, #12]	; (2c890 <bt_conn_new+0x60>)
   2c882:	f104 0028 	add.w	r0, r4, #40	; 0x28
   2c886:	f01b fcc2 	bl	4820e <k_work_init>
	return conn;
   2c88a:	e7d7      	b.n	2c83c <bt_conn_new+0xc>
   2c88c:	0002ce49 	.word	0x0002ce49
   2c890:	00045063 	.word	0x00045063

0002c894 <bt_conn_send_cb>:
{
   2c894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c896:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   2c898:	7b43      	ldrb	r3, [r0, #13]
   2c89a:	2b07      	cmp	r3, #7
{
   2c89c:	4604      	mov	r4, r0
   2c89e:	460e      	mov	r6, r1
   2c8a0:	4615      	mov	r5, r2
	if (conn->state != BT_CONN_CONNECTED) {
   2c8a2:	d11b      	bne.n	2c8dc <bt_conn_send_cb+0x48>
	if (cb) {
   2c8a4:	b342      	cbz	r2, 2c8f8 <bt_conn_send_cb+0x64>
	return z_impl_z_current_get();
   2c8a6:	f014 fe85 	bl	415b4 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   2c8aa:	4b16      	ldr	r3, [pc, #88]	; (2c904 <bt_conn_send_cb+0x70>)
   2c8ac:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   2c8ae:	4816      	ldr	r0, [pc, #88]	; (2c908 <bt_conn_send_cb+0x74>)
   2c8b0:	bf07      	ittee	eq
   2c8b2:	2200      	moveq	r2, #0
   2c8b4:	2300      	moveq	r3, #0
   2c8b6:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   2c8ba:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   2c8be:	f014 f91f 	bl	40b00 <z_impl_k_queue_get>
   2c8c2:	4601      	mov	r1, r0
		if (!tx) {
   2c8c4:	b1d0      	cbz	r0, 2c8fc <bt_conn_send_cb+0x68>
		if (conn->state != BT_CONN_CONNECTED) {
   2c8c6:	7b63      	ldrb	r3, [r4, #13]
   2c8c8:	2b07      	cmp	r3, #7
   2c8ca:	f04f 0200 	mov.w	r2, #0
   2c8ce:	d008      	beq.n	2c8e2 <bt_conn_send_cb+0x4e>
	tx->user_data = NULL;
   2c8d0:	e9c0 2201 	strd	r2, r2, [r0, #4]
	tx->pending_no_cb = 0U;
   2c8d4:	60c2      	str	r2, [r0, #12]
	k_fifo_put(&free_tx, tx);
   2c8d6:	480c      	ldr	r0, [pc, #48]	; (2c908 <bt_conn_send_cb+0x74>)
   2c8d8:	f01b fbc3 	bl	48062 <k_queue_append>
		return -ENOTCONN;
   2c8dc:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   2c8e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx->user_data = user_data;
   2c8e2:	e9c0 5701 	strd	r5, r7, [r0, #4]
		tx->pending_no_cb = 0U;
   2c8e6:	60c2      	str	r2, [r0, #12]
		tx_data(buf)->tx = tx;
   2c8e8:	6171      	str	r1, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
   2c8ea:	f104 0038 	add.w	r0, r4, #56	; 0x38
   2c8ee:	4631      	mov	r1, r6
   2c8f0:	f01a fc2e 	bl	47150 <net_buf_put>
	return 0;
   2c8f4:	2000      	movs	r0, #0
   2c8f6:	e7f3      	b.n	2c8e0 <bt_conn_send_cb+0x4c>
   2c8f8:	4611      	mov	r1, r2
   2c8fa:	e7f5      	b.n	2c8e8 <bt_conn_send_cb+0x54>
			return -ENOBUFS;
   2c8fc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c900:	e7ee      	b.n	2c8e0 <bt_conn_send_cb+0x4c>
   2c902:	bf00      	nop
   2c904:	200019c0 	.word	0x200019c0
   2c908:	20000d6c 	.word	0x20000d6c

0002c90c <bt_conn_prepare_events>:
{
   2c90c:	b570      	push	{r4, r5, r6, lr}
   2c90e:	4604      	mov	r4, r0
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
   2c910:	4818      	ldr	r0, [pc, #96]	; (2c974 <bt_conn_prepare_events+0x68>)
   2c912:	f01c f801 	bl	48918 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   2c916:	4b17      	ldr	r3, [pc, #92]	; (2c974 <bt_conn_prepare_events+0x68>)
   2c918:	2200      	movs	r2, #0
   2c91a:	2101      	movs	r1, #1
   2c91c:	4620      	mov	r0, r4
   2c91e:	f01b ffde 	bl	488de <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c922:	f3bf 8f5b 	dmb	ish
   2c926:	4b14      	ldr	r3, [pc, #80]	; (2c978 <bt_conn_prepare_events+0x6c>)
   2c928:	681a      	ldr	r2, [r3, #0]
   2c92a:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
   2c92e:	f104 0614 	add.w	r6, r4, #20
	if (!atomic_get(&conn->ref)) {
   2c932:	b90a      	cbnz	r2, 2c938 <bt_conn_prepare_events+0x2c>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   2c934:	2001      	movs	r0, #1
}
   2c936:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   2c938:	f1a3 05bc 	sub.w	r5, r3, #188	; 0xbc
   2c93c:	f813 3caf 	ldrb.w	r3, [r3, #-175]
   2c940:	b953      	cbnz	r3, 2c958 <bt_conn_prepare_events+0x4c>
   2c942:	f06f 0140 	mvn.w	r1, #64	; 0x40
   2c946:	1d28      	adds	r0, r5, #4
   2c948:	f018 fb7c 	bl	45044 <atomic_and>
   2c94c:	0643      	lsls	r3, r0, #25
   2c94e:	d503      	bpl.n	2c958 <bt_conn_prepare_events+0x4c>
		conn_cleanup(conn);
   2c950:	4628      	mov	r0, r5
   2c952:	f018 fb92 	bl	4507a <conn_cleanup>
		return -ENOTCONN;
   2c956:	e7ed      	b.n	2c934 <bt_conn_prepare_events+0x28>
	if (conn->state != BT_CONN_CONNECTED) {
   2c958:	7b6b      	ldrb	r3, [r5, #13]
   2c95a:	2b07      	cmp	r3, #7
   2c95c:	d1ea      	bne.n	2c934 <bt_conn_prepare_events+0x28>
	k_poll_event_init(&events[0],
   2c95e:	4b07      	ldr	r3, [pc, #28]	; (2c97c <bt_conn_prepare_events+0x70>)
   2c960:	4630      	mov	r0, r6
   2c962:	2200      	movs	r2, #0
   2c964:	2104      	movs	r1, #4
   2c966:	f01b ffba 	bl	488de <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   2c96a:	2301      	movs	r3, #1
   2c96c:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   2c970:	2002      	movs	r0, #2
	return ev_count;
   2c972:	e7e0      	b.n	2c936 <bt_conn_prepare_events+0x2a>
   2c974:	200003d0 	.word	0x200003d0
   2c978:	20001254 	.word	0x20001254
   2c97c:	200011d0 	.word	0x200011d0

0002c980 <bt_conn_lookup_handle>:
{
   2c980:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   2c982:	2101      	movs	r1, #1
   2c984:	4801      	ldr	r0, [pc, #4]	; (2c98c <bt_conn_lookup_handle+0xc>)
   2c986:	f018 bc1e 	b.w	451c6 <conn_lookup_handle>
   2c98a:	bf00      	nop
   2c98c:	20001198 	.word	0x20001198

0002c990 <bt_conn_set_state>:
{
   2c990:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   2c992:	7b45      	ldrb	r5, [r0, #13]
   2c994:	428d      	cmp	r5, r1
{
   2c996:	4604      	mov	r4, r0
	if (conn->state == state) {
   2c998:	f000 808b 	beq.w	2cab2 <bt_conn_set_state+0x122>
	conn->state = state;
   2c99c:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   2c99e:	b925      	cbnz	r5, 2c9aa <bt_conn_set_state+0x1a>
		if (conn->type != BT_CONN_TYPE_ISO) {
   2c9a0:	7883      	ldrb	r3, [r0, #2]
   2c9a2:	2b08      	cmp	r3, #8
   2c9a4:	d001      	beq.n	2c9aa <bt_conn_set_state+0x1a>
			bt_conn_ref(conn);
   2c9a6:	f018 fbd8 	bl	4515a <bt_conn_ref>
	switch (conn->state) {
   2c9aa:	7b63      	ldrb	r3, [r4, #13]
   2c9ac:	2b01      	cmp	r3, #1
   2c9ae:	d116      	bne.n	2c9de <bt_conn_set_state+0x4e>
	z_impl_k_sem_give(sem);
   2c9b0:	4d4f      	ldr	r5, [pc, #316]	; (2caf0 <bt_conn_set_state+0x160>)
		tx->pending_no_cb = 0U;
   2c9b2:	2600      	movs	r6, #0
	__asm__ volatile(
   2c9b4:	f04f 0220 	mov.w	r2, #32
   2c9b8:	f3ef 8311 	mrs	r3, BASEPRI
   2c9bc:	f382 8812 	msr	BASEPRI_MAX, r2
   2c9c0:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   2c9c4:	69e2      	ldr	r2, [r4, #28]
   2c9c6:	2a00      	cmp	r2, #0
   2c9c8:	d06d      	beq.n	2caa6 <bt_conn_set_state+0x116>
			conn->pending_no_cb--;
   2c9ca:	3a01      	subs	r2, #1
   2c9cc:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   2c9ce:	f383 8811 	msr	BASEPRI, r3
   2c9d2:	f3bf 8f6f 	isb	sy
   2c9d6:	4628      	mov	r0, r5
   2c9d8:	f014 f8c6 	bl	40b68 <z_impl_k_sem_give>
}
   2c9dc:	e7ea      	b.n	2c9b4 <bt_conn_set_state+0x24>
	switch (conn->state) {
   2c9de:	2b07      	cmp	r3, #7
   2c9e0:	d009      	beq.n	2c9f6 <bt_conn_set_state+0x66>
   2c9e2:	2b00      	cmp	r3, #0
   2c9e4:	d165      	bne.n	2cab2 <bt_conn_set_state+0x122>
		if (conn->type == BT_CONN_TYPE_SCO) {
   2c9e6:	78a3      	ldrb	r3, [r4, #2]
   2c9e8:	2b04      	cmp	r3, #4
   2c9ea:	d11e      	bne.n	2ca2a <bt_conn_set_state+0x9a>
			bt_conn_unref(conn);
   2c9ec:	4620      	mov	r0, r4
}
   2c9ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   2c9f2:	f018 bbce 	b.w	45192 <bt_conn_unref>
		if (conn->type == BT_CONN_TYPE_SCO) {
   2c9f6:	78a3      	ldrb	r3, [r4, #2]
   2c9f8:	2b04      	cmp	r3, #4
   2c9fa:	d05a      	beq.n	2cab2 <bt_conn_set_state+0x122>
	z_impl_k_queue_init(queue);
   2c9fc:	f104 0038 	add.w	r0, r4, #56	; 0x38
   2ca00:	f01b fb03 	bl	4800a <z_impl_k_queue_init>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   2ca04:	483b      	ldr	r0, [pc, #236]	; (2caf4 <bt_conn_set_state+0x164>)
   2ca06:	2100      	movs	r1, #0
   2ca08:	f015 f8b8 	bl	41b7c <z_impl_k_poll_signal_raise>
	list->head = NULL;
   2ca0c:	2300      	movs	r3, #0
	list->tail = NULL;
   2ca0e:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2ca12:	78e3      	ldrb	r3, [r4, #3]
   2ca14:	2b01      	cmp	r3, #1
   2ca16:	d14c      	bne.n	2cab2 <bt_conn_set_state+0x122>
			k_work_schedule(&conn->deferred_work,
   2ca18:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2ca1c:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
   2ca20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   2ca24:	2300      	movs	r3, #0
   2ca26:	f014 baa5 	b.w	40f74 <k_work_schedule>
		switch (old_state) {
   2ca2a:	3d01      	subs	r5, #1
   2ca2c:	2d05      	cmp	r5, #5
   2ca2e:	d840      	bhi.n	2cab2 <bt_conn_set_state+0x122>
   2ca30:	a301      	add	r3, pc, #4	; (adr r3, 2ca38 <bt_conn_set_state+0xa8>)
   2ca32:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   2ca36:	bf00      	nop
   2ca38:	0002ca51 	.word	0x0002ca51
   2ca3c:	0002ca99 	.word	0x0002ca99
   2ca40:	0002c9ed 	.word	0x0002c9ed
   2ca44:	0002c9ed 	.word	0x0002c9ed
   2ca48:	0002ca99 	.word	0x0002ca99
   2ca4c:	0002ca99 	.word	0x0002ca99
			tx_notify(conn);
   2ca50:	4620      	mov	r0, r4
   2ca52:	f7ff fe1b 	bl	2c68c <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   2ca56:	78a3      	ldrb	r3, [r4, #2]
   2ca58:	2b01      	cmp	r3, #1
   2ca5a:	d10a      	bne.n	2ca72 <bt_conn_set_state+0xe2>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   2ca5c:	f104 0558 	add.w	r5, r4, #88	; 0x58
   2ca60:	4628      	mov	r0, r5
   2ca62:	f01b fc24 	bl	482ae <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   2ca66:	f010 0f0c 	tst.w	r0, #12
   2ca6a:	d002      	beq.n	2ca72 <bt_conn_set_state+0xe2>
				k_work_cancel_delayable(&conn->deferred_work);
   2ca6c:	4628      	mov	r0, r5
   2ca6e:	f01b fc20 	bl	482b2 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2ca72:	f3bf 8f5b 	dmb	ish
   2ca76:	3404      	adds	r4, #4
   2ca78:	e854 3f00 	ldrex	r3, [r4]
   2ca7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2ca80:	e844 3200 	strex	r2, r3, [r4]
   2ca84:	2a00      	cmp	r2, #0
   2ca86:	d1f7      	bne.n	2ca78 <bt_conn_set_state+0xe8>
   2ca88:	f3bf 8f5b 	dmb	ish
   2ca8c:	4819      	ldr	r0, [pc, #100]	; (2caf4 <bt_conn_set_state+0x164>)
}
   2ca8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2ca92:	2100      	movs	r1, #0
   2ca94:	f015 b872 	b.w	41b7c <z_impl_k_poll_signal_raise>
			if (conn->err) {
   2ca98:	7b23      	ldrb	r3, [r4, #12]
   2ca9a:	2b00      	cmp	r3, #0
   2ca9c:	d0a6      	beq.n	2c9ec <bt_conn_set_state+0x5c>
				notify_connected(conn);
   2ca9e:	4620      	mov	r0, r4
   2caa0:	f7ff fdd6 	bl	2c650 <notify_connected>
   2caa4:	e7a2      	b.n	2c9ec <bt_conn_set_state+0x5c>
	return list->head;
   2caa6:	6961      	ldr	r1, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   2caa8:	b921      	cbnz	r1, 2cab4 <bt_conn_set_state+0x124>
   2caaa:	f383 8811 	msr	BASEPRI, r3
   2caae:	f3bf 8f6f 	isb	sy
}
   2cab2:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2cab4:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   2cab6:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   2cab8:	6162      	str	r2, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2caba:	4281      	cmp	r1, r0
	list->tail = node;
   2cabc:	bf08      	it	eq
   2cabe:	61a2      	streq	r2, [r4, #24]
   2cac0:	f383 8811 	msr	BASEPRI, r3
   2cac4:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2cac8:	f04f 0220 	mov.w	r2, #32
   2cacc:	f3ef 8311 	mrs	r3, BASEPRI
   2cad0:	f382 8812 	msr	BASEPRI_MAX, r2
   2cad4:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   2cad8:	68ca      	ldr	r2, [r1, #12]
   2cada:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   2cadc:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
   2cade:	f383 8811 	msr	BASEPRI, r3
   2cae2:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   2cae6:	4620      	mov	r0, r4
   2cae8:	f7ff fe00 	bl	2c6ec <conn_tx_destroy>
   2caec:	e773      	b.n	2c9d6 <bt_conn_set_state+0x46>
   2caee:	bf00      	nop
   2caf0:	20000100 	.word	0x20000100
   2caf4:	200003d0 	.word	0x200003d0

0002caf8 <bt_conn_index>:
		index = conn - acl_conns;
   2caf8:	4b03      	ldr	r3, [pc, #12]	; (2cb08 <bt_conn_index+0x10>)
   2cafa:	1ac0      	subs	r0, r0, r3
   2cafc:	4b03      	ldr	r3, [pc, #12]	; (2cb0c <bt_conn_index+0x14>)
   2cafe:	1180      	asrs	r0, r0, #6
   2cb00:	4358      	muls	r0, r3
}
   2cb02:	b2c0      	uxtb	r0, r0
   2cb04:	4770      	bx	lr
   2cb06:	bf00      	nop
   2cb08:	20001198 	.word	0x20001198
   2cb0c:	aaaaaaab 	.word	0xaaaaaaab

0002cb10 <bt_conn_create_pdu_timeout>:
{
   2cb10:	b538      	push	{r3, r4, r5, lr}
   2cb12:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   2cb14:	4906      	ldr	r1, [pc, #24]	; (2cb30 <bt_conn_create_pdu_timeout+0x20>)
   2cb16:	2800      	cmp	r0, #0
   2cb18:	bf08      	it	eq
   2cb1a:	4608      	moveq	r0, r1
   2cb1c:	f01a faf5 	bl	4710a <net_buf_alloc_fixed>
	if (!buf) {
   2cb20:	4604      	mov	r4, r0
   2cb22:	b118      	cbz	r0, 2cb2c <bt_conn_create_pdu_timeout+0x1c>
	net_buf_simple_reserve(&buf->b, reserve);
   2cb24:	1d29      	adds	r1, r5, #4
   2cb26:	3008      	adds	r0, #8
   2cb28:	f01a fb0e 	bl	47148 <net_buf_simple_reserve>
}
   2cb2c:	4620      	mov	r0, r4
   2cb2e:	bd38      	pop	{r3, r4, r5, pc}
   2cb30:	20000d9c 	.word	0x20000d9c

0002cb34 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   2cb34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2cb36:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2cb38:	f3bf 8f5b 	dmb	ish
   2cb3c:	6863      	ldr	r3, [r4, #4]
   2cb3e:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   2cb42:	05db      	lsls	r3, r3, #23
   2cb44:	f100 0004 	add.w	r0, r0, #4
   2cb48:	d511      	bpl.n	2cb6e <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
   2cb4a:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   2cb4e:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
   2cb52:	429a      	cmp	r2, r3
   2cb54:	d80b      	bhi.n	2cb6e <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
   2cb56:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	; 0xa2
   2cb5a:	429a      	cmp	r2, r3
   2cb5c:	d307      	bcc.n	2cb6e <notify_le_param_updated+0x3a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   2cb5e:	e9d4 2329 	ldrd	r2, r3, [r4, #164]	; 0xa4
   2cb62:	429a      	cmp	r2, r3
   2cb64:	d103      	bne.n	2cb6e <notify_le_param_updated+0x3a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2cb66:	f46f 7180 	mvn.w	r1, #256	; 0x100
   2cb6a:	f018 fa6b 	bl	45044 <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   2cb6e:	4b10      	ldr	r3, [pc, #64]	; (2cbb0 <notify_le_param_updated+0x7c>)
   2cb70:	681d      	ldr	r5, [r3, #0]
   2cb72:	b925      	cbnz	r5, 2cb7e <notify_le_param_updated+0x4a>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2cb74:	4d0f      	ldr	r5, [pc, #60]	; (2cbb4 <notify_le_param_updated+0x80>)
   2cb76:	4f10      	ldr	r7, [pc, #64]	; (2cbb8 <notify_le_param_updated+0x84>)
   2cb78:	42bd      	cmp	r5, r7
   2cb7a:	d30c      	bcc.n	2cb96 <notify_le_param_updated+0x62>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   2cb7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
   2cb7e:	68ee      	ldr	r6, [r5, #12]
   2cb80:	b13e      	cbz	r6, 2cb92 <notify_le_param_updated+0x5e>
			cb->le_param_updated(conn, conn->le.interval,
   2cb82:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   2cb86:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   2cb8a:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   2cb8e:	4620      	mov	r0, r4
   2cb90:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   2cb92:	69ed      	ldr	r5, [r5, #28]
   2cb94:	e7ed      	b.n	2cb72 <notify_le_param_updated+0x3e>
		if (cb->le_param_updated) {
   2cb96:	68ee      	ldr	r6, [r5, #12]
   2cb98:	b13e      	cbz	r6, 2cbaa <notify_le_param_updated+0x76>
			cb->le_param_updated(conn, conn->le.interval,
   2cb9a:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   2cb9e:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   2cba2:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   2cba6:	4620      	mov	r0, r4
   2cba8:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2cbaa:	3520      	adds	r5, #32
   2cbac:	e7e4      	b.n	2cb78 <notify_le_param_updated+0x44>
   2cbae:	bf00      	nop
   2cbb0:	20001d34 	.word	0x20001d34
   2cbb4:	00048db8 	.word	0x00048db8
   2cbb8:	00048db8 	.word	0x00048db8

0002cbbc <notify_le_phy_updated>:
}
#endif

#if defined(CONFIG_BT_USER_PHY_UPDATE)
void notify_le_phy_updated(struct bt_conn *conn)
{
   2cbbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   2cbbe:	4b0d      	ldr	r3, [pc, #52]	; (2cbf4 <notify_le_phy_updated+0x38>)
   2cbc0:	681d      	ldr	r5, [r3, #0]
{
   2cbc2:	4604      	mov	r4, r0
		if (cb->le_phy_updated) {
			cb->le_phy_updated(conn, &conn->le.phy);
   2cbc4:	f100 06b8 	add.w	r6, r0, #184	; 0xb8
	for (cb = callback_list; cb; cb = cb->_next) {
   2cbc8:	b935      	cbnz	r5, 2cbd8 <notify_le_phy_updated+0x1c>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2cbca:	4d0b      	ldr	r5, [pc, #44]	; (2cbf8 <notify_le_phy_updated+0x3c>)
   2cbcc:	4e0b      	ldr	r6, [pc, #44]	; (2cbfc <notify_le_phy_updated+0x40>)
		if (cb->le_phy_updated) {
			cb->le_phy_updated(conn, &conn->le.phy);
   2cbce:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2cbd2:	42b5      	cmp	r5, r6
   2cbd4:	d307      	bcc.n	2cbe6 <notify_le_phy_updated+0x2a>
		}
	}
}
   2cbd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_phy_updated) {
   2cbd8:	69ab      	ldr	r3, [r5, #24]
   2cbda:	b113      	cbz	r3, 2cbe2 <notify_le_phy_updated+0x26>
			cb->le_phy_updated(conn, &conn->le.phy);
   2cbdc:	4631      	mov	r1, r6
   2cbde:	4620      	mov	r0, r4
   2cbe0:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   2cbe2:	69ed      	ldr	r5, [r5, #28]
   2cbe4:	e7f0      	b.n	2cbc8 <notify_le_phy_updated+0xc>
		if (cb->le_phy_updated) {
   2cbe6:	69ab      	ldr	r3, [r5, #24]
   2cbe8:	b113      	cbz	r3, 2cbf0 <notify_le_phy_updated+0x34>
			cb->le_phy_updated(conn, &conn->le.phy);
   2cbea:	4639      	mov	r1, r7
   2cbec:	4620      	mov	r0, r4
   2cbee:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2cbf0:	3520      	adds	r5, #32
   2cbf2:	e7ee      	b.n	2cbd2 <notify_le_phy_updated+0x16>
   2cbf4:	20001d34 	.word	0x20001d34
   2cbf8:	00048db8 	.word	0x00048db8
   2cbfc:	00048db8 	.word	0x00048db8

0002cc00 <le_param_req>:
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   2cc00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cc04:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   2cc06:	4608      	mov	r0, r1
{
   2cc08:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   2cc0a:	f017 ff2a 	bl	44a62 <bt_le_conn_params_valid>
   2cc0e:	4605      	mov	r5, r0
   2cc10:	b918      	cbnz	r0, 2cc1a <le_param_req+0x1a>
		return false;
   2cc12:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   2cc14:	4628      	mov	r0, r5
   2cc16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   2cc1a:	4b13      	ldr	r3, [pc, #76]	; (2cc68 <le_param_req+0x68>)
   2cc1c:	681e      	ldr	r6, [r3, #0]
   2cc1e:	b946      	cbnz	r6, 2cc32 <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2cc20:	4e12      	ldr	r6, [pc, #72]	; (2cc6c <le_param_req+0x6c>)
   2cc22:	f8df 804c 	ldr.w	r8, [pc, #76]	; 2cc70 <le_param_req+0x70>
   2cc26:	4546      	cmp	r6, r8
   2cc28:	d2f4      	bcs.n	2cc14 <le_param_req+0x14>
		if (!cb->le_param_req) {
   2cc2a:	68b3      	ldr	r3, [r6, #8]
   2cc2c:	b983      	cbnz	r3, 2cc50 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2cc2e:	3620      	adds	r6, #32
   2cc30:	e7f9      	b.n	2cc26 <le_param_req+0x26>
		if (!cb->le_param_req) {
   2cc32:	68b3      	ldr	r3, [r6, #8]
   2cc34:	b90b      	cbnz	r3, 2cc3a <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
   2cc36:	69f6      	ldr	r6, [r6, #28]
   2cc38:	e7f1      	b.n	2cc1e <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   2cc3a:	4621      	mov	r1, r4
   2cc3c:	4638      	mov	r0, r7
   2cc3e:	4798      	blx	r3
   2cc40:	2800      	cmp	r0, #0
   2cc42:	d0e6      	beq.n	2cc12 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   2cc44:	4620      	mov	r0, r4
   2cc46:	f017 ff0c 	bl	44a62 <bt_le_conn_params_valid>
   2cc4a:	2800      	cmp	r0, #0
   2cc4c:	d1f3      	bne.n	2cc36 <le_param_req+0x36>
   2cc4e:	e7e0      	b.n	2cc12 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   2cc50:	4621      	mov	r1, r4
   2cc52:	4638      	mov	r0, r7
   2cc54:	4798      	blx	r3
   2cc56:	2800      	cmp	r0, #0
   2cc58:	d0db      	beq.n	2cc12 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   2cc5a:	4620      	mov	r0, r4
   2cc5c:	f017 ff01 	bl	44a62 <bt_le_conn_params_valid>
   2cc60:	2800      	cmp	r0, #0
   2cc62:	d1e4      	bne.n	2cc2e <le_param_req+0x2e>
   2cc64:	e7d5      	b.n	2cc12 <le_param_req+0x12>
   2cc66:	bf00      	nop
   2cc68:	20001d34 	.word	0x20001d34
   2cc6c:	00048db8 	.word	0x00048db8
   2cc70:	00048db8 	.word	0x00048db8

0002cc74 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   2cc74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2cc78:	78c3      	ldrb	r3, [r0, #3]
{
   2cc7a:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2cc7c:	b973      	cbnz	r3, 2cc9c <bt_conn_identity_resolved+0x28>
		rpa = &conn->le.resp_addr;
   2cc7e:	f100 0696 	add.w	r6, r0, #150	; 0x96
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   2cc82:	4b10      	ldr	r3, [pc, #64]	; (2ccc4 <bt_conn_identity_resolved+0x50>)
   2cc84:	681d      	ldr	r5, [r3, #0]
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   2cc86:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
   2cc8a:	b955      	cbnz	r5, 2cca2 <bt_conn_identity_resolved+0x2e>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2cc8c:	4d0e      	ldr	r5, [pc, #56]	; (2ccc8 <bt_conn_identity_resolved+0x54>)
   2cc8e:	4f0f      	ldr	r7, [pc, #60]	; (2cccc <bt_conn_identity_resolved+0x58>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   2cc90:	f104 0888 	add.w	r8, r4, #136	; 0x88
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2cc94:	42bd      	cmp	r5, r7
   2cc96:	d30c      	bcc.n	2ccb2 <bt_conn_identity_resolved+0x3e>
		}
	}
}
   2cc98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rpa = &conn->le.init_addr;
   2cc9c:	f100 068f 	add.w	r6, r0, #143	; 0x8f
   2cca0:	e7ef      	b.n	2cc82 <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   2cca2:	692b      	ldr	r3, [r5, #16]
   2cca4:	b11b      	cbz	r3, 2ccae <bt_conn_identity_resolved+0x3a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   2cca6:	463a      	mov	r2, r7
   2cca8:	4631      	mov	r1, r6
   2ccaa:	4620      	mov	r0, r4
   2ccac:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   2ccae:	69ed      	ldr	r5, [r5, #28]
   2ccb0:	e7eb      	b.n	2cc8a <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   2ccb2:	692b      	ldr	r3, [r5, #16]
   2ccb4:	b11b      	cbz	r3, 2ccbe <bt_conn_identity_resolved+0x4a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   2ccb6:	4642      	mov	r2, r8
   2ccb8:	4631      	mov	r1, r6
   2ccba:	4620      	mov	r0, r4
   2ccbc:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2ccbe:	3520      	adds	r5, #32
   2ccc0:	e7e8      	b.n	2cc94 <bt_conn_identity_resolved+0x20>
   2ccc2:	bf00      	nop
   2ccc4:	20001d34 	.word	0x20001d34
   2ccc8:	00048db8 	.word	0x00048db8
   2cccc:	00048db8 	.word	0x00048db8

0002ccd0 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   2ccd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
   2ccd2:	7a43      	ldrb	r3, [r0, #9]
   2ccd4:	7283      	strb	r3, [r0, #10]
{
   2ccd6:	4604      	mov	r4, r0
   2ccd8:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   2ccda:	f018 fb88 	bl	453ee <bt_l2cap_security_changed>
	if (IS_ENABLED(CONFIG_BT_ISO_CENTRAL)) {
		bt_iso_security_changed(conn, hci_err);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   2ccde:	4b0c      	ldr	r3, [pc, #48]	; (2cd10 <bt_conn_security_changed+0x40>)
   2cce0:	681d      	ldr	r5, [r3, #0]
   2cce2:	b925      	cbnz	r5, 2ccee <bt_conn_security_changed+0x1e>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2cce4:	4d0b      	ldr	r5, [pc, #44]	; (2cd14 <bt_conn_security_changed+0x44>)
   2cce6:	4f0c      	ldr	r7, [pc, #48]	; (2cd18 <bt_conn_security_changed+0x48>)
   2cce8:	42bd      	cmp	r5, r7
   2ccea:	d308      	bcc.n	2ccfe <bt_conn_security_changed+0x2e>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   2ccec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->security_changed) {
   2ccee:	696b      	ldr	r3, [r5, #20]
   2ccf0:	b11b      	cbz	r3, 2ccfa <bt_conn_security_changed+0x2a>
			cb->security_changed(conn, conn->sec_level, err);
   2ccf2:	7a61      	ldrb	r1, [r4, #9]
   2ccf4:	4632      	mov	r2, r6
   2ccf6:	4620      	mov	r0, r4
   2ccf8:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   2ccfa:	69ed      	ldr	r5, [r5, #28]
   2ccfc:	e7f1      	b.n	2cce2 <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
   2ccfe:	696b      	ldr	r3, [r5, #20]
   2cd00:	b11b      	cbz	r3, 2cd0a <bt_conn_security_changed+0x3a>
			cb->security_changed(conn, conn->sec_level, err);
   2cd02:	7a61      	ldrb	r1, [r4, #9]
   2cd04:	4632      	mov	r2, r6
   2cd06:	4620      	mov	r0, r4
   2cd08:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2cd0a:	3520      	adds	r5, #32
   2cd0c:	e7ec      	b.n	2cce8 <bt_conn_security_changed+0x18>
   2cd0e:	bf00      	nop
   2cd10:	20001d34 	.word	0x20001d34
   2cd14:	00048db8 	.word	0x00048db8
   2cd18:	00048db8 	.word	0x00048db8

0002cd1c <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   2cd1c:	4b02      	ldr	r3, [pc, #8]	; (2cd28 <bt_conn_cb_register+0xc>)
   2cd1e:	681a      	ldr	r2, [r3, #0]
   2cd20:	61c2      	str	r2, [r0, #28]
	callback_list = cb;
   2cd22:	6018      	str	r0, [r3, #0]
}
   2cd24:	4770      	bx	lr
   2cd26:	bf00      	nop
   2cd28:	20001d34 	.word	0x20001d34

0002cd2c <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   2cd2c:	b570      	push	{r4, r5, r6, lr}
   2cd2e:	4606      	mov	r6, r0
   2cd30:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   2cd32:	480a      	ldr	r0, [pc, #40]	; (2cd5c <bt_conn_add_le+0x30>)
   2cd34:	2101      	movs	r1, #1
   2cd36:	f7ff fd7b 	bl	2c830 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   2cd3a:	4604      	mov	r4, r0
   2cd3c:	b160      	cbz	r0, 2cd58 <bt_conn_add_le+0x2c>
		return NULL;
	}

	conn->id = id;
   2cd3e:	7206      	strb	r6, [r0, #8]
	memcpy(dst, src, sizeof(*dst));
   2cd40:	2207      	movs	r2, #7
   2cd42:	4629      	mov	r1, r5
   2cd44:	3088      	adds	r0, #136	; 0x88
   2cd46:	f017 fae7 	bl	44318 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   2cd4a:	2301      	movs	r3, #1
   2cd4c:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   2cd4e:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   2cd50:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   2cd52:	4b03      	ldr	r3, [pc, #12]	; (2cd60 <bt_conn_add_le+0x34>)
   2cd54:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   2cd58:	4620      	mov	r0, r4
   2cd5a:	bd70      	pop	{r4, r5, r6, pc}
   2cd5c:	20001198 	.word	0x20001198
   2cd60:	00280018 	.word	0x00280018

0002cd64 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   2cd64:	b570      	push	{r4, r5, r6, lr}
   2cd66:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   2cd68:	480a      	ldr	r0, [pc, #40]	; (2cd94 <bt_conn_lookup_addr_le+0x30>)
{
   2cd6a:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   2cd6c:	f018 f9f5 	bl	4515a <bt_conn_ref>
   2cd70:	4604      	mov	r4, r0

		if (!conn) {
   2cd72:	b120      	cbz	r0, 2cd7e <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   2cd74:	7883      	ldrb	r3, [r0, #2]
   2cd76:	2b01      	cmp	r3, #1
   2cd78:	d004      	beq.n	2cd84 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   2cd7a:	f018 fa0a 	bl	45192 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   2cd7e:	2400      	movs	r4, #0
}
   2cd80:	4620      	mov	r0, r4
   2cd82:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   2cd84:	4632      	mov	r2, r6
   2cd86:	4629      	mov	r1, r5
   2cd88:	f018 fa9a 	bl	452c0 <bt_conn_is_peer_addr_le>
   2cd8c:	2800      	cmp	r0, #0
   2cd8e:	d1f7      	bne.n	2cd80 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   2cd90:	4620      	mov	r0, r4
   2cd92:	e7f2      	b.n	2cd7a <bt_conn_lookup_addr_le+0x16>
   2cd94:	20001198 	.word	0x20001198

0002cd98 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   2cd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2cd9a:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   2cd9c:	480e      	ldr	r0, [pc, #56]	; (2cdd8 <bt_conn_lookup_state_le+0x40>)
{
   2cd9e:	460e      	mov	r6, r1
   2cda0:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   2cda2:	f018 f9da 	bl	4515a <bt_conn_ref>

		if (!conn) {
   2cda6:	4604      	mov	r4, r0
   2cda8:	b120      	cbz	r0, 2cdb4 <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   2cdaa:	7883      	ldrb	r3, [r0, #2]
   2cdac:	2b01      	cmp	r3, #1
   2cdae:	d003      	beq.n	2cdb8 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   2cdb0:	f018 f9ef 	bl	45192 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   2cdb4:	2400      	movs	r4, #0
   2cdb6:	e00d      	b.n	2cdd4 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   2cdb8:	b136      	cbz	r6, 2cdc8 <bt_conn_lookup_state_le+0x30>
   2cdba:	4632      	mov	r2, r6
   2cdbc:	4629      	mov	r1, r5
   2cdbe:	f018 fa7f 	bl	452c0 <bt_conn_is_peer_addr_le>
   2cdc2:	b908      	cbnz	r0, 2cdc8 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   2cdc4:	4620      	mov	r0, r4
   2cdc6:	e7f3      	b.n	2cdb0 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   2cdc8:	7b63      	ldrb	r3, [r4, #13]
   2cdca:	42bb      	cmp	r3, r7
   2cdcc:	d1fa      	bne.n	2cdc4 <bt_conn_lookup_state_le+0x2c>
   2cdce:	7a23      	ldrb	r3, [r4, #8]
   2cdd0:	42ab      	cmp	r3, r5
   2cdd2:	d1f7      	bne.n	2cdc4 <bt_conn_lookup_state_le+0x2c>
}
   2cdd4:	4620      	mov	r0, r4
   2cdd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2cdd8:	20001198 	.word	0x20001198

0002cddc <send_conn_le_param_update>:
{
   2cddc:	b538      	push	{r3, r4, r5, lr}
   2cdde:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   2cde0:	4608      	mov	r0, r1
{
   2cde2:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   2cde4:	f017 fe3d 	bl	44a62 <bt_le_conn_params_valid>
   2cde8:	b348      	cbz	r0, 2ce3e <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   2cdea:	4b16      	ldr	r3, [pc, #88]	; (2ce44 <send_conn_le_param_update+0x68>)
   2cdec:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   2cdf0:	0799      	lsls	r1, r3, #30
   2cdf2:	d407      	bmi.n	2ce04 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   2cdf4:	78e3      	ldrb	r3, [r4, #3]
   2cdf6:	b183      	cbz	r3, 2ce1a <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   2cdf8:	4629      	mov	r1, r5
   2cdfa:	4620      	mov	r0, r4
}
   2cdfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   2ce00:	f000 b992 	b.w	2d128 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   2ce04:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   2ce08:	079a      	lsls	r2, r3, #30
   2ce0a:	d5f3      	bpl.n	2cdf4 <send_conn_le_param_update+0x18>
   2ce0c:	f3bf 8f5b 	dmb	ish
   2ce10:	6863      	ldr	r3, [r4, #4]
   2ce12:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   2ce16:	059b      	lsls	r3, r3, #22
   2ce18:	d4ec      	bmi.n	2cdf4 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   2ce1a:	4629      	mov	r1, r5
   2ce1c:	4620      	mov	r0, r4
   2ce1e:	f018 fa79 	bl	45314 <bt_conn_le_conn_update>
		if (rc == 0) {
   2ce22:	b958      	cbnz	r0, 2ce3c <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
   2ce24:	882b      	ldrh	r3, [r5, #0]
   2ce26:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   2ce2a:	886b      	ldrh	r3, [r5, #2]
   2ce2c:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   2ce30:	88ab      	ldrh	r3, [r5, #4]
   2ce32:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   2ce36:	88eb      	ldrh	r3, [r5, #6]
   2ce38:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   2ce3c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2ce3e:	f06f 0015 	mvn.w	r0, #21
   2ce42:	e7fb      	b.n	2ce3c <send_conn_le_param_update+0x60>
   2ce44:	20000000 	.word	0x20000000

0002ce48 <deferred_work>:
{
   2ce48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   2ce4a:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
   2ce4e:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   2ce50:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   2ce54:	b9fb      	cbnz	r3, 2ce96 <deferred_work+0x4e>
		bt_l2cap_disconnected(conn);
   2ce56:	4628      	mov	r0, r5
   2ce58:	f018 fab1 	bl	453be <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   2ce5c:	4b1f      	ldr	r3, [pc, #124]	; (2cedc <deferred_work+0x94>)
   2ce5e:	681e      	ldr	r6, [r3, #0]
   2ce60:	b94e      	cbnz	r6, 2ce76 <deferred_work+0x2e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2ce62:	4e1f      	ldr	r6, [pc, #124]	; (2cee0 <deferred_work+0x98>)
   2ce64:	4f1f      	ldr	r7, [pc, #124]	; (2cee4 <deferred_work+0x9c>)
   2ce66:	42be      	cmp	r6, r7
   2ce68:	d30d      	bcc.n	2ce86 <deferred_work+0x3e>
		bt_conn_unref(conn);
   2ce6a:	4628      	mov	r0, r5
}
   2ce6c:	b003      	add	sp, #12
   2ce6e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   2ce72:	f018 b98e 	b.w	45192 <bt_conn_unref>
		if (cb->disconnected) {
   2ce76:	6873      	ldr	r3, [r6, #4]
   2ce78:	b11b      	cbz	r3, 2ce82 <deferred_work+0x3a>
			cb->disconnected(conn, conn->err);
   2ce7a:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   2ce7e:	4628      	mov	r0, r5
   2ce80:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   2ce82:	69f6      	ldr	r6, [r6, #28]
   2ce84:	e7ec      	b.n	2ce60 <deferred_work+0x18>
		if (cb->disconnected) {
   2ce86:	6873      	ldr	r3, [r6, #4]
   2ce88:	b11b      	cbz	r3, 2ce92 <deferred_work+0x4a>
			cb->disconnected(conn, conn->err);
   2ce8a:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   2ce8e:	4628      	mov	r0, r5
   2ce90:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2ce92:	3620      	adds	r6, #32
   2ce94:	e7e7      	b.n	2ce66 <deferred_work+0x1e>
	if (conn->type != BT_CONN_TYPE_LE) {
   2ce96:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   2ce9a:	2b01      	cmp	r3, #1
   2ce9c:	d11c      	bne.n	2ced8 <deferred_work+0x90>
	if (atomic_test_and_clear_bit(conn->flags,
   2ce9e:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2cea2:	f46f 7180 	mvn.w	r1, #256	; 0x100
   2cea6:	4630      	mov	r0, r6
   2cea8:	f018 f8cc 	bl	45044 <atomic_and>
   2ceac:	05c3      	lsls	r3, r0, #23
   2ceae:	d507      	bpl.n	2cec0 <deferred_work+0x78>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   2ceb0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   2ceb2:	9300      	str	r3, [sp, #0]
		send_conn_le_param_update(conn, param);
   2ceb4:	4669      	mov	r1, sp
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   2ceb6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   2ceb8:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   2ceba:	4628      	mov	r0, r5
   2cebc:	f7ff ff8e 	bl	2cddc <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2cec0:	f3bf 8f5b 	dmb	ish
   2cec4:	e856 3f00 	ldrex	r3, [r6]
   2cec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2cecc:	e846 3200 	strex	r2, r3, [r6]
   2ced0:	2a00      	cmp	r2, #0
   2ced2:	d1f7      	bne.n	2cec4 <deferred_work+0x7c>
   2ced4:	f3bf 8f5b 	dmb	ish
}
   2ced8:	b003      	add	sp, #12
   2ceda:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2cedc:	20001d34 	.word	0x20001d34
   2cee0:	00048db8 	.word	0x00048db8
   2cee4:	00048db8 	.word	0x00048db8

0002cee8 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   2cee8:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   2ceea:	4801      	ldr	r0, [pc, #4]	; (2cef0 <bt_conn_create_frag_timeout+0x8>)
   2ceec:	f7ff be10 	b.w	2cb10 <bt_conn_create_pdu_timeout>
   2cef0:	20000df4 	.word	0x20000df4

0002cef4 <create_frag>:
{
   2cef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cef8:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   2cefa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2cefe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2cf02:	2000      	movs	r0, #0
{
   2cf04:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   2cf06:	f7ff ffef 	bl	2cee8 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   2cf0a:	7b73      	ldrb	r3, [r6, #13]
   2cf0c:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   2cf0e:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   2cf10:	f04f 0600 	mov.w	r6, #0
   2cf14:	d005      	beq.n	2cf22 <create_frag+0x2e>
		net_buf_unref(frag);
   2cf16:	f00f f9fb 	bl	3c310 <net_buf_unref>
		return NULL;
   2cf1a:	4635      	mov	r5, r6
}
   2cf1c:	4628      	mov	r0, r5
   2cf1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   2cf22:	6146      	str	r6, [r0, #20]
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   2cf24:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   2cf28:	4e0c      	ldr	r6, [pc, #48]	; (2cf5c <create_frag+0x68>)
   2cf2a:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   2cf2c:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   2cf30:	f01a f988 	bl	47244 <net_buf_simple_tailroom>
   2cf34:	4580      	cmp	r8, r0
   2cf36:	d20c      	bcs.n	2cf52 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   2cf38:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2cf3c:	f854 1f08 	ldr.w	r1, [r4, #8]!
   2cf40:	4632      	mov	r2, r6
   2cf42:	4638      	mov	r0, r7
   2cf44:	f01a f949 	bl	471da <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   2cf48:	4631      	mov	r1, r6
   2cf4a:	4620      	mov	r0, r4
   2cf4c:	f01a f95e 	bl	4720c <net_buf_simple_pull>
   2cf50:	e7e4      	b.n	2cf1c <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   2cf52:	4638      	mov	r0, r7
   2cf54:	f01a f976 	bl	47244 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   2cf58:	b286      	uxth	r6, r0
   2cf5a:	e7ef      	b.n	2cf3c <create_frag+0x48>
   2cf5c:	20000000 	.word	0x20000000

0002cf60 <bt_conn_process_tx>:
{
   2cf60:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   2cf62:	7b43      	ldrb	r3, [r0, #13]
{
   2cf64:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   2cf66:	b95b      	cbnz	r3, 2cf80 <bt_conn_process_tx+0x20>
   2cf68:	f06f 0140 	mvn.w	r1, #64	; 0x40
   2cf6c:	3004      	adds	r0, #4
   2cf6e:	f018 f869 	bl	45044 <atomic_and>
   2cf72:	0643      	lsls	r3, r0, #25
   2cf74:	d504      	bpl.n	2cf80 <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
   2cf76:	4620      	mov	r0, r4
}
   2cf78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   2cf7c:	f018 b87d 	b.w	4507a <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   2cf80:	2200      	movs	r2, #0
   2cf82:	2300      	movs	r3, #0
   2cf84:	f104 0038 	add.w	r0, r4, #56	; 0x38
   2cf88:	f01a f8c4 	bl	47114 <net_buf_get>
	BT_ASSERT(buf);
   2cf8c:	4605      	mov	r5, r0
   2cf8e:	b960      	cbnz	r0, 2cfaa <bt_conn_process_tx+0x4a>
   2cf90:	4a23      	ldr	r2, [pc, #140]	; (2d020 <bt_conn_process_tx+0xc0>)
   2cf92:	4924      	ldr	r1, [pc, #144]	; (2d024 <bt_conn_process_tx+0xc4>)
   2cf94:	4824      	ldr	r0, [pc, #144]	; (2d028 <bt_conn_process_tx+0xc8>)
   2cf96:	f240 330b 	movw	r3, #779	; 0x30b
   2cf9a:	f015 fb15 	bl	425c8 <assert_print>
   2cf9e:	4040      	eors	r0, r0
   2cfa0:	f380 8811 	msr	BASEPRI, r0
   2cfa4:	f04f 0003 	mov.w	r0, #3
   2cfa8:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   2cfaa:	4e20      	ldr	r6, [pc, #128]	; (2d02c <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
   2cfac:	89aa      	ldrh	r2, [r5, #12]
   2cfae:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   2cfb2:	429a      	cmp	r2, r3
   2cfb4:	d807      	bhi.n	2cfc6 <bt_conn_process_tx+0x66>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   2cfb6:	2300      	movs	r3, #0
   2cfb8:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   2cfba:	4629      	mov	r1, r5
   2cfbc:	4620      	mov	r0, r4
   2cfbe:	f7ff fbab 	bl	2c718 <send_frag>
	if (!send_buf(conn, buf)) {
   2cfc2:	b968      	cbnz	r0, 2cfe0 <bt_conn_process_tx+0x80>
   2cfc4:	e005      	b.n	2cfd2 <bt_conn_process_tx+0x72>
	frag = create_frag(conn, buf);
   2cfc6:	4629      	mov	r1, r5
   2cfc8:	4620      	mov	r0, r4
   2cfca:	f7ff ff93 	bl	2cef4 <create_frag>
	if (!frag) {
   2cfce:	4601      	mov	r1, r0
   2cfd0:	b938      	cbnz	r0, 2cfe2 <bt_conn_process_tx+0x82>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   2cfd2:	696e      	ldr	r6, [r5, #20]
		tx_data(buf)->tx = NULL;
   2cfd4:	2300      	movs	r3, #0
   2cfd6:	616b      	str	r3, [r5, #20]
		net_buf_unref(buf);
   2cfd8:	4628      	mov	r0, r5
   2cfda:	f00f f999 	bl	3c310 <net_buf_unref>
		if (tx) {
   2cfde:	b9ce      	cbnz	r6, 2d014 <bt_conn_process_tx+0xb4>
}
   2cfe0:	bd70      	pop	{r4, r5, r6, pc}
	if (!send_frag(conn, frag, FRAG_START, true)) {
   2cfe2:	2301      	movs	r3, #1
   2cfe4:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   2cfe6:	4620      	mov	r0, r4
   2cfe8:	f7ff fb96 	bl	2c718 <send_frag>
   2cfec:	2800      	cmp	r0, #0
   2cfee:	d0f0      	beq.n	2cfd2 <bt_conn_process_tx+0x72>
	while (buf->len > conn_mtu(conn)) {
   2cff0:	89aa      	ldrh	r2, [r5, #12]
   2cff2:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   2cff6:	429a      	cmp	r2, r3
   2cff8:	d802      	bhi.n	2d000 <bt_conn_process_tx+0xa0>
	return send_frag(conn, buf, FRAG_END, false);
   2cffa:	2300      	movs	r3, #0
   2cffc:	2203      	movs	r2, #3
   2cffe:	e7dc      	b.n	2cfba <bt_conn_process_tx+0x5a>
		frag = create_frag(conn, buf);
   2d000:	4629      	mov	r1, r5
   2d002:	4620      	mov	r0, r4
   2d004:	f7ff ff76 	bl	2cef4 <create_frag>
		if (!frag) {
   2d008:	4601      	mov	r1, r0
   2d00a:	2800      	cmp	r0, #0
   2d00c:	d0e1      	beq.n	2cfd2 <bt_conn_process_tx+0x72>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   2d00e:	2301      	movs	r3, #1
   2d010:	461a      	mov	r2, r3
   2d012:	e7e8      	b.n	2cfe6 <bt_conn_process_tx+0x86>
			conn_tx_destroy(conn, tx);
   2d014:	4631      	mov	r1, r6
   2d016:	4620      	mov	r0, r4
}
   2d018:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			conn_tx_destroy(conn, tx);
   2d01c:	f7ff bb66 	b.w	2c6ec <conn_tx_destroy>
   2d020:	0004a9c3 	.word	0x0004a9c3
   2d024:	0004a8a9 	.word	0x0004a8a9
   2d028:	0004a88c 	.word	0x0004a88c
   2d02c:	20000000 	.word	0x20000000

0002d030 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   2d030:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   2d032:	490b      	ldr	r1, [pc, #44]	; (2d060 <bt_conn_init+0x30>)
   2d034:	480b      	ldr	r0, [pc, #44]	; (2d064 <bt_conn_init+0x34>)
   2d036:	f01b f814 	bl	48062 <k_queue_append>
   2d03a:	490b      	ldr	r1, [pc, #44]	; (2d068 <bt_conn_init+0x38>)
   2d03c:	4809      	ldr	r0, [pc, #36]	; (2d064 <bt_conn_init+0x34>)
   2d03e:	f01b f810 	bl	48062 <k_queue_append>
   2d042:	490a      	ldr	r1, [pc, #40]	; (2d06c <bt_conn_init+0x3c>)
   2d044:	4807      	ldr	r0, [pc, #28]	; (2d064 <bt_conn_init+0x34>)
   2d046:	f01b f80c 	bl	48062 <k_queue_append>
	}

	bt_att_init();
   2d04a:	f000 fde9 	bl	2dc20 <bt_att_init>

	err = bt_smp_init();
   2d04e:	f002 fe77 	bl	2fd40 <bt_smp_init>
	if (err) {
   2d052:	4604      	mov	r4, r0
   2d054:	b908      	cbnz	r0, 2d05a <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
   2d056:	f018 fa59 	bl	4550c <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   2d05a:	4620      	mov	r0, r4
   2d05c:	bd10      	pop	{r4, pc}
   2d05e:	bf00      	nop
   2d060:	20001d04 	.word	0x20001d04
   2d064:	20000d6c 	.word	0x20000d6c
   2d068:	20001d14 	.word	0x20001d14
   2d06c:	20001d24 	.word	0x20001d24

0002d070 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   2d070:	4b04      	ldr	r3, [pc, #16]	; (2d084 <l2cap_accept+0x14>)
   2d072:	6818      	ldr	r0, [r3, #0]
   2d074:	b918      	cbnz	r0, 2d07e <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   2d076:	4a04      	ldr	r2, [pc, #16]	; (2d088 <l2cap_accept+0x18>)
   2d078:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   2d07a:	600b      	str	r3, [r1, #0]

		return 0;
   2d07c:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
   2d07e:	f06f 000b 	mvn.w	r0, #11
}
   2d082:	4770      	bx	lr
   2d084:	20001d44 	.word	0x20001d44
   2d088:	000494f4 	.word	0x000494f4

0002d08c <bt_l2cap_connected>:
{
   2d08c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   2d08e:	4d24      	ldr	r5, [pc, #144]	; (2d120 <bt_l2cap_connected+0x94>)
   2d090:	4f24      	ldr	r7, [pc, #144]	; (2d124 <bt_l2cap_connected+0x98>)
{
   2d092:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2d094:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   2d096:	42bd      	cmp	r5, r7
   2d098:	d301      	bcc.n	2d09e <bt_l2cap_connected+0x12>
}
   2d09a:	b003      	add	sp, #12
   2d09c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (fchan->accept(conn, &chan) < 0) {
   2d09e:	686b      	ldr	r3, [r5, #4]
   2d0a0:	a901      	add	r1, sp, #4
   2d0a2:	4620      	mov	r0, r4
   2d0a4:	4798      	blx	r3
   2d0a6:	2800      	cmp	r0, #0
   2d0a8:	db34      	blt.n	2d114 <bt_l2cap_connected+0x88>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   2d0aa:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   2d0ac:	882a      	ldrh	r2, [r5, #0]
   2d0ae:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   2d0b0:	849a      	strh	r2, [r3, #36]	; 0x24
   2d0b2:	f103 0210 	add.w	r2, r3, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   2d0b6:	68a8      	ldr	r0, [r5, #8]
   2d0b8:	f3bf 8f5b 	dmb	ish
   2d0bc:	e852 1f00 	ldrex	r1, [r2]
   2d0c0:	e842 6c00 	strex	ip, r6, [r2]
   2d0c4:	f1bc 0f00 	cmp.w	ip, #0
   2d0c8:	d1f8      	bne.n	2d0bc <bt_l2cap_connected+0x30>
   2d0ca:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   2d0ce:	609e      	str	r6, [r3, #8]
	return list->tail;
   2d0d0:	6d61      	ldr	r1, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   2d0d2:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   2d0d6:	b9f9      	cbnz	r1, 2d118 <bt_l2cap_connected+0x8c>
	list->head = node;
   2d0d8:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
	chan->conn = conn;
   2d0dc:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   2d0de:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   2d0e0:	9801      	ldr	r0, [sp, #4]
   2d0e2:	6843      	ldr	r3, [r0, #4]
   2d0e4:	681b      	ldr	r3, [r3, #0]
   2d0e6:	b103      	cbz	r3, 2d0ea <bt_l2cap_connected+0x5e>
			chan->ops->connected(chan);
   2d0e8:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2d0ea:	9b01      	ldr	r3, [sp, #4]
   2d0ec:	f3bf 8f5b 	dmb	ish
   2d0f0:	3310      	adds	r3, #16
   2d0f2:	e853 1f00 	ldrex	r1, [r3]
   2d0f6:	f041 0101 	orr.w	r1, r1, #1
   2d0fa:	e843 1200 	strex	r2, r1, [r3]
   2d0fe:	2a00      	cmp	r2, #0
   2d100:	d1f7      	bne.n	2d0f2 <bt_l2cap_connected+0x66>
   2d102:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   2d106:	9801      	ldr	r0, [sp, #4]
   2d108:	6843      	ldr	r3, [r0, #4]
   2d10a:	69db      	ldr	r3, [r3, #28]
   2d10c:	b113      	cbz	r3, 2d114 <bt_l2cap_connected+0x88>
			chan->ops->status(chan, chan->status);
   2d10e:	f100 0110 	add.w	r1, r0, #16
   2d112:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   2d114:	350c      	adds	r5, #12
   2d116:	e7be      	b.n	2d096 <bt_l2cap_connected+0xa>
	parent->next = child;
   2d118:	600a      	str	r2, [r1, #0]
	list->tail = node;
   2d11a:	6562      	str	r2, [r4, #84]	; 0x54
}
   2d11c:	e7de      	b.n	2d0dc <bt_l2cap_connected+0x50>
   2d11e:	bf00      	nop
   2d120:	00048d94 	.word	0x00048d94
   2d124:	00048db8 	.word	0x00048db8

0002d128 <bt_l2cap_update_conn_param>:
{
   2d128:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   2d12a:	4b17      	ldr	r3, [pc, #92]	; (2d188 <bt_l2cap_update_conn_param+0x60>)
{
   2d12c:	460e      	mov	r6, r1
	ident++;
   2d12e:	7819      	ldrb	r1, [r3, #0]
   2d130:	3101      	adds	r1, #1
   2d132:	b2c9      	uxtb	r1, r1
   2d134:	2901      	cmp	r1, #1
   2d136:	bf38      	it	cc
   2d138:	2101      	movcc	r1, #1
{
   2d13a:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   2d13c:	2208      	movs	r2, #8
   2d13e:	2012      	movs	r0, #18
	ident++;
   2d140:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   2d142:	f018 f910 	bl	45366 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   2d146:	4604      	mov	r4, r0
   2d148:	b1d0      	cbz	r0, 2d180 <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   2d14a:	2108      	movs	r1, #8
   2d14c:	4408      	add	r0, r1
   2d14e:	f01a f83e 	bl	471ce <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   2d152:	8833      	ldrh	r3, [r6, #0]
   2d154:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   2d156:	8873      	ldrh	r3, [r6, #2]
   2d158:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   2d15a:	88b3      	ldrh	r3, [r6, #4]
   2d15c:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   2d15e:	88f3      	ldrh	r3, [r6, #6]
   2d160:	80c3      	strh	r3, [r0, #6]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   2d162:	2300      	movs	r3, #0
   2d164:	4628      	mov	r0, r5
   2d166:	9300      	str	r3, [sp, #0]
   2d168:	4622      	mov	r2, r4
   2d16a:	2105      	movs	r1, #5
   2d16c:	f018 f95f 	bl	4542e <bt_l2cap_send_cb>
	if (err) {
   2d170:	4605      	mov	r5, r0
   2d172:	b110      	cbz	r0, 2d17a <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   2d174:	4620      	mov	r0, r4
   2d176:	f00f f8cb 	bl	3c310 <net_buf_unref>
}
   2d17a:	4628      	mov	r0, r5
   2d17c:	b002      	add	sp, #8
   2d17e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   2d180:	f06f 050b 	mvn.w	r5, #11
   2d184:	e7f9      	b.n	2d17a <bt_l2cap_update_conn_param+0x52>
   2d186:	bf00      	nop
   2d188:	20003b0b 	.word	0x20003b0b

0002d18c <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   2d18c:	2823      	cmp	r0, #35	; 0x23
   2d18e:	d81f      	bhi.n	2d1d0 <att_op_get_type+0x44>
   2d190:	281a      	cmp	r0, #26
   2d192:	d804      	bhi.n	2d19e <att_op_get_type+0x12>
   2d194:	1e43      	subs	r3, r0, #1
   2d196:	2b18      	cmp	r3, #24
   2d198:	d90e      	bls.n	2d1b8 <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   2d19a:	2006      	movs	r0, #6
   2d19c:	4770      	bx	lr
	switch (op) {
   2d19e:	f1a0 031b 	sub.w	r3, r0, #27
   2d1a2:	2b08      	cmp	r3, #8
   2d1a4:	d81e      	bhi.n	2d1e4 <att_op_get_type+0x58>
   2d1a6:	e8df f003 	tbb	[pc, r3]
   2d1aa:	1d05      	.short	0x1d05
   2d1ac:	191d231b 	.word	0x191d231b
   2d1b0:	1d25      	.short	0x1d25
   2d1b2:	05          	.byte	0x05
   2d1b3:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   2d1b4:	2003      	movs	r0, #3
   2d1b6:	4770      	bx	lr
	switch (op) {
   2d1b8:	4a0f      	ldr	r2, [pc, #60]	; (2d1f8 <att_op_get_type+0x6c>)
   2d1ba:	2301      	movs	r3, #1
   2d1bc:	4083      	lsls	r3, r0
   2d1be:	401a      	ands	r2, r3
   2d1c0:	b9c2      	cbnz	r2, 2d1f4 <att_op_get_type+0x68>
   2d1c2:	4a0e      	ldr	r2, [pc, #56]	; (2d1fc <att_op_get_type+0x70>)
   2d1c4:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   2d1c6:	2a00      	cmp	r2, #0
   2d1c8:	bf14      	ite	ne
   2d1ca:	2001      	movne	r0, #1
   2d1cc:	2006      	moveq	r0, #6
   2d1ce:	4770      	bx	lr
	switch (op) {
   2d1d0:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   2d1d4:	2b52      	cmp	r3, #82	; 0x52
   2d1d6:	d105      	bne.n	2d1e4 <att_op_get_type+0x58>
		return ATT_COMMAND;
   2d1d8:	2000      	movs	r0, #0
}
   2d1da:	4770      	bx	lr
		return ATT_REQUEST;
   2d1dc:	2001      	movs	r0, #1
   2d1de:	4770      	bx	lr
		return ATT_INDICATION;
   2d1e0:	2005      	movs	r0, #5
   2d1e2:	4770      	bx	lr
		return ATT_COMMAND;
   2d1e4:	f010 0f40 	tst.w	r0, #64	; 0x40
   2d1e8:	bf0c      	ite	eq
   2d1ea:	2006      	moveq	r0, #6
   2d1ec:	2000      	movne	r0, #0
   2d1ee:	4770      	bx	lr
	switch (op) {
   2d1f0:	2004      	movs	r0, #4
   2d1f2:	4770      	bx	lr
		return ATT_RESPONSE;
   2d1f4:	2002      	movs	r0, #2
   2d1f6:	4770      	bx	lr
   2d1f8:	028aaaaa 	.word	0x028aaaaa
   2d1fc:	01455554 	.word	0x01455554

0002d200 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   2d200:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2d202:	3804      	subs	r0, #4
   2d204:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   2d206:	a901      	add	r1, sp, #4
   2d208:	4802      	ldr	r0, [pc, #8]	; (2d214 <bt_att_released+0x14>)
   2d20a:	f01a fe42 	bl	47e92 <k_mem_slab_free>
}
   2d20e:	b003      	add	sp, #12
   2d210:	f85d fb04 	ldr.w	pc, [sp], #4
   2d214:	20000c4c 	.word	0x20000c4c

0002d218 <tx_meta_data_free>:
{
   2d218:	b510      	push	{r4, lr}
	(void)memset(data, 0, sizeof(*data));
   2d21a:	2100      	movs	r1, #0
{
   2d21c:	4604      	mov	r4, r0
	(void)memset(data, 0, sizeof(*data));
   2d21e:	2214      	movs	r2, #20
   2d220:	f017 f885 	bl	4432e <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   2d224:	4621      	mov	r1, r4
   2d226:	4802      	ldr	r0, [pc, #8]	; (2d230 <tx_meta_data_free+0x18>)
}
   2d228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   2d22c:	f01a bf19 	b.w	48062 <k_queue_append>
   2d230:	20000d54 	.word	0x20000d54

0002d234 <chan_send>:
{
   2d234:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2d238:	4606      	mov	r6, r0
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   2d23a:	f8d1 8014 	ldr.w	r8, [r1, #20]
	hdr = (void *)buf->data;
   2d23e:	688b      	ldr	r3, [r1, #8]
{
   2d240:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   2d242:	3090      	adds	r0, #144	; 0x90
   2d244:	2102      	movs	r1, #2
   2d246:	f018 f994 	bl	45572 <atomic_test_bit>
   2d24a:	2800      	cmp	r0, #0
   2d24c:	d039      	beq.n	2d2c2 <chan_send+0x8e>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   2d24e:	781b      	ldrb	r3, [r3, #0]
   2d250:	2bd2      	cmp	r3, #210	; 0xd2
   2d252:	d110      	bne.n	2d276 <chan_send+0x42>
		err = bt_smp_sign(chan->att->conn, buf);
   2d254:	6833      	ldr	r3, [r6, #0]
   2d256:	4621      	mov	r1, r4
   2d258:	6818      	ldr	r0, [r3, #0]
   2d25a:	f019 fd22 	bl	46ca2 <bt_smp_sign>
		if (err) {
   2d25e:	4605      	mov	r5, r0
   2d260:	b148      	cbz	r0, 2d276 <chan_send+0x42>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   2d262:	6960      	ldr	r0, [r4, #20]
   2d264:	f7ff ffd8 	bl	2d218 <tx_meta_data_free>
			net_buf_unref(buf);
   2d268:	4620      	mov	r0, r4
   2d26a:	f00f f851 	bl	3c310 <net_buf_unref>
}
   2d26e:	4628      	mov	r0, r5
   2d270:	b003      	add	sp, #12
   2d272:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   2d276:	f104 0008 	add.w	r0, r4, #8
   2d27a:	f019 ffdf 	bl	4723c <net_buf_simple_headroom>
	state->len = buf->len;
   2d27e:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	data->att_chan = chan;
   2d282:	f8c8 6000 	str.w	r6, [r8]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   2d286:	6833      	ldr	r3, [r6, #0]
   2d288:	681d      	ldr	r5, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   2d28a:	68a3      	ldr	r3, [r4, #8]
	state->offset = net_buf_simple_headroom(buf);
   2d28c:	4607      	mov	r7, r0
   2d28e:	7818      	ldrb	r0, [r3, #0]
   2d290:	f7ff ff7c 	bl	2d18c <att_op_get_type>
	switch (op_type) {
   2d294:	2805      	cmp	r0, #5
   2d296:	bf96      	itet	ls
   2d298:	4b0b      	ldrls	r3, [pc, #44]	; (2d2c8 <chan_send+0x94>)
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   2d29a:	4b0c      	ldrhi	r3, [pc, #48]	; (2d2cc <chan_send+0x98>)
   2d29c:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   2d2a0:	f8cd 8000 	str.w	r8, [sp]
   2d2a4:	4628      	mov	r0, r5
   2d2a6:	4622      	mov	r2, r4
   2d2a8:	2104      	movs	r1, #4
   2d2aa:	f018 f8c0 	bl	4542e <bt_l2cap_send_cb>
	if (err) {
   2d2ae:	4605      	mov	r5, r0
   2d2b0:	2800      	cmp	r0, #0
   2d2b2:	d0dc      	beq.n	2d26e <chan_send+0x3a>
	buf->data = buf->__buf + state->offset;
   2d2b4:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
   2d2b6:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   2d2ba:	fa13 f787 	uxtah	r7, r3, r7
   2d2be:	60a7      	str	r7, [r4, #8]
}
   2d2c0:	e7d5      	b.n	2d26e <chan_send+0x3a>
		return -EINVAL;
   2d2c2:	f06f 0515 	mvn.w	r5, #21
   2d2c6:	e7d2      	b.n	2d26e <chan_send+0x3a>
   2d2c8:	0004951c 	.word	0x0004951c
   2d2cc:	00045c31 	.word	0x00045c31

0002d2d0 <bt_att_connected>:
{
   2d2d0:	b510      	push	{r4, lr}
   2d2d2:	f100 038c 	add.w	r3, r0, #140	; 0x8c
   2d2d6:	4604      	mov	r4, r0
   2d2d8:	f3bf 8f5b 	dmb	ish
   2d2dc:	e853 1f00 	ldrex	r1, [r3]
   2d2e0:	f041 0104 	orr.w	r1, r1, #4
   2d2e4:	e843 1200 	strex	r2, r1, [r3]
   2d2e8:	2a00      	cmp	r2, #0
   2d2ea:	d1f7      	bne.n	2d2dc <bt_att_connected+0xc>
   2d2ec:	f3bf 8f5b 	dmb	ish
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   2d2f0:	2317      	movs	r3, #23
   2d2f2:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   2d2f4:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   2d2f6:	1f20      	subs	r0, r4, #4
   2d2f8:	f018 fa88 	bl	4580c <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   2d2fc:	f104 00ac 	add.w	r0, r4, #172	; 0xac
   2d300:	4903      	ldr	r1, [pc, #12]	; (2d310 <bt_att_connected+0x40>)
   2d302:	f01a ffc8 	bl	48296 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   2d306:	6820      	ldr	r0, [r4, #0]
}
   2d308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   2d30c:	f001 bd2e 	b.w	2ed6c <bt_gatt_connected>
   2d310:	00045efb 	.word	0x00045efb

0002d314 <read_group_cb>:
{
   2d314:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2d318:	4605      	mov	r5, r0
   2d31a:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2d31c:	f04f 0800 	mov.w	r8, #0
   2d320:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2d324:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   2d326:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2d328:	f88d 8008 	strb.w	r8, [sp, #8]
   2d32c:	a902      	add	r1, sp, #8
{
   2d32e:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2d330:	f8ad 300a 	strh.w	r3, [sp, #10]
   2d334:	f017 f8b1 	bl	4449a <bt_uuid_cmp>
   2d338:	b1a0      	cbz	r0, 2d364 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   2d33a:	f642 0301 	movw	r3, #10241	; 0x2801
   2d33e:	6828      	ldr	r0, [r5, #0]
   2d340:	f88d 800c 	strb.w	r8, [sp, #12]
   2d344:	a903      	add	r1, sp, #12
   2d346:	f8ad 300e 	strh.w	r3, [sp, #14]
   2d34a:	f017 f8a6 	bl	4449a <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2d34e:	b148      	cbz	r0, 2d364 <read_group_cb+0x50>
		if (data->group &&
   2d350:	6923      	ldr	r3, [r4, #16]
   2d352:	b11b      	cbz	r3, 2d35c <read_group_cb+0x48>
   2d354:	885a      	ldrh	r2, [r3, #2]
   2d356:	42b2      	cmp	r2, r6
   2d358:	d200      	bcs.n	2d35c <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   2d35a:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   2d35c:	2001      	movs	r0, #1
}
   2d35e:	b004      	add	sp, #16
   2d360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   2d364:	6861      	ldr	r1, [r4, #4]
   2d366:	6828      	ldr	r0, [r5, #0]
   2d368:	f017 f897 	bl	4449a <bt_uuid_cmp>
   2d36c:	b110      	cbz	r0, 2d374 <read_group_cb+0x60>
		data->group = NULL;
   2d36e:	2300      	movs	r3, #0
   2d370:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   2d372:	e7f3      	b.n	2d35c <read_group_cb+0x48>
	if (data->rsp->len &&
   2d374:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   2d376:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   2d378:	781a      	ldrb	r2, [r3, #0]
   2d37a:	b132      	cbz	r2, 2d38a <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   2d37c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   2d37e:	8981      	ldrh	r1, [r0, #12]
   2d380:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   2d382:	4293      	cmp	r3, r2
   2d384:	da01      	bge.n	2d38a <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   2d386:	2000      	movs	r0, #0
   2d388:	e7e9      	b.n	2d35e <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   2d38a:	2104      	movs	r1, #4
   2d38c:	3008      	adds	r0, #8
   2d38e:	f019 ff1e 	bl	471ce <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   2d392:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   2d394:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   2d396:	6923      	ldr	r3, [r4, #16]
   2d398:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   2d39a:	4b08      	ldr	r3, [pc, #32]	; (2d3bc <read_group_cb+0xa8>)
   2d39c:	9300      	str	r3, [sp, #0]
   2d39e:	9401      	str	r4, [sp, #4]
   2d3a0:	68a2      	ldr	r2, [r4, #8]
   2d3a2:	2300      	movs	r3, #0
   2d3a4:	4629      	mov	r1, r5
   2d3a6:	4638      	mov	r0, r7
   2d3a8:	f018 fa8c 	bl	458c4 <att_chan_read>
	if (read < 0) {
   2d3ac:	2800      	cmp	r0, #0
   2d3ae:	dbea      	blt.n	2d386 <read_group_cb+0x72>
	if (!data->group) {
   2d3b0:	6920      	ldr	r0, [r4, #16]
   2d3b2:	3800      	subs	r0, #0
   2d3b4:	bf18      	it	ne
   2d3b6:	2001      	movne	r0, #1
   2d3b8:	e7d1      	b.n	2d35e <read_group_cb+0x4a>
   2d3ba:	bf00      	nop
   2d3bc:	00045873 	.word	0x00045873

0002d3c0 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   2d3c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   2d3c2:	2300      	movs	r3, #0
{
   2d3c4:	4604      	mov	r4, r0
   2d3c6:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   2d3c8:	4829      	ldr	r0, [pc, #164]	; (2d470 <bt_att_accept+0xb0>)
   2d3ca:	2200      	movs	r2, #0
   2d3cc:	4669      	mov	r1, sp
   2d3ce:	f013 f92f 	bl	40630 <k_mem_slab_alloc>
   2d3d2:	4605      	mov	r5, r0
   2d3d4:	2800      	cmp	r0, #0
   2d3d6:	d143      	bne.n	2d460 <bt_att_accept+0xa0>
	return z_impl_z_current_get();
   2d3d8:	f014 f8ec 	bl	415b4 <z_impl_z_current_get>
		BT_ERR("No available ATT context for conn %p", conn);
		return -ENOMEM;
	}

	att_handle_rsp_thread = k_current_get();
   2d3dc:	4b25      	ldr	r3, [pc, #148]	; (2d474 <bt_att_accept+0xb4>)

	(void)memset(att, 0, sizeof(*att));
   2d3de:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
   2d3e0:	6018      	str	r0, [r3, #0]
	(void)memset(att, 0, sizeof(*att));
   2d3e2:	222c      	movs	r2, #44	; 0x2c
   2d3e4:	9800      	ldr	r0, [sp, #0]
   2d3e6:	f016 ffa2 	bl	4432e <memset>
	att->conn = conn;
   2d3ea:	9b00      	ldr	r3, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   2d3ec:	4822      	ldr	r0, [pc, #136]	; (2d478 <bt_att_accept+0xb8>)
	att->conn = conn;
   2d3ee:	601c      	str	r4, [r3, #0]
	sys_slist_init(&att->reqs);
   2d3f0:	9c00      	ldr	r4, [sp, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2d3f2:	9501      	str	r5, [sp, #4]
	list->tail = NULL;
   2d3f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
   2d3f8:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   2d3fc:	2200      	movs	r2, #0
   2d3fe:	2300      	movs	r3, #0
   2d400:	a901      	add	r1, sp, #4
   2d402:	f013 f915 	bl	40630 <k_mem_slab_alloc>
   2d406:	4605      	mov	r5, r0
   2d408:	bb50      	cbnz	r0, 2d460 <bt_att_accept+0xa0>
	(void)memset(chan, 0, sizeof(*chan));
   2d40a:	4601      	mov	r1, r0
   2d40c:	22e8      	movs	r2, #232	; 0xe8
   2d40e:	9801      	ldr	r0, [sp, #4]
   2d410:	f016 ff8d 	bl	4432e <memset>
	chan->chan.chan.ops = &ops;
   2d414:	9801      	ldr	r0, [sp, #4]
   2d416:	4b19      	ldr	r3, [pc, #100]	; (2d47c <bt_att_accept+0xbc>)
   2d418:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
   2d41a:	3098      	adds	r0, #152	; 0x98
   2d41c:	f01a fdf5 	bl	4800a <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2d420:	9b01      	ldr	r3, [sp, #4]
   2d422:	f3bf 8f5b 	dmb	ish
   2d426:	3390      	adds	r3, #144	; 0x90
   2d428:	e853 2f00 	ldrex	r2, [r3]
   2d42c:	e843 5100 	strex	r1, r5, [r3]
   2d430:	2900      	cmp	r1, #0
   2d432:	d1f9      	bne.n	2d428 <bt_att_accept+0x68>
   2d434:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   2d438:	9b01      	ldr	r3, [sp, #4]
   2d43a:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   2d43c:	6a63      	ldr	r3, [r4, #36]	; 0x24
	att_chan_attach(att, chan);
   2d43e:	9f01      	ldr	r7, [sp, #4]
	if (sys_slist_is_empty(&att->chans)) {
   2d440:	b91b      	cbnz	r3, 2d44a <bt_att_accept+0x8a>
   2d442:	f104 000c 	add.w	r0, r4, #12
   2d446:	f01a fde0 	bl	4800a <z_impl_k_queue_init>
	return list->head;
   2d44a:	6a62      	ldr	r2, [r4, #36]	; 0x24
	parent->next = child;
   2d44c:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
Z_GENLIST_PREPEND(slist, snode)
   2d450:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   2d452:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
	list->head = node;
   2d456:	6263      	str	r3, [r4, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   2d458:	b902      	cbnz	r2, 2d45c <bt_att_accept+0x9c>
	list->tail = node;
   2d45a:	62a3      	str	r3, [r4, #40]	; 0x28
	return chan;
   2d45c:	9b01      	ldr	r3, [sp, #4]
	k_work_init_delayable(&att->eatt.connection_work,
			      att_enhanced_connection_work_handler);
#endif /* CONFIG_BT_EATT */

	chan = att_chan_new(att, 0);
	if (!chan) {
   2d45e:	b923      	cbnz	r3, 2d46a <bt_att_accept+0xaa>
		return -ENOMEM;
   2d460:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   2d464:	4628      	mov	r0, r5
   2d466:	b003      	add	sp, #12
   2d468:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*ch = &chan->chan.chan;
   2d46a:	3304      	adds	r3, #4
   2d46c:	6033      	str	r3, [r6, #0]
	return 0;
   2d46e:	e7f9      	b.n	2d464 <bt_att_accept+0xa4>
   2d470:	20000c30 	.word	0x20000c30
   2d474:	20001e0c 	.word	0x20001e0c
   2d478:	20000c4c 	.word	0x20000c4c
   2d47c:	200003e0 	.word	0x200003e0

0002d480 <read_type_cb>:
{
   2d480:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   2d484:	6817      	ldr	r7, [r2, #0]
{
   2d486:	4605      	mov	r5, r0
   2d488:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   2d48a:	6800      	ldr	r0, [r0, #0]
   2d48c:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   2d48e:	687e      	ldr	r6, [r7, #4]
{
   2d490:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   2d492:	f017 f802 	bl	4449a <bt_uuid_cmp>
   2d496:	4681      	mov	r9, r0
   2d498:	2800      	cmp	r0, #0
   2d49a:	d13c      	bne.n	2d516 <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2d49c:	4630      	mov	r0, r6
   2d49e:	2295      	movs	r2, #149	; 0x95
   2d4a0:	4629      	mov	r1, r5
   2d4a2:	f019 f847 	bl	46534 <bt_gatt_check_perm>
   2d4a6:	4606      	mov	r6, r0
   2d4a8:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2d4aa:	b140      	cbz	r0, 2d4be <read_type_cb+0x3e>
		if (data->rsp->len) {
   2d4ac:	68e3      	ldr	r3, [r4, #12]
   2d4ae:	781b      	ldrb	r3, [r3, #0]
   2d4b0:	b10b      	cbz	r3, 2d4b6 <read_type_cb+0x36>
			data->err = 0x00;
   2d4b2:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   2d4b6:	2000      	movs	r0, #0
}
   2d4b8:	b003      	add	sp, #12
   2d4ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   2d4be:	68a0      	ldr	r0, [r4, #8]
   2d4c0:	f019 fe57 	bl	47172 <net_buf_frag_last>
   2d4c4:	2102      	movs	r1, #2
   2d4c6:	3008      	adds	r0, #8
   2d4c8:	f019 fe81 	bl	471ce <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   2d4cc:	4b13      	ldr	r3, [pc, #76]	; (2d51c <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   2d4ce:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   2d4d0:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   2d4d4:	9300      	str	r3, [sp, #0]
   2d4d6:	9401      	str	r4, [sp, #4]
   2d4d8:	68a2      	ldr	r2, [r4, #8]
   2d4da:	4633      	mov	r3, r6
   2d4dc:	4629      	mov	r1, r5
   2d4de:	4638      	mov	r0, r7
   2d4e0:	f018 f9f0 	bl	458c4 <att_chan_read>
	if (read < 0) {
   2d4e4:	2800      	cmp	r0, #0
   2d4e6:	da07      	bge.n	2d4f8 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   2d4e8:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   2d4ec:	bf26      	itte	cs
   2d4ee:	4240      	negcs	r0, r0
   2d4f0:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   2d4f2:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   2d4f4:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   2d4f6:	e7de      	b.n	2d4b6 <read_type_cb+0x36>
	if (!data->item) {
   2d4f8:	6923      	ldr	r3, [r4, #16]
   2d4fa:	2b00      	cmp	r3, #0
   2d4fc:	d0db      	beq.n	2d4b6 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   2d4fe:	68a0      	ldr	r0, [r4, #8]
   2d500:	f018 f80f 	bl	45522 <net_buf_frags_len>
   2d504:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   2d506:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   2d508:	68e3      	ldr	r3, [r4, #12]
   2d50a:	781b      	ldrb	r3, [r3, #0]
   2d50c:	4298      	cmp	r0, r3
   2d50e:	bf94      	ite	ls
   2d510:	2000      	movls	r0, #0
   2d512:	2001      	movhi	r0, #1
   2d514:	e7d0      	b.n	2d4b8 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   2d516:	2001      	movs	r0, #1
   2d518:	e7ce      	b.n	2d4b8 <read_type_cb+0x38>
   2d51a:	bf00      	nop
   2d51c:	00045533 	.word	0x00045533

0002d520 <bt_att_chan_create_pdu>:
{
   2d520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   2d522:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   2d524:	3201      	adds	r2, #1
   2d526:	429a      	cmp	r2, r3
{
   2d528:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   2d52a:	d81b      	bhi.n	2d564 <bt_att_chan_create_pdu+0x44>
	switch (att_op_get_type(op)) {
   2d52c:	4608      	mov	r0, r1
   2d52e:	f7ff fe2d 	bl	2d18c <att_op_get_type>
   2d532:	2802      	cmp	r0, #2
   2d534:	d019      	beq.n	2d56a <bt_att_chan_create_pdu+0x4a>
   2d536:	2804      	cmp	r0, #4
   2d538:	d017      	beq.n	2d56a <bt_att_chan_create_pdu+0x4a>
		timeout = K_FOREVER;
   2d53a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2d53e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2d542:	2100      	movs	r1, #0
   2d544:	4632      	mov	r2, r6
   2d546:	463b      	mov	r3, r7
   2d548:	4608      	mov	r0, r1
   2d54a:	f017 ff6d 	bl	45428 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   2d54e:	4604      	mov	r4, r0
   2d550:	b140      	cbz	r0, 2d564 <bt_att_chan_create_pdu+0x44>
	return z_impl_k_queue_get(queue, timeout);
   2d552:	480c      	ldr	r0, [pc, #48]	; (2d584 <bt_att_chan_create_pdu+0x64>)
   2d554:	4632      	mov	r2, r6
   2d556:	463b      	mov	r3, r7
   2d558:	f013 fad2 	bl	40b00 <z_impl_k_queue_get>
	if (!data) {
   2d55c:	b948      	cbnz	r0, 2d572 <bt_att_chan_create_pdu+0x52>
		net_buf_unref(buf);
   2d55e:	4620      	mov	r0, r4
   2d560:	f00e fed6 	bl	3c310 <net_buf_unref>
		return NULL;
   2d564:	2400      	movs	r4, #0
}
   2d566:	4620      	mov	r0, r4
   2d568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (att_op_get_type(op)) {
   2d56a:	f44f 2670 	mov.w	r6, #983040	; 0xf0000
   2d56e:	2700      	movs	r7, #0
   2d570:	e7e7      	b.n	2d542 <bt_att_chan_create_pdu+0x22>
	bt_att_tx_meta_data(buf) = data;
   2d572:	6160      	str	r0, [r4, #20]
   2d574:	2101      	movs	r1, #1
   2d576:	f104 0008 	add.w	r0, r4, #8
   2d57a:	f019 fe28 	bl	471ce <net_buf_simple_add>
	hdr->code = op;
   2d57e:	7005      	strb	r5, [r0, #0]
	return buf;
   2d580:	e7f1      	b.n	2d566 <bt_att_chan_create_pdu+0x46>
   2d582:	bf00      	nop
   2d584:	20000d54 	.word	0x20000d54

0002d588 <bt_att_recv>:
{
   2d588:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buf->len < sizeof(*hdr)) {
   2d58c:	898b      	ldrh	r3, [r1, #12]
{
   2d58e:	4605      	mov	r5, r0
   2d590:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   2d592:	2b00      	cmp	r3, #0
   2d594:	d05d      	beq.n	2d652 <bt_att_recv+0xca>
	return net_buf_simple_pull_mem(&buf->b, len);
   2d596:	2101      	movs	r1, #1
   2d598:	f104 0008 	add.w	r0, r4, #8
   2d59c:	f019 fe3e 	bl	4721c <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   2d5a0:	f855 3c04 	ldr.w	r3, [r5, #-4]
   2d5a4:	4680      	mov	r8, r0
   2d5a6:	2b00      	cmp	r3, #0
   2d5a8:	d053      	beq.n	2d652 <bt_att_recv+0xca>
		if (hdr->code == handlers[i].op) {
   2d5aa:	7801      	ldrb	r1, [r0, #0]
   2d5ac:	4e2b      	ldr	r6, [pc, #172]	; (2d65c <bt_att_recv+0xd4>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   2d5ae:	1f2f      	subs	r7, r5, #4
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   2d5b0:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   2d5b2:	f816 2033 	ldrb.w	r2, [r6, r3, lsl #3]
   2d5b6:	428a      	cmp	r2, r1
   2d5b8:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
   2d5bc:	eb06 0bc3 	add.w	fp, r6, r3, lsl #3
   2d5c0:	d11e      	bne.n	2d600 <bt_att_recv+0x78>
		if (handler->type == ATT_REQUEST &&
   2d5c2:	f89b 9002 	ldrb.w	r9, [fp, #2]
   2d5c6:	f1b9 0f01 	cmp.w	r9, #1
   2d5ca:	d129      	bne.n	2d620 <bt_att_recv+0x98>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   2d5cc:	2100      	movs	r1, #0
   2d5ce:	f105 008c 	add.w	r0, r5, #140	; 0x8c
   2d5d2:	f018 fa1d 	bl	45a10 <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   2d5d6:	2800      	cmp	r0, #0
   2d5d8:	d13b      	bne.n	2d652 <bt_att_recv+0xca>
	if (buf->len < handler->expect_len) {
   2d5da:	89a2      	ldrh	r2, [r4, #12]
   2d5dc:	f89b 3001 	ldrb.w	r3, [fp, #1]
   2d5e0:	429a      	cmp	r2, r3
   2d5e2:	d339      	bcc.n	2d658 <bt_att_recv+0xd0>
		err = handler->func(att_chan, buf);
   2d5e4:	4456      	add	r6, sl
   2d5e6:	4621      	mov	r1, r4
   2d5e8:	6873      	ldr	r3, [r6, #4]
   2d5ea:	4638      	mov	r0, r7
   2d5ec:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   2d5ee:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   2d5f2:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   2d5f4:	d12d      	bne.n	2d652 <bt_att_recv+0xca>
   2d5f6:	b360      	cbz	r0, 2d652 <bt_att_recv+0xca>
		send_err_rsp(att_chan, hdr->code, 0, err);
   2d5f8:	f898 1000 	ldrb.w	r1, [r8]
	if (!req) {
   2d5fc:	b349      	cbz	r1, 2d652 <bt_att_recv+0xca>
   2d5fe:	e00a      	b.n	2d616 <bt_att_recv+0x8e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   2d600:	3301      	adds	r3, #1
   2d602:	2b0e      	cmp	r3, #14
   2d604:	d1d5      	bne.n	2d5b2 <bt_att_recv+0x2a>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   2d606:	4608      	mov	r0, r1
   2d608:	f7ff fdc0 	bl	2d18c <att_op_get_type>
   2d60c:	b308      	cbz	r0, 2d652 <bt_att_recv+0xca>
   2d60e:	2805      	cmp	r0, #5
   2d610:	d01f      	beq.n	2d652 <bt_att_recv+0xca>
	if (!req) {
   2d612:	b1f1      	cbz	r1, 2d652 <bt_att_recv+0xca>
   2d614:	2306      	movs	r3, #6
   2d616:	2200      	movs	r2, #0
   2d618:	4638      	mov	r0, r7
   2d61a:	f018 fb77 	bl	45d0c <send_err_rsp.part.0>
   2d61e:	e018      	b.n	2d652 <bt_att_recv+0xca>
		} else if (handler->type == ATT_INDICATION &&
   2d620:	f1b9 0f05 	cmp.w	r9, #5
   2d624:	d00a      	beq.n	2d63c <bt_att_recv+0xb4>
	if (buf->len < handler->expect_len) {
   2d626:	89a2      	ldrh	r2, [r4, #12]
   2d628:	f89b 3001 	ldrb.w	r3, [fp, #1]
   2d62c:	429a      	cmp	r2, r3
   2d62e:	d310      	bcc.n	2d652 <bt_att_recv+0xca>
		err = handler->func(att_chan, buf);
   2d630:	f8db 3004 	ldr.w	r3, [fp, #4]
   2d634:	4621      	mov	r1, r4
   2d636:	4638      	mov	r0, r7
   2d638:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   2d63a:	e00a      	b.n	2d652 <bt_att_recv+0xca>
			   atomic_test_and_set_bit(att_chan->flags,
   2d63c:	2101      	movs	r1, #1
   2d63e:	f105 008c 	add.w	r0, r5, #140	; 0x8c
   2d642:	f018 f9e5 	bl	45a10 <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   2d646:	b920      	cbnz	r0, 2d652 <bt_att_recv+0xca>
	if (buf->len < handler->expect_len) {
   2d648:	f89b 2001 	ldrb.w	r2, [fp, #1]
   2d64c:	89a3      	ldrh	r3, [r4, #12]
   2d64e:	429a      	cmp	r2, r3
   2d650:	d9c8      	bls.n	2d5e4 <bt_att_recv+0x5c>
}
   2d652:	2000      	movs	r0, #0
   2d654:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = BT_ATT_ERR_INVALID_PDU;
   2d658:	2304      	movs	r3, #4
   2d65a:	e7cd      	b.n	2d5f8 <bt_att_recv+0x70>
   2d65c:	00049534 	.word	0x00049534

0002d660 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   2d660:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d662:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   2d664:	6803      	ldr	r3, [r0, #0]
   2d666:	460d      	mov	r5, r1
   2d668:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   2d66a:	b087      	sub	sp, #28
   2d66c:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   2d66e:	bf18      	it	ne
   2d670:	2101      	movne	r1, #1
   2d672:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   2d674:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   2d676:	f019 f855 	bl	46724 <bt_gatt_change_aware>
   2d67a:	b948      	cbnz	r0, 2d690 <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   2d67c:	2105      	movs	r1, #5
   2d67e:	f104 0090 	add.w	r0, r4, #144	; 0x90
   2d682:	f018 f9c5 	bl	45a10 <atomic_test_and_set_bit>
   2d686:	2800      	cmp	r0, #0
   2d688:	d048      	beq.n	2d71c <att_write_rsp.constprop.0+0xbc>
			return 0;
   2d68a:	2000      	movs	r0, #0
}
   2d68c:	b007      	add	sp, #28
   2d68e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   2d690:	2e00      	cmp	r6, #0
   2d692:	d045      	beq.n	2d720 <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   2d694:	2218      	movs	r2, #24
   2d696:	2100      	movs	r1, #0
   2d698:	4668      	mov	r0, sp
   2d69a:	f016 fe48 	bl	4432e <memset>
	if (rsp) {
   2d69e:	bb67      	cbnz	r7, 2d6fa <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   2d6a0:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   2d6a2:	4a20      	ldr	r2, [pc, #128]	; (2d724 <att_write_rsp.constprop.0+0xc4>)
	data.conn = chan->att->conn;
   2d6a4:	681b      	ldr	r3, [r3, #0]
   2d6a6:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   2d6a8:	2300      	movs	r3, #0
   2d6aa:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   2d6ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2d6b0:	9303      	str	r3, [sp, #12]
	data.len = len;
   2d6b2:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   2d6b6:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   2d6ba:	2301      	movs	r3, #1
   2d6bc:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   2d6c0:	4631      	mov	r1, r6
   2d6c2:	466b      	mov	r3, sp
   2d6c4:	4630      	mov	r0, r6
	data.req = req;
   2d6c6:	f88d 5008 	strb.w	r5, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   2d6ca:	f017 ffa6 	bl	4561a <bt_gatt_foreach_attr>
	if (data.err) {
   2d6ce:	f89d 3014 	ldrb.w	r3, [sp, #20]
   2d6d2:	b1e3      	cbz	r3, 2d70e <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   2d6d4:	2f00      	cmp	r7, #0
   2d6d6:	d0d8      	beq.n	2d68a <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   2d6d8:	9b01      	ldr	r3, [sp, #4]
   2d6da:	6958      	ldr	r0, [r3, #20]
   2d6dc:	f7ff fd9c 	bl	2d218 <tx_meta_data_free>
			net_buf_unref(data.buf);
   2d6e0:	9801      	ldr	r0, [sp, #4]
   2d6e2:	f00e fe15 	bl	3c310 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   2d6e6:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   2d6ea:	2d00      	cmp	r5, #0
   2d6ec:	d0cd      	beq.n	2d68a <att_write_rsp.constprop.0+0x2a>
   2d6ee:	4632      	mov	r2, r6
   2d6f0:	4629      	mov	r1, r5
   2d6f2:	4620      	mov	r0, r4
   2d6f4:	f018 fb0a 	bl	45d0c <send_err_rsp.part.0>
   2d6f8:	e7c7      	b.n	2d68a <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   2d6fa:	2200      	movs	r2, #0
   2d6fc:	4639      	mov	r1, r7
   2d6fe:	4620      	mov	r0, r4
   2d700:	f7ff ff0e 	bl	2d520 <bt_att_chan_create_pdu>
   2d704:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   2d706:	2800      	cmp	r0, #0
   2d708:	d1ca      	bne.n	2d6a0 <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   2d70a:	200e      	movs	r0, #14
   2d70c:	e7be      	b.n	2d68c <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   2d70e:	9901      	ldr	r1, [sp, #4]
   2d710:	2900      	cmp	r1, #0
   2d712:	d0ba      	beq.n	2d68a <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   2d714:	4620      	mov	r0, r4
   2d716:	f017 ff8b 	bl	45630 <bt_att_chan_send_rsp>
   2d71a:	e7b6      	b.n	2d68a <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   2d71c:	2012      	movs	r0, #18
   2d71e:	e7b5      	b.n	2d68c <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   2d720:	2001      	movs	r0, #1
   2d722:	e7b3      	b.n	2d68c <att_write_rsp.constprop.0+0x2c>
   2d724:	000455b9 	.word	0x000455b9

0002d728 <att_read_group_req>:
{
   2d728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   2d72c:	898e      	ldrh	r6, [r1, #12]
   2d72e:	3e04      	subs	r6, #4
   2d730:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   2d732:	2e02      	cmp	r6, #2
{
   2d734:	4604      	mov	r4, r0
   2d736:	b08c      	sub	sp, #48	; 0x30
   2d738:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   2d73a:	d001      	beq.n	2d740 <att_read_group_req+0x18>
   2d73c:	2e10      	cmp	r6, #16
   2d73e:	d16a      	bne.n	2d816 <att_read_group_req+0xee>
   2d740:	2104      	movs	r1, #4
   2d742:	3008      	adds	r0, #8
   2d744:	f019 fd6a 	bl	4721c <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   2d748:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   2d74c:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2d74e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   2d750:	1d01      	adds	r1, r0, #4
   2d752:	4632      	mov	r2, r6
   2d754:	4640      	mov	r0, r8
   2d756:	f016 fece 	bl	444f6 <bt_uuid_create>
   2d75a:	2800      	cmp	r0, #0
   2d75c:	d05d      	beq.n	2d81a <att_read_group_req+0xf2>
	if (!start || !end) {
   2d75e:	2d00      	cmp	r5, #0
   2d760:	d03a      	beq.n	2d7d8 <att_read_group_req+0xb0>
   2d762:	2600      	movs	r6, #0
   2d764:	2f00      	cmp	r7, #0
   2d766:	d036      	beq.n	2d7d6 <att_read_group_req+0xae>
	if (start > end) {
   2d768:	42bd      	cmp	r5, r7
   2d76a:	d835      	bhi.n	2d7d8 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   2d76c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2d770:	a901      	add	r1, sp, #4
   2d772:	4640      	mov	r0, r8
   2d774:	f88d 6004 	strb.w	r6, [sp, #4]
   2d778:	f8ad 3006 	strh.w	r3, [sp, #6]
   2d77c:	f016 fe8d 	bl	4449a <bt_uuid_cmp>
   2d780:	bb70      	cbnz	r0, 2d7e0 <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   2d782:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   2d784:	2214      	movs	r2, #20
   2d786:	2100      	movs	r1, #0
   2d788:	a807      	add	r0, sp, #28
   2d78a:	f016 fdd0 	bl	4432e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   2d78e:	2201      	movs	r2, #1
   2d790:	2111      	movs	r1, #17
   2d792:	4630      	mov	r0, r6
   2d794:	f018 fafd 	bl	45d92 <bt_att_create_pdu>
   2d798:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   2d79a:	2800      	cmp	r0, #0
   2d79c:	d03d      	beq.n	2d81a <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   2d79e:	2101      	movs	r1, #1
   2d7a0:	3008      	adds	r0, #8
	data.uuid = uuid;
   2d7a2:	e9cd 4807 	strd	r4, r8, [sp, #28]
   2d7a6:	f019 fd12 	bl	471ce <net_buf_simple_add>
	data.rsp->len = 0U;
   2d7aa:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   2d7ac:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   2d7ae:	4a1c      	ldr	r2, [pc, #112]	; (2d820 <att_read_group_req+0xf8>)
	data.rsp->len = 0U;
   2d7b0:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   2d7b2:	4639      	mov	r1, r7
	data.group = NULL;
   2d7b4:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   2d7b6:	4628      	mov	r0, r5
   2d7b8:	ab07      	add	r3, sp, #28
   2d7ba:	f017 ff2e 	bl	4561a <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   2d7be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d7c0:	781b      	ldrb	r3, [r3, #0]
   2d7c2:	bb1b      	cbnz	r3, 2d80c <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   2d7c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2d7c6:	6958      	ldr	r0, [r3, #20]
   2d7c8:	f7ff fd26 	bl	2d218 <tx_meta_data_free>
		net_buf_unref(data.buf);
   2d7cc:	9809      	ldr	r0, [sp, #36]	; 0x24
   2d7ce:	f00e fd9f 	bl	3c310 <net_buf_unref>
	if (!req) {
   2d7d2:	230a      	movs	r3, #10
   2d7d4:	e001      	b.n	2d7da <att_read_group_req+0xb2>
			*err = 0U;
   2d7d6:	463d      	mov	r5, r7
	if (!req) {
   2d7d8:	2301      	movs	r3, #1
   2d7da:	462a      	mov	r2, r5
   2d7dc:	2110      	movs	r1, #16
   2d7de:	e00e      	b.n	2d7fe <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   2d7e0:	f642 0301 	movw	r3, #10241	; 0x2801
   2d7e4:	a907      	add	r1, sp, #28
   2d7e6:	4640      	mov	r0, r8
   2d7e8:	f88d 601c 	strb.w	r6, [sp, #28]
   2d7ec:	f8ad 301e 	strh.w	r3, [sp, #30]
   2d7f0:	f016 fe53 	bl	4449a <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   2d7f4:	2800      	cmp	r0, #0
   2d7f6:	d0c4      	beq.n	2d782 <att_read_group_req+0x5a>
	if (!req) {
   2d7f8:	2310      	movs	r3, #16
   2d7fa:	462a      	mov	r2, r5
   2d7fc:	4619      	mov	r1, r3
   2d7fe:	4620      	mov	r0, r4
   2d800:	f018 fa84 	bl	45d0c <send_err_rsp.part.0>
		return 0;
   2d804:	2000      	movs	r0, #0
}
   2d806:	b00c      	add	sp, #48	; 0x30
   2d808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   2d80c:	9909      	ldr	r1, [sp, #36]	; 0x24
   2d80e:	4620      	mov	r0, r4
   2d810:	f017 ff0e 	bl	45630 <bt_att_chan_send_rsp>
	return 0;
   2d814:	e7f6      	b.n	2d804 <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   2d816:	2004      	movs	r0, #4
   2d818:	e7f5      	b.n	2d806 <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   2d81a:	200e      	movs	r0, #14
   2d81c:	e7f3      	b.n	2d806 <att_read_group_req+0xde>
   2d81e:	bf00      	nop
   2d820:	0002d315 	.word	0x0002d315

0002d824 <att_read_mult_vl_req>:
{
   2d824:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   2d828:	6846      	ldr	r6, [r0, #4]
{
   2d82a:	b085      	sub	sp, #20
   2d82c:	4604      	mov	r4, r0
   2d82e:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   2d830:	4630      	mov	r0, r6
   2d832:	2101      	movs	r1, #1
   2d834:	f018 ff76 	bl	46724 <bt_gatt_change_aware>
   2d838:	b950      	cbnz	r0, 2d850 <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   2d83a:	2105      	movs	r1, #5
   2d83c:	f104 0090 	add.w	r0, r4, #144	; 0x90
   2d840:	f018 f8e6 	bl	45a10 <atomic_test_and_set_bit>
   2d844:	2800      	cmp	r0, #0
   2d846:	d13b      	bne.n	2d8c0 <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   2d848:	2012      	movs	r0, #18
}
   2d84a:	b005      	add	sp, #20
   2d84c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   2d850:	2210      	movs	r2, #16
   2d852:	2100      	movs	r1, #0
   2d854:	4668      	mov	r0, sp
   2d856:	f016 fd6a 	bl	4432e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   2d85a:	2200      	movs	r2, #0
   2d85c:	2121      	movs	r1, #33	; 0x21
   2d85e:	4630      	mov	r0, r6
   2d860:	f018 fa97 	bl	45d92 <bt_att_create_pdu>
   2d864:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   2d866:	b368      	cbz	r0, 2d8c4 <att_read_mult_vl_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   2d868:	f8df 905c 	ldr.w	r9, [pc, #92]	; 2d8c8 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   2d86c:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   2d86e:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   2d872:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   2d876:	89ab      	ldrh	r3, [r5, #12]
   2d878:	2b01      	cmp	r3, #1
   2d87a:	d804      	bhi.n	2d886 <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   2d87c:	9902      	ldr	r1, [sp, #8]
   2d87e:	4620      	mov	r0, r4
   2d880:	f017 fed6 	bl	45630 <bt_att_chan_send_rsp>
	return 0;
   2d884:	e01c      	b.n	2d8c0 <att_read_mult_vl_req+0x9c>
   2d886:	4638      	mov	r0, r7
   2d888:	f019 fcd0 	bl	4722c <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   2d88c:	466b      	mov	r3, sp
   2d88e:	464a      	mov	r2, r9
   2d890:	4601      	mov	r1, r0
   2d892:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   2d894:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   2d898:	f017 febf 	bl	4561a <bt_gatt_foreach_attr>
		if (data.err) {
   2d89c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2d8a0:	2b00      	cmp	r3, #0
   2d8a2:	d0e8      	beq.n	2d876 <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   2d8a4:	9b02      	ldr	r3, [sp, #8]
   2d8a6:	6958      	ldr	r0, [r3, #20]
   2d8a8:	f7ff fcb6 	bl	2d218 <tx_meta_data_free>
			net_buf_unref(data.buf);
   2d8ac:	9802      	ldr	r0, [sp, #8]
   2d8ae:	f00e fd2f 	bl	3c310 <net_buf_unref>
	if (!req) {
   2d8b2:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2d8b6:	4632      	mov	r2, r6
   2d8b8:	2120      	movs	r1, #32
   2d8ba:	4620      	mov	r0, r4
   2d8bc:	f018 fa26 	bl	45d0c <send_err_rsp.part.0>
			return 0;
   2d8c0:	2000      	movs	r0, #0
   2d8c2:	e7c2      	b.n	2d84a <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   2d8c4:	200e      	movs	r0, #14
   2d8c6:	e7c0      	b.n	2d84a <att_read_mult_vl_req+0x26>
   2d8c8:	00045a81 	.word	0x00045a81

0002d8cc <att_read_mult_req>:
{
   2d8cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   2d8d0:	6846      	ldr	r6, [r0, #4]
{
   2d8d2:	b085      	sub	sp, #20
   2d8d4:	4604      	mov	r4, r0
   2d8d6:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   2d8d8:	4630      	mov	r0, r6
   2d8da:	2101      	movs	r1, #1
   2d8dc:	f018 ff22 	bl	46724 <bt_gatt_change_aware>
   2d8e0:	b950      	cbnz	r0, 2d8f8 <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   2d8e2:	2105      	movs	r1, #5
   2d8e4:	f104 0090 	add.w	r0, r4, #144	; 0x90
   2d8e8:	f018 f892 	bl	45a10 <atomic_test_and_set_bit>
   2d8ec:	2800      	cmp	r0, #0
   2d8ee:	d13b      	bne.n	2d968 <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   2d8f0:	2012      	movs	r0, #18
}
   2d8f2:	b005      	add	sp, #20
   2d8f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   2d8f8:	2210      	movs	r2, #16
   2d8fa:	2100      	movs	r1, #0
   2d8fc:	4668      	mov	r0, sp
   2d8fe:	f016 fd16 	bl	4432e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   2d902:	2200      	movs	r2, #0
   2d904:	210f      	movs	r1, #15
   2d906:	4630      	mov	r0, r6
   2d908:	f018 fa43 	bl	45d92 <bt_att_create_pdu>
   2d90c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   2d90e:	b368      	cbz	r0, 2d96c <att_read_mult_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   2d910:	f8df 905c 	ldr.w	r9, [pc, #92]	; 2d970 <att_read_mult_req+0xa4>
	data.chan = chan;
   2d914:	9400      	str	r4, [sp, #0]
   2d916:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   2d91a:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   2d91e:	89ab      	ldrh	r3, [r5, #12]
   2d920:	2b01      	cmp	r3, #1
   2d922:	d804      	bhi.n	2d92e <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   2d924:	9902      	ldr	r1, [sp, #8]
   2d926:	4620      	mov	r0, r4
   2d928:	f017 fe82 	bl	45630 <bt_att_chan_send_rsp>
	return 0;
   2d92c:	e01c      	b.n	2d968 <att_read_mult_req+0x9c>
   2d92e:	4638      	mov	r0, r7
   2d930:	f019 fc7c 	bl	4722c <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   2d934:	466b      	mov	r3, sp
   2d936:	464a      	mov	r2, r9
   2d938:	4601      	mov	r1, r0
   2d93a:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   2d93c:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   2d940:	f017 fe6b 	bl	4561a <bt_gatt_foreach_attr>
		if (data.err) {
   2d944:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2d948:	2b00      	cmp	r3, #0
   2d94a:	d0e8      	beq.n	2d91e <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   2d94c:	9b02      	ldr	r3, [sp, #8]
   2d94e:	6958      	ldr	r0, [r3, #20]
   2d950:	f7ff fc62 	bl	2d218 <tx_meta_data_free>
			net_buf_unref(data.buf);
   2d954:	9802      	ldr	r0, [sp, #8]
   2d956:	f00e fcdb 	bl	3c310 <net_buf_unref>
	if (!req) {
   2d95a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2d95e:	4632      	mov	r2, r6
   2d960:	210e      	movs	r1, #14
   2d962:	4620      	mov	r0, r4
   2d964:	f018 f9d2 	bl	45d0c <send_err_rsp.part.0>
			return 0;
   2d968:	2000      	movs	r0, #0
   2d96a:	e7c2      	b.n	2d8f2 <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   2d96c:	200e      	movs	r0, #14
   2d96e:	e7c0      	b.n	2d8f2 <att_read_mult_req+0x26>
   2d970:	00045a3b 	.word	0x00045a3b

0002d974 <att_read_rsp>:
{
   2d974:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   2d978:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   2d97c:	4604      	mov	r4, r0
   2d97e:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   2d980:	4640      	mov	r0, r8
   2d982:	2101      	movs	r1, #1
{
   2d984:	4617      	mov	r7, r2
   2d986:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   2d988:	f018 fecc 	bl	46724 <bt_gatt_change_aware>
   2d98c:	b948      	cbnz	r0, 2d9a2 <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   2d98e:	2105      	movs	r1, #5
   2d990:	f104 0090 	add.w	r0, r4, #144	; 0x90
   2d994:	f018 f83c 	bl	45a10 <atomic_test_and_set_bit>
   2d998:	bb78      	cbnz	r0, 2d9fa <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   2d99a:	2012      	movs	r0, #18
}
   2d99c:	b004      	add	sp, #16
   2d99e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   2d9a2:	b38d      	cbz	r5, 2da08 <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   2d9a4:	2210      	movs	r2, #16
   2d9a6:	2100      	movs	r1, #0
   2d9a8:	4668      	mov	r0, sp
   2d9aa:	f016 fcc0 	bl	4432e <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   2d9ae:	2200      	movs	r2, #0
   2d9b0:	4639      	mov	r1, r7
   2d9b2:	4640      	mov	r0, r8
   2d9b4:	f018 f9ed 	bl	45d92 <bt_att_create_pdu>
   2d9b8:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   2d9ba:	b338      	cbz	r0, 2da0c <att_read_rsp+0x98>
	data.offset = offset;
   2d9bc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   2d9c0:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   2d9c4:	2301      	movs	r3, #1
   2d9c6:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   2d9ca:	4a11      	ldr	r2, [pc, #68]	; (2da10 <att_read_rsp+0x9c>)
	data.chan = chan;
   2d9cc:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   2d9ce:	466b      	mov	r3, sp
   2d9d0:	4629      	mov	r1, r5
   2d9d2:	4628      	mov	r0, r5
   2d9d4:	f017 fe21 	bl	4561a <bt_gatt_foreach_attr>
	if (data.err) {
   2d9d8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2d9dc:	b17b      	cbz	r3, 2d9fe <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   2d9de:	9b02      	ldr	r3, [sp, #8]
   2d9e0:	6958      	ldr	r0, [r3, #20]
   2d9e2:	f7ff fc19 	bl	2d218 <tx_meta_data_free>
		net_buf_unref(data.buf);
   2d9e6:	9802      	ldr	r0, [sp, #8]
   2d9e8:	f00e fc92 	bl	3c310 <net_buf_unref>
	if (!req) {
   2d9ec:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2d9f0:	462a      	mov	r2, r5
   2d9f2:	4631      	mov	r1, r6
   2d9f4:	4620      	mov	r0, r4
   2d9f6:	f018 f989 	bl	45d0c <send_err_rsp.part.0>
			return 0;
   2d9fa:	2000      	movs	r0, #0
   2d9fc:	e7ce      	b.n	2d99c <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   2d9fe:	9902      	ldr	r1, [sp, #8]
   2da00:	4620      	mov	r0, r4
   2da02:	f017 fe15 	bl	45630 <bt_att_chan_send_rsp>
	return 0;
   2da06:	e7f8      	b.n	2d9fa <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   2da08:	2001      	movs	r0, #1
   2da0a:	e7c7      	b.n	2d99c <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   2da0c:	200e      	movs	r0, #14
   2da0e:	e7c5      	b.n	2d99c <att_read_rsp+0x28>
   2da10:	00045a3b 	.word	0x00045a3b

0002da14 <att_read_type_req>:
{
   2da14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   2da18:	898d      	ldrh	r5, [r1, #12]
   2da1a:	3d04      	subs	r5, #4
   2da1c:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   2da1e:	2d02      	cmp	r5, #2
{
   2da20:	4604      	mov	r4, r0
   2da22:	b08c      	sub	sp, #48	; 0x30
   2da24:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   2da26:	d001      	beq.n	2da2c <att_read_type_req+0x18>
   2da28:	2d10      	cmp	r5, #16
   2da2a:	d150      	bne.n	2dace <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   2da2c:	2104      	movs	r1, #4
   2da2e:	3008      	adds	r0, #8
   2da30:	f019 fbf4 	bl	4721c <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   2da34:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   2da38:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2da3a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   2da3c:	1d01      	adds	r1, r0, #4
   2da3e:	462a      	mov	r2, r5
   2da40:	4640      	mov	r0, r8
   2da42:	f016 fd58 	bl	444f6 <bt_uuid_create>
   2da46:	b188      	cbz	r0, 2da6c <att_read_type_req+0x58>
	if (!start || !end) {
   2da48:	b19e      	cbz	r6, 2da72 <att_read_type_req+0x5e>
   2da4a:	b18f      	cbz	r7, 2da70 <att_read_type_req+0x5c>
	if (start > end) {
   2da4c:	42b7      	cmp	r7, r6
   2da4e:	d310      	bcc.n	2da72 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   2da50:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   2da52:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   2da54:	2100      	movs	r1, #0
   2da56:	eb0d 0002 	add.w	r0, sp, r2
   2da5a:	f016 fc68 	bl	4432e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   2da5e:	2201      	movs	r2, #1
   2da60:	2109      	movs	r1, #9
   2da62:	4628      	mov	r0, r5
   2da64:	f018 f995 	bl	45d92 <bt_att_create_pdu>
   2da68:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   2da6a:	b960      	cbnz	r0, 2da86 <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   2da6c:	200e      	movs	r0, #14
   2da6e:	e007      	b.n	2da80 <att_read_type_req+0x6c>
			*err = 0U;
   2da70:	463e      	mov	r6, r7
	if (!req) {
   2da72:	2301      	movs	r3, #1
   2da74:	4632      	mov	r2, r6
   2da76:	2108      	movs	r1, #8
   2da78:	4620      	mov	r0, r4
   2da7a:	f018 f947 	bl	45d0c <send_err_rsp.part.0>
		return 0;
   2da7e:	2000      	movs	r0, #0
}
   2da80:	b00c      	add	sp, #48	; 0x30
   2da82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   2da86:	2101      	movs	r1, #1
   2da88:	3008      	adds	r0, #8
	data.uuid = uuid;
   2da8a:	e9cd 4806 	strd	r4, r8, [sp, #24]
   2da8e:	f019 fb9e 	bl	471ce <net_buf_simple_add>
	data.rsp->len = 0U;
   2da92:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   2da94:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   2da96:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   2da98:	230a      	movs	r3, #10
   2da9a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   2da9e:	4a0d      	ldr	r2, [pc, #52]	; (2dad4 <att_read_type_req+0xc0>)
   2daa0:	ab06      	add	r3, sp, #24
   2daa2:	4639      	mov	r1, r7
   2daa4:	4630      	mov	r0, r6
   2daa6:	f017 fdb8 	bl	4561a <bt_gatt_foreach_attr>
	if (data.err) {
   2daaa:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   2daae:	b14b      	cbz	r3, 2dac4 <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   2dab0:	9b08      	ldr	r3, [sp, #32]
   2dab2:	6958      	ldr	r0, [r3, #20]
   2dab4:	f7ff fbb0 	bl	2d218 <tx_meta_data_free>
		net_buf_unref(data.buf);
   2dab8:	9808      	ldr	r0, [sp, #32]
   2daba:	f00e fc29 	bl	3c310 <net_buf_unref>
	if (!req) {
   2dabe:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   2dac2:	e7d7      	b.n	2da74 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   2dac4:	9908      	ldr	r1, [sp, #32]
   2dac6:	4620      	mov	r0, r4
   2dac8:	f017 fdb2 	bl	45630 <bt_att_chan_send_rsp>
	return 0;
   2dacc:	e7d7      	b.n	2da7e <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   2dace:	2004      	movs	r0, #4
   2dad0:	e7d6      	b.n	2da80 <att_read_type_req+0x6c>
   2dad2:	bf00      	nop
   2dad4:	0002d481 	.word	0x0002d481

0002dad8 <att_find_type_req>:
{
   2dad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2dadc:	460f      	mov	r7, r1
   2dade:	b086      	sub	sp, #24
   2dae0:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   2dae2:	2106      	movs	r1, #6
   2dae4:	f107 0008 	add.w	r0, r7, #8
   2dae8:	f019 fb98 	bl	4721c <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   2daec:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2daee:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   2daf2:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   2daf4:	f8d7 9008 	ldr.w	r9, [r7, #8]
	if (!start || !end) {
   2daf8:	b1c5      	cbz	r5, 2db2c <att_find_type_req+0x54>
   2dafa:	2300      	movs	r3, #0
   2dafc:	f1b8 0f00 	cmp.w	r8, #0
   2db00:	d013      	beq.n	2db2a <att_find_type_req+0x52>
	if (start > end) {
   2db02:	4545      	cmp	r5, r8
   2db04:	d812      	bhi.n	2db2c <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   2db06:	f88d 3000 	strb.w	r3, [sp]
   2db0a:	f88d 3004 	strb.w	r3, [sp, #4]
   2db0e:	a901      	add	r1, sp, #4
   2db10:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2db14:	4668      	mov	r0, sp
   2db16:	f8ad 2002 	strh.w	r2, [sp, #2]
   2db1a:	f8ad 3006 	strh.w	r3, [sp, #6]
   2db1e:	f016 fcbc 	bl	4449a <bt_uuid_cmp>
   2db22:	4606      	mov	r6, r0
   2db24:	b160      	cbz	r0, 2db40 <att_find_type_req+0x68>
	if (!req) {
   2db26:	230a      	movs	r3, #10
   2db28:	e001      	b.n	2db2e <att_find_type_req+0x56>
			*err = 0U;
   2db2a:	4645      	mov	r5, r8
	if (!req) {
   2db2c:	2301      	movs	r3, #1
   2db2e:	462a      	mov	r2, r5
   2db30:	2106      	movs	r1, #6
   2db32:	4620      	mov	r0, r4
   2db34:	f018 f8ea 	bl	45d0c <send_err_rsp.part.0>
		return 0;
   2db38:	2000      	movs	r0, #0
}
   2db3a:	b006      	add	sp, #24
   2db3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   2db40:	f8d4 a004 	ldr.w	sl, [r4, #4]
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   2db44:	7b3f      	ldrb	r7, [r7, #12]
	(void)memset(&data, 0, sizeof(data));
   2db46:	4601      	mov	r1, r0
   2db48:	2214      	movs	r2, #20
   2db4a:	a801      	add	r0, sp, #4
   2db4c:	f016 fbef 	bl	4432e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   2db50:	4632      	mov	r2, r6
   2db52:	2107      	movs	r1, #7
   2db54:	4650      	mov	r0, sl
   2db56:	f018 f91c 	bl	45d92 <bt_att_create_pdu>
   2db5a:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   2db5c:	b1f8      	cbz	r0, 2db9e <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   2db5e:	230a      	movs	r3, #10
   2db60:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   2db64:	4a0f      	ldr	r2, [pc, #60]	; (2dba4 <att_find_type_req+0xcc>)
	data.chan = chan;
   2db66:	9401      	str	r4, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   2db68:	ab01      	add	r3, sp, #4
   2db6a:	4641      	mov	r1, r8
   2db6c:	4628      	mov	r0, r5
	data.value = value;
   2db6e:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.value_len = value_len;
   2db72:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   2db76:	f017 fd50 	bl	4561a <bt_gatt_foreach_attr>
	if (data.err) {
   2db7a:	f89d 3015 	ldrb.w	r3, [sp, #21]
   2db7e:	b14b      	cbz	r3, 2db94 <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   2db80:	9b02      	ldr	r3, [sp, #8]
   2db82:	6958      	ldr	r0, [r3, #20]
   2db84:	f7ff fb48 	bl	2d218 <tx_meta_data_free>
		net_buf_unref(data.buf);
   2db88:	9802      	ldr	r0, [sp, #8]
   2db8a:	f00e fbc1 	bl	3c310 <net_buf_unref>
	if (!req) {
   2db8e:	f89d 3015 	ldrb.w	r3, [sp, #21]
   2db92:	e7cc      	b.n	2db2e <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   2db94:	9902      	ldr	r1, [sp, #8]
   2db96:	4620      	mov	r0, r4
   2db98:	f017 fd4a 	bl	45630 <bt_att_chan_send_rsp>
	return 0;
   2db9c:	e7cc      	b.n	2db38 <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   2db9e:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   2dba0:	e7cb      	b.n	2db3a <att_find_type_req+0x62>
   2dba2:	bf00      	nop
   2dba4:	0004564d 	.word	0x0004564d

0002dba8 <att_find_info_req>:
{
   2dba8:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   2dbaa:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   2dbac:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2dbae:	885e      	ldrh	r6, [r3, #2]
{
   2dbb0:	b085      	sub	sp, #20
   2dbb2:	4604      	mov	r4, r0
	if (!start || !end) {
   2dbb4:	b195      	cbz	r5, 2dbdc <att_find_info_req+0x34>
   2dbb6:	b186      	cbz	r6, 2dbda <att_find_info_req+0x32>
	if (start > end) {
   2dbb8:	42b5      	cmp	r5, r6
   2dbba:	d80f      	bhi.n	2dbdc <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   2dbbc:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   2dbbe:	2210      	movs	r2, #16
   2dbc0:	2100      	movs	r1, #0
   2dbc2:	4668      	mov	r0, sp
   2dbc4:	f016 fbb3 	bl	4432e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   2dbc8:	2200      	movs	r2, #0
   2dbca:	2105      	movs	r1, #5
   2dbcc:	4638      	mov	r0, r7
   2dbce:	f018 f8e0 	bl	45d92 <bt_att_create_pdu>
   2dbd2:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   2dbd4:	b958      	cbnz	r0, 2dbee <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   2dbd6:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   2dbd8:	e007      	b.n	2dbea <att_find_info_req+0x42>
			*err = 0U;
   2dbda:	4635      	mov	r5, r6
	if (!req) {
   2dbdc:	2301      	movs	r3, #1
   2dbde:	462a      	mov	r2, r5
   2dbe0:	2104      	movs	r1, #4
   2dbe2:	4620      	mov	r0, r4
   2dbe4:	f018 f892 	bl	45d0c <send_err_rsp.part.0>
		return 0;
   2dbe8:	2000      	movs	r0, #0
}
   2dbea:	b005      	add	sp, #20
   2dbec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   2dbee:	466b      	mov	r3, sp
   2dbf0:	4a0a      	ldr	r2, [pc, #40]	; (2dc1c <att_find_info_req+0x74>)
	data.chan = chan;
   2dbf2:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   2dbf4:	4631      	mov	r1, r6
   2dbf6:	4628      	mov	r0, r5
   2dbf8:	f017 fd0f 	bl	4561a <bt_gatt_foreach_attr>
	if (!data.rsp) {
   2dbfc:	9b02      	ldr	r3, [sp, #8]
   2dbfe:	b943      	cbnz	r3, 2dc12 <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   2dc00:	9b01      	ldr	r3, [sp, #4]
   2dc02:	6958      	ldr	r0, [r3, #20]
   2dc04:	f7ff fb08 	bl	2d218 <tx_meta_data_free>
		net_buf_unref(data.buf);
   2dc08:	9801      	ldr	r0, [sp, #4]
   2dc0a:	f00e fb81 	bl	3c310 <net_buf_unref>
	if (!req) {
   2dc0e:	230a      	movs	r3, #10
   2dc10:	e7e5      	b.n	2dbde <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   2dc12:	9901      	ldr	r1, [sp, #4]
   2dc14:	4620      	mov	r0, r4
   2dc16:	f017 fd0b 	bl	45630 <bt_att_chan_send_rsp>
	return 0;
   2dc1a:	e7e5      	b.n	2dbe8 <att_find_info_req+0x40>
   2dc1c:	00045775 	.word	0x00045775

0002dc20 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   2dc20:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   2dc22:	4d0a      	ldr	r5, [pc, #40]	; (2dc4c <bt_att_init+0x2c>)
   2dc24:	4c0a      	ldr	r4, [pc, #40]	; (2dc50 <bt_att_init+0x30>)
   2dc26:	4629      	mov	r1, r5
   2dc28:	4620      	mov	r0, r4
   2dc2a:	f01a fa1a 	bl	48062 <k_queue_append>
   2dc2e:	f105 0114 	add.w	r1, r5, #20
   2dc32:	4620      	mov	r0, r4
   2dc34:	f01a fa15 	bl	48062 <k_queue_append>
   2dc38:	f105 0128 	add.w	r1, r5, #40	; 0x28
   2dc3c:	4620      	mov	r0, r4
   2dc3e:	f01a fa10 	bl	48062 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   2dc42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   2dc46:	f000 bbfd 	b.w	2e444 <bt_gatt_init>
   2dc4a:	bf00      	nop
   2dc4c:	20001dd0 	.word	0x20001dd0
   2dc50:	20000d54 	.word	0x20000d54

0002dc54 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   2dc54:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   2dc56:	2300      	movs	r3, #0
{
   2dc58:	4605      	mov	r5, r0
   2dc5a:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   2dc5c:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   2dc5e:	f013 fca9 	bl	415b4 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   2dc62:	4b0b      	ldr	r3, [pc, #44]	; (2dc90 <bt_att_req_alloc+0x3c>)
   2dc64:	681b      	ldr	r3, [r3, #0]
   2dc66:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   2dc68:	bf04      	itt	eq
   2dc6a:	2500      	moveq	r5, #0
   2dc6c:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   2dc6e:	a901      	add	r1, sp, #4
   2dc70:	4808      	ldr	r0, [pc, #32]	; (2dc94 <bt_att_req_alloc+0x40>)
   2dc72:	462a      	mov	r2, r5
   2dc74:	4623      	mov	r3, r4
   2dc76:	f012 fcdb 	bl	40630 <k_mem_slab_alloc>
   2dc7a:	4601      	mov	r1, r0
   2dc7c:	b930      	cbnz	r0, 2dc8c <bt_att_req_alloc+0x38>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   2dc7e:	9801      	ldr	r0, [sp, #4]
   2dc80:	221c      	movs	r2, #28
   2dc82:	f016 fb54 	bl	4432e <memset>

	return req;
   2dc86:	9801      	ldr	r0, [sp, #4]
}
   2dc88:	b003      	add	sp, #12
   2dc8a:	bd30      	pop	{r4, r5, pc}
		return NULL;
   2dc8c:	2000      	movs	r0, #0
   2dc8e:	e7fb      	b.n	2dc88 <bt_att_req_alloc+0x34>
   2dc90:	20001e0c 	.word	0x20001e0c
   2dc94:	20000c84 	.word	0x20000c84

0002dc98 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   2dc98:	b507      	push	{r0, r1, r2, lr}
	BT_DBG("req %p", req);

	if (req->buf) {
   2dc9a:	6883      	ldr	r3, [r0, #8]
{
   2dc9c:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   2dc9e:	b14b      	cbz	r3, 2dcb4 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   2dca0:	6958      	ldr	r0, [r3, #20]
   2dca2:	f7ff fab9 	bl	2d218 <tx_meta_data_free>
		net_buf_unref(req->buf);
   2dca6:	9b01      	ldr	r3, [sp, #4]
   2dca8:	6898      	ldr	r0, [r3, #8]
   2dcaa:	f00e fb31 	bl	3c310 <net_buf_unref>
		req->buf = NULL;
   2dcae:	9b01      	ldr	r3, [sp, #4]
   2dcb0:	2200      	movs	r2, #0
   2dcb2:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   2dcb4:	4803      	ldr	r0, [pc, #12]	; (2dcc4 <bt_att_req_free+0x2c>)
   2dcb6:	a901      	add	r1, sp, #4
   2dcb8:	f01a f8eb 	bl	47e92 <k_mem_slab_free>
}
   2dcbc:	b003      	add	sp, #12
   2dcbe:	f85d fb04 	ldr.w	pc, [sp], #4
   2dcc2:	bf00      	nop
   2dcc4:	20000c84 	.word	0x20000c84

0002dcc8 <att_handle_rsp>:
{
   2dcc8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   2dccc:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   2dcce:	30b0      	adds	r0, #176	; 0xb0
{
   2dcd0:	460e      	mov	r6, r1
   2dcd2:	4617      	mov	r7, r2
   2dcd4:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
   2dcd6:	f01a faec 	bl	482b2 <k_work_cancel_delayable>
	if (!chan->req) {
   2dcda:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   2dcde:	b930      	cbnz	r0, 2dcee <att_handle_rsp+0x26>
	att_req_send_process(chan->att);
   2dce0:	6820      	ldr	r0, [r4, #0]
   2dce2:	f017 ff39 	bl	45b58 <att_req_send_process>
}
   2dce6:	2000      	movs	r0, #0
   2dce8:	b002      	add	sp, #8
   2dcea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   2dcee:	4b11      	ldr	r3, [pc, #68]	; (2dd34 <att_handle_rsp+0x6c>)
   2dcf0:	4298      	cmp	r0, r3
   2dcf2:	f04f 0800 	mov.w	r8, #0
   2dcf6:	d102      	bne.n	2dcfe <att_handle_rsp+0x36>
		chan->req = NULL;
   2dcf8:	f8c4 8094 	str.w	r8, [r4, #148]	; 0x94
   2dcfc:	e7f0      	b.n	2dce0 <att_handle_rsp+0x18>
	func = chan->req->func;
   2dcfe:	f8d0 9004 	ldr.w	r9, [r0, #4]
	chan->req->func = NULL;
   2dd02:	f8c0 8004 	str.w	r8, [r0, #4]
	params = chan->req->user_data;
   2dd06:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   2dd0a:	f8d0 a018 	ldr.w	sl, [r0, #24]
	bt_att_req_free(chan->req);
   2dd0e:	f7ff ffc3 	bl	2dc98 <bt_att_req_free>
	att_req_send_process(chan->att);
   2dd12:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   2dd14:	f8c4 8094 	str.w	r8, [r4, #148]	; 0x94
	att_req_send_process(chan->att);
   2dd18:	f017 ff1e 	bl	45b58 <att_req_send_process>
	if (func) {
   2dd1c:	f1b9 0f00 	cmp.w	r9, #0
   2dd20:	d0e1      	beq.n	2dce6 <att_handle_rsp+0x1e>
		func(chan->att->conn, err, pdu, len, params);
   2dd22:	6820      	ldr	r0, [r4, #0]
   2dd24:	f8cd a000 	str.w	sl, [sp]
   2dd28:	6800      	ldr	r0, [r0, #0]
   2dd2a:	463b      	mov	r3, r7
   2dd2c:	4632      	mov	r2, r6
   2dd2e:	4629      	mov	r1, r5
   2dd30:	47c8      	blx	r9
   2dd32:	e7d8      	b.n	2dce6 <att_handle_rsp+0x1e>
   2dd34:	20001e10 	.word	0x20001e10

0002dd38 <bt_att_disconnected>:
{
   2dd38:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   2dd3c:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   2dd40:	4604      	mov	r4, r0
	if (!att_chan->att) {
   2dd42:	2e00      	cmp	r6, #0
   2dd44:	d056      	beq.n	2ddf4 <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   2dd46:	f100 01dc 	add.w	r1, r0, #220	; 0xdc
   2dd4a:	f106 0024 	add.w	r0, r6, #36	; 0x24
   2dd4e:	f017 fe44 	bl	459da <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   2dd52:	1f27      	subs	r7, r4, #4
   2dd54:	f104 0894 	add.w	r8, r4, #148	; 0x94
   2dd58:	2200      	movs	r2, #0
   2dd5a:	2300      	movs	r3, #0
   2dd5c:	4640      	mov	r0, r8
   2dd5e:	f019 f9d9 	bl	47114 <net_buf_get>
   2dd62:	4605      	mov	r5, r0
   2dd64:	bb28      	cbnz	r0, 2ddb2 <bt_att_disconnected+0x7a>
	if (chan->req) {
   2dd66:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   2dd6a:	b12b      	cbz	r3, 2dd78 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   2dd6c:	4602      	mov	r2, r0
   2dd6e:	4601      	mov	r1, r0
   2dd70:	230e      	movs	r3, #14
   2dd72:	4638      	mov	r0, r7
   2dd74:	f7ff ffa8 	bl	2dcc8 <att_handle_rsp>
	chan->att = NULL;
   2dd78:	2300      	movs	r3, #0
   2dd7a:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   2dd7e:	6a73      	ldr	r3, [r6, #36]	; 0x24
   2dd80:	2b00      	cmp	r3, #0
   2dd82:	d137      	bne.n	2ddf4 <bt_att_disconnected+0xbc>
	att_reset(att);
   2dd84:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   2dd86:	9803      	ldr	r0, [sp, #12]
   2dd88:	2200      	movs	r2, #0
   2dd8a:	2300      	movs	r3, #0
   2dd8c:	300c      	adds	r0, #12
   2dd8e:	f019 f9c1 	bl	47114 <net_buf_get>
   2dd92:	4605      	mov	r5, r0
   2dd94:	b9a0      	cbnz	r0, 2ddc0 <bt_att_disconnected+0x88>
	while (!sys_slist_is_empty(&att->reqs)) {
   2dd96:	9803      	ldr	r0, [sp, #12]
	return list->head;
   2dd98:	6845      	ldr	r5, [r0, #4]
   2dd9a:	b9c5      	cbnz	r5, 2ddce <bt_att_disconnected+0x96>
	att->conn = NULL;
   2dd9c:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   2dd9e:	a903      	add	r1, sp, #12
   2dda0:	4816      	ldr	r0, [pc, #88]	; (2ddfc <bt_att_disconnected+0xc4>)
   2dda2:	f01a f876 	bl	47e92 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   2dda6:	6820      	ldr	r0, [r4, #0]
}
   2dda8:	b004      	add	sp, #16
   2ddaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   2ddae:	f001 b86f 	b.w	2ee90 <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   2ddb2:	6968      	ldr	r0, [r5, #20]
   2ddb4:	f7ff fa30 	bl	2d218 <tx_meta_data_free>
		net_buf_unref(buf);
   2ddb8:	4628      	mov	r0, r5
   2ddba:	f00e faa9 	bl	3c310 <net_buf_unref>
   2ddbe:	e7cb      	b.n	2dd58 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   2ddc0:	6968      	ldr	r0, [r5, #20]
   2ddc2:	f7ff fa29 	bl	2d218 <tx_meta_data_free>
		net_buf_unref(buf);
   2ddc6:	4628      	mov	r0, r5
   2ddc8:	f00e faa2 	bl	3c310 <net_buf_unref>
   2ddcc:	e7db      	b.n	2dd86 <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2ddce:	6882      	ldr	r2, [r0, #8]
	return node->next;
   2ddd0:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   2ddd2:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2ddd4:	4295      	cmp	r5, r2
	list->tail = node;
   2ddd6:	bf08      	it	eq
   2ddd8:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   2ddda:	686e      	ldr	r6, [r5, #4]
   2dddc:	b136      	cbz	r6, 2ddec <bt_att_disconnected+0xb4>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   2ddde:	69ab      	ldr	r3, [r5, #24]
   2dde0:	9300      	str	r3, [sp, #0]
   2dde2:	2300      	movs	r3, #0
   2dde4:	6800      	ldr	r0, [r0, #0]
   2dde6:	461a      	mov	r2, r3
   2dde8:	210e      	movs	r1, #14
   2ddea:	47b0      	blx	r6
		bt_att_req_free(req);
   2ddec:	4628      	mov	r0, r5
   2ddee:	f7ff ff53 	bl	2dc98 <bt_att_req_free>
   2ddf2:	e7d0      	b.n	2dd96 <bt_att_disconnected+0x5e>
}
   2ddf4:	b004      	add	sp, #16
   2ddf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2ddfa:	bf00      	nop
   2ddfc:	20000c30 	.word	0x20000c30

0002de00 <db_hash_set>:

SETTINGS_STATIC_HANDLER_DEFINE(bt_cf, "bt/cf", NULL, cf_set, NULL, NULL);

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   2de00:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   2de02:	4904      	ldr	r1, [pc, #16]	; (2de14 <db_hash_set+0x14>)
{
   2de04:	4614      	mov	r4, r2
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   2de06:	4618      	mov	r0, r3
   2de08:	2210      	movs	r2, #16
   2de0a:	47a0      	blx	r4

	BT_HEXDUMP_DBG(db_hash.stored_hash, sizeof(db_hash.stored_hash),
		       "Stored Hash: ");

	return 0;
}
   2de0c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   2de10:	bd10      	pop	{r4, pc}
   2de12:	bf00      	nop
   2de14:	200012a0 	.word	0x200012a0

0002de18 <find_cf_cfg>:
{
   2de18:	b570      	push	{r4, r5, r6, lr}
   2de1a:	4d15      	ldr	r5, [pc, #84]	; (2de70 <find_cf_cfg+0x58>)
		if (!conn) {
   2de1c:	4606      	mov	r6, r0
   2de1e:	b140      	cbz	r0, 2de32 <find_cf_cfg+0x1a>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   2de20:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   2de24:	462a      	mov	r2, r5
   2de26:	1e6c      	subs	r4, r5, #1
   2de28:	f017 fa4a 	bl	452c0 <bt_conn_is_peer_addr_le>
   2de2c:	b1a8      	cbz	r0, 2de5a <find_cf_cfg+0x42>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   2de2e:	4620      	mov	r0, r4
   2de30:	e00e      	b.n	2de50 <find_cf_cfg+0x38>
	return memcmp(a, b, sizeof(*a));
   2de32:	4910      	ldr	r1, [pc, #64]	; (2de74 <find_cf_cfg+0x5c>)
   2de34:	2207      	movs	r2, #7
   2de36:	4628      	mov	r0, r5
   2de38:	f016 fa5e 	bl	442f8 <memcmp>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   2de3c:	b148      	cbz	r0, 2de52 <find_cf_cfg+0x3a>
   2de3e:	490d      	ldr	r1, [pc, #52]	; (2de74 <find_cf_cfg+0x5c>)
   2de40:	2207      	movs	r2, #7
   2de42:	f105 0010 	add.w	r0, r5, #16
   2de46:	f016 fa57 	bl	442f8 <memcmp>
   2de4a:	b920      	cbnz	r0, 2de56 <find_cf_cfg+0x3e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   2de4c:	f105 000f 	add.w	r0, r5, #15
}
   2de50:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   2de52:	1e68      	subs	r0, r5, #1
   2de54:	e7fc      	b.n	2de50 <find_cf_cfg+0x38>
	return NULL;
   2de56:	2000      	movs	r0, #0
   2de58:	e7fa      	b.n	2de50 <find_cf_cfg+0x38>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   2de5a:	7c21      	ldrb	r1, [r4, #16]
   2de5c:	f104 0211 	add.w	r2, r4, #17
   2de60:	4630      	mov	r0, r6
   2de62:	f017 fa2d 	bl	452c0 <bt_conn_is_peer_addr_le>
   2de66:	2800      	cmp	r0, #0
   2de68:	d0f5      	beq.n	2de56 <find_cf_cfg+0x3e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   2de6a:	f104 0010 	add.w	r0, r4, #16
   2de6e:	e7ef      	b.n	2de50 <find_cf_cfg+0x38>
   2de70:	20001e45 	.word	0x20001e45
   2de74:	0004a7b7 	.word	0x0004a7b7

0002de78 <sc_store>:
{
   2de78:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
   2de7a:	4605      	mov	r5, r0
{
   2de7c:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   2de7e:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   2de82:	4604      	mov	r4, r0
	if (cfg->id) {
   2de84:	b19a      	cbz	r2, 2deae <sc_store+0x36>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   2de86:	ae02      	add	r6, sp, #8
   2de88:	2104      	movs	r1, #4
   2de8a:	4630      	mov	r0, r6
   2de8c:	f013 ffe1 	bl	41e52 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   2de90:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   2de92:	462b      	mov	r3, r5
   2de94:	a803      	add	r0, sp, #12
   2de96:	4a07      	ldr	r2, [pc, #28]	; (2deb4 <sc_store+0x3c>)
   2de98:	2124      	movs	r1, #36	; 0x24
   2de9a:	f7fc ff2d 	bl	2acf8 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   2de9e:	2204      	movs	r2, #4
   2dea0:	f104 0108 	add.w	r1, r4, #8
   2dea4:	a803      	add	r0, sp, #12
   2dea6:	f7fb fd9b 	bl	299e0 <settings_save_one>
}
   2deaa:	b00c      	add	sp, #48	; 0x30
   2deac:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   2deae:	9200      	str	r2, [sp, #0]
   2deb0:	e7ef      	b.n	2de92 <sc_store+0x1a>
   2deb2:	bf00      	nop
   2deb4:	0004aa0b 	.word	0x0004aa0b

0002deb8 <db_hash_commit>:

static int db_hash_commit(void)
{
   2deb8:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2deba:	2108      	movs	r1, #8
   2debc:	4805      	ldr	r0, [pc, #20]	; (2ded4 <db_hash_commit+0x1c>)
   2debe:	f018 f91f 	bl	46100 <atomic_or>
	atomic_set_bit(gatt_sc.flags, DB_HASH_LOAD);
	/* Reschedule work to calculate and compare against the Hash value
	 * loaded from flash.
	 */
	if (IS_ENABLED(CONFIG_BT_LONG_WQ)) {
		err = bt_long_wq_reschedule(&db_hash.work, K_NO_WAIT);
   2dec2:	2200      	movs	r2, #0
   2dec4:	2300      	movs	r3, #0
   2dec6:	4804      	ldr	r0, [pc, #16]	; (2ded8 <db_hash_commit+0x20>)
   2dec8:	f7fc ffa6 	bl	2ae18 <bt_long_wq_reschedule>
	if (err) {
		BT_ERR("Unable to reschedule database hash process (err %d)", err);
	}

	return err;
}
   2decc:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   2ded0:	bd08      	pop	{r3, pc}
   2ded2:	bf00      	nop
   2ded4:	20001358 	.word	0x20001358
   2ded8:	200012b0 	.word	0x200012b0

0002dedc <clear_cf_cfg>:
{
   2dedc:	b510      	push	{r4, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2dede:	490c      	ldr	r1, [pc, #48]	; (2df10 <clear_cf_cfg+0x34>)
{
   2dee0:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2dee2:	3001      	adds	r0, #1
   2dee4:	f018 f91b 	bl	4611e <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   2dee8:	f104 0008 	add.w	r0, r4, #8
   2deec:	2201      	movs	r2, #1
   2deee:	2100      	movs	r1, #0
   2def0:	f016 fa1d 	bl	4432e <memset>
   2def4:	f3bf 8f5b 	dmb	ish
   2def8:	340c      	adds	r4, #12
   2defa:	2300      	movs	r3, #0
   2defc:	e854 2f00 	ldrex	r2, [r4]
   2df00:	e844 3100 	strex	r1, r3, [r4]
   2df04:	2900      	cmp	r1, #0
   2df06:	d1f9      	bne.n	2defc <clear_cf_cfg+0x20>
   2df08:	f3bf 8f5b 	dmb	ish
}
   2df0c:	bd10      	pop	{r4, pc}
   2df0e:	bf00      	nop
   2df10:	0004a7b7 	.word	0x0004a7b7

0002df14 <read_ppcp>:
{
   2df14:	b513      	push	{r0, r1, r4, lr}
   2df16:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   2df1a:	4c0b      	ldr	r4, [pc, #44]	; (2df48 <read_ppcp+0x34>)
{
   2df1c:	4610      	mov	r0, r2
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   2df1e:	4a0b      	ldr	r2, [pc, #44]	; (2df4c <read_ppcp+0x38>)
	if (offset > value_len) {
   2df20:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   2df22:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   2df26:	d80b      	bhi.n	2df40 <read_ppcp+0x2c>
	len = MIN(buf_len, value_len - offset);
   2df28:	f1c1 0408 	rsb	r4, r1, #8
   2df2c:	429c      	cmp	r4, r3
   2df2e:	bfa8      	it	ge
   2df30:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   2df32:	4622      	mov	r2, r4
   2df34:	4469      	add	r1, sp
   2df36:	f016 f9ef 	bl	44318 <memcpy>
}
   2df3a:	4620      	mov	r0, r4
   2df3c:	b002      	add	sp, #8
   2df3e:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2df40:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   2df44:	e7f9      	b.n	2df3a <read_ppcp+0x26>
   2df46:	bf00      	nop
   2df48:	000c0006 	.word	0x000c0006
   2df4c:	0190001e 	.word	0x0190001e

0002df50 <sc_commit>:
{
   2df50:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2df52:	4809      	ldr	r0, [pc, #36]	; (2df78 <sc_commit+0x28>)
   2df54:	f06f 0102 	mvn.w	r1, #2
   2df58:	f018 f928 	bl	461ac <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2df5c:	4806      	ldr	r0, [pc, #24]	; (2df78 <sc_commit+0x28>)
   2df5e:	f018 f8c9 	bl	460f4 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   2df62:	07c3      	lsls	r3, r0, #31
   2df64:	d505      	bpl.n	2df72 <sc_commit+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   2df66:	4805      	ldr	r0, [pc, #20]	; (2df7c <sc_commit+0x2c>)
   2df68:	f44f 72a4 	mov.w	r2, #328	; 0x148
   2df6c:	2300      	movs	r3, #0
   2df6e:	f013 f835 	bl	40fdc <k_work_reschedule>
}
   2df72:	2000      	movs	r0, #0
   2df74:	bd08      	pop	{r3, pc}
   2df76:	bf00      	nop
   2df78:	20001358 	.word	0x20001358
   2df7c:	20001328 	.word	0x20001328

0002df80 <find_cf_cfg_by_addr>:
{
   2df80:	b570      	push	{r4, r5, r6, lr}
			if (id == cf_cfg[i].id &&
   2df82:	4c0e      	ldr	r4, [pc, #56]	; (2dfbc <find_cf_cfg_by_addr+0x3c>)
   2df84:	7823      	ldrb	r3, [r4, #0]
   2df86:	4283      	cmp	r3, r0
{
   2df88:	4606      	mov	r6, r0
   2df8a:	460d      	mov	r5, r1
			if (id == cf_cfg[i].id &&
   2df8c:	d00a      	beq.n	2dfa4 <find_cf_cfg_by_addr+0x24>
   2df8e:	7c23      	ldrb	r3, [r4, #16]
   2df90:	42b3      	cmp	r3, r6
   2df92:	d111      	bne.n	2dfb8 <find_cf_cfg_by_addr+0x38>
   2df94:	490a      	ldr	r1, [pc, #40]	; (2dfc0 <find_cf_cfg_by_addr+0x40>)
   2df96:	2207      	movs	r2, #7
   2df98:	4628      	mov	r0, r5
   2df9a:	f016 f9ad 	bl	442f8 <memcmp>
   2df9e:	b958      	cbnz	r0, 2dfb8 <find_cf_cfg_by_addr+0x38>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   2dfa0:	2001      	movs	r0, #1
   2dfa2:	e006      	b.n	2dfb2 <find_cf_cfg_by_addr+0x32>
   2dfa4:	2207      	movs	r2, #7
   2dfa6:	1c61      	adds	r1, r4, #1
   2dfa8:	4628      	mov	r0, r5
   2dfaa:	f016 f9a5 	bl	442f8 <memcmp>
			if (id == cf_cfg[i].id &&
   2dfae:	2800      	cmp	r0, #0
   2dfb0:	d1ed      	bne.n	2df8e <find_cf_cfg_by_addr+0xe>
				return &cf_cfg[i];
   2dfb2:	eb04 1000 	add.w	r0, r4, r0, lsl #4
   2dfb6:	e000      	b.n	2dfba <find_cf_cfg_by_addr+0x3a>
	return NULL;
   2dfb8:	2000      	movs	r0, #0
}
   2dfba:	bd70      	pop	{r4, r5, r6, pc}
   2dfbc:	20001e44 	.word	0x20001e44
   2dfc0:	20001e55 	.word	0x20001e55

0002dfc4 <ccc_load>:
{
   2dfc4:	b570      	push	{r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   2dfc6:	4b20      	ldr	r3, [pc, #128]	; (2e048 <ccc_load+0x84>)
{
   2dfc8:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   2dfca:	6882      	ldr	r2, [r0, #8]
   2dfcc:	429a      	cmp	r2, r3
   2dfce:	d10f      	bne.n	2dff0 <ccc_load+0x2c>
	if (!load->entry) {
   2dfd0:	68a5      	ldr	r5, [r4, #8]
	ccc = attr->user_data;
   2dfd2:	68c6      	ldr	r6, [r0, #12]
	if (!load->entry) {
   2dfd4:	b975      	cbnz	r5, 2dff4 <ccc_load+0x30>
	cfg = ccc_find_cfg(ccc, addr, id);
   2dfd6:	7922      	ldrb	r2, [r4, #4]
   2dfd8:	6821      	ldr	r1, [r4, #0]
   2dfda:	4630      	mov	r0, r6
   2dfdc:	f018 f9bf 	bl	4635e <ccc_find_cfg>
	if (!cfg) {
   2dfe0:	4604      	mov	r4, r0
   2dfe2:	b128      	cbz	r0, 2dff0 <ccc_load+0x2c>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2dfe4:	4919      	ldr	r1, [pc, #100]	; (2e04c <ccc_load+0x88>)
   2dfe6:	3001      	adds	r0, #1
   2dfe8:	f018 f899 	bl	4611e <bt_addr_le_copy>
	cfg->id = 0U;
   2dfec:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   2dfee:	8125      	strh	r5, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
   2dff0:	2001      	movs	r0, #1
}
   2dff2:	bd70      	pop	{r4, r5, r6, pc}
	} else if (!load->count) {
   2dff4:	68e0      	ldr	r0, [r4, #12]
   2dff6:	2800      	cmp	r0, #0
   2dff8:	d0fb      	beq.n	2dff2 <ccc_load+0x2e>
	if (load->entry->handle != handle) {
   2dffa:	882b      	ldrh	r3, [r5, #0]
   2dffc:	428b      	cmp	r3, r1
   2dffe:	d00a      	beq.n	2e016 <ccc_load+0x52>
		if (load->entry->handle < handle) {
   2e000:	d2f6      	bcs.n	2dff0 <ccc_load+0x2c>
	load->count--;
   2e002:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   2e004:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   2e006:	3801      	subs	r0, #1
	load->entry++;
   2e008:	3304      	adds	r3, #4
	load->count--;
   2e00a:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   2e00c:	3800      	subs	r0, #0
	load->entry++;
   2e00e:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   2e010:	bf18      	it	ne
   2e012:	2001      	movne	r0, #1
   2e014:	e7ed      	b.n	2dff2 <ccc_load+0x2e>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   2e016:	7922      	ldrb	r2, [r4, #4]
   2e018:	6821      	ldr	r1, [r4, #0]
   2e01a:	4630      	mov	r0, r6
   2e01c:	f018 f99f 	bl	4635e <ccc_find_cfg>
	if (!cfg) {
   2e020:	4605      	mov	r5, r0
   2e022:	b968      	cbnz	r0, 2e040 <ccc_load+0x7c>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   2e024:	4602      	mov	r2, r0
   2e026:	4909      	ldr	r1, [pc, #36]	; (2e04c <ccc_load+0x88>)
   2e028:	4630      	mov	r0, r6
   2e02a:	f018 f998 	bl	4635e <ccc_find_cfg>
		if (!cfg) {
   2e02e:	4605      	mov	r5, r0
   2e030:	2800      	cmp	r0, #0
   2e032:	d0e6      	beq.n	2e002 <ccc_load+0x3e>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   2e034:	6821      	ldr	r1, [r4, #0]
   2e036:	3001      	adds	r0, #1
   2e038:	f018 f871 	bl	4611e <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   2e03c:	7923      	ldrb	r3, [r4, #4]
   2e03e:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   2e040:	68a3      	ldr	r3, [r4, #8]
   2e042:	885b      	ldrh	r3, [r3, #2]
   2e044:	812b      	strh	r3, [r5, #8]
   2e046:	e7dc      	b.n	2e002 <ccc_load+0x3e>
   2e048:	0002e0dd 	.word	0x0002e0dd
   2e04c:	0004a7b7 	.word	0x0004a7b7

0002e050 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   2e050:	b508      	push	{r3, lr}
   2e052:	4613      	mov	r3, r2
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   2e054:	6881      	ldr	r1, [r0, #8]
   2e056:	4a07      	ldr	r2, [pc, #28]	; (2e074 <remove_peer_from_attr+0x24>)
   2e058:	4291      	cmp	r1, r2
   2e05a:	d109      	bne.n	2e070 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   2e05c:	791a      	ldrb	r2, [r3, #4]
   2e05e:	6819      	ldr	r1, [r3, #0]
   2e060:	68c0      	ldr	r0, [r0, #12]
   2e062:	f018 f97c 	bl	4635e <ccc_find_cfg>
	if (cfg) {
   2e066:	b118      	cbz	r0, 2e070 <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   2e068:	220a      	movs	r2, #10
   2e06a:	2100      	movs	r1, #0
   2e06c:	f016 f95f 	bl	4432e <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   2e070:	2001      	movs	r0, #1
   2e072:	bd08      	pop	{r3, pc}
   2e074:	0002e0dd 	.word	0x0002e0dd

0002e078 <ccc_save>:
{
   2e078:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   2e07a:	4b0c      	ldr	r3, [pc, #48]	; (2e0ac <ccc_save+0x34>)
{
   2e07c:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   2e07e:	6882      	ldr	r2, [r0, #8]
   2e080:	429a      	cmp	r2, r3
{
   2e082:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   2e084:	d10f      	bne.n	2e0a6 <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   2e086:	7922      	ldrb	r2, [r4, #4]
   2e088:	6821      	ldr	r1, [r4, #0]
   2e08a:	68c0      	ldr	r0, [r0, #12]
   2e08c:	f018 f967 	bl	4635e <ccc_find_cfg>
	if (!cfg) {
   2e090:	b148      	cbz	r0, 2e0a6 <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   2e092:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
   2e096:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   2e09a:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   2e09c:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   2e09e:	8901      	ldrh	r1, [r0, #8]
   2e0a0:	8151      	strh	r1, [r2, #10]
	save->count++;
   2e0a2:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   2e0a6:	2001      	movs	r0, #1
   2e0a8:	bd38      	pop	{r3, r4, r5, pc}
   2e0aa:	bf00      	nop
   2e0ac:	0002e0dd 	.word	0x0002e0dd

0002e0b0 <find_ccc_cfg>:
{
   2e0b0:	b510      	push	{r4, lr}
						    &cfg->peer)) {
   2e0b2:	1c4b      	adds	r3, r1, #1
{
   2e0b4:	460c      	mov	r4, r1
		if (conn) {
   2e0b6:	b130      	cbz	r0, 2e0c6 <find_ccc_cfg+0x16>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   2e0b8:	7809      	ldrb	r1, [r1, #0]
   2e0ba:	461a      	mov	r2, r3
   2e0bc:	f017 f900 	bl	452c0 <bt_conn_is_peer_addr_le>
   2e0c0:	b140      	cbz	r0, 2e0d4 <find_ccc_cfg+0x24>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   2e0c2:	4620      	mov	r0, r4
}
   2e0c4:	bd10      	pop	{r4, pc}
   2e0c6:	4904      	ldr	r1, [pc, #16]	; (2e0d8 <find_ccc_cfg+0x28>)
   2e0c8:	2207      	movs	r2, #7
   2e0ca:	4618      	mov	r0, r3
   2e0cc:	f016 f914 	bl	442f8 <memcmp>
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   2e0d0:	2800      	cmp	r0, #0
   2e0d2:	d0f6      	beq.n	2e0c2 <find_ccc_cfg+0x12>
	return NULL;
   2e0d4:	2000      	movs	r0, #0
   2e0d6:	e7f5      	b.n	2e0c4 <find_ccc_cfg+0x14>
   2e0d8:	0004a7b7 	.word	0x0004a7b7

0002e0dc <bt_gatt_attr_write_ccc>:
{
   2e0dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2e0e0:	461f      	mov	r7, r3
   2e0e2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   2e0e6:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   2e0ea:	4605      	mov	r5, r0
   2e0ec:	4688      	mov	r8, r1
	if (offset) {
   2e0ee:	2b00      	cmp	r3, #0
   2e0f0:	d160      	bne.n	2e1b4 <bt_gatt_attr_write_ccc+0xd8>
	if (!len || len > sizeof(uint16_t)) {
   2e0f2:	1e7b      	subs	r3, r7, #1
   2e0f4:	2b01      	cmp	r3, #1
   2e0f6:	d860      	bhi.n	2e1ba <bt_gatt_attr_write_ccc+0xde>
	if (len < sizeof(uint16_t)) {
   2e0f8:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
   2e0fa:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   2e0fc:	7816      	ldrb	r6, [r2, #0]
   2e0fe:	bf18      	it	ne
   2e100:	8816      	ldrhne	r6, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   2e102:	f7ff ffd5 	bl	2e0b0 <find_ccc_cfg>
	if (!cfg) {
   2e106:	4604      	mov	r4, r0
   2e108:	b980      	cbnz	r0, 2e12c <bt_gatt_attr_write_ccc+0x50>
		if (!value) {
   2e10a:	b916      	cbnz	r6, 2e112 <bt_gatt_attr_write_ccc+0x36>
			return len;
   2e10c:	4638      	mov	r0, r7
}
   2e10e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   2e112:	4649      	mov	r1, r9
   2e114:	f7ff ffcc 	bl	2e0b0 <find_ccc_cfg>
		if (!cfg) {
   2e118:	4604      	mov	r4, r0
   2e11a:	2800      	cmp	r0, #0
   2e11c:	d050      	beq.n	2e1c0 <bt_gatt_attr_write_ccc+0xe4>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   2e11e:	f105 0188 	add.w	r1, r5, #136	; 0x88
   2e122:	3001      	adds	r0, #1
   2e124:	f017 fffb 	bl	4611e <bt_addr_le_copy>
		cfg->id = conn->id;
   2e128:	7a2b      	ldrb	r3, [r5, #8]
   2e12a:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   2e12c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   2e130:	bba3      	cbnz	r3, 2e19c <bt_gatt_attr_write_ccc+0xc0>
	value_changed = cfg->value != value;
   2e132:	f8b4 a008 	ldrh.w	sl, [r4, #8]
	cfg->value = value;
   2e136:	8126      	strh	r6, [r4, #8]
	if (cfg->value != ccc->value) {
   2e138:	f8b9 300a 	ldrh.w	r3, [r9, #10]
   2e13c:	42b3      	cmp	r3, r6
   2e13e:	d003      	beq.n	2e148 <bt_gatt_attr_write_ccc+0x6c>
		gatt_ccc_changed(attr, ccc);
   2e140:	4649      	mov	r1, r9
   2e142:	4640      	mov	r0, r8
   2e144:	f017 ff60 	bl	46008 <gatt_ccc_changed>
	if (value_changed) {
   2e148:	45b2      	cmp	sl, r6
   2e14a:	d01e      	beq.n	2e18a <bt_gatt_attr_write_ccc+0xae>
	return (conn == gatt_ccc_store.conn_list[bt_conn_index(conn)]);
   2e14c:	4628      	mov	r0, r5
   2e14e:	f7fe fcd3 	bl	2caf8 <bt_conn_index>
   2e152:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2e1c8 <bt_gatt_attr_write_ccc+0xec>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   2e156:	f858 3020 	ldr.w	r3, [r8, r0, lsl #2]
   2e15a:	429d      	cmp	r5, r3
   2e15c:	d015      	beq.n	2e18a <bt_gatt_attr_write_ccc+0xae>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2e15e:	7a28      	ldrb	r0, [r5, #8]
   2e160:	f105 0188 	add.w	r1, r5, #136	; 0x88
   2e164:	f016 fd0a 	bl	44b7c <bt_addr_le_is_bonded>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   2e168:	b178      	cbz	r0, 2e18a <bt_gatt_attr_write_ccc+0xae>
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   2e16a:	4628      	mov	r0, r5
   2e16c:	f7fe fcc4 	bl	2caf8 <bt_conn_index>
   2e170:	4681      	mov	r9, r0
			bt_conn_ref(conn);
   2e172:	4628      	mov	r0, r5
   2e174:	f016 fff1 	bl	4515a <bt_conn_ref>
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   2e178:	f44f 4200 	mov.w	r2, #32768	; 0x8000
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   2e17c:	f848 0029 	str.w	r0, [r8, r9, lsl #2]
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   2e180:	2300      	movs	r3, #0
   2e182:	f108 0008 	add.w	r0, r8, #8
   2e186:	f012 ff29 	bl	40fdc <k_work_reschedule>
	if (!value) {
   2e18a:	2e00      	cmp	r6, #0
   2e18c:	d1be      	bne.n	2e10c <bt_gatt_attr_write_ccc+0x30>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2e18e:	490f      	ldr	r1, [pc, #60]	; (2e1cc <bt_gatt_attr_write_ccc+0xf0>)
   2e190:	1c60      	adds	r0, r4, #1
   2e192:	f017 ffc4 	bl	4611e <bt_addr_le_copy>
	cfg->id = 0U;
   2e196:	7026      	strb	r6, [r4, #0]
	cfg->value = 0U;
   2e198:	8126      	strh	r6, [r4, #8]
}
   2e19a:	e7b7      	b.n	2e10c <bt_gatt_attr_write_ccc+0x30>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   2e19c:	4632      	mov	r2, r6
   2e19e:	4641      	mov	r1, r8
   2e1a0:	4628      	mov	r0, r5
   2e1a2:	4798      	blx	r3
		if (write < 0) {
   2e1a4:	2800      	cmp	r0, #0
   2e1a6:	dbb2      	blt.n	2e10e <bt_gatt_attr_write_ccc+0x32>
		if (write != sizeof(value) && write != 1) {
   2e1a8:	3801      	subs	r0, #1
   2e1aa:	2801      	cmp	r0, #1
   2e1ac:	d9c1      	bls.n	2e132 <bt_gatt_attr_write_ccc+0x56>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   2e1ae:	f06f 000d 	mvn.w	r0, #13
   2e1b2:	e7ac      	b.n	2e10e <bt_gatt_attr_write_ccc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2e1b4:	f06f 0006 	mvn.w	r0, #6
   2e1b8:	e7a9      	b.n	2e10e <bt_gatt_attr_write_ccc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   2e1ba:	f06f 000c 	mvn.w	r0, #12
   2e1be:	e7a6      	b.n	2e10e <bt_gatt_attr_write_ccc+0x32>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   2e1c0:	f06f 0010 	mvn.w	r0, #16
   2e1c4:	e7a3      	b.n	2e10e <bt_gatt_attr_write_ccc+0x32>
   2e1c6:	bf00      	nop
   2e1c8:	20001258 	.word	0x20001258
   2e1cc:	0004a7b7 	.word	0x0004a7b7

0002e1d0 <find_sc_cfg>:
{
   2e1d0:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   2e1d2:	4c0e      	ldr	r4, [pc, #56]	; (2e20c <find_sc_cfg+0x3c>)
   2e1d4:	7823      	ldrb	r3, [r4, #0]
   2e1d6:	4283      	cmp	r3, r0
{
   2e1d8:	4605      	mov	r5, r0
   2e1da:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   2e1dc:	d00a      	beq.n	2e1f4 <find_sc_cfg+0x24>
   2e1de:	7b23      	ldrb	r3, [r4, #12]
   2e1e0:	42ab      	cmp	r3, r5
   2e1e2:	d111      	bne.n	2e208 <find_sc_cfg+0x38>
   2e1e4:	480a      	ldr	r0, [pc, #40]	; (2e210 <find_sc_cfg+0x40>)
   2e1e6:	2207      	movs	r2, #7
   2e1e8:	4631      	mov	r1, r6
   2e1ea:	f016 f885 	bl	442f8 <memcmp>
   2e1ee:	b958      	cbnz	r0, 2e208 <find_sc_cfg+0x38>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   2e1f0:	2001      	movs	r0, #1
   2e1f2:	e005      	b.n	2e200 <find_sc_cfg+0x30>
   2e1f4:	2207      	movs	r2, #7
   2e1f6:	1c60      	adds	r0, r4, #1
   2e1f8:	f016 f87e 	bl	442f8 <memcmp>
		if (id == sc_cfg[i].id &&
   2e1fc:	2800      	cmp	r0, #0
   2e1fe:	d1ee      	bne.n	2e1de <find_sc_cfg+0xe>
			return &sc_cfg[i];
   2e200:	230c      	movs	r3, #12
   2e202:	fb03 4000 	mla	r0, r3, r0, r4
   2e206:	e000      	b.n	2e20a <find_sc_cfg+0x3a>
	return NULL;
   2e208:	2000      	movs	r0, #0
}
   2e20a:	bd70      	pop	{r4, r5, r6, pc}
   2e20c:	200039ba 	.word	0x200039ba
   2e210:	200039c7 	.word	0x200039c7

0002e214 <sc_save>:
{
   2e214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e218:	4680      	mov	r8, r0
   2e21a:	460f      	mov	r7, r1
   2e21c:	4616      	mov	r6, r2
   2e21e:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   2e220:	f7ff ffd6 	bl	2e1d0 <find_sc_cfg>
	if (!cfg) {
   2e224:	4604      	mov	r4, r0
   2e226:	b948      	cbnz	r0, 2e23c <sc_save+0x28>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   2e228:	4912      	ldr	r1, [pc, #72]	; (2e274 <sc_save+0x60>)
   2e22a:	f7ff ffd1 	bl	2e1d0 <find_sc_cfg>
		if (!cfg) {
   2e22e:	4604      	mov	r4, r0
   2e230:	b1c8      	cbz	r0, 2e266 <sc_save+0x52>
		cfg->id = id;
   2e232:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   2e236:	4639      	mov	r1, r7
   2e238:	f017 ff71 	bl	4611e <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   2e23c:	8922      	ldrh	r2, [r4, #8]
   2e23e:	8963      	ldrh	r3, [r4, #10]
   2e240:	b96a      	cbnz	r2, 2e25e <sc_save+0x4a>
   2e242:	b973      	cbnz	r3, 2e262 <sc_save+0x4e>
		cfg->data.start = start;
   2e244:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   2e246:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   2e248:	4621      	mov	r1, r4
   2e24a:	f811 0b01 	ldrb.w	r0, [r1], #1
   2e24e:	f016 fc95 	bl	44b7c <bt_addr_le_is_bonded>
   2e252:	b140      	cbz	r0, 2e266 <sc_save+0x52>
		sc_store(cfg);
   2e254:	4620      	mov	r0, r4
}
   2e256:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
   2e25a:	f7ff be0d 	b.w	2de78 <sc_store>
	if (new_start >= *start && new_end <= *end) {
   2e25e:	4296      	cmp	r6, r2
   2e260:	d303      	bcc.n	2e26a <sc_save+0x56>
   2e262:	429d      	cmp	r5, r3
   2e264:	d8ef      	bhi.n	2e246 <sc_save+0x32>
}
   2e266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (*end < new_end) {
   2e26a:	429d      	cmp	r5, r3
		*start = new_start;
   2e26c:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   2e26e:	d9eb      	bls.n	2e248 <sc_save+0x34>
   2e270:	e7e9      	b.n	2e246 <sc_save+0x32>
   2e272:	bf00      	nop
   2e274:	0004a7b7 	.word	0x0004a7b7

0002e278 <bt_gatt_clear_sc>:
{
   2e278:	b570      	push	{r4, r5, r6, lr}
   2e27a:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   2e27c:	f7ff ffa8 	bl	2e1d0 <find_sc_cfg>
	if (!cfg) {
   2e280:	4604      	mov	r4, r0
   2e282:	b1b8      	cbz	r0, 2e2b4 <bt_gatt_clear_sc+0x3c>
		if (cfg->id) {
   2e284:	4605      	mov	r5, r0
   2e286:	f815 2b01 	ldrb.w	r2, [r5], #1
   2e28a:	b1b2      	cbz	r2, 2e2ba <bt_gatt_clear_sc+0x42>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   2e28c:	ae02      	add	r6, sp, #8
   2e28e:	2104      	movs	r1, #4
   2e290:	4630      	mov	r0, r6
   2e292:	f013 fdde 	bl	41e52 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   2e296:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   2e298:	4a09      	ldr	r2, [pc, #36]	; (2e2c0 <bt_gatt_clear_sc+0x48>)
   2e29a:	2124      	movs	r1, #36	; 0x24
   2e29c:	462b      	mov	r3, r5
   2e29e:	a803      	add	r0, sp, #12
   2e2a0:	f7fc fd2a 	bl	2acf8 <bt_settings_encode_key>
		err = settings_delete(key);
   2e2a4:	a803      	add	r0, sp, #12
   2e2a6:	f014 fca6 	bl	42bf6 <settings_delete>
	memset(cfg, 0, sizeof(*cfg));
   2e2aa:	220c      	movs	r2, #12
   2e2ac:	2100      	movs	r1, #0
   2e2ae:	4620      	mov	r0, r4
   2e2b0:	f016 f83d 	bl	4432e <memset>
}
   2e2b4:	2000      	movs	r0, #0
   2e2b6:	b00c      	add	sp, #48	; 0x30
   2e2b8:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   2e2ba:	9200      	str	r2, [sp, #0]
   2e2bc:	e7ec      	b.n	2e298 <bt_gatt_clear_sc+0x20>
   2e2be:	bf00      	nop
   2e2c0:	0004aa0b 	.word	0x0004aa0b

0002e2c4 <disconnected_cb>:
{
   2e2c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   2e2c8:	4b23      	ldr	r3, [pc, #140]	; (2e358 <disconnected_cb+0x94>)
{
   2e2ca:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   2e2cc:	6882      	ldr	r2, [r0, #8]
   2e2ce:	429a      	cmp	r2, r3
{
   2e2d0:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   2e2d2:	d102      	bne.n	2e2da <disconnected_cb+0x16>
	ccc = attr->user_data;
   2e2d4:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   2e2d6:	8963      	ldrh	r3, [r4, #10]
   2e2d8:	bb33      	cbnz	r3, 2e328 <disconnected_cb+0x64>
}
   2e2da:	2001      	movs	r0, #1
   2e2dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				bt_conn_unref(tmp);
   2e2e0:	f016 ff57 	bl	45192 <bt_conn_unref>
		if (ccc->cfg_changed) {
   2e2e4:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   2e2e6:	2100      	movs	r1, #0
   2e2e8:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   2e2ea:	2b00      	cmp	r3, #0
   2e2ec:	d0f5      	beq.n	2e2da <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   2e2ee:	4638      	mov	r0, r7
   2e2f0:	4798      	blx	r3
   2e2f2:	e7f2      	b.n	2e2da <disconnected_cb+0x16>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2e2f4:	f105 0888 	add.w	r8, r5, #136	; 0x88
   2e2f8:	7a28      	ldrb	r0, [r5, #8]
   2e2fa:	4641      	mov	r1, r8
   2e2fc:	f016 fc3e 	bl	44b7c <bt_addr_le_is_bonded>
   2e300:	b968      	cbnz	r0, 2e31e <disconnected_cb+0x5a>
				if (ccc == &sc_ccc) {
   2e302:	4b16      	ldr	r3, [pc, #88]	; (2e35c <disconnected_cb+0x98>)
   2e304:	429c      	cmp	r4, r3
   2e306:	d102      	bne.n	2e30e <disconnected_cb+0x4a>
					sc_clear(conn);
   2e308:	4628      	mov	r0, r5
   2e30a:	f018 f856 	bl	463ba <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2e30e:	4914      	ldr	r1, [pc, #80]	; (2e360 <disconnected_cb+0x9c>)
   2e310:	4630      	mov	r0, r6
   2e312:	f017 ff04 	bl	4611e <bt_addr_le_copy>
	cfg->id = 0U;
   2e316:	2300      	movs	r3, #0
   2e318:	7023      	strb	r3, [r4, #0]
	cfg->value = 0U;
   2e31a:	8123      	strh	r3, [r4, #8]
}
   2e31c:	e7e2      	b.n	2e2e4 <disconnected_cb+0x20>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   2e31e:	4641      	mov	r1, r8
   2e320:	4630      	mov	r0, r6
   2e322:	f017 fefc 	bl	4611e <bt_addr_le_copy>
   2e326:	e7dd      	b.n	2e2e4 <disconnected_cb+0x20>
		if (!cfg->value) {
   2e328:	8923      	ldrh	r3, [r4, #8]
   2e32a:	2b00      	cmp	r3, #0
   2e32c:	d0da      	beq.n	2e2e4 <disconnected_cb+0x20>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   2e32e:	4626      	mov	r6, r4
   2e330:	4628      	mov	r0, r5
   2e332:	f816 1b01 	ldrb.w	r1, [r6], #1
   2e336:	4632      	mov	r2, r6
   2e338:	f016 ffc2 	bl	452c0 <bt_conn_is_peer_addr_le>
   2e33c:	2800      	cmp	r0, #0
   2e33e:	d1d9      	bne.n	2e2f4 <disconnected_cb+0x30>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   2e340:	7820      	ldrb	r0, [r4, #0]
   2e342:	4631      	mov	r1, r6
   2e344:	f7fe fd0e 	bl	2cd64 <bt_conn_lookup_addr_le>
			if (tmp) {
   2e348:	2800      	cmp	r0, #0
   2e34a:	d0cb      	beq.n	2e2e4 <disconnected_cb+0x20>
				if (tmp->state == BT_CONN_CONNECTED) {
   2e34c:	7b43      	ldrb	r3, [r0, #13]
   2e34e:	2b07      	cmp	r3, #7
   2e350:	d1c6      	bne.n	2e2e0 <disconnected_cb+0x1c>
				bt_conn_unref(tmp);
   2e352:	f016 ff1e 	bl	45192 <bt_conn_unref>
	if (!value_used) {
   2e356:	e7c0      	b.n	2e2da <disconnected_cb+0x16>
   2e358:	0002e0dd 	.word	0x0002e0dd
   2e35c:	20000420 	.word	0x20000420
   2e360:	0004a7b7 	.word	0x0004a7b7

0002e364 <sc_set>:
{
   2e364:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2e368:	460e      	mov	r6, r1
   2e36a:	4617      	mov	r7, r2
   2e36c:	4698      	mov	r8, r3
	if (!name) {
   2e36e:	4605      	mov	r5, r0
   2e370:	b928      	cbnz	r0, 2e37e <sc_set+0x1a>
		return -EINVAL;
   2e372:	f06f 0415 	mvn.w	r4, #21
}
   2e376:	4620      	mov	r0, r4
   2e378:	b004      	add	sp, #16
   2e37a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
   2e37e:	a902      	add	r1, sp, #8
   2e380:	f016 f865 	bl	4444e <bt_settings_decode_key>
	if (err) {
   2e384:	4604      	mov	r4, r0
   2e386:	2800      	cmp	r0, #0
   2e388:	d1f3      	bne.n	2e372 <sc_set+0xe>
	settings_name_next(name, &next);
   2e38a:	a901      	add	r1, sp, #4
   2e38c:	4628      	mov	r0, r5
   2e38e:	f014 fc5a 	bl	42c46 <settings_name_next>
	if (!next) {
   2e392:	9801      	ldr	r0, [sp, #4]
   2e394:	b9d0      	cbnz	r0, 2e3cc <sc_set+0x68>
	cfg = find_sc_cfg(id, &addr);
   2e396:	a902      	add	r1, sp, #8
   2e398:	2000      	movs	r0, #0
   2e39a:	f7ff ff19 	bl	2e1d0 <find_sc_cfg>
	if (!cfg && len_rd) {
   2e39e:	4605      	mov	r5, r0
   2e3a0:	b9d8      	cbnz	r0, 2e3da <sc_set+0x76>
   2e3a2:	2e00      	cmp	r6, #0
   2e3a4:	d0e7      	beq.n	2e376 <sc_set+0x12>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   2e3a6:	4912      	ldr	r1, [pc, #72]	; (2e3f0 <sc_set+0x8c>)
   2e3a8:	f7ff ff12 	bl	2e1d0 <find_sc_cfg>
		if (!cfg) {
   2e3ac:	4605      	mov	r5, r0
   2e3ae:	b1d8      	cbz	r0, 2e3e8 <sc_set+0x84>
		cfg->id = id;
   2e3b0:	2300      	movs	r3, #0
   2e3b2:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   2e3b6:	a902      	add	r1, sp, #8
   2e3b8:	f017 feb1 	bl	4611e <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   2e3bc:	2204      	movs	r2, #4
   2e3be:	f105 0108 	add.w	r1, r5, #8
   2e3c2:	4640      	mov	r0, r8
   2e3c4:	47b8      	blx	r7
		if (len < 0) {
   2e3c6:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   2e3ca:	e7d4      	b.n	2e376 <sc_set+0x12>
		unsigned long next_id = strtoul(next, NULL, 10);
   2e3cc:	220a      	movs	r2, #10
   2e3ce:	4621      	mov	r1, r4
   2e3d0:	f015 fe59 	bl	44086 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   2e3d4:	2800      	cmp	r0, #0
   2e3d6:	d0de      	beq.n	2e396 <sc_set+0x32>
   2e3d8:	e7cb      	b.n	2e372 <sc_set+0xe>
	if (len_rd) {
   2e3da:	2e00      	cmp	r6, #0
   2e3dc:	d1ee      	bne.n	2e3bc <sc_set+0x58>
		memset(cfg, 0, sizeof(*cfg));
   2e3de:	220c      	movs	r2, #12
   2e3e0:	4631      	mov	r1, r6
   2e3e2:	f015 ffa4 	bl	4432e <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   2e3e6:	e7c6      	b.n	2e376 <sc_set+0x12>
			return -ENOMEM;
   2e3e8:	f06f 040b 	mvn.w	r4, #11
   2e3ec:	e7c3      	b.n	2e376 <sc_set+0x12>
   2e3ee:	bf00      	nop
   2e3f0:	0004a7b7 	.word	0x0004a7b7

0002e3f4 <sc_indicate_rsp>:
{
   2e3f4:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2e3f6:	f06f 0102 	mvn.w	r1, #2
   2e3fa:	4604      	mov	r4, r0
   2e3fc:	480f      	ldr	r0, [pc, #60]	; (2e43c <sc_indicate_rsp+0x48>)
   2e3fe:	f017 fed5 	bl	461ac <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2e402:	480e      	ldr	r0, [pc, #56]	; (2e43c <sc_indicate_rsp+0x48>)
   2e404:	f017 fe76 	bl	460f4 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   2e408:	07c2      	lsls	r2, r0, #31
   2e40a:	d504      	bpl.n	2e416 <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   2e40c:	480c      	ldr	r0, [pc, #48]	; (2e440 <sc_indicate_rsp+0x4c>)
   2e40e:	2200      	movs	r2, #0
   2e410:	2300      	movs	r3, #0
   2e412:	f012 fde3 	bl	40fdc <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   2e416:	4620      	mov	r0, r4
   2e418:	f017 fdc5 	bl	45fa6 <bt_att_fixed_chan_only>
   2e41c:	b160      	cbz	r0, 2e438 <sc_indicate_rsp+0x44>
		cfg = find_cf_cfg(conn);
   2e41e:	4620      	mov	r0, r4
   2e420:	f7ff fcfa 	bl	2de18 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   2e424:	b140      	cbz	r0, 2e438 <sc_indicate_rsp+0x44>
   2e426:	7a03      	ldrb	r3, [r0, #8]
   2e428:	07db      	lsls	r3, r3, #31
   2e42a:	d505      	bpl.n	2e438 <sc_indicate_rsp+0x44>
}
   2e42c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2e430:	2101      	movs	r1, #1
   2e432:	300c      	adds	r0, #12
   2e434:	f017 be64 	b.w	46100 <atomic_or>
   2e438:	bd10      	pop	{r4, pc}
   2e43a:	bf00      	nop
   2e43c:	20001358 	.word	0x20001358
   2e440:	20001328 	.word	0x20001328

0002e444 <bt_gatt_init>:
{
   2e444:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2e446:	4b24      	ldr	r3, [pc, #144]	; (2e4d8 <bt_gatt_init+0x94>)
   2e448:	f3bf 8f5b 	dmb	ish
   2e44c:	2201      	movs	r2, #1
   2e44e:	e853 1f00 	ldrex	r1, [r3]
   2e452:	2900      	cmp	r1, #0
   2e454:	d103      	bne.n	2e45e <bt_gatt_init+0x1a>
   2e456:	e843 2000 	strex	r0, r2, [r3]
   2e45a:	2800      	cmp	r0, #0
   2e45c:	d1f7      	bne.n	2e44e <bt_gatt_init+0xa>
   2e45e:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   2e462:	d138      	bne.n	2e4d6 <bt_gatt_init+0x92>
   2e464:	f3bf 8f5b 	dmb	ish
   2e468:	4b1c      	ldr	r3, [pc, #112]	; (2e4dc <bt_gatt_init+0x98>)
   2e46a:	e853 1f00 	ldrex	r1, [r3]
   2e46e:	2900      	cmp	r1, #0
   2e470:	d103      	bne.n	2e47a <bt_gatt_init+0x36>
   2e472:	e843 2000 	strex	r0, r2, [r3]
   2e476:	2800      	cmp	r0, #0
   2e478:	d1f7      	bne.n	2e46a <bt_gatt_init+0x26>
   2e47a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   2e47e:	d108      	bne.n	2e492 <bt_gatt_init+0x4e>
   2e480:	4917      	ldr	r1, [pc, #92]	; (2e4e0 <bt_gatt_init+0x9c>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   2e482:	4a18      	ldr	r2, [pc, #96]	; (2e4e4 <bt_gatt_init+0xa0>)
   2e484:	880b      	ldrh	r3, [r1, #0]
   2e486:	4c18      	ldr	r4, [pc, #96]	; (2e4e8 <bt_gatt_init+0xa4>)
	if (!atomic_cas(&service_init, 0, 1)) {
   2e488:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   2e48a:	42a2      	cmp	r2, r4
   2e48c:	d31d      	bcc.n	2e4ca <bt_gatt_init+0x86>
   2e48e:	b100      	cbz	r0, 2e492 <bt_gatt_init+0x4e>
   2e490:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   2e492:	4b16      	ldr	r3, [pc, #88]	; (2e4ec <bt_gatt_init+0xa8>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   2e494:	4916      	ldr	r1, [pc, #88]	; (2e4f0 <bt_gatt_init+0xac>)
   2e496:	4817      	ldr	r0, [pc, #92]	; (2e4f4 <bt_gatt_init+0xb0>)
   2e498:	2200      	movs	r2, #0
	list->tail = NULL;
   2e49a:	e9c3 2200 	strd	r2, r2, [r3]
   2e49e:	f019 fefa 	bl	48296 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   2e4a2:	f44f 72a4 	mov.w	r2, #328	; 0x148
   2e4a6:	2300      	movs	r3, #0
   2e4a8:	4812      	ldr	r0, [pc, #72]	; (2e4f4 <bt_gatt_init+0xb0>)
   2e4aa:	f7fc fcaf 	bl	2ae0c <bt_long_wq_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   2e4ae:	4912      	ldr	r1, [pc, #72]	; (2e4f8 <bt_gatt_init+0xb4>)
   2e4b0:	4812      	ldr	r0, [pc, #72]	; (2e4fc <bt_gatt_init+0xb8>)
   2e4b2:	f019 fef0 	bl	48296 <k_work_init_delayable>
   2e4b6:	2102      	movs	r1, #2
   2e4b8:	4811      	ldr	r0, [pc, #68]	; (2e500 <bt_gatt_init+0xbc>)
   2e4ba:	f017 fe21 	bl	46100 <atomic_or>
}
   2e4be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_ccc_store.work, ccc_delayed_store);
   2e4c2:	4910      	ldr	r1, [pc, #64]	; (2e504 <bt_gatt_init+0xc0>)
   2e4c4:	4810      	ldr	r0, [pc, #64]	; (2e508 <bt_gatt_init+0xc4>)
   2e4c6:	f019 bee6 	b.w	48296 <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   2e4ca:	6850      	ldr	r0, [r2, #4]
   2e4cc:	4403      	add	r3, r0
   2e4ce:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   2e4d0:	3208      	adds	r2, #8
   2e4d2:	2001      	movs	r0, #1
   2e4d4:	e7d9      	b.n	2e48a <bt_gatt_init+0x46>
}
   2e4d6:	bd10      	pop	{r4, pc}
   2e4d8:	20001e68 	.word	0x20001e68
   2e4dc:	20001e64 	.word	0x20001e64
   2e4e0:	200039d2 	.word	0x200039d2
   2e4e4:	00048db8 	.word	0x00048db8
   2e4e8:	00048de0 	.word	0x00048de0
   2e4ec:	20001e6c 	.word	0x20001e6c
   2e4f0:	0002e711 	.word	0x0002e711
   2e4f4:	200012b0 	.word	0x200012b0
   2e4f8:	0002ea39 	.word	0x0002ea39
   2e4fc:	20001328 	.word	0x20001328
   2e500:	20001358 	.word	0x20001358
   2e504:	0004678d 	.word	0x0004678d
   2e508:	20001260 	.word	0x20001260

0002e50c <bt_gatt_attr_get_handle>:
{
   2e50c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   2e510:	4603      	mov	r3, r0
   2e512:	b148      	cbz	r0, 2e528 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   2e514:	8a00      	ldrh	r0, [r0, #16]
   2e516:	b938      	cbnz	r0, 2e528 <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   2e518:	4912      	ldr	r1, [pc, #72]	; (2e564 <bt_gatt_attr_get_handle+0x58>)
   2e51a:	f8df e04c 	ldr.w	lr, [pc, #76]	; 2e568 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   2e51e:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   2e520:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   2e524:	4571      	cmp	r1, lr
   2e526:	d301      	bcc.n	2e52c <bt_gatt_attr_get_handle+0x20>
}
   2e528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   2e52c:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   2e530:	42bb      	cmp	r3, r7
   2e532:	d304      	bcc.n	2e53e <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   2e534:	fb0c 7206 	mla	r2, ip, r6, r7
   2e538:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   2e53a:	4293      	cmp	r3, r2
   2e53c:	d90e      	bls.n	2e55c <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   2e53e:	4434      	add	r4, r6
   2e540:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   2e542:	3108      	adds	r1, #8
   2e544:	4614      	mov	r4, r2
   2e546:	e7ed      	b.n	2e524 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   2e548:	fb0c 7805 	mla	r8, ip, r5, r7
   2e54c:	4543      	cmp	r3, r8
   2e54e:	d007      	beq.n	2e560 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   2e550:	3501      	adds	r5, #1
   2e552:	1962      	adds	r2, r4, r5
   2e554:	42b5      	cmp	r5, r6
   2e556:	b292      	uxth	r2, r2
   2e558:	d1f6      	bne.n	2e548 <bt_gatt_attr_get_handle+0x3c>
   2e55a:	e7f2      	b.n	2e542 <bt_gatt_attr_get_handle+0x36>
   2e55c:	2500      	movs	r5, #0
   2e55e:	e7f8      	b.n	2e552 <bt_gatt_attr_get_handle+0x46>
   2e560:	4610      	mov	r0, r2
   2e562:	e7e1      	b.n	2e528 <bt_gatt_attr_get_handle+0x1c>
   2e564:	00048db8 	.word	0x00048db8
   2e568:	00048de0 	.word	0x00048de0

0002e56c <bt_gatt_foreach_attr_type>:
{
   2e56c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e570:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   2e574:	9100      	str	r1, [sp, #0]
   2e576:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   2e578:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2e57c:	2d00      	cmp	r5, #0
   2e57e:	bf08      	it	eq
   2e580:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   2e582:	4b24      	ldr	r3, [pc, #144]	; (2e614 <bt_gatt_foreach_attr_type+0xa8>)
   2e584:	881b      	ldrh	r3, [r3, #0]
   2e586:	4283      	cmp	r3, r0
{
   2e588:	4607      	mov	r7, r0
   2e58a:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   2e58c:	d23c      	bcs.n	2e608 <bt_gatt_foreach_attr_type+0x9c>
}
   2e58e:	b003      	add	sp, #12
   2e590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   2e594:	6873      	ldr	r3, [r6, #4]
   2e596:	4423      	add	r3, r4
   2e598:	42bb      	cmp	r3, r7
   2e59a:	d232      	bcs.n	2e602 <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   2e59c:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   2e59e:	3608      	adds	r6, #8
   2e5a0:	4b1d      	ldr	r3, [pc, #116]	; (2e618 <bt_gatt_foreach_attr_type+0xac>)
   2e5a2:	429e      	cmp	r6, r3
   2e5a4:	d3f6      	bcc.n	2e594 <bt_gatt_foreach_attr_type+0x28>
   2e5a6:	e7f2      	b.n	2e58e <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   2e5a8:	5889      	ldr	r1, [r1, r2]
   2e5aa:	9301      	str	r3, [sp, #4]
   2e5ac:	4640      	mov	r0, r8
   2e5ae:	f015 ff74 	bl	4449a <bt_uuid_cmp>
   2e5b2:	9b01      	ldr	r3, [sp, #4]
   2e5b4:	b190      	cbz	r0, 2e5dc <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   2e5b6:	3401      	adds	r4, #1
   2e5b8:	f10a 0a01 	add.w	sl, sl, #1
   2e5bc:	b2a4      	uxth	r4, r4
   2e5be:	6873      	ldr	r3, [r6, #4]
   2e5c0:	4553      	cmp	r3, sl
   2e5c2:	d9ec      	bls.n	2e59e <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   2e5c4:	9b00      	ldr	r3, [sp, #0]
   2e5c6:	429c      	cmp	r4, r3
   2e5c8:	d8e1      	bhi.n	2e58e <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   2e5ca:	42bc      	cmp	r4, r7
				if (gatt_foreach_iter(&static_svc->attrs[i],
   2e5cc:	6831      	ldr	r1, [r6, #0]
	if (handle < start_handle) {
   2e5ce:	d3f2      	bcc.n	2e5b6 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   2e5d0:	fb0b f20a 	mul.w	r2, fp, sl
   2e5d4:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   2e5d6:	f1b8 0f00 	cmp.w	r8, #0
   2e5da:	d1e5      	bne.n	2e5a8 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   2e5dc:	f1b9 0f00 	cmp.w	r9, #0
   2e5e0:	d10b      	bne.n	2e5fa <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   2e5e2:	3d01      	subs	r5, #1
   2e5e4:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   2e5e6:	4618      	mov	r0, r3
   2e5e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2e5ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2e5ec:	4621      	mov	r1, r4
   2e5ee:	4798      	blx	r3
	if (!*num_matches) {
   2e5f0:	2d00      	cmp	r5, #0
   2e5f2:	d0cc      	beq.n	2e58e <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   2e5f4:	2800      	cmp	r0, #0
   2e5f6:	d1de      	bne.n	2e5b6 <bt_gatt_foreach_attr_type+0x4a>
   2e5f8:	e7c9      	b.n	2e58e <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   2e5fa:	68da      	ldr	r2, [r3, #12]
   2e5fc:	4591      	cmp	r9, r2
   2e5fe:	d1da      	bne.n	2e5b6 <bt_gatt_foreach_attr_type+0x4a>
   2e600:	e7ef      	b.n	2e5e2 <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   2e602:	f04f 0a00 	mov.w	sl, #0
   2e606:	e7da      	b.n	2e5be <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   2e608:	4e04      	ldr	r6, [pc, #16]	; (2e61c <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   2e60a:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   2e60c:	f04f 0b14 	mov.w	fp, #20
   2e610:	e7c6      	b.n	2e5a0 <bt_gatt_foreach_attr_type+0x34>
   2e612:	bf00      	nop
   2e614:	200039d2 	.word	0x200039d2
   2e618:	00048de0 	.word	0x00048de0
   2e61c:	00048db8 	.word	0x00048db8

0002e620 <db_hash_gen>:
{
   2e620:	b530      	push	{r4, r5, lr}
   2e622:	b0c9      	sub	sp, #292	; 0x124
	uint8_t key[16] = {};
   2e624:	2400      	movs	r4, #0
{
   2e626:	4605      	mov	r5, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   2e628:	aa1c      	add	r2, sp, #112	; 0x70
   2e62a:	4669      	mov	r1, sp
   2e62c:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   2e62e:	e9cd 4400 	strd	r4, r4, [sp]
   2e632:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   2e636:	f015 fc4b 	bl	43ed0 <tc_cmac_setup>
   2e63a:	b308      	cbz	r0, 2e680 <db_hash_gen+0x60>
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   2e63c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2e640:	2001      	movs	r0, #1
   2e642:	4a10      	ldr	r2, [pc, #64]	; (2e684 <db_hash_gen+0x64>)
   2e644:	ab04      	add	r3, sp, #16
   2e646:	f017 ff6a 	bl	4651e <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   2e64a:	480f      	ldr	r0, [pc, #60]	; (2e688 <db_hash_gen+0x68>)
   2e64c:	a904      	add	r1, sp, #16
   2e64e:	f015 fcd4 	bl	43ffa <tc_cmac_final>
   2e652:	b1a8      	cbz	r0, 2e680 <db_hash_gen+0x60>
   2e654:	4b0c      	ldr	r3, [pc, #48]	; (2e688 <db_hash_gen+0x68>)
   2e656:	f103 0210 	add.w	r2, r3, #16
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   2e65a:	3401      	adds	r4, #1
		uint8_t tmp = ((uint8_t *)buf)[i];
   2e65c:	7819      	ldrb	r1, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2e65e:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   2e662:	f803 0b01 	strb.w	r0, [r3], #1
	for (i = 0; i < (length/2); i++) {
   2e666:	2c08      	cmp	r4, #8
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2e668:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   2e66a:	d1f6      	bne.n	2e65a <db_hash_gen+0x3a>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   2e66c:	b125      	cbz	r5, 2e678 <db_hash_gen+0x58>
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   2e66e:	4906      	ldr	r1, [pc, #24]	; (2e688 <db_hash_gen+0x68>)
   2e670:	4806      	ldr	r0, [pc, #24]	; (2e68c <db_hash_gen+0x6c>)
   2e672:	2210      	movs	r2, #16
   2e674:	f7fb f9b4 	bl	299e0 <settings_save_one>
   2e678:	4805      	ldr	r0, [pc, #20]	; (2e690 <db_hash_gen+0x70>)
   2e67a:	2104      	movs	r1, #4
   2e67c:	f017 fd40 	bl	46100 <atomic_or>
}
   2e680:	b049      	add	sp, #292	; 0x124
   2e682:	bd30      	pop	{r4, r5, pc}
   2e684:	0004604f 	.word	0x0004604f
   2e688:	20001290 	.word	0x20001290
   2e68c:	0004a9f3 	.word	0x0004a9f3
   2e690:	20001358 	.word	0x20001358

0002e694 <db_hash_read>:
{
   2e694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   2e696:	491b      	ldr	r1, [pc, #108]	; (2e704 <db_hash_read+0x70>)
{
   2e698:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   2e69c:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   2e69e:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   2e6a2:	4615      	mov	r5, r2
   2e6a4:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   2e6a6:	f019 fe18 	bl	482da <k_work_cancel_delayable_sync>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2e6aa:	4817      	ldr	r0, [pc, #92]	; (2e708 <db_hash_read+0x74>)
   2e6ac:	f017 fd22 	bl	460f4 <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   2e6b0:	0741      	lsls	r1, r0, #29
   2e6b2:	d402      	bmi.n	2e6ba <db_hash_read+0x26>
		db_hash_gen(true);
   2e6b4:	2001      	movs	r0, #1
   2e6b6:	f7ff ffb3 	bl	2e620 <db_hash_gen>
	cfg = find_cf_cfg(conn);
   2e6ba:	4620      	mov	r0, r4
   2e6bc:	f7ff fbac 	bl	2de18 <find_cf_cfg>
	if (cfg &&
   2e6c0:	b168      	cbz	r0, 2e6de <db_hash_read+0x4a>
   2e6c2:	7a03      	ldrb	r3, [r0, #8]
   2e6c4:	07da      	lsls	r2, r3, #31
   2e6c6:	d50a      	bpl.n	2e6de <db_hash_read+0x4a>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2e6c8:	f100 040c 	add.w	r4, r0, #12
   2e6cc:	4620      	mov	r0, r4
   2e6ce:	f017 fd11 	bl	460f4 <atomic_get>
	    CF_ROBUST_CACHING(cfg) &&
   2e6d2:	07c3      	lsls	r3, r0, #31
   2e6d4:	d403      	bmi.n	2e6de <db_hash_read+0x4a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2e6d6:	2102      	movs	r1, #2
   2e6d8:	4620      	mov	r0, r4
   2e6da:	f017 fd11 	bl	46100 <atomic_or>
	if (offset > value_len) {
   2e6de:	2e10      	cmp	r6, #16
   2e6e0:	d80c      	bhi.n	2e6fc <db_hash_read+0x68>
	len = MIN(buf_len, value_len - offset);
   2e6e2:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   2e6e6:	4909      	ldr	r1, [pc, #36]	; (2e70c <db_hash_read+0x78>)
	len = MIN(buf_len, value_len - offset);
   2e6e8:	42bc      	cmp	r4, r7
   2e6ea:	bfa8      	it	ge
   2e6ec:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2e6ee:	4622      	mov	r2, r4
   2e6f0:	4431      	add	r1, r6
   2e6f2:	4628      	mov	r0, r5
   2e6f4:	f015 fe10 	bl	44318 <memcpy>
}
   2e6f8:	4620      	mov	r0, r4
   2e6fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2e6fc:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   2e700:	e7fa      	b.n	2e6f8 <db_hash_read+0x64>
   2e702:	bf00      	nop
   2e704:	200012e0 	.word	0x200012e0
   2e708:	20001358 	.word	0x20001358
   2e70c:	20001290 	.word	0x20001290

0002e710 <db_hash_process>:
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2e710:	f06f 0108 	mvn.w	r1, #8
{
   2e714:	b508      	push	{r3, lr}
   2e716:	4828      	ldr	r0, [pc, #160]	; (2e7b8 <db_hash_process+0xa8>)
   2e718:	f017 fd48 	bl	461ac <atomic_and>
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
   2e71c:	0701      	lsls	r1, r0, #28
   2e71e:	d545      	bpl.n	2e7ac <db_hash_process+0x9c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2e720:	4825      	ldr	r0, [pc, #148]	; (2e7b8 <db_hash_process+0xa8>)
   2e722:	f017 fce7 	bl	460f4 <atomic_get>
   2e726:	4603      	mov	r3, r0
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   2e728:	075a      	lsls	r2, r3, #29
   2e72a:	f3c0 0080 	ubfx	r0, r0, #2, #1
   2e72e:	d401      	bmi.n	2e734 <db_hash_process+0x24>
			db_hash_gen(false);
   2e730:	f7ff ff76 	bl	2e620 <db_hash_gen>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   2e734:	4921      	ldr	r1, [pc, #132]	; (2e7bc <db_hash_process+0xac>)
   2e736:	2210      	movs	r2, #16
   2e738:	1888      	adds	r0, r1, r2
   2e73a:	f015 fddd 	bl	442f8 <memcmp>
   2e73e:	b948      	cbnz	r0, 2e754 <db_hash_process+0x44>
			k_work_cancel_delayable(&gatt_sc.work);
   2e740:	481f      	ldr	r0, [pc, #124]	; (2e7c0 <db_hash_process+0xb0>)
   2e742:	f019 fdb6 	bl	482b2 <k_work_cancel_delayable>
}
   2e746:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2e74a:	481b      	ldr	r0, [pc, #108]	; (2e7b8 <db_hash_process+0xa8>)
   2e74c:	f06f 0101 	mvn.w	r1, #1
   2e750:	f017 bd2c 	b.w	461ac <atomic_and>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   2e754:	4818      	ldr	r0, [pc, #96]	; (2e7b8 <db_hash_process+0xa8>)
   2e756:	2101      	movs	r1, #1
   2e758:	f017 fcd2 	bl	46100 <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   2e75c:	f010 0f01 	tst.w	r0, #1
   2e760:	4b18      	ldr	r3, [pc, #96]	; (2e7c4 <db_hash_process+0xb4>)
   2e762:	d113      	bne.n	2e78c <db_hash_process+0x7c>
		gatt_sc.start = start;
   2e764:	4a18      	ldr	r2, [pc, #96]	; (2e7c8 <db_hash_process+0xb8>)
   2e766:	619a      	str	r2, [r3, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2e768:	4813      	ldr	r0, [pc, #76]	; (2e7b8 <db_hash_process+0xa8>)
   2e76a:	f017 fcc3 	bl	460f4 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   2e76e:	0783      	lsls	r3, r0, #30
   2e770:	d405      	bmi.n	2e77e <db_hash_process+0x6e>
	k_work_reschedule(&gatt_sc.work, timeout);
   2e772:	4813      	ldr	r0, [pc, #76]	; (2e7c0 <db_hash_process+0xb0>)
   2e774:	f44f 72a4 	mov.w	r2, #328	; 0x148
   2e778:	2300      	movs	r3, #0
   2e77a:	f012 fc2f 	bl	40fdc <k_work_reschedule>
}
   2e77e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   2e782:	490e      	ldr	r1, [pc, #56]	; (2e7bc <db_hash_process+0xac>)
   2e784:	4811      	ldr	r0, [pc, #68]	; (2e7cc <db_hash_process+0xbc>)
   2e786:	2210      	movs	r2, #16
   2e788:	f7fb b92a 	b.w	299e0 <settings_save_one>
	if (new_start >= *start && new_end <= *end) {
   2e78c:	8b1a      	ldrh	r2, [r3, #24]
   2e78e:	8b58      	ldrh	r0, [r3, #26]
   2e790:	2a01      	cmp	r2, #1
   2e792:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2e796:	d805      	bhi.n	2e7a4 <db_hash_process+0x94>
   2e798:	4290      	cmp	r0, r2
   2e79a:	d0f0      	beq.n	2e77e <db_hash_process+0x6e>
		*end = new_end;
   2e79c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2e7a0:	835a      	strh	r2, [r3, #26]
   2e7a2:	e7e1      	b.n	2e768 <db_hash_process+0x58>
	if (*end < new_end) {
   2e7a4:	4290      	cmp	r0, r2
		*start = new_start;
   2e7a6:	8319      	strh	r1, [r3, #24]
	if (*end < new_end) {
   2e7a8:	d0de      	beq.n	2e768 <db_hash_process+0x58>
   2e7aa:	e7f7      	b.n	2e79c <db_hash_process+0x8c>
}
   2e7ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	db_hash_gen(true);
   2e7b0:	2001      	movs	r0, #1
   2e7b2:	f7ff bf35 	b.w	2e620 <db_hash_gen>
   2e7b6:	bf00      	nop
   2e7b8:	20001358 	.word	0x20001358
   2e7bc:	20001290 	.word	0x20001290
   2e7c0:	20001328 	.word	0x20001328
   2e7c4:	20001308 	.word	0x20001308
   2e7c8:	ffff0001 	.word	0xffff0001
   2e7cc:	0004a9f3 	.word	0x0004a9f3

0002e7d0 <ccc_set_direct>:
{
   2e7d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e7d4:	b0b8      	sub	sp, #224	; 0xe0
   2e7d6:	460c      	mov	r4, r1
   2e7d8:	4616      	mov	r6, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   2e7da:	4921      	ldr	r1, [pc, #132]	; (2e860 <ccc_set_direct+0x90>)
   2e7dc:	983e      	ldr	r0, [sp, #248]	; 0xf8
   2e7de:	466a      	mov	r2, sp
{
   2e7e0:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   2e7e2:	f014 fa0c 	bl	42bfe <settings_name_steq>
   2e7e6:	2800      	cmp	r0, #0
   2e7e8:	d037      	beq.n	2e85a <ccc_set_direct+0x8a>
		return ccc_set(name, len, read_cb, cb_arg);
   2e7ea:	9d00      	ldr	r5, [sp, #0]
		settings_name_next(name, &next);
   2e7ec:	a901      	add	r1, sp, #4
   2e7ee:	4628      	mov	r0, r5
   2e7f0:	f014 fa29 	bl	42c46 <settings_name_next>
		if (!name) {
   2e7f4:	b165      	cbz	r5, 2e810 <ccc_set_direct+0x40>
		} else if (!next) {
   2e7f6:	9801      	ldr	r0, [sp, #4]
   2e7f8:	b970      	cbnz	r0, 2e818 <ccc_set_direct+0x48>
		err = bt_settings_decode_key(name, &addr);
   2e7fa:	f10d 0808 	add.w	r8, sp, #8
			load.addr_with_id.id = BT_ID_DEFAULT;
   2e7fe:	2300      	movs	r3, #0
		err = bt_settings_decode_key(name, &addr);
   2e800:	4628      	mov	r0, r5
   2e802:	4641      	mov	r1, r8
			load.addr_with_id.id = BT_ID_DEFAULT;
   2e804:	f88d 3014 	strb.w	r3, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
   2e808:	f015 fe21 	bl	4444e <bt_settings_decode_key>
		if (err) {
   2e80c:	4605      	mov	r5, r0
   2e80e:	b150      	cbz	r0, 2e826 <ccc_set_direct+0x56>
			return -EINVAL;
   2e810:	f06f 0415 	mvn.w	r4, #21
   2e814:	4625      	mov	r5, r4
   2e816:	e01a      	b.n	2e84e <ccc_set_direct+0x7e>
			unsigned long next_id = strtoul(next, NULL, 10);
   2e818:	220a      	movs	r2, #10
   2e81a:	2100      	movs	r1, #0
   2e81c:	f015 fc33 	bl	44086 <strtoul>
			if (next_id >= CONFIG_BT_ID_MAX) {
   2e820:	2800      	cmp	r0, #0
   2e822:	d0ea      	beq.n	2e7fa <ccc_set_direct+0x2a>
   2e824:	e7f4      	b.n	2e810 <ccc_set_direct+0x40>
		load.addr_with_id.addr = &addr;
   2e826:	f8cd 8010 	str.w	r8, [sp, #16]
		if (len_rd) {
   2e82a:	b1a4      	cbz	r4, 2e856 <ccc_set_direct+0x86>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   2e82c:	22c0      	movs	r2, #192	; 0xc0
   2e82e:	a908      	add	r1, sp, #32
   2e830:	4638      	mov	r0, r7
   2e832:	47b0      	blx	r6
			if (len < 0) {
   2e834:	1e04      	subs	r4, r0, #0
   2e836:	dbed      	blt.n	2e814 <ccc_set_direct+0x44>
			load.count = len / sizeof(*ccc_store);
   2e838:	08a4      	lsrs	r4, r4, #2
			for (size_t i = 0; i < load.count; i++) {
   2e83a:	ab08      	add	r3, sp, #32
			load.count = len / sizeof(*ccc_store);
   2e83c:	e9cd 3406 	strd	r3, r4, [sp, #24]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   2e840:	4a08      	ldr	r2, [pc, #32]	; (2e864 <ccc_set_direct+0x94>)
   2e842:	ab04      	add	r3, sp, #16
   2e844:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2e848:	2001      	movs	r0, #1
   2e84a:	f017 fe68 	bl	4651e <bt_gatt_foreach_attr>
}
   2e84e:	4628      	mov	r0, r5
   2e850:	b038      	add	sp, #224	; 0xe0
   2e852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e856:	4623      	mov	r3, r4
   2e858:	e7f0      	b.n	2e83c <ccc_set_direct+0x6c>
			return -EINVAL;
   2e85a:	f06f 0515 	mvn.w	r5, #21
   2e85e:	e7f6      	b.n	2e84e <ccc_set_direct+0x7e>
   2e860:	0004a9fb 	.word	0x0004a9fb
   2e864:	0002dfc5 	.word	0x0002dfc5

0002e868 <bt_gatt_attr_next>:
{
   2e868:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   2e86a:	2300      	movs	r3, #0
   2e86c:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   2e86e:	f7ff fe4d 	bl	2e50c <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   2e872:	1c41      	adds	r1, r0, #1
   2e874:	b289      	uxth	r1, r1
   2e876:	4608      	mov	r0, r1
   2e878:	4a03      	ldr	r2, [pc, #12]	; (2e888 <bt_gatt_attr_next+0x20>)
   2e87a:	ab01      	add	r3, sp, #4
   2e87c:	f017 fe4f 	bl	4651e <bt_gatt_foreach_attr>
}
   2e880:	9801      	ldr	r0, [sp, #4]
   2e882:	b003      	add	sp, #12
   2e884:	f85d fb04 	ldr.w	pc, [sp], #4
   2e888:	00046003 	.word	0x00046003

0002e88c <gatt_indicate>:
{
   2e88c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2e890:	4615      	mov	r5, r2
   2e892:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   2e894:	2294      	movs	r2, #148	; 0x94
   2e896:	6869      	ldr	r1, [r5, #4]
{
   2e898:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   2e89a:	f017 fe4b 	bl	46534 <bt_gatt_check_perm>
   2e89e:	4680      	mov	r8, r0
   2e8a0:	2800      	cmp	r0, #0
   2e8a2:	d148      	bne.n	2e936 <gatt_indicate+0xaa>
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   2e8a4:	6869      	ldr	r1, [r5, #4]
   2e8a6:	2202      	movs	r2, #2
   2e8a8:	4630      	mov	r0, r6
   2e8aa:	f017 fe77 	bl	4659c <bt_gatt_is_subscribed>
   2e8ae:	2800      	cmp	r0, #0
   2e8b0:	d044      	beq.n	2e93c <gatt_indicate+0xb0>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   2e8b2:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   2e8b6:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   2e8b8:	8aaf      	ldrh	r7, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   2e8ba:	f7ff f9cb 	bl	2dc54 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   2e8be:	3702      	adds	r7, #2
	if (!req) {
   2e8c0:	4604      	mov	r4, r0
   2e8c2:	b180      	cbz	r0, 2e8e6 <gatt_indicate+0x5a>
	req->func = func;
   2e8c4:	4b1f      	ldr	r3, [pc, #124]	; (2e944 <gatt_indicate+0xb8>)
	req->len = len;
   2e8c6:	6147      	str	r7, [r0, #20]
	req->att_op = op;
   2e8c8:	211d      	movs	r1, #29
   2e8ca:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   2e8cc:	f8c0 800c 	str.w	r8, [r0, #12]
	req->func = func;
   2e8d0:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   2e8d2:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   2e8d4:	463a      	mov	r2, r7
   2e8d6:	4630      	mov	r0, r6
   2e8d8:	f017 fa5b 	bl	45d92 <bt_att_create_pdu>
	if (!buf) {
   2e8dc:	4607      	mov	r7, r0
   2e8de:	b938      	cbnz	r0, 2e8f0 <gatt_indicate+0x64>
		bt_att_req_free(req);
   2e8e0:	4620      	mov	r0, r4
   2e8e2:	f7ff f9d9 	bl	2dc98 <bt_att_req_free>
		return -ENOMEM;
   2e8e6:	f06f 050b 	mvn.w	r5, #11
}
   2e8ea:	4628      	mov	r0, r5
   2e8ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   2e8f0:	2301      	movs	r3, #1
   2e8f2:	4642      	mov	r2, r8
   2e8f4:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   2e8f6:	f107 0a08 	add.w	sl, r7, #8
   2e8fa:	f017 fb7b 	bl	45ff4 <bt_att_set_tx_meta_data>
   2e8fe:	2102      	movs	r1, #2
   2e900:	4650      	mov	r0, sl
   2e902:	f018 fc64 	bl	471ce <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   2e906:	4680      	mov	r8, r0
   2e908:	4650      	mov	r0, sl
   2e90a:	f828 9b02 	strh.w	r9, [r8], #2
   2e90e:	8aa9      	ldrh	r1, [r5, #20]
   2e910:	f018 fc5d 	bl	471ce <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   2e914:	8aaa      	ldrh	r2, [r5, #20]
   2e916:	6929      	ldr	r1, [r5, #16]
   2e918:	4640      	mov	r0, r8
   2e91a:	f015 fcfd 	bl	44318 <memcpy>
	req->buf = buf;
   2e91e:	60a7      	str	r7, [r4, #8]
	err = bt_att_req_send(conn, req);
   2e920:	4621      	mov	r1, r4
   2e922:	4630      	mov	r0, r6
   2e924:	f017 fb2a 	bl	45f7c <bt_att_req_send>
	if (err) {
   2e928:	4605      	mov	r5, r0
   2e92a:	2800      	cmp	r0, #0
   2e92c:	d0dd      	beq.n	2e8ea <gatt_indicate+0x5e>
		bt_att_req_free(req);
   2e92e:	4620      	mov	r0, r4
   2e930:	f7ff f9b2 	bl	2dc98 <bt_att_req_free>
   2e934:	e7d9      	b.n	2e8ea <gatt_indicate+0x5e>
		return -EPERM;
   2e936:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2e93a:	e7d6      	b.n	2e8ea <gatt_indicate+0x5e>
			return -EINVAL;
   2e93c:	f06f 0515 	mvn.w	r5, #21
   2e940:	e7d3      	b.n	2e8ea <gatt_indicate+0x5e>
   2e942:	bf00      	nop
   2e944:	0004601d 	.word	0x0004601d

0002e948 <bt_gatt_indicate>:
{
   2e948:	b530      	push	{r4, r5, lr}
   2e94a:	4604      	mov	r4, r0
   2e94c:	b08b      	sub	sp, #44	; 0x2c
   2e94e:	4837      	ldr	r0, [pc, #220]	; (2ea2c <bt_gatt_indicate+0xe4>)
   2e950:	f017 fbd0 	bl	460f4 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2e954:	0742      	lsls	r2, r0, #29
{
   2e956:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2e958:	d561      	bpl.n	2ea1e <bt_gatt_indicate+0xd6>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   2e95a:	b114      	cbz	r4, 2e962 <bt_gatt_indicate+0x1a>
   2e95c:	7b63      	ldrb	r3, [r4, #13]
   2e95e:	2b07      	cmp	r3, #7
   2e960:	d160      	bne.n	2ea24 <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
   2e962:	6868      	ldr	r0, [r5, #4]
   2e964:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   2e966:	f7ff fdd1 	bl	2e50c <bt_gatt_attr_get_handle>
	if (params->uuid) {
   2e96a:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   2e96c:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   2e970:	b33a      	cbz	r2, 2e9c2 <bt_gatt_indicate+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   2e972:	a905      	add	r1, sp, #20
   2e974:	9102      	str	r1, [sp, #8]
   2e976:	492e      	ldr	r1, [pc, #184]	; (2ea30 <bt_gatt_indicate+0xe8>)
   2e978:	9101      	str	r1, [sp, #4]
   2e97a:	2101      	movs	r1, #1
	found->attr = NULL;
   2e97c:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   2e97e:	9100      	str	r1, [sp, #0]
   2e980:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   2e984:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   2e986:	f7ff fdf1 	bl	2e56c <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   2e98a:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   2e98c:	b91b      	cbnz	r3, 2e996 <bt_gatt_indicate+0x4e>
			return -ENOENT;
   2e98e:	f06f 0001 	mvn.w	r0, #1
}
   2e992:	b00b      	add	sp, #44	; 0x2c
   2e994:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   2e996:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   2e998:	9b05      	ldr	r3, [sp, #20]
   2e99a:	6818      	ldr	r0, [r3, #0]
   2e99c:	2300      	movs	r3, #0
   2e99e:	f88d 3010 	strb.w	r3, [sp, #16]
   2e9a2:	a904      	add	r1, sp, #16
   2e9a4:	f642 0303 	movw	r3, #10243	; 0x2803
   2e9a8:	f8ad 3012 	strh.w	r3, [sp, #18]
   2e9ac:	f015 fd75 	bl	4449a <bt_uuid_cmp>
   2e9b0:	b970      	cbnz	r0, 2e9d0 <bt_gatt_indicate+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   2e9b2:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   2e9b4:	68c3      	ldr	r3, [r0, #12]
   2e9b6:	799b      	ldrb	r3, [r3, #6]
   2e9b8:	069b      	lsls	r3, r3, #26
   2e9ba:	d405      	bmi.n	2e9c8 <bt_gatt_indicate+0x80>
			return -EINVAL;
   2e9bc:	f06f 0015 	mvn.w	r0, #21
   2e9c0:	e7e7      	b.n	2e992 <bt_gatt_indicate+0x4a>
		if (!data.handle) {
   2e9c2:	2800      	cmp	r0, #0
   2e9c4:	d1e8      	bne.n	2e998 <bt_gatt_indicate+0x50>
   2e9c6:	e7e2      	b.n	2e98e <bt_gatt_indicate+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   2e9c8:	f017 fd5b 	bl	46482 <bt_gatt_attr_value_handle>
   2e9cc:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   2e9d0:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   2e9d4:	b13c      	cbz	r4, 2e9e6 <bt_gatt_indicate+0x9e>
		params->_ref = 1;
   2e9d6:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   2e9d8:	4601      	mov	r1, r0
		params->_ref = 1;
   2e9da:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   2e9dc:	462a      	mov	r2, r5
   2e9de:	4620      	mov	r0, r4
   2e9e0:	f7ff ff54 	bl	2e88c <gatt_indicate>
   2e9e4:	e7d5      	b.n	2e992 <bt_gatt_indicate+0x4a>
	data.err = -ENOTCONN;
   2e9e6:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   2e9ea:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   2e9ec:	2302      	movs	r3, #2
   2e9ee:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2e9f2:	f642 1302 	movw	r3, #10498	; 0x2902
   2e9f6:	f8ad 3012 	strh.w	r3, [sp, #18]
   2e9fa:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   2e9fc:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2e9fe:	9302      	str	r3, [sp, #8]
   2ea00:	4b0c      	ldr	r3, [pc, #48]	; (2ea34 <bt_gatt_indicate+0xec>)
   2ea02:	9301      	str	r3, [sp, #4]
   2ea04:	2301      	movs	r3, #1
   2ea06:	9300      	str	r3, [sp, #0]
   2ea08:	aa04      	add	r2, sp, #16
   2ea0a:	4623      	mov	r3, r4
   2ea0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   2ea10:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2ea12:	f88d 4010 	strb.w	r4, [sp, #16]
   2ea16:	f7ff fda9 	bl	2e56c <bt_gatt_foreach_attr_type>
	return data.err;
   2ea1a:	9807      	ldr	r0, [sp, #28]
   2ea1c:	e7b9      	b.n	2e992 <bt_gatt_indicate+0x4a>
		return -EAGAIN;
   2ea1e:	f06f 000a 	mvn.w	r0, #10
   2ea22:	e7b6      	b.n	2e992 <bt_gatt_indicate+0x4a>
		return -ENOTCONN;
   2ea24:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2ea28:	e7b3      	b.n	2e992 <bt_gatt_indicate+0x4a>
   2ea2a:	bf00      	nop
   2ea2c:	200000cc 	.word	0x200000cc
   2ea30:	00046043 	.word	0x00046043
   2ea34:	0002ec5d 	.word	0x0002ec5d

0002ea38 <sc_process>:
{
   2ea38:	b573      	push	{r0, r1, r4, r5, r6, lr}
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   2ea3a:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   2ea3e:	4604      	mov	r4, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
   2ea40:	f850 3c08 	ldr.w	r3, [r0, #-8]
   2ea44:	9301      	str	r3, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   2ea46:	f1a0 0620 	sub.w	r6, r0, #32
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2ea4a:	f06f 0101 	mvn.w	r1, #1
   2ea4e:	4628      	mov	r0, r5
   2ea50:	f017 fbac 	bl	461ac <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   2ea54:	4b0d      	ldr	r3, [pc, #52]	; (2ea8c <sc_process+0x54>)
   2ea56:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   2ea5a:	4b0d      	ldr	r3, [pc, #52]	; (2ea90 <sc_process+0x58>)
   2ea5c:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   2ea60:	ab01      	add	r3, sp, #4
	sc->start = 0U;
   2ea62:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   2ea64:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   2ea68:	2304      	movs	r3, #4
	sc->start = 0U;
   2ea6a:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   2ea6e:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   2ea72:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   2ea76:	4631      	mov	r1, r6
   2ea78:	f7ff ff66 	bl	2e948 <bt_gatt_indicate>
   2ea7c:	b918      	cbnz	r0, 2ea86 <sc_process+0x4e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2ea7e:	2102      	movs	r1, #2
   2ea80:	4628      	mov	r0, r5
   2ea82:	f017 fb3d 	bl	46100 <atomic_or>
}
   2ea86:	b002      	add	sp, #8
   2ea88:	bd70      	pop	{r4, r5, r6, pc}
   2ea8a:	bf00      	nop
   2ea8c:	000495cc 	.word	0x000495cc
   2ea90:	0002e3f5 	.word	0x0002e3f5

0002ea94 <update_ccc>:
{
   2ea94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   2ea98:	4b31      	ldr	r3, [pc, #196]	; (2eb60 <update_ccc+0xcc>)
	struct bt_conn *conn = data->conn;
   2ea9a:	6814      	ldr	r4, [r2, #0]
{
   2ea9c:	4617      	mov	r7, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   2ea9e:	6882      	ldr	r2, [r0, #8]
   2eaa0:	429a      	cmp	r2, r3
{
   2eaa2:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   2eaa4:	d158      	bne.n	2eb58 <update_ccc+0xc4>
	ccc = attr->user_data;
   2eaa6:	68c6      	ldr	r6, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2eaa8:	2300      	movs	r3, #0
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   2eaaa:	f106 0901 	add.w	r9, r6, #1
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2eaae:	2b00      	cmp	r3, #0
   2eab0:	d152      	bne.n	2eb58 <update_ccc+0xc4>
		if (!cfg->value ||
   2eab2:	8933      	ldrh	r3, [r6, #8]
   2eab4:	2b00      	cmp	r3, #0
   2eab6:	d04f      	beq.n	2eb58 <update_ccc+0xc4>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   2eab8:	7831      	ldrb	r1, [r6, #0]
   2eaba:	464a      	mov	r2, r9
   2eabc:	4620      	mov	r0, r4
   2eabe:	f016 fbff 	bl	452c0 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   2eac2:	2800      	cmp	r0, #0
   2eac4:	d048      	beq.n	2eb58 <update_ccc+0xc4>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   2eac6:	f44f 7295 	mov.w	r2, #298	; 0x12a
   2eaca:	4629      	mov	r1, r5
   2eacc:	4620      	mov	r0, r4
   2eace:	f017 fd31 	bl	46534 <bt_gatt_check_perm>
		if (err) {
   2ead2:	b1a0      	cbz	r0, 2eafe <update_ccc+0x6a>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   2ead4:	2803      	cmp	r0, #3
   2ead6:	d03f      	beq.n	2eb58 <update_ccc+0xc4>
			sec = BT_SECURITY_L2;
   2ead8:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   2eada:	4620      	mov	r0, r4
			sec = BT_SECURITY_L2;
   2eadc:	bf0c      	ite	eq
   2eade:	f04f 0803 	moveq.w	r8, #3
   2eae2:	f04f 0802 	movne.w	r8, #2
			    bt_conn_get_security(conn) < sec) {
   2eae6:	f016 fbe9 	bl	452bc <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   2eaea:	4580      	cmp	r8, r0
   2eaec:	d907      	bls.n	2eafe <update_ccc+0x6a>
				if (data->sec < sec) {
   2eaee:	793a      	ldrb	r2, [r7, #4]
   2eaf0:	4542      	cmp	r2, r8
   2eaf2:	f04f 0301 	mov.w	r3, #1
   2eaf6:	d2da      	bcs.n	2eaae <update_ccc+0x1a>
					data->sec = sec;
   2eaf8:	f887 8004 	strb.w	r8, [r7, #4]
   2eafc:	e7d7      	b.n	2eaae <update_ccc+0x1a>
		gatt_ccc_changed(attr, ccc);
   2eafe:	4631      	mov	r1, r6
   2eb00:	4628      	mov	r0, r5
   2eb02:	f017 fa81 	bl	46008 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   2eb06:	4b17      	ldr	r3, [pc, #92]	; (2eb64 <update_ccc+0xd0>)
   2eb08:	429e      	cmp	r6, r3
   2eb0a:	d125      	bne.n	2eb58 <update_ccc+0xc4>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2eb0c:	7a20      	ldrb	r0, [r4, #8]
   2eb0e:	f104 0188 	add.w	r1, r4, #136	; 0x88
   2eb12:	f7ff fb5d 	bl	2e1d0 <find_sc_cfg>
	if (!cfg) {
   2eb16:	b1f8      	cbz	r0, 2eb58 <update_ccc+0xc4>
	if (!(cfg->data.start || cfg->data.end)) {
   2eb18:	8902      	ldrh	r2, [r0, #8]
   2eb1a:	8943      	ldrh	r3, [r0, #10]
   2eb1c:	ea52 0103 	orrs.w	r1, r2, r3
   2eb20:	d01a      	beq.n	2eb58 <update_ccc+0xc4>
	index = bt_conn_index(conn);
   2eb22:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   2eb24:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   2eb28:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   2eb2c:	f7fd ffe4 	bl	2caf8 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   2eb30:	490d      	ldr	r1, [pc, #52]	; (2eb68 <update_ccc+0xd4>)
   2eb32:	4a0e      	ldr	r2, [pc, #56]	; (2eb6c <update_ccc+0xd8>)
   2eb34:	2318      	movs	r3, #24
   2eb36:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   2eb3a:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   2eb3c:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   2eb3e:	4a0c      	ldr	r2, [pc, #48]	; (2eb70 <update_ccc+0xdc>)
   2eb40:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   2eb42:	aa01      	add	r2, sp, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   2eb44:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   2eb48:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   2eb4a:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   2eb4c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   2eb50:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   2eb52:	4620      	mov	r0, r4
   2eb54:	f7ff fef8 	bl	2e948 <bt_gatt_indicate>
}
   2eb58:	2001      	movs	r0, #1
   2eb5a:	b003      	add	sp, #12
   2eb5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2eb60:	0002e0dd 	.word	0x0002e0dd
   2eb64:	20000420 	.word	0x20000420
   2eb68:	20001e2c 	.word	0x20001e2c
   2eb6c:	000495cc 	.word	0x000495cc
   2eb70:	0004640d 	.word	0x0004640d

0002eb74 <bt_gatt_notify_cb>:
{
   2eb74:	b530      	push	{r4, r5, lr}
   2eb76:	4604      	mov	r4, r0
   2eb78:	b08b      	sub	sp, #44	; 0x2c
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2eb7a:	4835      	ldr	r0, [pc, #212]	; (2ec50 <bt_gatt_notify_cb+0xdc>)
   2eb7c:	f017 faba 	bl	460f4 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2eb80:	0742      	lsls	r2, r0, #29
{
   2eb82:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2eb84:	d55d      	bpl.n	2ec42 <bt_gatt_notify_cb+0xce>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   2eb86:	b114      	cbz	r4, 2eb8e <bt_gatt_notify_cb+0x1a>
   2eb88:	7b63      	ldrb	r3, [r4, #13]
   2eb8a:	2b07      	cmp	r3, #7
   2eb8c:	d15c      	bne.n	2ec48 <bt_gatt_notify_cb+0xd4>
	data.attr = params->attr;
   2eb8e:	6868      	ldr	r0, [r5, #4]
   2eb90:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   2eb92:	f7ff fcbb 	bl	2e50c <bt_gatt_attr_get_handle>
	if (params->uuid) {
   2eb96:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   2eb98:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   2eb9c:	b33a      	cbz	r2, 2ebee <bt_gatt_notify_cb+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   2eb9e:	a905      	add	r1, sp, #20
   2eba0:	9102      	str	r1, [sp, #8]
   2eba2:	492c      	ldr	r1, [pc, #176]	; (2ec54 <bt_gatt_notify_cb+0xe0>)
   2eba4:	9101      	str	r1, [sp, #4]
   2eba6:	2101      	movs	r1, #1
	found->attr = NULL;
   2eba8:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   2ebaa:	9100      	str	r1, [sp, #0]
   2ebac:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   2ebb0:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   2ebb2:	f7ff fcdb 	bl	2e56c <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   2ebb6:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   2ebb8:	b91b      	cbnz	r3, 2ebc2 <bt_gatt_notify_cb+0x4e>
			return -ENOENT;
   2ebba:	f06f 0001 	mvn.w	r0, #1
}
   2ebbe:	b00b      	add	sp, #44	; 0x2c
   2ebc0:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   2ebc2:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   2ebc4:	9b05      	ldr	r3, [sp, #20]
   2ebc6:	6818      	ldr	r0, [r3, #0]
   2ebc8:	2300      	movs	r3, #0
   2ebca:	f88d 3010 	strb.w	r3, [sp, #16]
   2ebce:	a904      	add	r1, sp, #16
   2ebd0:	f642 0303 	movw	r3, #10243	; 0x2803
   2ebd4:	f8ad 3012 	strh.w	r3, [sp, #18]
   2ebd8:	f015 fc5f 	bl	4449a <bt_uuid_cmp>
   2ebdc:	b970      	cbnz	r0, 2ebfc <bt_gatt_notify_cb+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   2ebde:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   2ebe0:	68c3      	ldr	r3, [r0, #12]
   2ebe2:	799b      	ldrb	r3, [r3, #6]
   2ebe4:	06db      	lsls	r3, r3, #27
   2ebe6:	d405      	bmi.n	2ebf4 <bt_gatt_notify_cb+0x80>
			return -EINVAL;
   2ebe8:	f06f 0015 	mvn.w	r0, #21
   2ebec:	e7e7      	b.n	2ebbe <bt_gatt_notify_cb+0x4a>
		if (!data.handle) {
   2ebee:	2800      	cmp	r0, #0
   2ebf0:	d1e8      	bne.n	2ebc4 <bt_gatt_notify_cb+0x50>
   2ebf2:	e7e2      	b.n	2ebba <bt_gatt_notify_cb+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   2ebf4:	f017 fc45 	bl	46482 <bt_gatt_attr_value_handle>
   2ebf8:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   2ebfc:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   2ec00:	b12c      	cbz	r4, 2ec0e <bt_gatt_notify_cb+0x9a>
		return gatt_notify(conn, data.handle, params);
   2ec02:	4601      	mov	r1, r0
   2ec04:	462a      	mov	r2, r5
   2ec06:	4620      	mov	r0, r4
   2ec08:	f017 fd4c 	bl	466a4 <gatt_notify>
   2ec0c:	e7d7      	b.n	2ebbe <bt_gatt_notify_cb+0x4a>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2ec0e:	f642 1202 	movw	r2, #10498	; 0x2902
   2ec12:	f8ad 2012 	strh.w	r2, [sp, #18]
   2ec16:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
   2ec18:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2ec1c:	9202      	str	r2, [sp, #8]
   2ec1e:	4a0e      	ldr	r2, [pc, #56]	; (2ec58 <bt_gatt_notify_cb+0xe4>)
	data.err = -ENOTCONN;
   2ec20:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   2ec22:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2ec24:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
   2ec28:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2ec2c:	aa04      	add	r2, sp, #16
   2ec2e:	4623      	mov	r3, r4
   2ec30:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
   2ec34:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2ec36:	f88d 4010 	strb.w	r4, [sp, #16]
   2ec3a:	f7ff fc97 	bl	2e56c <bt_gatt_foreach_attr_type>
	return data.err;
   2ec3e:	9807      	ldr	r0, [sp, #28]
   2ec40:	e7bd      	b.n	2ebbe <bt_gatt_notify_cb+0x4a>
		return -EAGAIN;
   2ec42:	f06f 000a 	mvn.w	r0, #10
   2ec46:	e7ba      	b.n	2ebbe <bt_gatt_notify_cb+0x4a>
		return -ENOTCONN;
   2ec48:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2ec4c:	e7b7      	b.n	2ebbe <bt_gatt_notify_cb+0x4a>
   2ec4e:	bf00      	nop
   2ec50:	200000cc 	.word	0x200000cc
   2ec54:	00046043 	.word	0x00046043
   2ec58:	0002ec5d 	.word	0x0002ec5d

0002ec5c <notify_cb>:
{
   2ec5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   2ec60:	4b3e      	ldr	r3, [pc, #248]	; (2ed5c <notify_cb+0x100>)
{
   2ec62:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   2ec64:	6882      	ldr	r2, [r0, #8]
   2ec66:	429a      	cmp	r2, r3
{
   2ec68:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   2ec6a:	d003      	beq.n	2ec74 <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
   2ec6c:	2701      	movs	r7, #1
}
   2ec6e:	4638      	mov	r0, r7
   2ec70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ccc = attr->user_data;
   2ec74:	68c6      	ldr	r6, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   2ec76:	4b3a      	ldr	r3, [pc, #232]	; (2ed60 <notify_cb+0x104>)
   2ec78:	429e      	cmp	r6, r3
   2ec7a:	d011      	beq.n	2eca0 <notify_cb+0x44>
		if (cfg->value != data->type) {
   2ec7c:	8932      	ldrh	r2, [r6, #8]
   2ec7e:	89ab      	ldrh	r3, [r5, #12]
   2ec80:	429a      	cmp	r2, r3
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   2ec82:	f106 0101 	add.w	r1, r6, #1
		if (cfg->value != data->type) {
   2ec86:	d1f1      	bne.n	2ec6c <notify_cb+0x10>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   2ec88:	7830      	ldrb	r0, [r6, #0]
   2ec8a:	f7fe f86b 	bl	2cd64 <bt_conn_lookup_addr_le>
		if (!conn) {
   2ec8e:	4604      	mov	r4, r0
   2ec90:	2800      	cmp	r0, #0
   2ec92:	d0eb      	beq.n	2ec6c <notify_cb+0x10>
		if (conn->state != BT_CONN_CONNECTED) {
   2ec94:	7b43      	ldrb	r3, [r0, #13]
   2ec96:	2b07      	cmp	r3, #7
   2ec98:	d027      	beq.n	2ecea <notify_cb+0x8e>
			bt_conn_unref(conn);
   2ec9a:	f016 fa7a 	bl	45192 <bt_conn_unref>
			continue;
   2ec9e:	e7e5      	b.n	2ec6c <notify_cb+0x10>
   2eca0:	4c30      	ldr	r4, [pc, #192]	; (2ed64 <notify_cb+0x108>)
   2eca2:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 2ed68 <notify_cb+0x10c>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   2eca6:	f04f 0800 	mov.w	r8, #0
   2ecaa:	2207      	movs	r2, #7
   2ecac:	4649      	mov	r1, r9
   2ecae:	4620      	mov	r0, r4
   2ecb0:	f015 fb22 	bl	442f8 <memcmp>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   2ecb4:	b178      	cbz	r0, 2ecd6 <notify_cb+0x7a>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   2ecb6:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   2ecba:	2207      	movs	r2, #7
   2ecbc:	4621      	mov	r1, r4
   2ecbe:	f7fe f86b 	bl	2cd98 <bt_conn_lookup_state_le>
			if (!conn) {
   2ecc2:	b978      	cbnz	r0, 2ece4 <notify_cb+0x88>
				sc = (struct sc_data *)data->ind_params->data;
   2ecc4:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   2ecc6:	f814 0c01 	ldrb.w	r0, [r4, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   2ecca:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   2eccc:	4621      	mov	r1, r4
   2ecce:	8853      	ldrh	r3, [r2, #2]
   2ecd0:	8812      	ldrh	r2, [r2, #0]
   2ecd2:	f7ff fa9f 	bl	2e214 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   2ecd6:	340c      	adds	r4, #12
   2ecd8:	f1b8 0f00 	cmp.w	r8, #0
   2ecdc:	d1ce      	bne.n	2ec7c <notify_cb+0x20>
   2ecde:	f04f 0801 	mov.w	r8, #1
   2ece2:	e7e2      	b.n	2ecaa <notify_cb+0x4e>
			bt_conn_unref(conn);
   2ece4:	f016 fa55 	bl	45192 <bt_conn_unref>
   2ece8:	e7f5      	b.n	2ecd6 <notify_cb+0x7a>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   2ecea:	6973      	ldr	r3, [r6, #20]
   2ecec:	b123      	cbz	r3, 2ecf8 <notify_cb+0x9c>
   2ecee:	4639      	mov	r1, r7
   2ecf0:	4798      	blx	r3
   2ecf2:	b908      	cbnz	r0, 2ecf8 <notify_cb+0x9c>
			bt_conn_unref(conn);
   2ecf4:	4620      	mov	r0, r4
   2ecf6:	e7d0      	b.n	2ec9a <notify_cb+0x3e>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   2ecf8:	4639      	mov	r1, r7
   2ecfa:	2294      	movs	r2, #148	; 0x94
   2ecfc:	4620      	mov	r0, r4
   2ecfe:	f017 fc19 	bl	46534 <bt_gatt_check_perm>
   2ed02:	4607      	mov	r7, r0
   2ed04:	2800      	cmp	r0, #0
   2ed06:	d1f5      	bne.n	2ecf4 <notify_cb+0x98>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   2ed08:	89ab      	ldrh	r3, [r5, #12]
   2ed0a:	2b02      	cmp	r3, #2
   2ed0c:	d114      	bne.n	2ed38 <notify_cb+0xdc>
   2ed0e:	8933      	ldrh	r3, [r6, #8]
   2ed10:	079a      	lsls	r2, r3, #30
   2ed12:	d405      	bmi.n	2ed20 <notify_cb+0xc4>
		bt_conn_unref(conn);
   2ed14:	4620      	mov	r0, r4
   2ed16:	f016 fa3c 	bl	45192 <bt_conn_unref>
		data->err = 0;
   2ed1a:	2300      	movs	r3, #0
   2ed1c:	60ab      	str	r3, [r5, #8]
   2ed1e:	e7a5      	b.n	2ec6c <notify_cb+0x10>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   2ed20:	692a      	ldr	r2, [r5, #16]
   2ed22:	88a9      	ldrh	r1, [r5, #4]
   2ed24:	4620      	mov	r0, r4
   2ed26:	f7ff fdb1 	bl	2e88c <gatt_indicate>
			if (err == 0) {
   2ed2a:	4606      	mov	r6, r0
   2ed2c:	b978      	cbnz	r0, 2ed4e <notify_cb+0xf2>
				data->ind_params->_ref++;
   2ed2e:	692a      	ldr	r2, [r5, #16]
   2ed30:	7d93      	ldrb	r3, [r2, #22]
   2ed32:	3301      	adds	r3, #1
   2ed34:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   2ed36:	e7ed      	b.n	2ed14 <notify_cb+0xb8>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   2ed38:	2b01      	cmp	r3, #1
   2ed3a:	d1eb      	bne.n	2ed14 <notify_cb+0xb8>
   2ed3c:	8933      	ldrh	r3, [r6, #8]
   2ed3e:	07db      	lsls	r3, r3, #31
   2ed40:	d5e8      	bpl.n	2ed14 <notify_cb+0xb8>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   2ed42:	692a      	ldr	r2, [r5, #16]
   2ed44:	88a9      	ldrh	r1, [r5, #4]
   2ed46:	4620      	mov	r0, r4
   2ed48:	f017 fcac 	bl	466a4 <gatt_notify>
   2ed4c:	4606      	mov	r6, r0
		bt_conn_unref(conn);
   2ed4e:	4620      	mov	r0, r4
   2ed50:	f016 fa1f 	bl	45192 <bt_conn_unref>
		if (err < 0) {
   2ed54:	2e00      	cmp	r6, #0
   2ed56:	db8a      	blt.n	2ec6e <notify_cb+0x12>
   2ed58:	e7df      	b.n	2ed1a <notify_cb+0xbe>
   2ed5a:	bf00      	nop
   2ed5c:	0002e0dd 	.word	0x0002e0dd
   2ed60:	20000420 	.word	0x20000420
   2ed64:	200039bb 	.word	0x200039bb
   2ed68:	0004a7b7 	.word	0x0004a7b7

0002ed6c <bt_gatt_connected>:
{
   2ed6c:	b570      	push	{r4, r5, r6, lr}
   2ed6e:	b08e      	sub	sp, #56	; 0x38
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2ed70:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
   2ed74:	4604      	mov	r4, r0
	data.conn = conn;
   2ed76:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
   2ed78:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2ed7a:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   2ed7c:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2ed80:	4629      	mov	r1, r5
   2ed82:	f015 fefb 	bl	44b7c <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   2ed86:	b190      	cbz	r0, 2edae <bt_gatt_connected+0x42>
		if (conn->id) {
   2ed88:	7a22      	ldrb	r2, [r4, #8]
   2ed8a:	b32a      	cbz	r2, 2edd8 <bt_gatt_connected+0x6c>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   2ed8c:	ae02      	add	r6, sp, #8
   2ed8e:	2104      	movs	r1, #4
   2ed90:	4630      	mov	r0, r6
   2ed92:	f013 f85e 	bl	41e52 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   2ed96:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   2ed98:	4a10      	ldr	r2, [pc, #64]	; (2eddc <bt_gatt_connected+0x70>)
   2ed9a:	2124      	movs	r1, #36	; 0x24
   2ed9c:	a805      	add	r0, sp, #20
   2ed9e:	462b      	mov	r3, r5
   2eda0:	f7fb ffaa 	bl	2acf8 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   2eda4:	aa05      	add	r2, sp, #20
   2eda6:	490e      	ldr	r1, [pc, #56]	; (2ede0 <bt_gatt_connected+0x74>)
   2eda8:	4610      	mov	r0, r2
   2edaa:	f7fa fe79 	bl	29aa0 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   2edae:	ab03      	add	r3, sp, #12
   2edb0:	4a0c      	ldr	r2, [pc, #48]	; (2ede4 <bt_gatt_connected+0x78>)
   2edb2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2edb6:	2001      	movs	r0, #1
   2edb8:	f017 fbb1 	bl	4651e <bt_gatt_foreach_attr>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   2edbc:	78e3      	ldrb	r3, [r4, #3]
   2edbe:	b94b      	cbnz	r3, 2edd4 <bt_gatt_connected+0x68>
	    bt_conn_get_security(conn) < data.sec) {
   2edc0:	4620      	mov	r0, r4
   2edc2:	f016 fa7b 	bl	452bc <bt_conn_get_security>
   2edc6:	f89d 1010 	ldrb.w	r1, [sp, #16]
	     IS_ENABLED(CONFIG_BT_GATT_AUTO_SEC_REQ)) &&
   2edca:	4288      	cmp	r0, r1
   2edcc:	d202      	bcs.n	2edd4 <bt_gatt_connected+0x68>
		int err = bt_conn_set_security(conn, data.sec);
   2edce:	4620      	mov	r0, r4
   2edd0:	f016 fa44 	bl	4525c <bt_conn_set_security>
}
   2edd4:	b00e      	add	sp, #56	; 0x38
   2edd6:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   2edd8:	9200      	str	r2, [sp, #0]
   2edda:	e7dd      	b.n	2ed98 <bt_gatt_connected+0x2c>
   2eddc:	0004a9fe 	.word	0x0004a9fe
   2ede0:	0002e7d1 	.word	0x0002e7d1
   2ede4:	0002ea95 	.word	0x0002ea95

0002ede8 <bt_gatt_att_max_mtu_changed>:
{
   2ede8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   2edea:	4b08      	ldr	r3, [pc, #32]	; (2ee0c <bt_gatt_att_max_mtu_changed+0x24>)
   2edec:	681c      	ldr	r4, [r3, #0]
   2edee:	4605      	mov	r5, r0
   2edf0:	460e      	mov	r6, r1
   2edf2:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   2edf4:	b14c      	cbz	r4, 2ee0a <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   2edf6:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   2edfa:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   2edfc:	b11b      	cbz	r3, 2ee06 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   2edfe:	463a      	mov	r2, r7
   2ee00:	4631      	mov	r1, r6
   2ee02:	4628      	mov	r0, r5
   2ee04:	4798      	blx	r3
	return node->next;
   2ee06:	6864      	ldr	r4, [r4, #4]
   2ee08:	e7f4      	b.n	2edf4 <bt_gatt_att_max_mtu_changed+0xc>
}
   2ee0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2ee0c:	20001e6c 	.word	0x20001e6c

0002ee10 <bt_gatt_encrypt_change>:
{
   2ee10:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   2ee12:	4a06      	ldr	r2, [pc, #24]	; (2ee2c <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
   2ee14:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   2ee16:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   2ee18:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   2ee1a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   2ee1e:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   2ee22:	f017 fb7c 	bl	4651e <bt_gatt_foreach_attr>
}
   2ee26:	b003      	add	sp, #12
   2ee28:	f85d fb04 	ldr.w	pc, [sp], #4
   2ee2c:	0002ea95 	.word	0x0002ea95

0002ee30 <bt_gatt_store_ccc>:
{
   2ee30:	b570      	push	{r4, r5, r6, lr}
   2ee32:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
   2ee34:	2300      	movs	r3, #0
{
   2ee36:	4604      	mov	r4, r0
   2ee38:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   2ee3a:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
   2ee3c:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
   2ee40:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   2ee42:	4a11      	ldr	r2, [pc, #68]	; (2ee88 <bt_gatt_store_ccc+0x58>)
   2ee44:	ab0d      	add	r3, sp, #52	; 0x34
   2ee46:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2ee4a:	2001      	movs	r0, #1
   2ee4c:	f017 fb67 	bl	4651e <bt_gatt_foreach_attr>
	if (id) {
   2ee50:	b1ac      	cbz	r4, 2ee7e <bt_gatt_store_ccc+0x4e>
		u8_to_dec(id_str, sizeof(id_str), id);
   2ee52:	ae03      	add	r6, sp, #12
   2ee54:	4622      	mov	r2, r4
   2ee56:	2104      	movs	r1, #4
   2ee58:	4630      	mov	r0, r6
   2ee5a:	f012 fffa 	bl	41e52 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   2ee5e:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   2ee60:	4a0a      	ldr	r2, [pc, #40]	; (2ee8c <bt_gatt_store_ccc+0x5c>)
   2ee62:	462b      	mov	r3, r5
   2ee64:	2124      	movs	r1, #36	; 0x24
   2ee66:	a804      	add	r0, sp, #16
   2ee68:	f7fb ff46 	bl	2acf8 <bt_settings_encode_key>
	if (save.count) {
   2ee6c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
   2ee6e:	b142      	cbz	r2, 2ee82 <bt_gatt_store_ccc+0x52>
		len = save.count * sizeof(*save.store);
   2ee70:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   2ee72:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
   2ee74:	a804      	add	r0, sp, #16
   2ee76:	f7fa fdb3 	bl	299e0 <settings_save_one>
}
   2ee7a:	b040      	add	sp, #256	; 0x100
   2ee7c:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   2ee7e:	9400      	str	r4, [sp, #0]
   2ee80:	e7ee      	b.n	2ee60 <bt_gatt_store_ccc+0x30>
		str = NULL;
   2ee82:	4611      	mov	r1, r2
   2ee84:	e7f6      	b.n	2ee74 <bt_gatt_store_ccc+0x44>
   2ee86:	bf00      	nop
   2ee88:	0002e079 	.word	0x0002e079
   2ee8c:	0004a9fe 	.word	0x0004a9fe

0002ee90 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   2ee90:	b5f0      	push	{r4, r5, r6, r7, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   2ee92:	4603      	mov	r3, r0
   2ee94:	4a3a      	ldr	r2, [pc, #232]	; (2ef80 <bt_gatt_disconnected+0xf0>)
	if (gatt_ccc_store.conn_list[index] != NULL) {
   2ee96:	4e3b      	ldr	r6, [pc, #236]	; (2ef84 <bt_gatt_disconnected+0xf4>)
{
   2ee98:	b08d      	sub	sp, #52	; 0x34
   2ee9a:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   2ee9c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2eea0:	2001      	movs	r0, #1
   2eea2:	f017 fb3c 	bl	4651e <bt_gatt_foreach_attr>
	uint8_t index = bt_conn_index(conn);
   2eea6:	4620      	mov	r0, r4
   2eea8:	f7fd fe26 	bl	2caf8 <bt_conn_index>
   2eeac:	4605      	mov	r5, r0
	if (gatt_ccc_store.conn_list[index] != NULL) {
   2eeae:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
   2eeb2:	b120      	cbz	r0, 2eebe <bt_gatt_disconnected+0x2e>
		bt_conn_unref(gatt_ccc_store.conn_list[index]);
   2eeb4:	f016 f96d 	bl	45192 <bt_conn_unref>
		gatt_ccc_store.conn_list[index] = NULL;
   2eeb8:	2300      	movs	r3, #0
   2eeba:	f846 3025 	str.w	r3, [r6, r5, lsl #2]

#if defined(CONFIG_BT_SETTINGS_CCC_STORE_ON_WRITE)
	gatt_ccc_conn_unqueue(conn);

	if (gatt_ccc_conn_queue_is_empty()) {
		k_work_cancel_delayable(&gatt_ccc_store.work);
   2eebe:	4832      	ldr	r0, [pc, #200]	; (2ef88 <bt_gatt_disconnected+0xf8>)
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2eec0:	f104 0588 	add.w	r5, r4, #136	; 0x88
		k_work_cancel_delayable(&gatt_ccc_store.work);
   2eec4:	f019 f9f5 	bl	482b2 <k_work_cancel_delayable>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2eec8:	7a20      	ldrb	r0, [r4, #8]
   2eeca:	4629      	mov	r1, r5
   2eecc:	f015 fe56 	bl	44b7c <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   2eed0:	b340      	cbz	r0, 2ef24 <bt_gatt_disconnected+0x94>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   2eed2:	4629      	mov	r1, r5
   2eed4:	7a20      	ldrb	r0, [r4, #8]
   2eed6:	f7ff ffab 	bl	2ee30 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
   2eeda:	4620      	mov	r0, r4
   2eedc:	f7fe ff9c 	bl	2de18 <find_cf_cfg>
	if (!cfg) {
   2eee0:	4606      	mov	r6, r0
   2eee2:	2800      	cmp	r0, #0
   2eee4:	d03e      	beq.n	2ef64 <bt_gatt_disconnected+0xd4>
		if (conn->id) {
   2eee6:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
   2eee8:	3608      	adds	r6, #8
		if (conn->id) {
   2eeea:	b16a      	cbz	r2, 2ef08 <bt_gatt_disconnected+0x78>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   2eeec:	af02      	add	r7, sp, #8
   2eeee:	2104      	movs	r1, #4
   2eef0:	4638      	mov	r0, r7
   2eef2:	f012 ffae 	bl	41e52 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   2eef6:	462b      	mov	r3, r5
   2eef8:	4a24      	ldr	r2, [pc, #144]	; (2ef8c <bt_gatt_disconnected+0xfc>)
   2eefa:	9700      	str	r7, [sp, #0]
   2eefc:	2124      	movs	r1, #36	; 0x24
   2eefe:	a803      	add	r0, sp, #12
   2ef00:	f7fb fefa 	bl	2acf8 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   2ef04:	7a23      	ldrb	r3, [r4, #8]
   2ef06:	bb7b      	cbnz	r3, 2ef68 <bt_gatt_disconnected+0xd8>
		len = 0;
   2ef08:	2701      	movs	r7, #1
		bt_settings_encode_key(key, sizeof(key), "cf",
   2ef0a:	2300      	movs	r3, #0
   2ef0c:	9300      	str	r3, [sp, #0]
   2ef0e:	4a1f      	ldr	r2, [pc, #124]	; (2ef8c <bt_gatt_disconnected+0xfc>)
   2ef10:	462b      	mov	r3, r5
   2ef12:	2124      	movs	r1, #36	; 0x24
   2ef14:	a803      	add	r0, sp, #12
   2ef16:	f7fb feef 	bl	2acf8 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   2ef1a:	463a      	mov	r2, r7
   2ef1c:	4631      	mov	r1, r6
   2ef1e:	a803      	add	r0, sp, #12
   2ef20:	f7fa fd5e 	bl	299e0 <settings_save_one>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2ef24:	7a20      	ldrb	r0, [r4, #8]
   2ef26:	4629      	mov	r1, r5
   2ef28:	f015 fe28 	bl	44b7c <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   2ef2c:	b150      	cbz	r0, 2ef44 <bt_gatt_disconnected+0xb4>
		struct addr_with_id addr_with_id = {
   2ef2e:	7a23      	ldrb	r3, [r4, #8]
   2ef30:	f88d 3010 	strb.w	r3, [sp, #16]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   2ef34:	4a16      	ldr	r2, [pc, #88]	; (2ef90 <bt_gatt_disconnected+0x100>)
		struct addr_with_id addr_with_id = {
   2ef36:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   2ef38:	ab03      	add	r3, sp, #12
   2ef3a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2ef3e:	2001      	movs	r0, #1
   2ef40:	f017 faed 	bl	4651e <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   2ef44:	4620      	mov	r0, r4
   2ef46:	f7fe ff67 	bl	2de18 <find_cf_cfg>
	if (!cfg) {
   2ef4a:	4606      	mov	r6, r0
   2ef4c:	b1a8      	cbz	r0, 2ef7a <bt_gatt_disconnected+0xea>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2ef4e:	7a20      	ldrb	r0, [r4, #8]
   2ef50:	4629      	mov	r1, r5
   2ef52:	f015 fe13 	bl	44b7c <bt_addr_le_is_bonded>
   2ef56:	b948      	cbnz	r0, 2ef6c <bt_gatt_disconnected+0xdc>
		clear_cf_cfg(cfg);
   2ef58:	4630      	mov	r0, r6
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   2ef5a:	b00d      	add	sp, #52	; 0x34
   2ef5c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		clear_cf_cfg(cfg);
   2ef60:	f7fe bfbc 	b.w	2dedc <clear_cf_cfg>
		len = 0;
   2ef64:	4607      	mov	r7, r0
   2ef66:	e7d0      	b.n	2ef0a <bt_gatt_disconnected+0x7a>
   2ef68:	2701      	movs	r7, #1
   2ef6a:	e7d6      	b.n	2ef1a <bt_gatt_disconnected+0x8a>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   2ef6c:	4629      	mov	r1, r5
   2ef6e:	1c70      	adds	r0, r6, #1
}
   2ef70:	b00d      	add	sp, #52	; 0x34
   2ef72:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   2ef76:	f017 b8d2 	b.w	4611e <bt_addr_le_copy>
}
   2ef7a:	b00d      	add	sp, #52	; 0x34
   2ef7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2ef7e:	bf00      	nop
   2ef80:	0002e2c5 	.word	0x0002e2c5
   2ef84:	20001258 	.word	0x20001258
   2ef88:	20001260 	.word	0x20001260
   2ef8c:	0004aa05 	.word	0x0004aa05
   2ef90:	0002e051 	.word	0x0002e051

0002ef94 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   2ef94:	4b06      	ldr	r3, [pc, #24]	; (2efb0 <bt_smp_accept+0x1c>)
   2ef96:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
   2ef9a:	b928      	cbnz	r0, 2efa8 <bt_smp_accept+0x14>
			continue;
		}

		smp->chan.chan.ops = &ops;
   2ef9c:	4a05      	ldr	r2, [pc, #20]	; (2efb4 <bt_smp_accept+0x20>)
   2ef9e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

		*chan = &smp->chan.chan;
   2efa2:	33ec      	adds	r3, #236	; 0xec
   2efa4:	600b      	str	r3, [r1, #0]

		return 0;
   2efa6:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
   2efa8:	f06f 000b 	mvn.w	r0, #11
}
   2efac:	4770      	bx	lr
   2efae:	bf00      	nop
   2efb0:	20001360 	.word	0x20001360
   2efb4:	000496d0 	.word	0x000496d0

0002efb8 <smp_find>:
{
   2efb8:	b508      	push	{r3, lr}
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   2efba:	4b05      	ldr	r3, [pc, #20]	; (2efd0 <smp_find+0x18>)
{
   2efbc:	4601      	mov	r1, r0
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   2efbe:	4618      	mov	r0, r3
   2efc0:	f017 fc0e 	bl	467e0 <atomic_test_bit>
	return NULL;
   2efc4:	3b04      	subs	r3, #4
   2efc6:	2800      	cmp	r0, #0
}
   2efc8:	bf14      	ite	ne
   2efca:	4618      	movne	r0, r3
   2efcc:	2000      	moveq	r0, #0
   2efce:	bd08      	pop	{r3, pc}
   2efd0:	20001364 	.word	0x20001364

0002efd4 <latch_auth_cb>:
{
   2efd4:	b510      	push	{r4, lr}
	atomic_ptr_cas(&smp->auth_cb, BT_SMP_AUTH_CB_UNINITIALIZED, (atomic_ptr_val_t)bt_auth);
   2efd6:	4a0c      	ldr	r2, [pc, #48]	; (2f008 <latch_auth_cb+0x34>)
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2efd8:	6811      	ldr	r1, [r2, #0]
   2efda:	4a0c      	ldr	r2, [pc, #48]	; (2f00c <latch_auth_cb+0x38>)
   2efdc:	f3bf 8f5b 	dmb	ish
   2efe0:	f500 73d4 	add.w	r3, r0, #424	; 0x1a8
   2efe4:	e853 4f00 	ldrex	r4, [r3]
   2efe8:	4294      	cmp	r4, r2
   2efea:	d104      	bne.n	2eff6 <latch_auth_cb+0x22>
   2efec:	e843 1c00 	strex	ip, r1, [r3]
   2eff0:	f1bc 0f00 	cmp.w	ip, #0
   2eff4:	d1f6      	bne.n	2efe4 <latch_auth_cb+0x10>
   2eff6:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2effa:	f3bf 8f5b 	dmb	ish
   2effe:	f8d0 01a8 	ldr.w	r0, [r0, #424]	; 0x1a8
   2f002:	f3bf 8f5b 	dmb	ish
}
   2f006:	bd10      	pop	{r4, pc}
   2f008:	20001d40 	.word	0x20001d40
   2f00c:	20001360 	.word	0x20001360

0002f010 <get_io_capa>:
{
   2f010:	b508      	push	{r3, lr}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   2f012:	f7ff ffdf 	bl	2efd4 <latch_auth_cb>
	if (!smp_auth_cb) {
   2f016:	4603      	mov	r3, r0
   2f018:	b1c8      	cbz	r0, 2f04e <get_io_capa+0x3e>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   2f01a:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
   2f01e:	b921      	cbnz	r1, 2f02a <get_io_capa+0x1a>
			return BT_SMP_IO_KEYBOARD_ONLY;
   2f020:	2a00      	cmp	r2, #0
   2f022:	bf0c      	ite	eq
   2f024:	2003      	moveq	r0, #3
   2f026:	2002      	movne	r0, #2
   2f028:	e010      	b.n	2f04c <get_io_capa+0x3c>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   2f02a:	b132      	cbz	r2, 2f03a <get_io_capa+0x2a>
   2f02c:	68c3      	ldr	r3, [r0, #12]
   2f02e:	b913      	cbnz	r3, 2f036 <get_io_capa+0x26>
	    (smp_auth_cb->passkey_confirm || !sc_supported)) {
   2f030:	4b09      	ldr	r3, [pc, #36]	; (2f058 <get_io_capa+0x48>)
   2f032:	781b      	ldrb	r3, [r3, #0]
   2f034:	b933      	cbnz	r3, 2f044 <get_io_capa+0x34>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   2f036:	2004      	movs	r0, #4
   2f038:	e008      	b.n	2f04c <get_io_capa+0x3c>
	if (sc_supported && smp_auth_cb->passkey_display &&
   2f03a:	4907      	ldr	r1, [pc, #28]	; (2f058 <get_io_capa+0x48>)
   2f03c:	7808      	ldrb	r0, [r1, #0]
   2f03e:	b128      	cbz	r0, 2f04c <get_io_capa+0x3c>
   2f040:	68db      	ldr	r3, [r3, #12]
   2f042:	b933      	cbnz	r3, 2f052 <get_io_capa+0x42>
	if (smp_auth_cb->passkey_entry) {
   2f044:	3a00      	subs	r2, #0
   2f046:	bf18      	it	ne
   2f048:	2201      	movne	r2, #1
   2f04a:	0050      	lsls	r0, r2, #1
}
   2f04c:	bd08      	pop	{r3, pc}
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   2f04e:	2003      	movs	r0, #3
   2f050:	e7fc      	b.n	2f04c <get_io_capa+0x3c>
		return BT_SMP_IO_DISPLAY_YESNO;
   2f052:	2001      	movs	r0, #1
   2f054:	e7fa      	b.n	2f04c <get_io_capa+0x3c>
   2f056:	bf00      	nop
   2f058:	20003b0c 	.word	0x20003b0c

0002f05c <get_auth>:
{
   2f05c:	b510      	push	{r4, lr}
	if (sc_supported) {
   2f05e:	4b0c      	ldr	r3, [pc, #48]	; (2f090 <get_auth+0x34>)
   2f060:	781b      	ldrb	r3, [r3, #0]
   2f062:	b17b      	cbz	r3, 2f084 <get_auth+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   2f064:	f001 040f 	and.w	r4, r1, #15
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   2f068:	f7ff ffd2 	bl	2f010 <get_io_capa>
	if (bondable) {
   2f06c:	4b09      	ldr	r3, [pc, #36]	; (2f094 <get_auth+0x38>)
   2f06e:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   2f070:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
   2f072:	bf0c      	ite	eq
   2f074:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   2f078:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   2f07c:	b12b      	cbz	r3, 2f08a <get_auth+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   2f07e:	f044 0001 	orr.w	r0, r4, #1
}
   2f082:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   2f084:	f001 0407 	and.w	r4, r1, #7
   2f088:	e7ee      	b.n	2f068 <get_auth+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   2f08a:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   2f08e:	e7f8      	b.n	2f082 <get_auth+0x26>
   2f090:	20003b0c 	.word	0x20003b0c
   2f094:	20000b4a 	.word	0x20000b4a

0002f098 <smp_init>:
{
   2f098:	b538      	push	{r3, r4, r5, lr}
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   2f09a:	22ec      	movs	r2, #236	; 0xec
{
   2f09c:	4605      	mov	r5, r0
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   2f09e:	2100      	movs	r1, #0
   2f0a0:	f015 f945 	bl	4432e <memset>
	if (bt_rand(smp->prnd, 16)) {
   2f0a4:	2110      	movs	r1, #16
   2f0a6:	f105 0027 	add.w	r0, r5, #39	; 0x27
   2f0aa:	f003 fc8d 	bl	329c8 <bt_rand>
   2f0ae:	4604      	mov	r4, r0
   2f0b0:	b948      	cbnz	r0, 2f0c6 <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   2f0b2:	2105      	movs	r1, #5
   2f0b4:	4628      	mov	r0, r5
   2f0b6:	f017 fc87 	bl	469c8 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   2f0ba:	f7fd fa29 	bl	2c510 <bt_pub_key_get>
   2f0be:	4b03      	ldr	r3, [pc, #12]	; (2f0cc <smp_init+0x34>)
   2f0c0:	6018      	str	r0, [r3, #0]
}
   2f0c2:	4620      	mov	r0, r4
   2f0c4:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2f0c6:	2408      	movs	r4, #8
   2f0c8:	e7fb      	b.n	2f0c2 <smp_init+0x2a>
   2f0ca:	bf00      	nop
   2f0cc:	20001e74 	.word	0x20001e74

0002f0d0 <smp_dhkey_generate>:
{
   2f0d0:	b538      	push	{r3, r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   2f0d2:	1d05      	adds	r5, r0, #4
{
   2f0d4:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   2f0d6:	2108      	movs	r1, #8
   2f0d8:	4628      	mov	r0, r5
   2f0da:	f017 fc75 	bl	469c8 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   2f0de:	4906      	ldr	r1, [pc, #24]	; (2f0f8 <smp_dhkey_generate+0x28>)
   2f0e0:	f104 0057 	add.w	r0, r4, #87	; 0x57
   2f0e4:	f7fd fa24 	bl	2c530 <bt_dh_key_gen>
	if (err) {
   2f0e8:	b120      	cbz	r0, 2f0f4 <smp_dhkey_generate+0x24>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   2f0ea:	4628      	mov	r0, r5
   2f0ec:	2108      	movs	r1, #8
   2f0ee:	f017 fba1 	bl	46834 <atomic_clear_bit>
		return BT_SMP_ERR_UNSPECIFIED;
   2f0f2:	2008      	movs	r0, #8
}
   2f0f4:	bd38      	pop	{r3, r4, r5, pc}
   2f0f6:	bf00      	nop
   2f0f8:	00046d19 	.word	0x00046d19

0002f0fc <smp_pairing_random>:
{
   2f0fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f0fe:	b09d      	sub	sp, #116	; 0x74
   2f100:	4604      	mov	r4, r0
   2f102:	460f      	mov	r7, r1
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   2f104:	f7ff ff66 	bl	2efd4 <latch_auth_cb>
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   2f108:	f104 0637 	add.w	r6, r4, #55	; 0x37
   2f10c:	68b9      	ldr	r1, [r7, #8]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   2f10e:	4605      	mov	r5, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   2f110:	2210      	movs	r2, #16
   2f112:	4630      	mov	r0, r6
   2f114:	f015 f900 	bl	44318 <memcpy>
	switch (smp->method) {
   2f118:	7a23      	ldrb	r3, [r4, #8]
   2f11a:	2b05      	cmp	r3, #5
   2f11c:	d825      	bhi.n	2f16a <smp_pairing_random+0x6e>
   2f11e:	e8df f003 	tbb	[pc, r3]
   2f122:	493d      	.short	0x493d
   2f124:	8a240349 	.word	0x8a240349
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   2f128:	4b58      	ldr	r3, [pc, #352]	; (2f28c <smp_pairing_random+0x190>)
	sys_memcpy_swap(m, u, 32);
   2f12a:	2220      	movs	r2, #32
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   2f12c:	681f      	ldr	r7, [r3, #0]
	sys_memcpy_swap(m, u, 32);
   2f12e:	eb0d 0002 	add.w	r0, sp, r2
   2f132:	f104 0157 	add.w	r1, r4, #87	; 0x57
   2f136:	f017 fb40 	bl	467ba <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   2f13a:	2220      	movs	r2, #32
   2f13c:	4639      	mov	r1, r7
   2f13e:	a810      	add	r0, sp, #64	; 0x40
   2f140:	f017 fb3b 	bl	467ba <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   2f144:	2210      	movs	r2, #16
   2f146:	f104 0127 	add.w	r1, r4, #39	; 0x27
   2f14a:	a818      	add	r0, sp, #96	; 0x60
   2f14c:	f017 fb35 	bl	467ba <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   2f150:	2210      	movs	r2, #16
   2f152:	eb0d 0002 	add.w	r0, sp, r2
   2f156:	4631      	mov	r1, r6
   2f158:	f017 fb2f 	bl	467ba <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   2f15c:	ab04      	add	r3, sp, #16
   2f15e:	2250      	movs	r2, #80	; 0x50
   2f160:	a908      	add	r1, sp, #32
   2f162:	4618      	mov	r0, r3
   2f164:	f017 fb75 	bl	46852 <bt_smp_aes_cmac>
	if (err) {
   2f168:	b110      	cbz	r0, 2f170 <smp_pairing_random+0x74>
			return BT_SMP_ERR_UNSPECIFIED;
   2f16a:	2008      	movs	r0, #8
}
   2f16c:	b01d      	add	sp, #116	; 0x74
   2f16e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(passkey, xs + 12, 4);
   2f170:	2204      	movs	r2, #4
   2f172:	a907      	add	r1, sp, #28
   2f174:	a803      	add	r0, sp, #12
   2f176:	f015 f8cf 	bl	44318 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   2f17a:	9b03      	ldr	r3, [sp, #12]
   2f17c:	4a44      	ldr	r2, [pc, #272]	; (2f290 <smp_pairing_random+0x194>)
   2f17e:	ba1b      	rev	r3, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   2f180:	1d20      	adds	r0, r4, #4
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   2f182:	fbb3 f1f2 	udiv	r1, r3, r2
   2f186:	fb02 3311 	mls	r3, r2, r1, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   2f18a:	210a      	movs	r1, #10
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   2f18c:	9303      	str	r3, [sp, #12]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   2f18e:	f017 fc1b 	bl	469c8 <atomic_set_bit>
		smp_auth_cb->passkey_confirm(smp->chan.chan.conn, passkey);
   2f192:	68eb      	ldr	r3, [r5, #12]
   2f194:	9903      	ldr	r1, [sp, #12]
   2f196:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   2f19a:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   2f19c:	4620      	mov	r0, r4
   2f19e:	210d      	movs	r1, #13
   2f1a0:	f017 fc12 	bl	469c8 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   2f1a4:	1d20      	adds	r0, r4, #4
   2f1a6:	2110      	movs	r1, #16
   2f1a8:	f017 fc0e 	bl	469c8 <atomic_set_bit>
	return smp_send_pairing_random(smp);
   2f1ac:	4620      	mov	r0, r4
   2f1ae:	f017 fc5d 	bl	46a6c <smp_send_pairing_random>
   2f1b2:	e7db      	b.n	2f16c <smp_pairing_random+0x70>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   2f1b4:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   2f1b8:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   2f1bc:	4933      	ldr	r1, [pc, #204]	; (2f28c <smp_pairing_random+0x190>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   2f1be:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   2f1c0:	ad08      	add	r5, sp, #32
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   2f1c2:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   2f1c6:	9500      	str	r5, [sp, #0]
   2f1c8:	6809      	ldr	r1, [r1, #0]
   2f1ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2f1ce:	4632      	mov	r2, r6
   2f1d0:	f104 0057 	add.w	r0, r4, #87	; 0x57
   2f1d4:	f017 fbd3 	bl	4697e <smp_f4>
   2f1d8:	2800      	cmp	r0, #0
   2f1da:	d1c6      	bne.n	2f16a <smp_pairing_random+0x6e>
	if (memcmp(smp->pcnf, cfm, 16)) {
   2f1dc:	2210      	movs	r2, #16
   2f1de:	4629      	mov	r1, r5
   2f1e0:	f104 0017 	add.w	r0, r4, #23
   2f1e4:	f015 f888 	bl	442f8 <memcmp>
   2f1e8:	b108      	cbz	r0, 2f1ee <smp_pairing_random+0xf2>
		return BT_SMP_ERR_CONFIRM_FAILED;
   2f1ea:	2004      	movs	r0, #4
   2f1ec:	e7be      	b.n	2f16c <smp_pairing_random+0x70>
		atomic_set_bit(smp->allowed_cmds,
   2f1ee:	2103      	movs	r1, #3
   2f1f0:	4620      	mov	r0, r4
   2f1f2:	f017 fbe9 	bl	469c8 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   2f1f6:	f017 fc39 	bl	46a6c <smp_send_pairing_random>
		if (err) {
   2f1fa:	2800      	cmp	r0, #0
   2f1fc:	d1b6      	bne.n	2f16c <smp_pairing_random+0x70>
		smp->passkey_round++;
   2f1fe:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   2f202:	3301      	adds	r3, #1
   2f204:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   2f206:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   2f208:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   2f20c:	d109      	bne.n	2f222 <smp_pairing_random+0x126>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   2f20e:	210d      	movs	r1, #13
   2f210:	4620      	mov	r0, r4
   2f212:	f017 fbd9 	bl	469c8 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   2f216:	2110      	movs	r1, #16
   2f218:	1d20      	adds	r0, r4, #4
   2f21a:	f017 fbd5 	bl	469c8 <atomic_set_bit>
			return 0;
   2f21e:	2000      	movs	r0, #0
   2f220:	e7a4      	b.n	2f16c <smp_pairing_random+0x70>
		if (bt_rand(smp->prnd, 16)) {
   2f222:	2110      	movs	r1, #16
   2f224:	f104 0027 	add.w	r0, r4, #39	; 0x27
   2f228:	f003 fbce 	bl	329c8 <bt_rand>
   2f22c:	3800      	subs	r0, #0
   2f22e:	bf18      	it	ne
   2f230:	2001      	movne	r0, #1
   2f232:	00c0      	lsls	r0, r0, #3
   2f234:	e79a      	b.n	2f16c <smp_pairing_random+0x70>
		if (bt_rand(smp->prnd, 16)) {
   2f236:	2110      	movs	r1, #16
   2f238:	f104 0027 	add.w	r0, r4, #39	; 0x27
   2f23c:	f003 fbc4 	bl	329c8 <bt_rand>
   2f240:	2800      	cmp	r0, #0
   2f242:	d192      	bne.n	2f16a <smp_pairing_random+0x6e>
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   2f244:	b305      	cbz	r5, 2f288 <smp_pairing_random+0x18c>
   2f246:	692b      	ldr	r3, [r5, #16]
   2f248:	b1f3      	cbz	r3, 2f288 <smp_pairing_random+0x18c>
			struct bt_conn_oob_info info = {
   2f24a:	4b12      	ldr	r3, [pc, #72]	; (2f294 <smp_pairing_random+0x198>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   2f24c:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
   2f24e:	881b      	ldrh	r3, [r3, #0]
   2f250:	f8ad 3020 	strh.w	r3, [sp, #32]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   2f254:	7ca3      	ldrb	r3, [r4, #18]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   2f256:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   2f258:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   2f25c:	d412      	bmi.n	2f284 <smp_pairing_random+0x188>
   2f25e:	2b00      	cmp	r3, #0
   2f260:	bf14      	ite	ne
   2f262:	2301      	movne	r3, #1
   2f264:	2303      	moveq	r3, #3
	info->lesc.oob_config = oob_config;
   2f266:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			smp->oobd_local = NULL;
   2f26a:	2300      	movs	r3, #0
			smp->oobd_remote = NULL;
   2f26c:	e9c4 3338 	strd	r3, r3, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   2f270:	1d20      	adds	r0, r4, #4
   2f272:	210c      	movs	r1, #12
   2f274:	f017 fba8 	bl	469c8 <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   2f278:	692b      	ldr	r3, [r5, #16]
   2f27a:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   2f27e:	a908      	add	r1, sp, #32
   2f280:	4798      	blx	r3
			return 0;
   2f282:	e7cc      	b.n	2f21e <smp_pairing_random+0x122>
		if (rsp_oob_present) {
   2f284:	005b      	lsls	r3, r3, #1
   2f286:	e7ee      	b.n	2f266 <smp_pairing_random+0x16a>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   2f288:	2002      	movs	r0, #2
   2f28a:	e76f      	b.n	2f16c <smp_pairing_random+0x70>
   2f28c:	20001e74 	.word	0x20001e74
   2f290:	000f4240 	.word	0x000f4240
   2f294:	00048ea5 	.word	0x00048ea5

0002f298 <compute_and_check_and_send_periph_dhcheck>:
{
   2f298:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)memset(r, 0, sizeof(r));
   2f29c:	2210      	movs	r2, #16
{
   2f29e:	b0a3      	sub	sp, #140	; 0x8c
   2f2a0:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
   2f2a2:	2100      	movs	r1, #0
   2f2a4:	eb0d 0002 	add.w	r0, sp, r2
   2f2a8:	f015 f841 	bl	4432e <memset>
	switch (smp->method) {
   2f2ac:	7a23      	ldrb	r3, [r4, #8]
   2f2ae:	2b05      	cmp	r3, #5
   2f2b0:	d82a      	bhi.n	2f308 <compute_and_check_and_send_periph_dhcheck+0x70>
   2f2b2:	e8df f003 	tbb	[pc, r3]
   2f2b6:	0309      	.short	0x0309
   2f2b8:	2d290903 	.word	0x2d290903
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   2f2bc:	2204      	movs	r2, #4
   2f2be:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
   2f2c2:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   2f2c4:	f015 f828 	bl	44318 <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
   2f2c8:	4b64      	ldr	r3, [pc, #400]	; (2f45c <compute_and_check_and_send_periph_dhcheck+0x1c4>)
		   &smp->chan.chan.conn->le.init_addr,
   2f2ca:	f8d4 90ec 	ldr.w	r9, [r4, #236]	; 0xec
	uint8_t m[53] = { 0x00, /* counter */
   2f2ce:	aa14      	add	r2, sp, #80	; 0x50
   2f2d0:	f103 0630 	add.w	r6, r3, #48	; 0x30
   2f2d4:	6818      	ldr	r0, [r3, #0]
   2f2d6:	6859      	ldr	r1, [r3, #4]
   2f2d8:	4615      	mov	r5, r2
   2f2da:	c503      	stmia	r5!, {r0, r1}
   2f2dc:	3308      	adds	r3, #8
   2f2de:	42b3      	cmp	r3, r6
   2f2e0:	462a      	mov	r2, r5
   2f2e2:	d1f7      	bne.n	2f2d4 <compute_and_check_and_send_periph_dhcheck+0x3c>
   2f2e4:	6818      	ldr	r0, [r3, #0]
   2f2e6:	791b      	ldrb	r3, [r3, #4]
   2f2e8:	6028      	str	r0, [r5, #0]
   2f2ea:	712b      	strb	r3, [r5, #4]
	sys_memcpy_swap(ws, w, 32);
   2f2ec:	ad0c      	add	r5, sp, #48	; 0x30
   2f2ee:	2220      	movs	r2, #32
   2f2f0:	f104 0197 	add.w	r1, r4, #151	; 0x97
   2f2f4:	4628      	mov	r0, r5
   2f2f6:	f017 fa60 	bl	467ba <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   2f2fa:	4859      	ldr	r0, [pc, #356]	; (2f460 <compute_and_check_and_send_periph_dhcheck+0x1c8>)
   2f2fc:	ab08      	add	r3, sp, #32
   2f2fe:	2220      	movs	r2, #32
   2f300:	4629      	mov	r1, r5
   2f302:	f017 faa6 	bl	46852 <bt_smp_aes_cmac>
	if (err) {
   2f306:	b158      	cbz	r0, 2f320 <compute_and_check_and_send_periph_dhcheck+0x88>
		return BT_SMP_ERR_UNSPECIFIED;
   2f308:	2008      	movs	r0, #8
}
   2f30a:	b023      	add	sp, #140	; 0x8c
   2f30c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (smp->oobd_remote) {
   2f310:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   2f314:	2900      	cmp	r1, #0
   2f316:	d0d7      	beq.n	2f2c8 <compute_and_check_and_send_periph_dhcheck+0x30>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   2f318:	2210      	movs	r2, #16
   2f31a:	eb0d 0002 	add.w	r0, sp, r2
   2f31e:	e7d1      	b.n	2f2c4 <compute_and_check_and_send_periph_dhcheck+0x2c>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   2f320:	f104 0737 	add.w	r7, r4, #55	; 0x37
	sys_memcpy_swap(m + 5, n1, 16);
   2f324:	2210      	movs	r2, #16
   2f326:	4639      	mov	r1, r7
   2f328:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   2f32c:	f104 0827 	add.w	r8, r4, #39	; 0x27
	sys_memcpy_swap(m + 5, n1, 16);
   2f330:	f017 fa43 	bl	467ba <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   2f334:	2210      	movs	r2, #16
   2f336:	4641      	mov	r1, r8
   2f338:	f10d 0065 	add.w	r0, sp, #101	; 0x65
   2f33c:	f017 fa3d 	bl	467ba <sys_memcpy_swap>
	m[37] = a1->type;
   2f340:	f899 308f 	ldrb.w	r3, [r9, #143]	; 0x8f
   2f344:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   2f348:	2206      	movs	r2, #6
   2f34a:	f109 0190 	add.w	r1, r9, #144	; 0x90
   2f34e:	f10d 0076 	add.w	r0, sp, #118	; 0x76
   2f352:	f017 fa32 	bl	467ba <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   2f356:	f104 06c7 	add.w	r6, r4, #199	; 0xc7
	m[44] = a2->type;
   2f35a:	f899 3096 	ldrb.w	r3, [r9, #150]	; 0x96
   2f35e:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   2f362:	2206      	movs	r2, #6
   2f364:	f109 0197 	add.w	r1, r9, #151	; 0x97
   2f368:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
   2f36c:	f017 fa25 	bl	467ba <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   2f370:	4633      	mov	r3, r6
   2f372:	2235      	movs	r2, #53	; 0x35
   2f374:	a914      	add	r1, sp, #80	; 0x50
   2f376:	a808      	add	r0, sp, #32
   2f378:	f017 fa6b 	bl	46852 <bt_smp_aes_cmac>
	if (err) {
   2f37c:	2800      	cmp	r0, #0
   2f37e:	d1c3      	bne.n	2f308 <compute_and_check_and_send_periph_dhcheck+0x70>
	sys_mem_swap(mackey, 16);
   2f380:	4630      	mov	r0, r6
   2f382:	f017 faa2 	bl	468ca <sys_mem_swap.constprop.0>
		   smp->tk)) {
   2f386:	f104 0947 	add.w	r9, r4, #71	; 0x47
	m[0] = 0x01;
   2f38a:	2301      	movs	r3, #1
   2f38c:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   2f390:	2235      	movs	r2, #53	; 0x35
   2f392:	464b      	mov	r3, r9
   2f394:	a914      	add	r1, sp, #80	; 0x50
   2f396:	a808      	add	r0, sp, #32
   2f398:	f017 fa5b 	bl	46852 <bt_smp_aes_cmac>
	if (err) {
   2f39c:	2800      	cmp	r0, #0
   2f39e:	d1b3      	bne.n	2f308 <compute_and_check_and_send_periph_dhcheck+0x70>
	sys_mem_swap(ltk, 16);
   2f3a0:	4648      	mov	r0, r9
   2f3a2:	f017 fa92 	bl	468ca <sys_mem_swap.constprop.0>
		   &smp->chan.chan.conn->le.resp_addr,
   2f3a6:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   2f3aa:	aa14      	add	r2, sp, #80	; 0x50
   2f3ac:	9203      	str	r2, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
   2f3ae:	f103 028f 	add.w	r2, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
   2f3b2:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   2f3b4:	9301      	str	r3, [sp, #4]
   2f3b6:	f104 0311 	add.w	r3, r4, #17
   2f3ba:	9202      	str	r2, [sp, #8]
   2f3bc:	9300      	str	r3, [sp, #0]
   2f3be:	463a      	mov	r2, r7
   2f3c0:	ab04      	add	r3, sp, #16
   2f3c2:	4641      	mov	r1, r8
   2f3c4:	4630      	mov	r0, r6
   2f3c6:	f017 fa8e 	bl	468e6 <smp_f6>
   2f3ca:	2800      	cmp	r0, #0
   2f3cc:	d19c      	bne.n	2f308 <compute_and_check_and_send_periph_dhcheck+0x70>
	if (smp->method == LE_SC_OOB) {
   2f3ce:	7a23      	ldrb	r3, [r4, #8]
   2f3d0:	2b05      	cmp	r3, #5
   2f3d2:	d107      	bne.n	2f3e4 <compute_and_check_and_send_periph_dhcheck+0x14c>
		if (smp->oobd_local) {
   2f3d4:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
			memcpy(r, smp->oobd_local->r, sizeof(r));
   2f3d8:	2210      	movs	r2, #16
   2f3da:	eb0d 0002 	add.w	r0, sp, r2
		if (smp->oobd_local) {
   2f3de:	b3b9      	cbz	r1, 2f450 <compute_and_check_and_send_periph_dhcheck+0x1b8>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   2f3e0:	f014 ff9a 	bl	44318 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
   2f3e4:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   2f3e8:	9503      	str	r5, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
   2f3ea:	f103 0296 	add.w	r2, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
   2f3ee:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   2f3f0:	9301      	str	r3, [sp, #4]
   2f3f2:	f104 030a 	add.w	r3, r4, #10
   2f3f6:	9202      	str	r2, [sp, #8]
   2f3f8:	9300      	str	r3, [sp, #0]
   2f3fa:	4642      	mov	r2, r8
   2f3fc:	ab04      	add	r3, sp, #16
   2f3fe:	4639      	mov	r1, r7
   2f400:	4630      	mov	r0, r6
   2f402:	f017 fa70 	bl	468e6 <smp_f6>
   2f406:	2800      	cmp	r0, #0
   2f408:	f47f af7e 	bne.w	2f308 <compute_and_check_and_send_periph_dhcheck+0x70>
	if (memcmp(smp->e, re, 16)) {
   2f40c:	4629      	mov	r1, r5
   2f40e:	2210      	movs	r2, #16
   2f410:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   2f414:	f014 ff70 	bl	442f8 <memcmp>
   2f418:	4605      	mov	r5, r0
   2f41a:	b9e0      	cbnz	r0, 2f456 <compute_and_check_and_send_periph_dhcheck+0x1be>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   2f41c:	210d      	movs	r1, #13
   2f41e:	4620      	mov	r0, r4
   2f420:	f017 fb05 	bl	46a2e <smp_create_pdu.constprop.0>
	if (!buf) {
   2f424:	4606      	mov	r6, r0
   2f426:	2800      	cmp	r0, #0
   2f428:	f43f af6e 	beq.w	2f308 <compute_and_check_and_send_periph_dhcheck+0x70>
   2f42c:	2110      	movs	r1, #16
   2f42e:	3008      	adds	r0, #8
   2f430:	f017 fecd 	bl	471ce <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   2f434:	2210      	movs	r2, #16
   2f436:	a914      	add	r1, sp, #80	; 0x50
   2f438:	f014 ff6e 	bl	44318 <memcpy>
	smp_send(smp, buf, NULL, NULL);
   2f43c:	4631      	mov	r1, r6
   2f43e:	4620      	mov	r0, r4
   2f440:	f017 fa27 	bl	46892 <smp_send.constprop.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2f444:	1d20      	adds	r0, r4, #4
   2f446:	2101      	movs	r1, #1
   2f448:	f017 fabe 	bl	469c8 <atomic_set_bit>
	return 0;
   2f44c:	4628      	mov	r0, r5
   2f44e:	e75c      	b.n	2f30a <compute_and_check_and_send_periph_dhcheck+0x72>
			memset(r, 0, sizeof(r));
   2f450:	f014 ff6d 	bl	4432e <memset>
   2f454:	e7c6      	b.n	2f3e4 <compute_and_check_and_send_periph_dhcheck+0x14c>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   2f456:	200b      	movs	r0, #11
   2f458:	e757      	b.n	2f30a <compute_and_check_and_send_periph_dhcheck+0x72>
   2f45a:	bf00      	nop
   2f45c:	00048ea7 	.word	0x00048ea7
   2f460:	0004aa2e 	.word	0x0004aa2e

0002f464 <smp_send_pairing_confirm>:
{
   2f464:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
   2f466:	7a04      	ldrb	r4, [r0, #8]
   2f468:	2c02      	cmp	r4, #2
{
   2f46a:	4605      	mov	r5, r0
	switch (smp->method) {
   2f46c:	d823      	bhi.n	2f4b6 <smp_send_pairing_confirm+0x52>
   2f46e:	b144      	cbz	r4, 2f482 <smp_send_pairing_confirm+0x1e>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   2f470:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   2f474:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   2f478:	40dc      	lsrs	r4, r3
   2f47a:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   2f47e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2f482:	2103      	movs	r1, #3
   2f484:	4628      	mov	r0, r5
   2f486:	f017 fad2 	bl	46a2e <smp_create_pdu.constprop.0>
	if (!buf) {
   2f48a:	4606      	mov	r6, r0
   2f48c:	b1a8      	cbz	r0, 2f4ba <smp_send_pairing_confirm+0x56>
   2f48e:	2110      	movs	r1, #16
   2f490:	3008      	adds	r0, #8
   2f492:	f017 fe9c 	bl	471ce <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   2f496:	9000      	str	r0, [sp, #0]
   2f498:	480f      	ldr	r0, [pc, #60]	; (2f4d8 <smp_send_pairing_confirm+0x74>)
   2f49a:	4623      	mov	r3, r4
   2f49c:	6800      	ldr	r0, [r0, #0]
   2f49e:	f105 0227 	add.w	r2, r5, #39	; 0x27
   2f4a2:	f105 0157 	add.w	r1, r5, #87	; 0x57
   2f4a6:	f017 fa6a 	bl	4697e <smp_f4>
   2f4aa:	4604      	mov	r4, r0
   2f4ac:	b150      	cbz	r0, 2f4c4 <smp_send_pairing_confirm+0x60>
		net_buf_unref(buf);
   2f4ae:	4630      	mov	r0, r6
   2f4b0:	f00c ff2e 	bl	3c310 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   2f4b4:	e001      	b.n	2f4ba <smp_send_pairing_confirm+0x56>
	switch (smp->method) {
   2f4b6:	2c03      	cmp	r4, #3
   2f4b8:	d002      	beq.n	2f4c0 <smp_send_pairing_confirm+0x5c>
		return BT_SMP_ERR_UNSPECIFIED;
   2f4ba:	2008      	movs	r0, #8
}
   2f4bc:	b002      	add	sp, #8
   2f4be:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   2f4c0:	2400      	movs	r4, #0
   2f4c2:	e7de      	b.n	2f482 <smp_send_pairing_confirm+0x1e>
	smp_send(smp, buf, NULL, NULL);
   2f4c4:	4631      	mov	r1, r6
   2f4c6:	4628      	mov	r0, r5
   2f4c8:	f017 f9e3 	bl	46892 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2f4cc:	1d28      	adds	r0, r5, #4
   2f4ce:	4621      	mov	r1, r4
   2f4d0:	f017 f9b0 	bl	46834 <atomic_clear_bit>
	return 0;
   2f4d4:	4620      	mov	r0, r4
   2f4d6:	e7f1      	b.n	2f4bc <smp_send_pairing_confirm+0x58>
   2f4d8:	20001e74 	.word	0x20001e74

0002f4dc <smp_public_key_periph>:
{
   2f4dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2f4e0:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   2f4e2:	f7ff fd77 	bl	2efd4 <latch_auth_cb>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   2f4e6:	1d26      	adds	r6, r4, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   2f4e8:	4607      	mov	r7, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   2f4ea:	210e      	movs	r1, #14
   2f4ec:	4630      	mov	r0, r6
   2f4ee:	f017 f977 	bl	467e0 <atomic_test_bit>
   2f4f2:	b140      	cbz	r0, 2f506 <smp_public_key_periph+0x2a>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   2f4f4:	210c      	movs	r1, #12
   2f4f6:	4620      	mov	r0, r4
   2f4f8:	f017 fa99 	bl	46a2e <smp_create_pdu.constprop.0>
	if (!req_buf) {
   2f4fc:	4605      	mov	r5, r0
   2f4fe:	b960      	cbnz	r0, 2f51a <smp_public_key_periph+0x3e>
{
   2f500:	2008      	movs	r0, #8
}
   2f502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   2f506:	4b46      	ldr	r3, [pc, #280]	; (2f620 <smp_public_key_periph+0x144>)
   2f508:	2220      	movs	r2, #32
   2f50a:	6819      	ldr	r1, [r3, #0]
   2f50c:	f104 0057 	add.w	r0, r4, #87	; 0x57
   2f510:	f014 fef2 	bl	442f8 <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   2f514:	2800      	cmp	r0, #0
   2f516:	d1ed      	bne.n	2f4f4 <smp_public_key_periph+0x18>
   2f518:	e7f2      	b.n	2f500 <smp_public_key_periph+0x24>
   2f51a:	2140      	movs	r1, #64	; 0x40
   2f51c:	3008      	adds	r0, #8
   2f51e:	f017 fe56 	bl	471ce <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   2f522:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 2f620 <smp_public_key_periph+0x144>
   2f526:	2220      	movs	r2, #32
   2f528:	f8d9 1000 	ldr.w	r1, [r9]
   2f52c:	4680      	mov	r8, r0
   2f52e:	f014 fef3 	bl	44318 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   2f532:	f8d9 1000 	ldr.w	r1, [r9]
   2f536:	2220      	movs	r2, #32
   2f538:	4411      	add	r1, r2
   2f53a:	eb08 0002 	add.w	r0, r8, r2
   2f53e:	f014 feeb 	bl	44318 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   2f542:	4629      	mov	r1, r5
   2f544:	4620      	mov	r0, r4
   2f546:	f017 f9a4 	bl	46892 <smp_send.constprop.0>
	switch (smp->method) {
   2f54a:	7a23      	ldrb	r3, [r4, #8]
   2f54c:	2b05      	cmp	r3, #5
   2f54e:	d8d7      	bhi.n	2f500 <smp_public_key_periph+0x24>
   2f550:	a201      	add	r2, pc, #4	; (adr r2, 2f558 <smp_public_key_periph+0x7c>)
   2f552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2f556:	bf00      	nop
   2f558:	0002f571 	.word	0x0002f571
   2f55c:	0002f5f5 	.word	0x0002f5f5
   2f560:	0002f59d 	.word	0x0002f59d
   2f564:	0002f571 	.word	0x0002f571
   2f568:	0002f501 	.word	0x0002f501
   2f56c:	0002f615 	.word	0x0002f615
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   2f570:	2104      	movs	r1, #4
   2f572:	4620      	mov	r0, r4
   2f574:	f017 fa28 	bl	469c8 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   2f578:	f7ff ff74 	bl	2f464 <smp_send_pairing_confirm>
		if (err) {
   2f57c:	2800      	cmp	r0, #0
   2f57e:	d1c0      	bne.n	2f502 <smp_public_key_periph+0x26>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   2f580:	4630      	mov	r0, r6
   2f582:	2107      	movs	r1, #7
   2f584:	f017 fa20 	bl	469c8 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   2f588:	2008      	movs	r0, #8
   2f58a:	f7ff fd15 	bl	2efb8 <smp_find>
   2f58e:	2800      	cmp	r0, #0
   2f590:	d143      	bne.n	2f61a <smp_public_key_periph+0x13e>
		return smp_dhkey_generate(smp);
   2f592:	4620      	mov	r0, r4
}
   2f594:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		return smp_dhkey_generate(smp);
   2f598:	f7ff bd9a 	b.w	2f0d0 <smp_dhkey_generate>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   2f59c:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   2f59e:	f8d4 70ec 	ldr.w	r7, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   2f5a2:	f7ff fd17 	bl	2efd4 <latch_auth_cb>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   2f5a6:	2104      	movs	r1, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   2f5a8:	4605      	mov	r5, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   2f5aa:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   2f5ae:	f003 fa0b 	bl	329c8 <bt_rand>
   2f5b2:	2800      	cmp	r0, #0
   2f5b4:	d1a4      	bne.n	2f500 <smp_public_key_periph+0x24>
		smp->passkey %= 1000000;
   2f5b6:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   2f5ba:	4a1a      	ldr	r2, [pc, #104]	; (2f624 <smp_public_key_periph+0x148>)
   2f5bc:	fbb3 f1f2 	udiv	r1, r3, r2
   2f5c0:	fb02 3311 	mls	r3, r2, r1, r3
   2f5c4:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	smp->passkey_round = 0U;
   2f5c8:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (smp_auth_cb && smp_auth_cb->passkey_display) {
   2f5cc:	b155      	cbz	r5, 2f5e4 <smp_public_key_periph+0x108>
   2f5ce:	686b      	ldr	r3, [r5, #4]
   2f5d0:	b143      	cbz	r3, 2f5e4 <smp_public_key_periph+0x108>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   2f5d2:	210b      	movs	r1, #11
   2f5d4:	4630      	mov	r0, r6
   2f5d6:	f017 f9f7 	bl	469c8 <atomic_set_bit>
		smp_auth_cb->passkey_display(conn, smp->passkey);
   2f5da:	686b      	ldr	r3, [r5, #4]
   2f5dc:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   2f5e0:	4638      	mov	r0, r7
   2f5e2:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   2f5e4:	2103      	movs	r1, #3
   2f5e6:	4620      	mov	r0, r4
   2f5e8:	f017 f9ee 	bl	469c8 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   2f5ec:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   2f5ee:	f017 f9eb 	bl	469c8 <atomic_set_bit>
		break;
   2f5f2:	e7c5      	b.n	2f580 <smp_public_key_periph+0xa4>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   2f5f4:	4620      	mov	r0, r4
   2f5f6:	2103      	movs	r1, #3
   2f5f8:	f017 f9e6 	bl	469c8 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   2f5fc:	210e      	movs	r1, #14
   2f5fe:	f017 f9e3 	bl	469c8 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   2f602:	4630      	mov	r0, r6
   2f604:	210a      	movs	r1, #10
   2f606:	f017 f9df 	bl	469c8 <atomic_set_bit>
		smp_auth_cb->passkey_entry(smp->chan.chan.conn);
   2f60a:	68bb      	ldr	r3, [r7, #8]
   2f60c:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   2f610:	4798      	blx	r3
		break;
   2f612:	e7b5      	b.n	2f580 <smp_public_key_periph+0xa4>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   2f614:	2104      	movs	r1, #4
   2f616:	4620      	mov	r0, r4
   2f618:	e7e9      	b.n	2f5ee <smp_public_key_periph+0x112>
	return 0;
   2f61a:	2000      	movs	r0, #0
   2f61c:	e771      	b.n	2f502 <smp_public_key_periph+0x26>
   2f61e:	bf00      	nop
   2f620:	20001e74 	.word	0x20001e74
   2f624:	000f4240 	.word	0x000f4240

0002f628 <smp_public_key>:
{
   2f628:	b570      	push	{r4, r5, r6, lr}
   2f62a:	460d      	mov	r5, r1
   2f62c:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   2f62e:	f7ff fcd1 	bl	2efd4 <latch_auth_cb>
	struct bt_smp_public_key *req = (void *)buf->data;
   2f632:	68ae      	ldr	r6, [r5, #8]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   2f634:	f104 0557 	add.w	r5, r4, #87	; 0x57
   2f638:	2220      	movs	r2, #32
   2f63a:	4631      	mov	r1, r6
   2f63c:	4628      	mov	r0, r5
   2f63e:	f014 fe6b 	bl	44318 <memcpy>
	memcpy(&smp->pkey[BT_PUB_KEY_COORD_LEN], req->y, BT_PUB_KEY_COORD_LEN);
   2f642:	2220      	movs	r2, #32
   2f644:	18b1      	adds	r1, r6, r2
   2f646:	f104 0077 	add.w	r0, r4, #119	; 0x77
   2f64a:	f014 fe65 	bl	44318 <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   2f64e:	4628      	mov	r0, r5
   2f650:	f7fc fee8 	bl	2c424 <bt_pub_key_is_debug>
   2f654:	b940      	cbnz	r0, 2f668 <smp_public_key+0x40>
	if (!sc_public_key) {
   2f656:	4b16      	ldr	r3, [pc, #88]	; (2f6b0 <smp_public_key+0x88>)
   2f658:	681d      	ldr	r5, [r3, #0]
   2f65a:	bb1d      	cbnz	r5, 2f6a4 <smp_public_key+0x7c>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   2f65c:	1d20      	adds	r0, r4, #4
   2f65e:	2106      	movs	r1, #6
   2f660:	f017 f9b2 	bl	469c8 <atomic_set_bit>
	return 0;
   2f664:	4628      	mov	r0, r5
		return 0;
   2f666:	e01c      	b.n	2f6a2 <smp_public_key+0x7a>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   2f668:	210e      	movs	r1, #14
   2f66a:	1d20      	adds	r0, r4, #4
   2f66c:	f017 f9ac 	bl	469c8 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   2f670:	f8d4 50ec 	ldr.w	r5, [r4, #236]	; 0xec
	if (!conn->le.keys) {
   2f674:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   2f678:	b933      	cbnz	r3, 2f688 <smp_public_key+0x60>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   2f67a:	7a28      	ldrb	r0, [r5, #8]
   2f67c:	f105 0188 	add.w	r1, r5, #136	; 0x88
   2f680:	f000 fb7a 	bl	2fd78 <bt_keys_get_addr>
   2f684:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   2f688:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   2f68c:	2b00      	cmp	r3, #0
   2f68e:	d0e2      	beq.n	2f656 <smp_public_key+0x2e>
   2f690:	89da      	ldrh	r2, [r3, #14]
   2f692:	f002 0224 	and.w	r2, r2, #36	; 0x24
   2f696:	2a00      	cmp	r2, #0
   2f698:	d0dd      	beq.n	2f656 <smp_public_key+0x2e>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   2f69a:	7b5b      	ldrb	r3, [r3, #13]
   2f69c:	079b      	lsls	r3, r3, #30
   2f69e:	d4da      	bmi.n	2f656 <smp_public_key+0x2e>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   2f6a0:	2003      	movs	r0, #3
}
   2f6a2:	bd70      	pop	{r4, r5, r6, pc}
	err = smp_public_key_periph(smp);
   2f6a4:	4620      	mov	r0, r4
}
   2f6a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = smp_public_key_periph(smp);
   2f6aa:	f7ff bf17 	b.w	2f4dc <smp_public_key_periph>
   2f6ae:	bf00      	nop
   2f6b0:	20001e74 	.word	0x20001e74

0002f6b4 <bt_smp_connected>:
{
   2f6b4:	b538      	push	{r3, r4, r5, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
   2f6b6:	490b      	ldr	r1, [pc, #44]	; (2f6e4 <bt_smp_connected+0x30>)
{
   2f6b8:	4604      	mov	r4, r0
	k_work_init_delayable(&smp->work, smp_timeout);
   2f6ba:	f1a0 05ec 	sub.w	r5, r0, #236	; 0xec
   2f6be:	308c      	adds	r0, #140	; 0x8c
   2f6c0:	f018 fde9 	bl	48296 <k_work_init_delayable>
	smp_reset(smp);
   2f6c4:	4628      	mov	r0, r5
   2f6c6:	f017 fa57 	bl	46b78 <smp_reset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2f6ca:	f3bf 8f5b 	dmb	ish
   2f6ce:	4b06      	ldr	r3, [pc, #24]	; (2f6e8 <bt_smp_connected+0x34>)
   2f6d0:	34bc      	adds	r4, #188	; 0xbc
   2f6d2:	e854 2f00 	ldrex	r2, [r4]
   2f6d6:	e844 3100 	strex	r1, r3, [r4]
   2f6da:	2900      	cmp	r1, #0
   2f6dc:	d1f9      	bne.n	2f6d2 <bt_smp_connected+0x1e>
   2f6de:	f3bf 8f5b 	dmb	ish
}
   2f6e2:	bd38      	pop	{r3, r4, r5, pc}
   2f6e4:	00046f39 	.word	0x00046f39
   2f6e8:	20001360 	.word	0x20001360

0002f6ec <smp_pairing_req>:
{
   2f6ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2f6f0:	460d      	mov	r5, r1
	struct bt_conn *conn = smp->chan.chan.conn;
   2f6f2:	f8d0 70ec 	ldr.w	r7, [r0, #236]	; 0xec
{
   2f6f6:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   2f6f8:	f7ff fc6c 	bl	2efd4 <latch_auth_cb>
	struct bt_smp_pairing *req = (void *)buf->data;
   2f6fc:	68ad      	ldr	r5, [r5, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   2f6fe:	78eb      	ldrb	r3, [r5, #3]
   2f700:	3b07      	subs	r3, #7
   2f702:	2b09      	cmp	r3, #9
   2f704:	d903      	bls.n	2f70e <smp_pairing_req+0x22>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   2f706:	2006      	movs	r0, #6
}
   2f708:	b002      	add	sp, #8
   2f70a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!conn->le.keys) {
   2f70e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   2f712:	b15b      	cbz	r3, 2f72c <smp_pairing_req+0x40>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2f714:	1d26      	adds	r6, r4, #4
   2f716:	210f      	movs	r1, #15
   2f718:	4630      	mov	r0, r6
   2f71a:	f017 f861 	bl	467e0 <atomic_test_bit>
   2f71e:	b980      	cbnz	r0, 2f742 <smp_pairing_req+0x56>
		int ret = smp_init(smp);
   2f720:	4620      	mov	r0, r4
   2f722:	f7ff fcb9 	bl	2f098 <smp_init>
		if (ret) {
   2f726:	b160      	cbz	r0, 2f742 <smp_pairing_req+0x56>
			return ret;
   2f728:	b2c0      	uxtb	r0, r0
   2f72a:	e7ed      	b.n	2f708 <smp_pairing_req+0x1c>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   2f72c:	7a38      	ldrb	r0, [r7, #8]
   2f72e:	f107 0188 	add.w	r1, r7, #136	; 0x88
   2f732:	f000 fb21 	bl	2fd78 <bt_keys_get_addr>
   2f736:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
		if (!conn->le.keys) {
   2f73a:	2800      	cmp	r0, #0
   2f73c:	d1ea      	bne.n	2f714 <smp_pairing_req+0x28>
			return BT_SMP_ERR_UNSPECIFIED;
   2f73e:	2008      	movs	r0, #8
   2f740:	e7e2      	b.n	2f708 <smp_pairing_req+0x1c>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   2f742:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
   2f744:	2206      	movs	r2, #6
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   2f746:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
   2f748:	4629      	mov	r1, r5
   2f74a:	f104 000a 	add.w	r0, r4, #10
   2f74e:	f014 fde3 	bl	44318 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   2f752:	2302      	movs	r3, #2
   2f754:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(smp, req->auth_req);
   2f756:	78a9      	ldrb	r1, [r5, #2]
   2f758:	4620      	mov	r0, r4
   2f75a:	f7ff fc7f 	bl	2f05c <get_auth>
   2f75e:	74e0      	strb	r0, [r4, #19]
	rsp->io_capability = get_io_capa(smp);
   2f760:	4620      	mov	r0, r4
   2f762:	f7ff fc55 	bl	2f010 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   2f766:	4b65      	ldr	r3, [pc, #404]	; (2f8fc <smp_pairing_req+0x210>)
	rsp->io_capability = get_io_capa(smp);
   2f768:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   2f76a:	781b      	ldrb	r3, [r3, #0]
   2f76c:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   2f76e:	2310      	movs	r3, #16
   2f770:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   2f772:	792b      	ldrb	r3, [r5, #4]
   2f774:	f003 0303 	and.w	r3, r3, #3
   2f778:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   2f77a:	796b      	ldrb	r3, [r5, #5]
   2f77c:	f003 0301 	and.w	r3, r3, #1
   2f780:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   2f782:	7ce3      	ldrb	r3, [r4, #19]
   2f784:	071a      	lsls	r2, r3, #28
   2f786:	d50c      	bpl.n	2f7a2 <smp_pairing_req+0xb6>
   2f788:	78ab      	ldrb	r3, [r5, #2]
   2f78a:	071b      	lsls	r3, r3, #28
   2f78c:	d509      	bpl.n	2f7a2 <smp_pairing_req+0xb6>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   2f78e:	2105      	movs	r1, #5
   2f790:	4630      	mov	r0, r6
   2f792:	f017 f919 	bl	469c8 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   2f796:	7d63      	ldrb	r3, [r4, #21]
   2f798:	f003 0302 	and.w	r3, r3, #2
   2f79c:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   2f79e:	2300      	movs	r3, #0
   2f7a0:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   2f7a2:	7ce3      	ldrb	r3, [r4, #19]
   2f7a4:	0698      	lsls	r0, r3, #26
   2f7a6:	d506      	bpl.n	2f7b6 <smp_pairing_req+0xca>
   2f7a8:	78ab      	ldrb	r3, [r5, #2]
   2f7aa:	0699      	lsls	r1, r3, #26
   2f7ac:	d503      	bpl.n	2f7b6 <smp_pairing_req+0xca>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   2f7ae:	2114      	movs	r1, #20
   2f7b0:	4630      	mov	r0, r6
   2f7b2:	f017 f909 	bl	469c8 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   2f7b6:	7da3      	ldrb	r3, [r4, #22]
   2f7b8:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   2f7bc:	7d63      	ldrb	r3, [r4, #21]
   2f7be:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   2f7c2:	7ce3      	ldrb	r3, [r4, #19]
   2f7c4:	07da      	lsls	r2, r3, #31
   2f7c6:	d506      	bpl.n	2f7d6 <smp_pairing_req+0xea>
   2f7c8:	78ab      	ldrb	r3, [r5, #2]
   2f7ca:	07db      	lsls	r3, r3, #31
   2f7cc:	d503      	bpl.n	2f7d6 <smp_pairing_req+0xea>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   2f7ce:	210d      	movs	r1, #13
   2f7d0:	4630      	mov	r0, r6
   2f7d2:	f017 f8f9 	bl	469c8 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   2f7d6:	2103      	movs	r1, #3
   2f7d8:	4630      	mov	r0, r6
   2f7da:	f017 f8f5 	bl	469c8 <atomic_set_bit>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   2f7de:	7b23      	ldrb	r3, [r4, #12]
   2f7e0:	7ce1      	ldrb	r1, [r4, #19]
	smp->method = get_pair_method(smp, req->io_capability);
   2f7e2:	f895 8000 	ldrb.w	r8, [r5]
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   2f7e6:	ea03 0201 	and.w	r2, r3, r1
   2f7ea:	0710      	lsls	r0, r2, #28
   2f7ec:	d504      	bpl.n	2f7f8 <smp_pairing_req+0x10c>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   2f7ee:	7ae2      	ldrb	r2, [r4, #11]
   2f7f0:	7ca0      	ldrb	r0, [r4, #18]
   2f7f2:	4302      	orrs	r2, r0
   2f7f4:	07d2      	lsls	r2, r2, #31
   2f7f6:	d417      	bmi.n	2f828 <smp_pairing_req+0x13c>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   2f7f8:	f1b8 0f04 	cmp.w	r8, #4
   2f7fc:	d816      	bhi.n	2f82c <smp_pairing_req+0x140>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   2f7fe:	430b      	orrs	r3, r1
   2f800:	f013 0304 	ands.w	r3, r3, #4
   2f804:	d007      	beq.n	2f816 <smp_pairing_req+0x12a>
	return gen_method_sc[remote_io][get_io_capa(smp)];
   2f806:	4620      	mov	r0, r4
   2f808:	f7ff fc02 	bl	2f010 <get_io_capa>
   2f80c:	4b3c      	ldr	r3, [pc, #240]	; (2f900 <smp_pairing_req+0x214>)
   2f80e:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   2f812:	4443      	add	r3, r8
   2f814:	5c1b      	ldrb	r3, [r3, r0]
	smp->method = get_pair_method(smp, req->io_capability);
   2f816:	7223      	strb	r3, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   2f818:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
   2f81c:	4620      	mov	r0, r4
   2f81e:	f016 ffe8 	bl	467f2 <update_keys_check>
   2f822:	b928      	cbnz	r0, 2f830 <smp_pairing_req+0x144>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   2f824:	2003      	movs	r0, #3
   2f826:	e76f      	b.n	2f708 <smp_pairing_req+0x1c>
			return LE_SC_OOB;
   2f828:	2305      	movs	r3, #5
   2f82a:	e7f4      	b.n	2f816 <smp_pairing_req+0x12a>
		return JUST_WORKS;
   2f82c:	2300      	movs	r3, #0
   2f82e:	e7f2      	b.n	2f816 <smp_pairing_req+0x12a>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   2f830:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   2f834:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   2f836:	2b03      	cmp	r3, #3
   2f838:	d05c      	beq.n	2f8f4 <smp_pairing_req+0x208>
   2f83a:	d84a      	bhi.n	2f8d2 <smp_pairing_req+0x1e6>
   2f83c:	3b01      	subs	r3, #1
   2f83e:	2b01      	cmp	r3, #1
   2f840:	f63f af7d 	bhi.w	2f73e <smp_pairing_req+0x52>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2f844:	2105      	movs	r1, #5
   2f846:	4630      	mov	r0, r6
   2f848:	f016 ffca 	bl	467e0 <atomic_test_bit>
   2f84c:	2800      	cmp	r0, #0
   2f84e:	d0e9      	beq.n	2f824 <smp_pairing_req+0x138>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   2f850:	4620      	mov	r0, r4
   2f852:	f7ff fbbf 	bl	2efd4 <latch_auth_cb>
   2f856:	4603      	mov	r3, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   2f858:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
	if (smp_auth_cb && smp_auth_cb->pairing_accept) {
   2f85c:	b1fb      	cbz	r3, 2f89e <smp_pairing_req+0x1b2>
   2f85e:	681a      	ldr	r2, [r3, #0]
   2f860:	b1ea      	cbz	r2, 2f89e <smp_pairing_req+0x1b2>
			.io_capability = pairing->io_capability,
   2f862:	782a      	ldrb	r2, [r5, #0]
		const struct bt_conn_pairing_feat feat = {
   2f864:	f88d 2000 	strb.w	r2, [sp]
			.oob_data_flag = pairing->oob_flag,
   2f868:	786a      	ldrb	r2, [r5, #1]
		const struct bt_conn_pairing_feat feat = {
   2f86a:	f88d 2001 	strb.w	r2, [sp, #1]
			.auth_req = pairing->auth_req,
   2f86e:	78aa      	ldrb	r2, [r5, #2]
		const struct bt_conn_pairing_feat feat = {
   2f870:	f88d 2002 	strb.w	r2, [sp, #2]
			.max_enc_key_size = pairing->max_key_size,
   2f874:	78ea      	ldrb	r2, [r5, #3]
		const struct bt_conn_pairing_feat feat = {
   2f876:	f88d 2003 	strb.w	r2, [sp, #3]
			.init_key_dist = pairing->init_key_dist,
   2f87a:	792a      	ldrb	r2, [r5, #4]
		const struct bt_conn_pairing_feat feat = {
   2f87c:	f88d 2004 	strb.w	r2, [sp, #4]
			.resp_key_dist = pairing->resp_key_dist
   2f880:	796a      	ldrb	r2, [r5, #5]
		const struct bt_conn_pairing_feat feat = {
   2f882:	f88d 2005 	strb.w	r2, [sp, #5]
		return smp_err_get(smp_auth_cb->pairing_accept(conn, &feat));
   2f886:	681b      	ldr	r3, [r3, #0]
   2f888:	4669      	mov	r1, sp
   2f88a:	4798      	blx	r3
	switch (auth_err) {
   2f88c:	3801      	subs	r0, #1
   2f88e:	b2c0      	uxtb	r0, r0
   2f890:	2808      	cmp	r0, #8
   2f892:	d804      	bhi.n	2f89e <smp_pairing_req+0x1b2>
   2f894:	4b1b      	ldr	r3, [pc, #108]	; (2f904 <smp_pairing_req+0x218>)
   2f896:	5c18      	ldrb	r0, [r3, r0]
		if (err) {
   2f898:	2800      	cmp	r0, #0
   2f89a:	f47f af35 	bne.w	2f708 <smp_pairing_req+0x1c>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   2f89e:	210c      	movs	r1, #12
   2f8a0:	4620      	mov	r0, r4
   2f8a2:	f017 f891 	bl	469c8 <atomic_set_bit>
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2f8a6:	2102      	movs	r1, #2
   2f8a8:	f017 f8c1 	bl	46a2e <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   2f8ac:	4605      	mov	r5, r0
   2f8ae:	2800      	cmp	r0, #0
   2f8b0:	f43f af45 	beq.w	2f73e <smp_pairing_req+0x52>
   2f8b4:	2106      	movs	r1, #6
   2f8b6:	3008      	adds	r0, #8
   2f8b8:	f017 fc89 	bl	471ce <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   2f8bc:	2206      	movs	r2, #6
   2f8be:	f104 0111 	add.w	r1, r4, #17
   2f8c2:	f014 fd29 	bl	44318 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   2f8c6:	4620      	mov	r0, r4
   2f8c8:	4629      	mov	r1, r5
   2f8ca:	f016 ffe2 	bl	46892 <smp_send.constprop.0>
	return 0;
   2f8ce:	2000      	movs	r0, #0
   2f8d0:	e71a      	b.n	2f708 <smp_pairing_req+0x1c>
	switch (sec) {
   2f8d2:	2b04      	cmp	r3, #4
   2f8d4:	f47f af33 	bne.w	2f73e <smp_pairing_req+0x52>
	return MIN(req->max_key_size, rsp->max_key_size);
   2f8d8:	7d23      	ldrb	r3, [r4, #20]
   2f8da:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   2f8dc:	4293      	cmp	r3, r2
   2f8de:	bf28      	it	cs
   2f8e0:	4613      	movcs	r3, r2
   2f8e2:	2b10      	cmp	r3, #16
   2f8e4:	f47f af0f 	bne.w	2f706 <smp_pairing_req+0x1a>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2f8e8:	2105      	movs	r1, #5
   2f8ea:	4630      	mov	r0, r6
   2f8ec:	f016 ff78 	bl	467e0 <atomic_test_bit>
   2f8f0:	2800      	cmp	r0, #0
   2f8f2:	d097      	beq.n	2f824 <smp_pairing_req+0x138>
		if (smp->method == JUST_WORKS) {
   2f8f4:	7a23      	ldrb	r3, [r4, #8]
   2f8f6:	2b00      	cmp	r3, #0
   2f8f8:	d1a4      	bne.n	2f844 <smp_pairing_req+0x158>
   2f8fa:	e793      	b.n	2f824 <smp_pairing_req+0x138>
   2f8fc:	20003b0d 	.word	0x20003b0d
   2f900:	0004aa3e 	.word	0x0004aa3e
   2f904:	0004aa16 	.word	0x0004aa16

0002f908 <bt_smp_start_security>:
{
   2f908:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   2f90c:	78c6      	ldrb	r6, [r0, #3]
   2f90e:	2e01      	cmp	r6, #1
{
   2f910:	4604      	mov	r4, r0
	switch (conn->role) {
   2f912:	d005      	beq.n	2f920 <bt_smp_start_security+0x18>
		return -EINVAL;
   2f914:	f06f 0415 	mvn.w	r4, #21
}
   2f918:	4620      	mov	r0, r4
   2f91a:	b003      	add	sp, #12
   2f91c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   2f920:	f016 ff57 	bl	467d2 <smp_chan_get>
	if (!smp) {
   2f924:	4605      	mov	r5, r0
   2f926:	2800      	cmp	r0, #0
   2f928:	f000 80ac 	beq.w	2fa84 <bt_smp_start_security+0x17c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2f92c:	1d07      	adds	r7, r0, #4
   2f92e:	2104      	movs	r1, #4
   2f930:	4638      	mov	r0, r7
   2f932:	f016 ff55 	bl	467e0 <atomic_test_bit>
   2f936:	2800      	cmp	r0, #0
   2f938:	f040 80a7 	bne.w	2fa8a <bt_smp_start_security+0x182>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   2f93c:	2103      	movs	r1, #3
   2f93e:	4638      	mov	r0, r7
   2f940:	f016 ff4e 	bl	467e0 <atomic_test_bit>
   2f944:	b110      	cbz	r0, 2f94c <bt_smp_start_security+0x44>
		return -EBUSY;
   2f946:	f06f 040f 	mvn.w	r4, #15
   2f94a:	e7e5      	b.n	2f918 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2f94c:	4631      	mov	r1, r6
   2f94e:	4638      	mov	r0, r7
   2f950:	f016 ff46 	bl	467e0 <atomic_test_bit>
   2f954:	2800      	cmp	r0, #0
   2f956:	d1f6      	bne.n	2f946 <bt_smp_start_security+0x3e>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   2f958:	4628      	mov	r0, r5
   2f95a:	f7ff fb3b 	bl	2efd4 <latch_auth_cb>
	switch (smp->chan.chan.conn->required_sec_level) {
   2f95e:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   2f962:	7a9b      	ldrb	r3, [r3, #10]
   2f964:	2b03      	cmp	r3, #3
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   2f966:	4606      	mov	r6, r0
	switch (smp->chan.chan.conn->required_sec_level) {
   2f968:	d042      	beq.n	2f9f0 <bt_smp_start_security+0xe8>
   2f96a:	d832      	bhi.n	2f9d2 <bt_smp_start_security+0xca>
   2f96c:	3b01      	subs	r3, #1
   2f96e:	2b01      	cmp	r3, #1
   2f970:	d948      	bls.n	2fa04 <bt_smp_start_security+0xfc>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   2f972:	210a      	movs	r1, #10
   2f974:	1d20      	adds	r0, r4, #4
   2f976:	f016 ff33 	bl	467e0 <atomic_test_bit>
   2f97a:	2800      	cmp	r0, #0
   2f97c:	d1ca      	bne.n	2f914 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
   2f97e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   2f982:	b983      	cbnz	r3, 2f9a6 <bt_smp_start_security+0x9e>
						     conn->id, &conn->le.dst);
   2f984:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   2f988:	7a21      	ldrb	r1, [r4, #8]
   2f98a:	4632      	mov	r2, r6
   2f98c:	2020      	movs	r0, #32
   2f98e:	f000 fa4f 	bl	2fe30 <bt_keys_find>
   2f992:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   2f996:	b930      	cbnz	r0, 2f9a6 <bt_smp_start_security+0x9e>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   2f998:	7a21      	ldrb	r1, [r4, #8]
   2f99a:	4632      	mov	r2, r6
   2f99c:	2004      	movs	r0, #4
   2f99e:	f000 fa47 	bl	2fe30 <bt_keys_find>
   2f9a2:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys ||
   2f9a6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   2f9aa:	2b00      	cmp	r3, #0
   2f9ac:	d0b2      	beq.n	2f914 <bt_smp_start_security+0xc>
	    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
   2f9ae:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
   2f9b0:	f012 0f24 	tst.w	r2, #36	; 0x24
   2f9b4:	d0ae      	beq.n	2f914 <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L3 &&
   2f9b6:	7aa1      	ldrb	r1, [r4, #10]
   2f9b8:	2902      	cmp	r1, #2
   2f9ba:	d923      	bls.n	2fa04 <bt_smp_start_security+0xfc>
   2f9bc:	7b58      	ldrb	r0, [r3, #13]
   2f9be:	07c0      	lsls	r0, r0, #31
   2f9c0:	d5a8      	bpl.n	2f914 <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L4 &&
   2f9c2:	2903      	cmp	r1, #3
   2f9c4:	d01e      	beq.n	2fa04 <bt_smp_start_security+0xfc>
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   2f9c6:	0692      	lsls	r2, r2, #26
   2f9c8:	d5a4      	bpl.n	2f914 <bt_smp_start_security+0xc>
   2f9ca:	7b1b      	ldrb	r3, [r3, #12]
   2f9cc:	2b10      	cmp	r3, #16
   2f9ce:	d1a1      	bne.n	2f914 <bt_smp_start_security+0xc>
   2f9d0:	e018      	b.n	2fa04 <bt_smp_start_security+0xfc>
	switch (smp->chan.chan.conn->required_sec_level) {
   2f9d2:	2b04      	cmp	r3, #4
   2f9d4:	d1cd      	bne.n	2f972 <bt_smp_start_security+0x6a>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   2f9d6:	4628      	mov	r0, r5
   2f9d8:	f7ff fb1a 	bl	2f010 <get_io_capa>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   2f9dc:	2803      	cmp	r0, #3
   2f9de:	d104      	bne.n	2f9ea <bt_smp_start_security+0xe2>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   2f9e0:	2e00      	cmp	r6, #0
   2f9e2:	d0c6      	beq.n	2f972 <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   2f9e4:	6933      	ldr	r3, [r6, #16]
   2f9e6:	2b00      	cmp	r3, #0
   2f9e8:	d0c3      	beq.n	2f972 <bt_smp_start_security+0x6a>
   2f9ea:	4b29      	ldr	r3, [pc, #164]	; (2fa90 <bt_smp_start_security+0x188>)
   2f9ec:	781b      	ldrb	r3, [r3, #0]
   2f9ee:	e007      	b.n	2fa00 <bt_smp_start_security+0xf8>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   2f9f0:	4628      	mov	r0, r5
   2f9f2:	f7ff fb0d 	bl	2f010 <get_io_capa>
   2f9f6:	2803      	cmp	r0, #3
   2f9f8:	d104      	bne.n	2fa04 <bt_smp_start_security+0xfc>
   2f9fa:	2e00      	cmp	r6, #0
   2f9fc:	d0b9      	beq.n	2f972 <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request);
   2f9fe:	6933      	ldr	r3, [r6, #16]
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   2fa00:	2b00      	cmp	r3, #0
   2fa02:	d0b6      	beq.n	2f972 <bt_smp_start_security+0x6a>
	if (!conn->le.keys) {
   2fa04:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   2fa08:	b13b      	cbz	r3, 2fa1a <bt_smp_start_security+0x112>
	if (smp_init(smp) != 0) {
   2fa0a:	4628      	mov	r0, r5
   2fa0c:	f7ff fb44 	bl	2f098 <smp_init>
   2fa10:	4680      	mov	r8, r0
   2fa12:	b170      	cbz	r0, 2fa32 <bt_smp_start_security+0x12a>
		return -ENOBUFS;
   2fa14:	f06f 0468 	mvn.w	r4, #104	; 0x68
   2fa18:	e77e      	b.n	2f918 <bt_smp_start_security+0x10>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   2fa1a:	7a20      	ldrb	r0, [r4, #8]
   2fa1c:	f104 0188 	add.w	r1, r4, #136	; 0x88
   2fa20:	f000 f9aa 	bl	2fd78 <bt_keys_get_addr>
   2fa24:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   2fa28:	2800      	cmp	r0, #0
   2fa2a:	d1ee      	bne.n	2fa0a <bt_smp_start_security+0x102>
			return -ENOMEM;
   2fa2c:	f06f 040b 	mvn.w	r4, #11
   2fa30:	e772      	b.n	2f918 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   2fa32:	210b      	movs	r1, #11
   2fa34:	4628      	mov	r0, r5
   2fa36:	f016 fffa 	bl	46a2e <smp_create_pdu.constprop.0>
	if (!req_buf) {
   2fa3a:	4606      	mov	r6, r0
   2fa3c:	2800      	cmp	r0, #0
   2fa3e:	d0e9      	beq.n	2fa14 <bt_smp_start_security+0x10c>
   2fa40:	2101      	movs	r1, #1
   2fa42:	3008      	adds	r0, #8
   2fa44:	f017 fbc3 	bl	471ce <net_buf_simple_add>
	req->auth_req = get_auth(smp, BT_SMP_AUTH_DEFAULT);
   2fa48:	2109      	movs	r1, #9
   2fa4a:	4681      	mov	r9, r0
   2fa4c:	4628      	mov	r0, r5
   2fa4e:	f7ff fb05 	bl	2f05c <get_auth>
   2fa52:	4643      	mov	r3, r8
   2fa54:	f889 0000 	strb.w	r0, [r9]
   2fa58:	4632      	mov	r2, r6
   2fa5a:	4620      	mov	r0, r4
   2fa5c:	f8cd 8000 	str.w	r8, [sp]
   2fa60:	2106      	movs	r1, #6
   2fa62:	f015 fce4 	bl	4542e <bt_l2cap_send_cb>
	if (err) {
   2fa66:	4604      	mov	r4, r0
   2fa68:	b118      	cbz	r0, 2fa72 <bt_smp_start_security+0x16a>
		net_buf_unref(req_buf);
   2fa6a:	4630      	mov	r0, r6
   2fa6c:	f00c fc50 	bl	3c310 <net_buf_unref>
		return err;
   2fa70:	e752      	b.n	2f918 <bt_smp_start_security+0x10>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   2fa72:	4638      	mov	r0, r7
   2fa74:	210f      	movs	r1, #15
   2fa76:	f016 ffa7 	bl	469c8 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2fa7a:	2101      	movs	r1, #1
   2fa7c:	4628      	mov	r0, r5
   2fa7e:	f016 ffa3 	bl	469c8 <atomic_set_bit>
	return 0;
   2fa82:	e749      	b.n	2f918 <bt_smp_start_security+0x10>
		return -ENOTCONN;
   2fa84:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   2fa88:	e746      	b.n	2f918 <bt_smp_start_security+0x10>
		return -EIO;
   2fa8a:	f06f 0404 	mvn.w	r4, #4
   2fa8e:	e743      	b.n	2f918 <bt_smp_start_security+0x10>
   2fa90:	20003b0c 	.word	0x20003b0c

0002fa94 <smp_pairing_complete>:
{
   2fa94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2fa96:	4606      	mov	r6, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   2fa98:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   2fa9c:	1d04      	adds	r4, r0, #4
	if (!status) {
   2fa9e:	bb61      	cbnz	r1, 2fafa <smp_pairing_complete+0x66>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   2faa0:	210d      	movs	r1, #13
   2faa2:	4620      	mov	r0, r4
   2faa4:	f016 fe9c 	bl	467e0 <atomic_test_bit>
		if (bond_flag) {
   2faa8:	4607      	mov	r7, r0
   2faaa:	b118      	cbz	r0, 2fab4 <smp_pairing_complete+0x20>
			bt_keys_store(conn->le.keys);
   2faac:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   2fab0:	f000 fa5e 	bl	2ff70 <bt_keys_store>
	return list->head;
   2fab4:	4b36      	ldr	r3, [pc, #216]	; (2fb90 <smp_pairing_complete+0xfc>)
   2fab6:	681b      	ldr	r3, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   2fab8:	b19b      	cbz	r3, 2fae2 <smp_pairing_complete+0x4e>
	return node->next;
   2faba:	681c      	ldr	r4, [r3, #0]
   2fabc:	b104      	cbz	r4, 2fac0 <smp_pairing_complete+0x2c>
   2fabe:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   2fac0:	f853 3c0c 	ldr.w	r3, [r3, #-12]
   2fac4:	b113      	cbz	r3, 2facc <smp_pairing_complete+0x38>
				listener->pairing_complete(conn, bond_flag);
   2fac6:	4639      	mov	r1, r7
   2fac8:	4628      	mov	r0, r5
   2faca:	4798      	blx	r3
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   2facc:	b14c      	cbz	r4, 2fae2 <smp_pairing_complete+0x4e>
   2face:	4623      	mov	r3, r4
   2fad0:	68e4      	ldr	r4, [r4, #12]
   2fad2:	681b      	ldr	r3, [r3, #0]
   2fad4:	b11c      	cbz	r4, 2fade <smp_pairing_complete+0x4a>
   2fad6:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   2fad8:	2b00      	cmp	r3, #0
   2fada:	d1f4      	bne.n	2fac6 <smp_pairing_complete+0x32>
   2fadc:	e7f7      	b.n	2face <smp_pairing_complete+0x3a>
   2fade:	2b00      	cmp	r3, #0
   2fae0:	d1f1      	bne.n	2fac6 <smp_pairing_complete+0x32>
	smp_reset(smp);
   2fae2:	4630      	mov	r0, r6
   2fae4:	f017 f848 	bl	46b78 <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   2fae8:	7a6a      	ldrb	r2, [r5, #9]
   2faea:	7aab      	ldrb	r3, [r5, #10]
   2faec:	429a      	cmp	r2, r3
   2faee:	d04d      	beq.n	2fb8c <smp_pairing_complete+0xf8>
		bt_smp_start_security(conn);
   2faf0:	4628      	mov	r0, r5
}
   2faf2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   2faf6:	f7ff bf07 	b.w	2f908 <bt_smp_start_security>
	switch (smp_err) {
   2fafa:	3901      	subs	r1, #1
   2fafc:	b2c9      	uxtb	r1, r1
   2fafe:	290e      	cmp	r1, #14
   2fb00:	bf9c      	itt	ls
   2fb02:	4b24      	ldrls	r3, [pc, #144]	; (2fb94 <smp_pairing_complete+0x100>)
   2fb04:	5c5f      	ldrbls	r7, [r3, r1]
		if (conn->le.keys &&
   2fb06:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
	if (!status) {
   2fb0a:	bf88      	it	hi
   2fb0c:	2709      	movhi	r7, #9
		if (conn->le.keys &&
   2fb0e:	b143      	cbz	r3, 2fb22 <smp_pairing_complete+0x8e>
   2fb10:	7b1b      	ldrb	r3, [r3, #12]
   2fb12:	bb2b      	cbnz	r3, 2fb60 <smp_pairing_complete+0xcc>
			bt_keys_clear(conn->le.keys);
   2fb14:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   2fb18:	f000 fa02 	bl	2ff20 <bt_keys_clear>
			conn->le.keys = NULL;
   2fb1c:	2300      	movs	r3, #0
   2fb1e:	f8c5 30b4 	str.w	r3, [r5, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   2fb22:	2102      	movs	r1, #2
   2fb24:	4620      	mov	r0, r4
   2fb26:	f016 fe5b 	bl	467e0 <atomic_test_bit>
   2fb2a:	b940      	cbnz	r0, 2fb3e <smp_pairing_complete+0xaa>
	switch (err) {
   2fb2c:	2f07      	cmp	r7, #7
   2fb2e:	bf96      	itet	ls
   2fb30:	4b19      	ldrls	r3, [pc, #100]	; (2fb98 <smp_pairing_complete+0x104>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   2fb32:	211f      	movhi	r1, #31
   2fb34:	5dd9      	ldrbls	r1, [r3, r7]
			bt_conn_security_changed(conn,
   2fb36:	463a      	mov	r2, r7
   2fb38:	4628      	mov	r0, r5
   2fb3a:	f7fd f8c9 	bl	2ccd0 <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   2fb3e:	2103      	movs	r1, #3
   2fb40:	4620      	mov	r0, r4
   2fb42:	f016 fe4d 	bl	467e0 <atomic_test_bit>
   2fb46:	2800      	cmp	r0, #0
   2fb48:	d0cb      	beq.n	2fae2 <smp_pairing_complete+0x4e>
	return list->head;
   2fb4a:	4b11      	ldr	r3, [pc, #68]	; (2fb90 <smp_pairing_complete+0xfc>)
   2fb4c:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   2fb4e:	2b00      	cmp	r3, #0
   2fb50:	d0c7      	beq.n	2fae2 <smp_pairing_complete+0x4e>
	return node->next;
   2fb52:	681c      	ldr	r4, [r3, #0]
   2fb54:	b104      	cbz	r4, 2fb58 <smp_pairing_complete+0xc4>
   2fb56:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   2fb58:	f853 3c08 	ldr.w	r3, [r3, #-8]
   2fb5c:	b94b      	cbnz	r3, 2fb72 <smp_pairing_complete+0xde>
   2fb5e:	e00b      	b.n	2fb78 <smp_pairing_complete+0xe4>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   2fb60:	2102      	movs	r1, #2
   2fb62:	4620      	mov	r0, r4
   2fb64:	f016 fe3c 	bl	467e0 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   2fb68:	2800      	cmp	r0, #0
   2fb6a:	d1d3      	bne.n	2fb14 <smp_pairing_complete+0x80>
   2fb6c:	e7d9      	b.n	2fb22 <smp_pairing_complete+0x8e>
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   2fb6e:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   2fb70:	b123      	cbz	r3, 2fb7c <smp_pairing_complete+0xe8>
					listener->pairing_failed(conn, security_err);
   2fb72:	4639      	mov	r1, r7
   2fb74:	4628      	mov	r0, r5
   2fb76:	4798      	blx	r3
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   2fb78:	2c00      	cmp	r4, #0
   2fb7a:	d0b2      	beq.n	2fae2 <smp_pairing_complete+0x4e>
   2fb7c:	4623      	mov	r3, r4
   2fb7e:	68e4      	ldr	r4, [r4, #12]
   2fb80:	685b      	ldr	r3, [r3, #4]
   2fb82:	2c00      	cmp	r4, #0
   2fb84:	d1f3      	bne.n	2fb6e <smp_pairing_complete+0xda>
				if (listener->pairing_failed) {
   2fb86:	2b00      	cmp	r3, #0
   2fb88:	d1f3      	bne.n	2fb72 <smp_pairing_complete+0xde>
   2fb8a:	e7aa      	b.n	2fae2 <smp_pairing_complete+0x4e>
}
   2fb8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2fb8e:	bf00      	nop
   2fb90:	20001d38 	.word	0x20001d38
   2fb94:	0004aa1f 	.word	0x0004aa1f
   2fb98:	0004aa0e 	.word	0x0004aa0e

0002fb9c <bt_smp_recv>:
{
   2fb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   2fb9e:	898b      	ldrh	r3, [r1, #12]
{
   2fba0:	4607      	mov	r7, r0
   2fba2:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   2fba4:	b393      	cbz	r3, 2fc0c <bt_smp_recv+0x70>
	return net_buf_simple_pull_mem(&buf->b, len);
   2fba6:	2101      	movs	r1, #1
   2fba8:	f105 0008 	add.w	r0, r5, #8
   2fbac:	f017 fb36 	bl	4721c <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2fbb0:	2104      	movs	r1, #4
   2fbb2:	4606      	mov	r6, r0
   2fbb4:	f1a7 00e8 	sub.w	r0, r7, #232	; 0xe8
   2fbb8:	f1a7 04ec 	sub.w	r4, r7, #236	; 0xec
   2fbbc:	f016 fe10 	bl	467e0 <atomic_test_bit>
   2fbc0:	bb20      	cbnz	r0, 2fc0c <bt_smp_recv+0x70>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   2fbc2:	7831      	ldrb	r1, [r6, #0]
   2fbc4:	290e      	cmp	r1, #14
   2fbc6:	d821      	bhi.n	2fc0c <bt_smp_recv+0x70>
	if (!handlers[hdr->code].func) {
   2fbc8:	4f11      	ldr	r7, [pc, #68]	; (2fc10 <bt_smp_recv+0x74>)
   2fbca:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
   2fbce:	b923      	cbnz	r3, 2fbda <bt_smp_recv+0x3e>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   2fbd0:	2107      	movs	r1, #7
		smp_error(smp, err);
   2fbd2:	4620      	mov	r0, r4
   2fbd4:	f017 f868 	bl	46ca8 <smp_error>
   2fbd8:	e018      	b.n	2fc0c <bt_smp_recv+0x70>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   2fbda:	4620      	mov	r0, r4
   2fbdc:	f016 ffb6 	bl	46b4c <atomic_test_and_clear_bit>
   2fbe0:	7833      	ldrb	r3, [r6, #0]
   2fbe2:	b918      	cbnz	r0, 2fbec <bt_smp_recv+0x50>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   2fbe4:	2b05      	cmp	r3, #5
   2fbe6:	d011      	beq.n	2fc0c <bt_smp_recv+0x70>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   2fbe8:	2108      	movs	r1, #8
   2fbea:	e7f2      	b.n	2fbd2 <bt_smp_recv+0x36>
	if (buf->len != handlers[hdr->code].expect_len) {
   2fbec:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   2fbf0:	89a9      	ldrh	r1, [r5, #12]
   2fbf2:	7912      	ldrb	r2, [r2, #4]
   2fbf4:	4291      	cmp	r1, r2
   2fbf6:	d001      	beq.n	2fbfc <bt_smp_recv+0x60>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   2fbf8:	210a      	movs	r1, #10
   2fbfa:	e7ea      	b.n	2fbd2 <bt_smp_recv+0x36>
	err = handlers[hdr->code].func(smp, buf);
   2fbfc:	4629      	mov	r1, r5
   2fbfe:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
   2fc02:	4620      	mov	r0, r4
   2fc04:	4798      	blx	r3
	if (err) {
   2fc06:	4601      	mov	r1, r0
   2fc08:	2800      	cmp	r0, #0
   2fc0a:	d1e2      	bne.n	2fbd2 <bt_smp_recv+0x36>
}
   2fc0c:	2000      	movs	r0, #0
   2fc0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2fc10:	000496f8 	.word	0x000496f8

0002fc14 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
   2fc14:	4b0c      	ldr	r3, [pc, #48]	; (2fc48 <bt_smp_pkey_ready+0x34>)
{
   2fc16:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   2fc18:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   2fc1a:	b198      	cbz	r0, 2fc44 <bt_smp_pkey_ready+0x30>
		err = smp_public_key_periph(smp);
   2fc1c:	4c0b      	ldr	r4, [pc, #44]	; (2fc4c <bt_smp_pkey_ready+0x38>)
	z_impl_k_sem_give(sem);
   2fc1e:	480c      	ldr	r0, [pc, #48]	; (2fc50 <bt_smp_pkey_ready+0x3c>)
   2fc20:	f010 ffa2 	bl	40b68 <z_impl_k_sem_give>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2fc24:	f3bf 8f5b 	dmb	ish
   2fc28:	f854 3904 	ldr.w	r3, [r4], #-4
   2fc2c:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   2fc30:	065b      	lsls	r3, r3, #25
   2fc32:	d507      	bpl.n	2fc44 <bt_smp_pkey_ready+0x30>
		err = smp_public_key_periph(smp);
   2fc34:	4620      	mov	r0, r4
   2fc36:	f7ff fc51 	bl	2f4dc <smp_public_key_periph>
		if (err) {
   2fc3a:	4601      	mov	r1, r0
   2fc3c:	b110      	cbz	r0, 2fc44 <bt_smp_pkey_ready+0x30>
			smp_error(smp, err);
   2fc3e:	4620      	mov	r0, r4
   2fc40:	f017 f832 	bl	46ca8 <smp_error>
}
   2fc44:	bd10      	pop	{r4, pc}
   2fc46:	bf00      	nop
   2fc48:	20001e74 	.word	0x20001e74
   2fc4c:	20001364 	.word	0x20001364
   2fc50:	20000d3c 	.word	0x20000d3c

0002fc54 <bt_smp_encrypt_change>:
{
   2fc54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->conn;
   2fc58:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2fc5a:	f1a0 06e8 	sub.w	r6, r0, #232	; 0xe8
{
   2fc5e:	4604      	mov	r4, r0
   2fc60:	460f      	mov	r7, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2fc62:	4630      	mov	r0, r6
   2fc64:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
   2fc66:	f855 89ec 	ldr.w	r8, [r5], #-236
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2fc6a:	f016 ff6f 	bl	46b4c <atomic_test_and_clear_bit>
   2fc6e:	2800      	cmp	r0, #0
   2fc70:	d059      	beq.n	2fd26 <bt_smp_encrypt_change+0xd2>
	if (hci_status) {
   2fc72:	b1cf      	cbz	r7, 2fca8 <bt_smp_encrypt_change+0x54>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   2fc74:	2103      	movs	r1, #3
   2fc76:	4630      	mov	r0, r6
   2fc78:	f016 fdb2 	bl	467e0 <atomic_test_bit>
   2fc7c:	2800      	cmp	r0, #0
   2fc7e:	d052      	beq.n	2fd26 <bt_smp_encrypt_change+0xd2>
			uint8_t smp_err = smp_err_get(
   2fc80:	4638      	mov	r0, r7
   2fc82:	f7fb fd01 	bl	2b688 <bt_security_err_get>
	switch (auth_err) {
   2fc86:	3801      	subs	r0, #1
   2fc88:	b2c0      	uxtb	r0, r0
   2fc8a:	2808      	cmp	r0, #8
   2fc8c:	bf9a      	itte	ls
   2fc8e:	4b2b      	ldrls	r3, [pc, #172]	; (2fd3c <bt_smp_encrypt_change+0xe8>)
   2fc90:	5c1c      	ldrbls	r4, [r3, r0]
			uint8_t smp_err = smp_err_get(
   2fc92:	2400      	movhi	r4, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   2fc94:	2102      	movs	r1, #2
   2fc96:	4630      	mov	r0, r6
   2fc98:	f016 fe96 	bl	469c8 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   2fc9c:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   2fc9e:	4628      	mov	r0, r5
}
   2fca0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_pairing_complete(smp, 0);
   2fca4:	f7ff bef6 	b.w	2fa94 <smp_pairing_complete>
	if (!conn->encrypt) {
   2fca8:	f898 300b 	ldrb.w	r3, [r8, #11]
   2fcac:	2b00      	cmp	r3, #0
   2fcae:	d03a      	beq.n	2fd26 <bt_smp_encrypt_change+0xd2>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   2fcb0:	2103      	movs	r1, #3
   2fcb2:	4630      	mov	r0, r6
   2fcb4:	f016 fd94 	bl	467e0 <atomic_test_bit>
   2fcb8:	b920      	cbnz	r0, 2fcc4 <bt_smp_encrypt_change+0x70>
		smp_reset(smp);
   2fcba:	4628      	mov	r0, r5
}
   2fcbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_reset(smp);
   2fcc0:	f016 bf5a 	b.w	46b78 <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2fcc4:	2105      	movs	r1, #5
   2fcc6:	4630      	mov	r0, r6
   2fcc8:	f016 fd8a 	bl	467e0 <atomic_test_bit>
   2fccc:	b1b8      	cbz	r0, 2fcfe <bt_smp_encrypt_change+0xaa>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   2fcce:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   2fcd2:	071f      	lsls	r7, r3, #28
   2fcd4:	d507      	bpl.n	2fce6 <bt_smp_encrypt_change+0x92>
   2fcd6:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   2fcda:	0718      	lsls	r0, r3, #28
   2fcdc:	d503      	bpl.n	2fce6 <bt_smp_encrypt_change+0x92>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   2fcde:	2111      	movs	r1, #17
   2fce0:	4630      	mov	r0, r6
   2fce2:	f016 fe71 	bl	469c8 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   2fce6:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   2fcea:	f023 0308 	bic.w	r3, r3, #8
   2fcee:	f804 3c04 	strb.w	r3, [r4, #-4]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   2fcf2:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   2fcf6:	f023 0308 	bic.w	r3, r3, #8
   2fcfa:	f804 3c03 	strb.w	r3, [r4, #-3]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   2fcfe:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   2fd02:	07d9      	lsls	r1, r3, #31
   2fd04:	d511      	bpl.n	2fd2a <bt_smp_encrypt_change+0xd6>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   2fd06:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   2fd08:	4628      	mov	r0, r5
   2fd0a:	f016 fe5d 	bl	469c8 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   2fd0e:	2102      	movs	r1, #2
   2fd10:	4630      	mov	r0, r6
   2fd12:	f016 fe59 	bl	469c8 <atomic_set_bit>
	struct bt_keys *keys = conn->le.keys;
   2fd16:	6823      	ldr	r3, [r4, #0]
	if (!keys) {
   2fd18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   2fd1c:	b11b      	cbz	r3, 2fd26 <bt_smp_encrypt_change+0xd2>
	if (!smp->local_dist && !smp->remote_dist) {
   2fd1e:	f834 1c04 	ldrh.w	r1, [r4, #-4]
   2fd22:	2900      	cmp	r1, #0
   2fd24:	d0bb      	beq.n	2fc9e <bt_smp_encrypt_change+0x4a>
}
   2fd26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   2fd2a:	079a      	lsls	r2, r3, #30
   2fd2c:	d501      	bpl.n	2fd32 <bt_smp_encrypt_change+0xde>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   2fd2e:	2108      	movs	r1, #8
   2fd30:	e7ea      	b.n	2fd08 <bt_smp_encrypt_change+0xb4>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   2fd32:	075b      	lsls	r3, r3, #29
   2fd34:	d5eb      	bpl.n	2fd0e <bt_smp_encrypt_change+0xba>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   2fd36:	210a      	movs	r1, #10
   2fd38:	e7e6      	b.n	2fd08 <bt_smp_encrypt_change+0xb4>
   2fd3a:	bf00      	nop
   2fd3c:	0004aa16 	.word	0x0004aa16

0002fd40 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   2fd40:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   2fd42:	4b0a      	ldr	r3, [pc, #40]	; (2fd6c <bt_smp_init+0x2c>)
   2fd44:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   2fd48:	f003 0306 	and.w	r3, r3, #6
   2fd4c:	2b06      	cmp	r3, #6
   2fd4e:	4b08      	ldr	r3, [pc, #32]	; (2fd70 <bt_smp_init+0x30>)
   2fd50:	bf0c      	ite	eq
   2fd52:	2201      	moveq	r2, #1
   2fd54:	2200      	movne	r2, #0
   2fd56:	701a      	strb	r2, [r3, #0]
	static struct bt_pub_key_cb pub_key_cb = {
		.func           = bt_smp_pkey_ready,
	};

	sc_supported = le_sc_supported();
	if (IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) && !sc_supported) {
   2fd58:	d104      	bne.n	2fd64 <bt_smp_init+0x24>
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   2fd5a:	4806      	ldr	r0, [pc, #24]	; (2fd74 <bt_smp_init+0x34>)
   2fd5c:	f7fc fb6e 	bl	2c43c <bt_pub_key_gen>
	}

	return smp_self_test();
   2fd60:	2000      	movs	r0, #0
}
   2fd62:	bd08      	pop	{r3, pc}
		return -ENOENT;
   2fd64:	f06f 0001 	mvn.w	r0, #1
   2fd68:	e7fb      	b.n	2fd62 <bt_smp_init+0x22>
   2fd6a:	bf00      	nop
   2fd6c:	20000000 	.word	0x20000000
   2fd70:	20003b0c 	.word	0x20003b0c
   2fd74:	20000450 	.word	0x20000450

0002fd78 <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   2fd78:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   2fd7a:	4c0f      	ldr	r4, [pc, #60]	; (2fdb8 <bt_keys_get_addr+0x40>)
   2fd7c:	f814 3b01 	ldrb.w	r3, [r4], #1
   2fd80:	4283      	cmp	r3, r0
{
   2fd82:	4605      	mov	r5, r0
   2fd84:	460e      	mov	r6, r1
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   2fd86:	d007      	beq.n	2fd98 <bt_keys_get_addr+0x20>
   2fd88:	490c      	ldr	r1, [pc, #48]	; (2fdbc <bt_keys_get_addr+0x44>)
   2fd8a:	480d      	ldr	r0, [pc, #52]	; (2fdc0 <bt_keys_get_addr+0x48>)
   2fd8c:	2207      	movs	r2, #7
   2fd8e:	f014 fab3 	bl	442f8 <memcmp>
			first_free_slot = oldest - &key_pool[0];
		}
	}

#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
   2fd92:	b148      	cbz	r0, 2fda8 <bt_keys_get_addr+0x30>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   2fd94:	2000      	movs	r0, #0
}
   2fd96:	bd70      	pop	{r4, r5, r6, pc}
   2fd98:	2207      	movs	r2, #7
   2fd9a:	4620      	mov	r0, r4
   2fd9c:	f014 faac 	bl	442f8 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   2fda0:	2800      	cmp	r0, #0
   2fda2:	d1f1      	bne.n	2fd88 <bt_keys_get_addr+0x10>
		keys = &key_pool[i];
   2fda4:	4804      	ldr	r0, [pc, #16]	; (2fdb8 <bt_keys_get_addr+0x40>)
   2fda6:	e7f6      	b.n	2fd96 <bt_keys_get_addr+0x1e>
		keys->id = id;
   2fda8:	f804 5c01 	strb.w	r5, [r4, #-1]
	memcpy(dst, src, sizeof(*dst));
   2fdac:	2207      	movs	r2, #7
   2fdae:	4631      	mov	r1, r6
   2fdb0:	4803      	ldr	r0, [pc, #12]	; (2fdc0 <bt_keys_get_addr+0x48>)
   2fdb2:	f014 fab1 	bl	44318 <memcpy>
}
   2fdb6:	e7f5      	b.n	2fda4 <bt_keys_get_addr+0x2c>
   2fdb8:	20001e78 	.word	0x20001e78
   2fdbc:	0004a7b7 	.word	0x0004a7b7
   2fdc0:	20001e79 	.word	0x20001e79

0002fdc4 <bt_foreach_bond>:

void bt_foreach_bond(uint8_t id, void (*func)(const struct bt_bond_info *info,
					   void *user_data),
		     void *user_data)
{
   2fdc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	__ASSERT_NO_MSG(func != NULL);

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		struct bt_keys *keys = &key_pool[i];

		if (keys->keys && keys->id == id) {
   2fdc6:	4f0c      	ldr	r7, [pc, #48]	; (2fdf8 <bt_foreach_bond+0x34>)
{
   2fdc8:	4604      	mov	r4, r0
   2fdca:	460d      	mov	r5, r1
   2fdcc:	4616      	mov	r6, r2
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   2fdce:	2300      	movs	r3, #0
		if (keys->keys && keys->id == id) {
   2fdd0:	89f9      	ldrh	r1, [r7, #14]
   2fdd2:	783a      	ldrb	r2, [r7, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   2fdd4:	b10b      	cbz	r3, 2fdda <bt_foreach_bond+0x16>

			bt_addr_le_copy(&info.addr, &keys->addr);
			func(&info, user_data);
		}
	}
}
   2fdd6:	b003      	add	sp, #12
   2fdd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (keys->keys && keys->id == id) {
   2fdda:	2900      	cmp	r1, #0
   2fddc:	d0fb      	beq.n	2fdd6 <bt_foreach_bond+0x12>
   2fdde:	42a2      	cmp	r2, r4
   2fde0:	d1f9      	bne.n	2fdd6 <bt_foreach_bond+0x12>
	memcpy(dst, src, sizeof(*dst));
   2fde2:	4906      	ldr	r1, [pc, #24]	; (2fdfc <bt_foreach_bond+0x38>)
   2fde4:	2207      	movs	r2, #7
   2fde6:	4668      	mov	r0, sp
   2fde8:	f014 fa96 	bl	44318 <memcpy>
			func(&info, user_data);
   2fdec:	4631      	mov	r1, r6
   2fdee:	4668      	mov	r0, sp
   2fdf0:	47a8      	blx	r5
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   2fdf2:	2301      	movs	r3, #1
   2fdf4:	e7ec      	b.n	2fdd0 <bt_foreach_bond+0xc>
   2fdf6:	bf00      	nop
   2fdf8:	20001e78 	.word	0x20001e78
   2fdfc:	20001e79 	.word	0x20001e79

0002fe00 <bt_keys_foreach_type>:

void bt_keys_foreach_type(enum bt_keys_type type, void (*func)(struct bt_keys *keys, void *data),
			  void *data)
{
   2fe00:	b410      	push	{r4}
   2fe02:	460b      	mov	r3, r1
   2fe04:	4611      	mov	r1, r2
	int i;

	__ASSERT_NO_MSG(func != NULL);

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   2fe06:	4a04      	ldr	r2, [pc, #16]	; (2fe18 <bt_keys_foreach_type+0x18>)
   2fe08:	89d4      	ldrh	r4, [r2, #14]
   2fe0a:	4204      	tst	r4, r0
   2fe0c:	d002      	beq.n	2fe14 <bt_keys_foreach_type+0x14>
			func(&key_pool[i], data);
		}
	}
}
   2fe0e:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   2fe10:	4610      	mov	r0, r2
   2fe12:	4718      	bx	r3
}
   2fe14:	bc10      	pop	{r4}
   2fe16:	4770      	bx	lr
   2fe18:	20001e78 	.word	0x20001e78

0002fe1c <keys_commit>:

	bt_id_add(keys);
}

static int keys_commit(void)
{
   2fe1c:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach_type(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach_type(BT_KEYS_IRK, id_add, NULL);
   2fe1e:	4903      	ldr	r1, [pc, #12]	; (2fe2c <keys_commit+0x10>)
   2fe20:	2200      	movs	r2, #0
   2fe22:	2002      	movs	r0, #2
   2fe24:	f7ff ffec 	bl	2fe00 <bt_keys_foreach_type>
	}

	return 0;
}
   2fe28:	2000      	movs	r0, #0
   2fe2a:	bd08      	pop	{r3, pc}
   2fe2c:	0004705b 	.word	0x0004705b

0002fe30 <bt_keys_find>:
{
   2fe30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   2fe34:	f8df 8038 	ldr.w	r8, [pc, #56]	; 2fe70 <bt_keys_find+0x40>
{
   2fe38:	4605      	mov	r5, r0
   2fe3a:	460e      	mov	r6, r1
   2fe3c:	4617      	mov	r7, r2
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   2fe3e:	2300      	movs	r3, #0
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   2fe40:	f8b8 400e 	ldrh.w	r4, [r8, #14]
   2fe44:	f898 2000 	ldrb.w	r2, [r8]
   2fe48:	402c      	ands	r4, r5
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   2fe4a:	b113      	cbz	r3, 2fe52 <bt_keys_find+0x22>
	return NULL;
   2fe4c:	2000      	movs	r0, #0
}
   2fe4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   2fe52:	2c00      	cmp	r4, #0
   2fe54:	d0fa      	beq.n	2fe4c <bt_keys_find+0x1c>
   2fe56:	4296      	cmp	r6, r2
   2fe58:	d1f8      	bne.n	2fe4c <bt_keys_find+0x1c>
	return memcmp(a, b, sizeof(*a));
   2fe5a:	4806      	ldr	r0, [pc, #24]	; (2fe74 <bt_keys_find+0x44>)
   2fe5c:	2207      	movs	r2, #7
   2fe5e:	4639      	mov	r1, r7
   2fe60:	f014 fa4a 	bl	442f8 <memcmp>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   2fe64:	2301      	movs	r3, #1
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   2fe66:	2800      	cmp	r0, #0
   2fe68:	d1ea      	bne.n	2fe40 <bt_keys_find+0x10>
			return &key_pool[i];
   2fe6a:	4801      	ldr	r0, [pc, #4]	; (2fe70 <bt_keys_find+0x40>)
   2fe6c:	e7ef      	b.n	2fe4e <bt_keys_find+0x1e>
   2fe6e:	bf00      	nop
   2fe70:	20001e78 	.word	0x20001e78
   2fe74:	20001e79 	.word	0x20001e79

0002fe78 <bt_keys_find_irk>:
{
   2fe78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   2fe7a:	780b      	ldrb	r3, [r1, #0]
   2fe7c:	2b01      	cmp	r3, #1
   2fe7e:	4606      	mov	r6, r0
   2fe80:	460c      	mov	r4, r1
   2fe82:	d001      	beq.n	2fe88 <bt_keys_find_irk+0x10>
		return NULL;
   2fe84:	2000      	movs	r0, #0
}
   2fe86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   2fe88:	798b      	ldrb	r3, [r1, #6]
   2fe8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2fe8e:	2b40      	cmp	r3, #64	; 0x40
   2fe90:	d1f8      	bne.n	2fe84 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   2fe92:	4d18      	ldr	r5, [pc, #96]	; (2fef4 <bt_keys_find_irk+0x7c>)
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   2fe94:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   2fe96:	f105 073a 	add.w	r7, r5, #58	; 0x3a
   2fe9a:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id == id &&
   2fe9c:	7828      	ldrb	r0, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   2fe9e:	f002 0202 	and.w	r2, r2, #2
   2fea2:	b1c3      	cbz	r3, 2fed6 <bt_keys_find_irk+0x5e>
   2fea4:	2300      	movs	r3, #0
   2fea6:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id != id) {
   2fea8:	7829      	ldrb	r1, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   2feaa:	f002 0202 	and.w	r2, r2, #2
   2feae:	2b00      	cmp	r3, #0
   2feb0:	d1e8      	bne.n	2fe84 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   2feb2:	2a00      	cmp	r2, #0
   2feb4:	d0e6      	beq.n	2fe84 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   2feb6:	42b1      	cmp	r1, r6
   2feb8:	d1e4      	bne.n	2fe84 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   2feba:	1c67      	adds	r7, r4, #1
   2febc:	480e      	ldr	r0, [pc, #56]	; (2fef8 <bt_keys_find_irk+0x80>)
   2febe:	4639      	mov	r1, r7
   2fec0:	f014 fa5d 	bl	4437e <bt_rpa_irk_matches>
   2fec4:	2301      	movs	r3, #1
   2fec6:	2800      	cmp	r0, #0
   2fec8:	d0ed      	beq.n	2fea6 <bt_keys_find_irk+0x2e>
	memcpy(dst, src, sizeof(*dst));
   2feca:	2206      	movs	r2, #6
   2fecc:	4639      	mov	r1, r7
   2fece:	480b      	ldr	r0, [pc, #44]	; (2fefc <bt_keys_find_irk+0x84>)
   2fed0:	f014 fa22 	bl	44318 <memcpy>
}
   2fed4:	e00b      	b.n	2feee <bt_keys_find_irk+0x76>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   2fed6:	2a00      	cmp	r2, #0
   2fed8:	d0e5      	beq.n	2fea6 <bt_keys_find_irk+0x2e>
		if (key_pool[i].id == id &&
   2feda:	42b0      	cmp	r0, r6
   2fedc:	d1e3      	bne.n	2fea6 <bt_keys_find_irk+0x2e>
	return memcmp(a, b, sizeof(*a));
   2fede:	2206      	movs	r2, #6
   2fee0:	4639      	mov	r1, r7
   2fee2:	1c60      	adds	r0, r4, #1
   2fee4:	f014 fa08 	bl	442f8 <memcmp>
   2fee8:	2301      	movs	r3, #1
   2feea:	2800      	cmp	r0, #0
   2feec:	d1d5      	bne.n	2fe9a <bt_keys_find_irk+0x22>
			return &key_pool[i];
   2feee:	4801      	ldr	r0, [pc, #4]	; (2fef4 <bt_keys_find_irk+0x7c>)
   2fef0:	e7c9      	b.n	2fe86 <bt_keys_find_irk+0xe>
   2fef2:	bf00      	nop
   2fef4:	20001e78 	.word	0x20001e78
   2fef8:	20001ea2 	.word	0x20001ea2
   2fefc:	20001eb2 	.word	0x20001eb2

0002ff00 <bt_keys_find_addr>:
{
   2ff00:	b510      	push	{r4, lr}
		if (key_pool[i].id == id &&
   2ff02:	4c06      	ldr	r4, [pc, #24]	; (2ff1c <bt_keys_find_addr+0x1c>)
   2ff04:	7823      	ldrb	r3, [r4, #0]
   2ff06:	4283      	cmp	r3, r0
   2ff08:	d104      	bne.n	2ff14 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   2ff0a:	2207      	movs	r2, #7
   2ff0c:	1c60      	adds	r0, r4, #1
   2ff0e:	f014 f9f3 	bl	442f8 <memcmp>
   2ff12:	b108      	cbz	r0, 2ff18 <bt_keys_find_addr+0x18>
	return NULL;
   2ff14:	2000      	movs	r0, #0
}
   2ff16:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   2ff18:	4620      	mov	r0, r4
   2ff1a:	e7fc      	b.n	2ff16 <bt_keys_find_addr+0x16>
   2ff1c:	20001e78 	.word	0x20001e78

0002ff20 <bt_keys_clear>:
{
   2ff20:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
   2ff22:	7a03      	ldrb	r3, [r0, #8]
   2ff24:	075b      	lsls	r3, r3, #29
{
   2ff26:	b08c      	sub	sp, #48	; 0x30
   2ff28:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   2ff2a:	d501      	bpl.n	2ff30 <bt_keys_clear+0x10>
		bt_id_del(keys);
   2ff2c:	f7fb fe60 	bl	2bbf0 <bt_id_del>
		if (keys->id) {
   2ff30:	4625      	mov	r5, r4
   2ff32:	f815 2b01 	ldrb.w	r2, [r5], #1
   2ff36:	b1b2      	cbz	r2, 2ff66 <bt_keys_clear+0x46>
			u8_to_dec(id, sizeof(id), keys->id);
   2ff38:	ae02      	add	r6, sp, #8
   2ff3a:	2104      	movs	r1, #4
   2ff3c:	4630      	mov	r0, r6
   2ff3e:	f011 ff88 	bl	41e52 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   2ff42:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   2ff44:	4a09      	ldr	r2, [pc, #36]	; (2ff6c <bt_keys_clear+0x4c>)
   2ff46:	462b      	mov	r3, r5
   2ff48:	2124      	movs	r1, #36	; 0x24
   2ff4a:	a803      	add	r0, sp, #12
   2ff4c:	f7fa fed4 	bl	2acf8 <bt_settings_encode_key>
		settings_delete(key);
   2ff50:	a803      	add	r0, sp, #12
   2ff52:	f012 fe50 	bl	42bf6 <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
   2ff56:	2240      	movs	r2, #64	; 0x40
   2ff58:	2100      	movs	r1, #0
   2ff5a:	4620      	mov	r0, r4
}
   2ff5c:	b00c      	add	sp, #48	; 0x30
   2ff5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(keys, 0, sizeof(*keys));
   2ff62:	f014 b9e4 	b.w	4432e <memset>
			bt_settings_encode_key(key, sizeof(key), "keys",
   2ff66:	9200      	str	r2, [sp, #0]
   2ff68:	e7ec      	b.n	2ff44 <bt_keys_clear+0x24>
   2ff6a:	bf00      	nop
   2ff6c:	0004aa5a 	.word	0x0004aa5a

0002ff70 <bt_keys_store>:
{
   2ff70:	b570      	push	{r4, r5, r6, lr}
	if (keys->id) {
   2ff72:	4605      	mov	r5, r0
{
   2ff74:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
   2ff76:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   2ff7a:	4604      	mov	r4, r0
	if (keys->id) {
   2ff7c:	b19a      	cbz	r2, 2ffa6 <bt_keys_store+0x36>
		u8_to_dec(id, sizeof(id), keys->id);
   2ff7e:	ae02      	add	r6, sp, #8
   2ff80:	2104      	movs	r1, #4
   2ff82:	4630      	mov	r0, r6
   2ff84:	f011 ff65 	bl	41e52 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   2ff88:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   2ff8a:	462b      	mov	r3, r5
   2ff8c:	a803      	add	r0, sp, #12
   2ff8e:	4a07      	ldr	r2, [pc, #28]	; (2ffac <bt_keys_store+0x3c>)
   2ff90:	2124      	movs	r1, #36	; 0x24
   2ff92:	f7fa feb1 	bl	2acf8 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   2ff96:	2234      	movs	r2, #52	; 0x34
   2ff98:	f104 010c 	add.w	r1, r4, #12
   2ff9c:	a803      	add	r0, sp, #12
   2ff9e:	f7f9 fd1f 	bl	299e0 <settings_save_one>
}
   2ffa2:	b00c      	add	sp, #48	; 0x30
   2ffa4:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   2ffa6:	9200      	str	r2, [sp, #0]
   2ffa8:	e7ef      	b.n	2ff8a <bt_keys_store+0x1a>
   2ffaa:	bf00      	nop
   2ffac:	0004aa5a 	.word	0x0004aa5a

0002ffb0 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
   2ffb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ffb4:	4616      	mov	r6, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   2ffb6:	1dc2      	adds	r2, r0, #7
   2ffb8:	f022 0203 	bic.w	r2, r2, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   2ffbc:	1e75      	subs	r5, r6, #1
{
   2ffbe:	460f      	mov	r7, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   2ffc0:	b2ad      	uxth	r5, r5
	*mem_head = mem_pool;
   2ffc2:	6018      	str	r0, [r3, #0]
{
   2ffc4:	b082      	sub	sp, #8
   2ffc6:	4604      	mov	r4, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   2ffc8:	8016      	strh	r6, [r2, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   2ffca:	2100      	movs	r1, #0
   2ffcc:	2204      	movs	r2, #4
   2ffce:	fb07 0005 	mla	r0, r7, r5, r0
   2ffd2:	f014 f9ac 	bl	4432e <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
   2ffd6:	b1bd      	cbz	r5, 30008 <mem_init+0x58>
   2ffd8:	3e02      	subs	r6, #2
   2ffda:	b2b6      	uxth	r6, r6
   2ffdc:	fb06 7307 	mla	r3, r6, r7, r7
   2ffe0:	fb06 f807 	mul.w	r8, r6, r7
   2ffe4:	441c      	add	r4, r3
   2ffe6:	eba8 0803 	sub.w	r8, r8, r3
   2ffea:	2500      	movs	r5, #0
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   2ffec:	2204      	movs	r2, #4
   2ffee:	eb04 0008 	add.w	r0, r4, r8
   2fff2:	eb0d 0102 	add.w	r1, sp, r2
		next = (uint32_t)((uint8_t *) mem_pool +
   2fff6:	9401      	str	r4, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   2fff8:	f014 f98e 	bl	44318 <memcpy>
	while (mem_count--) {
   2fffc:	42b5      	cmp	r5, r6
   2fffe:	eba4 0407 	sub.w	r4, r4, r7
   30002:	f105 0501 	add.w	r5, r5, #1
   30006:	d1f1      	bne.n	2ffec <mem_init+0x3c>
		       (void *)&next, sizeof(next));
	}
}
   30008:	b002      	add	sp, #8
   3000a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3000e:	bf00      	nop

00030010 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
   30010:	b570      	push	{r4, r5, r6, lr}
	if (*mem_head) {
   30012:	6805      	ldr	r5, [r0, #0]
{
   30014:	b082      	sub	sp, #8
	if (*mem_head) {
   30016:	b19d      	cbz	r5, 30040 <mem_acquire+0x30>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   30018:	1deb      	adds	r3, r5, #7
   3001a:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   3001e:	2204      	movs	r2, #4
   30020:	4604      	mov	r4, r0
   30022:	4629      	mov	r1, r5
   30024:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   30028:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
   3002a:	f014 f975 	bl	44318 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
   3002e:	9b01      	ldr	r3, [sp, #4]
   30030:	b12b      	cbz	r3, 3003e <mem_acquire+0x2e>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   30032:	3307      	adds	r3, #7
   30034:	f023 0303 	bic.w	r3, r3, #3
		free_count--;
   30038:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   3003a:	801e      	strh	r6, [r3, #0]
				free_count;
		}

		*mem_head = head;
   3003c:	9b01      	ldr	r3, [sp, #4]
   3003e:	6023      	str	r3, [r4, #0]
		return mem;
	}

	return NULL;
}
   30040:	4628      	mov	r0, r5
   30042:	b002      	add	sp, #8
   30044:	bd70      	pop	{r4, r5, r6, pc}
   30046:	bf00      	nop

00030048 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
   30048:	b570      	push	{r4, r5, r6, lr}
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   3004a:	680b      	ldr	r3, [r1, #0]
{
   3004c:	460c      	mov	r4, r1
   3004e:	4605      	mov	r5, r0
	if (*mem_head) {
   30050:	b183      	cbz	r3, 30074 <mem_release+0x2c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   30052:	3307      	adds	r3, #7
   30054:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
	}
	free_count++;
   30058:	881e      	ldrh	r6, [r3, #0]
   3005a:	3601      	adds	r6, #1
   3005c:	b2b6      	uxth	r6, r6

	memcpy(mem, mem_head, sizeof(mem));
   3005e:	2204      	movs	r2, #4
   30060:	4621      	mov	r1, r4
   30062:	4628      	mov	r0, r5
   30064:	f014 f958 	bl	44318 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
   30068:	1deb      	adds	r3, r5, #7
   3006a:	f023 0303 	bic.w	r3, r3, #3
   3006e:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
   30070:	6025      	str	r5, [r4, #0]
}
   30072:	bd70      	pop	{r4, r5, r6, pc}
   30074:	2601      	movs	r6, #1
   30076:	e7f2      	b.n	3005e <mem_release+0x16>

00030078 <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
   30078:	fb02 0001 	mla	r0, r2, r1, r0
   3007c:	4770      	bx	lr
   3007e:	bf00      	nop

00030080 <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size;
   30080:	1a40      	subs	r0, r0, r1
   30082:	fb90 f0f2 	sdiv	r0, r0, r2
}
   30086:	b280      	uxth	r0, r0
   30088:	4770      	bx	lr
   3008a:	bf00      	nop

0003008c <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
   3008c:	1e53      	subs	r3, r2, #1
	src += len;
   3008e:	4411      	add	r1, r2
	while (len--) {
   30090:	b29b      	uxth	r3, r3
   30092:	b142      	cbz	r2, 300a6 <mem_rcopy+0x1a>
   30094:	43db      	mvns	r3, r3
   30096:	3801      	subs	r0, #1
   30098:	18ca      	adds	r2, r1, r3
		*dst++ = *--src;
   3009a:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   3009e:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
   300a2:	4291      	cmp	r1, r2
   300a4:	d1f9      	bne.n	3009a <mem_rcopy+0xe>
	}
}
   300a6:	4770      	bx	lr

000300a8 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
   300a8:	4401      	add	r1, r0
   300aa:	e002      	b.n	300b2 <mem_nz+0xa>
		if (*src++) {
   300ac:	f810 3b01 	ldrb.w	r3, [r0], #1
   300b0:	b91b      	cbnz	r3, 300ba <mem_nz+0x12>
	while (len--) {
   300b2:	4288      	cmp	r0, r1
   300b4:	d1fa      	bne.n	300ac <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
   300b6:	2000      	movs	r0, #0
   300b8:	4770      	bx	lr
			return 1;
   300ba:	2001      	movs	r0, #1
}
   300bc:	4770      	bx	lr
   300be:	bf00      	nop

000300c0 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
   300c0:	6010      	str	r0, [r2, #0]
   300c2:	6008      	str	r0, [r1, #0]

	return link;
}
   300c4:	4770      	bx	lr
   300c6:	bf00      	nop

000300c8 <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
   300c8:	680a      	ldr	r2, [r1, #0]
{
   300ca:	4603      	mov	r3, r0
	if (*head != *tail) {
   300cc:	6800      	ldr	r0, [r0, #0]
   300ce:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
   300d0:	bf05      	ittet	eq
   300d2:	2200      	moveq	r2, #0
   300d4:	600a      	streq	r2, [r1, #0]
		return NULL;
   300d6:	2000      	movne	r0, #0
	*head = *tail = NULL;
   300d8:	601a      	streq	r2, [r3, #0]

	return old_head;
}
   300da:	4770      	bx	lr

000300dc <memq_enqueue>:
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
   300dc:	f8d2 c000 	ldr.w	ip, [r2]
   300e0:	f8cc 0000 	str.w	r0, [ip]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
   300e4:	f8d2 c000 	ldr.w	ip, [r2]
   300e8:	f8cc 1004 	str.w	r1, [ip, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */
   300ec:	6010      	str	r0, [r2, #0]

	return link;
}
   300ee:	4770      	bx	lr

000300f0 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
   300f0:	4288      	cmp	r0, r1
   300f2:	d003      	beq.n	300fc <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
   300f4:	b11a      	cbz	r2, 300fe <memq_peek+0xe>
		*mem = head->mem;
   300f6:	6843      	ldr	r3, [r0, #4]
   300f8:	6013      	str	r3, [r2, #0]
   300fa:	4770      	bx	lr
		return NULL;
   300fc:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
   300fe:	4770      	bx	lr

00030100 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
   30100:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   30102:	4283      	cmp	r3, r0
   30104:	d009      	beq.n	3011a <memq_dequeue+0x1a>
	if (mem) {
   30106:	b12a      	cbz	r2, 30114 <memq_dequeue+0x14>
		*mem = head->mem;
   30108:	6858      	ldr	r0, [r3, #4]
   3010a:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
   3010c:	681a      	ldr	r2, [r3, #0]
   3010e:	600a      	str	r2, [r1, #0]

	return old_head;
}
   30110:	4618      	mov	r0, r3
   30112:	4770      	bx	lr
	if (old_head == NULL) {
   30114:	2b00      	cmp	r3, #0
   30116:	d1f9      	bne.n	3010c <memq_dequeue+0xc>
   30118:	e7fa      	b.n	30110 <memq_dequeue+0x10>
		return NULL; /* queue is empty */
   3011a:	2300      	movs	r3, #0
   3011c:	e7f8      	b.n	30110 <memq_dequeue+0x10>
   3011e:	bf00      	nop

00030120 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
   30120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30124:	f8df 8030 	ldr.w	r8, [pc, #48]	; 30158 <mayfly_init+0x38>
   30128:	4e0c      	ldr	r6, [pc, #48]	; (3015c <mayfly_init+0x3c>)
   3012a:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
   3012c:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
   30130:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
   30132:	1d22      	adds	r2, r4, #4
   30134:	4621      	mov	r1, r4
   30136:	4628      	mov	r0, r5
		while (caller_id--) {
   30138:	3c0c      	subs	r4, #12
			memq_init(&mfl[callee_id][caller_id],
   3013a:	f7ff ffc1 	bl	300c0 <memq_init>
		while (caller_id--) {
   3013e:	42a6      	cmp	r6, r4
   30140:	f1a5 0508 	sub.w	r5, r5, #8
   30144:	d1f5      	bne.n	30132 <mayfly_init+0x12>
	while (callee_id--) {
   30146:	3f04      	subs	r7, #4
   30148:	1d3b      	adds	r3, r7, #4
   3014a:	f1a8 0820 	sub.w	r8, r8, #32
   3014e:	f1a6 0630 	sub.w	r6, r6, #48	; 0x30
   30152:	d1eb      	bne.n	3012c <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
   30154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   30158:	20001f34 	.word	0x20001f34
   3015c:	20001fc0 	.word	0x20001fc0

00030160 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
   30160:	b410      	push	{r4}
   30162:	4603      	mov	r3, r0
   30164:	468c      	mov	ip, r1
	if (enable) {
   30166:	b19a      	cbz	r2, 30190 <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
   30168:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   3016c:	4814      	ldr	r0, [pc, #80]	; (301c0 <mayfly_enable+0x60>)
   3016e:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   30172:	0109      	lsls	r1, r1, #4
   30174:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   30178:	4401      	add	r1, r0
   3017a:	7a48      	ldrb	r0, [r1, #9]
   3017c:	7a0c      	ldrb	r4, [r1, #8]
   3017e:	42a0      	cmp	r0, r4
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
   30180:	bf04      	itt	eq
   30182:	3001      	addeq	r0, #1
   30184:	7208      	strbeq	r0, [r1, #8]

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
   30186:	bc10      	pop	{r4}
		mayfly_enable_cb(caller_id, callee_id, enable);
   30188:	4661      	mov	r1, ip
   3018a:	4618      	mov	r0, r3
   3018c:	f00b be26 	b.w	3bddc <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
   30190:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   30194:	4c0a      	ldr	r4, [pc, #40]	; (301c0 <mayfly_enable+0x60>)
   30196:	0112      	lsls	r2, r2, #4
   30198:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   3019c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   301a0:	4423      	add	r3, r4
   301a2:	7a9c      	ldrb	r4, [r3, #10]
   301a4:	7ada      	ldrb	r2, [r3, #11]
   301a6:	42a2      	cmp	r2, r4
   301a8:	d001      	beq.n	301ae <mayfly_enable+0x4e>
}
   301aa:	bc10      	pop	{r4}
   301ac:	4770      	bx	lr
			mft[callee_id][caller_id].disable_req++;
   301ae:	3201      	adds	r2, #1
   301b0:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
   301b2:	4b04      	ldr	r3, [pc, #16]	; (301c4 <mayfly_enable+0x64>)
   301b4:	2201      	movs	r2, #1
   301b6:	545a      	strb	r2, [r3, r1]
}
   301b8:	bc10      	pop	{r4}
			mayfly_pend(caller_id, callee_id);
   301ba:	f00b be65 	b.w	3be88 <mayfly_pend>
   301be:	bf00      	nop
   301c0:	20001f3c 	.word	0x20001f3c
   301c4:	20001eb8 	.word	0x20001eb8

000301c8 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
   301c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   301ca:	4606      	mov	r6, r0
   301cc:	461c      	mov	r4, r3
   301ce:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
   301d0:	b302      	cbz	r2, 30214 <mayfly_enqueue+0x4c>

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
   301d2:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
   301d4:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
   301d6:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   301d8:	f012 0203 	ands.w	r2, r2, #3
   301dc:	d13a      	bne.n	30254 <mayfly_enqueue+0x8c>
   301de:	4f27      	ldr	r7, [pc, #156]	; (3027c <mayfly_enqueue+0xb4>)
   301e0:	0071      	lsls	r1, r6, #1
   301e2:	ea4f 0c45 	mov.w	ip, r5, lsl #1
		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   301e6:	4431      	add	r1, r6
   301e8:	44ac      	add	ip, r5
   301ea:	0089      	lsls	r1, r1, #2
   301ec:	eb01 110c 	add.w	r1, r1, ip, lsl #4
	m->_req = ack + 1;
   301f0:	3301      	adds	r3, #1
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   301f2:	3104      	adds	r1, #4
	m->_req = ack + 1;
   301f4:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   301f6:	187a      	adds	r2, r7, r1
   301f8:	6860      	ldr	r0, [r4, #4]
	m->_req = ack + 1;
   301fa:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   301fc:	4621      	mov	r1, r4
   301fe:	f7ff ff6d 	bl	300dc <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
   30202:	4b1f      	ldr	r3, [pc, #124]	; (30280 <mayfly_enqueue+0xb8>)
   30204:	2201      	movs	r2, #1
   30206:	555a      	strb	r2, [r3, r5]

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
   30208:	4629      	mov	r1, r5
   3020a:	4630      	mov	r0, r6
   3020c:	f00b fe3c 	bl	3be88 <mayfly_pend>
		return 0;
   30210:	2000      	movs	r0, #0

	return 0;
}
   30212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   30214:	f00b fe22 	bl	3be5c <mayfly_prio_is_equal>
   30218:	2800      	cmp	r0, #0
   3021a:	d0da      	beq.n	301d2 <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
   3021c:	4629      	mov	r1, r5
   3021e:	4630      	mov	r0, r6
   30220:	f00b fdfc 	bl	3be1c <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   30224:	2800      	cmp	r0, #0
   30226:	d0d4      	beq.n	301d2 <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
   30228:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   3022c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
   30230:	4f12      	ldr	r7, [pc, #72]	; (3027c <mayfly_enqueue+0xb4>)
	ack = m->_ack;
   30232:	7863      	ldrb	r3, [r4, #1]
		(mft[callee_id][caller_id].disable_req !=
   30234:	0112      	lsls	r2, r2, #4
   30236:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   3023a:	443a      	add	r2, r7
   3023c:	0071      	lsls	r1, r6, #1
		!mayfly_is_enabled(caller_id, callee_id) ||
   3023e:	7a90      	ldrb	r0, [r2, #10]
   30240:	7ad2      	ldrb	r2, [r2, #11]
   30242:	4290      	cmp	r0, r2
		(mft[callee_id][caller_id].disable_req !=
   30244:	ea4f 0c45 	mov.w	ip, r5, lsl #1
		!mayfly_is_enabled(caller_id, callee_id) ||
   30248:	d00c      	beq.n	30264 <mayfly_enqueue+0x9c>
	state = (m->_req - ack) & 0x03;
   3024a:	7820      	ldrb	r0, [r4, #0]
   3024c:	1ac0      	subs	r0, r0, r3
	if (state != 0U) {
   3024e:	f010 0203 	ands.w	r2, r0, #3
   30252:	d0c8      	beq.n	301e6 <mayfly_enqueue+0x1e>
			if (state != 1U) {
   30254:	2a01      	cmp	r2, #1
   30256:	d003      	beq.n	30260 <mayfly_enqueue+0x98>
				m->_req = ack + 1;
   30258:	3301      	adds	r3, #1
   3025a:	b2db      	uxtb	r3, r3
   3025c:	7023      	strb	r3, [r4, #0]
				goto mayfly_enqueue_pend;
   3025e:	e7d0      	b.n	30202 <mayfly_enqueue+0x3a>
			return 1;
   30260:	4610      	mov	r0, r2
}
   30262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	state = (m->_req - ack) & 0x03;
   30264:	7822      	ldrb	r2, [r4, #0]
   30266:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   30268:	0792      	lsls	r2, r2, #30
   3026a:	d002      	beq.n	30272 <mayfly_enqueue+0xaa>
		m->_req = ack + 2;
   3026c:	3302      	adds	r3, #2
   3026e:	b2db      	uxtb	r3, r3
   30270:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
   30272:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
   30276:	4798      	blx	r3
		return 0;
   30278:	e7ca      	b.n	30210 <mayfly_enqueue+0x48>
   3027a:	bf00      	nop
   3027c:	20001f3c 	.word	0x20001f3c
   30280:	20001eb8 	.word	0x20001eb8

00030284 <mayfly_run>:
		}
	}
}

void mayfly_run(uint8_t callee_id)
{
   30284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
   30288:	f8df 9140 	ldr.w	r9, [pc, #320]	; 303cc <mayfly_run+0x148>
   3028c:	f819 3000 	ldrb.w	r3, [r9, r0]
{
   30290:	b089      	sub	sp, #36	; 0x24
	if (!mfp[callee_id]) {
   30292:	2b00      	cmp	r3, #0
   30294:	d060      	beq.n	30358 <mayfly_run+0xd4>
		return;
	}
	mfp[callee_id] = 0U;
   30296:	f8df a138 	ldr.w	sl, [pc, #312]	; 303d0 <mayfly_run+0x14c>
   3029a:	9003      	str	r0, [sp, #12]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   3029c:	223c      	movs	r2, #60	; 0x3c
   3029e:	2304      	movs	r3, #4
	mfp[callee_id] = 0U;
   302a0:	2500      	movs	r5, #0
   302a2:	eb00 0b40 	add.w	fp, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   302a6:	fb12 3300 	smlabb	r3, r2, r0, r3

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
   302aa:	2403      	movs	r4, #3
   302ac:	e9cd 5504 	strd	r5, r5, [sp, #16]
	mfp[callee_id] = 0U;
   302b0:	f809 5000 	strb.w	r5, [r9, r0]
	while (caller_id--) {
   302b4:	eb0a 1b0b 	add.w	fp, sl, fp, lsl #4
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   302b8:	9302      	str	r3, [sp, #8]
   302ba:	4625      	mov	r5, r4
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
   302bc:	465c      	mov	r4, fp
		struct mayfly *m = 0;
   302be:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
   302c0:	f8db 1028 	ldr.w	r1, [fp, #40]	; 0x28
   302c4:	f854 0f24 	ldr.w	r0, [r4, #36]!
		struct mayfly *m = 0;
   302c8:	9307      	str	r3, [sp, #28]
		link = memq_peek(mft[callee_id][caller_id].head,
   302ca:	aa07      	add	r2, sp, #28
   302cc:	f7ff ff10 	bl	300f0 <memq_peek>
   302d0:	9501      	str	r5, [sp, #4]
   302d2:	4607      	mov	r7, r0
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
   302d4:	2f00      	cmp	r7, #0
   302d6:	d04b      	beq.n	30370 <mayfly_run+0xec>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
   302d8:	9d07      	ldr	r5, [sp, #28]
   302da:	7868      	ldrb	r0, [r5, #1]
   302dc:	782e      	ldrb	r6, [r5, #0]
   302de:	1a36      	subs	r6, r6, r0
   302e0:	f006 0603 	and.w	r6, r6, #3
			if (state == 1U) {
   302e4:	2e01      	cmp	r6, #1
   302e6:	d107      	bne.n	302f8 <mayfly_run+0x74>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
   302e8:	3801      	subs	r0, #1
   302ea:	7068      	strb	r0, [r5, #1]

				/* call the mayfly function */
				m->fp(m->param);
   302ec:	9b07      	ldr	r3, [sp, #28]
   302ee:	e9d3 0302 	ldrd	r0, r3, [r3, #8]
   302f2:	4798      	blx	r3
			}

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);
   302f4:	9d07      	ldr	r5, [sp, #28]
	if (((req - m->_ack) & 0x03) != 1U) {
   302f6:	7868      	ldrb	r0, [r5, #1]
	req = m->_req;
   302f8:	782b      	ldrb	r3, [r5, #0]
		memq_dequeue(mft[callee_id][caller_id].tail,
   302fa:	f8db c028 	ldr.w	ip, [fp, #40]	; 0x28
	if (((req - m->_ack) & 0x03) != 1U) {
   302fe:	1a18      	subs	r0, r3, r0
   30300:	f000 0003 	and.w	r0, r0, #3
   30304:	2801      	cmp	r0, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
   30306:	f04f 0200 	mov.w	r2, #0
   3030a:	4621      	mov	r1, r4
	req = m->_req;
   3030c:	fa5f f883 	uxtb.w	r8, r3
		memq_dequeue(mft[callee_id][caller_id].tail,
   30310:	4660      	mov	r0, ip
	if (((req - m->_ack) & 0x03) != 1U) {
   30312:	d00d      	beq.n	30330 <mayfly_run+0xac>
		memq_dequeue(mft[callee_id][caller_id].tail,
   30314:	f7ff fef4 	bl	30100 <memq_dequeue>
		ack = m->_ack;
   30318:	7869      	ldrb	r1, [r5, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   3031a:	782a      	ldrb	r2, [r5, #0]
		m->_link = link;
   3031c:	606f      	str	r7, [r5, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
   3031e:	1a52      	subs	r2, r2, r1
   30320:	f002 0203 	and.w	r2, r2, #3
   30324:	2a01      	cmp	r2, #1
		m->_ack = req;
   30326:	f885 8001 	strb.w	r8, [r5, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   3032a:	d018      	beq.n	3035e <mayfly_run+0xda>
   3032c:	f8db c028 	ldr.w	ip, [fp, #40]	; 0x28

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
   30330:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
   30334:	aa07      	add	r2, sp, #28
   30336:	4661      	mov	r1, ip
   30338:	f7ff feda 	bl	300f0 <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
   3033c:	2e01      	cmp	r6, #1
			link = memq_peek(mft[callee_id][caller_id].head,
   3033e:	4607      	mov	r7, r0
			if (state == 1U) {
   30340:	d1c8      	bne.n	302d4 <mayfly_run+0x50>
				/* pend callee (tailchain) if mayfly queue is
				 * not empty or all caller queues are not
				 * processed.
				 */
				if (caller_id || link) {
   30342:	9d01      	ldr	r5, [sp, #4]
   30344:	2d00      	cmp	r5, #0
   30346:	d03d      	beq.n	303c4 <mayfly_run+0x140>
					/* set mayfly callee pending */
					mfp[callee_id] = 1U;
   30348:	9f03      	ldr	r7, [sp, #12]
   3034a:	2301      	movs	r3, #1
   3034c:	f809 3007 	strb.w	r3, [r9, r7]

					/* pend the callee for execution */
					mayfly_pend(callee_id, callee_id);
   30350:	4639      	mov	r1, r7
   30352:	4638      	mov	r0, r7
   30354:	f00b fd98 	bl	3be88 <mayfly_pend>
	}

	if (disable && !enable) {
		mayfly_enable_cb(callee_id, callee_id, 0);
	}
}
   30358:	b009      	add	sp, #36	; 0x24
   3035a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   3035e:	9b02      	ldr	r3, [sp, #8]
			m->_ack = ack;
   30360:	7069      	strb	r1, [r5, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   30362:	4638      	mov	r0, r7
   30364:	4629      	mov	r1, r5
   30366:	eb0a 0203 	add.w	r2, sl, r3
   3036a:	f7ff feb7 	bl	300dc <memq_enqueue>
   3036e:	e7dd      	b.n	3032c <mayfly_run+0xa8>
   30370:	9d01      	ldr	r5, [sp, #4]
		if (mft[callee_id][caller_id].disable_req !=
   30372:	f89b 302e 	ldrb.w	r3, [fp, #46]	; 0x2e
   30376:	f89b 202f 	ldrb.w	r2, [fp, #47]	; 0x2f
   3037a:	429a      	cmp	r2, r3
   3037c:	d003      	beq.n	30386 <mayfly_run+0x102>
			mft[callee_id][caller_id].disable_ack =
   3037e:	f88b 302f 	strb.w	r3, [fp, #47]	; 0x2f
			disable = 1U;
   30382:	2301      	movs	r3, #1
   30384:	9304      	str	r3, [sp, #16]
		if (mft[callee_id][caller_id].enable_req !=
   30386:	f89b 302c 	ldrb.w	r3, [fp, #44]	; 0x2c
   3038a:	f89b 202d 	ldrb.w	r2, [fp, #45]	; 0x2d
   3038e:	429a      	cmp	r2, r3
   30390:	d003      	beq.n	3039a <mayfly_run+0x116>
			mft[callee_id][caller_id].enable_ack =
   30392:	f88b 302d 	strb.w	r3, [fp, #45]	; 0x2d
			enable = 1U;
   30396:	2301      	movs	r3, #1
   30398:	9305      	str	r3, [sp, #20]
	while (caller_id--) {
   3039a:	3d01      	subs	r5, #1
   3039c:	b2ed      	uxtb	r5, r5
   3039e:	2dff      	cmp	r5, #255	; 0xff
   303a0:	f1ab 0b0c 	sub.w	fp, fp, #12
   303a4:	d18a      	bne.n	302bc <mayfly_run+0x38>
	if (disable && !enable) {
   303a6:	e9dd 2504 	ldrd	r2, r5, [sp, #16]
   303aa:	9f03      	ldr	r7, [sp, #12]
   303ac:	2a00      	cmp	r2, #0
   303ae:	d0d3      	beq.n	30358 <mayfly_run+0xd4>
   303b0:	2d00      	cmp	r5, #0
   303b2:	d1d1      	bne.n	30358 <mayfly_run+0xd4>
		mayfly_enable_cb(callee_id, callee_id, 0);
   303b4:	462a      	mov	r2, r5
   303b6:	4639      	mov	r1, r7
   303b8:	4638      	mov	r0, r7
}
   303ba:	b009      	add	sp, #36	; 0x24
   303bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		mayfly_enable_cb(callee_id, callee_id, 0);
   303c0:	f00b bd0c 	b.w	3bddc <mayfly_enable_cb>
				if (caller_id || link) {
   303c4:	2800      	cmp	r0, #0
   303c6:	d0d4      	beq.n	30372 <mayfly_run+0xee>
   303c8:	e7be      	b.n	30348 <mayfly_run+0xc4>
   303ca:	bf00      	nop
   303cc:	20001eb8 	.word	0x20001eb8
   303d0:	20001f3c 	.word	0x20001f3c

000303d4 <util_ones_count_get>:
 */
uint8_t util_ones_count_get(const uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
   303d4:	1e4b      	subs	r3, r1, #1
   303d6:	b2db      	uxtb	r3, r3
   303d8:	b171      	cbz	r1, 303f8 <util_ones_count_get+0x24>
   303da:	1e41      	subs	r1, r0, #1
   303dc:	eb00 0c03 	add.w	ip, r0, r3
	uint8_t one_count = 0U;
   303e0:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
   303e2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
   303e6:	b123      	cbz	r3, 303f2 <util_ones_count_get+0x1e>
			bite &= (bite - 1);
   303e8:	1e5a      	subs	r2, r3, #1
			one_count++;
   303ea:	3001      	adds	r0, #1
		while (bite) {
   303ec:	4013      	ands	r3, r2
			one_count++;
   303ee:	b2c0      	uxtb	r0, r0
		while (bite) {
   303f0:	d1fa      	bne.n	303e8 <util_ones_count_get+0x14>
	while (octets_len--) {
   303f2:	4561      	cmp	r1, ip
   303f4:	d1f5      	bne.n	303e2 <util_ones_count_get+0xe>
   303f6:	4770      	bx	lr
	uint8_t one_count = 0U;
   303f8:	4608      	mov	r0, r1
		}
		octets++;
	}

	return one_count;
}
   303fa:	4770      	bx	lr

000303fc <ticker_dequeue>:
 * @return Total ticks until expiration for dequeued ticker node, or 0 if
 * node was not found
 * @internal
 */
static uint32_t ticker_dequeue(struct ticker_instance *instance, uint8_t id)
{
   303fc:	b530      	push	{r4, r5, lr}

	/* Find the ticker's position in ticker node list while accumulating
	 * ticks_to_expire
	 */
	node = &instance->nodes[0];
	previous = instance->ticker_id_head;
   303fe:	7e03      	ldrb	r3, [r0, #24]
	node = &instance->nodes[0];
   30400:	6805      	ldr	r5, [r0, #0]
	current = previous;
	total = 0U;
	ticker_current = 0;
	while (current != TICKER_NULL) {
   30402:	2bff      	cmp	r3, #255	; 0xff
   30404:	d014      	beq.n	30430 <ticker_dequeue+0x34>
		ticker_current = &node[current];
   30406:	eb03 0243 	add.w	r2, r3, r3, lsl #1

		if (current == id) {
   3040a:	428b      	cmp	r3, r1
		ticker_current = &node[current];
   3040c:	eb05 1202 	add.w	r2, r5, r2, lsl #4
		if (current == id) {
   30410:	d027      	beq.n	30462 <ticker_dequeue+0x66>
	total = 0U;
   30412:	f04f 0c00 	mov.w	ip, #0
   30416:	e001      	b.n	3041c <ticker_dequeue+0x20>
		if (current == id) {
   30418:	4299      	cmp	r1, r3
   3041a:	d00b      	beq.n	30434 <ticker_dequeue+0x38>
			break;
		}

		total += ticker_current->ticks_to_expire;
   3041c:	469e      	mov	lr, r3
		previous = current;
		current = ticker_current->next;
   3041e:	7813      	ldrb	r3, [r2, #0]
		total += ticker_current->ticks_to_expire;
   30420:	6894      	ldr	r4, [r2, #8]
	while (current != TICKER_NULL) {
   30422:	2bff      	cmp	r3, #255	; 0xff
		ticker_current = &node[current];
   30424:	eb03 0243 	add.w	r2, r3, r3, lsl #1
		total += ticker_current->ticks_to_expire;
   30428:	44a4      	add	ip, r4
		ticker_current = &node[current];
   3042a:	eb05 1202 	add.w	r2, r5, r2, lsl #4
	while (current != TICKER_NULL) {
   3042e:	d1f3      	bne.n	30418 <ticker_dequeue+0x1c>
	}

	if (current == TICKER_NULL) {
		/* Ticker not in active list */
		return 0;
   30430:	2000      	movs	r0, #0
	if (ticker_current->next != TICKER_NULL) {
		node[ticker_current->next].ticks_to_expire += timeout;
	}

	return (total + timeout);
}
   30432:	bd30      	pop	{r4, r5, pc}
	if (previous == current) {
   30434:	4571      	cmp	r1, lr
   30436:	d017      	beq.n	30468 <ticker_dequeue+0x6c>
	node[previous].next = ticker_current->next;
   30438:	fa0f fe8e 	sxth.w	lr, lr
   3043c:	7813      	ldrb	r3, [r2, #0]
	timeout = ticker_current->ticks_to_expire;
   3043e:	6890      	ldr	r0, [r2, #8]
	node[previous].next = ticker_current->next;
   30440:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   30444:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
	if (ticker_current->next != TICKER_NULL) {
   30448:	2bff      	cmp	r3, #255	; 0xff
	node[previous].next = ticker_current->next;
   3044a:	f805 300e 	strb.w	r3, [r5, lr]
	if (ticker_current->next != TICKER_NULL) {
   3044e:	d006      	beq.n	3045e <ticker_dequeue+0x62>
		node[ticker_current->next].ticks_to_expire += timeout;
   30450:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   30454:	eb05 1303 	add.w	r3, r5, r3, lsl #4
   30458:	689a      	ldr	r2, [r3, #8]
   3045a:	4402      	add	r2, r0
   3045c:	609a      	str	r2, [r3, #8]
	return (total + timeout);
   3045e:	4460      	add	r0, ip
}
   30460:	bd30      	pop	{r4, r5, pc}
	previous = instance->ticker_id_head;
   30462:	469e      	mov	lr, r3
	total = 0U;
   30464:	f04f 0c00 	mov.w	ip, #0
		instance->ticker_id_head = ticker_current->next;
   30468:	7813      	ldrb	r3, [r2, #0]
   3046a:	7603      	strb	r3, [r0, #24]
   3046c:	e7e4      	b.n	30438 <ticker_dequeue+0x3c>
   3046e:	bf00      	nop

00030470 <ticks_to_expire_prep>:
{
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   30470:	eba2 0c01 	sub.w	ip, r2, r1
   30474:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
{
   30478:	b410      	push	{r4}
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
   3047a:	6883      	ldr	r3, [r0, #8]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   3047c:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   3047e:	d10a      	bne.n	30496 <ticks_to_expire_prep+0x26>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   30480:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   30484:	4463      	add	r3, ip
	if (ticks_to_expire > ticks_to_expire_minus) {
   30486:	42a3      	cmp	r3, r4
   30488:	d80d      	bhi.n	304a6 <ticks_to_expire_prep+0x36>
		ticks_to_expire_minus -= ticks_to_expire;
   3048a:	1ae4      	subs	r4, r4, r3
		ticks_to_expire = 0U;
   3048c:	2300      	movs	r3, #0
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   3048e:	6144      	str	r4, [r0, #20]
	ticker->ticks_to_expire = ticks_to_expire;
   30490:	6083      	str	r3, [r0, #8]
}
   30492:	bc10      	pop	{r4}
   30494:	4770      	bx	lr
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   30496:	1a89      	subs	r1, r1, r2
   30498:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   3049c:	428b      	cmp	r3, r1
   3049e:	d908      	bls.n	304b2 <ticks_to_expire_prep+0x42>
			ticks_to_expire -= delta_current_start;
   304a0:	1a5b      	subs	r3, r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
   304a2:	42a3      	cmp	r3, r4
   304a4:	d9f1      	bls.n	3048a <ticks_to_expire_prep+0x1a>
		ticks_to_expire -= ticks_to_expire_minus;
   304a6:	1b1b      	subs	r3, r3, r4
		ticks_to_expire_minus = 0U;
   304a8:	2400      	movs	r4, #0
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   304aa:	6144      	str	r4, [r0, #20]
	ticker->ticks_to_expire = ticks_to_expire;
   304ac:	6083      	str	r3, [r0, #8]
}
   304ae:	bc10      	pop	{r4}
   304b0:	4770      	bx	lr
			ticks_to_expire_minus +=
   304b2:	440c      	add	r4, r1
   304b4:	1ae4      	subs	r4, r4, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
   304b6:	e7e9      	b.n	3048c <ticks_to_expire_prep+0x1c>

000304b8 <ticker_job_list_insert>:
{
   304b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   304bc:	4607      	mov	r7, r0
   304be:	b087      	sub	sp, #28
	count_user = instance->count_user;
   304c0:	7a40      	ldrb	r0, [r0, #9]
	node = &instance->nodes[0];
   304c2:	683b      	ldr	r3, [r7, #0]
	users = &instance->users[0];
   304c4:	687d      	ldr	r5, [r7, #4]
	node = &instance->nodes[0];
   304c6:	9301      	str	r3, [sp, #4]
	while (count_user--) {
   304c8:	2800      	cmp	r0, #0
   304ca:	f000 80ea 	beq.w	306a2 <ticker_job_list_insert+0x1ea>
   304ce:	1e42      	subs	r2, r0, #1
   304d0:	b2d2      	uxtb	r2, r2
   304d2:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
   304d6:	46bb      	mov	fp, r7
   304d8:	9202      	str	r2, [sp, #8]
   304da:	9505      	str	r5, [sp, #20]
   304dc:	460f      	mov	r7, r1
		user_ops = (void *)&user->user_op[0];
   304de:	9b02      	ldr	r3, [sp, #8]
   304e0:	685a      	ldr	r2, [r3, #4]
		user_ops_first = user->first;
   304e2:	f893 8001 	ldrb.w	r8, [r3, #1]
		user_ops = (void *)&user->user_op[0];
   304e6:	9204      	str	r2, [sp, #16]
		while ((insert_head != TICKER_NULL) ||
   304e8:	f8cd 800c 	str.w	r8, [sp, #12]
   304ec:	2fff      	cmp	r7, #255	; 0xff
   304ee:	d05e      	beq.n	305ae <ticker_job_list_insert+0xf6>
				ticker = &node[id_insert];
   304f0:	eb07 0447 	add.w	r4, r7, r7, lsl #1
   304f4:	9b01      	ldr	r3, [sp, #4]
   304f6:	0126      	lsls	r6, r4, #4
   304f8:	46ba      	mov	sl, r7
				insert_head = ticker->next;
   304fa:	5d9f      	ldrb	r7, [r3, r6]
				ticker = &node[id_insert];
   304fc:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				user_op = NULL;
   30500:	2500      	movs	r5, #0
	ticker->next = TICKER_NULL;
   30502:	f04f 0eff 	mov.w	lr, #255	; 0xff
   30506:	f884 e000 	strb.w	lr, [r4]
	node = &instance->nodes[0];
   3050a:	f8db c000 	ldr.w	ip, [fp]
	current = instance->ticker_id_head;
   3050e:	f89b 2018 	ldrb.w	r2, [fp, #24]
	ticker_new = &node[id];
   30512:	eb0c 0906 	add.w	r9, ip, r6
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   30516:	4572      	cmp	r2, lr
	ticks_to_expire = ticker_new->ticks_to_expire;
   30518:	f8d9 1008 	ldr.w	r1, [r9, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   3051c:	d10d      	bne.n	3053a <ticker_job_list_insert+0x82>
   3051e:	e0bb      	b.n	30698 <ticker_job_list_insert+0x1e0>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   30520:	1a09      	subs	r1, r1, r0
   30522:	d104      	bne.n	3052e <ticker_job_list_insert+0x76>
   30524:	f8b9 801e 	ldrh.w	r8, [r9, #30]
   30528:	8bf6      	ldrh	r6, [r6, #30]
   3052a:	45b0      	cmp	r8, r6
   3052c:	d876      	bhi.n	3061c <ticker_job_list_insert+0x164>
		current = ticker_current->next;
   3052e:	f81c 3003 	ldrb.w	r3, [ip, r3]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   30532:	2bff      	cmp	r3, #255	; 0xff
   30534:	4696      	mov	lr, r2
		current = ticker_current->next;
   30536:	461a      	mov	r2, r3
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   30538:	d007      	beq.n	3054a <ticker_job_list_insert+0x92>
		(ticker_current = &node[current])->ticks_to_expire))) {
   3053a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   3053e:	eb0c 1603 	add.w	r6, ip, r3, lsl #4
   30542:	011b      	lsls	r3, r3, #4
		(ticks_to_expire_current =
   30544:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   30546:	4288      	cmp	r0, r1
   30548:	d9ea      	bls.n	30520 <ticker_job_list_insert+0x68>
	if (previous == TICKER_NULL) {
   3054a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
	ticker_new->ticks_to_expire = ticks_to_expire;
   3054e:	f8c9 1008 	str.w	r1, [r9, #8]
	ticker_new->next = current;
   30552:	f889 2000 	strb.w	r2, [r9]
	if (previous == TICKER_NULL) {
   30556:	d05e      	beq.n	30616 <ticker_job_list_insert+0x15e>
		node[previous].next = id;
   30558:	fa0f fe8e 	sxth.w	lr, lr
   3055c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   30560:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
   30564:	f80c a00e 	strb.w	sl, [ip, lr]
	if (current != TICKER_NULL) {
   30568:	2aff      	cmp	r2, #255	; 0xff
   3056a:	d008      	beq.n	3057e <ticker_job_list_insert+0xc6>
		node[current].ticks_to_expire -= ticks_to_expire;
   3056c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   30570:	eb0c 1c02 	add.w	ip, ip, r2, lsl #4
   30574:	f8dc 3008 	ldr.w	r3, [ip, #8]
   30578:	1a5b      	subs	r3, r3, r1
   3057a:	f8cc 3008 	str.w	r3, [ip, #8]
	ticker->req = ticker->ack + 1;
   3057e:	78a3      	ldrb	r3, [r4, #2]
   30580:	3301      	adds	r3, #1
   30582:	7063      	strb	r3, [r4, #1]
			if (user_op) {
   30584:	2d00      	cmp	r5, #0
   30586:	d0b1      	beq.n	304ec <ticker_job_list_insert+0x34>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   30588:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
   3058c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   3058e:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
   30590:	2200      	movs	r2, #0
   30592:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   30594:	b113      	cbz	r3, 3059c <ticker_job_list_insert+0xe4>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   30596:	6b29      	ldr	r1, [r5, #48]	; 0x30
   30598:	4610      	mov	r0, r2
   3059a:	4798      	blx	r3
				if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   3059c:	6863      	ldr	r3, [r4, #4]
   3059e:	2b00      	cmp	r3, #0
   305a0:	d1a4      	bne.n	304ec <ticker_job_list_insert+0x34>
						user_op->fp_op_func;
   305a2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
					ticker->fp_op_func =
   305a4:	6223      	str	r3, [r4, #32]
						user_op->op_context;
   305a6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
					ticker->op_context =
   305a8:	6263      	str	r3, [r4, #36]	; 0x24
		while ((insert_head != TICKER_NULL) ||
   305aa:	2fff      	cmp	r7, #255	; 0xff
   305ac:	d1a0      	bne.n	304f0 <ticker_job_list_insert+0x38>
   305ae:	9b02      	ldr	r3, [sp, #8]
   305b0:	e9dd 8903 	ldrd	r8, r9, [sp, #12]
   305b4:	789a      	ldrb	r2, [r3, #2]
				user_op = &user_ops[user_ops_first];
   305b6:	eb08 0348 	add.w	r3, r8, r8, lsl #1
   305ba:	eb08 0383 	add.w	r3, r8, r3, lsl #2
				first = user_ops_first + 1;
   305be:	f108 0101 	add.w	r1, r8, #1
		while ((insert_head != TICKER_NULL) ||
   305c2:	4542      	cmp	r2, r8
				user_op = &user_ops[user_ops_first];
   305c4:	eb09 0583 	add.w	r5, r9, r3, lsl #2
				first = user_ops_first + 1;
   305c8:	fa5f f881 	uxtb.w	r8, r1
		while ((insert_head != TICKER_NULL) ||
   305cc:	d05c      	beq.n	30688 <ticker_job_list_insert+0x1d0>
				if (first == user->count_user_op) {
   305ce:	9902      	ldr	r1, [sp, #8]
   305d0:	7808      	ldrb	r0, [r1, #0]
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   305d2:	f819 1023 	ldrb.w	r1, [r9, r3, lsl #2]
					first = 0U;
   305d6:	4540      	cmp	r0, r8
   305d8:	bf08      	it	eq
   305da:	f04f 0800 	moveq.w	r8, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   305de:	2904      	cmp	r1, #4
   305e0:	d1e9      	bne.n	305b6 <ticker_job_list_insert+0xfe>
				id_insert = user_op->id;
   305e2:	f895 a001 	ldrb.w	sl, [r5, #1]
				ticker = &node[id_insert];
   305e6:	9901      	ldr	r1, [sp, #4]
   305e8:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   305ec:	eb01 1402 	add.w	r4, r1, r2, lsl #4
   305f0:	0116      	lsls	r6, r2, #4
				if (((ticker->req -
   305f2:	7861      	ldrb	r1, [r4, #1]
   305f4:	78a2      	ldrb	r2, [r4, #2]
   305f6:	4291      	cmp	r1, r2
	user_op->status = status;
   305f8:	f04f 0001 	mov.w	r0, #1
				if (((ticker->req -
   305fc:	d010      	beq.n	30620 <ticker_job_list_insert+0x168>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   305fe:	f04f 0200 	mov.w	r2, #0
   30602:	f809 2023 	strb.w	r2, [r9, r3, lsl #2]
	if (user_op->fp_op_func) {
   30606:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->status = status;
   30608:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   3060a:	b10b      	cbz	r3, 30610 <ticker_job_list_insert+0x158>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   3060c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   3060e:	4798      	blx	r3
   30610:	9b02      	ldr	r3, [sp, #8]
   30612:	789a      	ldrb	r2, [r3, #2]
		while ((insert_head != TICKER_NULL) ||
   30614:	e7cf      	b.n	305b6 <ticker_job_list_insert+0xfe>
		instance->ticker_id_head = id;
   30616:	f88b a018 	strb.w	sl, [fp, #24]
   3061a:	e7a5      	b.n	30568 <ticker_job_list_insert+0xb0>
		(ticks_to_expire_current =
   3061c:	4601      	mov	r1, r0
   3061e:	e794      	b.n	3054a <ticker_job_list_insert+0x92>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   30620:	8aab      	ldrh	r3, [r5, #20]
				ticker_job_op_start(ticker, user_op,
   30622:	f8db 1014 	ldr.w	r1, [fp, #20]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   30626:	f8cd 800c 	str.w	r8, [sp, #12]
   3062a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   3062e:	4293      	cmp	r3, r2
   30630:	d007      	beq.n	30642 <ticker_job_list_insert+0x18a>
		ticker->must_expire =
   30632:	f64f 72ff 	movw	r2, #65535	; 0xffff
   30636:	1a9b      	subs	r3, r3, r2
   30638:	fab3 f383 	clz	r3, r3
   3063c:	095b      	lsrs	r3, r3, #5
   3063e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
   30642:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   30644:	62a3      	str	r3, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   30646:	68eb      	ldr	r3, [r5, #12]
   30648:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   3064a:	692b      	ldr	r3, [r5, #16]
   3064c:	6223      	str	r3, [r4, #32]
		(start->lazy < TICKER_LAZY_MUST_EXPIRE_KEEP) ? start->lazy :
   3064e:	8aab      	ldrh	r3, [r5, #20]
	ticker->lazy_periodic =
   30650:	f64f 72fd 	movw	r2, #65533	; 0xfffd
   30654:	4293      	cmp	r3, r2
   30656:	bf88      	it	hi
   30658:	2300      	movhi	r3, #0
   3065a:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
   3065c:	69ab      	ldr	r3, [r5, #24]
   3065e:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
   30660:	69eb      	ldr	r3, [r5, #28]
   30662:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   30664:	6a2b      	ldr	r3, [r5, #32]
   30666:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
   30668:	68ab      	ldr	r3, [r5, #8]
   3066a:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0U;
   3066c:	2300      	movs	r3, #0
   3066e:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   30670:	686a      	ldr	r2, [r5, #4]
   30672:	4620      	mov	r0, r4
	ticker->ticks_to_expire_minus = 0U;
   30674:	4698      	mov	r8, r3
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   30676:	f7ff fefb 	bl	30470 <ticks_to_expire_prep>
	ticker->force = 1U;
   3067a:	2301      	movs	r3, #1
	ticker->remainder_current = 0U;
   3067c:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   30680:	f8a4 801e 	strh.w	r8, [r4, #30]
	ticker->force = 1U;
   30684:	70e3      	strb	r3, [r4, #3]
}
   30686:	e73c      	b.n	30502 <ticker_job_list_insert+0x4a>
	while (count_user--) {
   30688:	9a02      	ldr	r2, [sp, #8]
   3068a:	9905      	ldr	r1, [sp, #20]
   3068c:	4291      	cmp	r1, r2
   3068e:	f1a2 0308 	sub.w	r3, r2, #8
   30692:	d006      	beq.n	306a2 <ticker_job_list_insert+0x1ea>
   30694:	9302      	str	r3, [sp, #8]
   30696:	e722      	b.n	304de <ticker_job_list_insert+0x26>
	ticker_new->next = current;
   30698:	f80c 2006 	strb.w	r2, [ip, r6]
		instance->ticker_id_head = id;
   3069c:	f88b a018 	strb.w	sl, [fp, #24]
	if (current != TICKER_NULL) {
   306a0:	e76d      	b.n	3057e <ticker_job_list_insert+0xc6>
}
   306a2:	b007      	add	sp, #28
   306a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000306a8 <ticker_worker>:
{
   306a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   306ac:	7e47      	ldrb	r7, [r0, #25]
	instance->worker_trigger = 1U;
   306ae:	2301      	movs	r3, #1
{
   306b0:	b089      	sub	sp, #36	; 0x24
	instance->worker_trigger = 1U;
   306b2:	7683      	strb	r3, [r0, #26]
	if (instance->job_guard) {
   306b4:	2f00      	cmp	r7, #0
   306b6:	d153      	bne.n	30760 <ticker_worker+0xb8>
	if (instance->ticker_id_head == TICKER_NULL) {
   306b8:	7e03      	ldrb	r3, [r0, #24]
   306ba:	2bff      	cmp	r3, #255	; 0xff
   306bc:	4682      	mov	sl, r0
   306be:	d04e      	beq.n	3075e <ticker_worker+0xb6>
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   306c0:	f00a ff5c 	bl	3b57c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   306c4:	f8da 2014 	ldr.w	r2, [sl, #20]
	if (instance->ticks_slot_previous > ticks_elapsed) {
   306c8:	f8da 301c 	ldr.w	r3, [sl, #28]
	ticker_id_head = instance->ticker_id_head;
   306cc:	f89a 4018 	ldrb.w	r4, [sl, #24]
	node = &instance->nodes[0];
   306d0:	f8da b000 	ldr.w	fp, [sl]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   306d4:	1a86      	subs	r6, r0, r2
   306d6:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
	if (instance->ticks_slot_previous > ticks_elapsed) {
   306da:	42b3      	cmp	r3, r6
   306dc:	bf94      	ite	ls
   306de:	2300      	movls	r3, #0
   306e0:	2301      	movhi	r3, #1
	while (ticker_id_head != TICKER_NULL) {
   306e2:	2cff      	cmp	r4, #255	; 0xff
	if (instance->ticks_slot_previous > ticks_elapsed) {
   306e4:	9303      	str	r3, [sp, #12]
	ticks_expired = 0U;
   306e6:	46b9      	mov	r9, r7
	while (ticker_id_head != TICKER_NULL) {
   306e8:	d043      	beq.n	30772 <ticker_worker+0xca>
			ticker->ext_data->ticks_drift = 0U;
   306ea:	9704      	str	r7, [sp, #16]
		ticker = &node[ticker_id_head];
   306ec:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   306f0:	eb0b 1504 	add.w	r5, fp, r4, lsl #4
   306f4:	0124      	lsls	r4, r4, #4
		ticks_to_expire = ticker->ticks_to_expire;
   306f6:	68ab      	ldr	r3, [r5, #8]
		if (ticks_elapsed < ticks_to_expire) {
   306f8:	42b3      	cmp	r3, r6
   306fa:	d839      	bhi.n	30770 <ticker_worker+0xc8>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   306fc:	78aa      	ldrb	r2, [r5, #2]
		ticker_id_head = ticker->next;
   306fe:	f81b 4004 	ldrb.w	r4, [fp, r4]
		ticks_elapsed -= ticks_to_expire;
   30702:	1af6      	subs	r6, r6, r3
		ticks_expired += ticks_to_expire;
   30704:	4499      	add	r9, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   30706:	786b      	ldrb	r3, [r5, #1]
   30708:	1a9b      	subs	r3, r3, r2
   3070a:	b2db      	uxtb	r3, r3
   3070c:	2b01      	cmp	r3, #1
   3070e:	d12d      	bne.n	3076c <ticker_worker+0xc4>
		if (ticker->ticks_slot != 0U &&
   30710:	f8d5 c018 	ldr.w	ip, [r5, #24]
   30714:	f1bc 0f00 	cmp.w	ip, #0
   30718:	d04f      	beq.n	307ba <ticker_worker+0x112>
   3071a:	9b03      	ldr	r3, [sp, #12]
   3071c:	2b00      	cmp	r3, #0
   3071e:	f000 8081 	beq.w	30824 <ticker_worker+0x17c>
			struct ticker_ext *ext_data = ticker->ext_data;
   30722:	6aab      	ldr	r3, [r5, #40]	; 0x28
			if (ext_data &&
   30724:	b143      	cbz	r3, 30738 <ticker_worker+0x90>
   30726:	681a      	ldr	r2, [r3, #0]
   30728:	b11a      	cbz	r2, 30732 <ticker_worker+0x8a>
			    ext_data->ticks_slot_window != 0U &&
   3072a:	7a1a      	ldrb	r2, [r3, #8]
   3072c:	2a00      	cmp	r2, #0
   3072e:	f000 80c1 	beq.w	308b4 <ticker_worker+0x20c>
				ext_data->reschedule_state =
   30732:	f04f 0200 	mov.w	r2, #0
   30736:	721a      	strb	r2, [r3, #8]
			ticker->lazy_current++;
   30738:	8beb      	ldrh	r3, [r5, #30]
			if ((ticker->must_expire == 0U) ||
   3073a:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
			ticker->lazy_current++;
   3073e:	3301      	adds	r3, #1
   30740:	b29b      	uxth	r3, r3
   30742:	83eb      	strh	r3, [r5, #30]
			if ((ticker->must_expire == 0U) ||
   30744:	b17a      	cbz	r2, 30766 <ticker_worker+0xbe>
   30746:	8baa      	ldrh	r2, [r5, #28]
   30748:	429a      	cmp	r2, r3
   3074a:	d20c      	bcs.n	30766 <ticker_worker+0xbe>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
   3074c:	6aab      	ldr	r3, [r5, #40]	; 0x28
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
   3074e:	2b00      	cmp	r3, #0
   30750:	f000 80c3 	beq.w	308da <ticker_worker+0x232>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
   30754:	7a1a      	ldrb	r2, [r3, #8]
   30756:	2a01      	cmp	r2, #1
   30758:	d005      	beq.n	30766 <ticker_worker+0xbe>
			must_expire_skip = 1U;
   3075a:	2701      	movs	r7, #1
   3075c:	e030      	b.n	307c0 <ticker_worker+0x118>
		instance->worker_trigger = 0U;
   3075e:	7687      	strb	r7, [r0, #26]
}
   30760:	b009      	add	sp, #36	; 0x24
   30762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker->ack--;
   30766:	78ab      	ldrb	r3, [r5, #2]
   30768:	3b01      	subs	r3, #1
   3076a:	70ab      	strb	r3, [r5, #2]
	while (ticker_id_head != TICKER_NULL) {
   3076c:	2cff      	cmp	r4, #255	; 0xff
   3076e:	d1bd      	bne.n	306ec <ticker_worker+0x44>
   30770:	9f04      	ldr	r7, [sp, #16]
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   30772:	f89a 300b 	ldrb.w	r3, [sl, #11]
   30776:	f89a 200a 	ldrb.w	r2, [sl, #10]
   3077a:	429a      	cmp	r2, r3
   3077c:	d108      	bne.n	30790 <ticker_worker+0xe8>
	uint8_t idx = *ticks_elapsed_index + 1;
   3077e:	3201      	adds	r2, #1
   30780:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
   30782:	2a02      	cmp	r2, #2
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   30784:	bf1a      	itte	ne
   30786:	4617      	movne	r7, r2
   30788:	463b      	movne	r3, r7
   3078a:	2300      	moveq	r3, #0
	*ticks_elapsed_index = idx;
   3078c:	f88a 700b 	strb.w	r7, [sl, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   30790:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
	instance->worker_trigger = 0U;
   30794:	2200      	movs	r2, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   30796:	f8c3 900c 	str.w	r9, [r3, #12]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   3079a:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
	instance->worker_trigger = 0U;
   3079e:	f88a 201a 	strb.w	r2, [sl, #26]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   307a2:	4653      	mov	r3, sl
   307a4:	2201      	movs	r2, #1
   307a6:	2104      	movs	r1, #4
   307a8:	2003      	movs	r0, #3
   307aa:	46a4      	mov	ip, r4
}
   307ac:	b009      	add	sp, #36	; 0x24
   307ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   307b2:	4760      	bx	ip
   307b4:	9e05      	ldr	r6, [sp, #20]
   307b6:	9a06      	ldr	r2, [sp, #24]
   307b8:	4674      	mov	r4, lr
		if (ticker->ext_data) {
   307ba:	6aab      	ldr	r3, [r5, #40]	; 0x28
   307bc:	b37b      	cbz	r3, 3081e <ticker_worker+0x176>
   307be:	2700      	movs	r7, #0
			ticker->ext_data->ticks_drift = 0U;
   307c0:	2200      	movs	r2, #0
			ticks_drift = ticker->ext_data->ticks_drift;
   307c2:	6859      	ldr	r1, [r3, #4]
			ticker->ext_data->ticks_drift = 0U;
   307c4:	605a      	str	r2, [r3, #4]
			ticker->ext_data->reschedule_state =
   307c6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   307c8:	721a      	strb	r2, [r3, #8]
		ticker->ack--;
   307ca:	78aa      	ldrb	r2, [r5, #2]
		if (ticker->timeout_func) {
   307cc:	f8d5 800c 	ldr.w	r8, [r5, #12]
		ticker->ack--;
   307d0:	3a01      	subs	r2, #1
   307d2:	70aa      	strb	r2, [r5, #2]
		if (ticker->timeout_func) {
   307d4:	f1b8 0f00 	cmp.w	r8, #0
   307d8:	d0c8      	beq.n	3076c <ticker_worker+0xc4>
					   ticks_expired -
   307da:	696b      	ldr	r3, [r5, #20]
   307dc:	f8da 2014 	ldr.w	r2, [sl, #20]
			ticker->timeout_func(ticks_at_expire,
   307e0:	f895 c003 	ldrb.w	ip, [r5, #3]
					   ticks_expired -
   307e4:	eba9 0303 	sub.w	r3, r9, r3
   307e8:	4413      	add	r3, r2
			ticks_at_expire = (instance->ticks_current +
   307ea:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   307ee:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   307f0:	692b      	ldr	r3, [r5, #16]
   307f2:	b977      	cbnz	r7, 30812 <ticker_worker+0x16a>
   307f4:	f8b5 e01e 	ldrh.w	lr, [r5, #30]
   307f8:	e9cd c300 	strd	ip, r3, [sp]
   307fc:	4673      	mov	r3, lr
   307fe:	47c0      	blx	r8
				if (ticker->ticks_slot != 0U) {
   30800:	69ab      	ldr	r3, [r5, #24]
				ticker->lazy_current = 0U;
   30802:	83ef      	strh	r7, [r5, #30]
					slot_reserved = 1U;
   30804:	2b00      	cmp	r3, #0
   30806:	9b03      	ldr	r3, [sp, #12]
				ticker->force = 0U;
   30808:	70ef      	strb	r7, [r5, #3]
					slot_reserved = 1U;
   3080a:	bf18      	it	ne
   3080c:	2301      	movne	r3, #1
   3080e:	9303      	str	r3, [sp, #12]
   30810:	e7ac      	b.n	3076c <ticker_worker+0xc4>
			ticker->timeout_func(ticks_at_expire,
   30812:	e9cd c300 	strd	ip, r3, [sp]
   30816:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3081a:	47c0      	blx	r8
			if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   3081c:	e7a6      	b.n	3076c <ticker_worker+0xc4>
   3081e:	461f      	mov	r7, r3
			ticks_drift = 0U;
   30820:	4619      	mov	r1, r3
   30822:	e7d3      	b.n	307cc <ticker_worker+0x124>
	if (ticker->next != TICKER_NULL) {
   30824:	2cff      	cmp	r4, #255	; 0xff
   30826:	d0c8      	beq.n	307ba <ticker_worker+0x112>
		uint16_t lazy_current = ticker->lazy_current;
   30828:	8be9      	ldrh	r1, [r5, #30]
		if (lazy_current >= ticker->lazy_periodic) {
   3082a:	8bab      	ldrh	r3, [r5, #28]
		uint32_t current_age = ticker->ticks_periodic +
   3082c:	6868      	ldr	r0, [r5, #4]
		if (lazy_current >= ticker->lazy_periodic) {
   3082e:	4299      	cmp	r1, r3
			lazy_current -= ticker->lazy_periodic;
   30830:	bf24      	itt	cs
   30832:	1acb      	subcs	r3, r1, r3
   30834:	b299      	uxthcs	r1, r3
			struct ticker_node *ticker_next = &nodes[id_head];
   30836:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   3083a:	eb0b 1303 	add.w	r3, fp, r3, lsl #4
		uint32_t current_age = ticker->ticks_periodic +
   3083e:	fb01 0100 	mla	r1, r1, r0, r0
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   30842:	689f      	ldr	r7, [r3, #8]
		uint32_t current_age = ticker->ticks_periodic +
   30844:	9107      	str	r1, [sp, #28]
			if (acc_ticks_to_expire > ticker->ticks_slot) {
   30846:	4567      	cmp	r7, ip
   30848:	d8b7      	bhi.n	307ba <ticker_worker+0x112>
   3084a:	9605      	str	r6, [sp, #20]
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   3084c:	4639      	mov	r1, r7
   3084e:	46a6      	mov	lr, r4
   30850:	4606      	mov	r6, r0
   30852:	9206      	str	r2, [sp, #24]
   30854:	e010      	b.n	30878 <ticker_worker+0x1d0>
					  0U :
   30856:	2c00      	cmp	r4, #0
   30858:	d134      	bne.n	308c4 <ticker_worker+0x21c>
			     (next_is_critical ||
   3085a:	78d8      	ldrb	r0, [r3, #3]
   3085c:	78ea      	ldrb	r2, [r5, #3]
   3085e:	4290      	cmp	r0, r2
   30860:	d825      	bhi.n	308ae <ticker_worker+0x206>
			id_head = ticker_next->next;
   30862:	781b      	ldrb	r3, [r3, #0]
		while (id_head != TICKER_NULL) {
   30864:	2bff      	cmp	r3, #255	; 0xff
   30866:	d0a5      	beq.n	307b4 <ticker_worker+0x10c>
			struct ticker_node *ticker_next = &nodes[id_head];
   30868:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   3086c:	eb0b 1303 	add.w	r3, fp, r3, lsl #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   30870:	689f      	ldr	r7, [r3, #8]
   30872:	4439      	add	r1, r7
			if (acc_ticks_to_expire > ticker->ticks_slot) {
   30874:	458c      	cmp	ip, r1
   30876:	d39d      	bcc.n	307b4 <ticker_worker+0x10c>
			if (ticker_next->ticks_slot == 0U) {
   30878:	699a      	ldr	r2, [r3, #24]
   3087a:	2a00      	cmp	r2, #0
   3087c:	d0f1      	beq.n	30862 <ticker_worker+0x1ba>
			uint16_t lazy_next = ticker_next->lazy_current;
   3087e:	8bda      	ldrh	r2, [r3, #30]
				ticker_next->lazy_periodic > lazy_next;
   30880:	8b98      	ldrh	r0, [r3, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   30882:	685c      	ldr	r4, [r3, #4]
			if (!lazy_next_periodic_skip) {
   30884:	4282      	cmp	r2, r0
   30886:	d2e6      	bcs.n	30856 <ticker_worker+0x1ae>
					  0U :
   30888:	2c00      	cmp	r4, #0
   3088a:	d0ea      	beq.n	30862 <ticker_worker+0x1ba>
				(ticker->ticks_periodic != 0U) &&
   3088c:	2e00      	cmp	r6, #0
   3088e:	d0e8      	beq.n	30862 <ticker_worker+0x1ba>
   30890:	4690      	mov	r8, r2
			if (curr_has_ticks_slot_window ||
   30892:	4282      	cmp	r2, r0
   30894:	d3e5      	bcc.n	30862 <ticker_worker+0x1ba>
				(ticker->force == ticker_next->force);
   30896:	78e8      	ldrb	r0, [r5, #3]
   30898:	78da      	ldrb	r2, [r3, #3]
			     (next_is_critical ||
   3089a:	4290      	cmp	r0, r2
   3089c:	d307      	bcc.n	308ae <ticker_worker+0x206>
			      (equal_priority && equal_force && next_is_older &&
   3089e:	d1e0      	bne.n	30862 <ticker_worker+0x1ba>
   308a0:	9a07      	ldr	r2, [sp, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   308a2:	fb08 4804 	mla	r8, r8, r4, r4
   308a6:	eba8 0807 	sub.w	r8, r8, r7
			      (equal_priority && equal_force && next_is_older &&
   308aa:	4542      	cmp	r2, r8
   308ac:	d2d9      	bcs.n	30862 <ticker_worker+0x1ba>
   308ae:	9e05      	ldr	r6, [sp, #20]
   308b0:	4674      	mov	r4, lr
   308b2:	e736      	b.n	30722 <ticker_worker+0x7a>
			    TICKER_RESCHEDULE_STATE_NONE &&
   308b4:	8ba9      	ldrh	r1, [r5, #28]
   308b6:	8bea      	ldrh	r2, [r5, #30]
   308b8:	4291      	cmp	r1, r2
   308ba:	f63f af3a 	bhi.w	30732 <ticker_worker+0x8a>
				ext_data->reschedule_state =
   308be:	2201      	movs	r2, #1
   308c0:	721a      	strb	r2, [r3, #8]
   308c2:	e739      	b.n	30738 <ticker_worker+0x90>
				(ticker->ticks_periodic != 0U) &&
   308c4:	b126      	cbz	r6, 308d0 <ticker_worker+0x228>
				lazy_next -= ticker_next->lazy_periodic;
   308c6:	eba2 0800 	sub.w	r8, r2, r0
   308ca:	fa1f f888 	uxth.w	r8, r8
   308ce:	e7e0      	b.n	30892 <ticker_worker+0x1ea>
			     (next_is_critical ||
   308d0:	78e8      	ldrb	r0, [r5, #3]
   308d2:	78da      	ldrb	r2, [r3, #3]
   308d4:	4290      	cmp	r0, r2
   308d6:	d2c4      	bcs.n	30862 <ticker_worker+0x1ba>
   308d8:	e7e9      	b.n	308ae <ticker_worker+0x206>
				ticker->ack--;
   308da:	78aa      	ldrb	r2, [r5, #2]
			ticks_drift = 0U;
   308dc:	4619      	mov	r1, r3
			must_expire_skip = 1U;
   308de:	2701      	movs	r7, #1
   308e0:	e774      	b.n	307cc <ticker_worker+0x124>
   308e2:	bf00      	nop

000308e4 <ticker_job>:
	if (instance->worker_trigger) {
   308e4:	7e83      	ldrb	r3, [r0, #26]
   308e6:	2b00      	cmp	r3, #0
   308e8:	f040 843a 	bne.w	31160 <ticker_job+0x87c>
{
   308ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   308f0:	7e42      	ldrb	r2, [r0, #25]
{
   308f2:	b08f      	sub	sp, #60	; 0x3c
   308f4:	4682      	mov	sl, r0
	if (instance->job_guard) {
   308f6:	2a00      	cmp	r2, #0
   308f8:	f040 8081 	bne.w	309fe <ticker_job+0x11a>
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   308fc:	7a83      	ldrb	r3, [r0, #10]
   308fe:	7ac1      	ldrb	r1, [r0, #11]
	instance->job_guard = 1U;
   30900:	2001      	movs	r0, #1
   30902:	f88a 0019 	strb.w	r0, [sl, #25]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   30906:	4299      	cmp	r1, r3
	ticks_previous = instance->ticks_current;
   30908:	f8da 0014 	ldr.w	r0, [sl, #20]
   3090c:	9008      	str	r0, [sp, #32]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   3090e:	f000 8452 	beq.w	311b6 <ticker_job+0x8d2>
	uint8_t idx = *ticks_elapsed_index + 1;
   30912:	3301      	adds	r3, #1
   30914:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
   30916:	2b02      	cmp	r3, #2
		idx = 0U;
   30918:	bf08      	it	eq
   3091a:	4613      	moveq	r3, r2
		ticks_elapsed =
   3091c:	eb0a 0283 	add.w	r2, sl, r3, lsl #2
	*ticks_elapsed_index = idx;
   30920:	f88a 300a 	strb.w	r3, [sl, #10]
		ticks_elapsed =
   30924:	68d2      	ldr	r2, [r2, #12]
		instance->ticks_current += ticks_elapsed;
   30926:	9b08      	ldr	r3, [sp, #32]
		ticks_elapsed =
   30928:	9204      	str	r2, [sp, #16]
		instance->ticks_current += ticks_elapsed;
   3092a:	4413      	add	r3, r2
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   3092c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		flag_elapsed = 1U;
   30930:	2401      	movs	r4, #1
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   30932:	f8ca 3014 	str.w	r3, [sl, #20]
	ticker_id_old_head = instance->ticker_id_head;
   30936:	f89a 3018 	ldrb.w	r3, [sl, #24]
   3093a:	9309      	str	r3, [sp, #36]	; 0x24
	ticks_now = cntr_cnt_get();
   3093c:	f00a fe1e 	bl	3b57c <cntr_cnt_get>
	count_user = instance->count_user;
   30940:	f89a 6009 	ldrb.w	r6, [sl, #9]
	node = &instance->nodes[0];
   30944:	f8da 3000 	ldr.w	r3, [sl]
   30948:	9301      	str	r3, [sp, #4]
	while (count_user--) {
   3094a:	1e73      	subs	r3, r6, #1
	users = &instance->users[0];
   3094c:	f8da 5004 	ldr.w	r5, [sl, #4]
	ticks_now = cntr_cnt_get();
   30950:	9006      	str	r0, [sp, #24]
	while (count_user--) {
   30952:	b2db      	uxtb	r3, r3
   30954:	2e00      	cmp	r6, #0
   30956:	f000 8454 	beq.w	31202 <ticker_job+0x91e>
	pending = 0U;
   3095a:	2600      	movs	r6, #0
   3095c:	eb05 09c3 	add.w	r9, r5, r3, lsl #3
	insert_head = TICKER_NULL;
   30960:	23ff      	movs	r3, #255	; 0xff
   30962:	960a      	str	r6, [sp, #40]	; 0x28
   30964:	9305      	str	r3, [sp, #20]
   30966:	940d      	str	r4, [sp, #52]	; 0x34
   30968:	462e      	mov	r6, r5
   3096a:	f8cd a00c 	str.w	sl, [sp, #12]
		user_ops = &user->user_op[0];
   3096e:	f8d9 b004 	ldr.w	fp, [r9, #4]
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   30972:	f04f 0a00 	mov.w	sl, #0
   30976:	4637      	mov	r7, r6
		while (user->middle != user->last) {
   30978:	f899 0003 	ldrb.w	r0, [r9, #3]
   3097c:	f899 8002 	ldrb.w	r8, [r9, #2]
			user_op = &user_ops[user->middle];
   30980:	fa0f f288 	sxth.w	r2, r8
   30984:	eb02 0142 	add.w	r1, r2, r2, lsl #1
			middle = user->middle + 1;
   30988:	f108 0301 	add.w	r3, r8, #1
			user_op = &user_ops[user->middle];
   3098c:	eb02 0481 	add.w	r4, r2, r1, lsl #2
		while (user->middle != user->last) {
   30990:	4540      	cmp	r0, r8
			middle = user->middle + 1;
   30992:	b2db      	uxtb	r3, r3
			user_op = &user_ops[user->middle];
   30994:	eb0b 0584 	add.w	r5, fp, r4, lsl #2
		while (user->middle != user->last) {
   30998:	f000 8110 	beq.w	30bbc <ticker_job+0x2d8>
			if (middle == user->count_user_op) {
   3099c:	f899 2000 	ldrb.w	r2, [r9]
				middle = 0U;
   309a0:	429a      	cmp	r2, r3
   309a2:	bf08      	it	eq
   309a4:	2300      	moveq	r3, #0
			user->middle = middle;
   309a6:	f889 3002 	strb.w	r3, [r9, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   309aa:	f81b 2024 	ldrb.w	r2, [fp, r4, lsl #2]
			ticker = &node[user_op->id];
   309ae:	7869      	ldrb	r1, [r5, #1]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   309b0:	2a04      	cmp	r2, #4
   309b2:	d939      	bls.n	30a28 <ticker_job+0x144>
			ticker = &node[user_op->id];
   309b4:	9801      	ldr	r0, [sp, #4]
   309b6:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   309ba:	eb00 1603 	add.w	r6, r0, r3, lsl #4
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   309be:	2a08      	cmp	r2, #8
			ticker = &node[user_op->id];
   309c0:	ea4f 1303 	mov.w	r3, r3, lsl #4
   309c4:	9302      	str	r3, [sp, #8]
			state = (ticker->req - ticker->ack) & 0xff;
   309c6:	78b0      	ldrb	r0, [r6, #2]
   309c8:	7873      	ldrb	r3, [r6, #1]
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   309ca:	d822      	bhi.n	30a12 <ticker_job+0x12e>
			state = (ticker->req - ticker->ack) & 0xff;
   309cc:	1a1b      	subs	r3, r3, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   309ce:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   309d2:	d12b      	bne.n	30a2c <ticker_job+0x148>
			    ((state == 0U) &&
   309d4:	2a06      	cmp	r2, #6
   309d6:	d11c      	bne.n	30a12 <ticker_job+0x12e>
		if (instance->ticker_id_slot_previous == user_op->id) {
   309d8:	9b03      	ldr	r3, [sp, #12]
   309da:	7edb      	ldrb	r3, [r3, #27]
   309dc:	428b      	cmp	r3, r1
   309de:	d050      	beq.n	30a82 <ticker_job+0x19e>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   309e0:	f80b a024 	strb.w	sl, [fp, r4, lsl #2]
	if (user_op->fp_op_func) {
   309e4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->status = status;
   309e6:	f8c5 a028 	str.w	sl, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   309ea:	2b00      	cmp	r3, #0
   309ec:	d0c4      	beq.n	30978 <ticker_job+0x94>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   309ee:	2000      	movs	r0, #0
   309f0:	6b29      	ldr	r1, [r5, #48]	; 0x30
   309f2:	4798      	blx	r3
		while (user->middle != user->last) {
   309f4:	f899 0003 	ldrb.w	r0, [r9, #3]
   309f8:	f899 8002 	ldrb.w	r8, [r9, #2]
   309fc:	e7c0      	b.n	30980 <ticker_job+0x9c>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_JOB, 1,
   309fe:	6a44      	ldr	r4, [r0, #36]	; 0x24
   30a00:	2104      	movs	r1, #4
   30a02:	4603      	mov	r3, r0
   30a04:	2201      	movs	r2, #1
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   30a06:	2004      	movs	r0, #4
   30a08:	46a4      	mov	ip, r4
}
   30a0a:	b00f      	add	sp, #60	; 0x3c
   30a0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   30a10:	4760      	bx	ip
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   30a12:	f80b a024 	strb.w	sl, [fp, r4, lsl #2]
	user_op->status = status;
   30a16:	2301      	movs	r3, #1
   30a18:	62ab      	str	r3, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   30a1a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   30a1c:	2b00      	cmp	r3, #0
   30a1e:	d0ab      	beq.n	30978 <ticker_job+0x94>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   30a20:	6b29      	ldr	r1, [r5, #48]	; 0x30
   30a22:	2001      	movs	r0, #1
   30a24:	4798      	blx	r3
   30a26:	e7a7      	b.n	30978 <ticker_job+0x94>
   30a28:	4698      	mov	r8, r3
   30a2a:	e7a9      	b.n	30980 <ticker_job+0x9c>
			     (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS)) ||
   30a2c:	2a05      	cmp	r2, #5
   30a2e:	d11f      	bne.n	30a70 <ticker_job+0x18c>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
   30a30:	686a      	ldr	r2, [r5, #4]
   30a32:	b94a      	cbnz	r2, 30a48 <ticker_job+0x164>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
   30a34:	68aa      	ldr	r2, [r5, #8]
   30a36:	b93a      	cbnz	r2, 30a48 <ticker_job+0x164>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
   30a38:	68ea      	ldr	r2, [r5, #12]
   30a3a:	b92a      	cbnz	r2, 30a48 <ticker_job+0x164>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
   30a3c:	692a      	ldr	r2, [r5, #16]
   30a3e:	b91a      	cbnz	r2, 30a48 <ticker_job+0x164>
			     (user_op->params.update.lazy == 0U) &&
   30a40:	696a      	ldr	r2, [r5, #20]
   30a42:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   30a46:	d0e4      	beq.n	30a12 <ticker_job+0x12e>
			if ((state == 1U) ||
   30a48:	2b01      	cmp	r3, #1
   30a4a:	d01c      	beq.n	30a86 <ticker_job+0x1a2>
				instance->sched_cb(TICKER_CALL_ID_JOB,
   30a4c:	9b03      	ldr	r3, [sp, #12]
   30a4e:	2104      	movs	r1, #4
   30a50:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   30a52:	463e      	mov	r6, r7
   30a54:	2201      	movs	r2, #1
   30a56:	4608      	mov	r0, r1
   30a58:	47a0      	blx	r4
				pending = 1U;
   30a5a:	2301      	movs	r3, #1
	while (count_user--) {
   30a5c:	45b1      	cmp	r9, r6
				pending = 1U;
   30a5e:	930a      	str	r3, [sp, #40]	; 0x28
				user->middle = prev;
   30a60:	f889 8002 	strb.w	r8, [r9, #2]
	while (count_user--) {
   30a64:	f1a9 0308 	sub.w	r3, r9, #8
   30a68:	f000 80ae 	beq.w	30bc8 <ticker_job+0x2e4>
   30a6c:	4699      	mov	r9, r3
   30a6e:	e77e      	b.n	3096e <ticker_job+0x8a>
			if ((state == 1U) ||
   30a70:	2b01      	cmp	r3, #1
   30a72:	f000 818d 	beq.w	30d90 <ticker_job+0x4ac>
   30a76:	2a06      	cmp	r2, #6
   30a78:	d1e8      	bne.n	30a4c <ticker_job+0x168>
		if (instance->ticker_id_slot_previous == user_op->id) {
   30a7a:	9b03      	ldr	r3, [sp, #12]
   30a7c:	7edb      	ldrb	r3, [r3, #27]
   30a7e:	428b      	cmp	r3, r1
   30a80:	d1ae      	bne.n	309e0 <ticker_job+0xfc>
				ticks_at_yield =
   30a82:	6869      	ldr	r1, [r5, #4]
   30a84:	e1a6      	b.n	30dd4 <ticker_job+0x4f0>
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   30a86:	f8dd 800c 	ldr.w	r8, [sp, #12]
   30a8a:	4640      	mov	r0, r8
   30a8c:	f7ff fcb6 	bl	303fc <ticker_dequeue>
   30a90:	60b0      	str	r0, [r6, #8]
		ticker_job_node_update(ticker, user_op, ticks_now,
   30a92:	f8d8 c014 	ldr.w	ip, [r8, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   30a96:	9b06      	ldr	r3, [sp, #24]
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   30a98:	9a04      	ldr	r2, [sp, #16]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   30a9a:	eba3 030c 	sub.w	r3, r3, ip
   30a9e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   30aa2:	4413      	add	r3, r2
	if (ticks_to_expire > ticks_elapsed) {
   30aa4:	4298      	cmp	r0, r3
   30aa6:	f240 81ad 	bls.w	30e04 <ticker_job+0x520>
		ticks_to_expire -= ticks_elapsed;
   30aaa:	1ac0      	subs	r0, r0, r3
	if ((ticker->ticks_periodic != 0U) &&
   30aac:	6873      	ldr	r3, [r6, #4]
   30aae:	2b00      	cmp	r3, #0
   30ab0:	d050      	beq.n	30b54 <ticker_job+0x270>
	    (user_op->params.update.lazy != 0U)) {
   30ab2:	8aab      	ldrh	r3, [r5, #20]
	if ((ticker->ticks_periodic != 0U) &&
   30ab4:	2b00      	cmp	r3, #0
   30ab6:	d04d      	beq.n	30b54 <ticker_job+0x270>
		user_op->params.update.lazy--;
   30ab8:	3b01      	subs	r3, #1
   30aba:	b29a      	uxth	r2, r3
   30abc:	82aa      	strh	r2, [r5, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   30abe:	6871      	ldr	r1, [r6, #4]
		while (ticker->lazy_current < user_op->params.update.lazy) {
   30ac0:	8bf3      	ldrh	r3, [r6, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   30ac2:	4288      	cmp	r0, r1
   30ac4:	d923      	bls.n	30b0e <ticker_job+0x22a>
			ticks_to_expire += ticker->ticks_periodic +
   30ac6:	f101 0801 	add.w	r8, r1, #1
   30aca:	9707      	str	r7, [sp, #28]
   30acc:	940b      	str	r4, [sp, #44]	; 0x2c
   30ace:	e01a      	b.n	30b06 <ticker_job+0x222>
	if ((ticker->remainder_current >= BIT(31)) ||
   30ad0:	6a72      	ldr	r2, [r6, #36]	; 0x24
   30ad2:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 30bb4 <ticker_job+0x2d0>
   30ad6:	4c38      	ldr	r4, [pc, #224]	; (30bb8 <ticker_job+0x2d4>)
   30ad8:	4496      	add	lr, r2
   30ada:	45a6      	cmp	lr, r4
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   30adc:	bf84      	itt	hi
   30ade:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000
   30ae2:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
			ticks_to_expire += ticker->ticks_periodic +
   30ae6:	4647      	mov	r7, r8
	ticker->remainder_current -= ticker->remainder_periodic;
   30ae8:	6a34      	ldr	r4, [r6, #32]
   30aea:	bf94      	ite	ls
   30aec:	460f      	movls	r7, r1
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   30aee:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
			ticker->lazy_current--;
   30af2:	3b01      	subs	r3, #1
			ticks_to_expire -= ticker->ticks_periodic +
   30af4:	1bc0      	subs	r0, r0, r7
	ticker->remainder_current -= ticker->remainder_periodic;
   30af6:	1b12      	subs	r2, r2, r4
			ticker->lazy_current--;
   30af8:	b29b      	uxth	r3, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   30afa:	4288      	cmp	r0, r1
	ticker->remainder_current -= ticker->remainder_periodic;
   30afc:	6272      	str	r2, [r6, #36]	; 0x24
			ticker->lazy_current--;
   30afe:	83f3      	strh	r3, [r6, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   30b00:	f240 81d9 	bls.w	30eb6 <ticker_job+0x5d2>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   30b04:	8aaa      	ldrh	r2, [r5, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   30b06:	4293      	cmp	r3, r2
   30b08:	d8e2      	bhi.n	30ad0 <ticker_job+0x1ec>
   30b0a:	9f07      	ldr	r7, [sp, #28]
   30b0c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		while (ticker->lazy_current < user_op->params.update.lazy) {
   30b0e:	429a      	cmp	r2, r3
   30b10:	d91f      	bls.n	30b52 <ticker_job+0x26e>
			ticks_to_expire += ticker->ticks_periodic +
   30b12:	e9cd 740b 	strd	r7, r4, [sp, #44]	; 0x2c
   30b16:	1c4a      	adds	r2, r1, #1
	ticker->remainder_current += ticker->remainder_periodic;
   30b18:	f8d6 e020 	ldr.w	lr, [r6, #32]
			ticks_to_expire += ticker->ticks_periodic +
   30b1c:	9207      	str	r2, [sp, #28]
	ticker->remainder_current += ticker->remainder_periodic;
   30b1e:	6a72      	ldr	r2, [r6, #36]	; 0x24
	if ((ticker->remainder_current < BIT(31)) &&
   30b20:	f8df 8090 	ldr.w	r8, [pc, #144]	; 30bb4 <ticker_job+0x2d0>
   30b24:	4c24      	ldr	r4, [pc, #144]	; (30bb8 <ticker_job+0x2d4>)
	ticker->remainder_current += ticker->remainder_periodic;
   30b26:	4472      	add	r2, lr
	if ((ticker->remainder_current < BIT(31)) &&
   30b28:	4490      	add	r8, r2
   30b2a:	45a0      	cmp	r8, r4
   30b2c:	460f      	mov	r7, r1
   30b2e:	d806      	bhi.n	30b3e <ticker_job+0x25a>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   30b30:	f1a2 72e8 	sub.w	r2, r2, #30408704	; 0x1d00000
   30b34:	f5a2 32d4 	sub.w	r2, r2, #108544	; 0x1a800
			ticks_to_expire += ticker->ticks_periodic +
   30b38:	9f07      	ldr	r7, [sp, #28]
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   30b3a:	f5a2 72a5 	sub.w	r2, r2, #330	; 0x14a
			ticker->lazy_current++;
   30b3e:	3301      	adds	r3, #1
   30b40:	b29b      	uxth	r3, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   30b42:	6272      	str	r2, [r6, #36]	; 0x24
			ticker->lazy_current++;
   30b44:	83f3      	strh	r3, [r6, #30]
		while (ticker->lazy_current < user_op->params.update.lazy) {
   30b46:	8aaa      	ldrh	r2, [r5, #20]
   30b48:	429a      	cmp	r2, r3
			ticks_to_expire += ticker->ticks_periodic +
   30b4a:	4438      	add	r0, r7
		while (ticker->lazy_current < user_op->params.update.lazy) {
   30b4c:	d8e7      	bhi.n	30b1e <ticker_job+0x23a>
   30b4e:	e9dd 740b 	ldrd	r7, r4, [sp, #44]	; 0x2c
		ticker->lazy_periodic = user_op->params.update.lazy;
   30b52:	83b2      	strh	r2, [r6, #28]
	ticker->ticks_to_expire = ticks_to_expire +
   30b54:	686b      	ldr	r3, [r5, #4]
	struct ticker_ext *ext_data = ticker->ext_data;
   30b56:	6ab1      	ldr	r1, [r6, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
   30b58:	4403      	add	r3, r0
   30b5a:	60b3      	str	r3, [r6, #8]
	ticker->ticks_to_expire_minus +=
   30b5c:	68aa      	ldr	r2, [r5, #8]
   30b5e:	6973      	ldr	r3, [r6, #20]
   30b60:	4413      	add	r3, r2
   30b62:	6173      	str	r3, [r6, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
   30b64:	b129      	cbz	r1, 30b72 <ticker_job+0x28e>
   30b66:	680b      	ldr	r3, [r1, #0]
   30b68:	b11b      	cbz	r3, 30b72 <ticker_job+0x28e>
			user_op->params.update.ticks_drift_plus -
   30b6a:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   30b6e:	1a9b      	subs	r3, r3, r2
		ext_data->ticks_drift =
   30b70:	604b      	str	r3, [r1, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   30b72:	9a06      	ldr	r2, [sp, #24]
   30b74:	4661      	mov	r1, ip
   30b76:	4630      	mov	r0, r6
   30b78:	f7ff fc7a 	bl	30470 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   30b7c:	68ea      	ldr	r2, [r5, #12]
   30b7e:	69b3      	ldr	r3, [r6, #24]
   30b80:	4413      	add	r3, r2
   30b82:	61b3      	str	r3, [r6, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   30b84:	692a      	ldr	r2, [r5, #16]
   30b86:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   30b88:	bf8c      	ite	hi
   30b8a:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
   30b8c:	2300      	movls	r3, #0
   30b8e:	61b3      	str	r3, [r6, #24]
	if (user_op->params.update.force != 0U) {
   30b90:	7dab      	ldrb	r3, [r5, #22]
   30b92:	b103      	cbz	r3, 30b96 <ticker_job+0x2b2>
		ticker->force = user_op->params.update.force;
   30b94:	70f3      	strb	r3, [r6, #3]
	if (user_op->params.update.must_expire) {
   30b96:	7deb      	ldrb	r3, [r5, #23]
   30b98:	b113      	cbz	r3, 30ba0 <ticker_job+0x2bc>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
   30b9a:	3b01      	subs	r3, #1
   30b9c:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
	ticker->next = *insert_head;
   30ba0:	e9dd 2101 	ldrd	r2, r1, [sp, #4]
   30ba4:	9b05      	ldr	r3, [sp, #20]
   30ba6:	5453      	strb	r3, [r2, r1]
		ticker->req++;
   30ba8:	7873      	ldrb	r3, [r6, #1]
	*insert_head = user_op->id;
   30baa:	786a      	ldrb	r2, [r5, #1]
   30bac:	9205      	str	r2, [sp, #20]
		ticker->req++;
   30bae:	3301      	adds	r3, #1
   30bb0:	7073      	strb	r3, [r6, #1]
   30bb2:	e715      	b.n	309e0 <ticker_job+0xfc>
   30bb4:	ff172b5a 	.word	0xff172b5a
   30bb8:	7f172b59 	.word	0x7f172b59
   30bbc:	463e      	mov	r6, r7
	while (count_user--) {
   30bbe:	45b1      	cmp	r9, r6
   30bc0:	f1a9 0308 	sub.w	r3, r9, #8
   30bc4:	f47f af52 	bne.w	30a6c <ticker_job+0x188>
   30bc8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   30bca:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   30bcc:	f8dd a00c 	ldr.w	sl, [sp, #12]
	if (instance->ticker_id_head != ticker_id_old_head) {
   30bd0:	f89a b018 	ldrb.w	fp, [sl, #24]
   30bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   30bd6:	ebbb 0303 	subs.w	r3, fp, r3
   30bda:	bf18      	it	ne
   30bdc:	2301      	movne	r3, #1
   30bde:	9307      	str	r3, [sp, #28]
	if (flag_elapsed) {
   30be0:	2c00      	cmp	r4, #0
   30be2:	f000 822c 	beq.w	3103e <ticker_job+0x75a>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   30be6:	9b06      	ldr	r3, [sp, #24]
   30be8:	9a08      	ldr	r2, [sp, #32]
   30bea:	1a9b      	subs	r3, r3, r2
   30bec:	f023 477f 	bic.w	r7, r3, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
   30bf0:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
	node = &instance->nodes[0];
   30bf4:	f8da 3000 	ldr.w	r3, [sl]
   30bf8:	9301      	str	r3, [sp, #4]
	while (instance->ticker_id_head != TICKER_NULL) {
   30bfa:	d050      	beq.n	30c9e <ticker_job+0x3ba>
   30bfc:	f8dd 8010 	ldr.w	r8, [sp, #16]
			instance->ticks_slot_previous = 0U;
   30c00:	9406      	str	r4, [sp, #24]
	ticks_expired = 0U;
   30c02:	f04f 0900 	mov.w	r9, #0
			instance->ticks_slot_previous = 0U;
   30c06:	4645      	mov	r5, r8
   30c08:	960a      	str	r6, [sp, #40]	; 0x28
   30c0a:	46c8      	mov	r8, r9
		ticker = &node[id_expired];
   30c0c:	9a01      	ldr	r2, [sp, #4]
   30c0e:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
   30c12:	eb02 1403 	add.w	r4, r2, r3, lsl #4
   30c16:	ea4f 1903 	mov.w	r9, r3, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
   30c1a:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   30c1c:	42ab      	cmp	r3, r5
   30c1e:	f200 82ce 	bhi.w	311be <ticker_job+0x8da>
		state = (ticker->req - ticker->ack) & 0xff;
   30c22:	78a1      	ldrb	r1, [r4, #2]
   30c24:	7862      	ldrb	r2, [r4, #1]
		skip_collision = (ticker->lazy_current != 0U);
   30c26:	8be0      	ldrh	r0, [r4, #30]
		state = (ticker->req - ticker->ack) & 0xff;
   30c28:	1a52      	subs	r2, r2, r1
		if (instance->ticks_slot_previous > ticks_to_expire) {
   30c2a:	f8da 101c 	ldr.w	r1, [sl, #28]
   30c2e:	428b      	cmp	r3, r1
		ticks_elapsed -= ticks_to_expire;
   30c30:	eba5 0503 	sub.w	r5, r5, r3
		ticks_expired += ticks_to_expire;
   30c34:	4498      	add	r8, r3
		ticks_latency -= ticks_to_expire;
   30c36:	eba7 0703 	sub.w	r7, r7, r3
			instance->ticks_slot_previous -= ticks_to_expire;
   30c3a:	bf31      	iteee	cc
   30c3c:	1ac9      	subcc	r1, r1, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   30c3e:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
			instance->ticks_slot_previous = 0U;
   30c42:	2100      	movcs	r1, #0
			instance->ticker_id_slot_previous = TICKER_NULL;
   30c44:	f88a 301b 	strbcs.w	r3, [sl, #27]
   30c48:	f8ca 101c 	str.w	r1, [sl, #28]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   30c4c:	69a3      	ldr	r3, [r4, #24]
		state = (ticker->req - ticker->ack) & 0xff;
   30c4e:	b2d2      	uxtb	r2, r2
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   30c50:	b113      	cbz	r3, 30c58 <ticker_job+0x374>
   30c52:	2a02      	cmp	r2, #2
   30c54:	f000 8133 	beq.w	30ebe <ticker_job+0x5da>
		ticker->ticks_to_expire = 0U;
   30c58:	2300      	movs	r3, #0
   30c5a:	60a3      	str	r3, [r4, #8]
		instance->ticker_id_head = ticker->next;
   30c5c:	9b01      	ldr	r3, [sp, #4]
   30c5e:	f813 3009 	ldrb.w	r3, [r3, r9]
   30c62:	f88a 3018 	strb.w	r3, [sl, #24]
		if ((ticker->ticks_periodic != 0U) ||
   30c66:	6861      	ldr	r1, [r4, #4]
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   30c68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		if ((ticker->ticks_periodic != 0U) ||
   30c6a:	2900      	cmp	r1, #0
   30c6c:	f040 80ec 	bne.w	30e48 <ticker_job+0x564>
   30c70:	b11b      	cbz	r3, 30c7a <ticker_job+0x396>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
   30c72:	7a1b      	ldrb	r3, [r3, #8]
   30c74:	2b01      	cmp	r3, #1
   30c76:	f000 80cb 	beq.w	30e10 <ticker_job+0x52c>
			if (state && ((state == 1U) || skip_collision) &&
   30c7a:	b13a      	cbz	r2, 30c8c <ticker_job+0x3a8>
   30c7c:	2a01      	cmp	r2, #1
   30c7e:	d000      	beq.n	30c82 <ticker_job+0x39e>
   30c80:	b120      	cbz	r0, 30c8c <ticker_job+0x3a8>
			    ticker->fp_op_func) {
   30c82:	6a23      	ldr	r3, [r4, #32]
			if (state && ((state == 1U) || skip_collision) &&
   30c84:	b113      	cbz	r3, 30c8c <ticker_job+0x3a8>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
   30c86:	6a61      	ldr	r1, [r4, #36]	; 0x24
   30c88:	2001      	movs	r0, #1
   30c8a:	4798      	blx	r3
			ticker->req = ticker->ack;
   30c8c:	78a3      	ldrb	r3, [r4, #2]
   30c8e:	7063      	strb	r3, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
   30c90:	f89a b018 	ldrb.w	fp, [sl, #24]
   30c94:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   30c98:	d1b8      	bne.n	30c0c <ticker_job+0x328>
   30c9a:	9c06      	ldr	r4, [sp, #24]
   30c9c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
			flag_compare_update = 1U;
   30c9e:	9b07      	ldr	r3, [sp, #28]
   30ca0:	9a09      	ldr	r2, [sp, #36]	; 0x24
		ticker_job_list_insert(instance, insert_head);
   30ca2:	9905      	ldr	r1, [sp, #20]
			flag_compare_update = 1U;
   30ca4:	4593      	cmp	fp, r2
   30ca6:	bf18      	it	ne
   30ca8:	4623      	movne	r3, r4
		ticker_job_list_insert(instance, insert_head);
   30caa:	4650      	mov	r0, sl
			flag_compare_update = 1U;
   30cac:	9307      	str	r3, [sp, #28]
		ticker_job_list_insert(instance, insert_head);
   30cae:	f7ff fc03 	bl	304b8 <ticker_job_list_insert>
		ticker_id_head = instance->ticker_id_head;
   30cb2:	f89a 3018 	ldrb.w	r3, [sl, #24]
	nodes = &instance->nodes[0];
   30cb6:	f8da b000 	ldr.w	fp, [sl]
	while (rescheduling) {
   30cba:	9603      	str	r6, [sp, #12]
		while (ticker_id_head != TICKER_NULL) {
   30cbc:	2bff      	cmp	r3, #255	; 0xff
	uint8_t  rescheduled = 0U;
   30cbe:	f04f 0500 	mov.w	r5, #0
		ticker_id_head = instance->ticker_id_head;
   30cc2:	461a      	mov	r2, r3
		while (ticker_id_head != TICKER_NULL) {
   30cc4:	f000 81aa 	beq.w	3101c <ticker_job+0x738>
		ticker_id_head = instance->ticker_id_head;
   30cc8:	461c      	mov	r4, r3
			ticker = &nodes[ticker_id_head];
   30cca:	b221      	sxth	r1, r4
   30ccc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   30cd0:	eb0b 1001 	add.w	r0, fp, r1, lsl #4
   30cd4:	0109      	lsls	r1, r1, #4
			ext_data = ticker->ext_data;
   30cd6:	6a87      	ldr	r7, [r0, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
   30cd8:	b11f      	cbz	r7, 30ce2 <ticker_job+0x3fe>
   30cda:	7a3e      	ldrb	r6, [r7, #8]
   30cdc:	2e01      	cmp	r6, #1
   30cde:	f000 8102 	beq.w	30ee6 <ticker_job+0x602>
			ticker_id_head = ticker->next;
   30ce2:	f81b 4001 	ldrb.w	r4, [fp, r1]
		while (ticker_id_head != TICKER_NULL) {
   30ce6:	2cff      	cmp	r4, #255	; 0xff
   30ce8:	d1ef      	bne.n	30cca <ticker_job+0x3e6>
	return rescheduled;
   30cea:	9e03      	ldr	r6, [sp, #12]
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
   30cec:	2d00      	cmp	r5, #0
   30cee:	f000 81ac 	beq.w	3104a <ticker_job+0x766>
	if (instance->ticker_id_head != ticker_id_old_head) {
   30cf2:	9909      	ldr	r1, [sp, #36]	; 0x24
   30cf4:	4299      	cmp	r1, r3
   30cf6:	f000 826a 	beq.w	311ce <ticker_job+0x8ea>
	if (!pending) {
   30cfa:	2e00      	cmp	r6, #0
   30cfc:	f000 81bd 	beq.w	3107a <ticker_job+0x796>
	if (instance->ticker_id_head == TICKER_NULL) {
   30d00:	461a      	mov	r2, r3
   30d02:	2aff      	cmp	r2, #255	; 0xff
   30d04:	f000 8191 	beq.w	3102a <ticker_job+0x746>
	if (ticker_id_old_head == TICKER_NULL) {
   30d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
   30d0a:	2bff      	cmp	r3, #255	; 0xff
   30d0c:	f000 8286 	beq.w	3121c <ticker_job+0x938>
	ticks_to_expire = ticker->ticks_to_expire;
   30d10:	f8da 3000 	ldr.w	r3, [sl]
		LL_ASSERT(i);
   30d14:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 30fe0 <ticker_job+0x6fc>
   30d18:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 30fe4 <ticker_job+0x700>
   30d1c:	4fb2      	ldr	r7, [pc, #712]	; (30fe8 <ticker_job+0x704>)
	ticker = &instance->nodes[instance->ticker_id_head];
   30d1e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
   30d22:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	i = 10U;
   30d26:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
   30d28:	689e      	ldr	r6, [r3, #8]
		ctr = cntr_cnt_get();
   30d2a:	f00a fc27 	bl	3b57c <cntr_cnt_get>
		cc = instance->ticks_current;
   30d2e:	f8da 4014 	ldr.w	r4, [sl, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   30d32:	1b03      	subs	r3, r0, r4
   30d34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   30d38:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
   30d3a:	42b3      	cmp	r3, r6
   30d3c:	bf2c      	ite	cs
   30d3e:	18e4      	addcs	r4, r4, r3
   30d40:	19a4      	addcc	r4, r4, r6
		cc &= HAL_TICKER_CNTR_MASK;
   30d42:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		instance->trigger_set_cb(cc);
   30d46:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
		ctr = cntr_cnt_get();
   30d4a:	4683      	mov	fp, r0
		instance->trigger_set_cb(cc);
   30d4c:	4620      	mov	r0, r4
   30d4e:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   30d50:	f00a fc14 	bl	3b57c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   30d54:	eba0 030b 	sub.w	r3, r0, fp
   30d58:	eba4 040b 	sub.w	r4, r4, fp
   30d5c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   30d60:	3303      	adds	r3, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   30d62:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  HAL_TICKER_CNTR_CMP_OFFSET_MIN) >
   30d66:	42a3      	cmp	r3, r4
		i--;
   30d68:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		  HAL_TICKER_CNTR_CMP_OFFSET_MIN) >
   30d6c:	f240 8178 	bls.w	31060 <ticker_job+0x77c>
		LL_ASSERT(i);
   30d70:	2d00      	cmp	r5, #0
   30d72:	d1da      	bne.n	30d2a <ticker_job+0x446>
   30d74:	f640 13a8 	movw	r3, #2472	; 0x9a8
   30d78:	464a      	mov	r2, r9
   30d7a:	4641      	mov	r1, r8
   30d7c:	4638      	mov	r0, r7
   30d7e:	f011 fc23 	bl	425c8 <assert_print>
   30d82:	4040      	eors	r0, r0
   30d84:	f380 8811 	msr	BASEPRI, r0
   30d88:	f04f 0003 	mov.w	r0, #3
   30d8c:	df02      	svc	2
   30d8e:	e7cc      	b.n	30d2a <ticker_job+0x446>
		if (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS) {
   30d90:	2a06      	cmp	r2, #6
   30d92:	f43f ae21 	beq.w	309d8 <ticker_job+0xf4>
			ticker->ticks_to_expire = ticker_dequeue(instance,
   30d96:	f8dd 800c 	ldr.w	r8, [sp, #12]
   30d9a:	4640      	mov	r0, r8
   30d9c:	f7ff fb2e 	bl	303fc <ticker_dequeue>
			ticker->req = ticker->ack;
   30da0:	78b3      	ldrb	r3, [r6, #2]
			ticker->ticks_to_expire = ticker_dequeue(instance,
   30da2:	60b0      	str	r0, [r6, #8]
			ticker->req = ticker->ack;
   30da4:	7073      	strb	r3, [r6, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   30da6:	f898 201b 	ldrb.w	r2, [r8, #27]
   30daa:	786b      	ldrb	r3, [r5, #1]
   30dac:	429a      	cmp	r2, r3
   30dae:	f47f ae17 	bne.w	309e0 <ticker_job+0xfc>
			if (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS) {
   30db2:	f81b 3024 	ldrb.w	r3, [fp, r4, lsl #2]
   30db6:	2b06      	cmp	r3, #6
   30db8:	f43f ae63 	beq.w	30a82 <ticker_job+0x19e>
				instance->ticker_id_slot_previous = TICKER_NULL;
   30dbc:	9a03      	ldr	r2, [sp, #12]
   30dbe:	23ff      	movs	r3, #255	; 0xff
   30dc0:	76d3      	strb	r3, [r2, #27]
			if ((user_op->op == TICKER_USER_OP_TYPE_YIELD_ABS) ||
   30dc2:	f81b 3024 	ldrb.w	r3, [fp, r4, lsl #2]
   30dc6:	2b06      	cmp	r3, #6
   30dc8:	f43f ae5b 	beq.w	30a82 <ticker_job+0x19e>
   30dcc:	2b08      	cmp	r3, #8
   30dce:	f43f ae58 	beq.w	30a82 <ticker_job+0x19e>
				ticks_at_yield = ticks_now;
   30dd2:	9906      	ldr	r1, [sp, #24]
			ticks_current = instance->ticks_current;
   30dd4:	9b03      	ldr	r3, [sp, #12]
   30dd6:	695a      	ldr	r2, [r3, #20]
			if (!((ticks_at_yield - ticks_current) &
   30dd8:	1a8b      	subs	r3, r1, r2
   30dda:	021e      	lsls	r6, r3, #8
   30ddc:	d409      	bmi.n	30df2 <ticker_job+0x50e>
				ticks_used = ticks_elapsed +
   30dde:	9a04      	ldr	r2, [sp, #16]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   30de0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
   30de4:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
   30de6:	9903      	ldr	r1, [sp, #12]
   30de8:	69ca      	ldr	r2, [r1, #28]
   30dea:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
   30dec:	bf88      	it	hi
   30dee:	61cb      	strhi	r3, [r1, #28]
   30df0:	e5f6      	b.n	309e0 <ticker_job+0xfc>
				if (ticks_elapsed > ticks_used) {
   30df2:	9b04      	ldr	r3, [sp, #16]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   30df4:	1a52      	subs	r2, r2, r1
   30df6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
   30dfa:	4293      	cmp	r3, r2
					ticks_used = ticks_elapsed -
   30dfc:	bf8c      	ite	hi
   30dfe:	1a9b      	subhi	r3, r3, r2
					ticks_used = 0;
   30e00:	2300      	movls	r3, #0
   30e02:	e7f0      	b.n	30de6 <ticker_job+0x502>
		ticker->ticks_to_expire_minus += ticks_elapsed -
   30e04:	6972      	ldr	r2, [r6, #20]
   30e06:	4413      	add	r3, r2
   30e08:	1a1b      	subs	r3, r3, r0
   30e0a:	6173      	str	r3, [r6, #20]
		ticks_to_expire = 0U;
   30e0c:	2000      	movs	r0, #0
   30e0e:	e64d      	b.n	30aac <ticker_job+0x1c8>
				ticker->req = ticker->ack;
   30e10:	78a3      	ldrb	r3, [r4, #2]
				ticker->ticks_to_expire = ticks_elapsed;
   30e12:	60a5      	str	r5, [r4, #8]
				ticker->req = ticker->ack;
   30e14:	7063      	strb	r3, [r4, #1]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   30e16:	9b08      	ldr	r3, [sp, #32]
   30e18:	f8da 1014 	ldr.w	r1, [sl, #20]
   30e1c:	eb03 0208 	add.w	r2, r3, r8
   30e20:	4620      	mov	r0, r4
   30e22:	f7ff fb25 	bl	30470 <ticks_to_expire_prep>
			ticker->next = *insert_head;
   30e26:	9a01      	ldr	r2, [sp, #4]
   30e28:	9b05      	ldr	r3, [sp, #20]
   30e2a:	f802 3009 	strb.w	r3, [r2, r9]
			ticker->req++;
   30e2e:	7863      	ldrb	r3, [r4, #1]
   30e30:	f8cd b014 	str.w	fp, [sp, #20]
   30e34:	3301      	adds	r3, #1
   30e36:	b2db      	uxtb	r3, r3
			ticker->req = ticker->ack;
   30e38:	7063      	strb	r3, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
   30e3a:	f89a b018 	ldrb.w	fp, [sl, #24]
   30e3e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   30e42:	f47f aee3 	bne.w	30c0c <ticker_job+0x328>
   30e46:	e728      	b.n	30c9a <ticker_job+0x3b6>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   30e48:	b113      	cbz	r3, 30e50 <ticker_job+0x56c>
   30e4a:	7a1b      	ldrb	r3, [r3, #8]
   30e4c:	2b01      	cmp	r3, #1
   30e4e:	d0df      	beq.n	30e10 <ticker_job+0x52c>
				if (!ticker->lazy_current) {
   30e50:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
   30e54:	f1bc 0f00 	cmp.w	ip, #0
   30e58:	d140      	bne.n	30edc <ticker_job+0x5f8>
					lazy_periodic = ticker->lazy_periodic;
   30e5a:	f8b4 c01c 	ldrh.w	ip, [r4, #28]
				while (count--) {
   30e5e:	46e6      	mov	lr, ip
   30e60:	1c48      	adds	r0, r1, #1
   30e62:	e9cd 0402 	strd	r0, r4, [sp, #8]
	ticker->remainder_current += ticker->remainder_periodic;
   30e66:	e9d4 6308 	ldrd	r6, r3, [r4, #32]
				ticks_to_expire = 0U;
   30e6a:	2200      	movs	r2, #0
   30e6c:	4670      	mov	r0, lr
   30e6e:	e004      	b.n	30e7a <ticker_job+0x596>
				while (count--) {
   30e70:	3801      	subs	r0, #1
	if ((ticker->remainder_current < BIT(31)) &&
   30e72:	468e      	mov	lr, r1
				while (count--) {
   30e74:	1c44      	adds	r4, r0, #1
					ticks_to_expire +=
   30e76:	4472      	add	r2, lr
				while (count--) {
   30e78:	d012      	beq.n	30ea0 <ticker_job+0x5bc>
	if ((ticker->remainder_current < BIT(31)) &&
   30e7a:	f8df e170 	ldr.w	lr, [pc, #368]	; 30fec <ticker_job+0x708>
   30e7e:	4c5c      	ldr	r4, [pc, #368]	; (30ff0 <ticker_job+0x70c>)
	ticker->remainder_current += ticker->remainder_periodic;
   30e80:	4433      	add	r3, r6
	if ((ticker->remainder_current < BIT(31)) &&
   30e82:	449e      	add	lr, r3
   30e84:	45a6      	cmp	lr, r4
   30e86:	d8f3      	bhi.n	30e70 <ticker_job+0x58c>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   30e88:	f8dd e008 	ldr.w	lr, [sp, #8]
   30e8c:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
				while (count--) {
   30e90:	3801      	subs	r0, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   30e92:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
				while (count--) {
   30e96:	1c44      	adds	r4, r0, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   30e98:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
					ticks_to_expire +=
   30e9c:	4472      	add	r2, lr
				while (count--) {
   30e9e:	d1ec      	bne.n	30e7a <ticker_job+0x596>
   30ea0:	9c03      	ldr	r4, [sp, #12]
				} else if (!ticker->must_expire) {
   30ea2:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
   30ea6:	6263      	str	r3, [r4, #36]	; 0x24
   30ea8:	2800      	cmp	r0, #0
   30eaa:	f000 815a 	beq.w	31162 <ticker_job+0x87e>
				ticker->ticks_to_expire = ticks_to_expire;
   30eae:	60a2      	str	r2, [r4, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
   30eb0:	f8a4 c01e 	strh.w	ip, [r4, #30]
   30eb4:	e7af      	b.n	30e16 <ticker_job+0x532>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   30eb6:	9f07      	ldr	r7, [sp, #28]
   30eb8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   30eba:	8aaa      	ldrh	r2, [r5, #20]
   30ebc:	e627      	b.n	30b0e <ticker_job+0x22a>
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   30ebe:	2800      	cmp	r0, #0
   30ec0:	f47f aeca 	bne.w	30c58 <ticker_job+0x374>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   30ec4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   30ec6:	b11b      	cbz	r3, 30ed0 <ticker_job+0x5ec>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   30ec8:	7a1b      	ldrb	r3, [r3, #8]
   30eca:	2b01      	cmp	r3, #1
   30ecc:	f43f aec4 	beq.w	30c58 <ticker_job+0x374>
			instance->ticker_id_slot_previous = id_expired;
   30ed0:	f88a b01b 	strb.w	fp, [sl, #27]
			instance->ticks_slot_previous = ticker->ticks_slot;
   30ed4:	69a3      	ldr	r3, [r4, #24]
   30ed6:	f8ca 301c 	str.w	r3, [sl, #28]
   30eda:	e6bd      	b.n	30c58 <ticker_job+0x374>
					ticker->req = ticker->ack;
   30edc:	78a3      	ldrb	r3, [r4, #2]
   30ede:	7063      	strb	r3, [r4, #1]
				while (count--) {
   30ee0:	f04f 0e00 	mov.w	lr, #0
   30ee4:	e7bc      	b.n	30e60 <ticker_job+0x57c>
		if (instance->ticks_slot_previous > ticks_elapsed) {
   30ee6:	f8da 601c 	ldr.w	r6, [sl, #28]
   30eea:	9b04      	ldr	r3, [sp, #16]
		ticker_id_iter = nodes[ticker_id_head].next;
   30eec:	f81b 2001 	ldrb.w	r2, [fp, r1]
		if (instance->ticks_slot_previous > ticks_elapsed) {
   30ef0:	42b3      	cmp	r3, r6
			window_start_ticks = instance->ticks_slot_previous -
   30ef2:	bf38      	it	cc
   30ef4:	1af6      	subcc	r6, r6, r3
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   30ef6:	e9d7 3900 	ldrd	r3, r9, [r7]
		window_start_ticks = 0U;
   30efa:	bf28      	it	cs
   30efc:	2600      	movcs	r6, #0
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   30efe:	4599      	cmp	r9, r3
   30f00:	d278      	bcs.n	30ff4 <ticker_job+0x710>
		while (ticker_id_iter != TICKER_NULL &&
   30f02:	2aff      	cmp	r2, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
   30f04:	eba3 0e09 	sub.w	lr, r3, r9
		while (ticker_id_iter != TICKER_NULL &&
   30f08:	d074      	beq.n	30ff4 <ticker_job+0x710>
		       ticks_start_offset + ticker->ticks_slot <=
   30f0a:	f8d0 c018 	ldr.w	ip, [r0, #24]
		while (ticker_id_iter != TICKER_NULL &&
   30f0e:	45f4      	cmp	ip, lr
   30f10:	d870      	bhi.n	30ff4 <ticker_job+0x710>
   30f12:	2300      	movs	r3, #0
   30f14:	e9cd 0701 	strd	r0, r7, [sp, #4]
		       ticks_start_offset + ticker->ticks_slot <=
   30f18:	46e0      	mov	r8, ip
		while (ticker_id_iter != TICKER_NULL &&
   30f1a:	461d      	mov	r5, r3
   30f1c:	e01b      	b.n	30f56 <ticker_job+0x672>
			if (node->ticks_to_expire >
   30f1e:	68b8      	ldr	r0, [r7, #8]
					MIN(ticks_slot_window,
   30f20:	1f03      	subs	r3, r0, #4
			if (node->ticks_to_expire >
   30f22:	2804      	cmp	r0, #4
					MIN(ticks_slot_window,
   30f24:	442b      	add	r3, r5
			if (node->ticks_to_expire >
   30f26:	d909      	bls.n	30f3c <ticker_job+0x658>
				window_end_ticks =
   30f28:	4573      	cmp	r3, lr
   30f2a:	bf28      	it	cs
   30f2c:	4673      	movcs	r3, lr
			if (window_end_ticks > ticks_start_offset +
   30f2e:	4543      	cmp	r3, r8
   30f30:	d904      	bls.n	30f3c <ticker_job+0x658>
			if (ticks_to_expire != 0U &&
   30f32:	ebb3 030c 	subs.w	r3, r3, ip
   30f36:	d001      	beq.n	30f3c <ticker_job+0x658>
   30f38:	42b3      	cmp	r3, r6
   30f3a:	d21d      	bcs.n	30f78 <ticker_job+0x694>
			ticker_id_iter = node->next;
   30f3c:	f81b 2002 	ldrb.w	r2, [fp, r2]
			window_start_ticks  = node->ticks_to_expire +
   30f40:	69be      	ldr	r6, [r7, #24]
			ticks_start_offset += node->ticks_to_expire;
   30f42:	4405      	add	r5, r0
		while (ticker_id_iter != TICKER_NULL &&
   30f44:	2aff      	cmp	r2, #255	; 0xff
			window_start_ticks  = node->ticks_to_expire +
   30f46:	4406      	add	r6, r0
			ticks_to_expire     = ticks_slot_window -
   30f48:	ebae 030c 	sub.w	r3, lr, ip
		       ticks_start_offset + ticker->ticks_slot <=
   30f4c:	eb0c 0805 	add.w	r8, ip, r5
		while (ticker_id_iter != TICKER_NULL &&
   30f50:	d012      	beq.n	30f78 <ticker_job+0x694>
   30f52:	45c6      	cmp	lr, r8
   30f54:	d310      	bcc.n	30f78 <ticker_job+0x694>
			node = &nodes[ticker_id_iter];
   30f56:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   30f5a:	eb0b 1702 	add.w	r7, fp, r2, lsl #4
   30f5e:	0112      	lsls	r2, r2, #4
			if (node->ext_data &&
   30f60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   30f62:	2800      	cmp	r0, #0
   30f64:	d0db      	beq.n	30f1e <ticker_job+0x63a>
   30f66:	7a00      	ldrb	r0, [r0, #8]
   30f68:	2801      	cmp	r0, #1
   30f6a:	d1d8      	bne.n	30f1e <ticker_job+0x63a>
				ticker_id_iter = node->next;
   30f6c:	f81b 2002 	ldrb.w	r2, [fp, r2]
		while (ticker_id_iter != TICKER_NULL &&
   30f70:	2aff      	cmp	r2, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
   30f72:	eb0c 0805 	add.w	r8, ip, r5
		while (ticker_id_iter != TICKER_NULL &&
   30f76:	d1ec      	bne.n	30f52 <ticker_job+0x66e>
		ticker->ext_data->ticks_drift += ticks_to_expire -
   30f78:	e9dd 0701 	ldrd	r0, r7, [sp, #4]
   30f7c:	6882      	ldr	r2, [r0, #8]
   30f7e:	eba9 0202 	sub.w	r2, r9, r2
   30f82:	441a      	add	r2, r3
   30f84:	607a      	str	r2, [r7, #4]
		ticker->ticks_to_expire = ticks_to_expire;
   30f86:	6083      	str	r3, [r0, #8]
		ticker_id_iter = nodes[ticker_id_head].next;
   30f88:	f81b 5001 	ldrb.w	r5, [fp, r1]
		while (ticker_id_iter != TICKER_NULL) {
   30f8c:	2dff      	cmp	r5, #255	; 0xff
   30f8e:	d037      	beq.n	31000 <ticker_job+0x71c>
		ticker_id_prev = TICKER_NULL;
   30f90:	26ff      	movs	r6, #255	; 0xff
   30f92:	46b6      	mov	lr, r6
   30f94:	e000      	b.n	30f98 <ticker_job+0x6b4>
			ticker_id_iter = node->next;
   30f96:	4615      	mov	r5, r2
			node = &nodes[ticker_id_iter];
   30f98:	b22a      	sxth	r2, r5
   30f9a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   30f9e:	eb0b 1c02 	add.w	ip, fp, r2, lsl #4
   30fa2:	0112      	lsls	r2, r2, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
   30fa4:	f8dc 6008 	ldr.w	r6, [ip, #8]
   30fa8:	429e      	cmp	r6, r3
   30faa:	f080 8147 	bcs.w	3123c <ticker_job+0x958>
				ticker->ticks_to_expire -=
   30fae:	1b9b      	subs	r3, r3, r6
   30fb0:	6083      	str	r3, [r0, #8]
			ticker_id_iter = node->next;
   30fb2:	f81b 2002 	ldrb.w	r2, [fp, r2]
		while (ticker_id_iter != TICKER_NULL) {
   30fb6:	2aff      	cmp	r2, #255	; 0xff
   30fb8:	46ae      	mov	lr, r5
   30fba:	d1ec      	bne.n	30f96 <ticker_job+0x6b2>
		if (ticker_id_prev != TICKER_NULL) {
   30fbc:	2dff      	cmp	r5, #255	; 0xff
   30fbe:	d01f      	beq.n	31000 <ticker_job+0x71c>
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   30fc0:	b22d      	sxth	r5, r5
   30fc2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
			instance->ticker_id_head = nodes[ticker_id_head].next;
   30fc6:	f81b 2001 	ldrb.w	r2, [fp, r1]
   30fca:	f88a 2018 	strb.w	r2, [sl, #24]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   30fce:	012b      	lsls	r3, r5, #4
   30fd0:	f81b 2003 	ldrb.w	r2, [fp, r3]
   30fd4:	f80b 2001 	strb.w	r2, [fp, r1]
			nodes[ticker_id_prev].next = ticker_id_head;
   30fd8:	f80b 4003 	strb.w	r4, [fp, r3]
   30fdc:	e010      	b.n	31000 <ticker_job+0x71c>
   30fde:	bf00      	nop
   30fe0:	00049770 	.word	0x00049770
   30fe4:	0004981c 	.word	0x0004981c
   30fe8:	000497b0 	.word	0x000497b0
   30fec:	ff172b5a 	.word	0xff172b5a
   30ff0:	7f172b59 	.word	0x7f172b59
		ticker->ext_data->ticks_drift += ticks_to_expire -
   30ff4:	6883      	ldr	r3, [r0, #8]
   30ff6:	eba9 0303 	sub.w	r3, r9, r3
   30ffa:	607b      	str	r3, [r7, #4]
		ticker->ticks_to_expire = ticks_to_expire;
   30ffc:	2300      	movs	r3, #0
   30ffe:	6083      	str	r3, [r0, #8]
		ticker->lazy_current--;
   31000:	8bc3      	ldrh	r3, [r0, #30]
   31002:	3b01      	subs	r3, #1
   31004:	83c3      	strh	r3, [r0, #30]
		ext_data->reschedule_state =
   31006:	f04f 0302 	mov.w	r3, #2
   3100a:	723b      	strb	r3, [r7, #8]
		ticker_id_head = instance->ticker_id_head;
   3100c:	f89a 3018 	ldrb.w	r3, [sl, #24]
		while (ticker_id_head != TICKER_NULL) {
   31010:	2bff      	cmp	r3, #255	; 0xff
		rescheduled  = 1U;
   31012:	f04f 0501 	mov.w	r5, #1
		ticker_id_head = instance->ticker_id_head;
   31016:	461a      	mov	r2, r3
		while (ticker_id_head != TICKER_NULL) {
   31018:	f47f ae56 	bne.w	30cc8 <ticker_job+0x3e4>
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
   3101c:	9e03      	ldr	r6, [sp, #12]
   3101e:	b1a5      	cbz	r5, 3104a <ticker_job+0x766>
	if (instance->ticker_id_head != ticker_id_old_head) {
   31020:	9a09      	ldr	r2, [sp, #36]	; 0x24
   31022:	2aff      	cmp	r2, #255	; 0xff
   31024:	f000 80e1 	beq.w	311ea <ticker_job+0x906>
	if (!pending) {
   31028:	b33e      	cbz	r6, 3107a <ticker_job+0x796>
		if (cntr_stop() == 0) {
   3102a:	f00a fa81 	bl	3b530 <cntr_stop>
   3102e:	b9b8      	cbnz	r0, 31060 <ticker_job+0x77c>
			instance->ticks_slot_previous = 0U;
   31030:	f8ca 001c 	str.w	r0, [sl, #28]
			instance->ticks_current = cntr_cnt_get();
   31034:	f00a faa2 	bl	3b57c <cntr_cnt_get>
   31038:	f8ca 0014 	str.w	r0, [sl, #20]
   3103c:	e010      	b.n	31060 <ticker_job+0x77c>
		ticker_job_list_insert(instance, insert_head);
   3103e:	9905      	ldr	r1, [sp, #20]
   31040:	4650      	mov	r0, sl
   31042:	f7ff fa39 	bl	304b8 <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
   31046:	f89a 3018 	ldrb.w	r3, [sl, #24]
   3104a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3104c:	429a      	cmp	r2, r3
   3104e:	f47f ae54 	bne.w	30cfa <ticker_job+0x416>
	if (!pending) {
   31052:	2e00      	cmp	r6, #0
   31054:	f000 80d8 	beq.w	31208 <ticker_job+0x924>
	if (flag_compare_update) {
   31058:	9b07      	ldr	r3, [sp, #28]
   3105a:	2b00      	cmp	r3, #0
   3105c:	f040 80eb 	bne.w	31236 <ticker_job+0x952>
	if (instance->worker_trigger) {
   31060:	f89a 301a 	ldrb.w	r3, [sl, #26]
	instance->job_guard = 0U;
   31064:	2200      	movs	r2, #0
   31066:	f88a 2019 	strb.w	r2, [sl, #25]
	if (instance->worker_trigger) {
   3106a:	2b00      	cmp	r3, #0
   3106c:	d075      	beq.n	3115a <ticker_job+0x876>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   3106e:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
   31072:	4653      	mov	r3, sl
   31074:	2201      	movs	r2, #1
   31076:	2103      	movs	r1, #3
   31078:	e4c5      	b.n	30a06 <ticker_job+0x122>
	count_user = instance->count_user;
   3107a:	f89a 2009 	ldrb.w	r2, [sl, #9]
	users = &instance->users[0];
   3107e:	f8da 4004 	ldr.w	r4, [sl, #4]
	while (count_user--) {
   31082:	1e51      	subs	r1, r2, #1
   31084:	b2c9      	uxtb	r1, r1
   31086:	2a00      	cmp	r2, #0
   31088:	f43f ae3a 	beq.w	30d00 <ticker_job+0x41c>
		flag_compare_update = 1U;
   3108c:	2301      	movs	r3, #1
   3108e:	9307      	str	r3, [sp, #28]
   31090:	eb04 05c1 	add.w	r5, r4, r1, lsl #3
		uop->status = TICKER_STATUS_SUCCESS;
   31094:	2600      	movs	r6, #0
		while (user->first != user->last) {
   31096:	786b      	ldrb	r3, [r5, #1]
   31098:	78e9      	ldrb	r1, [r5, #3]
		user_op = &user->user_op[0];
   3109a:	686f      	ldr	r7, [r5, #4]
		while (user->first != user->last) {
   3109c:	4299      	cmp	r1, r3
   3109e:	d050      	beq.n	31142 <ticker_job+0x85e>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   310a0:	b21b      	sxth	r3, r3
   310a2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   310a6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   310aa:	eb07 0e83 	add.w	lr, r7, r3, lsl #2
	switch (uop->op) {
   310ae:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   310b2:	2b01      	cmp	r3, #1
   310b4:	d031      	beq.n	3111a <ticker_job+0x836>
   310b6:	2b02      	cmp	r3, #2
   310b8:	d139      	bne.n	3112e <ticker_job+0x84a>
		ticker_by_next_slot_get(instance,
   310ba:	f8de 9004 	ldr.w	r9, [lr, #4]
	node = instance->nodes;
   310be:	f8da c000 	ldr.w	ip, [sl]
	_ticker_id_head = *ticker_id_head;
   310c2:	f899 2000 	ldrb.w	r2, [r9]
	    (*ticks_current != instance->ticks_current)) {
   310c6:	f8da 3014 	ldr.w	r3, [sl, #20]
		ticker_by_next_slot_get(instance,
   310ca:	e9de 0802 	ldrd	r0, r8, [lr, #8]
	if ((_ticker_id_head == TICKER_NULL) ||
   310ce:	2aff      	cmp	r2, #255	; 0xff
	_ticks_to_expire = *ticks_to_expire;
   310d0:	f8d8 1000 	ldr.w	r1, [r8]
	if ((_ticker_id_head == TICKER_NULL) ||
   310d4:	d003      	beq.n	310de <ticker_job+0x7fa>
   310d6:	f8d0 b000 	ldr.w	fp, [r0]
   310da:	459b      	cmp	fp, r3
   310dc:	d037      	beq.n	3114e <ticker_job+0x86a>
		_ticker_id_head = instance->ticker_id_head;
   310de:	f89a 2018 	ldrb.w	r2, [sl, #24]
		*ticks_current = instance->ticks_current;
   310e2:	6003      	str	r3, [r0, #0]
		_ticks_to_expire = 0U;
   310e4:	2100      	movs	r1, #0
	while (_ticker_id_head != TICKER_NULL) {
   310e6:	2aff      	cmp	r2, #255	; 0xff
   310e8:	d107      	bne.n	310fa <ticker_job+0x816>
   310ea:	e012      	b.n	31112 <ticker_job+0x82e>
		_ticker_id_head = ticker->next;
   310ec:	f81c 2003 	ldrb.w	r2, [ip, r3]
		_ticks_to_expire += ticker->ticks_to_expire;
   310f0:	f8db 0008 	ldr.w	r0, [fp, #8]
	while (_ticker_id_head != TICKER_NULL) {
   310f4:	2aff      	cmp	r2, #255	; 0xff
		_ticks_to_expire += ticker->ticks_to_expire;
   310f6:	4401      	add	r1, r0
	while (_ticker_id_head != TICKER_NULL) {
   310f8:	d00b      	beq.n	31112 <ticker_job+0x82e>
		ticker = &node[_ticker_id_head];
   310fa:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   310fe:	eb0c 1b03 	add.w	fp, ip, r3, lsl #4
   31102:	011b      	lsls	r3, r3, #4
			if (ticker->ticks_slot) {
   31104:	f8db 0018 	ldr.w	r0, [fp, #24]
   31108:	2800      	cmp	r0, #0
   3110a:	d0ef      	beq.n	310ec <ticker_job+0x808>
		_ticks_to_expire += ticker->ticks_to_expire;
   3110c:	f8db 3008 	ldr.w	r3, [fp, #8]
   31110:	4419      	add	r1, r3
	*ticker_id_head = _ticker_id_head;
   31112:	f889 2000 	strb.w	r2, [r9]
	*ticks_to_expire = _ticks_to_expire;
   31116:	f8c8 1000 	str.w	r1, [r8]
		fp_op_func = uop->fp_op_func;
   3111a:	f8de 302c 	ldr.w	r3, [lr, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
   3111e:	f8ce 6028 	str.w	r6, [lr, #40]	; 0x28
	if (fp_op_func) {
   31122:	b11b      	cbz	r3, 3112c <ticker_job+0x848>
		fp_op_func(uop->status, uop->op_context);
   31124:	f8de 1030 	ldr.w	r1, [lr, #48]	; 0x30
   31128:	2000      	movs	r0, #0
   3112a:	4798      	blx	r3
   3112c:	78e9      	ldrb	r1, [r5, #3]
			first = user->first + 1;
   3112e:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
   31130:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
   31132:	3301      	adds	r3, #1
   31134:	b2db      	uxtb	r3, r3
				first = 0U;
   31136:	429a      	cmp	r2, r3
   31138:	bf08      	it	eq
   3113a:	2300      	moveq	r3, #0
		while (user->first != user->last) {
   3113c:	4299      	cmp	r1, r3
			user->first = first;
   3113e:	706b      	strb	r3, [r5, #1]
		while (user->first != user->last) {
   31140:	d1ae      	bne.n	310a0 <ticker_job+0x7bc>
	while (count_user--) {
   31142:	42a5      	cmp	r5, r4
   31144:	f1a5 0308 	sub.w	r3, r5, #8
   31148:	d086      	beq.n	31058 <ticker_job+0x774>
   3114a:	461d      	mov	r5, r3
   3114c:	e7a3      	b.n	31096 <ticker_job+0x7b2>
		ticker = &node[_ticker_id_head];
   3114e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   31152:	0113      	lsls	r3, r2, #4
		_ticker_id_head = ticker->next;
   31154:	f81c 2003 	ldrb.w	r2, [ip, r3]
   31158:	e7c5      	b.n	310e6 <ticker_job+0x802>
}
   3115a:	b00f      	add	sp, #60	; 0x3c
   3115c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31160:	4770      	bx	lr
					while (ticks_to_expire <
   31162:	4297      	cmp	r7, r2
   31164:	f67f aea3 	bls.w	30eae <ticker_job+0x5ca>
				lazy = 0U;
   31168:	4686      	mov	lr, r0
   3116a:	1c48      	adds	r0, r1, #1
   3116c:	9002      	str	r0, [sp, #8]
   3116e:	9c02      	ldr	r4, [sp, #8]
   31170:	950b      	str	r5, [sp, #44]	; 0x2c
   31172:	4670      	mov	r0, lr
   31174:	e005      	b.n	31182 <ticker_job+0x89e>
	if ((ticker->remainder_current < BIT(31)) &&
   31176:	468e      	mov	lr, r1
						ticks_to_expire +=
   31178:	4472      	add	r2, lr
						lazy++;
   3117a:	3001      	adds	r0, #1
					while (ticks_to_expire <
   3117c:	4297      	cmp	r7, r2
						lazy++;
   3117e:	b280      	uxth	r0, r0
					while (ticks_to_expire <
   31180:	d912      	bls.n	311a8 <ticker_job+0x8c4>
	if ((ticker->remainder_current < BIT(31)) &&
   31182:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 3124c <ticker_job+0x968>
   31186:	4d32      	ldr	r5, [pc, #200]	; (31250 <ticker_job+0x96c>)
	ticker->remainder_current += ticker->remainder_periodic;
   31188:	4433      	add	r3, r6
	if ((ticker->remainder_current < BIT(31)) &&
   3118a:	449e      	add	lr, r3
   3118c:	45ae      	cmp	lr, r5
   3118e:	d8f2      	bhi.n	31176 <ticker_job+0x892>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   31190:	46a6      	mov	lr, r4
   31192:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
						ticks_to_expire +=
   31196:	4472      	add	r2, lr
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   31198:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
						lazy++;
   3119c:	3001      	adds	r0, #1
					while (ticks_to_expire <
   3119e:	4297      	cmp	r7, r2
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   311a0:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
						lazy++;
   311a4:	b280      	uxth	r0, r0
					while (ticks_to_expire <
   311a6:	d8ec      	bhi.n	31182 <ticker_job+0x89e>
				ticker->lazy_current += (lazy_periodic + lazy);
   311a8:	9c03      	ldr	r4, [sp, #12]
   311aa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   311ac:	6263      	str	r3, [r4, #36]	; 0x24
   311ae:	4460      	add	r0, ip
   311b0:	fa1f fc80 	uxth.w	ip, r0
   311b4:	e67b      	b.n	30eae <ticker_job+0x5ca>
		flag_elapsed = 0U;
   311b6:	4614      	mov	r4, r2
		ticks_elapsed = 0U;
   311b8:	9204      	str	r2, [sp, #16]
   311ba:	f7ff bbbc 	b.w	30936 <ticker_job+0x52>
			ticker->ticks_to_expire -= ticks_elapsed;
   311be:	4622      	mov	r2, r4
   311c0:	1b5b      	subs	r3, r3, r5
   311c2:	6093      	str	r3, [r2, #8]
   311c4:	9c06      	ldr	r4, [sp, #24]
   311c6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
		if (instance->ticker_id_head != ticker_id_old_head) {
   311c8:	f89a b018 	ldrb.w	fp, [sl, #24]
			break;
   311cc:	e567      	b.n	30c9e <ticker_job+0x3ba>
	if (!pending) {
   311ce:	2e00      	cmp	r6, #0
   311d0:	f47f ad9e 	bne.w	30d10 <ticker_job+0x42c>
	count_user = instance->count_user;
   311d4:	f89a 3009 	ldrb.w	r3, [sl, #9]
	users = &instance->users[0];
   311d8:	f8da 4004 	ldr.w	r4, [sl, #4]
	while (count_user--) {
   311dc:	1e59      	subs	r1, r3, #1
   311de:	b2c9      	uxtb	r1, r1
   311e0:	2b00      	cmp	r3, #0
   311e2:	f43f ad95 	beq.w	30d10 <ticker_job+0x42c>
			flag_compare_update = 1U;
   311e6:	9507      	str	r5, [sp, #28]
   311e8:	e752      	b.n	31090 <ticker_job+0x7ac>
	if (!pending) {
   311ea:	2e00      	cmp	r6, #0
   311ec:	f47f af1d 	bne.w	3102a <ticker_job+0x746>
	count_user = instance->count_user;
   311f0:	f89a 3009 	ldrb.w	r3, [sl, #9]
	users = &instance->users[0];
   311f4:	f8da 4004 	ldr.w	r4, [sl, #4]
	while (count_user--) {
   311f8:	1e59      	subs	r1, r3, #1
   311fa:	b2c9      	uxtb	r1, r1
   311fc:	2b00      	cmp	r3, #0
   311fe:	d1f2      	bne.n	311e6 <ticker_job+0x902>
   31200:	e713      	b.n	3102a <ticker_job+0x746>
	insert_head = TICKER_NULL;
   31202:	23ff      	movs	r3, #255	; 0xff
   31204:	9305      	str	r3, [sp, #20]
   31206:	e4e3      	b.n	30bd0 <ticker_job+0x2ec>
	count_user = instance->count_user;
   31208:	f89a 3009 	ldrb.w	r3, [sl, #9]
	users = &instance->users[0];
   3120c:	f8da 4004 	ldr.w	r4, [sl, #4]
	while (count_user--) {
   31210:	1e59      	subs	r1, r3, #1
   31212:	b2c9      	uxtb	r1, r1
   31214:	2b00      	cmp	r3, #0
   31216:	f47f af3b 	bne.w	31090 <ticker_job+0x7ac>
   3121a:	e71d      	b.n	31058 <ticker_job+0x774>
		ticks_current = cntr_cnt_get();
   3121c:	f00a f9ae 	bl	3b57c <cntr_cnt_get>
   31220:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   31222:	f00a f975 	bl	3b510 <cntr_start>
	ticker = &instance->nodes[instance->ticker_id_head];
   31226:	f89a 2018 	ldrb.w	r2, [sl, #24]
		if (cntr_start() == 0) {
   3122a:	2800      	cmp	r0, #0
   3122c:	f47f ad70 	bne.w	30d10 <ticker_job+0x42c>
			instance->ticks_current = ticks_current;
   31230:	f8ca 4014 	str.w	r4, [sl, #20]
   31234:	e56c      	b.n	30d10 <ticker_job+0x42c>
	if (instance->ticker_id_head == TICKER_NULL) {
   31236:	f89a 2018 	ldrb.w	r2, [sl, #24]
   3123a:	e562      	b.n	30d02 <ticker_job+0x41e>
				node->ticks_to_expire -=
   3123c:	4672      	mov	r2, lr
   3123e:	1af3      	subs	r3, r6, r3
   31240:	46b6      	mov	lr, r6
   31242:	f8cc 3008 	str.w	r3, [ip, #8]
				break;
   31246:	4615      	mov	r5, r2
   31248:	e6b8      	b.n	30fbc <ticker_job+0x6d8>
   3124a:	bf00      	nop
   3124c:	ff172b5a 	.word	0xff172b5a
   31250:	7f172b59 	.word	0x7f172b59

00031254 <ticker_init>:
{
   31254:	b4f0      	push	{r4, r5, r6, r7}
   31256:	9e04      	ldr	r6, [sp, #16]
   31258:	f89d 5014 	ldrb.w	r5, [sp, #20]
   3125c:	9c06      	ldr	r4, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
   3125e:	bb40      	cbnz	r0, 312b2 <ticker_init+0x5e>
	instance->count_node = count_node;
   31260:	4f15      	ldr	r7, [pc, #84]	; (312b8 <ticker_init+0x64>)
	instance->nodes = node;
   31262:	603a      	str	r2, [r7, #0]
	while (count_user--) {
   31264:	1e5a      	subs	r2, r3, #1
	instance->count_node = count_node;
   31266:	7239      	strb	r1, [r7, #8]
	instance->count_user = count_user;
   31268:	727b      	strb	r3, [r7, #9]
	instance->users = user;
   3126a:	607e      	str	r6, [r7, #4]
	while (count_user--) {
   3126c:	b2d2      	uxtb	r2, r2
   3126e:	b183      	cbz	r3, 31292 <ticker_init+0x3e>
   31270:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
		users[count_user].user_op = user_op_;
   31274:	6054      	str	r4, [r2, #4]
		user_op_ += users[count_user].count_user_op;
   31276:	4610      	mov	r0, r2
   31278:	f812 3908 	ldrb.w	r3, [r2], #-8
   3127c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   31280:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	while (count_user--) {
   31284:	4286      	cmp	r6, r0
		count_op -= users[count_user].count_user_op;
   31286:	eba5 0303 	sub.w	r3, r5, r3
		user_op_ += users[count_user].count_user_op;
   3128a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
		count_op -= users[count_user].count_user_op;
   3128e:	b2dd      	uxtb	r5, r3
	while (count_user--) {
   31290:	d1f0      	bne.n	31274 <ticker_init+0x20>
	if (count_op) {
   31292:	b975      	cbnz	r5, 312b2 <ticker_init+0x5e>
	instance->caller_id_get_cb = caller_id_get_cb;
   31294:	9a07      	ldr	r2, [sp, #28]
   31296:	623a      	str	r2, [r7, #32]
	instance->sched_cb = sched_cb;
   31298:	9a08      	ldr	r2, [sp, #32]
   3129a:	627a      	str	r2, [r7, #36]	; 0x24
	instance->ticker_id_head = TICKER_NULL;
   3129c:	23ff      	movs	r3, #255	; 0xff
	instance->trigger_set_cb = trigger_set_cb;
   3129e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   312a0:	62ba      	str	r2, [r7, #40]	; 0x28
	instance->ticker_id_head = TICKER_NULL;
   312a2:	763b      	strb	r3, [r7, #24]
	instance->ticks_current = 0U;
   312a4:	617d      	str	r5, [r7, #20]
	instance->ticks_elapsed_first = 0U;
   312a6:	817d      	strh	r5, [r7, #10]
	instance->ticker_id_slot_previous = TICKER_NULL;
   312a8:	76fb      	strb	r3, [r7, #27]
	instance->ticks_slot_previous = 0U;
   312aa:	61fd      	str	r5, [r7, #28]
	return TICKER_STATUS_SUCCESS;
   312ac:	4628      	mov	r0, r5
}
   312ae:	bcf0      	pop	{r4, r5, r6, r7}
   312b0:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
   312b2:	2001      	movs	r0, #1
}
   312b4:	bcf0      	pop	{r4, r5, r6, r7}
   312b6:	4770      	bx	lr
   312b8:	20001ffc 	.word	0x20001ffc

000312bc <ticker_is_initialized>:
	return !!(_instance[instance_index].count_node);
   312bc:	4b04      	ldr	r3, [pc, #16]	; (312d0 <ticker_is_initialized+0x14>)
   312be:	222c      	movs	r2, #44	; 0x2c
   312c0:	fb02 3300 	mla	r3, r2, r0, r3
   312c4:	7a18      	ldrb	r0, [r3, #8]
}
   312c6:	3800      	subs	r0, #0
   312c8:	bf18      	it	ne
   312ca:	2001      	movne	r0, #1
   312cc:	4770      	bx	lr
   312ce:	bf00      	nop
   312d0:	20001ffc 	.word	0x20001ffc

000312d4 <ticker_trigger>:
{
   312d4:	b410      	push	{r4}
	if (instance->sched_cb) {
   312d6:	4b0a      	ldr	r3, [pc, #40]	; (31300 <ticker_trigger+0x2c>)
   312d8:	222c      	movs	r2, #44	; 0x2c
   312da:	fb02 3200 	mla	r2, r2, r0, r3
   312de:	6a54      	ldr	r4, [r2, #36]	; 0x24
   312e0:	b15c      	cbz	r4, 312fa <ticker_trigger+0x26>
	instance = &_instance[instance_index];
   312e2:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   312e6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   312ea:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   312ee:	46a4      	mov	ip, r4
   312f0:	2201      	movs	r2, #1
}
   312f2:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   312f4:	2103      	movs	r1, #3
   312f6:	2002      	movs	r0, #2
   312f8:	4760      	bx	ip
}
   312fa:	bc10      	pop	{r4}
   312fc:	4770      	bx	lr
   312fe:	bf00      	nop
   31300:	20001ffc 	.word	0x20001ffc

00031304 <ticker_start_ext>:
{
   31304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   31308:	4e28      	ldr	r6, [pc, #160]	; (313ac <ticker_start_ext+0xa8>)
{
   3130a:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   3130e:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   31310:	252c      	movs	r5, #44	; 0x2c
   31312:	fb05 6504 	mla	r5, r5, r4, r6
{
   31316:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
   31318:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   3131c:	eb04 0441 	add.w	r4, r4, r1, lsl #1
	user = &instance->users[user_id];
   31320:	6869      	ldr	r1, [r5, #4]
   31322:	eb01 07c0 	add.w	r7, r1, r0, lsl #3
	struct ticker_instance *instance = &_instance[instance_index];
   31326:	eb06 0684 	add.w	r6, r6, r4, lsl #2
	last = user->last + 1;
   3132a:	78fc      	ldrb	r4, [r7, #3]
	if (last >= user->count_user_op) {
   3132c:	f811 e030 	ldrb.w	lr, [r1, r0, lsl #3]
	if (last == user->first) {
   31330:	7879      	ldrb	r1, [r7, #1]
	last = user->last + 1;
   31332:	f104 0c01 	add.w	ip, r4, #1
   31336:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   3133a:	45e6      	cmp	lr, ip
   3133c:	bf98      	it	ls
   3133e:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   31342:	4561      	cmp	r1, ip
   31344:	d02e      	beq.n	313a4 <ticker_start_ext+0xa0>
	user_op = &user->user_op[user->last];
   31346:	6879      	ldr	r1, [r7, #4]
   31348:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
   3134c:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
   31350:	eb01 048e 	add.w	r4, r1, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
   31354:	f04f 0904 	mov.w	r9, #4
   31358:	f801 902e 	strb.w	r9, [r1, lr, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
   3135c:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   3135e:	9b08      	ldr	r3, [sp, #32]
   31360:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   31362:	9b09      	ldr	r3, [sp, #36]	; 0x24
   31364:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   31366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   31368:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   3136a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   3136c:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
   3136e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   31370:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
   31372:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   31374:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
   31376:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   31378:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   3137a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   3137c:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   3137e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   31380:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   31382:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   31384:	7062      	strb	r2, [r4, #1]
	user_op->params.start.lazy = lazy;
   31386:	f8a4 8014 	strh.w	r8, [r4, #20]
	user_op->status = TICKER_STATUS_BUSY;
   3138a:	62a3      	str	r3, [r4, #40]	; 0x28
	user->last = last;
   3138c:	f887 c003 	strb.w	ip, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   31390:	e9d5 3508 	ldrd	r3, r5, [r5, #32]
   31394:	4798      	blx	r3
   31396:	4633      	mov	r3, r6
   31398:	4649      	mov	r1, r9
   3139a:	2200      	movs	r2, #0
   3139c:	47a8      	blx	r5
	return user_op->status;
   3139e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   313a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   313a4:	2001      	movs	r0, #1
}
   313a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   313aa:	bf00      	nop
   313ac:	20001ffc 	.word	0x20001ffc

000313b0 <ticker_start>:
{
   313b0:	b510      	push	{r4, lr}
   313b2:	b08a      	sub	sp, #40	; 0x28
   313b4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_start_ext(instance_index, user_id, ticker_id,
   313b6:	9400      	str	r4, [sp, #0]
{
   313b8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	return ticker_start_ext(instance_index, user_id, ticker_id,
   313ba:	9401      	str	r4, [sp, #4]
{
   313bc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
   313be:	9402      	str	r4, [sp, #8]
{
   313c0:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   313c4:	9403      	str	r4, [sp, #12]
{
   313c6:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
   313c8:	9404      	str	r4, [sp, #16]
{
   313ca:	9c11      	ldr	r4, [sp, #68]	; 0x44
	return ticker_start_ext(instance_index, user_id, ticker_id,
   313cc:	9405      	str	r4, [sp, #20]
{
   313ce:	9c12      	ldr	r4, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
   313d0:	9406      	str	r4, [sp, #24]
{
   313d2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   313d4:	9407      	str	r4, [sp, #28]
{
   313d6:	9c14      	ldr	r4, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
   313d8:	9408      	str	r4, [sp, #32]
   313da:	2400      	movs	r4, #0
   313dc:	9409      	str	r4, [sp, #36]	; 0x24
   313de:	f7ff ff91 	bl	31304 <ticker_start_ext>
}
   313e2:	b00a      	add	sp, #40	; 0x28
   313e4:	bd10      	pop	{r4, pc}
   313e6:	bf00      	nop

000313e8 <ticker_update_ext>:
{
   313e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   313ec:	4d29      	ldr	r5, [pc, #164]	; (31494 <ticker_update_ext+0xac>)
{
   313ee:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
   313f2:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
   313f6:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   313f8:	f04f 0e2c 	mov.w	lr, #44	; 0x2c
   313fc:	fb0e 5e04 	mla	lr, lr, r4, r5
{
   31400:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
   31402:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   31406:	eb04 0441 	add.w	r4, r4, r1, lsl #1
	user = &instance->users[user_id];
   3140a:	f8de 1004 	ldr.w	r1, [lr, #4]
   3140e:	eb01 06c0 	add.w	r6, r1, r0, lsl #3
	struct ticker_instance *instance = &_instance[instance_index];
   31412:	eb05 0584 	add.w	r5, r5, r4, lsl #2
	last = user->last + 1;
   31416:	78f4      	ldrb	r4, [r6, #3]
	if (last >= user->count_user_op) {
   31418:	f811 9030 	ldrb.w	r9, [r1, r0, lsl #3]
	if (last == user->first) {
   3141c:	7871      	ldrb	r1, [r6, #1]
	last = user->last + 1;
   3141e:	f104 0c01 	add.w	ip, r4, #1
   31422:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   31426:	45e1      	cmp	r9, ip
   31428:	bf98      	it	ls
   3142a:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   3142e:	4561      	cmp	r1, ip
{
   31430:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
	if (last == user->first) {
   31434:	d02a      	beq.n	3148c <ticker_update_ext+0xa4>
	user_op = &user->user_op[user->last];
   31436:	f8d6 a004 	ldr.w	sl, [r6, #4]
   3143a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   3143e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   31442:	eb0a 0481 	add.w	r4, sl, r1, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   31446:	f04f 0b05 	mov.w	fp, #5
   3144a:	f80a b021 	strb.w	fp, [sl, r1, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   3144e:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   31450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   31452:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   31454:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   31456:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   31458:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   3145a:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
   3145c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   3145e:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   31460:	9b10      	ldr	r3, [sp, #64]	; 0x40
   31462:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   31464:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   31466:	7062      	strb	r2, [r4, #1]
	user_op->params.update.lazy = lazy;
   31468:	82a7      	strh	r7, [r4, #20]
	user_op->params.update.force = force;
   3146a:	f884 8016 	strb.w	r8, [r4, #22]
	user_op->params.update.must_expire = must_expire;
   3146e:	f884 9017 	strb.w	r9, [r4, #23]
	user_op->status = TICKER_STATUS_BUSY;
   31472:	62a3      	str	r3, [r4, #40]	; 0x28
	user->last = last;
   31474:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   31478:	e9de 3608 	ldrd	r3, r6, [lr, #32]
   3147c:	4798      	blx	r3
   3147e:	462b      	mov	r3, r5
   31480:	2200      	movs	r2, #0
   31482:	2104      	movs	r1, #4
   31484:	47b0      	blx	r6
	return user_op->status;
   31486:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   31488:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return TICKER_STATUS_FAILURE;
   3148c:	2001      	movs	r0, #1
}
   3148e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31492:	bf00      	nop
   31494:	20001ffc 	.word	0x20001ffc

00031498 <ticker_update>:
{
   31498:	b510      	push	{r4, lr}
   3149a:	b088      	sub	sp, #32
   3149c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	return ticker_update_ext(instance_index, user_id, ticker_id,
   3149e:	9400      	str	r4, [sp, #0]
{
   314a0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	return ticker_update_ext(instance_index, user_id, ticker_id,
   314a2:	9401      	str	r4, [sp, #4]
{
   314a4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_update_ext(instance_index, user_id, ticker_id,
   314a6:	9402      	str	r4, [sp, #8]
{
   314a8:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
	return ticker_update_ext(instance_index, user_id, ticker_id,
   314ac:	9403      	str	r4, [sp, #12]
{
   314ae:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
	return ticker_update_ext(instance_index, user_id, ticker_id,
   314b2:	9404      	str	r4, [sp, #16]
{
   314b4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	return ticker_update_ext(instance_index, user_id, ticker_id,
   314b6:	9405      	str	r4, [sp, #20]
{
   314b8:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_update_ext(instance_index, user_id, ticker_id,
   314ba:	9406      	str	r4, [sp, #24]
   314bc:	2400      	movs	r4, #0
   314be:	9407      	str	r4, [sp, #28]
   314c0:	f7ff ff92 	bl	313e8 <ticker_update_ext>
}
   314c4:	b008      	add	sp, #32
   314c6:	bd10      	pop	{r4, pc}

000314c8 <ticker_stop>:
{
   314c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   314cc:	4607      	mov	r7, r0
	struct ticker_instance *instance = &_instance[instance_index];
   314ce:	4d1e      	ldr	r5, [pc, #120]	; (31548 <ticker_stop+0x80>)
   314d0:	eb07 0487 	add.w	r4, r7, r7, lsl #2
{
   314d4:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
   314d6:	eb07 0444 	add.w	r4, r7, r4, lsl #1
	user = &instance->users[user_id];
   314da:	212c      	movs	r1, #44	; 0x2c
	struct ticker_instance *instance = &_instance[instance_index];
   314dc:	eb05 0684 	add.w	r6, r5, r4, lsl #2
	user = &instance->users[user_id];
   314e0:	fb01 5407 	mla	r4, r1, r7, r5
   314e4:	6865      	ldr	r5, [r4, #4]
   314e6:	eb05 01c0 	add.w	r1, r5, r0, lsl #3
	if (last >= user->count_user_op) {
   314ea:	f815 7030 	ldrb.w	r7, [r5, r0, lsl #3]
	last = user->last + 1;
   314ee:	f891 e003 	ldrb.w	lr, [r1, #3]
	if (last == user->first) {
   314f2:	784d      	ldrb	r5, [r1, #1]
	last = user->last + 1;
   314f4:	f10e 0c01 	add.w	ip, lr, #1
   314f8:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   314fc:	4567      	cmp	r7, ip
   314fe:	bf98      	it	ls
   31500:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   31504:	4565      	cmp	r5, ip
   31506:	d01c      	beq.n	31542 <ticker_stop+0x7a>
	user_op = &user->user_op[user->last];
   31508:	684f      	ldr	r7, [r1, #4]
   3150a:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
   3150e:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
   31512:	eb07 058e 	add.w	r5, r7, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   31516:	f04f 0807 	mov.w	r8, #7
   3151a:	f807 802e 	strb.w	r8, [r7, lr, lsl #2]
	user_op->fp_op_func = fp_op_func;
   3151e:	62eb      	str	r3, [r5, #44]	; 0x2c
	user_op->op_context = op_context;
   31520:	9b06      	ldr	r3, [sp, #24]
   31522:	632b      	str	r3, [r5, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   31524:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   31526:	706a      	strb	r2, [r5, #1]
	user_op->status = TICKER_STATUS_BUSY;
   31528:	62ab      	str	r3, [r5, #40]	; 0x28
	user->last = last;
   3152a:	f881 c003 	strb.w	ip, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   3152e:	e9d4 3708 	ldrd	r3, r7, [r4, #32]
   31532:	4798      	blx	r3
   31534:	4633      	mov	r3, r6
   31536:	2200      	movs	r2, #0
   31538:	2104      	movs	r1, #4
   3153a:	47b8      	blx	r7
	return user_op->status;
   3153c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
}
   3153e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   31542:	2001      	movs	r0, #1
}
   31544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   31548:	20001ffc 	.word	0x20001ffc

0003154c <ticker_ticks_now_get>:
	return cntr_cnt_get();
   3154c:	f00a b816 	b.w	3b57c <cntr_cnt_get>

00031550 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   31550:	1a40      	subs	r0, r0, r1
}
   31552:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   31556:	4770      	bx	lr

00031558 <ll_addr_set>:

static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
   31558:	b538      	push	{r3, r4, r5, lr}
   3155a:	4605      	mov	r5, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
   3155c:	2000      	movs	r0, #0
{
   3155e:	460c      	mov	r4, r1
		if (ull_adv_is_enabled(0)) {
   31560:	f003 f818 	bl	34594 <ull_adv_is_enabled>
   31564:	b9a8      	cbnz	r0, 31592 <ll_addr_set+0x3a>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
   31566:	b93d      	cbnz	r5, 31578 <ll_addr_set+0x20>
		} else {
			(void)memset(rnd_addr, 0, BDADDR_SIZE);
		}
	} else {
		if (bdaddr) {
			(void)memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   31568:	480b      	ldr	r0, [pc, #44]	; (31598 <ll_addr_set+0x40>)
   3156a:	2206      	movs	r2, #6
   3156c:	4621      	mov	r1, r4
		if (bdaddr) {
   3156e:	b16c      	cbz	r4, 3158c <ll_addr_set+0x34>
			(void)memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   31570:	f012 fed2 	bl	44318 <memcpy>
		} else {
			(void)memset(pub_addr, 0, BDADDR_SIZE);
		}
	}

	return 0;
   31574:	2000      	movs	r0, #0
}
   31576:	bd38      	pop	{r3, r4, r5, pc}
		if (bdaddr) {
   31578:	b12c      	cbz	r4, 31586 <ll_addr_set+0x2e>
			(void)memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   3157a:	2206      	movs	r2, #6
   3157c:	4621      	mov	r1, r4
   3157e:	4807      	ldr	r0, [pc, #28]	; (3159c <ll_addr_set+0x44>)
   31580:	f012 feca 	bl	44318 <memcpy>
   31584:	e7f6      	b.n	31574 <ll_addr_set+0x1c>
			(void)memset(rnd_addr, 0, BDADDR_SIZE);
   31586:	4805      	ldr	r0, [pc, #20]	; (3159c <ll_addr_set+0x44>)
   31588:	2206      	movs	r2, #6
   3158a:	4621      	mov	r1, r4
   3158c:	f012 fecf 	bl	4432e <memset>
   31590:	e7f0      	b.n	31574 <ll_addr_set+0x1c>
			return BT_HCI_ERR_CMD_DISALLOWED;
   31592:	200c      	movs	r0, #12
}
   31594:	bd38      	pop	{r3, r4, r5, pc}
   31596:	bf00      	nop
   31598:	20002030 	.word	0x20002030
   3159c:	20002028 	.word	0x20002028

000315a0 <ll_addr_get>:

uint8_t *ll_addr_get(uint8_t addr_type)
{
	if (addr_type > BT_ADDR_LE_RANDOM) {
   315a0:	2801      	cmp	r0, #1
{
   315a2:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
   315a4:	d805      	bhi.n	315b2 <ll_addr_get+0x12>

	if (addr_type) {
		return rnd_addr;
	}

	return pub_addr;
   315a6:	4a04      	ldr	r2, [pc, #16]	; (315b8 <ll_addr_get+0x18>)
   315a8:	4804      	ldr	r0, [pc, #16]	; (315bc <ll_addr_get+0x1c>)
   315aa:	2b00      	cmp	r3, #0
   315ac:	bf08      	it	eq
   315ae:	4610      	moveq	r0, r2
   315b0:	4770      	bx	lr
		return NULL;
   315b2:	2000      	movs	r0, #0
}
   315b4:	4770      	bx	lr
   315b6:	bf00      	nop
   315b8:	20002030 	.word	0x20002030
   315bc:	20002028 	.word	0x20002028

000315c0 <ll_addr_read>:
	if (addr_type > BT_ADDR_LE_RANDOM) {
   315c0:	2801      	cmp	r0, #1

uint8_t *ll_addr_read(uint8_t addr_type, uint8_t *const bdaddr)
{
   315c2:	b510      	push	{r4, lr}
   315c4:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
   315c6:	d80b      	bhi.n	315e0 <ll_addr_read+0x20>
	if (addr_type) {
   315c8:	4608      	mov	r0, r1
		return rnd_addr;
   315ca:	4c07      	ldr	r4, [pc, #28]	; (315e8 <ll_addr_read+0x28>)
   315cc:	4907      	ldr	r1, [pc, #28]	; (315ec <ll_addr_read+0x2c>)
   315ce:	2b00      	cmp	r3, #0
   315d0:	bf18      	it	ne
   315d2:	460c      	movne	r4, r1
	uint8_t *addr;

	addr = ll_addr_get(addr_type);
	if (addr) {
		memcpy(bdaddr, addr, BDADDR_SIZE);
   315d4:	2206      	movs	r2, #6
   315d6:	4621      	mov	r1, r4
   315d8:	f012 fe9e 	bl	44318 <memcpy>
	}

	return addr;
}
   315dc:	4620      	mov	r0, r4
   315de:	bd10      	pop	{r4, pc}
		return NULL;
   315e0:	2400      	movs	r4, #0
}
   315e2:	4620      	mov	r0, r4
   315e4:	bd10      	pop	{r4, pc}
   315e6:	bf00      	nop
   315e8:	20002030 	.word	0x20002030
   315ec:	20002028 	.word	0x20002028

000315f0 <ll_tx_pwr_lvl_get>:
#include "ll.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
   315f0:	2802      	cmp	r0, #2
   315f2:	d001      	beq.n	315f8 <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
   315f4:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
   315f6:	4770      	bx	lr
{
   315f8:	b538      	push	{r3, r4, r5, lr}
   315fa:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
   315fc:	4608      	mov	r0, r1
   315fe:	461d      	mov	r5, r3
   31600:	f003 feee 	bl	353e0 <ll_connected_get>
			if (!conn) {
   31604:	b110      	cbz	r0, 3160c <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   31606:	2000      	movs	r0, #0
   31608:	7028      	strb	r0, [r5, #0]
}
   3160a:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3160c:	4620      	mov	r0, r4
}
   3160e:	bd38      	pop	{r3, r4, r5, pc}

00031610 <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
   31610:	2300      	movs	r3, #0
   31612:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   31614:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
   31616:	4770      	bx	lr

00031618 <hci_driver_init>:
	.close	= hci_driver_close,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
   31618:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   3161a:	4802      	ldr	r0, [pc, #8]	; (31624 <hci_driver_init+0xc>)
   3161c:	f7fa f926 	bl	2b86c <bt_hci_driver_register>

	return 0;
}
   31620:	2000      	movs	r0, #0
   31622:	bd08      	pop	{r3, pc}
   31624:	00049834 	.word	0x00049834

00031628 <hci_driver_send>:
{
   31628:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
   3162a:	8983      	ldrh	r3, [r0, #12]
{
   3162c:	b083      	sub	sp, #12
	if (!buf->len) {
   3162e:	b123      	cbz	r3, 3163a <hci_driver_send+0x12>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   31630:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   31632:	4604      	mov	r4, r0
   31634:	b1c3      	cbz	r3, 31668 <hci_driver_send+0x40>
   31636:	2b02      	cmp	r3, #2
   31638:	d004      	beq.n	31644 <hci_driver_send+0x1c>
   3163a:	f06f 0515 	mvn.w	r5, #21
}
   3163e:	4628      	mov	r0, r5
   31640:	b003      	add	sp, #12
   31642:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
   31644:	a901      	add	r1, sp, #4
   31646:	f000 fe4f 	bl	322e8 <hci_acl_handle>
	if (evt) {
   3164a:	9b01      	ldr	r3, [sp, #4]
	err = hci_acl_handle(buf, &evt);
   3164c:	4605      	mov	r5, r0
	if (evt) {
   3164e:	b113      	cbz	r3, 31656 <hci_driver_send+0x2e>
		bt_recv_prio(evt);
   31650:	4618      	mov	r0, r3
   31652:	f7fa f8ed 	bl	2b830 <bt_recv_prio>
	if (!err) {
   31656:	2d00      	cmp	r5, #0
   31658:	d1f1      	bne.n	3163e <hci_driver_send+0x16>
		net_buf_unref(buf);
   3165a:	4620      	mov	r0, r4
   3165c:	f00a fe58 	bl	3c310 <net_buf_unref>
   31660:	2500      	movs	r5, #0
}
   31662:	4628      	mov	r0, r5
   31664:	b003      	add	sp, #12
   31666:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   31668:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
   3166a:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   3166c:	f000 fa60 	bl	31b30 <hci_cmd_handle>
	if (evt) {
   31670:	2800      	cmp	r0, #0
   31672:	d0f2      	beq.n	3165a <hci_driver_send+0x32>
		bt_recv_prio(evt);
   31674:	f7fa f8dc 	bl	2b830 <bt_recv_prio>
		if (node_rx) {
   31678:	9d01      	ldr	r5, [sp, #4]
   3167a:	2d00      	cmp	r5, #0
   3167c:	d0ed      	beq.n	3165a <hci_driver_send+0x32>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   3167e:	4628      	mov	r0, r5
   31680:	f001 f96c 	bl	3295c <hci_get_class>
   31684:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
   31686:	9901      	ldr	r1, [sp, #4]
   31688:	4801      	ldr	r0, [pc, #4]	; (31690 <hci_driver_send+0x68>)
   3168a:	f016 fcea 	bl	48062 <k_queue_append>
	if (!err) {
   3168e:	e7e4      	b.n	3165a <hci_driver_send+0x32>
   31690:	20002038 	.word	0x20002038

00031694 <hci_driver_close>:
{
   31694:	b508      	push	{r3, lr}
	ll_deinit();
   31696:	f002 fb23 	bl	33ce0 <ll_deinit>
	z_impl_k_thread_abort(thread);
   3169a:	4804      	ldr	r0, [pc, #16]	; (316ac <hci_driver_close+0x18>)
   3169c:	f7f9 f864 	bl	2a768 <z_impl_k_thread_abort>
   316a0:	4803      	ldr	r0, [pc, #12]	; (316b0 <hci_driver_close+0x1c>)
   316a2:	f7f9 f861 	bl	2a768 <z_impl_k_thread_abort>
}
   316a6:	2000      	movs	r0, #0
   316a8:	bd08      	pop	{r3, pc}
   316aa:	bf00      	nop
   316ac:	20001590 	.word	0x20001590
   316b0:	20001510 	.word	0x20001510

000316b4 <recv_thread>:
{
   316b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_queue_get(queue, timeout);
   316b8:	4e42      	ldr	r6, [pc, #264]	; (317c4 <recv_thread+0x110>)
		LL_ASSERT(0);
   316ba:	f8df 810c 	ldr.w	r8, [pc, #268]	; 317c8 <recv_thread+0x114>
   316be:	4f43      	ldr	r7, [pc, #268]	; (317cc <recv_thread+0x118>)
{
   316c0:	b082      	sub	sp, #8
   316c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   316c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   316ca:	4630      	mov	r0, r6
   316cc:	f00f fa18 	bl	40b00 <z_impl_k_queue_get>
		if (node_rx && !buf) {
   316d0:	2800      	cmp	r0, #0
   316d2:	d0f6      	beq.n	316c2 <recv_thread+0xe>
	uint8_t class = node_rx->hdr.user_meta;
   316d4:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   316d6:	9001      	str	r0, [sp, #4]
	switch (class) {
   316d8:	2b04      	cmp	r3, #4
   316da:	d821      	bhi.n	31720 <recv_thread+0x6c>
   316dc:	2b00      	cmp	r3, #0
   316de:	d14b      	bne.n	31778 <recv_thread+0xc4>
		LL_ASSERT(0);
   316e0:	483b      	ldr	r0, [pc, #236]	; (317d0 <recv_thread+0x11c>)
   316e2:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
   316e6:	4642      	mov	r2, r8
   316e8:	4639      	mov	r1, r7
   316ea:	f010 ff6d 	bl	425c8 <assert_print>
   316ee:	4040      	eors	r0, r0
   316f0:	f380 8811 	msr	BASEPRI, r0
   316f4:	f04f 0003 	mov.w	r0, #3
   316f8:	df02      	svc	2
	node_rx->hdr.next = NULL;
   316fa:	9b01      	ldr	r3, [sp, #4]
   316fc:	2200      	movs	r2, #0
   316fe:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   31700:	a801      	add	r0, sp, #4
   31702:	f001 fd5b 	bl	331bc <ll_rx_mem_release>
   31706:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3170a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3170e:	4630      	mov	r0, r6
   31710:	f00f f9f6 	bl	40b00 <z_impl_k_queue_get>
		if (node_rx && !buf) {
   31714:	2800      	cmp	r0, #0
   31716:	d0d4      	beq.n	316c2 <recv_thread+0xe>
	uint8_t class = node_rx->hdr.user_meta;
   31718:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   3171a:	9001      	str	r0, [sp, #4]
	switch (class) {
   3171c:	2b04      	cmp	r3, #4
   3171e:	d9dd      	bls.n	316dc <recv_thread+0x28>
   31720:	2b05      	cmp	r3, #5
   31722:	d1dd      	bne.n	316e0 <recv_thread+0x2c>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   31724:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   31728:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3172c:	2003      	movs	r0, #3
   3172e:	f7f9 fbb5 	bl	2ae9c <bt_buf_get_rx>
   31732:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
   31734:	4621      	mov	r1, r4
   31736:	9801      	ldr	r0, [sp, #4]
   31738:	f000 fe5c 	bl	323f4 <hci_acl_encode>
	node_rx->hdr.next = NULL;
   3173c:	9b01      	ldr	r3, [sp, #4]
   3173e:	2200      	movs	r2, #0
   31740:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   31742:	a801      	add	r0, sp, #4
   31744:	f001 fd3a 	bl	331bc <ll_rx_mem_release>
		while (buf) {
   31748:	2c00      	cmp	r4, #0
   3174a:	d0ba      	beq.n	316c2 <recv_thread+0xe>
			frag = net_buf_ref(buf);
   3174c:	4620      	mov	r0, r4
   3174e:	f015 fd0c 	bl	4716a <net_buf_ref>
			buf = net_buf_frag_del(NULL, buf);
   31752:	4621      	mov	r1, r4
			frag = net_buf_ref(buf);
   31754:	4605      	mov	r5, r0
			buf = net_buf_frag_del(NULL, buf);
   31756:	2000      	movs	r0, #0
   31758:	f015 fd2d 	bl	471b6 <net_buf_frag_del>
			if (frag->len) {
   3175c:	89ab      	ldrh	r3, [r5, #12]
			buf = net_buf_frag_del(NULL, buf);
   3175e:	4604      	mov	r4, r0
				bt_recv(frag);
   31760:	4628      	mov	r0, r5
			if (frag->len) {
   31762:	b133      	cbz	r3, 31772 <recv_thread+0xbe>
				bt_recv(frag);
   31764:	f7f9 ffea 	bl	2b73c <bt_recv>
	z_impl_k_yield();
   31768:	f00f fe88 	bl	4147c <z_impl_k_yield>
		while (buf) {
   3176c:	2c00      	cmp	r4, #0
   3176e:	d1ed      	bne.n	3174c <recv_thread+0x98>
   31770:	e7a7      	b.n	316c2 <recv_thread+0xe>
				net_buf_unref(frag);
   31772:	f00a fdcd 	bl	3c310 <net_buf_unref>
   31776:	e7f7      	b.n	31768 <recv_thread+0xb4>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   31778:	2b02      	cmp	r3, #2
   3177a:	d013      	beq.n	317a4 <recv_thread+0xf0>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   3177c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   31780:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   31784:	2001      	movs	r0, #1
   31786:	f7f9 fb89 	bl	2ae9c <bt_buf_get_rx>
   3178a:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
   3178c:	9801      	ldr	r0, [sp, #4]
		if (buf) {
   3178e:	b19c      	cbz	r4, 317b8 <recv_thread+0x104>
			hci_evt_encode(node_rx, buf);
   31790:	4621      	mov	r1, r4
   31792:	f000 fe69 	bl	32468 <hci_evt_encode>
	node_rx->hdr.next = NULL;
   31796:	9b01      	ldr	r3, [sp, #4]
   31798:	2200      	movs	r2, #0
   3179a:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   3179c:	a801      	add	r0, sp, #4
   3179e:	f001 fd0d 	bl	331bc <ll_rx_mem_release>
		while (buf) {
   317a2:	e7d3      	b.n	3174c <recv_thread+0x98>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
   317a4:	2200      	movs	r2, #0
   317a6:	2300      	movs	r3, #0
   317a8:	2101      	movs	r1, #1
   317aa:	2000      	movs	r0, #0
   317ac:	f7f9 fba0 	bl	2aef0 <bt_buf_get_evt>
   317b0:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
   317b2:	9801      	ldr	r0, [sp, #4]
		if (buf) {
   317b4:	2c00      	cmp	r4, #0
   317b6:	d1eb      	bne.n	31790 <recv_thread+0xdc>
	node_rx->hdr.next = NULL;
   317b8:	6004      	str	r4, [r0, #0]
	ll_rx_mem_release((void **)&node_rx);
   317ba:	a801      	add	r0, sp, #4
   317bc:	f001 fcfe 	bl	331bc <ll_rx_mem_release>
		while (buf) {
   317c0:	e77f      	b.n	316c2 <recv_thread+0xe>
   317c2:	bf00      	nop
   317c4:	20002038 	.word	0x20002038
   317c8:	000497d0 	.word	0x000497d0
   317cc:	00049810 	.word	0x00049810
   317d0:	000497b0 	.word	0x000497b0

000317d4 <prio_recv_thread>:
{
   317d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   317d8:	4f2e      	ldr	r7, [pc, #184]	; (31894 <prio_recv_thread+0xc0>)
				k_fifo_put(&recv_fifo, node_rx);
   317da:	4e2f      	ldr	r6, [pc, #188]	; (31898 <prio_recv_thread+0xc4>)
{
   317dc:	b082      	sub	sp, #8
   317de:	e00c      	b.n	317fa <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   317e0:	f7f9 fb86 	bl	2aef0 <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   317e4:	4622      	mov	r2, r4
   317e6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   317ea:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   317ec:	f001 f89e 	bl	3292c <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   317f0:	4620      	mov	r0, r4
   317f2:	f7fa f81d 	bl	2b830 <bt_recv_prio>
	z_impl_k_yield();
   317f6:	f00f fe41 	bl	4147c <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   317fa:	f10d 0102 	add.w	r1, sp, #2
   317fe:	a801      	add	r0, sp, #4
   31800:	f001 fb98 	bl	32f34 <ll_rx_get>
   31804:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   31806:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3180a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3180e:	2100      	movs	r1, #0
   31810:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   31812:	2c00      	cmp	r4, #0
   31814:	d1e4      	bne.n	317e0 <prio_recv_thread+0xc>
		if (node_rx) {
   31816:	9b01      	ldr	r3, [sp, #4]
   31818:	b1b3      	cbz	r3, 31848 <prio_recv_thread+0x74>
			ll_rx_dequeue();
   3181a:	f001 fc05 	bl	33028 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   3181e:	f8dd 8004 	ldr.w	r8, [sp, #4]
   31822:	4640      	mov	r0, r8
   31824:	f001 f89a 	bl	3295c <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
   31828:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   3182a:	f888 0005 	strb.w	r0, [r8, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
   3182e:	796b      	ldrb	r3, [r5, #5]
   31830:	2b03      	cmp	r3, #3
   31832:	d102      	bne.n	3183a <prio_recv_thread+0x66>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
   31834:	792b      	ldrb	r3, [r5, #4]
   31836:	2b18      	cmp	r3, #24
   31838:	d00e      	beq.n	31858 <prio_recv_thread+0x84>
				k_fifo_put(&recv_fifo, node_rx);
   3183a:	4629      	mov	r1, r5
   3183c:	4630      	mov	r0, r6
   3183e:	f016 fc10 	bl	48062 <k_queue_append>
		if (iso_received || node_rx) {
   31842:	9b01      	ldr	r3, [sp, #4]
   31844:	2b00      	cmp	r3, #0
   31846:	d1d8      	bne.n	317fa <prio_recv_thread+0x26>
	return z_impl_k_sem_take(sem, timeout);
   31848:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3184c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   31850:	4638      	mov	r0, r7
   31852:	f00f f9af 	bl	40bb4 <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   31856:	e7d0      	b.n	317fa <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   31858:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3185c:	4621      	mov	r1, r4
   3185e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   31862:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
   31864:	f8b5 8006 	ldrh.w	r8, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   31868:	f7f9 fb42 	bl	2aef0 <bt_buf_get_evt>
			hci_disconn_complete_encode(pdu_data, handle, buf);
   3186c:	4641      	mov	r1, r8
   3186e:	4602      	mov	r2, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   31870:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
   31872:	f105 001c 	add.w	r0, r5, #28
   31876:	f000 fd95 	bl	323a4 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
   3187a:	4640      	mov	r0, r8
   3187c:	f000 fdb2 	bl	323e4 <hci_disconn_complete_process>
				bt_recv_prio(buf);
   31880:	4620      	mov	r0, r4
			if (buf) {
   31882:	b124      	cbz	r4, 3188e <prio_recv_thread+0xba>
				bt_recv_prio(buf);
   31884:	f7f9 ffd4 	bl	2b830 <bt_recv_prio>
					net_buf_unref(buf);
   31888:	4620      	mov	r0, r4
   3188a:	f00a fd41 	bl	3c310 <net_buf_unref>
				k_fifo_put(&recv_fifo, node_rx);
   3188e:	9d01      	ldr	r5, [sp, #4]
   31890:	e7d3      	b.n	3183a <prio_recv_thread+0x66>
   31892:	bf00      	nop
   31894:	20002050 	.word	0x20002050
   31898:	20002038 	.word	0x20002038

0003189c <hci_driver_open>:
{
   3189c:	b5d0      	push	{r4, r6, r7, lr}
   3189e:	b088      	sub	sp, #32
	z_impl_k_queue_init(queue);
   318a0:	481e      	ldr	r0, [pc, #120]	; (3191c <hci_driver_open+0x80>)
   318a2:	f016 fbb2 	bl	4800a <z_impl_k_queue_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
   318a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   318aa:	2100      	movs	r1, #0
   318ac:	481c      	ldr	r0, [pc, #112]	; (31920 <hci_driver_open+0x84>)
   318ae:	f016 fc2c 	bl	4810a <z_impl_k_sem_init>
	err = ll_init(&sem_prio_recv);
   318b2:	481b      	ldr	r0, [pc, #108]	; (31920 <hci_driver_open+0x84>)
   318b4:	f002 f912 	bl	33adc <ll_init>
	if (err) {
   318b8:	4604      	mov	r4, r0
   318ba:	bb58      	cbnz	r0, 31914 <hci_driver_open+0x78>
	hci_init(NULL);
   318bc:	f001 f864 	bl	32988 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
   318c0:	2600      	movs	r6, #0
   318c2:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   318c4:	f06f 0209 	mvn.w	r2, #9
   318c8:	e9cd 2403 	strd	r2, r4, [sp, #12]
   318cc:	e9cd 6706 	strd	r6, r7, [sp, #24]
   318d0:	e9cd 4401 	strd	r4, r4, [sp, #4]
   318d4:	4b13      	ldr	r3, [pc, #76]	; (31924 <hci_driver_open+0x88>)
   318d6:	4914      	ldr	r1, [pc, #80]	; (31928 <hci_driver_open+0x8c>)
   318d8:	9400      	str	r4, [sp, #0]
   318da:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   318de:	4813      	ldr	r0, [pc, #76]	; (3192c <hci_driver_open+0x90>)
   318e0:	f00e ff04 	bl	406ec <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   318e4:	4912      	ldr	r1, [pc, #72]	; (31930 <hci_driver_open+0x94>)
   318e6:	4811      	ldr	r0, [pc, #68]	; (3192c <hci_driver_open+0x90>)
   318e8:	f016 fb02 	bl	47ef0 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   318ec:	f06f 0207 	mvn.w	r2, #7
   318f0:	e9cd 2403 	strd	r2, r4, [sp, #12]
   318f4:	e9cd 6706 	strd	r6, r7, [sp, #24]
   318f8:	e9cd 4401 	strd	r4, r4, [sp, #4]
   318fc:	4b0d      	ldr	r3, [pc, #52]	; (31934 <hci_driver_open+0x98>)
   318fe:	490e      	ldr	r1, [pc, #56]	; (31938 <hci_driver_open+0x9c>)
   31900:	9400      	str	r4, [sp, #0]
   31902:	f640 0298 	movw	r2, #2200	; 0x898
   31906:	480d      	ldr	r0, [pc, #52]	; (3193c <hci_driver_open+0xa0>)
   31908:	f00e fef0 	bl	406ec <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   3190c:	490c      	ldr	r1, [pc, #48]	; (31940 <hci_driver_open+0xa4>)
   3190e:	480b      	ldr	r0, [pc, #44]	; (3193c <hci_driver_open+0xa0>)
   31910:	f016 faee 	bl	47ef0 <z_impl_k_thread_name_set>
}
   31914:	4620      	mov	r0, r4
   31916:	b008      	add	sp, #32
   31918:	bdd0      	pop	{r4, r6, r7, pc}
   3191a:	bf00      	nop
   3191c:	20002038 	.word	0x20002038
   31920:	20002050 	.word	0x20002050
   31924:	000317d5 	.word	0x000317d5
   31928:	20005250 	.word	0x20005250
   3192c:	20001590 	.word	0x20001590
   31930:	00049814 	.word	0x00049814
   31934:	000316b5 	.word	0x000316b5
   31938:	200049b8 	.word	0x200049b8
   3193c:	20001510 	.word	0x20001510
   31940:	00049820 	.word	0x00049820

00031944 <hci_recv_fifo_reset>:
{
   31944:	b510      	push	{r4, lr}
	k_sched_lock();
   31946:	f00f fd5d 	bl	41404 <k_sched_lock>
	z_impl_k_queue_cancel_wait(queue);
   3194a:	4c05      	ldr	r4, [pc, #20]	; (31960 <hci_recv_fifo_reset+0x1c>)
   3194c:	4620      	mov	r0, r4
   3194e:	f016 fb68 	bl	48022 <z_impl_k_queue_cancel_wait>
	z_impl_k_queue_init(queue);
   31952:	4620      	mov	r0, r4
   31954:	f016 fb59 	bl	4800a <z_impl_k_queue_init>
}
   31958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_sched_unlock();
   3195c:	f00f bd66 	b.w	4142c <k_sched_unlock>
   31960:	20002038 	.word	0x20002038

00031964 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
   31964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   31966:	4c18      	ldr	r4, [pc, #96]	; (319c8 <le_remote_feat_complete+0x64>)
   31968:	6864      	ldr	r4, [r4, #4]
   3196a:	00a4      	lsls	r4, r4, #2
   3196c:	d504      	bpl.n	31978 <le_remote_feat_complete+0x14>
   3196e:	4615      	mov	r5, r2
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   31970:	4a16      	ldr	r2, [pc, #88]	; (319cc <le_remote_feat_complete+0x68>)
   31972:	6812      	ldr	r2, [r2, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   31974:	0712      	lsls	r2, r2, #28
   31976:	d400      	bmi.n	3197a <le_remote_feat_complete+0x16>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   31978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   3197a:	f103 0408 	add.w	r4, r3, #8
   3197e:	4607      	mov	r7, r0
   31980:	460e      	mov	r6, r1
   31982:	4620      	mov	r0, r4
   31984:	2102      	movs	r1, #2
   31986:	f015 fc22 	bl	471ce <net_buf_simple_add>
	hdr->evt = evt;
   3198a:	f640 433e 	movw	r3, #3134	; 0xc3e
   3198e:	8003      	strh	r3, [r0, #0]
   31990:	2101      	movs	r1, #1
   31992:	4620      	mov	r0, r4
   31994:	f015 fc1b 	bl	471ce <net_buf_simple_add>
   31998:	4603      	mov	r3, r0
	me->subevent = subevt;
   3199a:	2204      	movs	r2, #4
   3199c:	701a      	strb	r2, [r3, #0]
   3199e:	4620      	mov	r0, r4
   319a0:	210b      	movs	r1, #11
   319a2:	f015 fc14 	bl	471ce <net_buf_simple_add>
		memcpy(&sep->features[0],
   319a6:	2208      	movs	r2, #8
	sep->status = status;
   319a8:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   319aa:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (!status) {
   319ae:	b92f      	cbnz	r7, 319bc <le_remote_feat_complete+0x58>
		memcpy(&sep->features[0],
   319b0:	1d31      	adds	r1, r6, #4
   319b2:	3003      	adds	r0, #3
}
   319b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		memcpy(&sep->features[0],
   319b8:	f012 bcae 	b.w	44318 <memcpy>
}
   319bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   319c0:	2100      	movs	r1, #0
   319c2:	3003      	adds	r0, #3
   319c4:	f012 bcb3 	b.w	4432e <memset>
   319c8:	20000160 	.word	0x20000160
   319cc:	20000158 	.word	0x20000158

000319d0 <hci_vendor_cmd_handle_common>:
{
   319d0:	b570      	push	{r4, r5, r6, lr}
	switch (ocf) {
   319d2:	3801      	subs	r0, #1
{
   319d4:	b086      	sub	sp, #24
   319d6:	4614      	mov	r4, r2
	switch (ocf) {
   319d8:	2809      	cmp	r0, #9
   319da:	d806      	bhi.n	319ea <hci_vendor_cmd_handle_common+0x1a>
   319dc:	e8df f000 	tbb	[pc, r0]
   319e0:	05412709 	.word	0x05412709
   319e4:	64055205 	.word	0x64055205
   319e8:	927f      	.short	0x927f
   319ea:	f06f 0015 	mvn.w	r0, #21
}
   319ee:	b006      	add	sp, #24
   319f0:	bd70      	pop	{r4, r5, r6, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   319f2:	4b4d      	ldr	r3, [pc, #308]	; (31b28 <hci_vendor_cmd_handle_common+0x158>)
   319f4:	210d      	movs	r1, #13
   319f6:	8818      	ldrh	r0, [r3, #0]
   319f8:	f013 f8dc 	bl	44bb4 <bt_hci_cmd_complete_create>
   319fc:	210d      	movs	r1, #13
   319fe:	6020      	str	r0, [r4, #0]
   31a00:	3008      	adds	r0, #8
   31a02:	f015 fbe4 	bl	471ce <net_buf_simple_add>
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   31a06:	f04f 1402 	mov.w	r4, #131074	; 0x20002
	rp->status = 0x00;
   31a0a:	2300      	movs	r3, #0
	rp->fw_variant = 0U;
   31a0c:	f44f 7140 	mov.w	r1, #768	; 0x300
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   31a10:	2202      	movs	r2, #2
	rp->status = 0x00;
   31a12:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   31a14:	f8c0 4001 	str.w	r4, [r0, #1]
	rp->fw_variant = 0U;
   31a18:	f8a0 1005 	strh.w	r1, [r0, #5]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   31a1c:	71c2      	strb	r2, [r0, #7]
   31a1e:	7203      	strb	r3, [r0, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   31a20:	7243      	strb	r3, [r0, #9]
   31a22:	7283      	strb	r3, [r0, #10]
   31a24:	72c3      	strb	r3, [r0, #11]
   31a26:	7303      	strb	r3, [r0, #12]
	return 0;
   31a28:	2000      	movs	r0, #0
}
   31a2a:	b006      	add	sp, #24
   31a2c:	bd70      	pop	{r4, r5, r6, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31a2e:	4b3e      	ldr	r3, [pc, #248]	; (31b28 <hci_vendor_cmd_handle_common+0x158>)
   31a30:	2141      	movs	r1, #65	; 0x41
   31a32:	8818      	ldrh	r0, [r3, #0]
   31a34:	f013 f8be 	bl	44bb4 <bt_hci_cmd_complete_create>
   31a38:	2141      	movs	r1, #65	; 0x41
   31a3a:	6020      	str	r0, [r4, #0]
   31a3c:	3008      	adds	r0, #8
   31a3e:	f015 fbc6 	bl	471ce <net_buf_simple_add>
	rp->status = 0x00;
   31a42:	2100      	movs	r1, #0
   31a44:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   31a46:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   31a48:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   31a4c:	f012 fc6f 	bl	4432e <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
   31a50:	7862      	ldrb	r2, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   31a52:	78a3      	ldrb	r3, [r4, #2]
	rp->commands[0] |= BIT(5) | BIT(7);
   31a54:	f062 0258 	orn	r2, r2, #88	; 0x58
	rp->commands[1] |= BIT(0) | BIT(1);
   31a58:	f043 0303 	orr.w	r3, r3, #3
	rp->commands[0] |= BIT(5) | BIT(7);
   31a5c:	7062      	strb	r2, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   31a5e:	70a3      	strb	r3, [r4, #2]
}
   31a60:	e7e2      	b.n	31a28 <hci_vendor_cmd_handle_common+0x58>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31a62:	4b31      	ldr	r3, [pc, #196]	; (31b28 <hci_vendor_cmd_handle_common+0x158>)
   31a64:	2109      	movs	r1, #9
   31a66:	8818      	ldrh	r0, [r3, #0]
   31a68:	f013 f8a4 	bl	44bb4 <bt_hci_cmd_complete_create>
   31a6c:	2109      	movs	r1, #9
   31a6e:	6020      	str	r0, [r4, #0]
   31a70:	3008      	adds	r0, #8
   31a72:	f015 fbac 	bl	471ce <net_buf_simple_add>
	rp->status = 0x00;
   31a76:	2100      	movs	r1, #0
   31a78:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   31a7c:	2208      	movs	r2, #8
   31a7e:	f012 fc56 	bl	4432e <memset>
}
   31a82:	e7d1      	b.n	31a28 <hci_vendor_cmd_handle_common+0x58>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   31a84:	6889      	ldr	r1, [r1, #8]
   31a86:	2000      	movs	r0, #0
   31a88:	f7ff fd66 	bl	31558 <ll_addr_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   31a8c:	4b26      	ldr	r3, [pc, #152]	; (31b28 <hci_vendor_cmd_handle_common+0x158>)
   31a8e:	2101      	movs	r1, #1
   31a90:	8818      	ldrh	r0, [r3, #0]
   31a92:	f013 f88f 	bl	44bb4 <bt_hci_cmd_complete_create>
   31a96:	2101      	movs	r1, #1
   31a98:	4605      	mov	r5, r0
   31a9a:	3008      	adds	r0, #8
   31a9c:	f015 fb97 	bl	471ce <net_buf_simple_add>
	ccst->status = status;
   31aa0:	2300      	movs	r3, #0
   31aa2:	7003      	strb	r3, [r0, #0]
	*evt = cmd_complete_status(0x00);
   31aa4:	6025      	str	r5, [r4, #0]
}
   31aa6:	e7bf      	b.n	31a28 <hci_vendor_cmd_handle_common+0x58>
	const char build_info[] = HCI_VS_BUILD_INFO;
   31aa8:	4d20      	ldr	r5, [pc, #128]	; (31b2c <hci_vendor_cmd_handle_common+0x15c>)
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31aaa:	4e1f      	ldr	r6, [pc, #124]	; (31b28 <hci_vendor_cmd_handle_common+0x158>)
	const char build_info[] = HCI_VS_BUILD_INFO;
   31aac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   31aae:	f10d 0c04 	add.w	ip, sp, #4
   31ab2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   31ab6:	682b      	ldr	r3, [r5, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31ab8:	8830      	ldrh	r0, [r6, #0]
	const char build_info[] = HCI_VS_BUILD_INFO;
   31aba:	f88c 3000 	strb.w	r3, [ip]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31abe:	2112      	movs	r1, #18
   31ac0:	f013 f878 	bl	44bb4 <bt_hci_cmd_complete_create>
   31ac4:	2112      	movs	r1, #18
   31ac6:	6020      	str	r0, [r4, #0]
   31ac8:	3008      	adds	r0, #8
   31aca:	f015 fb80 	bl	471ce <net_buf_simple_add>
	rp->status = 0x00;
   31ace:	2300      	movs	r3, #0
   31ad0:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
   31ad4:	2211      	movs	r2, #17
   31ad6:	a901      	add	r1, sp, #4
   31ad8:	f012 fc1e 	bl	44318 <memcpy>
}
   31adc:	e7a4      	b.n	31a28 <hci_vendor_cmd_handle_common+0x58>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31ade:	4b12      	ldr	r3, [pc, #72]	; (31b28 <hci_vendor_cmd_handle_common+0x158>)
   31ae0:	2118      	movs	r1, #24
   31ae2:	8818      	ldrh	r0, [r3, #0]
   31ae4:	f013 f866 	bl	44bb4 <bt_hci_cmd_complete_create>
   31ae8:	2118      	movs	r1, #24
   31aea:	6020      	str	r0, [r4, #0]
   31aec:	3008      	adds	r0, #8
   31aee:	f015 fb6e 	bl	471ce <net_buf_simple_add>
	rp->status = 0x00;
   31af2:	2300      	movs	r3, #0
   31af4:	4604      	mov	r4, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   31af6:	2101      	movs	r1, #1
	rp->status = 0x00;
   31af8:	f800 3b02 	strb.w	r3, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   31afc:	f00a faca 	bl	3c094 <hci_vendor_read_static_addr>
   31b00:	7060      	strb	r0, [r4, #1]
}
   31b02:	e791      	b.n	31a28 <hci_vendor_cmd_handle_common+0x58>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31b04:	4b08      	ldr	r3, [pc, #32]	; (31b28 <hci_vendor_cmd_handle_common+0x158>)
   31b06:	2121      	movs	r1, #33	; 0x21
   31b08:	8818      	ldrh	r0, [r3, #0]
   31b0a:	f013 f853 	bl	44bb4 <bt_hci_cmd_complete_create>
   31b0e:	2121      	movs	r1, #33	; 0x21
   31b10:	6020      	str	r0, [r4, #0]
   31b12:	3008      	adds	r0, #8
   31b14:	f015 fb5b 	bl	471ce <net_buf_simple_add>
	rp->status = 0x00;
   31b18:	4601      	mov	r1, r0
   31b1a:	2300      	movs	r3, #0
   31b1c:	f801 3b11 	strb.w	r3, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
   31b20:	3001      	adds	r0, #1
   31b22:	f00a fb07 	bl	3c134 <hci_vendor_read_key_hierarchy_roots>
}
   31b26:	e77f      	b.n	31a28 <hci_vendor_cmd_handle_common+0x58>
   31b28:	200039d4 	.word	0x200039d4
   31b2c:	0004984c 	.word	0x0004984c

00031b30 <hci_cmd_handle>:
{
   31b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (cmd->len < sizeof(*chdr)) {
   31b34:	8983      	ldrh	r3, [r0, #12]
{
   31b36:	b08c      	sub	sp, #48	; 0x30
	struct net_buf *evt = NULL;
   31b38:	2200      	movs	r2, #0
	if (cmd->len < sizeof(*chdr)) {
   31b3a:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
   31b3c:	9207      	str	r2, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
   31b3e:	d92d      	bls.n	31b9c <hci_cmd_handle+0x6c>
	return net_buf_simple_pull_mem(&buf->b, len);
   31b40:	4604      	mov	r4, r0
   31b42:	2103      	movs	r1, #3
   31b44:	3008      	adds	r0, #8
   31b46:	f015 fb69 	bl	4721c <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
   31b4a:	89a2      	ldrh	r2, [r4, #12]
   31b4c:	7883      	ldrb	r3, [r0, #2]
   31b4e:	429a      	cmp	r2, r3
   31b50:	d324      	bcc.n	31b9c <hci_cmd_handle+0x6c>
	_opcode = sys_le16_to_cpu(chdr->opcode);
   31b52:	8802      	ldrh	r2, [r0, #0]
   31b54:	4ed4      	ldr	r6, [pc, #848]	; (31ea8 <hci_cmd_handle+0x378>)
	switch (BT_OGF(_opcode)) {
   31b56:	f3c2 2385 	ubfx	r3, r2, #10, #6
   31b5a:	2b08      	cmp	r3, #8
	_opcode = sys_le16_to_cpu(chdr->opcode);
   31b5c:	8032      	strh	r2, [r6, #0]
   31b5e:	b290      	uxth	r0, r2
	ocf = BT_OCF(_opcode);
   31b60:	f3c2 0509 	ubfx	r5, r2, #0, #10
	switch (BT_OGF(_opcode)) {
   31b64:	d809      	bhi.n	31b7a <hci_cmd_handle+0x4a>
   31b66:	b19b      	cbz	r3, 31b90 <hci_cmd_handle+0x60>
   31b68:	3b01      	subs	r3, #1
   31b6a:	2b07      	cmp	r3, #7
   31b6c:	d810      	bhi.n	31b90 <hci_cmd_handle+0x60>
   31b6e:	e8df f003 	tbb	[pc, r3]
   31b72:	0f1a      	.short	0x0f1a
   31b74:	0f0f4926 	.word	0x0f0f4926
   31b78:	610f      	.short	0x610f
   31b7a:	2b3f      	cmp	r3, #63	; 0x3f
   31b7c:	d108      	bne.n	31b90 <hci_cmd_handle+0x60>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
   31b7e:	aa07      	add	r2, sp, #28
   31b80:	4621      	mov	r1, r4
   31b82:	4628      	mov	r0, r5
   31b84:	f7ff ff24 	bl	319d0 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
   31b88:	3016      	adds	r0, #22
   31b8a:	f040 839f 	bne.w	322cc <hci_cmd_handle+0x79c>
	return bt_hci_cmd_status_create(_opcode, status);
   31b8e:	8830      	ldrh	r0, [r6, #0]
   31b90:	2101      	movs	r1, #1
}
   31b92:	b00c      	add	sp, #48	; 0x30
   31b94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_hci_cmd_status_create(_opcode, status);
   31b98:	f013 b81e 	b.w	44bd8 <bt_hci_cmd_status_create>
		return NULL;
   31b9c:	2400      	movs	r4, #0
}
   31b9e:	4620      	mov	r0, r4
   31ba0:	b00c      	add	sp, #48	; 0x30
   31ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (ocf) {
   31ba6:	2d06      	cmp	r5, #6
   31ba8:	f000 834a 	beq.w	32240 <hci_cmd_handle+0x710>
   31bac:	2d1d      	cmp	r5, #29
   31bae:	d1ef      	bne.n	31b90 <hci_cmd_handle+0x60>
	handle = sys_le16_to_cpu(cmd->handle);
   31bb0:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
   31bb2:	8818      	ldrh	r0, [r3, #0]
   31bb4:	f003 fd98 	bl	356e8 <ll_version_ind_send>
   31bb8:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   31bba:	8830      	ldrh	r0, [r6, #0]
   31bbc:	e7e9      	b.n	31b92 <hci_cmd_handle+0x62>
	switch (ocf) {
   31bbe:	2d63      	cmp	r5, #99	; 0x63
   31bc0:	f000 8381 	beq.w	322c6 <hci_cmd_handle+0x796>
   31bc4:	f200 80e6 	bhi.w	31d94 <hci_cmd_handle+0x264>
   31bc8:	2d03      	cmp	r5, #3
   31bca:	f000 8359 	beq.w	32280 <hci_cmd_handle+0x750>
   31bce:	2d2d      	cmp	r5, #45	; 0x2d
   31bd0:	f040 80cc 	bne.w	31d6c <hci_cmd_handle+0x23c>
	struct bt_hci_cp_read_tx_power_level *cmd = (void *)buf->data;
   31bd4:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31bd6:	2104      	movs	r1, #4
	handle = sys_le16_to_cpu(cmd->handle);
   31bd8:	881e      	ldrh	r6, [r3, #0]
	type = cmd->type;
   31bda:	f893 8002 	ldrb.w	r8, [r3, #2]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31bde:	f012 ffe9 	bl	44bb4 <bt_hci_cmd_complete_create>
	return net_buf_simple_add(&buf->b, len);
   31be2:	2104      	movs	r1, #4
   31be4:	4604      	mov	r4, r0
   31be6:	3008      	adds	r0, #8
   31be8:	f015 faf1 	bl	471ce <net_buf_simple_add>
	handle = sys_le16_to_cpu(cmd->handle);
   31bec:	b2b7      	uxth	r7, r6
   31bee:	4605      	mov	r5, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
   31bf0:	1cc3      	adds	r3, r0, #3
   31bf2:	4642      	mov	r2, r8
   31bf4:	4639      	mov	r1, r7
   31bf6:	2002      	movs	r0, #2
   31bf8:	f7ff fcfa 	bl	315f0 <ll_tx_pwr_lvl_get>
	rp->handle = sys_cpu_to_le16(handle);
   31bfc:	f8a5 6001 	strh.w	r6, [r5, #1]
	rp->status = status;
   31c00:	7028      	strb	r0, [r5, #0]
	if (err == -EINVAL) {
   31c02:	e7cc      	b.n	31b9e <hci_cmd_handle+0x6e>
	switch (ocf) {
   31c04:	1e6a      	subs	r2, r5, #1
   31c06:	2a08      	cmp	r2, #8
   31c08:	d8c2      	bhi.n	31b90 <hci_cmd_handle+0x60>
   31c0a:	a301      	add	r3, pc, #4	; (adr r3, 31c10 <hci_cmd_handle+0xe0>)
   31c0c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   31c10:	00031e7f 	.word	0x00031e7f
   31c14:	00031e0b 	.word	0x00031e0b
   31c18:	00031de7 	.word	0x00031de7
   31c1c:	00031b91 	.word	0x00031b91
   31c20:	00031b91 	.word	0x00031b91
   31c24:	00031b91 	.word	0x00031b91
   31c28:	00031b91 	.word	0x00031b91
   31c2c:	00031b91 	.word	0x00031b91
   31c30:	00031dc9 	.word	0x00031dc9
	switch (ocf) {
   31c34:	1e6a      	subs	r2, r5, #1
   31c36:	2a4a      	cmp	r2, #74	; 0x4a
   31c38:	d8aa      	bhi.n	31b90 <hci_cmd_handle+0x60>
   31c3a:	a301      	add	r3, pc, #4	; (adr r3, 31c40 <hci_cmd_handle+0x110>)
   31c3c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   31c40:	00031efd 	.word	0x00031efd
   31c44:	00031edd 	.word	0x00031edd
   31c48:	00031f9f 	.word	0x00031f9f
   31c4c:	00031b91 	.word	0x00031b91
   31c50:	00031f95 	.word	0x00031f95
   31c54:	00031f79 	.word	0x00031f79
   31c58:	00031f61 	.word	0x00031f61
   31c5c:	00031f55 	.word	0x00031f55
   31c60:	00031f49 	.word	0x00031f49
   31c64:	00031f29 	.word	0x00031f29
   31c68:	00031b91 	.word	0x00031b91
   31c6c:	00031b91 	.word	0x00031b91
   31c70:	00031b91 	.word	0x00031b91
   31c74:	00031b91 	.word	0x00031b91
   31c78:	00031b91 	.word	0x00031b91
   31c7c:	00031b91 	.word	0x00031b91
   31c80:	00031b91 	.word	0x00031b91
   31c84:	00031b91 	.word	0x00031b91
   31c88:	00031f09 	.word	0x00031f09
   31c8c:	00031b91 	.word	0x00031b91
   31c90:	0003210d 	.word	0x0003210d
   31c94:	000320ff 	.word	0x000320ff
   31c98:	000320cf 	.word	0x000320cf
   31c9c:	000320b1 	.word	0x000320b1
   31ca0:	00031b91 	.word	0x00031b91
   31ca4:	000320a7 	.word	0x000320a7
   31ca8:	00032097 	.word	0x00032097
   31cac:	00032079 	.word	0x00032079
   31cb0:	00031b91 	.word	0x00031b91
   31cb4:	00031b91 	.word	0x00031b91
   31cb8:	00031b91 	.word	0x00031b91
   31cbc:	0003205b 	.word	0x0003205b
   31cc0:	00032181 	.word	0x00032181
   31cc4:	00032171 	.word	0x00032171
   31cc8:	0003213f 	.word	0x0003213f
   31ccc:	00032133 	.word	0x00032133
   31cd0:	00031b91 	.word	0x00031b91
   31cd4:	00031b91 	.word	0x00031b91
   31cd8:	00031b91 	.word	0x00031b91
   31cdc:	00031b91 	.word	0x00031b91
   31ce0:	00031b91 	.word	0x00031b91
   31ce4:	00031b91 	.word	0x00031b91
   31ce8:	00031b91 	.word	0x00031b91
   31cec:	00031b91 	.word	0x00031b91
   31cf0:	00031b91 	.word	0x00031b91
   31cf4:	00031b91 	.word	0x00031b91
   31cf8:	000321f9 	.word	0x000321f9
   31cfc:	00032199 	.word	0x00032199
   31d00:	0003203b 	.word	0x0003203b
   31d04:	00031fe7 	.word	0x00031fe7
   31d08:	00031b91 	.word	0x00031b91
   31d0c:	00031b91 	.word	0x00031b91
   31d10:	00031b91 	.word	0x00031b91
   31d14:	00031b91 	.word	0x00031b91
   31d18:	00031b91 	.word	0x00031b91
   31d1c:	00031b91 	.word	0x00031b91
   31d20:	00031b91 	.word	0x00031b91
   31d24:	00031b91 	.word	0x00031b91
   31d28:	00031b91 	.word	0x00031b91
   31d2c:	00031b91 	.word	0x00031b91
   31d30:	00031b91 	.word	0x00031b91
   31d34:	00031b91 	.word	0x00031b91
   31d38:	00031b91 	.word	0x00031b91
   31d3c:	00031b91 	.word	0x00031b91
   31d40:	00031b91 	.word	0x00031b91
   31d44:	00031b91 	.word	0x00031b91
   31d48:	00031b91 	.word	0x00031b91
   31d4c:	00031b91 	.word	0x00031b91
   31d50:	00031b91 	.word	0x00031b91
   31d54:	00031b91 	.word	0x00031b91
   31d58:	00031b91 	.word	0x00031b91
   31d5c:	00031b91 	.word	0x00031b91
   31d60:	00031b91 	.word	0x00031b91
   31d64:	00031b91 	.word	0x00031b91
   31d68:	00031ebd 	.word	0x00031ebd
	switch (ocf) {
   31d6c:	2d01      	cmp	r5, #1
   31d6e:	f47f af0f 	bne.w	31b90 <hci_cmd_handle+0x60>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   31d72:	68a2      	ldr	r2, [r4, #8]
	event_mask = sys_get_le64(cmd->events);
   31d74:	4b4d      	ldr	r3, [pc, #308]	; (31eac <hci_cmd_handle+0x37c>)
   31d76:	6811      	ldr	r1, [r2, #0]
   31d78:	6852      	ldr	r2, [r2, #4]
   31d7a:	6019      	str	r1, [r3, #0]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   31d7c:	605a      	str	r2, [r3, #4]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   31d7e:	2101      	movs	r1, #1
   31d80:	f012 ff18 	bl	44bb4 <bt_hci_cmd_complete_create>
   31d84:	2101      	movs	r1, #1
   31d86:	4604      	mov	r4, r0
   31d88:	3008      	adds	r0, #8
   31d8a:	f015 fa20 	bl	471ce <net_buf_simple_add>
	ccst->status = status;
   31d8e:	2300      	movs	r3, #0
   31d90:	7003      	strb	r3, [r0, #0]
	if (err == -EINVAL) {
   31d92:	e704      	b.n	31b9e <hci_cmd_handle+0x6e>
	switch (ocf) {
   31d94:	2d7b      	cmp	r5, #123	; 0x7b
   31d96:	f000 825b 	beq.w	32250 <hci_cmd_handle+0x720>
   31d9a:	2d7c      	cmp	r5, #124	; 0x7c
   31d9c:	f47f aef8 	bne.w	31b90 <hci_cmd_handle+0x60>
	struct bt_hci_cp_write_auth_payload_timeout *cmd = (void *)buf->data;
   31da0:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   31da2:	881f      	ldrh	r7, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
   31da4:	8859      	ldrh	r1, [r3, #2]
   31da6:	b2b8      	uxth	r0, r7
   31da8:	f003 fddc 	bl	35964 <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   31dac:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31dae:	2103      	movs	r1, #3
   31db0:	8830      	ldrh	r0, [r6, #0]
   31db2:	f012 feff 	bl	44bb4 <bt_hci_cmd_complete_create>
   31db6:	2103      	movs	r1, #3
   31db8:	4604      	mov	r4, r0
   31dba:	3008      	adds	r0, #8
   31dbc:	f015 fa07 	bl	471ce <net_buf_simple_add>
	rp->status = status;
   31dc0:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   31dc2:	f8a0 7001 	strh.w	r7, [r0, #1]
	if (err == -EINVAL) {
   31dc6:	e6ea      	b.n	31b9e <hci_cmd_handle+0x6e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31dc8:	2107      	movs	r1, #7
   31dca:	f012 fef3 	bl	44bb4 <bt_hci_cmd_complete_create>
   31dce:	2107      	movs	r1, #7
   31dd0:	4604      	mov	r4, r0
   31dd2:	3008      	adds	r0, #8
   31dd4:	f015 f9fb 	bl	471ce <net_buf_simple_add>
	rp->status = 0x00;
   31dd8:	4601      	mov	r1, r0
   31dda:	2000      	movs	r0, #0
   31ddc:	f801 0b01 	strb.w	r0, [r1], #1
	(void)ll_addr_read(0, &rp->bdaddr.val[0]);
   31de0:	f7ff fbee 	bl	315c0 <ll_addr_read>
	if (err == -EINVAL) {
   31de4:	e6db      	b.n	31b9e <hci_cmd_handle+0x6e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31de6:	2109      	movs	r1, #9
   31de8:	f012 fee4 	bl	44bb4 <bt_hci_cmd_complete_create>
   31dec:	2109      	movs	r1, #9
   31dee:	4604      	mov	r4, r0
   31df0:	3008      	adds	r0, #8
   31df2:	f015 f9ec 	bl	471ce <net_buf_simple_add>
	rp->status = 0x00;
   31df6:	2100      	movs	r1, #0
   31df8:	4605      	mov	r5, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   31dfa:	2208      	movs	r2, #8
	rp->status = 0x00;
   31dfc:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   31e00:	f012 fa95 	bl	4432e <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
   31e04:	2360      	movs	r3, #96	; 0x60
   31e06:	716b      	strb	r3, [r5, #5]
	if (err == -EINVAL) {
   31e08:	e6c9      	b.n	31b9e <hci_cmd_handle+0x6e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31e0a:	2141      	movs	r1, #65	; 0x41
   31e0c:	f012 fed2 	bl	44bb4 <bt_hci_cmd_complete_create>
   31e10:	2141      	movs	r1, #65	; 0x41
   31e12:	4604      	mov	r4, r0
   31e14:	3008      	adds	r0, #8
   31e16:	f015 f9da 	bl	471ce <net_buf_simple_add>
	rp->status = 0x00;
   31e1a:	2100      	movs	r1, #0
   31e1c:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   31e1e:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   31e20:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   31e24:	f012 fa83 	bl	4432e <memset>
	rp->commands[10] |= BIT(2);
   31e28:	7aeb      	ldrb	r3, [r5, #11]
	rp->commands[5] |= BIT(6) | BIT(7);
   31e2a:	79a9      	ldrb	r1, [r5, #6]
	rp->commands[14] |= BIT(3) | BIT(5);
   31e2c:	7bea      	ldrb	r2, [r5, #15]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
   31e2e:	f8d5 001a 	ldr.w	r0, [r5, #26]
	rp->commands[10] |= BIT(2);
   31e32:	f043 0304 	orr.w	r3, r3, #4
   31e36:	72eb      	strb	r3, [r5, #11]
	rp->commands[15] |= BIT(1);
   31e38:	7c2b      	ldrb	r3, [r5, #16]
	rp->commands[5] |= BIT(6) | BIT(7);
   31e3a:	f061 013f 	orn	r1, r1, #63	; 0x3f
	rp->commands[14] |= BIT(3) | BIT(5);
   31e3e:	f042 0228 	orr.w	r2, r2, #40	; 0x28
	rp->commands[15] |= BIT(1);
   31e42:	f043 0302 	orr.w	r3, r3, #2
	rp->commands[5] |= BIT(6) | BIT(7);
   31e46:	71a9      	strb	r1, [r5, #6]
	rp->commands[14] |= BIT(3) | BIT(5);
   31e48:	73ea      	strb	r2, [r5, #15]
	rp->commands[22] |= BIT(2);
   31e4a:	7de9      	ldrb	r1, [r5, #23]
	rp->commands[0] |= BIT(5);
   31e4c:	786a      	ldrb	r2, [r5, #1]
	rp->commands[15] |= BIT(1);
   31e4e:	742b      	strb	r3, [r5, #16]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   31e50:	4b17      	ldr	r3, [pc, #92]	; (31eb0 <hci_cmd_handle+0x380>)
	rp->commands[22] |= BIT(2);
   31e52:	f041 0104 	orr.w	r1, r1, #4
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   31e56:	4303      	orrs	r3, r0
	rp->commands[0] |= BIT(5);
   31e58:	f042 0220 	orr.w	r2, r2, #32
	rp->commands[22] |= BIT(2);
   31e5c:	75e9      	strb	r1, [r5, #23]
	rp->commands[0] |= BIT(5);
   31e5e:	706a      	strb	r2, [r5, #1]
	rp->commands[32] |= BIT(4) | BIT(5);
   31e60:	f8d5 1021 	ldr.w	r1, [r5, #33]	; 0x21
   31e64:	4a13      	ldr	r2, [pc, #76]	; (31eb4 <hci_cmd_handle+0x384>)
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   31e66:	f8c5 301a 	str.w	r3, [r5, #26]
	rp->commands[38] |= BIT(7);
   31e6a:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
	rp->commands[32] |= BIT(4) | BIT(5);
   31e6e:	430a      	orrs	r2, r1
	rp->commands[38] |= BIT(7);
   31e70:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[32] |= BIT(4) | BIT(5);
   31e74:	f8c5 2021 	str.w	r2, [r5, #33]	; 0x21
	rp->commands[38] |= BIT(7);
   31e78:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
	if (err == -EINVAL) {
   31e7c:	e68f      	b.n	31b9e <hci_cmd_handle+0x6e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31e7e:	2109      	movs	r1, #9
   31e80:	f012 fe98 	bl	44bb4 <bt_hci_cmd_complete_create>
   31e84:	2109      	movs	r1, #9
   31e86:	4604      	mov	r4, r0
   31e88:	3008      	adds	r0, #8
   31e8a:	f015 f9a0 	bl	471ce <net_buf_simple_add>
	rp->status = 0x00;
   31e8e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
	rp->hci_revision = sys_cpu_to_le16(0);
   31e92:	2300      	movs	r3, #0
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   31e94:	4a08      	ldr	r2, [pc, #32]	; (31eb8 <hci_cmd_handle+0x388>)
	rp->status = 0x00;
   31e96:	8001      	strh	r1, [r0, #0]
	rp->lmp_version = LL_VERSION_NUMBER;
   31e98:	210c      	movs	r1, #12
	rp->hci_revision = sys_cpu_to_le16(0);
   31e9a:	7083      	strb	r3, [r0, #2]
   31e9c:	70c3      	strb	r3, [r0, #3]
	rp->lmp_version = LL_VERSION_NUMBER;
   31e9e:	7101      	strb	r1, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   31ea0:	f8c0 2005 	str.w	r2, [r0, #5]
	if (err == -EINVAL) {
   31ea4:	e67b      	b.n	31b9e <hci_cmd_handle+0x6e>
   31ea6:	bf00      	nop
   31ea8:	200039d4 	.word	0x200039d4
   31eac:	20000160 	.word	0x20000160
   31eb0:	0ef403f7 	.word	0x0ef403f7
   31eb4:	7801f030 	.word	0x7801f030
   31eb8:	ffff05f1 	.word	0xffff05f1
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31ebc:	2103      	movs	r1, #3
   31ebe:	f012 fe79 	bl	44bb4 <bt_hci_cmd_complete_create>
   31ec2:	2103      	movs	r1, #3
   31ec4:	4604      	mov	r4, r0
   31ec6:	3008      	adds	r0, #8
   31ec8:	f015 f981 	bl	471ce <net_buf_simple_add>
	rp->status = 0x00;
   31ecc:	4601      	mov	r1, r0
   31ece:	2300      	movs	r3, #0
   31ed0:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   31ed4:	3001      	adds	r0, #1
   31ed6:	f7ff fb9b 	bl	31610 <ll_tx_pwr_get>
	if (err == -EINVAL) {
   31eda:	e660      	b.n	31b9e <hci_cmd_handle+0x6e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31edc:	2104      	movs	r1, #4
   31ede:	f012 fe69 	bl	44bb4 <bt_hci_cmd_complete_create>
   31ee2:	2104      	movs	r1, #4
   31ee4:	4604      	mov	r4, r0
   31ee6:	3008      	adds	r0, #8
   31ee8:	f015 f971 	bl	471ce <net_buf_simple_add>
	rp->status = 0x00;
   31eec:	2300      	movs	r3, #0
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
   31eee:	211b      	movs	r1, #27
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
   31ef0:	2203      	movs	r2, #3
	rp->status = 0x00;
   31ef2:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
   31ef4:	7041      	strb	r1, [r0, #1]
   31ef6:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
   31ef8:	70c2      	strb	r2, [r0, #3]
	if (err == -EINVAL) {
   31efa:	e650      	b.n	31b9e <hci_cmd_handle+0x6e>
   31efc:	68a2      	ldr	r2, [r4, #8]
	le_event_mask = sys_get_le64(cmd->events);
   31efe:	4bbb      	ldr	r3, [pc, #748]	; (321ec <hci_cmd_handle+0x6bc>)
   31f00:	6811      	ldr	r1, [r2, #0]
   31f02:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   31f04:	6019      	str	r1, [r3, #0]
   31f06:	e739      	b.n	31d7c <hci_cmd_handle+0x24c>
	struct hci_cp_le_conn_update *cmd = (void *)buf->data;
   31f08:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   31f0a:	8911      	ldrh	r1, [r2, #8]
   31f0c:	8853      	ldrh	r3, [r2, #2]
   31f0e:	8810      	ldrh	r0, [r2, #0]
   31f10:	9102      	str	r1, [sp, #8]
   31f12:	88d1      	ldrh	r1, [r2, #6]
   31f14:	9101      	str	r1, [sp, #4]
   31f16:	8891      	ldrh	r1, [r2, #4]
   31f18:	9100      	str	r1, [sp, #0]
   31f1a:	2200      	movs	r2, #0
   31f1c:	4611      	mov	r1, r2
   31f1e:	f003 fac9 	bl	354b4 <ll_conn_update>
   31f22:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   31f24:	8830      	ldrh	r0, [r6, #0]
   31f26:	e634      	b.n	31b92 <hci_cmd_handle+0x62>
	status = ll_adv_enable(cmd->enable);
   31f28:	68a3      	ldr	r3, [r4, #8]
   31f2a:	7818      	ldrb	r0, [r3, #0]
   31f2c:	f7f4 fca4 	bl	26878 <ll_adv_enable>
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   31f30:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   31f32:	2101      	movs	r1, #1
   31f34:	8830      	ldrh	r0, [r6, #0]
   31f36:	f012 fe3d 	bl	44bb4 <bt_hci_cmd_complete_create>
   31f3a:	2101      	movs	r1, #1
   31f3c:	4604      	mov	r4, r0
   31f3e:	3008      	adds	r0, #8
   31f40:	f015 f945 	bl	471ce <net_buf_simple_add>
	ccst->status = status;
   31f44:	7005      	strb	r5, [r0, #0]
	if (err == -EINVAL) {
   31f46:	e62a      	b.n	31b9e <hci_cmd_handle+0x6e>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
   31f48:	68a1      	ldr	r1, [r4, #8]
   31f4a:	f811 0b01 	ldrb.w	r0, [r1], #1
   31f4e:	f002 fbe7 	bl	34720 <ll_adv_scan_rsp_set>
   31f52:	e7ed      	b.n	31f30 <hci_cmd_handle+0x400>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
   31f54:	68a1      	ldr	r1, [r4, #8]
   31f56:	f811 0b01 	ldrb.w	r0, [r1], #1
   31f5a:	f002 fb8b 	bl	34674 <ll_adv_data_set>
   31f5e:	e7e7      	b.n	31f30 <hci_cmd_handle+0x400>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31f60:	2102      	movs	r1, #2
   31f62:	f012 fe27 	bl	44bb4 <bt_hci_cmd_complete_create>
   31f66:	2102      	movs	r1, #2
   31f68:	4604      	mov	r4, r0
   31f6a:	3008      	adds	r0, #8
   31f6c:	f015 f92f 	bl	471ce <net_buf_simple_add>
	rp->status = 0x00;
   31f70:	2300      	movs	r3, #0
   31f72:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
   31f74:	7043      	strb	r3, [r0, #1]
	if (err == -EINVAL) {
   31f76:	e612      	b.n	31b9e <hci_cmd_handle+0x6e>
	struct bt_hci_cp_le_set_adv_param *cmd = (void *)buf->data;
   31f78:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
   31f7a:	7ba5      	ldrb	r5, [r4, #14]
   31f7c:	79a3      	ldrb	r3, [r4, #6]
   31f7e:	7962      	ldrb	r2, [r4, #5]
   31f80:	7921      	ldrb	r1, [r4, #4]
   31f82:	8820      	ldrh	r0, [r4, #0]
   31f84:	9502      	str	r5, [sp, #8]
   31f86:	7b65      	ldrb	r5, [r4, #13]
   31f88:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
   31f8a:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
   31f8c:	9400      	str	r4, [sp, #0]
   31f8e:	f002 f9d1 	bl	34334 <ll_adv_params_set>
   31f92:	e7cd      	b.n	31f30 <hci_cmd_handle+0x400>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   31f94:	68a1      	ldr	r1, [r4, #8]
   31f96:	2001      	movs	r0, #1
   31f98:	f7ff fade 	bl	31558 <ll_addr_set>
   31f9c:	e7c8      	b.n	31f30 <hci_cmd_handle+0x400>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31f9e:	2109      	movs	r1, #9
   31fa0:	f012 fe08 	bl	44bb4 <bt_hci_cmd_complete_create>
   31fa4:	2109      	movs	r1, #9
   31fa6:	4604      	mov	r4, r0
   31fa8:	3008      	adds	r0, #8
   31faa:	f015 f910 	bl	471ce <net_buf_simple_add>
	rp->status = 0x00;
   31fae:	2500      	movs	r5, #0
   31fb0:	4606      	mov	r6, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   31fb2:	2208      	movs	r2, #8
   31fb4:	4629      	mov	r1, r5
	rp->status = 0x00;
   31fb6:	f800 5b01 	strb.w	r5, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   31fba:	f012 f9b8 	bl	4432e <memset>
	sys_put_le64(ll_feat_get(), rp->features);
   31fbe:	f000 fd0b 	bl	329d8 <ll_feat_get>
	dst[0] = val;
   31fc2:	462b      	mov	r3, r5
   31fc4:	f361 0307 	bfi	r3, r1, #0, #8
	dst[1] = val >> 8;
   31fc8:	f3c1 2207 	ubfx	r2, r1, #8, #8
	dst[0] = val;
   31fcc:	f362 230f 	bfi	r3, r2, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   31fd0:	0c09      	lsrs	r1, r1, #16
	dst[0] = val;
   31fd2:	f361 4317 	bfi	r3, r1, #16, #8
	dst[1] = val >> 8;
   31fd6:	0a09      	lsrs	r1, r1, #8
	dst[0] = val;
   31fd8:	f361 631f 	bfi	r3, r1, #24, #8
   31fdc:	f8c6 0001 	str.w	r0, [r6, #1]
   31fe0:	f8c6 3005 	str.w	r3, [r6, #5]
	if (err == -EINVAL) {
   31fe4:	e5db      	b.n	31b9e <hci_cmd_handle+0x6e>
	struct bt_hci_cp_le_set_phy *cmd = (void *)buf->data;
   31fe6:	68a2      	ldr	r2, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   31fe8:	7894      	ldrb	r4, [r2, #2]
	return ((uint16_t)src[1] << 8) | src[0];
   31fea:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
   31fec:	8817      	ldrh	r7, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
   31fee:	f8b2 5005 	ldrh.w	r5, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   31ff2:	07e3      	lsls	r3, r4, #31
		cmd->tx_phys |= mask_phys;
   31ff4:	bf48      	it	mi
   31ff6:	f041 0103 	orrmi.w	r1, r1, #3
		cmd->rx_phys |= mask_phys;
   31ffa:	7913      	ldrb	r3, [r2, #4]
		cmd->tx_phys |= mask_phys;
   31ffc:	bf48      	it	mi
   31ffe:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   32000:	07a4      	lsls	r4, r4, #30
		cmd->rx_phys |= mask_phys;
   32002:	bf44      	itt	mi
   32004:	f043 0303 	orrmi.w	r3, r3, #3
   32008:	7113      	strbmi	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
   3200a:	ea41 0203 	orr.w	r2, r1, r3
   3200e:	2a03      	cmp	r2, #3
   32010:	f200 8160 	bhi.w	322d4 <hci_cmd_handle+0x7a4>
	if (!(cmd->tx_phys & 0x07) ||
   32014:	074c      	lsls	r4, r1, #29
   32016:	f000 815b 	beq.w	322d0 <hci_cmd_handle+0x7a0>
   3201a:	075a      	lsls	r2, r3, #29
   3201c:	f000 8158 	beq.w	322d0 <hci_cmd_handle+0x7a0>
	if (phy_opts & 0x03) {
   32020:	f015 0203 	ands.w	r2, r5, #3
		phy_opts -= 1U;
   32024:	bf1c      	itt	ne
   32026:	f105 35ff 	addne.w	r5, r5, #4294967295	; 0xffffffff
		phy_opts &= 1;
   3202a:	f005 0201 	andne.w	r2, r5, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
   3202e:	4638      	mov	r0, r7
   32030:	f003 fc22 	bl	35878 <ll_phy_req_send>
   32034:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   32036:	8830      	ldrh	r0, [r6, #0]
   32038:	e5ab      	b.n	31b92 <hci_cmd_handle+0x62>
	struct bt_hci_cp_le_set_default_phy *cmd = (void *)buf->data;
   3203a:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   3203c:	781a      	ldrb	r2, [r3, #0]
   3203e:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
   32040:	bf44      	itt	mi
   32042:	2107      	movmi	r1, #7
   32044:	7059      	strbmi	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   32046:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
   32048:	bf4c      	ite	mi
   3204a:	2107      	movmi	r1, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   3204c:	7899      	ldrbpl	r1, [r3, #2]
   3204e:	7858      	ldrb	r0, [r3, #1]
		cmd->rx_phys = 0x07;
   32050:	bf48      	it	mi
   32052:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   32054:	f003 fc06 	bl	35864 <ll_phy_default_set>
   32058:	e76a      	b.n	31f30 <hci_cmd_handle+0x400>
	struct bt_hci_cp_le_conn_param_req_reply *cmd = (void *)buf->data;
   3205a:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   3205c:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   3205e:	8817      	ldrh	r7, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   32060:	8853      	ldrh	r3, [r2, #2]
   32062:	9102      	str	r1, [sp, #8]
   32064:	88d1      	ldrh	r1, [r2, #6]
   32066:	9101      	str	r1, [sp, #4]
   32068:	8891      	ldrh	r1, [r2, #4]
   3206a:	9100      	str	r1, [sp, #0]
   3206c:	2200      	movs	r2, #0
   3206e:	2102      	movs	r1, #2
   32070:	b2b8      	uxth	r0, r7
   32072:	f003 fa1f 	bl	354b4 <ll_conn_update>
   32076:	e699      	b.n	31dac <hci_cmd_handle+0x27c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   32078:	2109      	movs	r1, #9
   3207a:	f012 fd9b 	bl	44bb4 <bt_hci_cmd_complete_create>
   3207e:	2109      	movs	r1, #9
   32080:	4604      	mov	r4, r0
   32082:	3008      	adds	r0, #8
   32084:	f015 f8a3 	bl	471ce <net_buf_simple_add>
	rp->status = 0x00;
   32088:	4959      	ldr	r1, [pc, #356]	; (321f0 <hci_cmd_handle+0x6c0>)
   3208a:	4a5a      	ldr	r2, [pc, #360]	; (321f4 <hci_cmd_handle+0x6c4>)
   3208c:	6001      	str	r1, [r0, #0]
	dst[1] = val >> 8;
   3208e:	2300      	movs	r3, #0
   32090:	6042      	str	r2, [r0, #4]
   32092:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
   32094:	e583      	b.n	31b9e <hci_cmd_handle+0x6e>
	handle = sys_le16_to_cpu(cmd->handle);
   32096:	68a3      	ldr	r3, [r4, #8]
   32098:	881f      	ldrh	r7, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   3209a:	2200      	movs	r2, #0
   3209c:	2106      	movs	r1, #6
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   3209e:	b2b8      	uxth	r0, r7
   320a0:	f007 f96c 	bl	3937c <ll_start_enc_req_send>
   320a4:	e682      	b.n	31dac <hci_cmd_handle+0x27c>
	handle = sys_le16_to_cpu(cmd->handle);
   320a6:	68a2      	ldr	r2, [r4, #8]
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   320a8:	2100      	movs	r1, #0
	handle = sys_le16_to_cpu(cmd->handle);
   320aa:	f832 7b02 	ldrh.w	r7, [r2], #2
   320ae:	e7f6      	b.n	3209e <hci_cmd_handle+0x56e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   320b0:	2109      	movs	r1, #9
   320b2:	f012 fd7f 	bl	44bb4 <bt_hci_cmd_complete_create>
   320b6:	2109      	movs	r1, #9
   320b8:	4604      	mov	r4, r0
   320ba:	3008      	adds	r0, #8
   320bc:	f015 f887 	bl	471ce <net_buf_simple_add>
	rp->status = 0x00;
   320c0:	2300      	movs	r3, #0
   320c2:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
   320c6:	2108      	movs	r1, #8
   320c8:	f007 fcea 	bl	39aa0 <lll_csrand_get>
	if (err == -EINVAL) {
   320cc:	e567      	b.n	31b9e <hci_cmd_handle+0x6e>
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
   320ce:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   320d0:	aa08      	add	r2, sp, #32
   320d2:	2300      	movs	r3, #0
   320d4:	f100 0110 	add.w	r1, r0, #16
   320d8:	f009 fa86 	bl	3b5e8 <ecb_encrypt>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   320dc:	8830      	ldrh	r0, [r6, #0]
   320de:	2111      	movs	r1, #17
   320e0:	f012 fd68 	bl	44bb4 <bt_hci_cmd_complete_create>
   320e4:	2111      	movs	r1, #17
   320e6:	4604      	mov	r4, r0
   320e8:	3008      	adds	r0, #8
   320ea:	f015 f870 	bl	471ce <net_buf_simple_add>
	rp->status = 0x00;
   320ee:	2300      	movs	r3, #0
   320f0:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
   320f4:	2210      	movs	r2, #16
   320f6:	a908      	add	r1, sp, #32
   320f8:	f012 f90e 	bl	44318 <memcpy>
	if (err == -EINVAL) {
   320fc:	e54f      	b.n	31b9e <hci_cmd_handle+0x6e>
	handle = sys_le16_to_cpu(cmd->handle);
   320fe:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
   32100:	8818      	ldrh	r0, [r3, #0]
   32102:	f003 facb 	bl	3569c <ll_feature_req_send>
   32106:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   32108:	8830      	ldrh	r0, [r6, #0]
   3210a:	e542      	b.n	31b92 <hci_cmd_handle+0x62>
	handle = sys_le16_to_cpu(cmd->handle);
   3210c:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   3210e:	2108      	movs	r1, #8
	handle = sys_le16_to_cpu(cmd->handle);
   32110:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   32112:	f012 fd4f 	bl	44bb4 <bt_hci_cmd_complete_create>
   32116:	2108      	movs	r1, #8
   32118:	4604      	mov	r4, r0
   3211a:	4408      	add	r0, r1
   3211c:	f015 f857 	bl	471ce <net_buf_simple_add>
   32120:	4605      	mov	r5, r0
	status = ll_chm_get(handle, rp->ch_map);
   32122:	1ce9      	adds	r1, r5, #3
	handle = sys_le16_to_cpu(cmd->handle);
   32124:	b2b0      	uxth	r0, r6
	status = ll_chm_get(handle, rp->ch_map);
   32126:	f003 fa61 	bl	355ec <ll_chm_get>
	rp->handle = sys_le16_to_cpu(handle);
   3212a:	f8a5 6001 	strh.w	r6, [r5, #1]
	rp->status = status;
   3212e:	7028      	strb	r0, [r5, #0]
	if (err == -EINVAL) {
   32130:	e535      	b.n	31b9e <hci_cmd_handle+0x6e>
	struct bt_hci_cp_le_write_default_data_len *cmd = (void *)buf->data;
   32132:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
   32134:	8859      	ldrh	r1, [r3, #2]
   32136:	8818      	ldrh	r0, [r3, #0]
   32138:	f003 fb60 	bl	357fc <ll_length_default_set>
   3213c:	e6f8      	b.n	31f30 <hci_cmd_handle+0x400>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   3213e:	2105      	movs	r1, #5
   32140:	f012 fd38 	bl	44bb4 <bt_hci_cmd_complete_create>
   32144:	2105      	movs	r1, #5
   32146:	4604      	mov	r4, r0
   32148:	3008      	adds	r0, #8
   3214a:	f015 f840 	bl	471ce <net_buf_simple_add>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   3214e:	a908      	add	r1, sp, #32
   32150:	4605      	mov	r5, r0
   32152:	f10d 001a 	add.w	r0, sp, #26
   32156:	f003 fb45 	bl	357e4 <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   3215a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   3215e:	f8a5 3001 	strh.w	r3, [r5, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   32162:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   32166:	f8a5 2003 	strh.w	r2, [r5, #3]
	rp->status = 0x00;
   3216a:	2300      	movs	r3, #0
   3216c:	702b      	strb	r3, [r5, #0]
	if (err == -EINVAL) {
   3216e:	e516      	b.n	31b9e <hci_cmd_handle+0x6e>
	struct bt_hci_cp_le_set_data_len *cmd = (void *)buf->data;
   32170:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   32172:	881f      	ldrh	r7, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
   32174:	889a      	ldrh	r2, [r3, #4]
   32176:	8859      	ldrh	r1, [r3, #2]
   32178:	b2b8      	uxth	r0, r7
   3217a:	f003 fadb 	bl	35734 <ll_length_req_send>
   3217e:	e615      	b.n	31dac <hci_cmd_handle+0x27c>
	struct bt_hci_cp_le_conn_param_req_neg_reply *cmd = (void *)buf->data;
   32180:	68a2      	ldr	r2, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   32182:	8817      	ldrh	r7, [r2, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   32184:	7892      	ldrb	r2, [r2, #2]
   32186:	2300      	movs	r3, #0
   32188:	e9cd 3301 	strd	r3, r3, [sp, #4]
   3218c:	9300      	str	r3, [sp, #0]
   3218e:	2102      	movs	r1, #2
   32190:	b2b8      	uxth	r0, r7
   32192:	f003 f98f 	bl	354b4 <ll_conn_update>
   32196:	e609      	b.n	31dac <hci_cmd_handle+0x27c>
	handle = sys_le16_to_cpu(cmd->handle);
   32198:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   3219a:	2105      	movs	r1, #5
	handle = sys_le16_to_cpu(cmd->handle);
   3219c:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   3219e:	f012 fd09 	bl	44bb4 <bt_hci_cmd_complete_create>
   321a2:	2105      	movs	r1, #5
   321a4:	4604      	mov	r4, r0
   321a6:	3008      	adds	r0, #8
   321a8:	f015 f811 	bl	471ce <net_buf_simple_add>
   321ac:	4605      	mov	r5, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   321ae:	1d2a      	adds	r2, r5, #4
	handle = sys_le16_to_cpu(cmd->handle);
   321b0:	b2b0      	uxth	r0, r6
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   321b2:	1ce9      	adds	r1, r5, #3
   321b4:	f003 fb38 	bl	35828 <ll_phy_get>
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
   321b8:	78eb      	ldrb	r3, [r5, #3]
   321ba:	792a      	ldrb	r2, [r5, #4]
	rp->status = status;
   321bc:	7028      	strb	r0, [r5, #0]
   321be:	2b00      	cmp	r3, #0
   321c0:	fa93 f3a3 	rbit	r3, r3
   321c4:	fab3 f383 	clz	r3, r3
   321c8:	bf08      	it	eq
   321ca:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   321ce:	3301      	adds	r3, #1
	rp->tx_phy = find_lsb_set(rp->tx_phy);
   321d0:	70eb      	strb	r3, [r5, #3]
   321d2:	2a00      	cmp	r2, #0
   321d4:	fa92 f3a2 	rbit	r3, r2
   321d8:	fab3 f383 	clz	r3, r3
   321dc:	bf08      	it	eq
   321de:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   321e2:	3301      	adds	r3, #1
	rp->handle = sys_cpu_to_le16(handle);
   321e4:	f8a5 6001 	strh.w	r6, [r5, #1]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
   321e8:	712b      	strb	r3, [r5, #4]
	if (err == -EINVAL) {
   321ea:	e4d8      	b.n	31b9e <hci_cmd_handle+0x6e>
   321ec:	20000158 	.word	0x20000158
   321f0:	30cc8f00 	.word	0x30cc8f00
   321f4:	0001c0ec 	.word	0x0001c0ec
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   321f8:	2109      	movs	r1, #9
   321fa:	f012 fcdb 	bl	44bb4 <bt_hci_cmd_complete_create>
   321fe:	2109      	movs	r1, #9
   32200:	4604      	mov	r4, r0
   32202:	3008      	adds	r0, #8
   32204:	f014 ffe3 	bl	471ce <net_buf_simple_add>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   32208:	ab08      	add	r3, sp, #32
   3220a:	4605      	mov	r5, r0
   3220c:	f10d 021a 	add.w	r2, sp, #26
   32210:	a906      	add	r1, sp, #24
   32212:	f10d 0016 	add.w	r0, sp, #22
   32216:	f003 fafb 	bl	35810 <ll_length_max_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   3221a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   3221e:	f8a5 3001 	strh.w	r3, [r5, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   32222:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   32226:	f8a5 3003 	strh.w	r3, [r5, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
   3222a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   3222e:	f8a5 3005 	strh.w	r3, [r5, #5]
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   32232:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   32236:	f8a5 2007 	strh.w	r2, [r5, #7]
	rp->status = 0x00;
   3223a:	2300      	movs	r3, #0
   3223c:	702b      	strb	r3, [r5, #0]
	if (err == -EINVAL) {
   3223e:	e4ae      	b.n	31b9e <hci_cmd_handle+0x6e>
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
   32240:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   32242:	7899      	ldrb	r1, [r3, #2]
   32244:	8818      	ldrh	r0, [r3, #0]
   32246:	f003 f9f1 	bl	3562c <ll_terminate_ind_send>
   3224a:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   3224c:	8830      	ldrh	r0, [r6, #0]
   3224e:	e4a0      	b.n	31b92 <hci_cmd_handle+0x62>
	handle = sys_le16_to_cpu(cmd->handle);
   32250:	68a3      	ldr	r3, [r4, #8]
   32252:	881f      	ldrh	r7, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
   32254:	a908      	add	r1, sp, #32
   32256:	b2b8      	uxth	r0, r7
   32258:	f003 fb60 	bl	3591c <ll_apto_get>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   3225c:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
   3225e:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   32260:	8830      	ldrh	r0, [r6, #0]
   32262:	f012 fca7 	bl	44bb4 <bt_hci_cmd_complete_create>
   32266:	2105      	movs	r1, #5
   32268:	4604      	mov	r4, r0
   3226a:	3008      	adds	r0, #8
   3226c:	f014 ffaf 	bl	471ce <net_buf_simple_add>
	rp->status = status;
   32270:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   32272:	f8a0 7001 	strh.w	r7, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   32276:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   3227a:	f8a0 3003 	strh.w	r3, [r0, #3]
	if (err == -EINVAL) {
   3227e:	e48e      	b.n	31b9e <hci_cmd_handle+0x6e>
	event_mask = DEFAULT_EVENT_MASK;
   32280:	4b15      	ldr	r3, [pc, #84]	; (322d8 <hci_cmd_handle+0x7a8>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   32282:	4a16      	ldr	r2, [pc, #88]	; (322dc <hci_cmd_handle+0x7ac>)
	event_mask = DEFAULT_EVENT_MASK;
   32284:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32288:	f641 71ff 	movw	r1, #8191	; 0x1fff
   3228c:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   32290:	4b13      	ldr	r3, [pc, #76]	; (322e0 <hci_cmd_handle+0x7b0>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   32292:	2000      	movs	r0, #0
   32294:	2100      	movs	r1, #0
   32296:	e9c2 0100 	strd	r0, r1, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   3229a:	201f      	movs	r0, #31
   3229c:	2100      	movs	r1, #0
   3229e:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
   322a2:	f001 fc8b 	bl	33bbc <ll_reset>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   322a6:	8830      	ldrh	r0, [r6, #0]
   322a8:	2101      	movs	r1, #1
   322aa:	f012 fc83 	bl	44bb4 <bt_hci_cmd_complete_create>
   322ae:	2101      	movs	r1, #1
   322b0:	4604      	mov	r4, r0
   322b2:	3008      	adds	r0, #8
   322b4:	f014 ff8b 	bl	471ce <net_buf_simple_add>
	ccst->status = status;
   322b8:	2300      	movs	r3, #0
	conn_count = 0U;
   322ba:	4a0a      	ldr	r2, [pc, #40]	; (322e4 <hci_cmd_handle+0x7b4>)
	ccst->status = status;
   322bc:	7003      	strb	r3, [r0, #0]
	conn_count = 0U;
   322be:	6013      	str	r3, [r2, #0]
	hci_recv_fifo_reset();
   322c0:	f7ff fb40 	bl	31944 <hci_recv_fifo_reset>
	if (err == -EINVAL) {
   322c4:	e46b      	b.n	31b9e <hci_cmd_handle+0x6e>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   322c6:	68a2      	ldr	r2, [r4, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   322c8:	4b04      	ldr	r3, [pc, #16]	; (322dc <hci_cmd_handle+0x7ac>)
   322ca:	e619      	b.n	31f00 <hci_cmd_handle+0x3d0>
	return evt;
   322cc:	9c07      	ldr	r4, [sp, #28]
   322ce:	e466      	b.n	31b9e <hci_cmd_handle+0x6e>
	return bt_hci_cmd_status_create(_opcode, status);
   322d0:	2112      	movs	r1, #18
   322d2:	e45e      	b.n	31b92 <hci_cmd_handle+0x62>
   322d4:	2111      	movs	r1, #17
   322d6:	e45c      	b.n	31b92 <hci_cmd_handle+0x62>
   322d8:	20000160 	.word	0x20000160
   322dc:	20001610 	.word	0x20001610
   322e0:	20000158 	.word	0x20000158
   322e4:	20002068 	.word	0x20002068

000322e8 <hci_acl_handle>:
{
   322e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
   322ec:	2300      	movs	r3, #0
   322ee:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   322f0:	8983      	ldrh	r3, [r0, #12]
   322f2:	2b03      	cmp	r3, #3
   322f4:	d92e      	bls.n	32354 <hci_acl_handle+0x6c>
	return net_buf_simple_pull_mem(&buf->b, len);
   322f6:	4605      	mov	r5, r0
   322f8:	4688      	mov	r8, r1
   322fa:	3008      	adds	r0, #8
   322fc:	2104      	movs	r1, #4
   322fe:	f014 ff8d 	bl	4721c <net_buf_simple_pull_mem>
	if (buf->len < len) {
   32302:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
   32304:	8847      	ldrh	r7, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   32306:	f8b0 9000 	ldrh.w	r9, [r0]
	if (buf->len < len) {
   3230a:	42bb      	cmp	r3, r7
   3230c:	d322      	bcc.n	32354 <hci_acl_handle+0x6c>
	if (len > LL_LENGTH_OCTETS_TX_MAX) {
   3230e:	2f1b      	cmp	r7, #27
   32310:	d820      	bhi.n	32354 <hci_acl_handle+0x6c>
	node_tx = ll_tx_mem_acquire();
   32312:	f003 f877 	bl	35404 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   32316:	ea4f 3619 	mov.w	r6, r9, lsr #12
   3231a:	4633      	mov	r3, r6
	if (!node_tx) {
   3231c:	4604      	mov	r4, r0
   3231e:	b1f8      	cbz	r0, 32360 <hci_acl_handle+0x78>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
   32320:	089b      	lsrs	r3, r3, #2
   32322:	d117      	bne.n	32354 <hci_acl_handle+0x6c>
	switch (bt_acl_flags_pb(flags)) {
   32324:	b1d6      	cbz	r6, 3235c <hci_acl_handle+0x74>
   32326:	2e01      	cmp	r6, #1
   32328:	d114      	bne.n	32354 <hci_acl_handle+0x6c>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   3232a:	7923      	ldrb	r3, [r4, #4]
	pdu_data->len = len;
   3232c:	7167      	strb	r7, [r4, #5]
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   3232e:	f366 0301 	bfi	r3, r6, #0, #2
   32332:	7123      	strb	r3, [r4, #4]
	memcpy(&pdu_data->lldata[0], buf->data, len);
   32334:	68a9      	ldr	r1, [r5, #8]
   32336:	463a      	mov	r2, r7
   32338:	1de0      	adds	r0, r4, #7
   3233a:	f011 ffed 	bl	44318 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   3233e:	4621      	mov	r1, r4
   32340:	f3c9 000b 	ubfx	r0, r9, #0, #12
   32344:	f003 f86a 	bl	3541c <ll_tx_mem_enqueue>
   32348:	b908      	cbnz	r0, 3234e <hci_acl_handle+0x66>
}
   3234a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		ll_tx_mem_release(node_tx);
   3234e:	4620      	mov	r0, r4
   32350:	f003 f85e 	bl	35410 <ll_tx_mem_release>
	switch (bt_acl_flags_pb(flags)) {
   32354:	f06f 0015 	mvn.w	r0, #21
}
   32358:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	switch (bt_acl_flags_pb(flags)) {
   3235c:	2602      	movs	r6, #2
   3235e:	e7e4      	b.n	3232a <hci_acl_handle+0x42>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   32360:	4b0f      	ldr	r3, [pc, #60]	; (323a0 <hci_acl_handle+0xb8>)
   32362:	681b      	ldr	r3, [r3, #0]
   32364:	019b      	lsls	r3, r3, #6
   32366:	d517      	bpl.n	32398 <hci_acl_handle+0xb0>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   32368:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3236c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   32370:	2001      	movs	r0, #1
   32372:	f7f8 fd93 	bl	2ae9c <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   32376:	2102      	movs	r1, #2
   32378:	f8c8 0000 	str.w	r0, [r8]
   3237c:	3008      	adds	r0, #8
   3237e:	f014 ff26 	bl	471ce <net_buf_simple_add>
	hdr->evt = evt;
   32382:	f44f 738d 	mov.w	r3, #282	; 0x11a
   32386:	8003      	strh	r3, [r0, #0]
   32388:	f8d8 0000 	ldr.w	r0, [r8]
   3238c:	2101      	movs	r1, #1
   3238e:	3008      	adds	r0, #8
   32390:	f014 ff1d 	bl	471ce <net_buf_simple_add>
	ep->link_type = link_type;
   32394:	2301      	movs	r3, #1
   32396:	7003      	strb	r3, [r0, #0]
		return -ENOBUFS;
   32398:	f06f 0068 	mvn.w	r0, #104	; 0x68
   3239c:	e7d5      	b.n	3234a <hci_acl_handle+0x62>
   3239e:	bf00      	nop
   323a0:	20000160 	.word	0x20000160

000323a4 <hci_disconn_complete_encode>:
{
   323a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   323a6:	4b0e      	ldr	r3, [pc, #56]	; (323e0 <hci_disconn_complete_encode+0x3c>)
   323a8:	681b      	ldr	r3, [r3, #0]
   323aa:	06db      	lsls	r3, r3, #27
   323ac:	d400      	bmi.n	323b0 <hci_disconn_complete_encode+0xc>
}
   323ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   323b0:	f102 0408 	add.w	r4, r2, #8
   323b4:	4606      	mov	r6, r0
   323b6:	460d      	mov	r5, r1
   323b8:	4620      	mov	r0, r4
   323ba:	2102      	movs	r1, #2
   323bc:	f014 ff07 	bl	471ce <net_buf_simple_add>
   323c0:	4603      	mov	r3, r0
	hdr->evt = evt;
   323c2:	f240 4205 	movw	r2, #1029	; 0x405
   323c6:	801a      	strh	r2, [r3, #0]
   323c8:	4620      	mov	r0, r4
   323ca:	2104      	movs	r1, #4
   323cc:	f014 feff 	bl	471ce <net_buf_simple_add>
	ep->status = 0x00;
   323d0:	2700      	movs	r7, #0
   323d2:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   323d4:	f8a0 5001 	strh.w	r5, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
   323d8:	7832      	ldrb	r2, [r6, #0]
   323da:	70c2      	strb	r2, [r0, #3]
}
   323dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   323de:	bf00      	nop
   323e0:	20000160 	.word	0x20000160

000323e4 <hci_disconn_complete_process>:
	conn_count--;
   323e4:	4a02      	ldr	r2, [pc, #8]	; (323f0 <hci_disconn_complete_process+0xc>)
   323e6:	6813      	ldr	r3, [r2, #0]
   323e8:	3b01      	subs	r3, #1
   323ea:	6013      	str	r3, [r2, #0]
}
   323ec:	4770      	bx	lr
   323ee:	bf00      	nop
   323f0:	20002068 	.word	0x20002068

000323f4 <hci_acl_encode>:
	}
}

#if defined(CONFIG_BT_CONN)
void hci_acl_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   323f4:	b570      	push	{r4, r5, r6, lr}
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   323f6:	7f03      	ldrb	r3, [r0, #28]
	handle = node_rx->hdr.handle;
   323f8:	88c6      	ldrh	r6, [r0, #6]
	switch (pdu_data->ll_id) {
   323fa:	f003 0303 	and.w	r3, r3, #3
   323fe:	3b01      	subs	r3, #1
   32400:	2b01      	cmp	r3, #1
   32402:	d90d      	bls.n	32420 <hci_acl_encode+0x2c>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
   32404:	4a15      	ldr	r2, [pc, #84]	; (3245c <hci_acl_encode+0x68>)
   32406:	4916      	ldr	r1, [pc, #88]	; (32460 <hci_acl_encode+0x6c>)
   32408:	4816      	ldr	r0, [pc, #88]	; (32464 <hci_acl_encode+0x70>)
   3240a:	f242 1344 	movw	r3, #8516	; 0x2144
   3240e:	f010 f8db 	bl	425c8 <assert_print>
   32412:	4040      	eors	r0, r0
   32414:	f380 8811 	msr	BASEPRI, r0
   32418:	f04f 0003 	mov.w	r0, #3
   3241c:	df02      	svc	2
		break;
	}
}
   3241e:	bd70      	pop	{r4, r5, r6, pc}
   32420:	4604      	mov	r4, r0
   32422:	f101 0508 	add.w	r5, r1, #8
   32426:	4628      	mov	r0, r5
   32428:	2104      	movs	r1, #4
   3242a:	f014 fed0 	bl	471ce <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   3242e:	7f23      	ldrb	r3, [r4, #28]
   32430:	f003 0303 	and.w	r3, r3, #3
   32434:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   32436:	bf0c      	ite	eq
   32438:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   3243c:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
   32440:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   32442:	7f63      	ldrb	r3, [r4, #29]
   32444:	8043      	strh	r3, [r0, #2]
   32446:	7f61      	ldrb	r1, [r4, #29]
   32448:	4628      	mov	r0, r5
   3244a:	f014 fec0 	bl	471ce <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
   3244e:	7f62      	ldrb	r2, [r4, #29]
   32450:	f104 011f 	add.w	r1, r4, #31
}
   32454:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
   32458:	f011 bf5e 	b.w	44318 <memcpy>
   3245c:	00049860 	.word	0x00049860
   32460:	00049810 	.word	0x00049810
   32464:	000497b0 	.word	0x000497b0

00032468 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   32468:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   3246a:	f890 c004 	ldrb.w	ip, [r0, #4]
   3246e:	88c6      	ldrh	r6, [r0, #6]
   32470:	f1bc 0f03 	cmp.w	ip, #3
{
   32474:	b085      	sub	sp, #20
   32476:	4604      	mov	r4, r0
   32478:	460d      	mov	r5, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
   3247a:	f100 071c 	add.w	r7, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   3247e:	d00b      	beq.n	32498 <hci_evt_encode+0x30>
	switch (node_rx->hdr.type) {
   32480:	f1ac 0c17 	sub.w	ip, ip, #23
   32484:	f1bc 0f06 	cmp.w	ip, #6
   32488:	f200 8232 	bhi.w	328f0 <hci_evt_encode+0x488>
   3248c:	e8df f00c 	tbb	[pc, ip]
   32490:	1e574f27 	.word	0x1e574f27
   32494:	9684      	.short	0x9684
   32496:	b4          	.byte	0xb4
   32497:	00          	.byte	0x00
	switch (pdu_data->llctrl.opcode) {
   32498:	7fc3      	ldrb	r3, [r0, #31]
   3249a:	3b03      	subs	r3, #3
   3249c:	2b12      	cmp	r3, #18
   3249e:	f200 80e2 	bhi.w	32666 <hci_evt_encode+0x1fe>
   324a2:	e8df f013 	tbh	[pc, r3, lsl #1]
   324a6:	0185      	.short	0x0185
   324a8:	00e000e0 	.word	0x00e000e0
   324ac:	012401b3 	.word	0x012401b3
   324b0:	013200e0 	.word	0x013200e0
   324b4:	00e000e0 	.word	0x00e000e0
   324b8:	013700e0 	.word	0x013700e0
   324bc:	015200e0 	.word	0x015200e0
   324c0:	001a00e0 	.word	0x001a00e0
   324c4:	00e000e0 	.word	0x00e000e0
   324c8:	00ee00ee 	.word	0x00ee00ee
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
   324cc:	4bb2      	ldr	r3, [pc, #712]	; (32798 <hci_evt_encode+0x330>)
   324ce:	685b      	ldr	r3, [r3, #4]
   324d0:	0418      	lsls	r0, r3, #16
   324d2:	f04f 0400 	mov.w	r4, #0
   324d6:	f100 80fa 	bmi.w	326ce <hci_evt_encode+0x266>
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
   324da:	b005      	add	sp, #20
   324dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   324de:	07ff      	lsls	r7, r7, #31
   324e0:	f100 81ad 	bmi.w	3283e <hci_evt_encode+0x3d6>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   324e4:	4bac      	ldr	r3, [pc, #688]	; (32798 <hci_evt_encode+0x330>)
	status = cc->status;
   324e6:	7f27      	ldrb	r7, [r4, #28]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   324e8:	685b      	ldr	r3, [r3, #4]
   324ea:	0098      	lsls	r0, r3, #2
   324ec:	d5f5      	bpl.n	324da <hci_evt_encode+0x72>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   324ee:	4bab      	ldr	r3, [pc, #684]	; (3279c <hci_evt_encode+0x334>)
   324f0:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   324f2:	07d9      	lsls	r1, r3, #31
   324f4:	d5f1      	bpl.n	324da <hci_evt_encode+0x72>
   324f6:	3508      	adds	r5, #8
	if (!status) {
   324f8:	2f00      	cmp	r7, #0
   324fa:	f000 81ae 	beq.w	3285a <hci_evt_encode+0x3f2>
   324fe:	2102      	movs	r1, #2
   32500:	4628      	mov	r0, r5
   32502:	f014 fe64 	bl	471ce <net_buf_simple_add>
	hdr->evt = evt;
   32506:	f241 333e 	movw	r3, #4926	; 0x133e
   3250a:	8003      	strh	r3, [r0, #0]
   3250c:	2101      	movs	r1, #1
   3250e:	4628      	mov	r0, r5
   32510:	f014 fe5d 	bl	471ce <net_buf_simple_add>
	me->subevent = subevt;
   32514:	2301      	movs	r3, #1
   32516:	7003      	strb	r3, [r0, #0]
   32518:	2112      	movs	r1, #18
   3251a:	4628      	mov	r0, r5
   3251c:	f014 fe57 	bl	471ce <net_buf_simple_add>
   32520:	4604      	mov	r4, r0
		(void)memset(lecc, 0x00, sizeof(*lecc));
   32522:	2212      	movs	r2, #18
   32524:	2100      	movs	r1, #0
   32526:	f011 ff02 	bl	4432e <memset>
		lecc->status = status;
   3252a:	7027      	strb	r7, [r4, #0]
		return;
   3252c:	e7d5      	b.n	324da <hci_evt_encode+0x72>
		hci_disconn_complete_encode(pdu_data, handle, buf);
   3252e:	460a      	mov	r2, r1
   32530:	4638      	mov	r0, r7
   32532:	4631      	mov	r1, r6
}
   32534:	b005      	add	sp, #20
   32536:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		hci_disconn_complete_encode(pdu_data, handle, buf);
   3253a:	f7ff bf33 	b.w	323a4 <hci_disconn_complete_encode>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   3253e:	4b96      	ldr	r3, [pc, #600]	; (32798 <hci_evt_encode+0x330>)
   32540:	685b      	ldr	r3, [r3, #4]
   32542:	009a      	lsls	r2, r3, #2
   32544:	d5c9      	bpl.n	324da <hci_evt_encode+0x72>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   32546:	4b95      	ldr	r3, [pc, #596]	; (3279c <hci_evt_encode+0x334>)
   32548:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   3254a:	075b      	lsls	r3, r3, #29
   3254c:	d5c5      	bpl.n	324da <hci_evt_encode+0x72>
   3254e:	3508      	adds	r5, #8
   32550:	2102      	movs	r1, #2
   32552:	4628      	mov	r0, r5
   32554:	f014 fe3b 	bl	471ce <net_buf_simple_add>
	hdr->evt = evt;
   32558:	f640 233e 	movw	r3, #2622	; 0xa3e
   3255c:	8003      	strh	r3, [r0, #0]
   3255e:	2101      	movs	r1, #1
   32560:	4628      	mov	r0, r5
   32562:	f014 fe34 	bl	471ce <net_buf_simple_add>
   32566:	4603      	mov	r3, r0
	me->subevent = subevt;
   32568:	2203      	movs	r2, #3
   3256a:	4628      	mov	r0, r5
   3256c:	701a      	strb	r2, [r3, #0]
   3256e:	2109      	movs	r1, #9
   32570:	f014 fe2d 	bl	471ce <net_buf_simple_add>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   32574:	07ff      	lsls	r7, r7, #31
   32576:	4605      	mov	r5, r0
   32578:	f100 81ac 	bmi.w	328d4 <hci_evt_encode+0x46c>
	sep->status = cu->status;
   3257c:	7f23      	ldrb	r3, [r4, #28]
   3257e:	702b      	strb	r3, [r5, #0]
	sep->handle = sys_cpu_to_le16(handle);
   32580:	f8a5 6001 	strh.w	r6, [r5, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
   32584:	8be3      	ldrh	r3, [r4, #30]
   32586:	f8a5 3003 	strh.w	r3, [r5, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   3258a:	8c23      	ldrh	r3, [r4, #32]
   3258c:	f8a5 3005 	strh.w	r3, [r5, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   32590:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   32592:	f8a5 3007 	strh.w	r3, [r5, #7]
   32596:	e7a0      	b.n	324da <hci_evt_encode+0x72>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
   32598:	4b81      	ldr	r3, [pc, #516]	; (327a0 <hci_evt_encode+0x338>)
   3259a:	681b      	ldr	r3, [r3, #0]
   3259c:	0219      	lsls	r1, r3, #8
   3259e:	d59c      	bpl.n	324da <hci_evt_encode+0x72>
   325a0:	3508      	adds	r5, #8
   325a2:	2102      	movs	r1, #2
   325a4:	4628      	mov	r0, r5
   325a6:	f014 fe12 	bl	471ce <net_buf_simple_add>
	hdr->evt = evt;
   325aa:	f240 2357 	movw	r3, #599	; 0x257
   325ae:	8003      	strh	r3, [r0, #0]
   325b0:	2102      	movs	r1, #2
   325b2:	4628      	mov	r0, r5
   325b4:	f014 fe0b 	bl	471ce <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
   325b8:	8006      	strh	r6, [r0, #0]
   325ba:	e78e      	b.n	324da <hci_evt_encode+0x72>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   325bc:	4b76      	ldr	r3, [pc, #472]	; (32798 <hci_evt_encode+0x330>)
   325be:	685b      	ldr	r3, [r3, #4]
   325c0:	009a      	lsls	r2, r3, #2
   325c2:	d58a      	bpl.n	324da <hci_evt_encode+0x72>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
   325c4:	4b75      	ldr	r3, [pc, #468]	; (3279c <hci_evt_encode+0x334>)
   325c6:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   325c8:	031b      	lsls	r3, r3, #12
   325ca:	d586      	bpl.n	324da <hci_evt_encode+0x72>
   325cc:	3508      	adds	r5, #8
   325ce:	2102      	movs	r1, #2
   325d0:	4628      	mov	r0, r5
   325d2:	f014 fdfc 	bl	471ce <net_buf_simple_add>
	hdr->evt = evt;
   325d6:	f240 433e 	movw	r3, #1086	; 0x43e
   325da:	8003      	strh	r3, [r0, #0]
   325dc:	2101      	movs	r1, #1
   325de:	4628      	mov	r0, r5
   325e0:	f014 fdf5 	bl	471ce <net_buf_simple_add>
	me->subevent = subevt;
   325e4:	2314      	movs	r3, #20
   325e6:	7003      	strb	r3, [r0, #0]
   325e8:	2103      	movs	r1, #3
   325ea:	4628      	mov	r0, r5
   325ec:	f014 fdef 	bl	471ce <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   325f0:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = cs->csa;
   325f2:	7f23      	ldrb	r3, [r4, #28]
   325f4:	7083      	strb	r3, [r0, #2]
   325f6:	e770      	b.n	324da <hci_evt_encode+0x72>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   325f8:	4b67      	ldr	r3, [pc, #412]	; (32798 <hci_evt_encode+0x330>)
   325fa:	685b      	ldr	r3, [r3, #4]
   325fc:	009f      	lsls	r7, r3, #2
   325fe:	f57f af6c 	bpl.w	324da <hci_evt_encode+0x72>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
   32602:	4b66      	ldr	r3, [pc, #408]	; (3279c <hci_evt_encode+0x334>)
   32604:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   32606:	0518      	lsls	r0, r3, #20
   32608:	f57f af67 	bpl.w	324da <hci_evt_encode+0x72>
   3260c:	3508      	adds	r5, #8
   3260e:	2102      	movs	r1, #2
   32610:	4628      	mov	r0, r5
   32612:	f014 fddc 	bl	471ce <net_buf_simple_add>
	hdr->evt = evt;
   32616:	f240 633e 	movw	r3, #1598	; 0x63e
   3261a:	8003      	strh	r3, [r0, #0]
   3261c:	2101      	movs	r1, #1
   3261e:	4628      	mov	r0, r5
   32620:	f014 fdd5 	bl	471ce <net_buf_simple_add>
	me->subevent = subevt;
   32624:	230c      	movs	r3, #12
   32626:	7003      	strb	r3, [r0, #0]
   32628:	2105      	movs	r1, #5
   3262a:	4628      	mov	r0, r5
   3262c:	f014 fdcf 	bl	471ce <net_buf_simple_add>
	sep->status = pu->status;
   32630:	7f23      	ldrb	r3, [r4, #28]
   32632:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   32634:	f8a0 6001 	strh.w	r6, [r0, #1]
   32638:	7f62      	ldrb	r2, [r4, #29]
   3263a:	2a00      	cmp	r2, #0
   3263c:	fa92 f3a2 	rbit	r3, r2
   32640:	fab3 f383 	clz	r3, r3
   32644:	bf08      	it	eq
   32646:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   3264a:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
   3264c:	70c3      	strb	r3, [r0, #3]
   3264e:	7fa2      	ldrb	r2, [r4, #30]
   32650:	fa92 f3a2 	rbit	r3, r2
   32654:	2a00      	cmp	r2, #0
   32656:	fab3 f383 	clz	r3, r3
   3265a:	bf08      	it	eq
   3265c:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   32660:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
   32662:	7103      	strb	r3, [r0, #4]
   32664:	e739      	b.n	324da <hci_evt_encode+0x72>
		LL_ASSERT(0);
   32666:	4a4f      	ldr	r2, [pc, #316]	; (327a4 <hci_evt_encode+0x33c>)
   32668:	494f      	ldr	r1, [pc, #316]	; (327a8 <hci_evt_encode+0x340>)
   3266a:	4850      	ldr	r0, [pc, #320]	; (327ac <hci_evt_encode+0x344>)
   3266c:	f242 1318 	movw	r3, #8472	; 0x2118
   32670:	f00f ffaa 	bl	425c8 <assert_print>
   32674:	4040      	eors	r0, r0
   32676:	f380 8811 	msr	BASEPRI, r0
   3267a:	f04f 0003 	mov.w	r0, #3
   3267e:	df02      	svc	2
}
   32680:	e72b      	b.n	324da <hci_evt_encode+0x72>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   32682:	4b45      	ldr	r3, [pc, #276]	; (32798 <hci_evt_encode+0x330>)
   32684:	685b      	ldr	r3, [r3, #4]
   32686:	009a      	lsls	r2, r3, #2
   32688:	f57f af27 	bpl.w	324da <hci_evt_encode+0x72>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
   3268c:	4b43      	ldr	r3, [pc, #268]	; (3279c <hci_evt_encode+0x334>)
   3268e:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   32690:	065b      	lsls	r3, r3, #25
   32692:	f57f af22 	bpl.w	324da <hci_evt_encode+0x72>
   32696:	3508      	adds	r5, #8
   32698:	2102      	movs	r1, #2
   3269a:	4628      	mov	r0, r5
   3269c:	f014 fd97 	bl	471ce <net_buf_simple_add>
	hdr->evt = evt;
   326a0:	f640 333e 	movw	r3, #2878	; 0xb3e
   326a4:	8003      	strh	r3, [r0, #0]
   326a6:	2101      	movs	r1, #1
   326a8:	4628      	mov	r0, r5
   326aa:	f014 fd90 	bl	471ce <net_buf_simple_add>
	me->subevent = subevt;
   326ae:	2307      	movs	r3, #7
   326b0:	7003      	strb	r3, [r0, #0]
   326b2:	210a      	movs	r1, #10
   326b4:	4628      	mov	r0, r5
   326b6:	f014 fd8a 	bl	471ce <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   326ba:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
   326bc:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   326be:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
   326c0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   326c2:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
   326c4:	8c23      	ldrh	r3, [r4, #32]
   326c6:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
   326c8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   326ca:	8103      	strh	r3, [r0, #8]
   326cc:	e705      	b.n	324da <hci_evt_encode+0x72>
   326ce:	3508      	adds	r5, #8
   326d0:	2102      	movs	r1, #2
   326d2:	4628      	mov	r0, r5
   326d4:	f014 fd7b 	bl	471ce <net_buf_simple_add>
	hdr->evt = evt;
   326d8:	f44f 734c 	mov.w	r3, #816	; 0x330
   326dc:	8003      	strh	r3, [r0, #0]
   326de:	2103      	movs	r1, #3
   326e0:	4628      	mov	r0, r5
   326e2:	f014 fd74 	bl	471ce <net_buf_simple_add>
	ep->status = 0x00;
   326e6:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   326e8:	f8a0 6001 	strh.w	r6, [r0, #1]
   326ec:	e6f5      	b.n	324da <hci_evt_encode+0x72>
	switch (pdu_data->llctrl.unknown_rsp.type) {
   326ee:	f890 3020 	ldrb.w	r3, [r0, #32]
   326f2:	2b0e      	cmp	r3, #14
   326f4:	f47f aef1 	bne.w	324da <hci_evt_encode+0x72>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   326f8:	460b      	mov	r3, r1
   326fa:	4632      	mov	r2, r6
   326fc:	2100      	movs	r1, #0
   326fe:	201a      	movs	r0, #26
}
   32700:	b005      	add	sp, #20
   32702:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   32706:	f7ff b92d 	b.w	31964 <le_remote_feat_complete>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   3270a:	460b      	mov	r3, r1
   3270c:	4632      	mov	r2, r6
   3270e:	4639      	mov	r1, r7
   32710:	2000      	movs	r0, #0
   32712:	e7f5      	b.n	32700 <hci_evt_encode+0x298>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   32714:	4b20      	ldr	r3, [pc, #128]	; (32798 <hci_evt_encode+0x330>)
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
   32716:	f890 4020 	ldrb.w	r4, [r0, #32]
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   3271a:	681b      	ldr	r3, [r3, #0]
   3271c:	061f      	lsls	r7, r3, #24
   3271e:	f57f aedc 	bpl.w	324da <hci_evt_encode+0x72>
   32722:	3508      	adds	r5, #8
   32724:	2102      	movs	r1, #2
   32726:	4628      	mov	r0, r5
   32728:	f014 fd51 	bl	471ce <net_buf_simple_add>
	hdr->evt = evt;
   3272c:	f44f 6381 	mov.w	r3, #1032	; 0x408
   32730:	8003      	strh	r3, [r0, #0]
   32732:	2104      	movs	r1, #4
   32734:	4628      	mov	r0, r5
   32736:	f014 fd4a 	bl	471ce <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   3273a:	fab4 f384 	clz	r3, r4
   3273e:	095b      	lsrs	r3, r3, #5
	ep->status = err;
   32740:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   32742:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   32746:	70c3      	strb	r3, [r0, #3]
   32748:	e6c7      	b.n	324da <hci_evt_encode+0x72>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   3274a:	4b13      	ldr	r3, [pc, #76]	; (32798 <hci_evt_encode+0x330>)
   3274c:	685b      	ldr	r3, [r3, #4]
   3274e:	0098      	lsls	r0, r3, #2
   32750:	f140 80b6 	bpl.w	328c0 <hci_evt_encode+0x458>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   32754:	4b11      	ldr	r3, [pc, #68]	; (3279c <hci_evt_encode+0x334>)
   32756:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   32758:	0699      	lsls	r1, r3, #26
   3275a:	f140 80b1 	bpl.w	328c0 <hci_evt_encode+0x458>
   3275e:	3508      	adds	r5, #8
   32760:	2102      	movs	r1, #2
   32762:	4628      	mov	r0, r5
   32764:	f014 fd33 	bl	471ce <net_buf_simple_add>
	hdr->evt = evt;
   32768:	f640 333e 	movw	r3, #2878	; 0xb3e
   3276c:	8003      	strh	r3, [r0, #0]
   3276e:	2101      	movs	r1, #1
   32770:	4628      	mov	r0, r5
   32772:	f014 fd2c 	bl	471ce <net_buf_simple_add>
	me->subevent = subevt;
   32776:	2306      	movs	r3, #6
   32778:	7003      	strb	r3, [r0, #0]
   3277a:	210a      	movs	r1, #10
   3277c:	4628      	mov	r0, r5
   3277e:	f014 fd26 	bl	471ce <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   32782:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   32784:	8c23      	ldrh	r3, [r4, #32]
   32786:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   32788:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   3278a:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   3278c:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   3278e:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   32790:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   32792:	8103      	strh	r3, [r0, #8]
   32794:	e6a1      	b.n	324da <hci_evt_encode+0x72>
   32796:	bf00      	nop
   32798:	20000160 	.word	0x20000160
   3279c:	20000158 	.word	0x20000158
   327a0:	20001610 	.word	0x20001610
   327a4:	00049860 	.word	0x00049860
   327a8:	00049810 	.word	0x00049810
   327ac:	000497b0 	.word	0x000497b0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   327b0:	4b56      	ldr	r3, [pc, #344]	; (3290c <hci_evt_encode+0x4a4>)
   327b2:	685b      	ldr	r3, [r3, #4]
   327b4:	0099      	lsls	r1, r3, #2
   327b6:	f57f ae90 	bpl.w	324da <hci_evt_encode+0x72>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
   327ba:	4b55      	ldr	r3, [pc, #340]	; (32910 <hci_evt_encode+0x4a8>)
   327bc:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   327be:	06da      	lsls	r2, r3, #27
   327c0:	f57f ae8b 	bpl.w	324da <hci_evt_encode+0x72>
   327c4:	3508      	adds	r5, #8
   327c6:	2102      	movs	r1, #2
   327c8:	4628      	mov	r0, r5
   327ca:	f014 fd00 	bl	471ce <net_buf_simple_add>
	hdr->evt = evt;
   327ce:	f640 533e 	movw	r3, #3390	; 0xd3e
   327d2:	8003      	strh	r3, [r0, #0]
   327d4:	2101      	movs	r1, #1
   327d6:	4628      	mov	r0, r5
   327d8:	f014 fcf9 	bl	471ce <net_buf_simple_add>
	me->subevent = subevt;
   327dc:	2305      	movs	r3, #5
   327de:	7003      	strb	r3, [r0, #0]
   327e0:	210c      	movs	r1, #12
   327e2:	4628      	mov	r0, r5
   327e4:	f014 fcf3 	bl	471ce <net_buf_simple_add>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   327e8:	f104 0120 	add.w	r1, r4, #32
   327ec:	4605      	mov	r5, r0
   327ee:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
   327f0:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   327f4:	f011 fd90 	bl	44318 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   327f8:	2202      	movs	r2, #2
   327fa:	f104 0128 	add.w	r1, r4, #40	; 0x28
   327fe:	f105 000a 	add.w	r0, r5, #10
}
   32802:	b005      	add	sp, #20
   32804:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   32808:	f011 bd86 	b.w	44318 <memcpy>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   3280c:	4b3f      	ldr	r3, [pc, #252]	; (3290c <hci_evt_encode+0x4a4>)
   3280e:	681b      	ldr	r3, [r3, #0]
   32810:	061b      	lsls	r3, r3, #24
   32812:	f04f 0400 	mov.w	r4, #0
   32816:	f57f ae60 	bpl.w	324da <hci_evt_encode+0x72>
   3281a:	3508      	adds	r5, #8
   3281c:	2102      	movs	r1, #2
   3281e:	4628      	mov	r0, r5
   32820:	f014 fcd5 	bl	471ce <net_buf_simple_add>
	hdr->evt = evt;
   32824:	f44f 6381 	mov.w	r3, #1032	; 0x408
   32828:	8003      	strh	r3, [r0, #0]
   3282a:	2104      	movs	r1, #4
   3282c:	4628      	mov	r0, r5
   3282e:	f014 fcce 	bl	471ce <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   32832:	2301      	movs	r3, #1
	ep->status = err;
   32834:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   32836:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   3283a:	70c3      	strb	r3, [r0, #3]
   3283c:	e64d      	b.n	324da <hci_evt_encode+0x72>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   3283e:	4a35      	ldr	r2, [pc, #212]	; (32914 <hci_evt_encode+0x4ac>)
   32840:	4935      	ldr	r1, [pc, #212]	; (32918 <hci_evt_encode+0x4b0>)
   32842:	4836      	ldr	r0, [pc, #216]	; (3291c <hci_evt_encode+0x4b4>)
   32844:	f641 636c 	movw	r3, #7788	; 0x1e6c
   32848:	f00f febe 	bl	425c8 <assert_print>
   3284c:	4040      	eors	r0, r0
   3284e:	f380 8811 	msr	BASEPRI, r0
   32852:	f04f 0003 	mov.w	r0, #3
   32856:	df02      	svc	2
   32858:	e644      	b.n	324e4 <hci_evt_encode+0x7c>
		conn_count++;
   3285a:	4a31      	ldr	r2, [pc, #196]	; (32920 <hci_evt_encode+0x4b8>)
   3285c:	6813      	ldr	r3, [r2, #0]
   3285e:	2102      	movs	r1, #2
   32860:	3301      	adds	r3, #1
   32862:	4628      	mov	r0, r5
   32864:	6013      	str	r3, [r2, #0]
   32866:	f014 fcb2 	bl	471ce <net_buf_simple_add>
	hdr->evt = evt;
   3286a:	f241 333e 	movw	r3, #4926	; 0x133e
   3286e:	8003      	strh	r3, [r0, #0]
   32870:	2101      	movs	r1, #1
   32872:	4628      	mov	r0, r5
   32874:	f014 fcab 	bl	471ce <net_buf_simple_add>
   32878:	4603      	mov	r3, r0
	me->subevent = subevt;
   3287a:	2201      	movs	r2, #1
   3287c:	701a      	strb	r2, [r3, #0]
   3287e:	4628      	mov	r0, r5
   32880:	2112      	movs	r1, #18
   32882:	f014 fca4 	bl	471ce <net_buf_simple_add>
	lecc->status = 0x00;
   32886:	7007      	strb	r7, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
   32888:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = cc->role;
   3288c:	7f63      	ldrb	r3, [r4, #29]
   3288e:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
   32890:	7fa3      	ldrb	r3, [r4, #30]
   32892:	f003 0301 	and.w	r3, r3, #1
   32896:	4605      	mov	r5, r0
   32898:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &cc->peer_addr[0], BDADDR_SIZE);
   3289a:	2206      	movs	r2, #6
   3289c:	f104 011f 	add.w	r1, r4, #31
   328a0:	3005      	adds	r0, #5
   328a2:	f011 fd39 	bl	44318 <memcpy>
	lecc->interval = sys_cpu_to_le16(cc->interval);
   328a6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   328a8:	f8a5 300b 	strh.w	r3, [r5, #11]
	lecc->latency = sys_cpu_to_le16(cc->latency);
   328ac:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   328ae:	f8a5 300d 	strh.w	r3, [r5, #13]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   328b2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   328b4:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = cc->sca;
   328b8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   328bc:	746b      	strb	r3, [r5, #17]
   328be:	e60c      	b.n	324da <hci_evt_encode+0x72>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   328c0:	2300      	movs	r3, #0
   328c2:	e9cd 3301 	strd	r3, r3, [sp, #4]
   328c6:	9300      	str	r3, [sp, #0]
   328c8:	221a      	movs	r2, #26
   328ca:	2102      	movs	r1, #2
   328cc:	4630      	mov	r0, r6
   328ce:	f002 fdf1 	bl	354b4 <ll_conn_update>
		return;
   328d2:	e602      	b.n	324da <hci_evt_encode+0x72>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   328d4:	4a0f      	ldr	r2, [pc, #60]	; (32914 <hci_evt_encode+0x4ac>)
   328d6:	4913      	ldr	r1, [pc, #76]	; (32924 <hci_evt_encode+0x4bc>)
   328d8:	4810      	ldr	r0, [pc, #64]	; (3291c <hci_evt_encode+0x4b4>)
   328da:	f641 63f1 	movw	r3, #7921	; 0x1ef1
   328de:	f00f fe73 	bl	425c8 <assert_print>
   328e2:	4040      	eors	r0, r0
   328e4:	f380 8811 	msr	BASEPRI, r0
   328e8:	f04f 0003 	mov.w	r0, #3
   328ec:	df02      	svc	2
   328ee:	e645      	b.n	3257c <hci_evt_encode+0x114>
		LL_ASSERT(0);
   328f0:	4a08      	ldr	r2, [pc, #32]	; (32914 <hci_evt_encode+0x4ac>)
   328f2:	490d      	ldr	r1, [pc, #52]	; (32928 <hci_evt_encode+0x4c0>)
   328f4:	4809      	ldr	r0, [pc, #36]	; (3291c <hci_evt_encode+0x4b4>)
   328f6:	f242 0334 	movw	r3, #8244	; 0x2034
   328fa:	f00f fe65 	bl	425c8 <assert_print>
   328fe:	4040      	eors	r0, r0
   32900:	f380 8811 	msr	BASEPRI, r0
   32904:	f04f 0003 	mov.w	r0, #3
   32908:	df02      	svc	2
		return;
   3290a:	e5e6      	b.n	324da <hci_evt_encode+0x72>
   3290c:	20000160 	.word	0x20000160
   32910:	20000158 	.word	0x20000158
   32914:	00049860 	.word	0x00049860
   32918:	0004989c 	.word	0x0004989c
   3291c:	000497b0 	.word	0x000497b0
   32920:	20002068 	.word	0x20002068
   32924:	000498d8 	.word	0x000498d8
   32928:	00049810 	.word	0x00049810

0003292c <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN) || defined(CONFIG_BT_CTLR_ADV_ISO) || \
	defined(CONFIG_BT_CTLR_CONN_ISO)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
   3292c:	b570      	push	{r4, r5, r6, lr}
   3292e:	f100 0408 	add.w	r4, r0, #8
   32932:	460e      	mov	r6, r1
   32934:	4620      	mov	r0, r4
   32936:	2102      	movs	r1, #2
   32938:	4615      	mov	r5, r2
   3293a:	f014 fc48 	bl	471ce <net_buf_simple_add>
	hdr->evt = evt;
   3293e:	f240 5313 	movw	r3, #1299	; 0x513
   32942:	8003      	strh	r3, [r0, #0]
   32944:	2105      	movs	r1, #5
   32946:	4620      	mov	r0, r4
   32948:	f014 fc41 	bl	471ce <net_buf_simple_add>

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
   3294c:	2301      	movs	r3, #1
   3294e:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
   32950:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   32954:	f8a0 5003 	strh.w	r5, [r0, #3]
}
   32958:	bd70      	pop	{r4, r5, r6, pc}
   3295a:	bf00      	nop

0003295c <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   3295c:	7903      	ldrb	r3, [r0, #4]
   3295e:	2b03      	cmp	r3, #3
   32960:	d009      	beq.n	32976 <hci_get_class+0x1a>

		switch (node_rx->hdr.type) {
   32962:	2b17      	cmp	r3, #23
   32964:	d005      	beq.n	32972 <hci_get_class+0x16>
   32966:	3b18      	subs	r3, #24
   32968:	2b05      	cmp	r3, #5
   3296a:	bf8c      	ite	hi
   3296c:	2000      	movhi	r0, #0
   3296e:	2003      	movls	r0, #3
   32970:	4770      	bx	lr

#if defined(CONFIG_BT_CTLR_DF_CONN_CTE_RX)
		case NODE_RX_TYPE_CONN_IQ_SAMPLE_REPORT:
#endif /* CONFIG_BT_CTLR_DF_CONN_CTE_RX */

			return HCI_CLASS_EVT_REQUIRED;
   32972:	2001      	movs	r0, #1
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
   32974:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   32976:	7f03      	ldrb	r3, [r0, #28]
   32978:	f003 0303 	and.w	r3, r3, #3
		return HCI_CLASS_EVT_LLCP;
   3297c:	2b03      	cmp	r3, #3
   3297e:	bf14      	ite	ne
   32980:	2005      	movne	r0, #5
   32982:	2004      	moveq	r0, #4
   32984:	4770      	bx	lr
   32986:	bf00      	nop

00032988 <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
   32988:	4b0b      	ldr	r3, [pc, #44]	; (329b8 <hci_init+0x30>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   3298a:	4a0c      	ldr	r2, [pc, #48]	; (329bc <hci_init+0x34>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   3298c:	490c      	ldr	r1, [pc, #48]	; (329c0 <hci_init+0x38>)

void hci_init(struct k_poll_signal *signal_host_buf)
{
   3298e:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
   32990:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   32994:	f641 75ff 	movw	r5, #8191	; 0x1fff
   32998:	e9c3 4500 	strd	r4, r5, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   3299c:	2400      	movs	r4, #0
   3299e:	2500      	movs	r5, #0
   329a0:	e9c2 4500 	strd	r4, r5, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   329a4:	241f      	movs	r4, #31
   329a6:	2500      	movs	r5, #0
   329a8:	e9c1 4500 	strd	r4, r5, [r1]
	conn_count = 0U;
   329ac:	4b05      	ldr	r3, [pc, #20]	; (329c4 <hci_init+0x3c>)
   329ae:	2200      	movs	r2, #0
   329b0:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   329b2:	bc30      	pop	{r4, r5}
	hci_recv_fifo_reset();
   329b4:	f7fe bfc6 	b.w	31944 <hci_recv_fifo_reset>
   329b8:	20000160 	.word	0x20000160
   329bc:	20001610 	.word	0x20001610
   329c0:	20000158 	.word	0x20000158
   329c4:	20002068 	.word	0x20002068

000329c8 <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
   329c8:	f007 b86a 	b.w	39aa0 <lll_csrand_get>

000329cc <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   329cc:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   329ce:	2300      	movs	r3, #0
   329d0:	f008 fe0a 	bl	3b5e8 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   329d4:	2000      	movs	r0, #0
   329d6:	bd08      	pop	{r3, pc}

000329d8 <ll_feat_get>:

#else /* !CONFIG_BT_CTLR_SET_HOST_FEATURE */
uint64_t ll_feat_get(void)
{
	return LL_FEAT;
}
   329d8:	4801      	ldr	r0, [pc, #4]	; (329e0 <ll_feat_get+0x8>)
   329da:	2100      	movs	r1, #0
   329dc:	4770      	bx	lr
   329de:	bf00      	nop
   329e0:	0001413f 	.word	0x0001413f

000329e4 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
   329e4:	b510      	push	{r4, lr}
   329e6:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
   329e8:	f007 f888 	bl	39afc <lll_reset>
	LL_ASSERT(!err);
   329ec:	b950      	cbnz	r0, 32a04 <perform_lll_reset+0x20>

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
   329ee:	f007 fc91 	bl	3a314 <lll_adv_reset>
	LL_ASSERT(!err);
   329f2:	b9c0      	cbnz	r0, 32a26 <perform_lll_reset+0x42>
	LL_ASSERT(!err);
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
   329f4:	f008 f8a0 	bl	3ab38 <lll_conn_reset>
	LL_ASSERT(!err);
   329f8:	bb30      	cbnz	r0, 32a48 <perform_lll_reset+0x64>
	z_impl_k_sem_give(sem);
   329fa:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
   329fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   32a00:	f00e b8b2 	b.w	40b68 <z_impl_k_sem_give>
	LL_ASSERT(!err);
   32a04:	4a19      	ldr	r2, [pc, #100]	; (32a6c <perform_lll_reset+0x88>)
   32a06:	491a      	ldr	r1, [pc, #104]	; (32a70 <perform_lll_reset+0x8c>)
   32a08:	481a      	ldr	r0, [pc, #104]	; (32a74 <perform_lll_reset+0x90>)
   32a0a:	f640 03c9 	movw	r3, #2249	; 0x8c9
   32a0e:	f00f fddb 	bl	425c8 <assert_print>
   32a12:	4040      	eors	r0, r0
   32a14:	f380 8811 	msr	BASEPRI, r0
   32a18:	f04f 0003 	mov.w	r0, #3
   32a1c:	df02      	svc	2
	err = lll_adv_reset();
   32a1e:	f007 fc79 	bl	3a314 <lll_adv_reset>
	LL_ASSERT(!err);
   32a22:	2800      	cmp	r0, #0
   32a24:	d0e6      	beq.n	329f4 <perform_lll_reset+0x10>
   32a26:	4a11      	ldr	r2, [pc, #68]	; (32a6c <perform_lll_reset+0x88>)
   32a28:	4911      	ldr	r1, [pc, #68]	; (32a70 <perform_lll_reset+0x8c>)
   32a2a:	4812      	ldr	r0, [pc, #72]	; (32a74 <perform_lll_reset+0x90>)
   32a2c:	f640 03ce 	movw	r3, #2254	; 0x8ce
   32a30:	f00f fdca 	bl	425c8 <assert_print>
   32a34:	4040      	eors	r0, r0
   32a36:	f380 8811 	msr	BASEPRI, r0
   32a3a:	f04f 0003 	mov.w	r0, #3
   32a3e:	df02      	svc	2
	err = lll_conn_reset();
   32a40:	f008 f87a 	bl	3ab38 <lll_conn_reset>
	LL_ASSERT(!err);
   32a44:	2800      	cmp	r0, #0
   32a46:	d0d8      	beq.n	329fa <perform_lll_reset+0x16>
   32a48:	4a08      	ldr	r2, [pc, #32]	; (32a6c <perform_lll_reset+0x88>)
   32a4a:	4909      	ldr	r1, [pc, #36]	; (32a70 <perform_lll_reset+0x8c>)
   32a4c:	4809      	ldr	r0, [pc, #36]	; (32a74 <perform_lll_reset+0x90>)
   32a4e:	f640 03da 	movw	r3, #2266	; 0x8da
   32a52:	f00f fdb9 	bl	425c8 <assert_print>
   32a56:	4040      	eors	r0, r0
   32a58:	f380 8811 	msr	BASEPRI, r0
   32a5c:	f04f 0003 	mov.w	r0, #3
   32a60:	df02      	svc	2
   32a62:	4620      	mov	r0, r4
}
   32a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   32a68:	f00e b87e 	b.w	40b68 <z_impl_k_sem_give>
   32a6c:	00049914 	.word	0x00049914
   32a70:	00049950 	.word	0x00049950
   32a74:	000497b0 	.word	0x000497b0

00032a78 <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
   32a78:	6008      	str	r0, [r1, #0]
   32a7a:	4801      	ldr	r0, [pc, #4]	; (32a80 <ull_ticker_status_give+0x8>)
   32a7c:	f00e b874 	b.w	40b68 <z_impl_k_sem_give>
   32a80:	2000231c 	.word	0x2000231c

00032a84 <disabled_cb>:
   32a84:	f00e b870 	b.w	40b68 <z_impl_k_sem_give>

00032a88 <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */

#if defined(CONFIG_BT_CONN) || defined(CONFIG_BT_CTLR_ADV_ISO)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
   32a88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;
	uint8_t next;

	next = *first;
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   32a8c:	4d2a      	ldr	r5, [pc, #168]	; (32b38 <tx_cmplt_get+0xb0>)
	next = *first;
   32a8e:	780c      	ldrb	r4, [r1, #0]
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   32a90:	78ab      	ldrb	r3, [r5, #2]
{
   32a92:	468a      	mov	sl, r1
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   32a94:	7929      	ldrb	r1, [r5, #4]
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
		*idx = first;
   32a96:	429c      	cmp	r4, r3
   32a98:	bf28      	it	cs
   32a9a:	460c      	movcs	r4, r1
	}

	if (*idx == last) {
   32a9c:	42a2      	cmp	r2, r4
   32a9e:	7829      	ldrb	r1, [r5, #0]
   32aa0:	d042      	beq.n	32b28 <tx_cmplt_get+0xa0>
	i = *idx + 1;
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
   32aa2:	fb14 f101 	smulbb	r1, r4, r1
   32aa6:	f105 0708 	add.w	r7, r5, #8
	i = *idx + 1;
   32aaa:	3401      	adds	r4, #1
   32aac:	b2e4      	uxtb	r4, r4
		i = 0U;
   32aae:	42a3      	cmp	r3, r4
   32ab0:	bf08      	it	eq
   32ab2:	2400      	moveq	r4, #0
	p = (void *)(fifo + (*idx) * size);
   32ab4:	187b      	adds	r3, r7, r1
				    &next);
	if (!tx) {
		return 0;
	}

	*handle = tx->handle;
   32ab6:	5a79      	ldrh	r1, [r7, r1]
   32ab8:	8001      	strh	r1, [r0, #0]
	cmplt = 0U;
   32aba:	4693      	mov	fp, r2
   32abc:	4681      	mov	r9, r0
   32abe:	2600      	movs	r6, #0
			     (p->ll_id == PDU_DATA_LLID_DATA_START ||
			      p->ll_id == PDU_DATA_LLID_DATA_CONTINUE)) ||
			    (!IS_NODE_TX_PTR(tx_node) &&
			     IS_NODE_TX_DATA(tx_node))) {
				/* data packet, hence count num cmplt */
				NODE_TX_DATA_SET(tx->node);
   32ac0:	f04f 0801 	mov.w	r8, #1
   32ac4:	e01c      	b.n	32b00 <tx_cmplt_get+0x78>
			    (!IS_NODE_TX_PTR(tx_node) &&
   32ac6:	2801      	cmp	r0, #1
   32ac8:	d02b      	beq.n	32b22 <tx_cmplt_get+0x9a>
   32aca:	2212      	movs	r2, #18
   32acc:	605a      	str	r2, [r3, #4]
#if defined(CONFIG_BT_CTLR_ADV_ISO) || \
	defined(CONFIG_BT_CTLR_CONN_ISO)
next_ack:
#endif /* CONFIG_BT_CTLR_ADV_ISO || CONFIG_BT_CTLR_CONN_ISO */

		*first = next;
   32ace:	f88a 4000 	strb.w	r4, [sl]
		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   32ad2:	78a8      	ldrb	r0, [r5, #2]
   32ad4:	792b      	ldrb	r3, [r5, #4]
   32ad6:	7829      	ldrb	r1, [r5, #0]
	if (*idx >= count) {
   32ad8:	42a0      	cmp	r0, r4
   32ada:	bf88      	it	hi
   32adc:	4623      	movhi	r3, r4
	if (*idx == last) {
   32ade:	459b      	cmp	fp, r3
   32ae0:	d023      	beq.n	32b2a <tx_cmplt_get+0xa2>
	p = (void *)(fifo + (*idx) * size);
   32ae2:	fb13 f101 	smulbb	r1, r3, r1
	i = *idx + 1;
   32ae6:	3301      	adds	r3, #1
   32ae8:	b2dc      	uxtb	r4, r3
		i = 0U;
   32aea:	42a0      	cmp	r0, r4
   32aec:	bf08      	it	eq
   32aee:	2400      	moveq	r4, #0
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, &next);
	} while (tx && tx->handle == *handle);
   32af0:	f837 c001 	ldrh.w	ip, [r7, r1]
   32af4:	f8b9 0000 	ldrh.w	r0, [r9]
   32af8:	4584      	cmp	ip, r0
	p = (void *)(fifo + (*idx) * size);
   32afa:	eb07 0301 	add.w	r3, r7, r1
   32afe:	d114      	bne.n	32b2a <tx_cmplt_get+0xa2>
			tx_node = tx->node;
   32b00:	6858      	ldr	r0, [r3, #4]
			if (!tx_node ||
   32b02:	b160      	cbz	r0, 32b1e <tx_cmplt_get+0x96>
   32b04:	28ff      	cmp	r0, #255	; 0xff
   32b06:	d9de      	bls.n	32ac6 <tx_cmplt_get+0x3e>
			     (p->ll_id == PDU_DATA_LLID_DATA_START ||
   32b08:	7901      	ldrb	r1, [r0, #4]
   32b0a:	f001 0103 	and.w	r1, r1, #3
			    (IS_NODE_TX_PTR(tx_node) &&
   32b0e:	3901      	subs	r1, #1
   32b10:	2901      	cmp	r1, #1
   32b12:	d90d      	bls.n	32b30 <tx_cmplt_get+0xa8>
				NODE_TX_CTRL_SET(tx->node);
   32b14:	2112      	movs	r1, #18
   32b16:	6059      	str	r1, [r3, #4]
				ll_tx_mem_release(tx_node);
   32b18:	f002 fc7a 	bl	35410 <ll_tx_mem_release>
   32b1c:	e7d7      	b.n	32ace <tx_cmplt_get+0x46>
				NODE_TX_DATA_SET(tx->node);
   32b1e:	f8c3 8004 	str.w	r8, [r3, #4]
				cmplt++;
   32b22:	3601      	adds	r6, #1
   32b24:	b2f6      	uxtb	r6, r6
			if (IS_NODE_TX_PTR(tx_node)) {
   32b26:	e7d2      	b.n	32ace <tx_cmplt_get+0x46>
		return 0;
   32b28:	2600      	movs	r6, #0

	return cmplt;
}
   32b2a:	4630      	mov	r0, r6
   32b2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cmplt++;
   32b30:	3601      	adds	r6, #1
   32b32:	b2f6      	uxtb	r6, r6
				NODE_TX_DATA_SET(tx->node);
   32b34:	2101      	movs	r1, #1
				cmplt++;
   32b36:	e7ee      	b.n	32b16 <tx_cmplt_get+0x8e>
   32b38:	200004b8 	.word	0x200004b8

00032b3c <rx_replenish>:
{
   32b3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (max > mem_link_rx.quota_pdu) {
   32b40:	4f3d      	ldr	r7, [pc, #244]	; (32c38 <rx_replenish+0xfc>)
   32b42:	883b      	ldrh	r3, [r7, #0]
   32b44:	4298      	cmp	r0, r3
   32b46:	d968      	bls.n	32c1a <rx_replenish+0xde>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   32b48:	f013 06ff 	ands.w	r6, r3, #255	; 0xff
   32b4c:	d02c      	beq.n	32ba8 <rx_replenish+0x6c>
   32b4e:	4d3b      	ldr	r5, [pc, #236]	; (32c3c <rx_replenish+0x100>)
		link = mem_acquire(&mem_link_rx.free);
   32b50:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 32c40 <rx_replenish+0x104>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   32b54:	796c      	ldrb	r4, [r5, #5]
		rx = mem_acquire(&mem_pdu_rx.free);
   32b56:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 32c44 <rx_replenish+0x108>
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   32b5a:	f105 0a08 	add.w	sl, r5, #8
	if (last == count) {
   32b5e:	78aa      	ldrb	r2, [r5, #2]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   32b60:	792b      	ldrb	r3, [r5, #4]
	last = last + 1;
   32b62:	3401      	adds	r4, #1
   32b64:	b2e4      	uxtb	r4, r4
		last = 0U;
   32b66:	42a2      	cmp	r2, r4
   32b68:	bf08      	it	eq
   32b6a:	2400      	moveq	r4, #0
	if (last == first) {
   32b6c:	42a3      	cmp	r3, r4
		link = mem_acquire(&mem_link_rx.free);
   32b6e:	4640      	mov	r0, r8
   32b70:	d01c      	beq.n	32bac <rx_replenish+0x70>
   32b72:	f7fd fa4d 	bl	30010 <mem_acquire>
   32b76:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   32b78:	4648      	mov	r0, r9
		if (!link) {
   32b7a:	f1bb 0f00 	cmp.w	fp, #0
   32b7e:	d013      	beq.n	32ba8 <rx_replenish+0x6c>
		rx = mem_acquire(&mem_pdu_rx.free);
   32b80:	f7fd fa46 	bl	30010 <mem_acquire>
		if (!rx) {
   32b84:	2800      	cmp	r0, #0
   32b86:	d04a      	beq.n	32c1e <rx_replenish+0xe2>
		rx->link = link;
   32b88:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   32b8c:	796b      	ldrb	r3, [r5, #5]
   32b8e:	782a      	ldrb	r2, [r5, #0]
   32b90:	fb13 f302 	smulbb	r3, r3, r2
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   32b94:	f84a 0003 	str.w	r0, [sl, r3]
	mem_link_rx.quota_pdu += delta;
   32b98:	883b      	ldrh	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
   32b9a:	716c      	strb	r4, [r5, #5]
		max--;
   32b9c:	3e01      	subs	r6, #1
	mem_link_rx.quota_pdu += delta;
   32b9e:	3b01      	subs	r3, #1
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   32ba0:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
   32ba4:	803b      	strh	r3, [r7, #0]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   32ba6:	d1da      	bne.n	32b5e <rx_replenish+0x22>
}
   32ba8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (mem_link_rx.quota_pdu &&
   32bac:	883b      	ldrh	r3, [r7, #0]
   32bae:	2b00      	cmp	r3, #0
   32bb0:	d0fa      	beq.n	32ba8 <rx_replenish+0x6c>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   32bb2:	f8df 9094 	ldr.w	r9, [pc, #148]	; 32c48 <rx_replenish+0x10c>
		link = mem_acquire(&mem_link_rx.free);
   32bb6:	4d22      	ldr	r5, [pc, #136]	; (32c40 <rx_replenish+0x104>)
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   32bb8:	f899 4005 	ldrb.w	r4, [r9, #5]
		rx = mem_acquire(&mem_pdu_rx.free);
   32bbc:	4e21      	ldr	r6, [pc, #132]	; (32c44 <rx_replenish+0x108>)
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   32bbe:	f109 0808 	add.w	r8, r9, #8
	if (last == count) {
   32bc2:	f899 2002 	ldrb.w	r2, [r9, #2]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   32bc6:	f899 3004 	ldrb.w	r3, [r9, #4]
	last = last + 1;
   32bca:	3401      	adds	r4, #1
   32bcc:	b2e4      	uxtb	r4, r4
		last = 0U;
   32bce:	42a2      	cmp	r2, r4
   32bd0:	bf08      	it	eq
   32bd2:	2400      	moveq	r4, #0
	if (last == first) {
   32bd4:	42a3      	cmp	r3, r4
		link = mem_acquire(&mem_link_rx.free);
   32bd6:	4628      	mov	r0, r5
   32bd8:	d0e6      	beq.n	32ba8 <rx_replenish+0x6c>
   32bda:	f7fd fa19 	bl	30010 <mem_acquire>
   32bde:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   32be0:	4630      	mov	r0, r6
		if (!link) {
   32be2:	f1ba 0f00 	cmp.w	sl, #0
   32be6:	d0df      	beq.n	32ba8 <rx_replenish+0x6c>
		rx = mem_acquire(&mem_pdu_rx.free);
   32be8:	f7fd fa12 	bl	30010 <mem_acquire>
		link->mem = NULL;
   32bec:	2300      	movs	r3, #0
		if (!rx) {
   32bee:	b1e0      	cbz	r0, 32c2a <rx_replenish+0xee>
		link->mem = NULL;
   32bf0:	f8ca 3004 	str.w	r3, [sl, #4]
		rx->link = link;
   32bf4:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   32bf8:	f899 3005 	ldrb.w	r3, [r9, #5]
   32bfc:	f899 2000 	ldrb.w	r2, [r9]
   32c00:	fb13 f302 	smulbb	r3, r3, r2
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   32c04:	f848 0003 	str.w	r0, [r8, r3]
	mem_link_rx.quota_pdu += delta;
   32c08:	883b      	ldrh	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
   32c0a:	f889 4005 	strb.w	r4, [r9, #5]
   32c0e:	3b01      	subs	r3, #1
   32c10:	b29b      	uxth	r3, r3
   32c12:	803b      	strh	r3, [r7, #0]
	while (mem_link_rx.quota_pdu &&
   32c14:	2b00      	cmp	r3, #0
   32c16:	d1d4      	bne.n	32bc2 <rx_replenish+0x86>
   32c18:	e7c6      	b.n	32ba8 <rx_replenish+0x6c>
   32c1a:	4606      	mov	r6, r0
   32c1c:	e797      	b.n	32b4e <rx_replenish+0x12>
	mem_release(link, &mem_link_rx.free);
   32c1e:	4658      	mov	r0, fp
   32c20:	4907      	ldr	r1, [pc, #28]	; (32c40 <rx_replenish+0x104>)
}
   32c22:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	mem_release(link, &mem_link_rx.free);
   32c26:	f7fd ba0f 	b.w	30048 <mem_release>
   32c2a:	4650      	mov	r0, sl
   32c2c:	4904      	ldr	r1, [pc, #16]	; (32c40 <rx_replenish+0x104>)
}
   32c2e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	mem_release(link, &mem_link_rx.free);
   32c32:	f7fd ba09 	b.w	30048 <mem_release>
   32c36:	bf00      	nop
   32c38:	200020bc 	.word	0x200020bc
   32c3c:	200004f0 	.word	0x200004f0
   32c40:	200020c0 	.word	0x200020c0
   32c44:	2000210c 	.word	0x2000210c
   32c48:	200004e0 	.word	0x200004e0

00032c4c <ull_done>:
}
#endif /* CONFIG_BT_CONN || CONFIG_BT_CTLR_ADV_ISO */

#if !defined(CONFIG_BT_CTLR_LOW_LAT_ULL)
static void ull_done(void *param)
{
   32c4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   32c50:	4e3c      	ldr	r6, [pc, #240]	; (32d44 <ull_done+0xf8>)
	void *release;

	/* Decrement prepare reference if ULL will not resume */
	ull_hdr = done->param;
	if (ull_hdr) {
		LL_ASSERT(ull_ref_get(ull_hdr));
   32c52:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 32d48 <ull_done+0xfc>
   32c56:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 32d4c <ull_done+0x100>
{
   32c5a:	b083      	sub	sp, #12
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   32c5c:	e9d6 0100 	ldrd	r0, r1, [r6]
   32c60:	aa01      	add	r2, sp, #4
   32c62:	f7fd fa45 	bl	300f0 <memq_peek>
		if (link) {
   32c66:	4604      	mov	r4, r0
   32c68:	2800      	cmp	r0, #0
   32c6a:	d03e      	beq.n	32cea <ull_done+0x9e>
			(void)memq_dequeue(memq_ull_done.tail,
   32c6c:	6870      	ldr	r0, [r6, #4]
   32c6e:	2200      	movs	r2, #0
   32c70:	4631      	mov	r1, r6
   32c72:	f7fd fa45 	bl	30100 <memq_dequeue>
			rx_demux_event_done(link, done);
   32c76:	9f01      	ldr	r7, [sp, #4]
	ull_hdr = done->param;
   32c78:	69fd      	ldr	r5, [r7, #28]
	if (ull_hdr) {
   32c7a:	b135      	cbz	r5, 32c8a <ull_done+0x3e>
	return hdr->ref;
   32c7c:	782b      	ldrb	r3, [r5, #0]
		LL_ASSERT(ull_ref_get(ull_hdr));
   32c7e:	2b00      	cmp	r3, #0
   32c80:	d052      	beq.n	32d28 <ull_done+0xdc>
	return hdr->ref--;
   32c82:	782b      	ldrb	r3, [r5, #0]
   32c84:	3b01      	subs	r3, #1
   32c86:	b2db      	uxtb	r3, r3
   32c88:	702b      	strb	r3, [r5, #0]
		ull_ref_dec(ull_hdr);
	}

	/* Process role dependent event done */
	switch (done->extra.type) {
   32c8a:	f897 3020 	ldrb.w	r3, [r7, #32]
   32c8e:	b123      	cbz	r3, 32c9a <ull_done+0x4e>
   32c90:	2b01      	cmp	r3, #1
   32c92:	d13b      	bne.n	32d0c <ull_done+0xc0>
#if defined(CONFIG_BT_CONN)
	case EVENT_DONE_EXTRA_TYPE_CONN:
		ull_conn_done(done);
   32c94:	4638      	mov	r0, r7
   32c96:	f005 fe1d 	bl	388d4 <ull_conn_done>
		break;
	}

	/* Release done */
	done->extra.type = 0U;
	release = RXFIFO_RELEASE(done, link, done);
   32c9a:	4a2d      	ldr	r2, [pc, #180]	; (32d50 <ull_done+0x104>)
	last = last + 1;
   32c9c:	7953      	ldrb	r3, [r2, #5]
	if (last == count) {
   32c9e:	f892 c002 	ldrb.w	ip, [r2, #2]
   32ca2:	7910      	ldrb	r0, [r2, #4]
	last = last + 1;
   32ca4:	3301      	adds	r3, #1
	done->extra.type = 0U;
   32ca6:	2100      	movs	r1, #0
   32ca8:	b2db      	uxtb	r3, r3
		last = 0U;
   32caa:	459c      	cmp	ip, r3
   32cac:	bf08      	it	eq
   32cae:	460b      	moveq	r3, r1
	if (last == first) {
   32cb0:	4298      	cmp	r0, r3
   32cb2:	f887 1020 	strb.w	r1, [r7, #32]
	release = RXFIFO_RELEASE(done, link, done);
   32cb6:	7811      	ldrb	r1, [r2, #0]
   32cb8:	d01a      	beq.n	32cf0 <ull_done+0xa4>

	if (!mfifo_enqueue_idx_get(n, f, *l, &idx)) {
		return NULL;
	}

	rx->link = link;
   32cba:	603c      	str	r4, [r7, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   32cbc:	7950      	ldrb	r0, [r2, #5]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   32cbe:	fb00 2101 	mla	r1, r0, r1, r2
   32cc2:	608f      	str	r7, [r1, #8]
	*last = idx; /* Commit: Update write index */
   32cc4:	7153      	strb	r3, [r2, #5]
	if (ull_hdr && !ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
   32cc6:	2d00      	cmp	r5, #0
   32cc8:	d0c8      	beq.n	32c5c <ull_done+0x10>
	return hdr->ref;
   32cca:	782b      	ldrb	r3, [r5, #0]
   32ccc:	2b00      	cmp	r3, #0
   32cce:	d1c5      	bne.n	32c5c <ull_done+0x10>
   32cd0:	696b      	ldr	r3, [r5, #20]
   32cd2:	2b00      	cmp	r3, #0
   32cd4:	d0c2      	beq.n	32c5c <ull_done+0x10>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   32cd6:	69a8      	ldr	r0, [r5, #24]
   32cd8:	4798      	blx	r3
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   32cda:	e9d6 0100 	ldrd	r0, r1, [r6]
   32cde:	aa01      	add	r2, sp, #4
   32ce0:	f7fd fa06 	bl	300f0 <memq_peek>
		if (link) {
   32ce4:	4604      	mov	r4, r0
   32ce6:	2800      	cmp	r0, #0
   32ce8:	d1c0      	bne.n	32c6c <ull_done+0x20>
}
   32cea:	b003      	add	sp, #12
   32cec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(release == done);
   32cf0:	4918      	ldr	r1, [pc, #96]	; (32d54 <ull_done+0x108>)
   32cf2:	4819      	ldr	r0, [pc, #100]	; (32d58 <ull_done+0x10c>)
   32cf4:	f640 339a 	movw	r3, #2970	; 0xb9a
   32cf8:	4642      	mov	r2, r8
   32cfa:	f00f fc65 	bl	425c8 <assert_print>
   32cfe:	4040      	eors	r0, r0
   32d00:	f380 8811 	msr	BASEPRI, r0
   32d04:	f04f 0003 	mov.w	r0, #3
   32d08:	df02      	svc	2
   32d0a:	e7dc      	b.n	32cc6 <ull_done+0x7a>
		LL_ASSERT(0);
   32d0c:	4913      	ldr	r1, [pc, #76]	; (32d5c <ull_done+0x110>)
   32d0e:	4812      	ldr	r0, [pc, #72]	; (32d58 <ull_done+0x10c>)
   32d10:	f640 3393 	movw	r3, #2963	; 0xb93
   32d14:	4642      	mov	r2, r8
   32d16:	f00f fc57 	bl	425c8 <assert_print>
   32d1a:	4040      	eors	r0, r0
   32d1c:	f380 8811 	msr	BASEPRI, r0
   32d20:	f04f 0003 	mov.w	r0, #3
   32d24:	df02      	svc	2
		break;
   32d26:	e7b8      	b.n	32c9a <ull_done+0x4e>
		LL_ASSERT(ull_ref_get(ull_hdr));
   32d28:	480b      	ldr	r0, [pc, #44]	; (32d58 <ull_done+0x10c>)
   32d2a:	f640 333c 	movw	r3, #2876	; 0xb3c
   32d2e:	4642      	mov	r2, r8
   32d30:	4649      	mov	r1, r9
   32d32:	f00f fc49 	bl	425c8 <assert_print>
   32d36:	4040      	eors	r0, r0
   32d38:	f380 8811 	msr	BASEPRI, r0
   32d3c:	f04f 0003 	mov.w	r0, #3
   32d40:	df02      	svc	2
   32d42:	e79e      	b.n	32c82 <ull_done+0x36>
   32d44:	200020a4 	.word	0x200020a4
   32d48:	00049914 	.word	0x00049914
   32d4c:	00049958 	.word	0x00049958
   32d50:	200005e4 	.word	0x200005e4
   32d54:	00049970 	.word	0x00049970
   32d58:	000497b0 	.word	0x000497b0
   32d5c:	00049810 	.word	0x00049810

00032d60 <rx_demux>:
{
   32d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32d64:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 32f14 <rx_demux+0x1b4>
	k_sem_give(sem_recv);
   32d68:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 32f18 <rx_demux+0x1b8>
			LL_ASSERT(rx);
   32d6c:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 32f1c <rx_demux+0x1bc>
   32d70:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 32f20 <rx_demux+0x1c0>
{
   32d74:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   32d76:	e9d8 0100 	ldrd	r0, r1, [r8]
   32d7a:	aa03      	add	r2, sp, #12
   32d7c:	f7fd f9b8 	bl	300f0 <memq_peek>
		if (link) {
   32d80:	4605      	mov	r5, r0
   32d82:	2800      	cmp	r0, #0
   32d84:	d035      	beq.n	32df2 <rx_demux+0x92>
			LL_ASSERT(rx);
   32d86:	9b03      	ldr	r3, [sp, #12]
   32d88:	2b00      	cmp	r3, #0
   32d8a:	f000 80a6 	beq.w	32eda <rx_demux+0x17a>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   32d8e:	7818      	ldrb	r0, [r3, #0]
   32d90:	aa04      	add	r2, sp, #16
   32d92:	a902      	add	r1, sp, #8
   32d94:	f006 f830 	bl	38df8 <ull_conn_ack_by_last_peek>
			if (link_tx) {
   32d98:	4604      	mov	r4, r0
   32d9a:	2800      	cmp	r0, #0
   32d9c:	d055      	beq.n	32e4a <rx_demux+0xea>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   32d9e:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
   32da2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   32da6:	780f      	ldrb	r7, [r1, #0]
   32da8:	f8ad 200a 	strh.w	r2, [sp, #10]
   32dac:	ae05      	add	r6, sp, #20
   32dae:	9305      	str	r3, [sp, #20]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   32db0:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
   32db4:	f006 f83a 	bl	38e2c <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   32db8:	4621      	mov	r1, r4
   32dba:	9a05      	ldr	r2, [sp, #20]
   32dbc:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   32dc0:	f006 f87c 	bl	38ebc <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   32dc4:	4620      	mov	r0, r4
   32dc6:	f005 ffef 	bl	38da8 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   32dca:	4632      	mov	r2, r6
   32dcc:	4629      	mov	r1, r5
   32dce:	4638      	mov	r0, r7
   32dd0:	f006 f812 	bl	38df8 <ull_conn_ack_by_last_peek>
	} while (link);
   32dd4:	4604      	mov	r4, r0
   32dd6:	2800      	cmp	r0, #0
   32dd8:	d1ec      	bne.n	32db4 <rx_demux+0x54>
	k_sem_give(sem_recv);
   32dda:	f8d9 0000 	ldr.w	r0, [r9]
   32dde:	f00d fec3 	bl	40b68 <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   32de2:	e9d8 0100 	ldrd	r0, r1, [r8]
   32de6:	aa03      	add	r2, sp, #12
   32de8:	f7fd f982 	bl	300f0 <memq_peek>
		if (link) {
   32dec:	4605      	mov	r5, r0
   32dee:	2800      	cmp	r0, #0
   32df0:	d1c9      	bne.n	32d86 <rx_demux+0x26>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   32df2:	aa04      	add	r2, sp, #16
   32df4:	a902      	add	r1, sp, #8
   32df6:	f10d 0007 	add.w	r0, sp, #7
   32dfa:	f005 ffe1 	bl	38dc0 <ull_conn_ack_peek>
			if (link) {
   32dfe:	4604      	mov	r4, r0
   32e00:	2800      	cmp	r0, #0
   32e02:	d067      	beq.n	32ed4 <rx_demux+0x174>
				rx_demux_conn_tx_ack(ack_last, handle,
   32e04:	9b04      	ldr	r3, [sp, #16]
   32e06:	9305      	str	r3, [sp, #20]
   32e08:	f89d 7007 	ldrb.w	r7, [sp, #7]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   32e0c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   32e10:	f8ad 300a 	strh.w	r3, [sp, #10]
   32e14:	ae05      	add	r6, sp, #20
   32e16:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
   32e1a:	f006 f807 	bl	38e2c <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   32e1e:	4621      	mov	r1, r4
   32e20:	9a05      	ldr	r2, [sp, #20]
   32e22:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   32e26:	f006 f849 	bl	38ebc <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   32e2a:	4620      	mov	r0, r4
   32e2c:	f005 ffbc 	bl	38da8 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   32e30:	4632      	mov	r2, r6
   32e32:	4629      	mov	r1, r5
   32e34:	4638      	mov	r0, r7
   32e36:	f005 ffdf 	bl	38df8 <ull_conn_ack_by_last_peek>
	} while (link);
   32e3a:	4604      	mov	r4, r0
   32e3c:	2800      	cmp	r0, #0
   32e3e:	d1ec      	bne.n	32e1a <rx_demux+0xba>
	k_sem_give(sem_recv);
   32e40:	f8d9 0000 	ldr.w	r0, [r9]
   32e44:	f00d fe90 	bl	40b68 <z_impl_k_sem_give>
	} while (link);
   32e48:	e7cb      	b.n	32de2 <rx_demux+0x82>
				nack = rx_demux_rx(link, rx);
   32e4a:	9b03      	ldr	r3, [sp, #12]
   32e4c:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
   32e4e:	791b      	ldrb	r3, [r3, #4]
   32e50:	3b01      	subs	r3, #1
   32e52:	2b17      	cmp	r3, #23
   32e54:	d80d      	bhi.n	32e72 <rx_demux+0x112>
   32e56:	e8df f003 	tbb	[pc, r3]
   32e5a:	0c1a      	.short	0x0c1a
   32e5c:	0c0c0c38 	.word	0x0c0c0c38
   32e60:	0c0c0c0c 	.word	0x0c0c0c0c
   32e64:	0c0c0c0c 	.word	0x0c0c0c0c
   32e68:	0c0c0c0c 	.word	0x0c0c0c0c
   32e6c:	0c0c0c0c 	.word	0x0c0c0c0c
   32e70:	1a2d      	.short	0x1a2d
		LL_ASSERT(0);
   32e72:	4a2a      	ldr	r2, [pc, #168]	; (32f1c <rx_demux+0x1bc>)
   32e74:	492b      	ldr	r1, [pc, #172]	; (32f24 <rx_demux+0x1c4>)
   32e76:	482c      	ldr	r0, [pc, #176]	; (32f28 <rx_demux+0x1c8>)
   32e78:	f640 3329 	movw	r3, #2857	; 0xb29
   32e7c:	f00f fba4 	bl	425c8 <assert_print>
   32e80:	4040      	eors	r0, r0
   32e82:	f380 8811 	msr	BASEPRI, r0
   32e86:	f04f 0003 	mov.w	r0, #3
   32e8a:	df02      	svc	2
			if (nack) {
   32e8c:	e773      	b.n	32d76 <rx_demux+0x16>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   32e8e:	4921      	ldr	r1, [pc, #132]	; (32f14 <rx_demux+0x1b4>)
   32e90:	f8d8 0004 	ldr.w	r0, [r8, #4]
   32e94:	2200      	movs	r2, #0
   32e96:	f7fd f933 	bl	30100 <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   32e9a:	4b24      	ldr	r3, [pc, #144]	; (32f2c <rx_demux+0x1cc>)
		ll_rx_put(link, rx);
   32e9c:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
   32e9e:	795b      	ldrb	r3, [r3, #5]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   32ea0:	4628      	mov	r0, r5
	rx_hdr->ack_last = mfifo_tx_ack.l;
   32ea2:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   32ea4:	4a22      	ldr	r2, [pc, #136]	; (32f30 <rx_demux+0x1d0>)
   32ea6:	f7fd f919 	bl	300dc <memq_enqueue>
	k_sem_give(sem_recv);
   32eaa:	4b1b      	ldr	r3, [pc, #108]	; (32f18 <rx_demux+0x1b8>)
   32eac:	6818      	ldr	r0, [r3, #0]
   32eae:	f00d fe5b 	bl	40b68 <z_impl_k_sem_give>
			if (nack) {
   32eb2:	e760      	b.n	32d76 <rx_demux+0x16>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   32eb4:	4917      	ldr	r1, [pc, #92]	; (32f14 <rx_demux+0x1b4>)
   32eb6:	f8d8 0004 	ldr.w	r0, [r8, #4]
   32eba:	2200      	movs	r2, #0
   32ebc:	f7fd f920 	bl	30100 <memq_dequeue>
		ull_conn_setup(link, rx);
   32ec0:	9905      	ldr	r1, [sp, #20]
   32ec2:	4628      	mov	r0, r5
   32ec4:	f002 fdc2 	bl	35a4c <ull_conn_setup>
			if (nack) {
   32ec8:	e755      	b.n	32d76 <rx_demux+0x16>
		nack = ull_conn_rx(link, (void *)&rx);
   32eca:	a905      	add	r1, sp, #20
   32ecc:	4628      	mov	r0, r5
   32ece:	f002 fde5 	bl	35a9c <ull_conn_rx>
		if (nack) {
   32ed2:	b188      	cbz	r0, 32ef8 <rx_demux+0x198>
}
   32ed4:	b007      	add	sp, #28
   32ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(rx);
   32eda:	4813      	ldr	r0, [pc, #76]	; (32f28 <rx_demux+0x1c8>)
   32edc:	f640 1377 	movw	r3, #2423	; 0x977
   32ee0:	465a      	mov	r2, fp
   32ee2:	4651      	mov	r1, sl
   32ee4:	f00f fb70 	bl	425c8 <assert_print>
   32ee8:	4040      	eors	r0, r0
   32eea:	f380 8811 	msr	BASEPRI, r0
   32eee:	f04f 0003 	mov.w	r0, #3
   32ef2:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   32ef4:	9b03      	ldr	r3, [sp, #12]
   32ef6:	e74a      	b.n	32d8e <rx_demux+0x2e>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   32ef8:	4906      	ldr	r1, [pc, #24]	; (32f14 <rx_demux+0x1b4>)
   32efa:	4602      	mov	r2, r0
   32efc:	f8d8 0004 	ldr.w	r0, [r8, #4]
   32f00:	f7fd f8fe 	bl	30100 <memq_dequeue>
		if (rx) {
   32f04:	9905      	ldr	r1, [sp, #20]
   32f06:	2900      	cmp	r1, #0
   32f08:	f43f af35 	beq.w	32d76 <rx_demux+0x16>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   32f0c:	4b07      	ldr	r3, [pc, #28]	; (32f2c <rx_demux+0x1cc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   32f0e:	4628      	mov	r0, r5
	rx_hdr->ack_last = mfifo_tx_ack.l;
   32f10:	795b      	ldrb	r3, [r3, #5]
   32f12:	e7c6      	b.n	32ea2 <rx_demux+0x142>
   32f14:	200020b4 	.word	0x200020b4
   32f18:	20002318 	.word	0x20002318
   32f1c:	00049914 	.word	0x00049914
   32f20:	00049980 	.word	0x00049980
   32f24:	00049810 	.word	0x00049810
   32f28:	000497b0 	.word	0x000497b0
   32f2c:	200004b8 	.word	0x200004b8
   32f30:	200020b0 	.word	0x200020b0

00032f34 <ll_rx_get>:
{
   32f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   32f38:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 33008 <ll_rx_get+0xd4>
   32f3c:	4f33      	ldr	r7, [pc, #204]	; (3300c <ll_rx_get+0xd8>)
{
   32f3e:	b082      	sub	sp, #8
   32f40:	4680      	mov	r8, r0
   32f42:	4689      	mov	r9, r1
			f = mfifo_tx_ack.f;
   32f44:	f1aa 0504 	sub.w	r5, sl, #4
	*node_rx = NULL;
   32f48:	2300      	movs	r3, #0
   32f4a:	f8c8 3000 	str.w	r3, [r8]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   32f4e:	e9d7 0100 	ldrd	r0, r1, [r7]
   32f52:	aa01      	add	r2, sp, #4
   32f54:	f7fd f8cc 	bl	300f0 <memq_peek>
	if (link) {
   32f58:	4606      	mov	r6, r0
   32f5a:	2800      	cmp	r0, #0
   32f5c:	d042      	beq.n	32fe4 <ll_rx_get+0xb0>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   32f5e:	9b01      	ldr	r3, [sp, #4]
   32f60:	4651      	mov	r1, sl
   32f62:	781a      	ldrb	r2, [r3, #0]
   32f64:	4648      	mov	r0, r9
   32f66:	f7ff fd8f 	bl	32a88 <tx_cmplt_get>
		if (!cmplt) {
   32f6a:	4603      	mov	r3, r0
   32f6c:	2800      	cmp	r0, #0
   32f6e:	d140      	bne.n	32ff2 <ll_rx_get+0xbe>
			f = mfifo_tx_ack.f;
   32f70:	792a      	ldrb	r2, [r5, #4]
   32f72:	f88d 2001 	strb.w	r2, [sp, #1]
				cmplt_curr = tx_cmplt_get(&h, &f,
   32f76:	796a      	ldrb	r2, [r5, #5]
   32f78:	f10d 0101 	add.w	r1, sp, #1
   32f7c:	f10d 0002 	add.w	r0, sp, #2
   32f80:	461c      	mov	r4, r3
   32f82:	f7ff fd81 	bl	32a88 <tx_cmplt_get>
   32f86:	ea44 0200 	orr.w	r2, r4, r0
			} while ((cmplt_prev != 0U) ||
   32f8a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
				cmplt_curr = tx_cmplt_get(&h, &f,
   32f8e:	4603      	mov	r3, r0
			} while ((cmplt_prev != 0U) ||
   32f90:	d1f1      	bne.n	32f76 <ll_rx_get+0x42>
			} else if (rx->type == NODE_RX_TYPE_RELEASE) {
   32f92:	9b01      	ldr	r3, [sp, #4]
   32f94:	7919      	ldrb	r1, [r3, #4]
   32f96:	2901      	cmp	r1, #1
   32f98:	d12f      	bne.n	32ffa <ll_rx_get+0xc6>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   32f9a:	4c1d      	ldr	r4, [pc, #116]	; (33010 <ll_rx_get+0xdc>)
	(void)memq_dequeue(memq_ll_rx.tail,
   32f9c:	6878      	ldr	r0, [r7, #4]
   32f9e:	4639      	mov	r1, r7
   32fa0:	f7fd f8ae 	bl	30100 <memq_dequeue>
	mem_release(link, &mem_link_rx.free);
   32fa4:	1d21      	adds	r1, r4, #4
   32fa6:	4630      	mov	r0, r6
   32fa8:	f7fd f84e 	bl	30048 <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   32fac:	8823      	ldrh	r3, [r4, #0]
   32fae:	2b04      	cmp	r3, #4
   32fb0:	d809      	bhi.n	32fc6 <ll_rx_get+0x92>
	mem_release(node_rx, &mem_pdu_rx.free);
   32fb2:	9801      	ldr	r0, [sp, #4]
   32fb4:	4917      	ldr	r1, [pc, #92]	; (33014 <ll_rx_get+0xe0>)
	mem_link_rx.quota_pdu += delta;
   32fb6:	3301      	adds	r3, #1
   32fb8:	8023      	strh	r3, [r4, #0]
	mem_release(node_rx, &mem_pdu_rx.free);
   32fba:	f7fd f845 	bl	30048 <mem_release>
	rx_replenish(1U);
   32fbe:	2001      	movs	r0, #1
   32fc0:	f7ff fdbc 	bl	32b3c <rx_replenish>
				goto ll_rx_get_again;
   32fc4:	e7c0      	b.n	32f48 <ll_rx_get+0x14>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   32fc6:	4a14      	ldr	r2, [pc, #80]	; (33018 <ll_rx_get+0xe4>)
   32fc8:	4914      	ldr	r1, [pc, #80]	; (3301c <ll_rx_get+0xe8>)
   32fca:	4815      	ldr	r0, [pc, #84]	; (33020 <ll_rx_get+0xec>)
   32fcc:	f240 6375 	movw	r3, #1653	; 0x675
   32fd0:	f00f fafa 	bl	425c8 <assert_print>
   32fd4:	4040      	eors	r0, r0
   32fd6:	f380 8811 	msr	BASEPRI, r0
   32fda:	f04f 0003 	mov.w	r0, #3
   32fde:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   32fe0:	8823      	ldrh	r3, [r4, #0]
   32fe2:	e7e6      	b.n	32fb2 <ll_rx_get+0x7e>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   32fe4:	490f      	ldr	r1, [pc, #60]	; (33024 <ll_rx_get+0xf0>)
   32fe6:	4648      	mov	r0, r9
   32fe8:	794a      	ldrb	r2, [r1, #5]
   32fea:	3104      	adds	r1, #4
   32fec:	f7ff fd4c 	bl	32a88 <tx_cmplt_get>
   32ff0:	4603      	mov	r3, r0
}
   32ff2:	4618      	mov	r0, r3
   32ff4:	b002      	add	sp, #8
   32ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*node_rx = rx;
   32ffa:	f8c8 3000 	str.w	r3, [r8]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   32ffe:	4613      	mov	r3, r2
}
   33000:	4618      	mov	r0, r3
   33002:	b002      	add	sp, #8
   33004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   33008:	200004bc 	.word	0x200004bc
   3300c:	200020ac 	.word	0x200020ac
   33010:	200020bc 	.word	0x200020bc
   33014:	2000210c 	.word	0x2000210c
   33018:	00049914 	.word	0x00049914
   3301c:	00049984 	.word	0x00049984
   33020:	000497b0 	.word	0x000497b0
   33024:	200004b8 	.word	0x200004b8

00033028 <ll_rx_dequeue>:
{
   33028:	b570      	push	{r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   3302a:	495a      	ldr	r1, [pc, #360]	; (33194 <ll_rx_dequeue+0x16c>)
{
   3302c:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
   3302e:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   33030:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   33032:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   33034:	aa01      	add	r2, sp, #4
   33036:	f7fd f863 	bl	30100 <memq_dequeue>
	LL_ASSERT(link);
   3303a:	4604      	mov	r4, r0
   3303c:	2800      	cmp	r0, #0
   3303e:	d05c      	beq.n	330fa <ll_rx_dequeue+0xd2>
	mem_release(link, &mem_link_rx.free);
   33040:	4955      	ldr	r1, [pc, #340]	; (33198 <ll_rx_dequeue+0x170>)
   33042:	4620      	mov	r0, r4
   33044:	f7fd f800 	bl	30048 <mem_release>
	switch (rx->type) {
   33048:	9a01      	ldr	r2, [sp, #4]
   3304a:	7913      	ldrb	r3, [r2, #4]
   3304c:	2b1d      	cmp	r3, #29
   3304e:	d810      	bhi.n	33072 <ll_rx_dequeue+0x4a>
   33050:	e8df f003 	tbb	[pc, r3]
   33054:	1e0f0f1e 	.word	0x1e0f0f1e
   33058:	0f0f0f0f 	.word	0x0f0f0f0f
   3305c:	0f0f0f0f 	.word	0x0f0f0f0f
   33060:	0f0f0f0f 	.word	0x0f0f0f0f
   33064:	0f0f0f0f 	.word	0x0f0f0f0f
   33068:	2f0f0f0f 	.word	0x2f0f0f0f
   3306c:	1e1e1e1e 	.word	0x1e1e1e1e
   33070:	1e1e      	.short	0x1e1e
		LL_ASSERT(0);
   33072:	4a4a      	ldr	r2, [pc, #296]	; (3319c <ll_rx_dequeue+0x174>)
   33074:	494a      	ldr	r1, [pc, #296]	; (331a0 <ll_rx_dequeue+0x178>)
   33076:	484b      	ldr	r0, [pc, #300]	; (331a4 <ll_rx_dequeue+0x17c>)
   33078:	f240 5334 	movw	r3, #1332	; 0x534
   3307c:	f00f faa4 	bl	425c8 <assert_print>
   33080:	4040      	eors	r0, r0
   33082:	f380 8811 	msr	BASEPRI, r0
   33086:	f04f 0003 	mov.w	r0, #3
   3308a:	df02      	svc	2
}
   3308c:	b002      	add	sp, #8
   3308e:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   33090:	2b00      	cmp	r3, #0
   33092:	d1fb      	bne.n	3308c <ll_rx_dequeue+0x64>
   33094:	4a41      	ldr	r2, [pc, #260]	; (3319c <ll_rx_dequeue+0x174>)
   33096:	4944      	ldr	r1, [pc, #272]	; (331a8 <ll_rx_dequeue+0x180>)
   33098:	4842      	ldr	r0, [pc, #264]	; (331a4 <ll_rx_dequeue+0x17c>)
   3309a:	f44f 63a6 	mov.w	r3, #1328	; 0x530
   3309e:	f00f fa93 	bl	425c8 <assert_print>
   330a2:	4040      	eors	r0, r0
   330a4:	f380 8811 	msr	BASEPRI, r0
   330a8:	f04f 0003 	mov.w	r0, #3
   330ac:	df02      	svc	2
}
   330ae:	b002      	add	sp, #8
   330b0:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   330b2:	7f13      	ldrb	r3, [r2, #28]
   330b4:	2b3c      	cmp	r3, #60	; 0x3c
   330b6:	d02e      	beq.n	33116 <ll_rx_dequeue+0xee>
   330b8:	7f53      	ldrb	r3, [r2, #29]
   330ba:	b183      	cbz	r3, 330de <ll_rx_dequeue+0xb6>
			adv = HDR_LLL2ULL(lll);
   330bc:	6893      	ldr	r3, [r2, #8]
   330be:	681c      	ldr	r4, [r3, #0]
				if (adv->node_rx_cc_free) {
   330c0:	6e60      	ldr	r0, [r4, #100]	; 0x64
   330c2:	b120      	cbz	r0, 330ce <ll_rx_dequeue+0xa6>
					adv->node_rx_cc_free = NULL;
   330c4:	2300      	movs	r3, #0
	mem_release(node_rx, &mem_pdu_rx.free);
   330c6:	4939      	ldr	r1, [pc, #228]	; (331ac <ll_rx_dequeue+0x184>)
					adv->node_rx_cc_free = NULL;
   330c8:	6663      	str	r3, [r4, #100]	; 0x64
	mem_release(node_rx, &mem_pdu_rx.free);
   330ca:	f7fc ffbd 	bl	30048 <mem_release>
			adv->is_enabled = 0U;
   330ce:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   330d2:	f36f 0300 	bfc	r3, #0, #1
   330d6:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
   330da:	b002      	add	sp, #8
   330dc:	bd70      	pop	{r4, r5, r6, pc}
			LL_ASSERT(0);
   330de:	4a2f      	ldr	r2, [pc, #188]	; (3319c <ll_rx_dequeue+0x174>)
   330e0:	492f      	ldr	r1, [pc, #188]	; (331a0 <ll_rx_dequeue+0x178>)
   330e2:	4830      	ldr	r0, [pc, #192]	; (331a4 <ll_rx_dequeue+0x17c>)
   330e4:	f240 43bd 	movw	r3, #1213	; 0x4bd
   330e8:	f00f fa6e 	bl	425c8 <assert_print>
   330ec:	4040      	eors	r0, r0
   330ee:	f380 8811 	msr	BASEPRI, r0
   330f2:	f04f 0003 	mov.w	r0, #3
   330f6:	df02      	svc	2
   330f8:	e7c8      	b.n	3308c <ll_rx_dequeue+0x64>
	LL_ASSERT(link);
   330fa:	4a28      	ldr	r2, [pc, #160]	; (3319c <ll_rx_dequeue+0x174>)
   330fc:	492c      	ldr	r1, [pc, #176]	; (331b0 <ll_rx_dequeue+0x188>)
   330fe:	4829      	ldr	r0, [pc, #164]	; (331a4 <ll_rx_dequeue+0x17c>)
   33100:	f240 430a 	movw	r3, #1034	; 0x40a
   33104:	f00f fa60 	bl	425c8 <assert_print>
   33108:	4040      	eors	r0, r0
   3310a:	f380 8811 	msr	BASEPRI, r0
   3310e:	f04f 0003 	mov.w	r0, #3
   33112:	df02      	svc	2
   33114:	e794      	b.n	33040 <ll_rx_dequeue+0x18>
			lll = ftr->param;
   33116:	6896      	ldr	r6, [r2, #8]
			adv = HDR_LLL2ULL(lll);
   33118:	e9d6 4500 	ldrd	r4, r5, [r6]
				LL_ASSERT(conn_lll);
   3311c:	b1ed      	cbz	r5, 3315a <ll_rx_dequeue+0x132>
				lll->conn = NULL;
   3311e:	2300      	movs	r3, #0
   33120:	6073      	str	r3, [r6, #4]
				LL_ASSERT(!conn_lll->link_tx_free);
   33122:	6dab      	ldr	r3, [r5, #88]	; 0x58
   33124:	b163      	cbz	r3, 33140 <ll_rx_dequeue+0x118>
   33126:	4a1d      	ldr	r2, [pc, #116]	; (3319c <ll_rx_dequeue+0x174>)
   33128:	4922      	ldr	r1, [pc, #136]	; (331b4 <ll_rx_dequeue+0x18c>)
   3312a:	481e      	ldr	r0, [pc, #120]	; (331a4 <ll_rx_dequeue+0x17c>)
   3312c:	f240 4383 	movw	r3, #1155	; 0x483
   33130:	f00f fa4a 	bl	425c8 <assert_print>
   33134:	4040      	eors	r0, r0
   33136:	f380 8811 	msr	BASEPRI, r0
   3313a:	f04f 0003 	mov.w	r0, #3
   3313e:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   33140:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   33144:	f105 0048 	add.w	r0, r5, #72	; 0x48
   33148:	f7fc ffbe 	bl	300c8 <memq_deinit>
				LL_ASSERT(link);
   3314c:	4606      	mov	r6, r0
   3314e:	b190      	cbz	r0, 33176 <ll_rx_dequeue+0x14e>
				ll_conn_release(conn);
   33150:	6828      	ldr	r0, [r5, #0]
				conn_lll->link_tx_free = link;
   33152:	65ae      	str	r6, [r5, #88]	; 0x58
				ll_conn_release(conn);
   33154:	f002 f92e 	bl	353b4 <ll_conn_release>
   33158:	e7b9      	b.n	330ce <ll_rx_dequeue+0xa6>
				LL_ASSERT(conn_lll);
   3315a:	4a10      	ldr	r2, [pc, #64]	; (3319c <ll_rx_dequeue+0x174>)
   3315c:	4916      	ldr	r1, [pc, #88]	; (331b8 <ll_rx_dequeue+0x190>)
   3315e:	4811      	ldr	r0, [pc, #68]	; (331a4 <ll_rx_dequeue+0x17c>)
   33160:	f44f 6390 	mov.w	r3, #1152	; 0x480
   33164:	f00f fa30 	bl	425c8 <assert_print>
   33168:	4040      	eors	r0, r0
   3316a:	f380 8811 	msr	BASEPRI, r0
   3316e:	f04f 0003 	mov.w	r0, #3
   33172:	df02      	svc	2
   33174:	e7d3      	b.n	3311e <ll_rx_dequeue+0xf6>
				LL_ASSERT(link);
   33176:	4a09      	ldr	r2, [pc, #36]	; (3319c <ll_rx_dequeue+0x174>)
   33178:	490d      	ldr	r1, [pc, #52]	; (331b0 <ll_rx_dequeue+0x188>)
   3317a:	480a      	ldr	r0, [pc, #40]	; (331a4 <ll_rx_dequeue+0x17c>)
   3317c:	f240 4386 	movw	r3, #1158	; 0x486
   33180:	f00f fa22 	bl	425c8 <assert_print>
   33184:	4040      	eors	r0, r0
   33186:	f380 8811 	msr	BASEPRI, r0
   3318a:	f04f 0003 	mov.w	r0, #3
   3318e:	df02      	svc	2
   33190:	e7de      	b.n	33150 <ll_rx_dequeue+0x128>
   33192:	bf00      	nop
   33194:	200020ac 	.word	0x200020ac
   33198:	200020c0 	.word	0x200020c0
   3319c:	00049914 	.word	0x00049914
   331a0:	00049810 	.word	0x00049810
   331a4:	000497b0 	.word	0x000497b0
   331a8:	000499e4 	.word	0x000499e4
   331ac:	2000210c 	.word	0x2000210c
   331b0:	00049cb8 	.word	0x00049cb8
   331b4:	000499cc 	.word	0x000499cc
   331b8:	000499c0 	.word	0x000499c0

000331bc <ll_rx_mem_release>:
{
   331bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
   331c0:	6804      	ldr	r4, [r0, #0]
{
   331c2:	4680      	mov	r8, r0
	while (rx) {
   331c4:	b344      	cbz	r4, 33218 <ll_rx_mem_release+0x5c>
			LL_ASSERT(0);
   331c6:	4f56      	ldr	r7, [pc, #344]	; (33320 <ll_rx_mem_release+0x164>)
   331c8:	f8df 9158 	ldr.w	r9, [pc, #344]	; 33324 <ll_rx_mem_release+0x168>
   331cc:	4e56      	ldr	r6, [pc, #344]	; (33328 <ll_rx_mem_release+0x16c>)
		rx = rx->next;
   331ce:	4625      	mov	r5, r4
   331d0:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
   331d2:	792b      	ldrb	r3, [r5, #4]
   331d4:	2b1d      	cmp	r3, #29
   331d6:	d810      	bhi.n	331fa <ll_rx_mem_release+0x3e>
   331d8:	e8df f003 	tbb	[pc, r3]
   331dc:	380f0f38 	.word	0x380f0f38
   331e0:	0f0f0f0f 	.word	0x0f0f0f0f
   331e4:	0f0f0f0f 	.word	0x0f0f0f0f
   331e8:	0f0f0f0f 	.word	0x0f0f0f0f
   331ec:	0f0f0f0f 	.word	0x0f0f0f0f
   331f0:	260f0f0f 	.word	0x260f0f0f
   331f4:	38383856 	.word	0x38383856
   331f8:	3838      	.short	0x3838
			LL_ASSERT(0);
   331fa:	f240 6369 	movw	r3, #1641	; 0x669
   331fe:	463a      	mov	r2, r7
   33200:	4649      	mov	r1, r9
   33202:	4630      	mov	r0, r6
   33204:	f00f f9e0 	bl	425c8 <assert_print>
   33208:	4040      	eors	r0, r0
   3320a:	f380 8811 	msr	BASEPRI, r0
   3320e:	f04f 0003 	mov.w	r0, #3
   33212:	df02      	svc	2
	while (rx) {
   33214:	2c00      	cmp	r4, #0
   33216:	d1da      	bne.n	331ce <ll_rx_mem_release+0x12>
	*node_rx = rx;
   33218:	2300      	movs	r3, #0
   3321a:	f8c8 3000 	str.w	r3, [r8]
}
   3321e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_replenish(UINT8_MAX);
   33222:	20ff      	movs	r0, #255	; 0xff
   33224:	f7ff bc8a 	b.w	32b3c <rx_replenish>
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   33228:	7f2b      	ldrb	r3, [r5, #28]
   3322a:	2b3c      	cmp	r3, #60	; 0x3c
   3322c:	d062      	beq.n	332f4 <ll_rx_mem_release+0x138>
				LL_ASSERT(!cc->status);
   3322e:	b1db      	cbz	r3, 33268 <ll_rx_mem_release+0xac>
   33230:	4a3b      	ldr	r2, [pc, #236]	; (33320 <ll_rx_mem_release+0x164>)
   33232:	493e      	ldr	r1, [pc, #248]	; (3332c <ll_rx_mem_release+0x170>)
   33234:	483c      	ldr	r0, [pc, #240]	; (33328 <ll_rx_mem_release+0x16c>)
   33236:	f44f 63b3 	mov.w	r3, #1432	; 0x598
   3323a:	f00f f9c5 	bl	425c8 <assert_print>
   3323e:	4040      	eors	r0, r0
   33240:	f380 8811 	msr	BASEPRI, r0
   33244:	f04f 0003 	mov.w	r0, #3
   33248:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   3324a:	792b      	ldrb	r3, [r5, #4]
   3324c:	b963      	cbnz	r3, 33268 <ll_rx_mem_release+0xac>
   3324e:	4938      	ldr	r1, [pc, #224]	; (33330 <ll_rx_mem_release+0x174>)
   33250:	f240 53ea 	movw	r3, #1514	; 0x5ea
   33254:	463a      	mov	r2, r7
   33256:	4630      	mov	r0, r6
   33258:	f00f f9b6 	bl	425c8 <assert_print>
   3325c:	4040      	eors	r0, r0
   3325e:	f380 8811 	msr	BASEPRI, r0
   33262:	f04f 0003 	mov.w	r0, #3
   33266:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   33268:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 33334 <ll_rx_mem_release+0x178>
   3326c:	f8ba 3000 	ldrh.w	r3, [sl]
   33270:	2b04      	cmp	r3, #4
   33272:	d82f      	bhi.n	332d4 <ll_rx_mem_release+0x118>
	mem_link_rx.quota_pdu += delta;
   33274:	3301      	adds	r3, #1
	mem_release(node_rx, &mem_pdu_rx.free);
   33276:	4930      	ldr	r1, [pc, #192]	; (33338 <ll_rx_mem_release+0x17c>)
	mem_link_rx.quota_pdu += delta;
   33278:	f8aa 3000 	strh.w	r3, [sl]
	mem_release(node_rx, &mem_pdu_rx.free);
   3327c:	4628      	mov	r0, r5
   3327e:	f7fc fee3 	bl	30048 <mem_release>
	while (rx) {
   33282:	2c00      	cmp	r4, #0
   33284:	d1a3      	bne.n	331ce <ll_rx_mem_release+0x12>
   33286:	e7c7      	b.n	33218 <ll_rx_mem_release+0x5c>
			if (IS_ACL_HANDLE(rx_free->handle)) {
   33288:	88e8      	ldrh	r0, [r5, #6]
   3328a:	2800      	cmp	r0, #0
   3328c:	d1c2      	bne.n	33214 <ll_rx_mem_release+0x58>
				conn = ll_conn_get(rx_free->handle);
   3328e:	f002 f89f 	bl	353d0 <ll_conn_get>
				LL_ASSERT(!conn->lll.link_tx_free);
   33292:	6f43      	ldr	r3, [r0, #116]	; 0x74
				conn = ll_conn_get(rx_free->handle);
   33294:	4605      	mov	r5, r0
				LL_ASSERT(!conn->lll.link_tx_free);
   33296:	b163      	cbz	r3, 332b2 <ll_rx_mem_release+0xf6>
   33298:	4a21      	ldr	r2, [pc, #132]	; (33320 <ll_rx_mem_release+0x164>)
   3329a:	4928      	ldr	r1, [pc, #160]	; (3333c <ll_rx_mem_release+0x180>)
   3329c:	4822      	ldr	r0, [pc, #136]	; (33328 <ll_rx_mem_release+0x16c>)
   3329e:	f240 635b 	movw	r3, #1627	; 0x65b
   332a2:	f00f f991 	bl	425c8 <assert_print>
   332a6:	4040      	eors	r0, r0
   332a8:	f380 8811 	msr	BASEPRI, r0
   332ac:	f04f 0003 	mov.w	r0, #3
   332b0:	df02      	svc	2
				link = memq_deinit(&conn->lll.memq_tx.head,
   332b2:	f105 0168 	add.w	r1, r5, #104	; 0x68
   332b6:	f105 0064 	add.w	r0, r5, #100	; 0x64
   332ba:	f7fc ff05 	bl	300c8 <memq_deinit>
				LL_ASSERT(link);
   332be:	4682      	mov	sl, r0
   332c0:	b300      	cbz	r0, 33304 <ll_rx_mem_release+0x148>
				conn->lll.link_tx_free = link;
   332c2:	f8c5 a074 	str.w	sl, [r5, #116]	; 0x74
				ll_conn_release(conn);
   332c6:	4628      	mov	r0, r5
   332c8:	f002 f874 	bl	353b4 <ll_conn_release>
	while (rx) {
   332cc:	2c00      	cmp	r4, #0
   332ce:	f47f af7e 	bne.w	331ce <ll_rx_mem_release+0x12>
   332d2:	e7a1      	b.n	33218 <ll_rx_mem_release+0x5c>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   332d4:	491a      	ldr	r1, [pc, #104]	; (33340 <ll_rx_mem_release+0x184>)
   332d6:	f240 6375 	movw	r3, #1653	; 0x675
   332da:	463a      	mov	r2, r7
   332dc:	4630      	mov	r0, r6
   332de:	f00f f973 	bl	425c8 <assert_print>
   332e2:	4040      	eors	r0, r0
   332e4:	f380 8811 	msr	BASEPRI, r0
   332e8:	f04f 0003 	mov.w	r0, #3
   332ec:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   332ee:	f8ba 3000 	ldrh.w	r3, [sl]
   332f2:	e7bf      	b.n	33274 <ll_rx_mem_release+0xb8>
	mem_release(node_rx, &mem_pdu_rx.free);
   332f4:	4910      	ldr	r1, [pc, #64]	; (33338 <ll_rx_mem_release+0x17c>)
   332f6:	4628      	mov	r0, r5
   332f8:	f7fc fea6 	bl	30048 <mem_release>
	while (rx) {
   332fc:	2c00      	cmp	r4, #0
   332fe:	f47f af66 	bne.w	331ce <ll_rx_mem_release+0x12>
   33302:	e789      	b.n	33218 <ll_rx_mem_release+0x5c>
				LL_ASSERT(link);
   33304:	4a06      	ldr	r2, [pc, #24]	; (33320 <ll_rx_mem_release+0x164>)
   33306:	490f      	ldr	r1, [pc, #60]	; (33344 <ll_rx_mem_release+0x188>)
   33308:	4807      	ldr	r0, [pc, #28]	; (33328 <ll_rx_mem_release+0x16c>)
   3330a:	f240 635e 	movw	r3, #1630	; 0x65e
   3330e:	f00f f95b 	bl	425c8 <assert_print>
   33312:	4040      	eors	r0, r0
   33314:	f380 8811 	msr	BASEPRI, r0
   33318:	f04f 0003 	mov.w	r0, #3
   3331c:	df02      	svc	2
   3331e:	e7d0      	b.n	332c2 <ll_rx_mem_release+0x106>
   33320:	00049914 	.word	0x00049914
   33324:	00049810 	.word	0x00049810
   33328:	000497b0 	.word	0x000497b0
   3332c:	00049a04 	.word	0x00049a04
   33330:	00049a10 	.word	0x00049a10
   33334:	200020bc 	.word	0x200020bc
   33338:	2000210c 	.word	0x2000210c
   3333c:	00049a34 	.word	0x00049a34
   33340:	00049984 	.word	0x00049984
   33344:	00049cb8 	.word	0x00049cb8

00033348 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   33348:	4801      	ldr	r0, [pc, #4]	; (33350 <ll_rx_link_alloc+0x8>)
   3334a:	f7fc be61 	b.w	30010 <mem_acquire>
   3334e:	bf00      	nop
   33350:	200020c0 	.word	0x200020c0

00033354 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   33354:	4901      	ldr	r1, [pc, #4]	; (3335c <ll_rx_link_release+0x8>)
   33356:	f7fc be77 	b.w	30048 <mem_release>
   3335a:	bf00      	nop
   3335c:	200020c0 	.word	0x200020c0

00033360 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
   33360:	4801      	ldr	r0, [pc, #4]	; (33368 <ll_rx_alloc+0x8>)
   33362:	f7fc be55 	b.w	30010 <mem_acquire>
   33366:	bf00      	nop
   33368:	2000210c 	.word	0x2000210c

0003336c <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
   3336c:	4901      	ldr	r1, [pc, #4]	; (33374 <ll_rx_release+0x8>)
   3336e:	f7fc be6b 	b.w	30048 <mem_release>
   33372:	bf00      	nop
   33374:	2000210c 	.word	0x2000210c

00033378 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   33378:	4b02      	ldr	r3, [pc, #8]	; (33384 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   3337a:	4a03      	ldr	r2, [pc, #12]	; (33388 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   3337c:	795b      	ldrb	r3, [r3, #5]
   3337e:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   33380:	f7fc beac 	b.w	300dc <memq_enqueue>
   33384:	200004b8 	.word	0x200004b8
   33388:	200020b0 	.word	0x200020b0

0003338c <ll_rx_sched>:
	k_sem_give(sem_recv);
   3338c:	4b01      	ldr	r3, [pc, #4]	; (33394 <ll_rx_sched+0x8>)
   3338e:	6818      	ldr	r0, [r3, #0]
   33390:	f00d bbea 	b.w	40b68 <z_impl_k_sem_give>
   33394:	20002318 	.word	0x20002318

00033398 <ll_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   33398:	490e      	ldr	r1, [pc, #56]	; (333d4 <ll_pdu_rx_alloc_peek+0x3c>)
   3339a:	790b      	ldrb	r3, [r1, #4]
   3339c:	794a      	ldrb	r2, [r1, #5]
	if (last >= first) {
   3339e:	4293      	cmp	r3, r2
   333a0:	d80d      	bhi.n	333be <ll_pdu_rx_alloc_peek+0x26>
		return last - first;
   333a2:	eba2 0c03 	sub.w	ip, r2, r3
   333a6:	fa5f fc8c 	uxtb.w	ip, ip
   333aa:	4560      	cmp	r0, ip
   333ac:	d80f      	bhi.n	333ce <ll_pdu_rx_alloc_peek+0x36>
	if (first == last) {
   333ae:	4293      	cmp	r3, r2
   333b0:	d00d      	beq.n	333ce <ll_pdu_rx_alloc_peek+0x36>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   333b2:	7809      	ldrb	r1, [r1, #0]
	return *((void **)(fifo + first * size));
   333b4:	4a08      	ldr	r2, [pc, #32]	; (333d8 <ll_pdu_rx_alloc_peek+0x40>)
   333b6:	fb13 f301 	smulbb	r3, r3, r1
   333ba:	58d0      	ldr	r0, [r2, r3]
   333bc:	4770      	bx	lr
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   333be:	f8b1 c002 	ldrh.w	ip, [r1, #2]
		return count - first + last;
   333c2:	ebac 0c03 	sub.w	ip, ip, r3
   333c6:	4462      	add	r2, ip
   333c8:	b2d2      	uxtb	r2, r2
   333ca:	4290      	cmp	r0, r2
   333cc:	d9f1      	bls.n	333b2 <ll_pdu_rx_alloc_peek+0x1a>
		return NULL;
   333ce:	2000      	movs	r0, #0
}
   333d0:	4770      	bx	lr
   333d2:	bf00      	nop
   333d4:	200004e0 	.word	0x200004e0
   333d8:	200004e8 	.word	0x200004e8

000333dc <ll_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   333dc:	4b09      	ldr	r3, [pc, #36]	; (33404 <ll_pdu_rx_alloc+0x28>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
   333de:	7919      	ldrb	r1, [r3, #4]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   333e0:	795a      	ldrb	r2, [r3, #5]
   333e2:	7818      	ldrb	r0, [r3, #0]
   333e4:	f893 c002 	ldrb.w	ip, [r3, #2]
   333e8:	428a      	cmp	r2, r1
   333ea:	d009      	beq.n	33400 <ll_pdu_rx_alloc+0x24>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   333ec:	1c4a      	adds	r2, r1, #1
	mem = *((void **)(fifo + _first * size));
   333ee:	fb01 3000 	mla	r0, r1, r0, r3
	_first += 1U;
   333f2:	b2d2      	uxtb	r2, r2
	if (_first == count) {
		_first = 0U;
   333f4:	4594      	cmp	ip, r2
   333f6:	bf08      	it	eq
   333f8:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   333fa:	6880      	ldr	r0, [r0, #8]
	}

	*first = _first; /* Write back read-index */
   333fc:	711a      	strb	r2, [r3, #4]

	return mem;
   333fe:	4770      	bx	lr
		return NULL;
   33400:	2000      	movs	r0, #0
}
   33402:	4770      	bx	lr
   33404:	200004e0 	.word	0x200004e0

00033408 <ll_tx_ack_put>:
{
   33408:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   3340a:	4c14      	ldr	r4, [pc, #80]	; (3345c <ll_tx_ack_put+0x54>)
   3340c:	7962      	ldrb	r2, [r4, #5]
	if (last == count) {
   3340e:	f894 e002 	ldrb.w	lr, [r4, #2]
   33412:	f894 c004 	ldrb.w	ip, [r4, #4]
   33416:	7825      	ldrb	r5, [r4, #0]
	last = last + 1;
   33418:	1c53      	adds	r3, r2, #1
   3341a:	b2db      	uxtb	r3, r3
		last = 0U;
   3341c:	459e      	cmp	lr, r3
   3341e:	bf08      	it	eq
   33420:	2300      	moveq	r3, #0
	if (last == first) {
   33422:	459c      	cmp	ip, r3
   33424:	d009      	beq.n	3343a <ll_tx_ack_put+0x32>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   33426:	fb12 f205 	smulbb	r2, r2, r5
   3342a:	f104 0c08 	add.w	ip, r4, #8
	tx->handle = handle;
   3342e:	f82c 0002 	strh.w	r0, [ip, r2]
   33432:	4462      	add	r2, ip
	tx->node = node_tx;
   33434:	6051      	str	r1, [r2, #4]
	*last = idx; /* Commit: Update write index */
   33436:	7163      	strb	r3, [r4, #5]
}
   33438:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(tx);
   3343a:	4a09      	ldr	r2, [pc, #36]	; (33460 <ll_tx_ack_put+0x58>)
   3343c:	4909      	ldr	r1, [pc, #36]	; (33464 <ll_tx_ack_put+0x5c>)
   3343e:	480a      	ldr	r0, [pc, #40]	; (33468 <ll_tx_ack_put+0x60>)
   33440:	f240 63c9 	movw	r3, #1737	; 0x6c9
   33444:	f00f f8c0 	bl	425c8 <assert_print>
   33448:	4040      	eors	r0, r0
   3344a:	f380 8811 	msr	BASEPRI, r0
   3344e:	f04f 0003 	mov.w	r0, #3
   33452:	df02      	svc	2
	tx->handle = handle;
   33454:	2300      	movs	r3, #0
   33456:	801b      	strh	r3, [r3, #0]
   33458:	deff      	udf	#255	; 0xff
   3345a:	bf00      	nop
   3345c:	200004b8 	.word	0x200004b8
   33460:	00049914 	.word	0x00049914
   33464:	00049cac 	.word	0x00049cac
   33468:	000497b0 	.word	0x000497b0

0003346c <ll_timeslice_ticker_id_get>:
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   3346c:	2200      	movs	r2, #0
	*ticker_id = (TICKER_NODES - FLASH_TICKER_NODES);
   3346e:	2304      	movs	r3, #4
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   33470:	7002      	strb	r2, [r0, #0]
	*ticker_id = (TICKER_NODES - FLASH_TICKER_NODES);
   33472:	700b      	strb	r3, [r1, #0]
}
   33474:	4770      	bx	lr
   33476:	bf00      	nop

00033478 <ll_radio_state_abort>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   33478:	2200      	movs	r2, #0
{
   3347a:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   3347c:	4611      	mov	r1, r2
   3347e:	4b0a      	ldr	r3, [pc, #40]	; (334a8 <ll_radio_state_abort+0x30>)
   33480:	2001      	movs	r0, #1
   33482:	f7fc fea1 	bl	301c8 <mayfly_enqueue>
	LL_ASSERT(!ret);
   33486:	b900      	cbnz	r0, 3348a <ll_radio_state_abort+0x12>
}
   33488:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   3348a:	4a08      	ldr	r2, [pc, #32]	; (334ac <ll_radio_state_abort+0x34>)
   3348c:	4908      	ldr	r1, [pc, #32]	; (334b0 <ll_radio_state_abort+0x38>)
   3348e:	4809      	ldr	r0, [pc, #36]	; (334b4 <ll_radio_state_abort+0x3c>)
   33490:	f240 63e1 	movw	r3, #1761	; 0x6e1
   33494:	f00f f898 	bl	425c8 <assert_print>
   33498:	4040      	eors	r0, r0
   3349a:	f380 8811 	msr	BASEPRI, r0
   3349e:	f04f 0003 	mov.w	r0, #3
   334a2:	df02      	svc	2
}
   334a4:	bd08      	pop	{r3, pc}
   334a6:	bf00      	nop
   334a8:	20000498 	.word	0x20000498
   334ac:	00049914 	.word	0x00049914
   334b0:	00049a4c 	.word	0x00049a4c
   334b4:	000497b0 	.word	0x000497b0

000334b8 <ull_ticker_status_take>:
	if (ret == TICKER_STATUS_BUSY) {
   334b8:	f030 0302 	bics.w	r3, r0, #2
{
   334bc:	b510      	push	{r4, lr}
   334be:	460c      	mov	r4, r1
	if (ret == TICKER_STATUS_BUSY) {
   334c0:	d002      	beq.n	334c8 <ull_ticker_status_take+0x10>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   334c2:	680b      	ldr	r3, [r1, #0]
   334c4:	2b02      	cmp	r3, #2
   334c6:	d008      	beq.n	334da <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
   334c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   334cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   334d0:	4809      	ldr	r0, [pc, #36]	; (334f8 <ull_ticker_status_take+0x40>)
   334d2:	f00d fb6f 	bl	40bb4 <z_impl_k_sem_take>
	return *ret_cb;
   334d6:	6820      	ldr	r0, [r4, #0]
}
   334d8:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   334da:	4a08      	ldr	r2, [pc, #32]	; (334fc <ull_ticker_status_take+0x44>)
   334dc:	4908      	ldr	r1, [pc, #32]	; (33500 <ull_ticker_status_take+0x48>)
   334de:	4809      	ldr	r0, [pc, #36]	; (33504 <ull_ticker_status_take+0x4c>)
   334e0:	f240 63fd 	movw	r3, #1789	; 0x6fd
   334e4:	f00f f870 	bl	425c8 <assert_print>
   334e8:	4040      	eors	r0, r0
   334ea:	f380 8811 	msr	BASEPRI, r0
   334ee:	f04f 0003 	mov.w	r0, #3
   334f2:	df02      	svc	2
   334f4:	e7e8      	b.n	334c8 <ull_ticker_status_take+0x10>
   334f6:	bf00      	nop
   334f8:	2000231c 	.word	0x2000231c
   334fc:	00049914 	.word	0x00049914
   33500:	00049a54 	.word	0x00049a54
   33504:	000497b0 	.word	0x000497b0

00033508 <ull_disable_mark>:
	if (!*m) {
   33508:	4904      	ldr	r1, [pc, #16]	; (3351c <ull_disable_mark+0x14>)
   3350a:	680a      	ldr	r2, [r1, #0]
   3350c:	b10a      	cbz	r2, 33512 <ull_disable_mark+0xa>
}
   3350e:	4610      	mov	r0, r2
   33510:	4770      	bx	lr
		*m = param;
   33512:	4602      	mov	r2, r0
   33514:	6008      	str	r0, [r1, #0]
}
   33516:	4610      	mov	r0, r2
   33518:	4770      	bx	lr
   3351a:	bf00      	nop
   3351c:	2000209c 	.word	0x2000209c

00033520 <ull_disable_unmark>:
	if (*m && *m == param) {
   33520:	4a04      	ldr	r2, [pc, #16]	; (33534 <ull_disable_unmark+0x14>)
   33522:	6813      	ldr	r3, [r2, #0]
   33524:	b123      	cbz	r3, 33530 <ull_disable_unmark+0x10>
   33526:	4298      	cmp	r0, r3
		*m = NULL;
   33528:	bf06      	itte	eq
   3352a:	2100      	moveq	r1, #0
   3352c:	6011      	streq	r1, [r2, #0]
	return NULL;
   3352e:	2300      	movne	r3, #0
}
   33530:	4618      	mov	r0, r3
   33532:	4770      	bx	lr
   33534:	2000209c 	.word	0x2000209c

00033538 <ull_disable_mark_get>:
	return mark_get(mark_disable);
   33538:	4b01      	ldr	r3, [pc, #4]	; (33540 <ull_disable_mark_get+0x8>)
}
   3353a:	6818      	ldr	r0, [r3, #0]
   3353c:	4770      	bx	lr
   3353e:	bf00      	nop
   33540:	2000209c 	.word	0x2000209c

00033544 <ull_update_mark>:
	if (!*m) {
   33544:	4904      	ldr	r1, [pc, #16]	; (33558 <ull_update_mark+0x14>)
   33546:	680a      	ldr	r2, [r1, #0]
   33548:	b10a      	cbz	r2, 3354e <ull_update_mark+0xa>
}
   3354a:	4610      	mov	r0, r2
   3354c:	4770      	bx	lr
		*m = param;
   3354e:	4602      	mov	r2, r0
   33550:	6008      	str	r0, [r1, #0]
}
   33552:	4610      	mov	r0, r2
   33554:	4770      	bx	lr
   33556:	bf00      	nop
   33558:	200020a0 	.word	0x200020a0

0003355c <ull_update_unmark>:
	if (*m && *m == param) {
   3355c:	4a04      	ldr	r2, [pc, #16]	; (33570 <ull_update_unmark+0x14>)
   3355e:	6813      	ldr	r3, [r2, #0]
   33560:	b123      	cbz	r3, 3356c <ull_update_unmark+0x10>
   33562:	4298      	cmp	r0, r3
		*m = NULL;
   33564:	bf06      	itte	eq
   33566:	2100      	moveq	r1, #0
   33568:	6011      	streq	r1, [r2, #0]
	return NULL;
   3356a:	2300      	movne	r3, #0
}
   3356c:	4618      	mov	r0, r3
   3356e:	4770      	bx	lr
   33570:	200020a0 	.word	0x200020a0

00033574 <ull_update_mark_get>:
	return mark_get(mark_update);
   33574:	4b01      	ldr	r3, [pc, #4]	; (3357c <ull_update_mark_get+0x8>)
}
   33576:	6818      	ldr	r0, [r3, #0]
   33578:	4770      	bx	lr
   3357a:	bf00      	nop
   3357c:	200020a0 	.word	0x200020a0

00033580 <ull_disable>:
{
   33580:	b530      	push	{r4, r5, lr}
	hdr = HDR_LLL2ULL(lll);
   33582:	6805      	ldr	r5, [r0, #0]
   33584:	782b      	ldrb	r3, [r5, #0]
{
   33586:	b087      	sub	sp, #28
	if (!ull_ref_get(hdr)) {
   33588:	b353      	cbz	r3, 335e0 <ull_disable+0x60>
	compiler_barrier();
   3358a:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
   3358c:	2201      	movs	r2, #1
   3358e:	2100      	movs	r1, #0
   33590:	4668      	mov	r0, sp
   33592:	f014 fdba 	bl	4810a <z_impl_k_sem_init>
   33596:	782b      	ldrb	r3, [r5, #0]
	hdr->disabled_cb = disabled_cb;
   33598:	4a13      	ldr	r2, [pc, #76]	; (335e8 <ull_disable+0x68>)
	hdr->disabled_param = &sem;
   3359a:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
   3359e:	616a      	str	r2, [r5, #20]
	if (!ull_ref_get(hdr)) {
   335a0:	b1f3      	cbz	r3, 335e0 <ull_disable+0x60>
	mfy.param = lll;
   335a2:	4b12      	ldr	r3, [pc, #72]	; (335ec <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   335a4:	2200      	movs	r2, #0
   335a6:	4611      	mov	r1, r2
   335a8:	2003      	movs	r0, #3
	mfy.param = lll;
   335aa:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   335ac:	f7fc fe0c 	bl	301c8 <mayfly_enqueue>
	LL_ASSERT(!ret);
   335b0:	b940      	cbnz	r0, 335c4 <ull_disable+0x44>
	return z_impl_k_sem_take(sem, timeout);
   335b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   335b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   335ba:	4668      	mov	r0, sp
   335bc:	f00d fafa 	bl	40bb4 <z_impl_k_sem_take>
}
   335c0:	b007      	add	sp, #28
   335c2:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   335c4:	4a0a      	ldr	r2, [pc, #40]	; (335f0 <ull_disable+0x70>)
   335c6:	490b      	ldr	r1, [pc, #44]	; (335f4 <ull_disable+0x74>)
   335c8:	480b      	ldr	r0, [pc, #44]	; (335f8 <ull_disable+0x78>)
   335ca:	f240 737a 	movw	r3, #1914	; 0x77a
   335ce:	f00e fffb 	bl	425c8 <assert_print>
   335d2:	4040      	eors	r0, r0
   335d4:	f380 8811 	msr	BASEPRI, r0
   335d8:	f04f 0003 	mov.w	r0, #3
   335dc:	df02      	svc	2
   335de:	e7e8      	b.n	335b2 <ull_disable+0x32>
		return -EALREADY;
   335e0:	f06f 0077 	mvn.w	r0, #119	; 0x77
   335e4:	e7ec      	b.n	335c0 <ull_disable+0x40>
   335e6:	bf00      	nop
   335e8:	00032a85 	.word	0x00032a85
   335ec:	20000488 	.word	0x20000488
   335f0:	00049914 	.word	0x00049914
   335f4:	00049a4c 	.word	0x00049a4c
   335f8:	000497b0 	.word	0x000497b0

000335fc <ull_ticker_stop_with_mark>:
{
   335fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!*m) {
   335fe:	4e1e      	ldr	r6, [pc, #120]	; (33678 <ull_ticker_stop_with_mark+0x7c>)
   33600:	6833      	ldr	r3, [r6, #0]
{
   33602:	b085      	sub	sp, #20
   33604:	460c      	mov	r4, r1
   33606:	4617      	mov	r7, r2
	if (!*m) {
   33608:	b353      	cbz	r3, 33660 <ull_ticker_stop_with_mark+0x64>
	if (mark != param) {
   3360a:	4299      	cmp	r1, r3
   3360c:	d113      	bne.n	33636 <ull_ticker_stop_with_mark+0x3a>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   3360e:	ad03      	add	r5, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
   33610:	2302      	movs	r3, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   33612:	4602      	mov	r2, r0
	ret_cb = TICKER_STATUS_BUSY;
   33614:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   33616:	9500      	str	r5, [sp, #0]
   33618:	4b18      	ldr	r3, [pc, #96]	; (3367c <ull_ticker_stop_with_mark+0x80>)
   3361a:	2103      	movs	r1, #3
   3361c:	2000      	movs	r0, #0
   3361e:	f7fd ff53 	bl	314c8 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   33622:	4629      	mov	r1, r5
   33624:	f7ff ff48 	bl	334b8 <ull_ticker_status_take>
	if (ret) {
   33628:	4605      	mov	r5, r0
   3362a:	b140      	cbz	r0, 3363e <ull_ticker_stop_with_mark+0x42>
	if (*m && *m == param) {
   3362c:	6833      	ldr	r3, [r6, #0]
   3362e:	b10b      	cbz	r3, 33634 <ull_ticker_stop_with_mark+0x38>
   33630:	429c      	cmp	r4, r3
   33632:	d017      	beq.n	33664 <ull_ticker_stop_with_mark+0x68>
		if (mark != param) {
   33634:	b1c4      	cbz	r4, 33668 <ull_ticker_stop_with_mark+0x6c>
		return -ENOLCK;
   33636:	f06f 002d 	mvn.w	r0, #45	; 0x2d
}
   3363a:	b005      	add	sp, #20
   3363c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = ull_disable(lll_disable);
   3363e:	4638      	mov	r0, r7
   33640:	f7ff ff9e 	bl	33580 <ull_disable>
	if (*m && *m == param) {
   33644:	6833      	ldr	r3, [r6, #0]
   33646:	b10b      	cbz	r3, 3364c <ull_ticker_stop_with_mark+0x50>
   33648:	429c      	cmp	r4, r3
   3364a:	d011      	beq.n	33670 <ull_ticker_stop_with_mark+0x74>
	if (mark != param) {
   3364c:	2c00      	cmp	r4, #0
   3364e:	d1f2      	bne.n	33636 <ull_ticker_stop_with_mark+0x3a>
	if (err && (err != -EALREADY)) {
   33650:	2800      	cmp	r0, #0
   33652:	d0f2      	beq.n	3363a <ull_ticker_stop_with_mark+0x3e>
	return 0;
   33654:	f110 0f78 	cmn.w	r0, #120	; 0x78
   33658:	bf08      	it	eq
   3365a:	2000      	moveq	r0, #0
}
   3365c:	b005      	add	sp, #20
   3365e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = param;
   33660:	6031      	str	r1, [r6, #0]
	if (mark != param) {
   33662:	e7d4      	b.n	3360e <ull_ticker_stop_with_mark+0x12>
		*m = NULL;
   33664:	2300      	movs	r3, #0
   33666:	6033      	str	r3, [r6, #0]
		return -EALREADY;
   33668:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   3366c:	b005      	add	sp, #20
   3366e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = NULL;
   33670:	6035      	str	r5, [r6, #0]
	if (err && (err != -EALREADY)) {
   33672:	2800      	cmp	r0, #0
   33674:	d0e1      	beq.n	3363a <ull_ticker_stop_with_mark+0x3e>
   33676:	e7ed      	b.n	33654 <ull_ticker_stop_with_mark+0x58>
   33678:	2000209c 	.word	0x2000209c
   3367c:	00032a79 	.word	0x00032a79

00033680 <ull_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   33680:	490e      	ldr	r1, [pc, #56]	; (336bc <ull_pdu_rx_alloc_peek+0x3c>)
   33682:	790b      	ldrb	r3, [r1, #4]
   33684:	794a      	ldrb	r2, [r1, #5]
	if (last >= first) {
   33686:	4293      	cmp	r3, r2
   33688:	d80d      	bhi.n	336a6 <ull_pdu_rx_alloc_peek+0x26>
		return last - first;
   3368a:	eba2 0c03 	sub.w	ip, r2, r3
   3368e:	fa5f fc8c 	uxtb.w	ip, ip
   33692:	4560      	cmp	r0, ip
   33694:	d80f      	bhi.n	336b6 <ull_pdu_rx_alloc_peek+0x36>
	if (first == last) {
   33696:	4293      	cmp	r3, r2
   33698:	d00d      	beq.n	336b6 <ull_pdu_rx_alloc_peek+0x36>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   3369a:	7809      	ldrb	r1, [r1, #0]
	return *((void **)(fifo + first * size));
   3369c:	4a08      	ldr	r2, [pc, #32]	; (336c0 <ull_pdu_rx_alloc_peek+0x40>)
   3369e:	fb13 f301 	smulbb	r3, r3, r1
   336a2:	58d0      	ldr	r0, [r2, r3]
   336a4:	4770      	bx	lr
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   336a6:	f8b1 c002 	ldrh.w	ip, [r1, #2]
		return count - first + last;
   336aa:	ebac 0c03 	sub.w	ip, ip, r3
   336ae:	4462      	add	r2, ip
   336b0:	b2d2      	uxtb	r2, r2
   336b2:	4290      	cmp	r0, r2
   336b4:	d9f1      	bls.n	3369a <ull_pdu_rx_alloc_peek+0x1a>
		return NULL;
   336b6:	2000      	movs	r0, #0
}
   336b8:	4770      	bx	lr
   336ba:	bf00      	nop
   336bc:	200004f0 	.word	0x200004f0
   336c0:	200004f8 	.word	0x200004f8

000336c4 <ull_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(pdu_rx_free);
   336c4:	4b09      	ldr	r3, [pc, #36]	; (336ec <ull_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   336c6:	7919      	ldrb	r1, [r3, #4]
	if (_first == last) {
   336c8:	795a      	ldrb	r2, [r3, #5]
   336ca:	7818      	ldrb	r0, [r3, #0]
   336cc:	f893 c002 	ldrb.w	ip, [r3, #2]
   336d0:	428a      	cmp	r2, r1
   336d2:	d009      	beq.n	336e8 <ull_pdu_rx_alloc+0x24>
	_first += 1U;
   336d4:	1c4a      	adds	r2, r1, #1
	mem = *((void **)(fifo + _first * size));
   336d6:	fb01 3000 	mla	r0, r1, r0, r3
	_first += 1U;
   336da:	b2d2      	uxtb	r2, r2
		_first = 0U;
   336dc:	4594      	cmp	ip, r2
   336de:	bf08      	it	eq
   336e0:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   336e2:	6880      	ldr	r0, [r0, #8]
	*first = _first; /* Write back read-index */
   336e4:	711a      	strb	r2, [r3, #4]
	return mem;
   336e6:	4770      	bx	lr
		return NULL;
   336e8:	2000      	movs	r0, #0
}
   336ea:	4770      	bx	lr
   336ec:	200004f0 	.word	0x200004f0

000336f0 <ull_rx_put>:
{
   336f0:	b538      	push	{r3, r4, r5, lr}
   336f2:	460c      	mov	r4, r1
   336f4:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   336f6:	f005 fb5d 	bl	38db4 <ull_conn_ack_last_idx_get>
   336fa:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   336fc:	4621      	mov	r1, r4
   336fe:	4628      	mov	r0, r5
   33700:	4a02      	ldr	r2, [pc, #8]	; (3370c <ull_rx_put+0x1c>)
}
   33702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   33706:	f7fc bce9 	b.w	300dc <memq_enqueue>
   3370a:	bf00      	nop
   3370c:	200020b8 	.word	0x200020b8

00033710 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   33710:	2201      	movs	r2, #1
   33712:	4b02      	ldr	r3, [pc, #8]	; (3371c <ull_rx_sched+0xc>)
   33714:	4611      	mov	r1, r2
   33716:	2000      	movs	r0, #0
   33718:	f7fc bd56 	b.w	301c8 <mayfly_enqueue>
   3371c:	20000478 	.word	0x20000478

00033720 <ull_prepare_enqueue>:
{
   33720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   33724:	4e16      	ldr	r6, [pc, #88]	; (33780 <ull_prepare_enqueue+0x60>)
{
   33726:	f89d a020 	ldrb.w	sl, [sp, #32]
   3372a:	4699      	mov	r9, r3
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   3372c:	7973      	ldrb	r3, [r6, #5]
{
   3372e:	460f      	mov	r7, r1
	last = last + 1;
   33730:	1c5d      	adds	r5, r3, #1
   33732:	4611      	mov	r1, r2
	if (last == count) {
   33734:	78b2      	ldrb	r2, [r6, #2]
	last = last + 1;
   33736:	b2ed      	uxtb	r5, r5
		last = 0U;
   33738:	42aa      	cmp	r2, r5
   3373a:	bf08      	it	eq
   3373c:	2500      	moveq	r5, #0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   3373e:	7932      	ldrb	r2, [r6, #4]
	if (last == first) {
   33740:	42aa      	cmp	r2, r5
{
   33742:	4680      	mov	r8, r0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   33744:	7830      	ldrb	r0, [r6, #0]
   33746:	d016      	beq.n	33776 <ull_prepare_enqueue+0x56>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   33748:	f106 0408 	add.w	r4, r6, #8
   3374c:	fb03 4400 	mla	r4, r3, r0, r4
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
   33750:	2210      	movs	r2, #16
   33752:	4620      	mov	r0, r4
   33754:	f010 fde0 	bl	44318 <memcpy>
	e->is_resume = is_resume;
   33758:	7f23      	ldrb	r3, [r4, #28]
	e->abort_cb = abort_cb;
   3375a:	61a7      	str	r7, [r4, #24]
	e->is_resume = is_resume;
   3375c:	f00a 0a01 	and.w	sl, sl, #1
   33760:	f023 0303 	bic.w	r3, r3, #3
   33764:	ea43 030a 	orr.w	r3, r3, sl
	e->is_abort_cb = is_abort_cb;
   33768:	e9c4 9804 	strd	r9, r8, [r4, #16]
	e->is_resume = is_resume;
   3376c:	7723      	strb	r3, [r4, #28]
	*last = idx; /* Commit: Update write index */
   3376e:	7175      	strb	r5, [r6, #5]
}
   33770:	4620      	mov	r0, r4
   33772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return NULL;
   33776:	2400      	movs	r4, #0
}
   33778:	4620      	mov	r0, r4
   3377a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3377e:	bf00      	nop
   33780:	20000600 	.word	0x20000600

00033784 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   33784:	4805      	ldr	r0, [pc, #20]	; (3379c <ull_prepare_dequeue_get+0x18>)
   33786:	7902      	ldrb	r2, [r0, #4]
	if (first == last) {
   33788:	7941      	ldrb	r1, [r0, #5]
   3378a:	f890 c000 	ldrb.w	ip, [r0]
   3378e:	4291      	cmp	r1, r2
	return (void *)(fifo + first * size);
   33790:	bf1a      	itte	ne
   33792:	3008      	addne	r0, #8
   33794:	fb02 000c 	mlane	r0, r2, ip, r0
		return NULL;
   33798:	2000      	moveq	r0, #0
}
   3379a:	4770      	bx	lr
   3379c:	20000600 	.word	0x20000600

000337a0 <ull_prepare_dequeue_iter>:
{
   337a0:	b500      	push	{lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   337a2:	4b0d      	ldr	r3, [pc, #52]	; (337d8 <ull_prepare_dequeue_iter+0x38>)
	if (*idx >= count) {
   337a4:	7802      	ldrb	r2, [r0, #0]
   337a6:	7899      	ldrb	r1, [r3, #2]
   337a8:	f893 c005 	ldrb.w	ip, [r3, #5]
   337ac:	f893 e000 	ldrb.w	lr, [r3]
   337b0:	4291      	cmp	r1, r2
   337b2:	bf9c      	itt	ls
   337b4:	791a      	ldrbls	r2, [r3, #4]
		*idx = first;
   337b6:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
   337b8:	4594      	cmp	ip, r2
   337ba:	d00a      	beq.n	337d2 <ull_prepare_dequeue_iter+0x32>
	i = *idx + 1;
   337bc:	1c53      	adds	r3, r2, #1
   337be:	b2db      	uxtb	r3, r3
		i = 0U;
   337c0:	4299      	cmp	r1, r3
   337c2:	bf08      	it	eq
   337c4:	2300      	moveq	r3, #0
	p = (void *)(fifo + (*idx) * size);
   337c6:	4905      	ldr	r1, [pc, #20]	; (337dc <ull_prepare_dequeue_iter+0x3c>)
	*idx = i;
   337c8:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
   337ca:	fb02 100e 	mla	r0, r2, lr, r1
}
   337ce:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   337d2:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   337d4:	e7fb      	b.n	337ce <ull_prepare_dequeue_iter+0x2e>
   337d6:	bf00      	nop
   337d8:	20000600 	.word	0x20000600
   337dc:	20000608 	.word	0x20000608

000337e0 <ull_prepare_dequeue>:
{
   337e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return MFIFO_DEQUEUE_GET(prep);
   337e4:	4c2b      	ldr	r4, [pc, #172]	; (33894 <ull_prepare_dequeue+0xb4>)
   337e6:	7922      	ldrb	r2, [r4, #4]
	if (first == last) {
   337e8:	7961      	ldrb	r1, [r4, #5]
   337ea:	7823      	ldrb	r3, [r4, #0]
{
   337ec:	b083      	sub	sp, #12
   337ee:	4291      	cmp	r1, r2
   337f0:	9001      	str	r0, [sp, #4]
   337f2:	d032      	beq.n	3385a <ull_prepare_dequeue+0x7a>
	return (void *)(fifo + first * size);
   337f4:	f104 0908 	add.w	r9, r4, #8
   337f8:	f04f 0800 	mov.w	r8, #0
			mfy.param = next;
   337fc:	f8df b098 	ldr.w	fp, [pc, #152]	; 33898 <ull_prepare_dequeue+0xb8>
   33800:	fb02 9303 	mla	r3, r2, r3, r9
   33804:	46c2      	mov	sl, r8
		uint8_t is_aborted = next->is_aborted;
   33806:	7f1a      	ldrb	r2, [r3, #28]
		void *param = next->prepare_param.param;
   33808:	68df      	ldr	r7, [r3, #12]
		if (!is_aborted) {
   3380a:	0791      	lsls	r1, r2, #30
		uint8_t is_aborted = next->is_aborted;
   3380c:	f3c2 0540 	ubfx	r5, r2, #1, #1
		uint8_t is_resume = next->is_resume;
   33810:	f002 0601 	and.w	r6, r2, #1
		if (!is_aborted) {
   33814:	d524      	bpl.n	33860 <ull_prepare_dequeue+0x80>
		MFIFO_DEQUEUE(prep);
   33816:	7961      	ldrb	r1, [r4, #5]
	uint8_t _first = *first; /* Copy read-index */
   33818:	7923      	ldrb	r3, [r4, #4]
   3381a:	7822      	ldrb	r2, [r4, #0]
   3381c:	78a0      	ldrb	r0, [r4, #2]
	if (_first == last) {
   3381e:	4299      	cmp	r1, r3
   33820:	d01b      	beq.n	3385a <ull_prepare_dequeue+0x7a>
	_first += 1U;
   33822:	3301      	adds	r3, #1
   33824:	b2db      	uxtb	r3, r3
		_first = 0U;
   33826:	4298      	cmp	r0, r3
   33828:	bf08      	it	eq
   3382a:	2300      	moveq	r3, #0
	if (first == last) {
   3382c:	4299      	cmp	r1, r3
	*first = _first; /* Write back read-index */
   3382e:	7123      	strb	r3, [r4, #4]
	if (first == last) {
   33830:	d013      	beq.n	3385a <ull_prepare_dequeue+0x7a>
	return (void *)(fifo + first * size);
   33832:	fb03 9302 	mla	r3, r3, r2, r9
		if (!is_aborted) {
   33836:	2d00      	cmp	r5, #0
   33838:	d1e5      	bne.n	33806 <ull_prepare_dequeue+0x26>
			if (!is_resume) {
   3383a:	b176      	cbz	r6, 3385a <ull_prepare_dequeue+0x7a>
			if (!param_resume_head) {
   3383c:	f1ba 0f00 	cmp.w	sl, #0
   33840:	d026      	beq.n	33890 <ull_prepare_dequeue+0xb0>
				param_resume_next = param;
   33842:	f1b8 0f00 	cmp.w	r8, #0
   33846:	bf08      	it	eq
   33848:	46b8      	moveq	r8, r7
			if (next->is_resume &&
   3384a:	7f1a      	ldrb	r2, [r3, #28]
   3384c:	07d2      	lsls	r2, r2, #31
   3384e:	d5da      	bpl.n	33806 <ull_prepare_dequeue+0x26>
			    ((next->prepare_param.param ==
   33850:	68da      	ldr	r2, [r3, #12]
			if (next->is_resume &&
   33852:	4592      	cmp	sl, r2
   33854:	d001      	beq.n	3385a <ull_prepare_dequeue+0x7a>
			      param_resume_head) ||
   33856:	4590      	cmp	r8, r2
   33858:	d1d5      	bne.n	33806 <ull_prepare_dequeue+0x26>
}
   3385a:	b003      	add	sp, #12
   3385c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mfy.param = next;
   33860:	f8cb 3008 	str.w	r3, [fp, #8]
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
   33864:	9801      	ldr	r0, [sp, #4]
   33866:	4b0c      	ldr	r3, [pc, #48]	; (33898 <ull_prepare_dequeue+0xb8>)
   33868:	462a      	mov	r2, r5
   3386a:	4629      	mov	r1, r5
   3386c:	f7fc fcac 	bl	301c8 <mayfly_enqueue>
			LL_ASSERT(!ret);
   33870:	2800      	cmp	r0, #0
   33872:	d0d0      	beq.n	33816 <ull_prepare_dequeue+0x36>
   33874:	4a09      	ldr	r2, [pc, #36]	; (3389c <ull_prepare_dequeue+0xbc>)
   33876:	490a      	ldr	r1, [pc, #40]	; (338a0 <ull_prepare_dequeue+0xc0>)
   33878:	480a      	ldr	r0, [pc, #40]	; (338a4 <ull_prepare_dequeue+0xc4>)
   3387a:	f240 73f7 	movw	r3, #2039	; 0x7f7
   3387e:	f00e fea3 	bl	425c8 <assert_print>
   33882:	4040      	eors	r0, r0
   33884:	f380 8811 	msr	BASEPRI, r0
   33888:	f04f 0003 	mov.w	r0, #3
   3388c:	df02      	svc	2
   3388e:	e7c2      	b.n	33816 <ull_prepare_dequeue+0x36>
				param_resume_head = param;
   33890:	46ba      	mov	sl, r7
   33892:	e7da      	b.n	3384a <ull_prepare_dequeue+0x6a>
   33894:	20000600 	.word	0x20000600
   33898:	20000458 	.word	0x20000458
   3389c:	00049914 	.word	0x00049914
   338a0:	00049a4c 	.word	0x00049a4c
   338a4:	000497b0 	.word	0x000497b0

000338a8 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   338a8:	4b06      	ldr	r3, [pc, #24]	; (338c4 <ull_event_done_extra_get+0x1c>)
   338aa:	791a      	ldrb	r2, [r3, #4]
	if (first == last) {
   338ac:	7959      	ldrb	r1, [r3, #5]
   338ae:	7818      	ldrb	r0, [r3, #0]
   338b0:	4291      	cmp	r1, r2
   338b2:	d005      	beq.n	338c0 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   338b4:	fb02 3300 	mla	r3, r2, r0, r3
   338b8:	6898      	ldr	r0, [r3, #8]
	if (!evdone) {
   338ba:	b110      	cbz	r0, 338c2 <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   338bc:	3020      	adds	r0, #32
   338be:	4770      	bx	lr
		return NULL;
   338c0:	2000      	movs	r0, #0
}
   338c2:	4770      	bx	lr
   338c4:	200005e4 	.word	0x200005e4

000338c8 <ull_event_done>:
{
   338c8:	b538      	push	{r3, r4, r5, lr}
	evdone = MFIFO_DEQUEUE(done);
   338ca:	4a13      	ldr	r2, [pc, #76]	; (33918 <ull_event_done+0x50>)
	uint8_t _first = *first; /* Copy read-index */
   338cc:	7913      	ldrb	r3, [r2, #4]
	if (_first == last) {
   338ce:	7955      	ldrb	r5, [r2, #5]
   338d0:	7814      	ldrb	r4, [r2, #0]
   338d2:	429d      	cmp	r5, r3
{
   338d4:	4601      	mov	r1, r0
	evdone = MFIFO_DEQUEUE(done);
   338d6:	7890      	ldrb	r0, [r2, #2]
   338d8:	d01b      	beq.n	33912 <ull_event_done+0x4a>
	mem = *((void **)(fifo + _first * size));
   338da:	fb03 2404 	mla	r4, r3, r4, r2
	_first += 1U;
   338de:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   338e0:	68a4      	ldr	r4, [r4, #8]
	_first += 1U;
   338e2:	b2db      	uxtb	r3, r3
		_first = 0U;
   338e4:	4298      	cmp	r0, r3
   338e6:	bf08      	it	eq
   338e8:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   338ea:	7113      	strb	r3, [r2, #4]
	if (!evdone) {
   338ec:	b18c      	cbz	r4, 33912 <ull_event_done+0x4a>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   338ee:	2302      	movs	r3, #2
	evdone->hdr.link = NULL;
   338f0:	2500      	movs	r5, #0
	link = evdone->hdr.link;
   338f2:	6820      	ldr	r0, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
   338f4:	4a09      	ldr	r2, [pc, #36]	; (3391c <ull_event_done+0x54>)
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   338f6:	7123      	strb	r3, [r4, #4]
	evdone->param = param;
   338f8:	61e1      	str	r1, [r4, #28]
	evdone->hdr.link = NULL;
   338fa:	6025      	str	r5, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
   338fc:	4621      	mov	r1, r4
   338fe:	f7fc fbed 	bl	300dc <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   33902:	2201      	movs	r2, #1
   33904:	4b06      	ldr	r3, [pc, #24]	; (33920 <ull_event_done+0x58>)
   33906:	4611      	mov	r1, r2
   33908:	4628      	mov	r0, r5
   3390a:	f7fc fc5d 	bl	301c8 <mayfly_enqueue>
}
   3390e:	4620      	mov	r0, r4
   33910:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   33912:	2400      	movs	r4, #0
   33914:	e7fb      	b.n	3390e <ull_event_done+0x46>
   33916:	bf00      	nop
   33918:	200005e4 	.word	0x200005e4
   3391c:	200020a8 	.word	0x200020a8
   33920:	20000468 	.word	0x20000468

00033924 <ull_rxfifo_alloc>:
{
   33924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33928:	b083      	sub	sp, #12
   3392a:	461d      	mov	r5, r3
   3392c:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   33930:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   33932:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
   33936:	9401      	str	r4, [sp, #4]
   33938:	4617      	mov	r7, r2
   3393a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   3393c:	9200      	str	r2, [sp, #0]
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   3393e:	b353      	cbz	r3, 33996 <ull_rxfifo_alloc+0x72>
   33940:	1e5c      	subs	r4, r3, #1
   33942:	f895 a000 	ldrb.w	sl, [r5]
   33946:	4680      	mov	r8, r0
   33948:	460e      	mov	r6, r1
   3394a:	b2e4      	uxtb	r4, r4
	last = last + 1;
   3394c:	f10a 0301 	add.w	r3, sl, #1
   33950:	fa5f fa83 	uxtb.w	sl, r3
		last = 0U;
   33954:	4556      	cmp	r6, sl
   33956:	bf08      	it	eq
   33958:	f04f 0a00 	moveq.w	sl, #0
	if (last == first) {
   3395c:	4557      	cmp	r7, sl
		link = mem_acquire(link_free);
   3395e:	4648      	mov	r0, r9
   33960:	d019      	beq.n	33996 <ull_rxfifo_alloc+0x72>
   33962:	f7fc fb55 	bl	30010 <mem_acquire>
   33966:	4683      	mov	fp, r0
		rx = mem_acquire(mem_free);
   33968:	9800      	ldr	r0, [sp, #0]
		if (!link) {
   3396a:	f1bb 0f00 	cmp.w	fp, #0
   3396e:	d012      	beq.n	33996 <ull_rxfifo_alloc+0x72>
		rx = mem_acquire(mem_free);
   33970:	f7fc fb4e 	bl	30010 <mem_acquire>
		if (!rx) {
   33974:	b190      	cbz	r0, 3399c <ull_rxfifo_alloc+0x78>
		link->mem = NULL;
   33976:	2300      	movs	r3, #0
   33978:	f8cb 3004 	str.w	r3, [fp, #4]
		rx->link = link;
   3397c:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   33980:	782a      	ldrb	r2, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   33982:	9b01      	ldr	r3, [sp, #4]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   33984:	fb12 f208 	smulbb	r2, r2, r8
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   33988:	5098      	str	r0, [r3, r2]
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   3398a:	3c01      	subs	r4, #1
   3398c:	b2e4      	uxtb	r4, r4
   3398e:	2cff      	cmp	r4, #255	; 0xff
	*last = idx; /* Commit: Update write index */
   33990:	f885 a000 	strb.w	sl, [r5]
   33994:	d1da      	bne.n	3394c <ull_rxfifo_alloc+0x28>
}
   33996:	b003      	add	sp, #12
   33998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, link_free);
   3399c:	4649      	mov	r1, r9
   3399e:	4658      	mov	r0, fp
}
   339a0:	b003      	add	sp, #12
   339a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, link_free);
   339a6:	f7fc bb4f 	b.w	30048 <mem_release>
   339aa:	bf00      	nop

000339ac <init_reset>:
{
   339ac:	b570      	push	{r4, r5, r6, lr}
	RXFIFO_INIT_ALLOC(done);
   339ae:	4c3f      	ldr	r4, [pc, #252]	; (33aac <init_reset+0x100>)
   339b0:	4d3f      	ldr	r5, [pc, #252]	; (33ab0 <init_reset+0x104>)
   339b2:	79a2      	ldrb	r2, [r4, #6]
   339b4:	88a1      	ldrh	r1, [r4, #4]
   339b6:	4e3f      	ldr	r6, [pc, #252]	; (33ab4 <init_reset+0x108>)
   339b8:	2000      	movs	r0, #0
{
   339ba:	b084      	sub	sp, #16
	RXFIFO_INIT_ALLOC(done);
   339bc:	4623      	mov	r3, r4
   339be:	80a8      	strh	r0, [r5, #4]
   339c0:	f104 0008 	add.w	r0, r4, #8
   339c4:	f7fc faf4 	bl	2ffb0 <mem_init>
   339c8:	79e3      	ldrb	r3, [r4, #7]
   339ca:	79a2      	ldrb	r2, [r4, #6]
   339cc:	1d30      	adds	r0, r6, #4
   339ce:	441a      	add	r2, r3
   339d0:	2108      	movs	r1, #8
   339d2:	4633      	mov	r3, r6
   339d4:	f7fc faec 	bl	2ffb0 <mem_init>
   339d8:	9602      	str	r6, [sp, #8]
   339da:	462e      	mov	r6, r5
   339dc:	79a3      	ldrb	r3, [r4, #6]
   339de:	f816 0b08 	ldrb.w	r0, [r6], #8
   339e2:	9303      	str	r3, [sp, #12]
   339e4:	792a      	ldrb	r2, [r5, #4]
   339e6:	78a9      	ldrb	r1, [r5, #2]
   339e8:	1d6b      	adds	r3, r5, #5
   339ea:	e9cd 6400 	strd	r6, r4, [sp]
   339ee:	f7ff ff99 	bl	33924 <ull_rxfifo_alloc>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   339f2:	4b31      	ldr	r3, [pc, #196]	; (33ab8 <init_reset+0x10c>)
   339f4:	2207      	movs	r2, #7
   339f6:	1d18      	adds	r0, r3, #4
   339f8:	2144      	movs	r1, #68	; 0x44
   339fa:	f7fc fad9 	bl	2ffb0 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   339fe:	4b2f      	ldr	r3, [pc, #188]	; (33abc <init_reset+0x110>)
   33a00:	2209      	movs	r2, #9
   33a02:	1d18      	adds	r0, r3, #4
   33a04:	2108      	movs	r1, #8
   33a06:	f7fc fad3 	bl	2ffb0 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   33a0a:	482c      	ldr	r0, [pc, #176]	; (33abc <init_reset+0x110>)
   33a0c:	f7fc fb00 	bl	30010 <mem_acquire>
	LL_ASSERT(link);
   33a10:	4604      	mov	r4, r0
   33a12:	b308      	cbz	r0, 33a58 <init_reset+0xac>
	MEMQ_INIT(ull_rx, link);
   33a14:	4a2a      	ldr	r2, [pc, #168]	; (33ac0 <init_reset+0x114>)
   33a16:	4620      	mov	r0, r4
   33a18:	1f11      	subs	r1, r2, #4
   33a1a:	f7fc fb51 	bl	300c0 <memq_init>
	link = mem_acquire(&mem_link_done.free);
   33a1e:	4825      	ldr	r0, [pc, #148]	; (33ab4 <init_reset+0x108>)
   33a20:	f7fc faf6 	bl	30010 <mem_acquire>
	LL_ASSERT(link);
   33a24:	4604      	mov	r4, r0
   33a26:	b328      	cbz	r0, 33a74 <init_reset+0xc8>
	MEMQ_INIT(ull_done, link);
   33a28:	4a26      	ldr	r2, [pc, #152]	; (33ac4 <init_reset+0x118>)
   33a2a:	4620      	mov	r0, r4
   33a2c:	1f11      	subs	r1, r2, #4
   33a2e:	f7fc fb47 	bl	300c0 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   33a32:	4822      	ldr	r0, [pc, #136]	; (33abc <init_reset+0x110>)
   33a34:	f7fc faec 	bl	30010 <mem_acquire>
	LL_ASSERT(link);
   33a38:	4604      	mov	r4, r0
   33a3a:	b348      	cbz	r0, 33a90 <init_reset+0xe4>
	MEMQ_INIT(ll_rx, link);
   33a3c:	4a22      	ldr	r2, [pc, #136]	; (33ac8 <init_reset+0x11c>)
   33a3e:	4620      	mov	r0, r4
   33a40:	1f11      	subs	r1, r2, #4
   33a42:	f7fc fb3d 	bl	300c0 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   33a46:	4b21      	ldr	r3, [pc, #132]	; (33acc <init_reset+0x120>)
   33a48:	2205      	movs	r2, #5
	rx_replenish(UINT8_MAX);
   33a4a:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
   33a4c:	801a      	strh	r2, [r3, #0]
	rx_replenish(UINT8_MAX);
   33a4e:	f7ff f875 	bl	32b3c <rx_replenish>
}
   33a52:	2000      	movs	r0, #0
   33a54:	b004      	add	sp, #16
   33a56:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   33a58:	4a1d      	ldr	r2, [pc, #116]	; (33ad0 <init_reset+0x124>)
   33a5a:	491e      	ldr	r1, [pc, #120]	; (33ad4 <init_reset+0x128>)
   33a5c:	481e      	ldr	r0, [pc, #120]	; (33ad8 <init_reset+0x12c>)
   33a5e:	f640 03a7 	movw	r3, #2215	; 0x8a7
   33a62:	f00e fdb1 	bl	425c8 <assert_print>
   33a66:	4040      	eors	r0, r0
   33a68:	f380 8811 	msr	BASEPRI, r0
   33a6c:	f04f 0003 	mov.w	r0, #3
   33a70:	df02      	svc	2
   33a72:	e7cf      	b.n	33a14 <init_reset+0x68>
	LL_ASSERT(link);
   33a74:	4a16      	ldr	r2, [pc, #88]	; (33ad0 <init_reset+0x124>)
   33a76:	4917      	ldr	r1, [pc, #92]	; (33ad4 <init_reset+0x128>)
   33a78:	4817      	ldr	r0, [pc, #92]	; (33ad8 <init_reset+0x12c>)
   33a7a:	f640 03af 	movw	r3, #2223	; 0x8af
   33a7e:	f00e fda3 	bl	425c8 <assert_print>
   33a82:	4040      	eors	r0, r0
   33a84:	f380 8811 	msr	BASEPRI, r0
   33a88:	f04f 0003 	mov.w	r0, #3
   33a8c:	df02      	svc	2
   33a8e:	e7cb      	b.n	33a28 <init_reset+0x7c>
	LL_ASSERT(link);
   33a90:	4a0f      	ldr	r2, [pc, #60]	; (33ad0 <init_reset+0x124>)
   33a92:	4910      	ldr	r1, [pc, #64]	; (33ad4 <init_reset+0x128>)
   33a94:	4810      	ldr	r0, [pc, #64]	; (33ad8 <init_reset+0x12c>)
   33a96:	f640 03b7 	movw	r3, #2231	; 0x8b7
   33a9a:	f00e fd95 	bl	425c8 <assert_print>
   33a9e:	4040      	eors	r0, r0
   33aa0:	f380 8811 	msr	BASEPRI, r0
   33aa4:	f04f 0003 	mov.w	r0, #3
   33aa8:	df02      	svc	2
   33aaa:	e7c7      	b.n	33a3c <init_reset+0x90>
   33aac:	2000050c 	.word	0x2000050c
   33ab0:	200005e4 	.word	0x200005e4
   33ab4:	200022ec 	.word	0x200022ec
   33ab8:	2000210c 	.word	0x2000210c
   33abc:	200020c0 	.word	0x200020c0
   33ac0:	200020b8 	.word	0x200020b8
   33ac4:	200020a8 	.word	0x200020a8
   33ac8:	200020b0 	.word	0x200020b0
   33acc:	200020bc 	.word	0x200020bc
   33ad0:	00049914 	.word	0x00049914
   33ad4:	00049cb8 	.word	0x00049cb8
   33ad8:	000497b0 	.word	0x000497b0

00033adc <ll_init>:
{
   33adc:	b530      	push	{r4, r5, lr}
	sem_recv = sem_rx;
   33ade:	4b2b      	ldr	r3, [pc, #172]	; (33b8c <ll_init+0xb0>)
	if (!mayfly_initialized) {
   33ae0:	4c2b      	ldr	r4, [pc, #172]	; (33b90 <ll_init+0xb4>)
	sem_recv = sem_rx;
   33ae2:	6018      	str	r0, [r3, #0]
{
   33ae4:	b087      	sub	sp, #28
	cntr_init();
   33ae6:	f007 fd05 	bl	3b4f4 <cntr_init>
	if (!mayfly_initialized) {
   33aea:	7823      	ldrb	r3, [r4, #0]
   33aec:	2b00      	cmp	r3, #0
   33aee:	d047      	beq.n	33b80 <ll_init+0xa4>
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   33af0:	4928      	ldr	r1, [pc, #160]	; (33b94 <ll_init+0xb8>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   33af2:	4a29      	ldr	r2, [pc, #164]	; (33b98 <ll_init+0xbc>)
   33af4:	4d29      	ldr	r5, [pc, #164]	; (33b9c <ll_init+0xc0>)
   33af6:	9505      	str	r5, [sp, #20]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   33af8:	f04f 0c05 	mov.w	ip, #5
   33afc:	f881 c008 	strb.w	ip, [r1, #8]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   33b00:	4c27      	ldr	r4, [pc, #156]	; (33ba0 <ll_init+0xc4>)
   33b02:	9204      	str	r2, [sp, #16]
   33b04:	4a27      	ldr	r2, [pc, #156]	; (33ba4 <ll_init+0xc8>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   33b06:	2002      	movs	r0, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   33b08:	e9cd 2402 	strd	r2, r4, [sp, #8]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   33b0c:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   33b0e:	240d      	movs	r4, #13
   33b10:	e9cd 1400 	strd	r1, r4, [sp]
   33b14:	4a24      	ldr	r2, [pc, #144]	; (33ba8 <ll_init+0xcc>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   33b16:	7408      	strb	r0, [r1, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_THREAD_OPS;
   33b18:	7608      	strb	r0, [r1, #24]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   33b1a:	700b      	strb	r3, [r1, #0]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   33b1c:	2000      	movs	r0, #0
   33b1e:	2106      	movs	r1, #6
   33b20:	f7fd fb98 	bl	31254 <ticker_init>
	LL_ASSERT(!err);
   33b24:	b9f0      	cbnz	r0, 33b64 <ll_init+0x88>
	return z_impl_k_sem_init(sem, initial_count, limit);
   33b26:	2201      	movs	r2, #1
   33b28:	2100      	movs	r1, #0
   33b2a:	4820      	ldr	r0, [pc, #128]	; (33bac <ll_init+0xd0>)
   33b2c:	f014 faed 	bl	4810a <z_impl_k_sem_init>
	err = lll_init();
   33b30:	f005 ff76 	bl	39a20 <lll_init>
	if (err) {
   33b34:	b108      	cbz	r0, 33b3a <ll_init+0x5e>
}
   33b36:	b007      	add	sp, #28
   33b38:	bd30      	pop	{r4, r5, pc}
	err = init_reset();
   33b3a:	f7ff ff37 	bl	339ac <init_reset>
	if (err) {
   33b3e:	2800      	cmp	r0, #0
   33b40:	d1f9      	bne.n	33b36 <ll_init+0x5a>
	err = lll_adv_init();
   33b42:	f006 fbcf 	bl	3a2e4 <lll_adv_init>
	if (err) {
   33b46:	2800      	cmp	r0, #0
   33b48:	d1f5      	bne.n	33b36 <ll_init+0x5a>
	err = ull_adv_init();
   33b4a:	f000 fcdb 	bl	34504 <ull_adv_init>
	if (err) {
   33b4e:	2800      	cmp	r0, #0
   33b50:	d1f1      	bne.n	33b36 <ll_init+0x5a>
	err = lll_conn_init();
   33b52:	f006 ffe5 	bl	3ab20 <lll_conn_init>
	if (err) {
   33b56:	2800      	cmp	r0, #0
   33b58:	d1ed      	bne.n	33b36 <ll_init+0x5a>
}
   33b5a:	b007      	add	sp, #28
   33b5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	err = ull_conn_init();
   33b60:	f001 bf22 	b.w	359a8 <ull_conn_init>
	LL_ASSERT(!err);
   33b64:	4a12      	ldr	r2, [pc, #72]	; (33bb0 <ll_init+0xd4>)
   33b66:	4913      	ldr	r1, [pc, #76]	; (33bb4 <ll_init+0xd8>)
   33b68:	4813      	ldr	r0, [pc, #76]	; (33bb8 <ll_init+0xdc>)
   33b6a:	f44f 7317 	mov.w	r3, #604	; 0x25c
   33b6e:	f00e fd2b 	bl	425c8 <assert_print>
   33b72:	4040      	eors	r0, r0
   33b74:	f380 8811 	msr	BASEPRI, r0
   33b78:	f04f 0003 	mov.w	r0, #3
   33b7c:	df02      	svc	2
   33b7e:	e7d2      	b.n	33b26 <ll_init+0x4a>
		mayfly_init();
   33b80:	f7fc face 	bl	30120 <mayfly_init>
		mayfly_initialized = true;
   33b84:	2301      	movs	r3, #1
   33b86:	7023      	strb	r3, [r4, #0]
   33b88:	e7b2      	b.n	33af0 <ll_init+0x14>
   33b8a:	bf00      	nop
   33b8c:	20002318 	.word	0x20002318
   33b90:	20003b0e 	.word	0x20003b0e
   33b94:	200025d8 	.word	0x200025d8
   33b98:	0003bf3d 	.word	0x0003bf3d
   33b9c:	0003c08d 	.word	0x0003c08d
   33ba0:	0003bed9 	.word	0x0003bed9
   33ba4:	20002334 	.word	0x20002334
   33ba8:	200025f8 	.word	0x200025f8
   33bac:	2000231c 	.word	0x2000231c
   33bb0:	00049914 	.word	0x00049914
   33bb4:	00049950 	.word	0x00049950
   33bb8:	000497b0 	.word	0x000497b0

00033bbc <ll_reset>:
{
   33bbc:	b510      	push	{r4, lr}
   33bbe:	b086      	sub	sp, #24
	err = ull_adv_reset();
   33bc0:	f000 fcb0 	bl	34524 <ull_adv_reset>
	LL_ASSERT(!err);
   33bc4:	2800      	cmp	r0, #0
   33bc6:	d130      	bne.n	33c2a <ll_reset+0x6e>
	err = ull_conn_reset();
   33bc8:	f001 fef0 	bl	359ac <ull_conn_reset>
	LL_ASSERT(!err);
   33bcc:	2800      	cmp	r0, #0
   33bce:	d13d      	bne.n	33c4c <ll_reset+0x90>
	MFIFO_INIT(tx_ack);
   33bd0:	483a      	ldr	r0, [pc, #232]	; (33cbc <ll_reset+0x100>)
	MFIFO_INIT(prep);
   33bd2:	493b      	ldr	r1, [pc, #236]	; (33cc0 <ll_reset+0x104>)
	MFIFO_INIT(pdu_rx_free);
   33bd4:	4a3b      	ldr	r2, [pc, #236]	; (33cc4 <ll_reset+0x108>)
	MFIFO_INIT(ll_pdu_rx_free);
   33bd6:	4b3c      	ldr	r3, [pc, #240]	; (33cc8 <ll_reset+0x10c>)
	MFIFO_INIT(tx_ack);
   33bd8:	2400      	movs	r4, #0
   33bda:	8084      	strh	r4, [r0, #4]
	MFIFO_INIT(prep);
   33bdc:	808c      	strh	r4, [r1, #4]
	MFIFO_INIT(pdu_rx_free);
   33bde:	8094      	strh	r4, [r2, #4]
	MFIFO_INIT(ll_pdu_rx_free);
   33be0:	809c      	strh	r4, [r3, #4]
   33be2:	2201      	movs	r2, #1
   33be4:	4621      	mov	r1, r4
   33be6:	4668      	mov	r0, sp
   33be8:	f014 fa8f 	bl	4810a <z_impl_k_sem_init>
		mfy.param = &sem;
   33bec:	4b37      	ldr	r3, [pc, #220]	; (33ccc <ll_reset+0x110>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   33bee:	4622      	mov	r2, r4
   33bf0:	4621      	mov	r1, r4
   33bf2:	2003      	movs	r0, #3
		mfy.param = &sem;
   33bf4:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   33bf8:	f7fc fae6 	bl	301c8 <mayfly_enqueue>
		LL_ASSERT(!retval);
   33bfc:	2800      	cmp	r0, #0
   33bfe:	d14f      	bne.n	33ca0 <ll_reset+0xe4>
	return z_impl_k_sem_take(sem, timeout);
   33c00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   33c04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   33c08:	4668      	mov	r0, sp
   33c0a:	f00c ffd3 	bl	40bb4 <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
   33c0e:	f000 fc8f 	bl	34530 <ull_adv_reset_finalize>
	LL_ASSERT(!err);
   33c12:	2800      	cmp	r0, #0
   33c14:	d136      	bne.n	33c84 <ll_reset+0xc8>
	err = init_reset();
   33c16:	f7ff fec9 	bl	339ac <init_reset>
	LL_ASSERT(!err);
   33c1a:	bb28      	cbnz	r0, 33c68 <ll_reset+0xac>
	(void)ll_addr_set(1U, NULL);
   33c1c:	2100      	movs	r1, #0
   33c1e:	2001      	movs	r0, #1
}
   33c20:	b006      	add	sp, #24
   33c22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)ll_addr_set(1U, NULL);
   33c26:	f7fd bc97 	b.w	31558 <ll_addr_set>
	LL_ASSERT(!err);
   33c2a:	4a29      	ldr	r2, [pc, #164]	; (33cd0 <ll_reset+0x114>)
   33c2c:	4929      	ldr	r1, [pc, #164]	; (33cd4 <ll_reset+0x118>)
   33c2e:	482a      	ldr	r0, [pc, #168]	; (33cd8 <ll_reset+0x11c>)
   33c30:	f240 3302 	movw	r3, #770	; 0x302
   33c34:	f00e fcc8 	bl	425c8 <assert_print>
   33c38:	4040      	eors	r0, r0
   33c3a:	f380 8811 	msr	BASEPRI, r0
   33c3e:	f04f 0003 	mov.w	r0, #3
   33c42:	df02      	svc	2
	err = ull_conn_reset();
   33c44:	f001 feb2 	bl	359ac <ull_conn_reset>
	LL_ASSERT(!err);
   33c48:	2800      	cmp	r0, #0
   33c4a:	d0c1      	beq.n	33bd0 <ll_reset+0x14>
   33c4c:	4a20      	ldr	r2, [pc, #128]	; (33cd0 <ll_reset+0x114>)
   33c4e:	4921      	ldr	r1, [pc, #132]	; (33cd4 <ll_reset+0x118>)
   33c50:	4821      	ldr	r0, [pc, #132]	; (33cd8 <ll_reset+0x11c>)
   33c52:	f44f 734d 	mov.w	r3, #820	; 0x334
   33c56:	f00e fcb7 	bl	425c8 <assert_print>
   33c5a:	4040      	eors	r0, r0
   33c5c:	f380 8811 	msr	BASEPRI, r0
   33c60:	f04f 0003 	mov.w	r0, #3
   33c64:	df02      	svc	2
   33c66:	e7b3      	b.n	33bd0 <ll_reset+0x14>
	LL_ASSERT(!err);
   33c68:	4a19      	ldr	r2, [pc, #100]	; (33cd0 <ll_reset+0x114>)
   33c6a:	491a      	ldr	r1, [pc, #104]	; (33cd4 <ll_reset+0x118>)
   33c6c:	481a      	ldr	r0, [pc, #104]	; (33cd8 <ll_reset+0x11c>)
   33c6e:	f240 337d 	movw	r3, #893	; 0x37d
   33c72:	f00e fca9 	bl	425c8 <assert_print>
   33c76:	4040      	eors	r0, r0
   33c78:	f380 8811 	msr	BASEPRI, r0
   33c7c:	f04f 0003 	mov.w	r0, #3
   33c80:	df02      	svc	2
   33c82:	e7cb      	b.n	33c1c <ll_reset+0x60>
	LL_ASSERT(!err);
   33c84:	4a12      	ldr	r2, [pc, #72]	; (33cd0 <ll_reset+0x114>)
   33c86:	4913      	ldr	r1, [pc, #76]	; (33cd4 <ll_reset+0x118>)
   33c88:	4813      	ldr	r0, [pc, #76]	; (33cd8 <ll_reset+0x11c>)
   33c8a:	f44f 735c 	mov.w	r3, #880	; 0x370
   33c8e:	f00e fc9b 	bl	425c8 <assert_print>
   33c92:	4040      	eors	r0, r0
   33c94:	f380 8811 	msr	BASEPRI, r0
   33c98:	f04f 0003 	mov.w	r0, #3
   33c9c:	df02      	svc	2
   33c9e:	e7ba      	b.n	33c16 <ll_reset+0x5a>
		LL_ASSERT(!retval);
   33ca0:	4a0b      	ldr	r2, [pc, #44]	; (33cd0 <ll_reset+0x114>)
   33ca2:	490e      	ldr	r1, [pc, #56]	; (33cdc <ll_reset+0x120>)
   33ca4:	480c      	ldr	r0, [pc, #48]	; (33cd8 <ll_reset+0x11c>)
   33ca6:	f240 3363 	movw	r3, #867	; 0x363
   33caa:	f00e fc8d 	bl	425c8 <assert_print>
   33cae:	4040      	eors	r0, r0
   33cb0:	f380 8811 	msr	BASEPRI, r0
   33cb4:	f04f 0003 	mov.w	r0, #3
   33cb8:	df02      	svc	2
   33cba:	e7a1      	b.n	33c00 <ll_reset+0x44>
   33cbc:	200004b8 	.word	0x200004b8
   33cc0:	20000600 	.word	0x20000600
   33cc4:	200004f0 	.word	0x200004f0
   33cc8:	200004e0 	.word	0x200004e0
   33ccc:	200004a8 	.word	0x200004a8
   33cd0:	00049914 	.word	0x00049914
   33cd4:	00049950 	.word	0x00049950
   33cd8:	000497b0 	.word	0x000497b0
   33cdc:	00049a74 	.word	0x00049a74

00033ce0 <ll_deinit>:
{
   33ce0:	b508      	push	{r3, lr}
	ll_reset();
   33ce2:	f7ff ff6b 	bl	33bbc <ll_reset>
}
   33ce6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return lll_deinit();
   33cea:	f005 bec9 	b.w	39a80 <lll_deinit>
   33cee:	bf00      	nop

00033cf0 <lll_prepare>:
 *	   -EINPROGRESS: Event already in progress and prepare was queued
 */
int lll_prepare(lll_is_abort_cb_t is_abort_cb, lll_abort_cb_t abort_cb,
		lll_prepare_cb_t prepare_cb, int8_t event_prio,
		struct lll_prepare_param *prepare_param)
{
   33cf0:	b510      	push	{r4, lr}
   33cf2:	b082      	sub	sp, #8
	}

	prepare_param->prio = prio;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */

	return lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb,
   33cf4:	2400      	movs	r4, #0
   33cf6:	e9cd 4400 	strd	r4, r4, [sp]
   33cfa:	9b04      	ldr	r3, [sp, #16]
   33cfc:	f006 f8a8 	bl	39e50 <lll_prepare_resolve>
				   prepare_param, 0, 0);
}
   33d00:	b002      	add	sp, #8
   33d02:	bd10      	pop	{r4, pc}

00033d04 <lll_resume>:

void lll_resume(void *param)
{
   33d04:	b510      	push	{r4, lr}
   33d06:	4603      	mov	r3, r0
	int ret;

	next = param;
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
				  next->prepare_cb, &next->prepare_param,
				  next->is_resume, 1);
   33d08:	7f00      	ldrb	r0, [r0, #28]
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   33d0a:	691a      	ldr	r2, [r3, #16]
   33d0c:	6999      	ldr	r1, [r3, #24]
   33d0e:	2401      	movs	r4, #1
{
   33d10:	b082      	sub	sp, #8
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   33d12:	4020      	ands	r0, r4
   33d14:	e9cd 0400 	strd	r0, r4, [sp]
   33d18:	6958      	ldr	r0, [r3, #20]
   33d1a:	f006 f899 	bl	39e50 <lll_prepare_resolve>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   33d1e:	b108      	cbz	r0, 33d24 <lll_resume+0x20>
   33d20:	3077      	adds	r0, #119	; 0x77
   33d22:	d101      	bne.n	33d28 <lll_resume+0x24>
}
   33d24:	b002      	add	sp, #8
   33d26:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   33d28:	4a06      	ldr	r2, [pc, #24]	; (33d44 <lll_resume+0x40>)
   33d2a:	4907      	ldr	r1, [pc, #28]	; (33d48 <lll_resume+0x44>)
   33d2c:	4807      	ldr	r0, [pc, #28]	; (33d4c <lll_resume+0x48>)
   33d2e:	234f      	movs	r3, #79	; 0x4f
   33d30:	f00e fc4a 	bl	425c8 <assert_print>
   33d34:	4040      	eors	r0, r0
   33d36:	f380 8811 	msr	BASEPRI, r0
   33d3a:	f04f 0003 	mov.w	r0, #3
   33d3e:	df02      	svc	2
}
   33d40:	b002      	add	sp, #8
   33d42:	bd10      	pop	{r4, pc}
   33d44:	00049a7c 	.word	0x00049a7c
   33d48:	00049ac0 	.word	0x00049ac0
   33d4c:	000497b0 	.word	0x000497b0

00033d50 <ticker_stop_cb>:
{
   33d50:	b530      	push	{r4, r5, lr}
   33d52:	b083      	sub	sp, #12
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   33d54:	4c18      	ldr	r4, [pc, #96]	; (33db8 <ticker_stop_cb+0x68>)
{
   33d56:	9d07      	ldr	r5, [sp, #28]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   33d58:	4b18      	ldr	r3, [pc, #96]	; (33dbc <ticker_stop_cb+0x6c>)
   33d5a:	1b2c      	subs	r4, r5, r4
   33d5c:	08a4      	lsrs	r4, r4, #2
   33d5e:	fba3 3404 	umull	r3, r4, r3, r4
	handle = ull_adv_handle_get(adv);
   33d62:	f3c4 04c7 	ubfx	r4, r4, #3, #8
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   33d66:	b9cc      	cbnz	r4, 33d9c <ticker_stop_cb+0x4c>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   33d68:	1ca2      	adds	r2, r4, #2
   33d6a:	4b15      	ldr	r3, [pc, #84]	; (33dc0 <ticker_stop_cb+0x70>)
   33d6c:	9500      	str	r5, [sp, #0]
   33d6e:	b2d2      	uxtb	r2, r2
   33d70:	2101      	movs	r1, #1
   33d72:	2000      	movs	r0, #0
   33d74:	f7fd fba8 	bl	314c8 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   33d78:	f030 0302 	bics.w	r3, r0, #2
   33d7c:	d00c      	beq.n	33d98 <ticker_stop_cb+0x48>
   33d7e:	4a11      	ldr	r2, [pc, #68]	; (33dc4 <ticker_stop_cb+0x74>)
   33d80:	4911      	ldr	r1, [pc, #68]	; (33dc8 <ticker_stop_cb+0x78>)
   33d82:	4812      	ldr	r0, [pc, #72]	; (33dcc <ticker_stop_cb+0x7c>)
   33d84:	f640 131f 	movw	r3, #2335	; 0x91f
   33d88:	f00e fc1e 	bl	425c8 <assert_print>
   33d8c:	4040      	eors	r0, r0
   33d8e:	f380 8811 	msr	BASEPRI, r0
   33d92:	f04f 0003 	mov.w	r0, #3
   33d96:	df02      	svc	2
}
   33d98:	b003      	add	sp, #12
   33d9a:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   33d9c:	4a09      	ldr	r2, [pc, #36]	; (33dc4 <ticker_stop_cb+0x74>)
   33d9e:	490c      	ldr	r1, [pc, #48]	; (33dd0 <ticker_stop_cb+0x80>)
   33da0:	480a      	ldr	r0, [pc, #40]	; (33dcc <ticker_stop_cb+0x7c>)
   33da2:	f640 131a 	movw	r3, #2330	; 0x91a
   33da6:	f00e fc0f 	bl	425c8 <assert_print>
   33daa:	4040      	eors	r0, r0
   33dac:	f380 8811 	msr	BASEPRI, r0
   33db0:	f04f 0003 	mov.w	r0, #3
   33db4:	df02      	svc	2
   33db6:	e7d7      	b.n	33d68 <ticker_stop_cb+0x18>
   33db8:	2000274c 	.word	0x2000274c
   33dbc:	4bda12f7 	.word	0x4bda12f7
   33dc0:	00033e69 	.word	0x00033e69
   33dc4:	00049ad4 	.word	0x00049ad4
   33dc8:	00049b20 	.word	0x00049b20
   33dcc:	000497b0 	.word	0x000497b0
   33dd0:	00049b14 	.word	0x00049b14

00033dd4 <disabled_cb>:
{
   33dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	adv = ((struct lll_hdr *)param)->parent;
   33dd6:	6805      	ldr	r5, [r0, #0]
	LL_ASSERT(adv->link_cc_free);
   33dd8:	6e2f      	ldr	r7, [r5, #96]	; 0x60
{
   33dda:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
   33ddc:	b1d7      	cbz	r7, 33e14 <disabled_cb+0x40>
	LL_ASSERT(adv->node_rx_cc_free);
   33dde:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	adv->link_cc_free = NULL;
   33de0:	2300      	movs	r3, #0
   33de2:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
   33de4:	b34c      	cbz	r4, 33e3a <disabled_cb+0x66>
	adv->node_rx_cc_free = NULL;
   33de6:	2100      	movs	r1, #0
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   33de8:	2317      	movs	r3, #23
	adv->node_rx_cc_free = NULL;
   33dea:	6669      	str	r1, [r5, #100]	; 0x64
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   33dec:	7123      	strb	r3, [r4, #4]
	rx->hdr.handle = 0xffff;
   33dee:	f64f 73ff 	movw	r3, #65535	; 0xffff
   33df2:	80e3      	strh	r3, [r4, #6]
	memset(cc, 0x00, sizeof(struct node_rx_cc));
   33df4:	2212      	movs	r2, #18
   33df6:	f104 001c 	add.w	r0, r4, #28
   33dfa:	f010 fa98 	bl	4432e <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   33dfe:	233c      	movs	r3, #60	; 0x3c
   33e00:	7723      	strb	r3, [r4, #28]
	rx->hdr.rx_ftr.param = param;
   33e02:	60a6      	str	r6, [r4, #8]
	ll_rx_put(link, rx);
   33e04:	4621      	mov	r1, r4
   33e06:	4638      	mov	r0, r7
   33e08:	f7ff fab6 	bl	33378 <ll_rx_put>
}
   33e0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
   33e10:	f7ff babc 	b.w	3338c <ll_rx_sched>
	LL_ASSERT(adv->link_cc_free);
   33e14:	4a10      	ldr	r2, [pc, #64]	; (33e58 <disabled_cb+0x84>)
   33e16:	4911      	ldr	r1, [pc, #68]	; (33e5c <disabled_cb+0x88>)
   33e18:	4811      	ldr	r0, [pc, #68]	; (33e60 <disabled_cb+0x8c>)
   33e1a:	f640 1367 	movw	r3, #2407	; 0x967
   33e1e:	f00e fbd3 	bl	425c8 <assert_print>
   33e22:	4040      	eors	r0, r0
   33e24:	f380 8811 	msr	BASEPRI, r0
   33e28:	f04f 0003 	mov.w	r0, #3
   33e2c:	df02      	svc	2
	LL_ASSERT(adv->node_rx_cc_free);
   33e2e:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	link = adv->link_cc_free;
   33e30:	6e2f      	ldr	r7, [r5, #96]	; 0x60
	adv->link_cc_free = NULL;
   33e32:	2300      	movs	r3, #0
   33e34:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
   33e36:	2c00      	cmp	r4, #0
   33e38:	d1d5      	bne.n	33de6 <disabled_cb+0x12>
   33e3a:	4a07      	ldr	r2, [pc, #28]	; (33e58 <disabled_cb+0x84>)
   33e3c:	4909      	ldr	r1, [pc, #36]	; (33e64 <disabled_cb+0x90>)
   33e3e:	4808      	ldr	r0, [pc, #32]	; (33e60 <disabled_cb+0x8c>)
   33e40:	f640 136b 	movw	r3, #2411	; 0x96b
   33e44:	f00e fbc0 	bl	425c8 <assert_print>
   33e48:	4040      	eors	r0, r0
   33e4a:	f380 8811 	msr	BASEPRI, r0
   33e4e:	f04f 0003 	mov.w	r0, #3
   33e52:	df02      	svc	2
	rx = adv->node_rx_cc_free;
   33e54:	6e6c      	ldr	r4, [r5, #100]	; 0x64
   33e56:	e7c6      	b.n	33de6 <disabled_cb+0x12>
   33e58:	00049ad4 	.word	0x00049ad4
   33e5c:	00049b3c 	.word	0x00049b3c
   33e60:	000497b0 	.word	0x000497b0
   33e64:	00049b50 	.word	0x00049b50

00033e68 <ticker_stop_op_cb>:
	if (status != TICKER_STATUS_SUCCESS) {
   33e68:	b100      	cbz	r0, 33e6c <ticker_stop_op_cb+0x4>
   33e6a:	4770      	bx	lr
	mfy.param = param;
   33e6c:	4b0c      	ldr	r3, [pc, #48]	; (33ea0 <ticker_stop_op_cb+0x38>)
{
   33e6e:	b510      	push	{r4, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   33e70:	4602      	mov	r2, r0
   33e72:	460c      	mov	r4, r1
   33e74:	2002      	movs	r0, #2
   33e76:	2101      	movs	r1, #1
	mfy.param = param;
   33e78:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   33e7a:	f7fc f9a5 	bl	301c8 <mayfly_enqueue>
	LL_ASSERT(!ret);
   33e7e:	b900      	cbnz	r0, 33e82 <ticker_stop_op_cb+0x1a>
}
   33e80:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   33e82:	4a08      	ldr	r2, [pc, #32]	; (33ea4 <ticker_stop_op_cb+0x3c>)
   33e84:	4908      	ldr	r1, [pc, #32]	; (33ea8 <ticker_stop_op_cb+0x40>)
   33e86:	4809      	ldr	r0, [pc, #36]	; (33eac <ticker_stop_op_cb+0x44>)
   33e88:	f640 133b 	movw	r3, #2363	; 0x93b
   33e8c:	f00e fb9c 	bl	425c8 <assert_print>
   33e90:	4040      	eors	r0, r0
   33e92:	f380 8811 	msr	BASEPRI, r0
   33e96:	f04f 0003 	mov.w	r0, #3
   33e9a:	df02      	svc	2
}
   33e9c:	bd10      	pop	{r4, pc}
   33e9e:	bf00      	nop
   33ea0:	20000728 	.word	0x20000728
   33ea4:	00049ad4 	.word	0x00049ad4
   33ea8:	00049a4c 	.word	0x00049a4c
   33eac:	000497b0 	.word	0x000497b0

00033eb0 <adv_disable>:
{
   33eb0:	b538      	push	{r3, r4, r5, lr}
   33eb2:	4604      	mov	r4, r0
   33eb4:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
   33eb8:	b353      	cbz	r3, 33f10 <adv_disable+0x60>
		mfy.param = &adv->lll;
   33eba:	4d17      	ldr	r5, [pc, #92]	; (33f18 <adv_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
   33ebc:	6963      	ldr	r3, [r4, #20]
		mfy.param = &adv->lll;
   33ebe:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
   33ec0:	b16b      	cbz	r3, 33ede <adv_disable+0x2e>
   33ec2:	4a16      	ldr	r2, [pc, #88]	; (33f1c <adv_disable+0x6c>)
   33ec4:	4916      	ldr	r1, [pc, #88]	; (33f20 <adv_disable+0x70>)
   33ec6:	4817      	ldr	r0, [pc, #92]	; (33f24 <adv_disable+0x74>)
   33ec8:	f44f 6315 	mov.w	r3, #2384	; 0x950
   33ecc:	f00e fb7c 	bl	425c8 <assert_print>
   33ed0:	4040      	eors	r0, r0
   33ed2:	f380 8811 	msr	BASEPRI, r0
   33ed6:	f04f 0003 	mov.w	r0, #3
   33eda:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   33edc:	68a8      	ldr	r0, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   33ede:	4912      	ldr	r1, [pc, #72]	; (33f28 <adv_disable+0x78>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   33ee0:	4b0d      	ldr	r3, [pc, #52]	; (33f18 <adv_disable+0x68>)
   33ee2:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   33ee4:	e9c4 1005 	strd	r1, r0, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   33ee8:	4611      	mov	r1, r2
   33eea:	2001      	movs	r0, #1
   33eec:	f7fc f96c 	bl	301c8 <mayfly_enqueue>
		LL_ASSERT(!ret);
   33ef0:	b900      	cbnz	r0, 33ef4 <adv_disable+0x44>
}
   33ef2:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
   33ef4:	4a09      	ldr	r2, [pc, #36]	; (33f1c <adv_disable+0x6c>)
   33ef6:	490d      	ldr	r1, [pc, #52]	; (33f2c <adv_disable+0x7c>)
   33ef8:	480a      	ldr	r0, [pc, #40]	; (33f24 <adv_disable+0x74>)
   33efa:	f640 1357 	movw	r3, #2391	; 0x957
   33efe:	f00e fb63 	bl	425c8 <assert_print>
   33f02:	4040      	eors	r0, r0
   33f04:	f380 8811 	msr	BASEPRI, r0
   33f08:	f04f 0003 	mov.w	r0, #3
   33f0c:	df02      	svc	2
}
   33f0e:	bd38      	pop	{r3, r4, r5, pc}
   33f10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&adv->lll);
   33f14:	f7ff bf5e 	b.w	33dd4 <disabled_cb>
   33f18:	20000718 	.word	0x20000718
   33f1c:	00049ad4 	.word	0x00049ad4
   33f20:	00049b68 	.word	0x00049b68
   33f24:	000497b0 	.word	0x000497b0
   33f28:	00033dd5 	.word	0x00033dd5
   33f2c:	00049a4c 	.word	0x00049a4c

00033f30 <ticker_update_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   33f30:	b900      	cbnz	r0, 33f34 <ticker_update_op_cb+0x4>
   33f32:	4770      	bx	lr
{
   33f34:	b510      	push	{r4, lr}
   33f36:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   33f38:	f7ff fafe 	bl	33538 <ull_disable_mark_get>
   33f3c:	4284      	cmp	r4, r0
   33f3e:	d00c      	beq.n	33f5a <ticker_update_op_cb+0x2a>
   33f40:	4a06      	ldr	r2, [pc, #24]	; (33f5c <ticker_update_op_cb+0x2c>)
   33f42:	4907      	ldr	r1, [pc, #28]	; (33f60 <ticker_update_op_cb+0x30>)
   33f44:	4807      	ldr	r0, [pc, #28]	; (33f64 <ticker_update_op_cb+0x34>)
   33f46:	f640 130c 	movw	r3, #2316	; 0x90c
   33f4a:	f00e fb3d 	bl	425c8 <assert_print>
   33f4e:	4040      	eors	r0, r0
   33f50:	f380 8811 	msr	BASEPRI, r0
   33f54:	f04f 0003 	mov.w	r0, #3
   33f58:	df02      	svc	2
}
   33f5a:	bd10      	pop	{r4, pc}
   33f5c:	00049ad4 	.word	0x00049ad4
   33f60:	00049b7c 	.word	0x00049b7c
   33f64:	000497b0 	.word	0x000497b0

00033f68 <init_set.constprop.0>:
	pdu->len = BDADDR_SIZE;
}

static void init_set(struct ll_adv_set *adv)
{
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   33f68:	4b0f      	ldr	r3, [pc, #60]	; (33fa8 <init_set.constprop.0+0x40>)
#if defined(CONFIG_BT_CTLR_PRIVACY)
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
#endif /* CONFIG_BT_CTLR_PRIVACY */
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   33f6a:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   33f6c:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
   33f70:	f422 7243 	bic.w	r2, r2, #780	; 0x30c
   33f74:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   33f78:	f022 0202 	bic.w	r2, r2, #2
   33f7c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   33f7e:	f042 020e 	orr.w	r2, r2, #14
   33f82:	849a      	strh	r2, [r3, #36]	; 0x24
	pdu->len = BDADDR_SIZE;
   33f84:	2006      	movs	r0, #6
	pdu->type = pdu_type;
   33f86:	2200      	movs	r2, #0
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   33f88:	f44f 6c00 	mov.w	ip, #2048	; 0x800
   33f8c:	f8a3 c068 	strh.w	ip, [r3, #104]	; 0x68
	pdu->type = pdu_type;
   33f90:	700a      	strb	r2, [r1, #0]
	pdu->len = BDADDR_SIZE;
   33f92:	7048      	strb	r0, [r1, #1]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   33f94:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
   33f98:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	pdu->type = pdu_type;
   33f9c:	2204      	movs	r2, #4
   33f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   33fa0:	701a      	strb	r2, [r3, #0]
	pdu->len = BDADDR_SIZE;
   33fa2:	7058      	strb	r0, [r3, #1]
	adv->delay_remain = ULL_ADV_RANDOM_DELAY;
#endif /* ONFIG_BT_CTLR_JIT_SCHEDULING */

	init_pdu(lll_adv_data_peek(&ll_adv[0].lll), PDU_ADV_TYPE_ADV_IND);
	init_pdu(lll_adv_scan_rsp_peek(&ll_adv[0].lll), PDU_ADV_TYPE_SCAN_RSP);
}
   33fa4:	4770      	bx	lr
   33fa6:	bf00      	nop
   33fa8:	2000274c 	.word	0x2000274c

00033fac <conn_release.constprop.0>:
static void conn_release(struct ll_adv_set *adv)
   33fac:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
   33fae:	4c1b      	ldr	r4, [pc, #108]	; (3401c <conn_release.constprop.0+0x70>)
   33fb0:	6a25      	ldr	r5, [r4, #32]
	LL_ASSERT(!lll->link_tx_free);
   33fb2:	6dab      	ldr	r3, [r5, #88]	; 0x58
   33fb4:	b163      	cbz	r3, 33fd0 <conn_release.constprop.0+0x24>
   33fb6:	4a1a      	ldr	r2, [pc, #104]	; (34020 <conn_release.constprop.0+0x74>)
   33fb8:	491a      	ldr	r1, [pc, #104]	; (34024 <conn_release.constprop.0+0x78>)
   33fba:	481b      	ldr	r0, [pc, #108]	; (34028 <conn_release.constprop.0+0x7c>)
   33fbc:	f640 1395 	movw	r3, #2453	; 0x995
   33fc0:	f00e fb02 	bl	425c8 <assert_print>
   33fc4:	4040      	eors	r0, r0
   33fc6:	f380 8811 	msr	BASEPRI, r0
   33fca:	f04f 0003 	mov.w	r0, #3
   33fce:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   33fd0:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   33fd4:	f105 0048 	add.w	r0, r5, #72	; 0x48
   33fd8:	f7fc f876 	bl	300c8 <memq_deinit>
	LL_ASSERT(link);
   33fdc:	4606      	mov	r6, r0
   33fde:	b170      	cbz	r0, 33ffe <conn_release.constprop.0+0x52>
	ll_conn_release(lll->hdr.parent);
   33fe0:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
   33fe2:	65ae      	str	r6, [r5, #88]	; 0x58
	adv->lll.conn = NULL;
   33fe4:	2500      	movs	r5, #0
	ll_conn_release(lll->hdr.parent);
   33fe6:	f001 f9e5 	bl	353b4 <ll_conn_release>
	ll_rx_release(adv->node_rx_cc_free);
   33fea:	6e60      	ldr	r0, [r4, #100]	; 0x64
	adv->lll.conn = NULL;
   33fec:	6225      	str	r5, [r4, #32]
	ll_rx_release(adv->node_rx_cc_free);
   33fee:	f7ff f9bd 	bl	3336c <ll_rx_release>
	ll_rx_link_release(adv->link_cc_free);
   33ff2:	6e20      	ldr	r0, [r4, #96]	; 0x60
	adv->node_rx_cc_free = NULL;
   33ff4:	6665      	str	r5, [r4, #100]	; 0x64
	ll_rx_link_release(adv->link_cc_free);
   33ff6:	f7ff f9ad 	bl	33354 <ll_rx_link_release>
	adv->link_cc_free = NULL;
   33ffa:	6625      	str	r5, [r4, #96]	; 0x60
}
   33ffc:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   33ffe:	4a08      	ldr	r2, [pc, #32]	; (34020 <conn_release.constprop.0+0x74>)
   34000:	490a      	ldr	r1, [pc, #40]	; (3402c <conn_release.constprop.0+0x80>)
   34002:	4809      	ldr	r0, [pc, #36]	; (34028 <conn_release.constprop.0+0x7c>)
   34004:	f640 1397 	movw	r3, #2455	; 0x997
   34008:	f00e fade 	bl	425c8 <assert_print>
   3400c:	4040      	eors	r0, r0
   3400e:	f380 8811 	msr	BASEPRI, r0
   34012:	f04f 0003 	mov.w	r0, #3
   34016:	df02      	svc	2
   34018:	e7e2      	b.n	33fe0 <conn_release.constprop.0+0x34>
   3401a:	bf00      	nop
   3401c:	2000274c 	.word	0x2000274c
   34020:	00049ad4 	.word	0x00049ad4
   34024:	00049bac 	.word	0x00049bac
   34028:	000497b0 	.word	0x000497b0
   3402c:	00049cb8 	.word	0x00049cb8

00034030 <disable.constprop.0>:
static inline uint8_t disable(uint8_t handle)
   34030:	b530      	push	{r4, r5, lr}
	if (!adv || !adv->is_enabled) {
   34032:	4c4f      	ldr	r4, [pc, #316]	; (34170 <disable.constprop.0+0x140>)
   34034:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   34038:	07d9      	lsls	r1, r3, #31
static inline uint8_t disable(uint8_t handle)
   3403a:	b085      	sub	sp, #20
	if (!adv || !adv->is_enabled) {
   3403c:	d55f      	bpl.n	340fe <disable.constprop.0+0xce>
	if (adv->lll.conn) {
   3403e:	6a23      	ldr	r3, [r4, #32]
   34040:	b153      	cbz	r3, 34058 <disable.constprop.0+0x28>
		adv->lll.conn->periph.cancelled = 1U;
   34042:	f893 2020 	ldrb.w	r2, [r3, #32]
   34046:	f042 0202 	orr.w	r2, r2, #2
   3404a:	f883 2020 	strb.w	r2, [r3, #32]
		if (unlikely(adv->lll.conn->periph.initiated)) {
   3404e:	6a23      	ldr	r3, [r4, #32]
   34050:	f893 3020 	ldrb.w	r3, [r3, #32]
   34054:	07da      	lsls	r2, r3, #31
   34056:	d467      	bmi.n	34128 <disable.constprop.0+0xf8>
	mark = ull_disable_mark(adv);
   34058:	4845      	ldr	r0, [pc, #276]	; (34170 <disable.constprop.0+0x140>)
   3405a:	f7ff fa55 	bl	33508 <ull_disable_mark>
	LL_ASSERT(mark == adv);
   3405e:	4284      	cmp	r4, r0
   34060:	d00c      	beq.n	3407c <disable.constprop.0+0x4c>
   34062:	4a44      	ldr	r2, [pc, #272]	; (34174 <disable.constprop.0+0x144>)
   34064:	4944      	ldr	r1, [pc, #272]	; (34178 <disable.constprop.0+0x148>)
   34066:	4845      	ldr	r0, [pc, #276]	; (3417c <disable.constprop.0+0x14c>)
   34068:	f640 2362 	movw	r3, #2658	; 0xa62
   3406c:	f00e faac 	bl	425c8 <assert_print>
   34070:	4040      	eors	r0, r0
   34072:	f380 8811 	msr	BASEPRI, r0
   34076:	f04f 0003 	mov.w	r0, #3
   3407a:	df02      	svc	2
	if (adv->lll.is_hdcd) {
   3407c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   34080:	07db      	lsls	r3, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   34082:	ad03      	add	r5, sp, #12
	if (adv->lll.is_hdcd) {
   34084:	d50d      	bpl.n	340a2 <disable.constprop.0+0x72>
		ret_cb = TICKER_STATUS_BUSY;
   34086:	2102      	movs	r1, #2
   34088:	9103      	str	r1, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   3408a:	4b3d      	ldr	r3, [pc, #244]	; (34180 <disable.constprop.0+0x150>)
   3408c:	9500      	str	r5, [sp, #0]
   3408e:	2103      	movs	r1, #3
   34090:	2201      	movs	r2, #1
   34092:	2000      	movs	r0, #0
   34094:	f7fd fa18 	bl	314c8 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
   34098:	4629      	mov	r1, r5
   3409a:	f7ff fa0d 	bl	334b8 <ull_ticker_status_take>
		if (ret) {
   3409e:	2800      	cmp	r0, #0
   340a0:	d152      	bne.n	34148 <disable.constprop.0+0x118>
	ret_cb = TICKER_STATUS_BUSY;
   340a2:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   340a4:	2103      	movs	r1, #3
   340a6:	4b36      	ldr	r3, [pc, #216]	; (34180 <disable.constprop.0+0x150>)
   340a8:	9500      	str	r5, [sp, #0]
   340aa:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
   340ac:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   340ae:	f7fd fa0b 	bl	314c8 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   340b2:	4629      	mov	r1, r5
   340b4:	f7ff fa00 	bl	334b8 <ull_ticker_status_take>
	if (ret) {
   340b8:	bb20      	cbnz	r0, 34104 <disable.constprop.0+0xd4>
	err = ull_disable(&adv->lll);
   340ba:	4832      	ldr	r0, [pc, #200]	; (34184 <disable.constprop.0+0x154>)
   340bc:	f7ff fa60 	bl	33580 <ull_disable>
	LL_ASSERT(!err || (err == -EALREADY));
   340c0:	b108      	cbz	r0, 340c6 <disable.constprop.0+0x96>
   340c2:	3078      	adds	r0, #120	; 0x78
   340c4:	d132      	bne.n	3412c <disable.constprop.0+0xfc>
	mark = ull_disable_unmark(adv);
   340c6:	482a      	ldr	r0, [pc, #168]	; (34170 <disable.constprop.0+0x140>)
   340c8:	f7ff fa2a 	bl	33520 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   340cc:	4284      	cmp	r4, r0
   340ce:	d00c      	beq.n	340ea <disable.constprop.0+0xba>
   340d0:	4a28      	ldr	r2, [pc, #160]	; (34174 <disable.constprop.0+0x144>)
   340d2:	4929      	ldr	r1, [pc, #164]	; (34178 <disable.constprop.0+0x148>)
   340d4:	4829      	ldr	r0, [pc, #164]	; (3417c <disable.constprop.0+0x14c>)
   340d6:	f640 2384 	movw	r3, #2692	; 0xa84
   340da:	f00e fa75 	bl	425c8 <assert_print>
   340de:	4040      	eors	r0, r0
   340e0:	f380 8811 	msr	BASEPRI, r0
   340e4:	f04f 0003 	mov.w	r0, #3
   340e8:	df02      	svc	2
	if (adv->lll.conn) {
   340ea:	6a23      	ldr	r3, [r4, #32]
   340ec:	b10b      	cbz	r3, 340f2 <disable.constprop.0+0xc2>
		conn_release(adv);
   340ee:	f7ff ff5d 	bl	33fac <conn_release.constprop.0>
	adv->is_enabled = 0U;
   340f2:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   340f6:	f36f 0300 	bfc	r3, #0, #1
   340fa:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
			return 0;
   340fe:	2000      	movs	r0, #0
}
   34100:	b005      	add	sp, #20
   34102:	bd30      	pop	{r4, r5, pc}
		mark = ull_disable_unmark(adv);
   34104:	481a      	ldr	r0, [pc, #104]	; (34170 <disable.constprop.0+0x140>)
   34106:	f7ff fa0b 	bl	33520 <ull_disable_unmark>
		LL_ASSERT(mark == adv);
   3410a:	4284      	cmp	r4, r0
   3410c:	d00c      	beq.n	34128 <disable.constprop.0+0xf8>
   3410e:	4a19      	ldr	r2, [pc, #100]	; (34174 <disable.constprop.0+0x144>)
   34110:	4919      	ldr	r1, [pc, #100]	; (34178 <disable.constprop.0+0x148>)
   34112:	481a      	ldr	r0, [pc, #104]	; (3417c <disable.constprop.0+0x14c>)
   34114:	f640 237b 	movw	r3, #2683	; 0xa7b
   34118:	f00e fa56 	bl	425c8 <assert_print>
   3411c:	4040      	eors	r0, r0
   3411e:	f380 8811 	msr	BASEPRI, r0
   34122:	f04f 0003 	mov.w	r0, #3
   34126:	df02      	svc	2
			return BT_HCI_ERR_CMD_DISALLOWED;
   34128:	200c      	movs	r0, #12
   3412a:	e7e9      	b.n	34100 <disable.constprop.0+0xd0>
	LL_ASSERT(!err || (err == -EALREADY));
   3412c:	4a11      	ldr	r2, [pc, #68]	; (34174 <disable.constprop.0+0x144>)
   3412e:	4916      	ldr	r1, [pc, #88]	; (34188 <disable.constprop.0+0x158>)
   34130:	4812      	ldr	r0, [pc, #72]	; (3417c <disable.constprop.0+0x14c>)
   34132:	f640 2381 	movw	r3, #2689	; 0xa81
   34136:	f00e fa47 	bl	425c8 <assert_print>
   3413a:	4040      	eors	r0, r0
   3413c:	f380 8811 	msr	BASEPRI, r0
   34140:	f04f 0003 	mov.w	r0, #3
   34144:	df02      	svc	2
   34146:	e7be      	b.n	340c6 <disable.constprop.0+0x96>
			mark = ull_disable_unmark(adv);
   34148:	4809      	ldr	r0, [pc, #36]	; (34170 <disable.constprop.0+0x140>)
   3414a:	f7ff f9e9 	bl	33520 <ull_disable_unmark>
			LL_ASSERT(mark == adv);
   3414e:	4284      	cmp	r4, r0
   34150:	d0ea      	beq.n	34128 <disable.constprop.0+0xf8>
   34152:	4a08      	ldr	r2, [pc, #32]	; (34174 <disable.constprop.0+0x144>)
   34154:	4908      	ldr	r1, [pc, #32]	; (34178 <disable.constprop.0+0x148>)
   34156:	4809      	ldr	r0, [pc, #36]	; (3417c <disable.constprop.0+0x14c>)
   34158:	f640 236d 	movw	r3, #2669	; 0xa6d
   3415c:	f00e fa34 	bl	425c8 <assert_print>
   34160:	4040      	eors	r0, r0
   34162:	f380 8811 	msr	BASEPRI, r0
   34166:	f04f 0003 	mov.w	r0, #3
   3416a:	df02      	svc	2
   3416c:	e7dc      	b.n	34128 <disable.constprop.0+0xf8>
   3416e:	bf00      	nop
   34170:	2000274c 	.word	0x2000274c
   34174:	00049ad4 	.word	0x00049ad4
   34178:	00049bc0 	.word	0x00049bc0
   3417c:	000497b0 	.word	0x000497b0
   34180:	00032a79 	.word	0x00032a79
   34184:	20002768 	.word	0x20002768
   34188:	00049bcc 	.word	0x00049bcc

0003418c <adv_time_get.constprop.0.isra.0>:
static uint16_t adv_time_get(struct pdu_adv *pdu, struct pdu_adv *pdu_scan,
   3418c:	b410      	push	{r4}
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   3418e:	7804      	ldrb	r4, [r0, #0]
   34190:	f004 040f 	and.w	r4, r4, #15
				   rxtx_turn_us * (adv_chn_cnt - 1);
   34194:	1e53      	subs	r3, r2, #1
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   34196:	2c02      	cmp	r4, #2
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
   34198:	b29b      	uxth	r3, r3
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   3419a:	d01f      	beq.n	341dc <adv_time_get.constprop.0.isra.0+0x50>
			if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   3419c:	2c01      	cmp	r4, #1
   3419e:	d009      	beq.n	341b4 <adv_time_get.constprop.0.isra.0+0x28>
			BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
   341a0:	3110      	adds	r1, #16
		const uint16_t scan_rsp_us =
   341a2:	00c9      	lsls	r1, r1, #3
			} else if (pdu->type == PDU_ADV_TYPE_ADV_IND) {
   341a4:	b18c      	cbz	r4, 341ca <adv_time_get.constprop.0.isra.0+0x3e>
			} else if (pdu->type == PDU_ADV_TYPE_SCAN_IND) {
   341a6:	2c06      	cmp	r4, #6
   341a8:	d00f      	beq.n	341ca <adv_time_get.constprop.0.isra.0+0x3e>
   341aa:	f240 426a 	movw	r2, #1130	; 0x46a
   341ae:	f44f 70f3 	mov.w	r0, #486	; 0x1e6
   341b2:	e003      	b.n	341bc <adv_time_get.constprop.0.isra.0+0x30>
   341b4:	f240 52fa 	movw	r2, #1530	; 0x5fa
   341b8:	f240 2016 	movw	r0, #534	; 0x216
			time_us += (BYTES2US(adv_size, PHY_1M) +
   341bc:	fb03 2300 	mla	r3, r3, r0, r2
   341c0:	f64f 70fe 	movw	r0, #65534	; 0xfffe
   341c4:	4018      	ands	r0, r3
}
   341c6:	bc10      	pop	{r4}
   341c8:	4770      	bx	lr
				adv_size += pdu->len;
   341ca:	7842      	ldrb	r2, [r0, #1]
   341cc:	3210      	adds	r2, #16
			time_us += (BYTES2US(adv_size, PHY_1M) +
   341ce:	00d2      	lsls	r2, r2, #3
   341d0:	f201 5132 	addw	r1, r1, #1330	; 0x532
				    rxtx_turn_us) * (adv_chn_cnt - 1) +
   341d4:	f502 70b3 	add.w	r0, r2, #358	; 0x166
   341d8:	440a      	add	r2, r1
   341da:	e7ef      	b.n	341bc <adv_time_get.constprop.0.isra.0+0x30>
			adv_size += pdu->len;
   341dc:	7841      	ldrb	r1, [r0, #1]
}
   341de:	bc10      	pop	{r4}
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
   341e0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   341e4:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   341e8:	0058      	lsls	r0, r3, #1
   341ea:	3110      	adds	r1, #16
   341ec:	f200 3052 	addw	r0, r0, #850	; 0x352
   341f0:	00cb      	lsls	r3, r1, #3
   341f2:	fb03 0202 	mla	r2, r3, r2, r0
   341f6:	b290      	uxth	r0, r2
}
   341f8:	4770      	bx	lr
   341fa:	bf00      	nop

000341fc <ticker_cb>:
{
   341fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   34200:	461d      	mov	r5, r3
   34202:	b08a      	sub	sp, #40	; 0x28
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   34204:	f64f 73ff 	movw	r3, #65535	; 0xffff
   34208:	429d      	cmp	r5, r3
{
   3420a:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
   3420e:	9c11      	ldr	r4, [sp, #68]	; 0x44
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   34210:	d018      	beq.n	34244 <ticker_cb+0x48>
	return ++hdr->ref;
   34212:	7823      	ldrb	r3, [r4, #0]
   34214:	3301      	adds	r3, #1
   34216:	b2db      	uxtb	r3, r3
   34218:	4607      	mov	r7, r0
   3421a:	4616      	mov	r6, r2
   3421c:	7023      	strb	r3, [r4, #0]
		LL_ASSERT(ref);
   3421e:	2b00      	cmp	r3, #0
   34220:	d064      	beq.n	342ec <ticker_cb+0xf0>
		p.ticks_at_expire = ticks_at_expire;
   34222:	4939      	ldr	r1, [pc, #228]	; (34308 <ticker_cb+0x10c>)
		mfy.param = &p;
   34224:	4b39      	ldr	r3, [pc, #228]	; (3430c <ticker_cb+0x110>)
		p.lazy = lazy;
   34226:	810d      	strh	r5, [r1, #8]
	lll = &adv->lll;
   34228:	f104 001c 	add.w	r0, r4, #28
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   3422c:	2200      	movs	r2, #0
		p.param = lll;
   3422e:	60c8      	str	r0, [r1, #12]
		p.remainder = remainder;
   34230:	e9c1 7600 	strd	r7, r6, [r1]
		p.force = force;
   34234:	f881 800a 	strb.w	r8, [r1, #10]
		mfy.param = &p;
   34238:	6099      	str	r1, [r3, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   3423a:	2001      	movs	r0, #1
   3423c:	4611      	mov	r1, r2
   3423e:	f7fb ffc3 	bl	301c8 <mayfly_enqueue>
		LL_ASSERT(!ret);
   34242:	b938      	cbnz	r0, 34254 <ticker_cb+0x58>
	if (!lll->is_hdcd)
   34244:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   34248:	f010 0501 	ands.w	r5, r0, #1
   3424c:	d014      	beq.n	34278 <ticker_cb+0x7c>
}
   3424e:	b00a      	add	sp, #40	; 0x28
   34250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(!ret);
   34254:	4a2e      	ldr	r2, [pc, #184]	; (34310 <ticker_cb+0x114>)
   34256:	492f      	ldr	r1, [pc, #188]	; (34314 <ticker_cb+0x118>)
   34258:	482f      	ldr	r0, [pc, #188]	; (34318 <ticker_cb+0x11c>)
   3425a:	f640 03de 	movw	r3, #2270	; 0x8de
   3425e:	f00e f9b3 	bl	425c8 <assert_print>
   34262:	4040      	eors	r0, r0
   34264:	f380 8811 	msr	BASEPRI, r0
   34268:	f04f 0003 	mov.w	r0, #3
   3426c:	df02      	svc	2
	if (!lll->is_hdcd)
   3426e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   34272:	f010 0501 	ands.w	r5, r0, #1
   34276:	d1ea      	bne.n	3424e <ticker_cb+0x52>
	lll_rand_isr_get(&random_delay, sizeof(random_delay));
   34278:	2104      	movs	r1, #4
   3427a:	a809      	add	r0, sp, #36	; 0x24
   3427c:	f005 fc2c 	bl	39ad8 <lll_rand_isr_get>
	random_delay %= ticks_delay_window;
   34280:	9b09      	ldr	r3, [sp, #36]	; 0x24
   34282:	4a26      	ldr	r2, [pc, #152]	; (3431c <ticker_cb+0x120>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   34284:	9406      	str	r4, [sp, #24]
	random_delay %= ticks_delay_window;
   34286:	fba2 1203 	umull	r1, r2, r2, r3
   3428a:	1a99      	subs	r1, r3, r2
   3428c:	eb02 0251 	add.w	r2, r2, r1, lsr #1
   34290:	0a12      	lsrs	r2, r2, #8
   34292:	f240 1147 	movw	r1, #327	; 0x147
   34296:	fb01 3312 	mls	r3, r1, r2, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   3429a:	4a21      	ldr	r2, [pc, #132]	; (34320 <ticker_cb+0x124>)
   3429c:	4921      	ldr	r1, [pc, #132]	; (34324 <ticker_cb+0x128>)
   3429e:	1aa2      	subs	r2, r4, r2
   342a0:	0892      	lsrs	r2, r2, #2
   342a2:	fba1 1202 	umull	r1, r2, r1, r2
   342a6:	08d2      	lsrs	r2, r2, #3
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   342a8:	491f      	ldr	r1, [pc, #124]	; (34328 <ticker_cb+0x12c>)
   342aa:	3202      	adds	r2, #2
	random_delay += (ticks_delay_window_offset + 1);
   342ac:	3301      	adds	r3, #1
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   342ae:	e9cd 5104 	strd	r5, r1, [sp, #16]
   342b2:	e9cd 5502 	strd	r5, r5, [sp, #8]
   342b6:	e9cd 5500 	strd	r5, r5, [sp]
   342ba:	b2d2      	uxtb	r2, r2
   342bc:	2101      	movs	r1, #1
   342be:	4628      	mov	r0, r5
	random_delay += (ticks_delay_window_offset + 1);
   342c0:	9309      	str	r3, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   342c2:	f7fd f8e9 	bl	31498 <ticker_update>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   342c6:	f030 0302 	bics.w	r3, r0, #2
   342ca:	d0c0      	beq.n	3424e <ticker_cb+0x52>
   342cc:	4a10      	ldr	r2, [pc, #64]	; (34310 <ticker_cb+0x114>)
   342ce:	4917      	ldr	r1, [pc, #92]	; (3432c <ticker_cb+0x130>)
   342d0:	4811      	ldr	r0, [pc, #68]	; (34318 <ticker_cb+0x11c>)
   342d2:	f240 7373 	movw	r3, #1907	; 0x773
   342d6:	f00e f977 	bl	425c8 <assert_print>
   342da:	4040      	eors	r0, r0
   342dc:	f380 8811 	msr	BASEPRI, r0
   342e0:	f04f 0003 	mov.w	r0, #3
   342e4:	df02      	svc	2
}
   342e6:	b00a      	add	sp, #40	; 0x28
   342e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(ref);
   342ec:	4a08      	ldr	r2, [pc, #32]	; (34310 <ticker_cb+0x114>)
   342ee:	4910      	ldr	r1, [pc, #64]	; (34330 <ticker_cb+0x134>)
   342f0:	4809      	ldr	r0, [pc, #36]	; (34318 <ticker_cb+0x11c>)
   342f2:	f640 03d1 	movw	r3, #2257	; 0x8d1
   342f6:	f00e f967 	bl	425c8 <assert_print>
   342fa:	4040      	eors	r0, r0
   342fc:	f380 8811 	msr	BASEPRI, r0
   34300:	f04f 0003 	mov.w	r0, #3
   34304:	df02      	svc	2
   34306:	e78c      	b.n	34222 <ticker_cb+0x26>
   34308:	20002720 	.word	0x20002720
   3430c:	20000708 	.word	0x20000708
   34310:	00049ad4 	.word	0x00049ad4
   34314:	00049a4c 	.word	0x00049a4c
   34318:	000497b0 	.word	0x000497b0
   3431c:	90d4f121 	.word	0x90d4f121
   34320:	2000274c 	.word	0x2000274c
   34324:	4bda12f7 	.word	0x4bda12f7
   34328:	00033f31 	.word	0x00033f31
   3432c:	00049be8 	.word	0x00049be8
   34330:	00049be4 	.word	0x00049be4

00034334 <ll_adv_params_set>:
{
   34334:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!adv || adv->is_enabled) {
   34338:	4c6c      	ldr	r4, [pc, #432]	; (344ec <ll_adv_params_set+0x1b8>)
{
   3433a:	461f      	mov	r7, r3
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   3433c:	4b6c      	ldr	r3, [pc, #432]	; (344f0 <ll_adv_params_set+0x1bc>)
	if (!adv || adv->is_enabled) {
   3433e:	f894 606a 	ldrb.w	r6, [r4, #106]	; 0x6a
{
   34342:	4686      	mov	lr, r0
   34344:	468c      	mov	ip, r1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   34346:	e893 0003 	ldmia.w	r3, {r0, r1}
{
   3434a:	b083      	sub	sp, #12
	if (!adv || adv->is_enabled) {
   3434c:	f016 0601 	ands.w	r6, r6, #1
{
   34350:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
   34354:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   34358:	9000      	str	r0, [sp, #0]
   3435a:	f88d 1004 	strb.w	r1, [sp, #4]
	if (!adv || adv->is_enabled) {
   3435e:	f040 809c 	bne.w	3449a <ll_adv_params_set+0x166>
	adv->lll.chan_map = chan_map;
   34362:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
   34364:	4615      	mov	r5, r2
   34366:	f008 0207 	and.w	r2, r8, #7
   3436a:	f003 0303 	and.w	r3, r3, #3
   3436e:	0052      	lsls	r2, r2, #1
   34370:	f421 7143 	bic.w	r1, r1, #780	; 0x30c
   34374:	f021 0102 	bic.w	r1, r1, #2
   34378:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   3437c:	430a      	orrs	r2, r1
   3437e:	84a2      	strh	r2, [r4, #36]	; 0x24
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   34380:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
   34384:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		adv->interval = 0;
   34388:	f1bc 0f01 	cmp.w	ip, #1
	pdu->type = pdu_adv_type[adv_type];
   3438c:	f10c 0308 	add.w	r3, ip, #8
   34390:	f8d2 802c 	ldr.w	r8, [r2, #44]	; 0x2c
		adv->interval = 0;
   34394:	bf08      	it	eq
   34396:	f04f 0e00 	moveq.w	lr, #0
	pdu->type = pdu_adv_type[adv_type];
   3439a:	eb0d 0c03 	add.w	ip, sp, r3
   3439e:	f8a4 e068 	strh.w	lr, [r4, #104]	; 0x68
	pdu_type_prev = pdu->type;
   343a2:	f898 2000 	ldrb.w	r2, [r8]
	pdu->type = pdu_adv_type[adv_type];
   343a6:	f81c 3c08 	ldrb.w	r3, [ip, #-8]
   343aa:	f022 001f 	bic.w	r0, r2, #31
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   343ae:	f013 0f0e 	tst.w	r3, #14
	pdu->type = pdu_adv_type[adv_type];
   343b2:	f003 030f 	and.w	r3, r3, #15
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   343b6:	bf0c      	ite	eq
   343b8:	2101      	moveq	r1, #1
   343ba:	2100      	movne	r1, #0
   343bc:	4303      	orrs	r3, r0
   343be:	f361 1345 	bfi	r3, r1, #5, #1
   343c2:	f888 3000 	strb.w	r3, [r8]
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   343c6:	f003 030f 	and.w	r3, r3, #15
   343ca:	2b01      	cmp	r3, #1
	pdu_type_prev = pdu->type;
   343cc:	f002 020f 	and.w	r2, r2, #15
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   343d0:	d02e      	beq.n	34430 <ll_adv_params_set+0xfc>
	} else if (pdu->len == 0) {
   343d2:	f898 3001 	ldrb.w	r3, [r8, #1]
   343d6:	b9f3      	cbnz	r3, 34416 <ll_adv_params_set+0xe2>
		pdu->tx_addr = own_addr_type & 0x1;
   343d8:	f898 3000 	ldrb.w	r3, [r8]
   343dc:	f005 0501 	and.w	r5, r5, #1
   343e0:	f365 1386 	bfi	r3, r5, #6, #1
		pdu->rx_addr = 0;
   343e4:	f36f 13c7 	bfc	r3, #7, #1
   343e8:	f888 3000 	strb.w	r3, [r8]
		pdu->len = BDADDR_SIZE;
   343ec:	2306      	movs	r3, #6
   343ee:	f888 3001 	strb.w	r3, [r8, #1]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   343f2:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   343f6:	61e4      	str	r4, [r4, #28]
   343f8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   343fc:	01ad      	lsls	r5, r5, #6
   343fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if (pdu->len == 0) {
   34400:	785a      	ldrb	r2, [r3, #1]
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   34402:	f045 0504 	orr.w	r5, r5, #4
   34406:	701d      	strb	r5, [r3, #0]
		if (pdu->len == 0) {
   34408:	b90a      	cbnz	r2, 3440e <ll_adv_params_set+0xda>
			pdu->len = BDADDR_SIZE;
   3440a:	2206      	movs	r2, #6
   3440c:	705a      	strb	r2, [r3, #1]
}
   3440e:	4630      	mov	r0, r6
   34410:	b003      	add	sp, #12
   34412:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (((pdu_type_prev == PDU_ADV_TYPE_DIRECT_IND) ||
   34416:	2a01      	cmp	r2, #1
   34418:	d031      	beq.n	3447e <ll_adv_params_set+0x14a>
		pdu->tx_addr = own_addr_type & 0x1;
   3441a:	f898 3000 	ldrb.w	r3, [r8]
   3441e:	f005 0501 	and.w	r5, r5, #1
   34422:	f365 1386 	bfi	r3, r5, #6, #1
		pdu->rx_addr = 0;
   34426:	f36f 13c7 	bfc	r3, #7, #1
   3442a:	f888 3000 	strb.w	r3, [r8]
   3442e:	e7e0      	b.n	343f2 <ll_adv_params_set+0xbe>
	    (pdu_type_prev != PDU_ADV_TYPE_DIRECT_IND) &&
   34430:	2a01      	cmp	r2, #1
   34432:	d00f      	beq.n	34454 <ll_adv_params_set+0x120>
		if (pdu->len == 0U) {
   34434:	f898 2001 	ldrb.w	r2, [r8, #1]
   34438:	bba2      	cbnz	r2, 344a4 <ll_adv_params_set+0x170>
			adv->ad_data_backup.len = 0U;
   3443a:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   3443e:	f898 3000 	ldrb.w	r3, [r8]
   34442:	f003 030f 	and.w	r3, r3, #15
   34446:	2b01      	cmp	r3, #1
   34448:	d004      	beq.n	34454 <ll_adv_params_set+0x120>
	} else if (pdu->len == 0) {
   3444a:	f898 3001 	ldrb.w	r3, [r8, #1]
   3444e:	2b00      	cmp	r3, #0
   34450:	d0c2      	beq.n	343d8 <ll_adv_params_set+0xa4>
   34452:	e7e2      	b.n	3441a <ll_adv_params_set+0xe6>
			memcpy(adv->ad_data_backup.data, pdu->adv_ind.data,
   34454:	f108 0908 	add.w	r9, r8, #8
		pdu->tx_addr = own_addr_type & 0x1;
   34458:	f898 3000 	ldrb.w	r3, [r8]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   3445c:	990a      	ldr	r1, [sp, #40]	; 0x28
		pdu->tx_addr = own_addr_type & 0x1;
   3445e:	f005 0501 	and.w	r5, r5, #1
   34462:	f365 1386 	bfi	r3, r5, #6, #1
		pdu->rx_addr = direct_addr_type;
   34466:	f367 13c7 	bfi	r3, r7, #7, #1
   3446a:	f888 3000 	strb.w	r3, [r8]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   3446e:	4648      	mov	r0, r9
   34470:	2206      	movs	r2, #6
   34472:	f00f ff51 	bl	44318 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   34476:	230c      	movs	r3, #12
   34478:	f888 3001 	strb.w	r3, [r8, #1]
   3447c:	e7b9      	b.n	343f2 <ll_adv_params_set+0xbe>
			memcpy(pdu->adv_ind.data, adv->ad_data_backup.data,
   3447e:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   34482:	f104 0141 	add.w	r1, r4, #65	; 0x41
   34486:	f108 0008 	add.w	r0, r8, #8
   3448a:	f00f ff45 	bl	44318 <memcpy>
			pdu->len = offsetof(struct pdu_adv_adv_ind, data) +
   3448e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   34492:	3306      	adds	r3, #6
   34494:	f888 3001 	strb.w	r3, [r8, #1]
   34498:	e7bf      	b.n	3441a <ll_adv_params_set+0xe6>
		return BT_HCI_ERR_CMD_DISALLOWED;
   3449a:	260c      	movs	r6, #12
}
   3449c:	4630      	mov	r0, r6
   3449e:	b003      	add	sp, #12
   344a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			LL_ASSERT(pdu->len >=
   344a4:	2a05      	cmp	r2, #5
   344a6:	d910      	bls.n	344ca <ll_adv_params_set+0x196>
			adv->ad_data_backup.len = pdu->len -
   344a8:	3a06      	subs	r2, #6
   344aa:	b2d2      	uxtb	r2, r2
			memcpy(adv->ad_data_backup.data, pdu->adv_ind.data,
   344ac:	f108 0908 	add.w	r9, r8, #8
   344b0:	4810      	ldr	r0, [pc, #64]	; (344f4 <ll_adv_params_set+0x1c0>)
			adv->ad_data_backup.len = pdu->len -
   344b2:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
			memcpy(adv->ad_data_backup.data, pdu->adv_ind.data,
   344b6:	4649      	mov	r1, r9
   344b8:	f00f ff2e 	bl	44318 <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   344bc:	f898 3000 	ldrb.w	r3, [r8]
   344c0:	f003 030f 	and.w	r3, r3, #15
   344c4:	2b01      	cmp	r3, #1
   344c6:	d1c0      	bne.n	3444a <ll_adv_params_set+0x116>
   344c8:	e7c6      	b.n	34458 <ll_adv_params_set+0x124>
			LL_ASSERT(pdu->len >=
   344ca:	4a0b      	ldr	r2, [pc, #44]	; (344f8 <ll_adv_params_set+0x1c4>)
   344cc:	490b      	ldr	r1, [pc, #44]	; (344fc <ll_adv_params_set+0x1c8>)
   344ce:	480c      	ldr	r0, [pc, #48]	; (34500 <ll_adv_params_set+0x1cc>)
   344d0:	f44f 73d9 	mov.w	r3, #434	; 0x1b2
   344d4:	f00e f878 	bl	425c8 <assert_print>
   344d8:	4040      	eors	r0, r0
   344da:	f380 8811 	msr	BASEPRI, r0
   344de:	f04f 0003 	mov.w	r0, #3
   344e2:	df02      	svc	2
			adv->ad_data_backup.len = pdu->len -
   344e4:	f898 2001 	ldrb.w	r2, [r8, #1]
   344e8:	e7de      	b.n	344a8 <ll_adv_params_set+0x174>
   344ea:	bf00      	nop
   344ec:	2000274c 	.word	0x2000274c
   344f0:	00048ea0 	.word	0x00048ea0
   344f4:	2000278d 	.word	0x2000278d
   344f8:	00049ad4 	.word	0x00049ad4
   344fc:	00049c20 	.word	0x00049c20
   34500:	000497b0 	.word	0x000497b0

00034504 <ull_adv_init>:
{
   34504:	b510      	push	{r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   34506:	4c06      	ldr	r4, [pc, #24]	; (34520 <ull_adv_init+0x1c>)
   34508:	4620      	mov	r0, r4
   3450a:	f005 ff1b 	bl	3a344 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   3450e:	f104 000c 	add.w	r0, r4, #12
   34512:	f005 ff17 	bl	3a344 <lll_adv_data_init>
	init_set(&ll_adv[0]);
   34516:	f7ff fd27 	bl	33f68 <init_set.constprop.0>
}
   3451a:	2000      	movs	r0, #0
   3451c:	bd10      	pop	{r4, pc}
   3451e:	bf00      	nop
   34520:	20002774 	.word	0x20002774

00034524 <ull_adv_reset>:
{
   34524:	b508      	push	{r3, lr}
		(void)disable(handle);
   34526:	f7ff fd83 	bl	34030 <disable.constprop.0>
}
   3452a:	2000      	movs	r0, #0
   3452c:	bd08      	pop	{r3, pc}
   3452e:	bf00      	nop

00034530 <ull_adv_reset_finalize>:
{
   34530:	b538      	push	{r3, r4, r5, lr}
		lll_adv_data_reset(&lll->adv_data);
   34532:	4c09      	ldr	r4, [pc, #36]	; (34558 <ull_adv_reset_finalize+0x28>)
		lll_adv_data_reset(&lll->scan_rsp);
   34534:	f104 050c 	add.w	r5, r4, #12
		lll_adv_data_reset(&lll->adv_data);
   34538:	4620      	mov	r0, r4
   3453a:	f005 ff13 	bl	3a364 <lll_adv_data_reset>
		lll_adv_data_reset(&lll->scan_rsp);
   3453e:	4628      	mov	r0, r5
   34540:	f005 ff10 	bl	3a364 <lll_adv_data_reset>
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   34544:	4620      	mov	r0, r4
   34546:	f005 fefd 	bl	3a344 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   3454a:	4628      	mov	r0, r5
   3454c:	f005 fefa 	bl	3a344 <lll_adv_data_init>
	init_set(&ll_adv[0]);
   34550:	f7ff fd0a 	bl	33f68 <init_set.constprop.0>
}
   34554:	2000      	movs	r0, #0
   34556:	bd38      	pop	{r3, r4, r5, pc}
   34558:	20002774 	.word	0x20002774

0003455c <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   3455c:	4a04      	ldr	r2, [pc, #16]	; (34570 <ull_adv_handle_get+0x14>)
   3455e:	4b05      	ldr	r3, [pc, #20]	; (34574 <ull_adv_handle_get+0x18>)
   34560:	1a80      	subs	r0, r0, r2
   34562:	0880      	lsrs	r0, r0, #2
   34564:	fba3 3000 	umull	r3, r0, r3, r0
}
   34568:	f3c0 00cf 	ubfx	r0, r0, #3, #16
   3456c:	4770      	bx	lr
   3456e:	bf00      	nop
   34570:	2000274c 	.word	0x2000274c
   34574:	4bda12f7 	.word	0x4bda12f7

00034578 <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   34578:	4a04      	ldr	r2, [pc, #16]	; (3458c <ull_adv_lll_handle_get+0x14>)
   3457a:	6800      	ldr	r0, [r0, #0]
   3457c:	4b04      	ldr	r3, [pc, #16]	; (34590 <ull_adv_lll_handle_get+0x18>)
   3457e:	1a80      	subs	r0, r0, r2
   34580:	0880      	lsrs	r0, r0, #2
   34582:	fba3 3000 	umull	r3, r0, r3, r0
}
   34586:	f3c0 00cf 	ubfx	r0, r0, #3, #16
   3458a:	4770      	bx	lr
   3458c:	2000274c 	.word	0x2000274c
   34590:	4bda12f7 	.word	0x4bda12f7

00034594 <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_SET) {
   34594:	b928      	cbnz	r0, 345a2 <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
   34596:	4b04      	ldr	r3, [pc, #16]	; (345a8 <ull_adv_is_enabled+0x14>)
   34598:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
   3459c:	f000 0001 	and.w	r0, r0, #1
   345a0:	4770      	bx	lr
   345a2:	2000      	movs	r0, #0
}
   345a4:	4770      	bx	lr
   345a6:	bf00      	nop
   345a8:	2000274c 	.word	0x2000274c

000345ac <ull_adv_data_set>:
	if (len > PDU_AC_LEG_DATA_SIZE_MAX) {
   345ac:	291f      	cmp	r1, #31
   345ae:	d857      	bhi.n	34660 <ull_adv_data_set+0xb4>
{
   345b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   345b4:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   345b8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   345bc:	b082      	sub	sp, #8
   345be:	6adf      	ldr	r7, [r3, #44]	; 0x2c
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   345c0:	783b      	ldrb	r3, [r7, #0]
   345c2:	f003 030f 	and.w	r3, r3, #15
   345c6:	2b01      	cmp	r3, #1
   345c8:	460e      	mov	r6, r1
   345ca:	4605      	mov	r5, r0
   345cc:	4690      	mov	r8, r2
   345ce:	d049      	beq.n	34664 <ull_adv_data_set+0xb8>
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   345d0:	f10d 0107 	add.w	r1, sp, #7
   345d4:	3028      	adds	r0, #40	; 0x28
   345d6:	f005 ff37 	bl	3a448 <lll_adv_pdu_alloc>
	pdu->type = prev->type;
   345da:	783a      	ldrb	r2, [r7, #0]
   345dc:	7803      	ldrb	r3, [r0, #0]
   345de:	f002 020f 	and.w	r2, r2, #15
   345e2:	f023 031f 	bic.w	r3, r3, #31
   345e6:	4313      	orrs	r3, r2
   345e8:	7003      	strb	r3, [r0, #0]
		pdu->chan_sel = prev->chan_sel;
   345ea:	783b      	ldrb	r3, [r7, #0]
   345ec:	7802      	ldrb	r2, [r0, #0]
   345ee:	f3c3 1340 	ubfx	r3, r3, #5, #1
   345f2:	f363 1245 	bfi	r2, r3, #5, #1
   345f6:	7002      	strb	r2, [r0, #0]
	pdu->tx_addr = prev->tx_addr;
   345f8:	783b      	ldrb	r3, [r7, #0]
   345fa:	b2d2      	uxtb	r2, r2
   345fc:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->rx_addr = prev->rx_addr;
   34600:	4639      	mov	r1, r7
	pdu->tx_addr = prev->tx_addr;
   34602:	f363 1286 	bfi	r2, r3, #6, #1
   34606:	7002      	strb	r2, [r0, #0]
	pdu->rx_addr = prev->rx_addr;
   34608:	f811 3b02 	ldrb.w	r3, [r1], #2
   3460c:	b2d2      	uxtb	r2, r2
   3460e:	09db      	lsrs	r3, r3, #7
   34610:	f363 12c7 	bfi	r2, r3, #7, #1
   34614:	4604      	mov	r4, r0
   34616:	f800 2b02 	strb.w	r2, [r0], #2
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   3461a:	2206      	movs	r2, #6
   3461c:	f00f fe7c 	bl	44318 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
   34620:	4632      	mov	r2, r6
   34622:	4641      	mov	r1, r8
   34624:	f104 0008 	add.w	r0, r4, #8
	pdu->len = BDADDR_SIZE + len;
   34628:	3606      	adds	r6, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
   3462a:	f00f fe75 	bl	44318 <memcpy>
	pdu->len = BDADDR_SIZE + len;
   3462e:	7066      	strb	r6, [r4, #1]
	if (adv->is_enabled) {
   34630:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
   34634:	07db      	lsls	r3, r3, #31
   34636:	d407      	bmi.n	34648 <ull_adv_data_set+0x9c>
	pdu->last = idx;
   34638:	f89d 3007 	ldrb.w	r3, [sp, #7]
   3463c:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
		return 0;
   34640:	2000      	movs	r0, #0
}
   34642:	b002      	add	sp, #8
   34644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   34648:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
   3464c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
		err = ull_adv_time_update(adv, pdu, pdu_scan);
   34650:	4621      	mov	r1, r4
   34652:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   34654:	4628      	mov	r0, r5
   34656:	f7f2 fb0f 	bl	26c78 <ull_adv_time_update>
		if (err) {
   3465a:	2800      	cmp	r0, #0
   3465c:	d0ec      	beq.n	34638 <ull_adv_data_set+0x8c>
   3465e:	e7f0      	b.n	34642 <ull_adv_data_set+0x96>
		return BT_HCI_ERR_INVALID_PARAM;
   34660:	2012      	movs	r0, #18
}
   34662:	4770      	bx	lr
		adv->ad_data_backup.len = len;
   34664:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
		memcpy(adv->ad_data_backup.data, data, adv->ad_data_backup.len);
   34668:	460a      	mov	r2, r1
   3466a:	3041      	adds	r0, #65	; 0x41
   3466c:	4641      	mov	r1, r8
   3466e:	f00f fe53 	bl	44318 <memcpy>
		return 0;
   34672:	e7e5      	b.n	34640 <ull_adv_data_set+0x94>

00034674 <ll_adv_data_set>:
{
   34674:	4603      	mov	r3, r0
   34676:	460a      	mov	r2, r1
	return ull_adv_data_set(adv, len, data);
   34678:	4801      	ldr	r0, [pc, #4]	; (34680 <ll_adv_data_set+0xc>)
   3467a:	4619      	mov	r1, r3
   3467c:	f7ff bf96 	b.w	345ac <ull_adv_data_set>
   34680:	2000274c 	.word	0x2000274c

00034684 <ull_scan_rsp_set.part.0>:
uint8_t ull_scan_rsp_set(struct ll_adv_set *adv, uint8_t len,
   34684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   34688:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   3468c:	b082      	sub	sp, #8
   3468e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   34692:	460e      	mov	r6, r1
   34694:	4605      	mov	r5, r0
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   34696:	f10d 0107 	add.w	r1, sp, #7
   3469a:	3034      	adds	r0, #52	; 0x34
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   3469c:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   346a0:	4617      	mov	r7, r2
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   346a2:	f005 fed1 	bl	3a448 <lll_adv_pdu_alloc>
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   346a6:	7803      	ldrb	r3, [r0, #0]
   346a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	pdu->tx_addr = prev->tx_addr;
   346ac:	4641      	mov	r1, r8
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   346ae:	f043 0304 	orr.w	r3, r3, #4
   346b2:	7003      	strb	r3, [r0, #0]
	pdu->tx_addr = prev->tx_addr;
   346b4:	f811 2b02 	ldrb.w	r2, [r1], #2
   346b8:	b2db      	uxtb	r3, r3
   346ba:	f3c2 1280 	ubfx	r2, r2, #6, #1
   346be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   346c2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
   346c6:	7003      	strb	r3, [r0, #0]
	pdu->len = BDADDR_SIZE + len;
   346c8:	1db3      	adds	r3, r6, #6
   346ca:	7043      	strb	r3, [r0, #1]
   346cc:	4604      	mov	r4, r0
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   346ce:	2206      	movs	r2, #6
   346d0:	3002      	adds	r0, #2
   346d2:	f00f fe21 	bl	44318 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   346d6:	4632      	mov	r2, r6
   346d8:	4639      	mov	r1, r7
   346da:	f104 0008 	add.w	r0, r4, #8
   346de:	f00f fe1b 	bl	44318 <memcpy>
	if (adv->is_enabled) {
   346e2:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
   346e6:	07da      	lsls	r2, r3, #31
   346e8:	d50b      	bpl.n	34702 <ull_scan_rsp_set.part.0+0x7e>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   346ea:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
   346ee:	eb05 0282 	add.w	r2, r5, r2, lsl #2
		if ((pdu_adv_scan->type == PDU_ADV_TYPE_ADV_IND) ||
   346f2:	2341      	movs	r3, #65	; 0x41
   346f4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   346f6:	780a      	ldrb	r2, [r1, #0]
   346f8:	f002 020f 	and.w	r2, r2, #15
   346fc:	40d3      	lsrs	r3, r2
   346fe:	07db      	lsls	r3, r3, #31
   34700:	d407      	bmi.n	34712 <ull_scan_rsp_set.part.0+0x8e>
	pdu->last = idx;
   34702:	f89d 3007 	ldrb.w	r3, [sp, #7]
   34706:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
	return 0;
   3470a:	2000      	movs	r0, #0
}
   3470c:	b002      	add	sp, #8
   3470e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = ull_adv_time_update(adv, pdu_adv_scan, pdu);
   34712:	4622      	mov	r2, r4
   34714:	4628      	mov	r0, r5
   34716:	f7f2 faaf 	bl	26c78 <ull_adv_time_update>
			if (err) {
   3471a:	2800      	cmp	r0, #0
   3471c:	d0f1      	beq.n	34702 <ull_scan_rsp_set.part.0+0x7e>
   3471e:	e7f5      	b.n	3470c <ull_scan_rsp_set.part.0+0x88>

00034720 <ll_adv_scan_rsp_set>:
	if (len > PDU_AC_LEG_DATA_SIZE_MAX) {
   34720:	281f      	cmp	r0, #31
{
   34722:	4603      	mov	r3, r0
   34724:	460a      	mov	r2, r1
	if (len > PDU_AC_LEG_DATA_SIZE_MAX) {
   34726:	d803      	bhi.n	34730 <ll_adv_scan_rsp_set+0x10>
   34728:	4802      	ldr	r0, [pc, #8]	; (34734 <ll_adv_scan_rsp_set+0x14>)
   3472a:	4619      	mov	r1, r3
   3472c:	f7ff bfaa 	b.w	34684 <ull_scan_rsp_set.part.0>
}
   34730:	2012      	movs	r0, #18
   34732:	4770      	bx	lr
   34734:	2000274c 	.word	0x2000274c

00034738 <init_reset>:
{
   34738:	b510      	push	{r4, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   3473a:	4b15      	ldr	r3, [pc, #84]	; (34790 <init_reset+0x58>)
   3473c:	4815      	ldr	r0, [pc, #84]	; (34794 <init_reset+0x5c>)
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   3473e:	4c16      	ldr	r4, [pc, #88]	; (34798 <init_reset+0x60>)
	mem_init(conn_pool, sizeof(struct ll_conn),
   34740:	2201      	movs	r2, #1
   34742:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
   34746:	f7fb fc33 	bl	2ffb0 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONN_DATA_BUFFERS,
   3474a:	4b14      	ldr	r3, [pc, #80]	; (3479c <init_reset+0x64>)
   3474c:	2204      	movs	r2, #4
   3474e:	1898      	adds	r0, r3, r2
   34750:	2124      	movs	r1, #36	; 0x24
   34752:	f7fb fc2d 	bl	2ffb0 <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   34756:	4b12      	ldr	r3, [pc, #72]	; (347a0 <init_reset+0x68>)
   34758:	2204      	movs	r2, #4
   3475a:	1898      	adds	r0, r3, r2
   3475c:	212c      	movs	r1, #44	; 0x2c
   3475e:	f7fb fc27 	bl	2ffb0 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   34762:	4b10      	ldr	r3, [pc, #64]	; (347a4 <init_reset+0x6c>)
   34764:	2208      	movs	r2, #8
   34766:	1d18      	adds	r0, r3, #4
   34768:	4611      	mov	r1, r2
   3476a:	f7fb fc21 	bl	2ffb0 <mem_init>
	}
}

static inline void cpr_active_reset(void)
{
	conn_upd_curr = NULL;
   3476e:	4a0e      	ldr	r2, [pc, #56]	; (347a8 <init_reset+0x70>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   34770:	4b0e      	ldr	r3, [pc, #56]	; (347ac <init_reset+0x74>)
	default_phy_tx |= PHY_2M;
   34772:	490f      	ldr	r1, [pc, #60]	; (347b0 <init_reset+0x78>)
   34774:	2000      	movs	r0, #0
   34776:	6010      	str	r0, [r2, #0]
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   34778:	221b      	movs	r2, #27
   3477a:	801a      	strh	r2, [r3, #0]
	default_phy_rx |= PHY_2M;
   3477c:	4a0d      	ldr	r2, [pc, #52]	; (347b4 <init_reset+0x7c>)
	default_phy_tx |= PHY_2M;
   3477e:	2303      	movs	r3, #3
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   34780:	f44f 7ca4 	mov.w	ip, #328	; 0x148
   34784:	f8a4 c000 	strh.w	ip, [r4]
	default_phy_tx |= PHY_2M;
   34788:	700b      	strb	r3, [r1, #0]
	default_phy_rx |= PHY_2M;
   3478a:	7013      	strb	r3, [r2, #0]
}
   3478c:	bd10      	pop	{r4, pc}
   3478e:	bf00      	nop
   34790:	200027d8 	.word	0x200027d8
   34794:	20001618 	.word	0x20001618
   34798:	200039d6 	.word	0x200039d6
   3479c:	200028d4 	.word	0x200028d4
   347a0:	20002820 	.word	0x20002820
   347a4:	200027dc 	.word	0x200027dc
   347a8:	20002968 	.word	0x20002968
   347ac:	200039d8 	.word	0x200039d8
   347b0:	20003b10 	.word	0x20003b10
   347b4:	20003b0f 	.word	0x20003b0f

000347b8 <ctrl_tx_pause_enqueue>:
{
   347b8:	b538      	push	{r3, r4, r5, lr}
   347ba:	4604      	mov	r4, r0
		if (!conn->tx_ctrl) {
   347bc:	e9d0 3073 	ldrd	r3, r0, [r0, #460]	; 0x1cc
{
   347c0:	460d      	mov	r5, r1
	if (
   347c2:	b11b      	cbz	r3, 347cc <ctrl_tx_pause_enqueue+0x14>
	    !conn->llcp_cu.pause_tx &&
   347c4:	f894 110e 	ldrb.w	r1, [r4, #270]	; 0x10e
	    conn->tx_head &&
   347c8:	06c9      	lsls	r1, r1, #27
   347ca:	d50e      	bpl.n	347ea <ctrl_tx_pause_enqueue+0x32>
		if (!conn->tx_ctrl) {
   347cc:	2800      	cmp	r0, #0
   347ce:	d03a      	beq.n	34846 <ctrl_tx_pause_enqueue+0x8e>
			LL_ASSERT(!pause);
   347d0:	bb5a      	cbnz	r2, 3482a <ctrl_tx_pause_enqueue+0x72>
	tx->next = conn->tx_ctrl_last->next;
   347d2:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   347d6:	681b      	ldr	r3, [r3, #0]
   347d8:	602b      	str	r3, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   347da:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   347de:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
   347e0:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
	if (!tx->next) {
   347e4:	682b      	ldr	r3, [r5, #0]
   347e6:	b1eb      	cbz	r3, 34824 <ctrl_tx_pause_enqueue+0x6c>
}
   347e8:	bd38      	pop	{r3, r4, r5, pc}
	    !conn->llcp_enc.pause_tx &&
   347ea:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    !conn->llcp_cu.pause_tx &&
   347ee:	0789      	lsls	r1, r1, #30
   347f0:	d4ec      	bmi.n	347cc <ctrl_tx_pause_enqueue+0x14>
	    !conn->llcp_phy.pause_tx &&
   347f2:	f894 11c7 	ldrb.w	r1, [r4, #455]	; 0x1c7
   347f6:	07c9      	lsls	r1, r1, #31
   347f8:	d4e8      	bmi.n	347cc <ctrl_tx_pause_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
   347fa:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
   347fe:	428b      	cmp	r3, r1
   34800:	d033      	beq.n	3486a <ctrl_tx_pause_enqueue+0xb2>
		} else if (!conn->tx_ctrl) {
   34802:	b340      	cbz	r0, 34856 <ctrl_tx_pause_enqueue+0x9e>
			LL_ASSERT(!pause);
   34804:	2a00      	cmp	r2, #0
   34806:	d0e4      	beq.n	347d2 <ctrl_tx_pause_enqueue+0x1a>
   34808:	4a21      	ldr	r2, [pc, #132]	; (34890 <ctrl_tx_pause_enqueue+0xd8>)
   3480a:	4922      	ldr	r1, [pc, #136]	; (34894 <ctrl_tx_pause_enqueue+0xdc>)
   3480c:	4822      	ldr	r0, [pc, #136]	; (34898 <ctrl_tx_pause_enqueue+0xe0>)
   3480e:	f640 335c 	movw	r3, #2908	; 0xb5c
   34812:	f00d fed9 	bl	425c8 <assert_print>
   34816:	4040      	eors	r0, r0
   34818:	f380 8811 	msr	BASEPRI, r0
   3481c:	f04f 0003 	mov.w	r0, #3
   34820:	df02      	svc	2
	tx->next = conn->tx_ctrl_last->next;
   34822:	e7d6      	b.n	347d2 <ctrl_tx_pause_enqueue+0x1a>
		conn->tx_data_last = tx;
   34824:	f8c4 51dc 	str.w	r5, [r4, #476]	; 0x1dc
}
   34828:	bd38      	pop	{r3, r4, r5, pc}
			LL_ASSERT(!pause);
   3482a:	4a19      	ldr	r2, [pc, #100]	; (34890 <ctrl_tx_pause_enqueue+0xd8>)
   3482c:	4919      	ldr	r1, [pc, #100]	; (34894 <ctrl_tx_pause_enqueue+0xdc>)
   3482e:	481a      	ldr	r0, [pc, #104]	; (34898 <ctrl_tx_pause_enqueue+0xe0>)
   34830:	f640 336e 	movw	r3, #2926	; 0xb6e
   34834:	f00d fec8 	bl	425c8 <assert_print>
   34838:	4040      	eors	r0, r0
   3483a:	f380 8811 	msr	BASEPRI, r0
   3483e:	f04f 0003 	mov.w	r0, #3
   34842:	df02      	svc	2
   34844:	e7c5      	b.n	347d2 <ctrl_tx_pause_enqueue+0x1a>
			tx->next = conn->tx_head;
   34846:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
   34848:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
			if (!pause) {
   3484c:	2a00      	cmp	r2, #0
   3484e:	d1c9      	bne.n	347e4 <ctrl_tx_pause_enqueue+0x2c>
				conn->tx_ctrl = tx;
   34850:	e9c4 5574 	strd	r5, r5, [r4, #464]	; 0x1d0
   34854:	e7c6      	b.n	347e4 <ctrl_tx_pause_enqueue+0x2c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   34856:	7919      	ldrb	r1, [r3, #4]
   34858:	f001 0103 	and.w	r1, r1, #3
   3485c:	2903      	cmp	r1, #3
   3485e:	d011      	beq.n	34884 <ctrl_tx_pause_enqueue+0xcc>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   34860:	e9c4 3374 	strd	r3, r3, [r4, #464]	; 0x1d0
			LL_ASSERT(!pause);
   34864:	2a00      	cmp	r2, #0
   34866:	d0b4      	beq.n	347d2 <ctrl_tx_pause_enqueue+0x1a>
   34868:	e7ce      	b.n	34808 <ctrl_tx_pause_enqueue+0x50>
			conn->tx_data = conn->tx_data->next;
   3486a:	6819      	ldr	r1, [r3, #0]
   3486c:	f8c4 11d8 	str.w	r1, [r4, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   34870:	2800      	cmp	r0, #0
   34872:	d1c7      	bne.n	34804 <ctrl_tx_pause_enqueue+0x4c>
			tx->next = conn->tx_head->next;
   34874:	681b      	ldr	r3, [r3, #0]
   34876:	602b      	str	r3, [r5, #0]
			conn->tx_head->next = tx;
   34878:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   3487c:	601d      	str	r5, [r3, #0]
			if (!pause) {
   3487e:	2a00      	cmp	r2, #0
   34880:	d1b0      	bne.n	347e4 <ctrl_tx_pause_enqueue+0x2c>
   34882:	e7e5      	b.n	34850 <ctrl_tx_pause_enqueue+0x98>
	    ((pdu_data_tx->llctrl.opcode !=
   34884:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   34886:	2903      	cmp	r1, #3
   34888:	d0f4      	beq.n	34874 <ctrl_tx_pause_enqueue+0xbc>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3488a:	290a      	cmp	r1, #10
   3488c:	d1e8      	bne.n	34860 <ctrl_tx_pause_enqueue+0xa8>
   3488e:	e7f1      	b.n	34874 <ctrl_tx_pause_enqueue+0xbc>
   34890:	00049c60 	.word	0x00049c60
   34894:	00049ca0 	.word	0x00049ca0
   34898:	000497b0 	.word	0x000497b0

0003489c <tx_lll_flush>:
{
   3489c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	conn = HDR_LLL2ULL(lll);
   348a0:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   348a4:	4934      	ldr	r1, [pc, #208]	; (34978 <tx_lll_flush+0xdc>)
{
   348a6:	b083      	sub	sp, #12
   348a8:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   348aa:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
   348ae:	4640      	mov	r0, r8
   348b0:	f7fb fbe6 	bl	30080 <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   348b4:	f105 0648 	add.w	r6, r5, #72	; 0x48
	lll_conn_flush(handle, lll);
   348b8:	4629      	mov	r1, r5
   348ba:	f006 f93f 	bl	3ab3c <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   348be:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
   348c0:	aa01      	add	r2, sp, #4
   348c2:	4631      	mov	r1, r6
   348c4:	f7fb fc1c 	bl	30100 <memq_dequeue>
	while (link) {
   348c8:	b328      	cbz	r0, 34916 <tx_lll_flush+0x7a>
   348ca:	4c2c      	ldr	r4, [pc, #176]	; (3497c <tx_lll_flush+0xe0>)
		lll_tx->handle = LLL_HANDLE_INVALID;
   348cc:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   348d0:	f104 0908 	add.w	r9, r4, #8
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   348d4:	7962      	ldrb	r2, [r4, #5]
	if (last == count) {
   348d6:	f894 c002 	ldrb.w	ip, [r4, #2]
   348da:	7921      	ldrb	r1, [r4, #4]
	last = last + 1;
   348dc:	1c53      	adds	r3, r2, #1
   348de:	b2db      	uxtb	r3, r3
		last = 0U;
   348e0:	459c      	cmp	ip, r3
   348e2:	bf08      	it	eq
   348e4:	2300      	moveq	r3, #0
	if (last == first) {
   348e6:	4299      	cmp	r1, r3
   348e8:	f894 c000 	ldrb.w	ip, [r4]
   348ec:	d033      	beq.n	34956 <tx_lll_flush+0xba>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   348ee:	fb12 f20c 	smulbb	r2, r2, ip
   348f2:	eb02 0109 	add.w	r1, r2, r9
		lll_tx->handle = LLL_HANDLE_INVALID;
   348f6:	f829 7002 	strh.w	r7, [r9, r2]
		lll_tx->node = tx;
   348fa:	9a01      	ldr	r2, [sp, #4]
   348fc:	604a      	str	r2, [r1, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   348fe:	6812      	ldr	r2, [r2, #0]
   34900:	6002      	str	r2, [r0, #0]
		tx->next = link;
   34902:	9a01      	ldr	r2, [sp, #4]
   34904:	6010      	str	r0, [r2, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   34906:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
	*last = idx; /* Commit: Update write index */
   34908:	7163      	strb	r3, [r4, #5]
   3490a:	aa01      	add	r2, sp, #4
   3490c:	4631      	mov	r1, r6
   3490e:	f7fb fbf7 	bl	30100 <memq_dequeue>
	while (link) {
   34912:	2800      	cmp	r0, #0
   34914:	d1de      	bne.n	348d4 <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
   34916:	f8d8 0144 	ldr.w	r0, [r8, #324]	; 0x144
	rx = (void *)&conn->llcp_terminate.node_rx;
   3491a:	f508 74a2 	add.w	r4, r8, #324	; 0x144
	LL_ASSERT(rx->hdr.link);
   3491e:	b150      	cbz	r0, 34936 <tx_lll_flush+0x9a>
	rx->hdr.link = NULL;
   34920:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
   34922:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
   34924:	f8c8 3144 	str.w	r3, [r8, #324]	; 0x144
	ull_rx_put(link, rx);
   34928:	f7fe fee2 	bl	336f0 <ull_rx_put>
	ull_rx_sched();
   3492c:	f7fe fef0 	bl	33710 <ull_rx_sched>
}
   34930:	b003      	add	sp, #12
   34932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
   34936:	4a12      	ldr	r2, [pc, #72]	; (34980 <tx_lll_flush+0xe4>)
   34938:	4912      	ldr	r1, [pc, #72]	; (34984 <tx_lll_flush+0xe8>)
   3493a:	4813      	ldr	r0, [pc, #76]	; (34988 <tx_lll_flush+0xec>)
   3493c:	f640 23c7 	movw	r3, #2759	; 0xac7
   34940:	f00d fe42 	bl	425c8 <assert_print>
   34944:	4040      	eors	r0, r0
   34946:	f380 8811 	msr	BASEPRI, r0
   3494a:	f04f 0003 	mov.w	r0, #3
   3494e:	df02      	svc	2
	link = rx->hdr.link;
   34950:	f8d8 0144 	ldr.w	r0, [r8, #324]	; 0x144
   34954:	e7e4      	b.n	34920 <tx_lll_flush+0x84>
		LL_ASSERT(lll_tx);
   34956:	4a0a      	ldr	r2, [pc, #40]	; (34980 <tx_lll_flush+0xe4>)
   34958:	490c      	ldr	r1, [pc, #48]	; (3498c <tx_lll_flush+0xf0>)
   3495a:	480b      	ldr	r0, [pc, #44]	; (34988 <tx_lll_flush+0xec>)
   3495c:	f640 23b3 	movw	r3, #2739	; 0xab3
   34960:	f00d fe32 	bl	425c8 <assert_print>
   34964:	4040      	eors	r0, r0
   34966:	f380 8811 	msr	BASEPRI, r0
   3496a:	f04f 0003 	mov.w	r0, #3
   3496e:	df02      	svc	2
		lll_tx->handle = LLL_HANDLE_INVALID;
   34970:	2300      	movs	r3, #0
   34972:	801b      	strh	r3, [r3, #0]
   34974:	deff      	udf	#255	; 0xff
   34976:	bf00      	nop
   34978:	20001618 	.word	0x20001618
   3497c:	20000778 	.word	0x20000778
   34980:	00049c60 	.word	0x00049c60
   34984:	00049cb0 	.word	0x00049cb0
   34988:	000497b0 	.word	0x000497b0
   3498c:	00049ca8 	.word	0x00049ca8

00034990 <ctrl_tx_sec_enqueue>:
	if (conn->llcp_enc.pause_tx) {
   34990:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
   34994:	f012 0202 	ands.w	r2, r2, #2
   34998:	d00c      	beq.n	349b4 <ctrl_tx_sec_enqueue+0x24>
		if (!conn->tx_ctrl) {
   3499a:	f8d0 31d0 	ldr.w	r3, [r0, #464]	; 0x1d0
   3499e:	b1e3      	cbz	r3, 349da <ctrl_tx_sec_enqueue+0x4a>
			tx->next = conn->tx_ctrl_last->next;
   349a0:	f8d0 31d4 	ldr.w	r3, [r0, #468]	; 0x1d4
   349a4:	681b      	ldr	r3, [r3, #0]
   349a6:	600b      	str	r3, [r1, #0]
			conn->tx_ctrl_last->next = tx;
   349a8:	f8d0 31d4 	ldr.w	r3, [r0, #468]	; 0x1d4
   349ac:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
   349ae:	680b      	ldr	r3, [r1, #0]
   349b0:	b1db      	cbz	r3, 349ea <ctrl_tx_sec_enqueue+0x5a>
   349b2:	4770      	bx	lr
		if (conn->tx_head) {
   349b4:	f8d0 31cc 	ldr.w	r3, [r0, #460]	; 0x1cc
   349b8:	b1d3      	cbz	r3, 349f0 <ctrl_tx_sec_enqueue+0x60>
{
   349ba:	b500      	push	{lr}
			if ((conn->llcp_req != conn->llcp_ack) &&
   349bc:	f890 c0e5 	ldrb.w	ip, [r0, #229]	; 0xe5
   349c0:	f890 e0e4 	ldrb.w	lr, [r0, #228]	; 0xe4
   349c4:	45e6      	cmp	lr, ip
   349c6:	d004      	beq.n	349d2 <ctrl_tx_sec_enqueue+0x42>
   349c8:	f890 c0e6 	ldrb.w	ip, [r0, #230]	; 0xe6
   349cc:	f1bc 0f03 	cmp.w	ip, #3
   349d0:	d011      	beq.n	349f6 <ctrl_tx_sec_enqueue+0x66>
}
   349d2:	f85d eb04 	ldr.w	lr, [sp], #4
		ctrl_tx_pause_enqueue(conn, tx, pause);
   349d6:	f7ff beef 	b.w	347b8 <ctrl_tx_pause_enqueue>
			tx->next = conn->tx_head;
   349da:	f8d0 31cc 	ldr.w	r3, [r0, #460]	; 0x1cc
   349de:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
   349e0:	f8c0 11cc 	str.w	r1, [r0, #460]	; 0x1cc
		if (!tx->next) {
   349e4:	680b      	ldr	r3, [r1, #0]
   349e6:	2b00      	cmp	r3, #0
   349e8:	d1e3      	bne.n	349b2 <ctrl_tx_sec_enqueue+0x22>
			conn->tx_data_last = tx;
   349ea:	f8c0 11dc 	str.w	r1, [r0, #476]	; 0x1dc
   349ee:	4770      	bx	lr
	bool pause = false;
   349f0:	461a      	mov	r2, r3
		ctrl_tx_pause_enqueue(conn, tx, pause);
   349f2:	f7ff bee1 	b.w	347b8 <ctrl_tx_pause_enqueue>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   349f6:	f893 c004 	ldrb.w	ip, [r3, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
   349fa:	f00c 0c03 	and.w	ip, ip, #3
   349fe:	f1bc 0f03 	cmp.w	ip, #3
   34a02:	d1e6      	bne.n	349d2 <ctrl_tx_sec_enqueue+0x42>
			    ((pdu_data_tx->llctrl.opcode ==
   34a04:	79da      	ldrb	r2, [r3, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   34a06:	2a03      	cmp	r2, #3
   34a08:	d005      	beq.n	34a16 <ctrl_tx_sec_enqueue+0x86>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   34a0a:	f1a2 020a 	sub.w	r2, r2, #10
   34a0e:	fab2 f282 	clz	r2, r2
   34a12:	0952      	lsrs	r2, r2, #5
   34a14:	e7dd      	b.n	349d2 <ctrl_tx_sec_enqueue+0x42>
				pause = true;
   34a16:	2201      	movs	r2, #1
   34a18:	e7db      	b.n	349d2 <ctrl_tx_sec_enqueue+0x42>
   34a1a:	bf00      	nop

00034a1c <ticker_stop_op_cb>:
{
   34a1c:	b510      	push	{r4, lr}
   34a1e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   34a20:	b9b0      	cbnz	r0, 34a50 <ticker_stop_op_cb+0x34>
	mfy.param = param;
   34a22:	4b12      	ldr	r3, [pc, #72]	; (34a6c <ticker_stop_op_cb+0x50>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   34a24:	2200      	movs	r2, #0
   34a26:	2101      	movs	r1, #1
   34a28:	2002      	movs	r0, #2
	mfy.param = param;
   34a2a:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   34a2c:	f7fb fbcc 	bl	301c8 <mayfly_enqueue>
	LL_ASSERT(!ret);
   34a30:	b900      	cbnz	r0, 34a34 <ticker_stop_op_cb+0x18>
}
   34a32:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   34a34:	4a0e      	ldr	r2, [pc, #56]	; (34a70 <ticker_stop_op_cb+0x54>)
   34a36:	490f      	ldr	r1, [pc, #60]	; (34a74 <ticker_stop_op_cb+0x58>)
   34a38:	480f      	ldr	r0, [pc, #60]	; (34a78 <ticker_stop_op_cb+0x5c>)
   34a3a:	f640 236d 	movw	r3, #2669	; 0xa6d
   34a3e:	f00d fdc3 	bl	425c8 <assert_print>
   34a42:	4040      	eors	r0, r0
   34a44:	f380 8811 	msr	BASEPRI, r0
   34a48:	f04f 0003 	mov.w	r0, #3
   34a4c:	df02      	svc	2
}
   34a4e:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   34a50:	4a07      	ldr	r2, [pc, #28]	; (34a70 <ticker_stop_op_cb+0x54>)
   34a52:	490a      	ldr	r1, [pc, #40]	; (34a7c <ticker_stop_op_cb+0x60>)
   34a54:	4808      	ldr	r0, [pc, #32]	; (34a78 <ticker_stop_op_cb+0x5c>)
   34a56:	f640 2367 	movw	r3, #2663	; 0xa67
   34a5a:	f00d fdb5 	bl	425c8 <assert_print>
   34a5e:	4040      	eors	r0, r0
   34a60:	f380 8811 	msr	BASEPRI, r0
   34a64:	f04f 0003 	mov.w	r0, #3
   34a68:	df02      	svc	2
   34a6a:	e7da      	b.n	34a22 <ticker_stop_op_cb+0x6>
   34a6c:	20000758 	.word	0x20000758
   34a70:	00049c60 	.word	0x00049c60
   34a74:	00049a4c 	.word	0x00049a4c
   34a78:	000497b0 	.word	0x000497b0
   34a7c:	00049cc0 	.word	0x00049cc0

00034a80 <disabled_cb>:
{
   34a80:	b508      	push	{r3, lr}
	mfy.param = param;
   34a82:	4b0b      	ldr	r3, [pc, #44]	; (34ab0 <disabled_cb+0x30>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   34a84:	2200      	movs	r2, #0
	mfy.param = param;
   34a86:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   34a88:	4611      	mov	r1, r2
   34a8a:	2001      	movs	r0, #1
   34a8c:	f7fb fb9c 	bl	301c8 <mayfly_enqueue>
	LL_ASSERT(!ret);
   34a90:	b900      	cbnz	r0, 34a94 <disabled_cb+0x14>
}
   34a92:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   34a94:	4a07      	ldr	r2, [pc, #28]	; (34ab4 <disabled_cb+0x34>)
   34a96:	4908      	ldr	r1, [pc, #32]	; (34ab8 <disabled_cb+0x38>)
   34a98:	4808      	ldr	r0, [pc, #32]	; (34abc <disabled_cb+0x3c>)
   34a9a:	f640 2399 	movw	r3, #2713	; 0xa99
   34a9e:	f00d fd93 	bl	425c8 <assert_print>
   34aa2:	4040      	eors	r0, r0
   34aa4:	f380 8811 	msr	BASEPRI, r0
   34aa8:	f04f 0003 	mov.w	r0, #3
   34aac:	df02      	svc	2
}
   34aae:	bd08      	pop	{r3, pc}
   34ab0:	20000738 	.word	0x20000738
   34ab4:	00049c60 	.word	0x00049c60
   34ab8:	00049a4c 	.word	0x00049a4c
   34abc:	000497b0 	.word	0x000497b0

00034ac0 <conn_disable>:
{
   34ac0:	b538      	push	{r3, r4, r5, lr}
   34ac2:	4604      	mov	r4, r0
	return hdr->ref;
   34ac4:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
   34ac8:	b353      	cbz	r3, 34b20 <conn_disable+0x60>
		mfy.param = &conn->lll;
   34aca:	4d17      	ldr	r5, [pc, #92]	; (34b28 <conn_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
   34acc:	6963      	ldr	r3, [r4, #20]
		mfy.param = &conn->lll;
   34ace:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
   34ad0:	b16b      	cbz	r3, 34aee <conn_disable+0x2e>
   34ad2:	4a16      	ldr	r2, [pc, #88]	; (34b2c <conn_disable+0x6c>)
   34ad4:	4916      	ldr	r1, [pc, #88]	; (34b30 <conn_disable+0x70>)
   34ad6:	4817      	ldr	r0, [pc, #92]	; (34b34 <conn_disable+0x74>)
   34ad8:	f640 2382 	movw	r3, #2690	; 0xa82
   34adc:	f00d fd74 	bl	425c8 <assert_print>
   34ae0:	4040      	eors	r0, r0
   34ae2:	f380 8811 	msr	BASEPRI, r0
   34ae6:	f04f 0003 	mov.w	r0, #3
   34aea:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   34aec:	68a8      	ldr	r0, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   34aee:	4912      	ldr	r1, [pc, #72]	; (34b38 <conn_disable+0x78>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   34af0:	4b0d      	ldr	r3, [pc, #52]	; (34b28 <conn_disable+0x68>)
   34af2:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   34af4:	e9c4 1005 	strd	r1, r0, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   34af8:	4611      	mov	r1, r2
   34afa:	2001      	movs	r0, #1
   34afc:	f7fb fb64 	bl	301c8 <mayfly_enqueue>
		LL_ASSERT(!ret);
   34b00:	b900      	cbnz	r0, 34b04 <conn_disable+0x44>
}
   34b02:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
   34b04:	4a09      	ldr	r2, [pc, #36]	; (34b2c <conn_disable+0x6c>)
   34b06:	490d      	ldr	r1, [pc, #52]	; (34b3c <conn_disable+0x7c>)
   34b08:	480a      	ldr	r0, [pc, #40]	; (34b34 <conn_disable+0x74>)
   34b0a:	f640 2389 	movw	r3, #2697	; 0xa89
   34b0e:	f00d fd5b 	bl	425c8 <assert_print>
   34b12:	4040      	eors	r0, r0
   34b14:	f380 8811 	msr	BASEPRI, r0
   34b18:	f04f 0003 	mov.w	r0, #3
   34b1c:	df02      	svc	2
}
   34b1e:	bd38      	pop	{r3, r4, r5, pc}
   34b20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&conn->lll);
   34b24:	f7ff bfac 	b.w	34a80 <disabled_cb>
   34b28:	20000748 	.word	0x20000748
   34b2c:	00049c60 	.word	0x00049c60
   34b30:	00049b68 	.word	0x00049b68
   34b34:	000497b0 	.word	0x000497b0
   34b38:	00034a81 	.word	0x00034a81
   34b3c:	00049a4c 	.word	0x00049a4c

00034b40 <conn_setup_adv_scan_disabled_cb>:
{
   34b40:	b508      	push	{r3, lr}
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   34b42:	6883      	ldr	r3, [r0, #8]
   34b44:	685a      	ldr	r2, [r3, #4]
	switch (lll->role) {
   34b46:	7f53      	ldrb	r3, [r2, #29]
   34b48:	09db      	lsrs	r3, r3, #7
   34b4a:	d10d      	bne.n	34b68 <conn_setup_adv_scan_disabled_cb+0x28>
		LL_ASSERT(0);
   34b4c:	4a09      	ldr	r2, [pc, #36]	; (34b74 <conn_setup_adv_scan_disabled_cb+0x34>)
   34b4e:	490a      	ldr	r1, [pc, #40]	; (34b78 <conn_setup_adv_scan_disabled_cb+0x38>)
   34b50:	480a      	ldr	r0, [pc, #40]	; (34b7c <conn_setup_adv_scan_disabled_cb+0x3c>)
   34b52:	f640 13bb 	movw	r3, #2491	; 0x9bb
   34b56:	f00d fd37 	bl	425c8 <assert_print>
   34b5a:	4040      	eors	r0, r0
   34b5c:	f380 8811 	msr	BASEPRI, r0
   34b60:	f04f 0003 	mov.w	r0, #3
   34b64:	df02      	svc	2
}
   34b66:	bd08      	pop	{r3, pc}
		ull_periph_setup(rx, ftr, lll);
   34b68:	4601      	mov	r1, r0
}
   34b6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		ull_periph_setup(rx, ftr, lll);
   34b6e:	3108      	adds	r1, #8
   34b70:	f7f2 bb86 	b.w	27280 <ull_periph_setup>
   34b74:	00049c60 	.word	0x00049c60
   34b78:	00049810 	.word	0x00049810
   34b7c:	000497b0 	.word	0x000497b0

00034b80 <ticker_start_conn_op_cb>:
{
   34b80:	b510      	push	{r4, lr}
   34b82:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   34b84:	b990      	cbnz	r0, 34bac <ticker_start_conn_op_cb+0x2c>
	p = ull_update_unmark(param);
   34b86:	4620      	mov	r0, r4
   34b88:	f7fe fce8 	bl	3355c <ull_update_unmark>
	LL_ASSERT(p == param);
   34b8c:	4284      	cmp	r4, r0
   34b8e:	d00c      	beq.n	34baa <ticker_start_conn_op_cb+0x2a>
   34b90:	4a0d      	ldr	r2, [pc, #52]	; (34bc8 <ticker_start_conn_op_cb+0x48>)
   34b92:	490e      	ldr	r1, [pc, #56]	; (34bcc <ticker_start_conn_op_cb+0x4c>)
   34b94:	480e      	ldr	r0, [pc, #56]	; (34bd0 <ticker_start_conn_op_cb+0x50>)
   34b96:	f640 1394 	movw	r3, #2452	; 0x994
   34b9a:	f00d fd15 	bl	425c8 <assert_print>
   34b9e:	4040      	eors	r0, r0
   34ba0:	f380 8811 	msr	BASEPRI, r0
   34ba4:	f04f 0003 	mov.w	r0, #3
   34ba8:	df02      	svc	2
}
   34baa:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   34bac:	4a06      	ldr	r2, [pc, #24]	; (34bc8 <ticker_start_conn_op_cb+0x48>)
   34bae:	4909      	ldr	r1, [pc, #36]	; (34bd4 <ticker_start_conn_op_cb+0x54>)
   34bb0:	4807      	ldr	r0, [pc, #28]	; (34bd0 <ticker_start_conn_op_cb+0x50>)
   34bb2:	f640 1391 	movw	r3, #2449	; 0x991
   34bb6:	f00d fd07 	bl	425c8 <assert_print>
   34bba:	4040      	eors	r0, r0
   34bbc:	f380 8811 	msr	BASEPRI, r0
   34bc0:	f04f 0003 	mov.w	r0, #3
   34bc4:	df02      	svc	2
   34bc6:	e7de      	b.n	34b86 <ticker_start_conn_op_cb+0x6>
   34bc8:	00049c60 	.word	0x00049c60
   34bcc:	00049ccc 	.word	0x00049ccc
   34bd0:	000497b0 	.word	0x000497b0
   34bd4:	00049cc0 	.word	0x00049cc0

00034bd8 <ticker_stop_conn_op_cb>:
{
   34bd8:	b510      	push	{r4, lr}
   34bda:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   34bdc:	b990      	cbnz	r0, 34c04 <ticker_stop_conn_op_cb+0x2c>
	p = ull_update_mark(param);
   34bde:	4620      	mov	r0, r4
   34be0:	f7fe fcb0 	bl	33544 <ull_update_mark>
	LL_ASSERT(p == param);
   34be4:	4284      	cmp	r4, r0
   34be6:	d00c      	beq.n	34c02 <ticker_stop_conn_op_cb+0x2a>
   34be8:	4a0d      	ldr	r2, [pc, #52]	; (34c20 <ticker_stop_conn_op_cb+0x48>)
   34bea:	490e      	ldr	r1, [pc, #56]	; (34c24 <ticker_stop_conn_op_cb+0x4c>)
   34bec:	480e      	ldr	r0, [pc, #56]	; (34c28 <ticker_stop_conn_op_cb+0x50>)
   34bee:	f640 138a 	movw	r3, #2442	; 0x98a
   34bf2:	f00d fce9 	bl	425c8 <assert_print>
   34bf6:	4040      	eors	r0, r0
   34bf8:	f380 8811 	msr	BASEPRI, r0
   34bfc:	f04f 0003 	mov.w	r0, #3
   34c00:	df02      	svc	2
}
   34c02:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   34c04:	4a06      	ldr	r2, [pc, #24]	; (34c20 <ticker_stop_conn_op_cb+0x48>)
   34c06:	4909      	ldr	r1, [pc, #36]	; (34c2c <ticker_stop_conn_op_cb+0x54>)
   34c08:	4807      	ldr	r0, [pc, #28]	; (34c28 <ticker_stop_conn_op_cb+0x50>)
   34c0a:	f640 1387 	movw	r3, #2439	; 0x987
   34c0e:	f00d fcdb 	bl	425c8 <assert_print>
   34c12:	4040      	eors	r0, r0
   34c14:	f380 8811 	msr	BASEPRI, r0
   34c18:	f04f 0003 	mov.w	r0, #3
   34c1c:	df02      	svc	2
   34c1e:	e7de      	b.n	34bde <ticker_stop_conn_op_cb+0x6>
   34c20:	00049c60 	.word	0x00049c60
   34c24:	00049ccc 	.word	0x00049ccc
   34c28:	000497b0 	.word	0x000497b0
   34c2c:	00049cc0 	.word	0x00049cc0

00034c30 <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   34c30:	b900      	cbnz	r0, 34c34 <ticker_update_conn_op_cb+0x4>
   34c32:	4770      	bx	lr
{
   34c34:	b510      	push	{r4, lr}
   34c36:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   34c38:	f7fe fc9c 	bl	33574 <ull_update_mark_get>
   34c3c:	4284      	cmp	r4, r0
   34c3e:	d010      	beq.n	34c62 <ticker_update_conn_op_cb+0x32>
   34c40:	f7fe fc7a 	bl	33538 <ull_disable_mark_get>
   34c44:	4284      	cmp	r4, r0
   34c46:	d00c      	beq.n	34c62 <ticker_update_conn_op_cb+0x32>
   34c48:	4a06      	ldr	r2, [pc, #24]	; (34c64 <ticker_update_conn_op_cb+0x34>)
   34c4a:	4907      	ldr	r1, [pc, #28]	; (34c68 <ticker_update_conn_op_cb+0x38>)
   34c4c:	4807      	ldr	r0, [pc, #28]	; (34c6c <ticker_update_conn_op_cb+0x3c>)
   34c4e:	f640 137e 	movw	r3, #2430	; 0x97e
   34c52:	f00d fcb9 	bl	425c8 <assert_print>
   34c56:	4040      	eors	r0, r0
   34c58:	f380 8811 	msr	BASEPRI, r0
   34c5c:	f04f 0003 	mov.w	r0, #3
   34c60:	df02      	svc	2
}
   34c62:	bd10      	pop	{r4, pc}
   34c64:	00049c60 	.word	0x00049c60
   34c68:	00049cd8 	.word	0x00049cd8
   34c6c:	000497b0 	.word	0x000497b0

00034c70 <tx_ull_dequeue>:
{
   34c70:	b410      	push	{r4}
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   34c72:	e9d0 2473 	ldrd	r2, r4, [r0, #460]	; 0x1cc
{
   34c76:	4603      	mov	r3, r0
   34c78:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   34c7a:	b164      	cbz	r4, 34c96 <tx_ull_dequeue+0x26>
	if (conn->tx_head == conn->tx_ctrl) {
   34c7c:	4294      	cmp	r4, r2
   34c7e:	d026      	beq.n	34cce <tx_ull_dequeue+0x5e>
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   34c80:	f8d3 11d8 	ldr.w	r1, [r3, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   34c84:	428a      	cmp	r2, r1
   34c86:	d00b      	beq.n	34ca0 <tx_ull_dequeue+0x30>
		conn->tx_head = conn->tx_head->next;
   34c88:	6812      	ldr	r2, [r2, #0]
   34c8a:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
   34c8e:	2300      	movs	r3, #0
		tx->next = tx;
   34c90:	6003      	str	r3, [r0, #0]
}
   34c92:	bc10      	pop	{r4}
   34c94:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   34c96:	f8d3 11d8 	ldr.w	r1, [r3, #472]	; 0x1d8
   34c9a:	4291      	cmp	r1, r2
   34c9c:	d104      	bne.n	34ca8 <tx_ull_dequeue+0x38>
	if (conn->tx_head == conn->tx_ctrl) {
   34c9e:	b1b2      	cbz	r2, 34cce <tx_ull_dequeue+0x5e>
			conn->tx_data = conn->tx_data->next;
   34ca0:	6809      	ldr	r1, [r1, #0]
   34ca2:	f8c3 11d8 	str.w	r1, [r3, #472]	; 0x1d8
   34ca6:	e7ef      	b.n	34c88 <tx_ull_dequeue+0x18>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   34ca8:	7911      	ldrb	r1, [r2, #4]
   34caa:	f001 0103 	and.w	r1, r1, #3
   34cae:	2903      	cmp	r1, #3
   34cb0:	d015      	beq.n	34cde <tx_ull_dequeue+0x6e>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   34cb2:	e9c3 2274 	strd	r2, r2, [r3, #464]	; 0x1d0
		conn->tx_head = conn->tx_head->next;
   34cb6:	6812      	ldr	r2, [r2, #0]
   34cb8:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
			conn->tx_ctrl_last = NULL;
   34cbc:	2200      	movs	r2, #0
   34cbe:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
   34cc2:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
		tx->next = tx;
   34cc6:	4603      	mov	r3, r0
   34cc8:	6003      	str	r3, [r0, #0]
}
   34cca:	bc10      	pop	{r4}
   34ccc:	4770      	bx	lr
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   34cce:	f8d3 11d4 	ldr.w	r1, [r3, #468]	; 0x1d4
		conn->tx_head = conn->tx_head->next;
   34cd2:	6812      	ldr	r2, [r2, #0]
   34cd4:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   34cd8:	42a1      	cmp	r1, r4
   34cda:	d1f2      	bne.n	34cc2 <tx_ull_dequeue+0x52>
   34cdc:	e7ee      	b.n	34cbc <tx_ull_dequeue+0x4c>
	    ((pdu_data_tx->llctrl.opcode !=
   34cde:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   34ce0:	2903      	cmp	r1, #3
   34ce2:	d0d1      	beq.n	34c88 <tx_ull_dequeue+0x18>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   34ce4:	290a      	cmp	r1, #10
   34ce6:	d1e4      	bne.n	34cb2 <tx_ull_dequeue+0x42>
   34ce8:	e7ce      	b.n	34c88 <tx_ull_dequeue+0x18>
   34cea:	bf00      	nop

00034cec <reject_ext_ind_send>:
{
   34cec:	e92d 41e8 	stmdb	sp!, {r3, r5, r6, r7, r8, lr}
   34cf0:	4605      	mov	r5, r0
	if (conn->common.txn_lock) {
   34cf2:	f890 00d8 	ldrb.w	r0, [r0, #216]	; 0xd8
{
   34cf6:	460e      	mov	r6, r1
	if (conn->common.txn_lock) {
   34cf8:	0781      	lsls	r1, r0, #30
   34cfa:	d444      	bmi.n	34d86 <reject_ext_ind_send+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   34cfc:	4832      	ldr	r0, [pc, #200]	; (34dc8 <reject_ext_ind_send+0xdc>)
   34cfe:	4690      	mov	r8, r2
   34d00:	461f      	mov	r7, r3
   34d02:	f7fb f985 	bl	30010 <mem_acquire>
	if (!tx) {
   34d06:	2800      	cmp	r0, #0
   34d08:	d048      	beq.n	34d9c <reject_ext_ind_send+0xb0>
	conn->common.txn_lock = 1U;
   34d0a:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   34d0e:	f043 0302 	orr.w	r3, r3, #2
   34d12:	f885 30d8 	strb.w	r3, [r5, #216]	; 0xd8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   34d16:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   34d18:	f880 8008 	strb.w	r8, [r0, #8]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   34d1c:	2203      	movs	r2, #3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   34d1e:	4313      	orrs	r3, r2
   34d20:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   34d22:	2311      	movs	r3, #17
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   34d24:	7247      	strb	r7, [r0, #9]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   34d26:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   34d28:	71c3      	strb	r3, [r0, #7]
	    conn->tx_head &&
   34d2a:	f8d5 31cc 	ldr.w	r3, [r5, #460]	; 0x1cc
	if (
   34d2e:	b1d3      	cbz	r3, 34d66 <reject_ext_ind_send+0x7a>
	    !conn->llcp_cu.pause_tx &&
   34d30:	f895 210e 	ldrb.w	r2, [r5, #270]	; 0x10e
	    conn->tx_head &&
   34d34:	06d7      	lsls	r7, r2, #27
   34d36:	d416      	bmi.n	34d66 <reject_ext_ind_send+0x7a>
	    !conn->llcp_enc.pause_tx &&
   34d38:	f895 2166 	ldrb.w	r2, [r5, #358]	; 0x166
	    !conn->llcp_cu.pause_tx &&
   34d3c:	0791      	lsls	r1, r2, #30
   34d3e:	d412      	bmi.n	34d66 <reject_ext_ind_send+0x7a>
	    !conn->llcp_phy.pause_tx &&
   34d40:	f895 21c7 	ldrb.w	r2, [r5, #455]	; 0x1c7
   34d44:	07d2      	lsls	r2, r2, #31
   34d46:	d40e      	bmi.n	34d66 <reject_ext_ind_send+0x7a>
		if (conn->tx_head == conn->tx_data) {
   34d48:	f8d5 11d8 	ldr.w	r1, [r5, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   34d4c:	f8d5 21d0 	ldr.w	r2, [r5, #464]	; 0x1d0
		if (conn->tx_head == conn->tx_data) {
   34d50:	428b      	cmp	r3, r1
   34d52:	d026      	beq.n	34da2 <reject_ext_ind_send+0xb6>
		} else if (!conn->tx_ctrl) {
   34d54:	b952      	cbnz	r2, 34d6c <reject_ext_ind_send+0x80>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   34d56:	791a      	ldrb	r2, [r3, #4]
   34d58:	f002 0203 	and.w	r2, r2, #3
   34d5c:	2a03      	cmp	r2, #3
   34d5e:	d02d      	beq.n	34dbc <reject_ext_ind_send+0xd0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   34d60:	e9c5 3374 	strd	r3, r3, [r5, #464]	; 0x1d0
   34d64:	e004      	b.n	34d70 <reject_ext_ind_send+0x84>
		if (!conn->tx_ctrl) {
   34d66:	f8d5 21d0 	ldr.w	r2, [r5, #464]	; 0x1d0
   34d6a:	b18a      	cbz	r2, 34d90 <reject_ext_ind_send+0xa4>
	tx->next = conn->tx_ctrl_last->next;
   34d6c:	f8d5 31d4 	ldr.w	r3, [r5, #468]	; 0x1d4
   34d70:	681b      	ldr	r3, [r3, #0]
   34d72:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   34d74:	f8d5 31d4 	ldr.w	r3, [r5, #468]	; 0x1d4
   34d78:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   34d7a:	f8c5 01d4 	str.w	r0, [r5, #468]	; 0x1d4
	if (!tx->next) {
   34d7e:	6803      	ldr	r3, [r0, #0]
   34d80:	b90b      	cbnz	r3, 34d86 <reject_ext_ind_send+0x9a>
		conn->tx_data_last = tx;
   34d82:	f8c5 01dc 	str.w	r0, [r5, #476]	; 0x1dc
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   34d86:	2301      	movs	r3, #1
   34d88:	7133      	strb	r3, [r6, #4]
		*err = 0;
   34d8a:	2000      	movs	r0, #0
}
   34d8c:	e8bd 81e8 	ldmia.w	sp!, {r3, r5, r6, r7, r8, pc}
			tx->next = conn->tx_head;
   34d90:	6003      	str	r3, [r0, #0]
			conn->tx_head = tx;
   34d92:	f8c5 01cc 	str.w	r0, [r5, #460]	; 0x1cc
   34d96:	f8c5 01d0 	str.w	r0, [r5, #464]	; 0x1d0
				conn->tx_ctrl_last = tx;
   34d9a:	e7ee      	b.n	34d7a <reject_ext_ind_send+0x8e>
		*err = -ENOBUFS;
   34d9c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   34da0:	e7f4      	b.n	34d8c <reject_ext_ind_send+0xa0>
			conn->tx_data = conn->tx_data->next;
   34da2:	6819      	ldr	r1, [r3, #0]
   34da4:	f8c5 11d8 	str.w	r1, [r5, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   34da8:	2a00      	cmp	r2, #0
   34daa:	d1df      	bne.n	34d6c <reject_ext_ind_send+0x80>
			tx->next = conn->tx_head->next;
   34dac:	681b      	ldr	r3, [r3, #0]
   34dae:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   34db0:	f8d5 31cc 	ldr.w	r3, [r5, #460]	; 0x1cc
   34db4:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   34db6:	f8c5 01d0 	str.w	r0, [r5, #464]	; 0x1d0
				conn->tx_ctrl_last = tx;
   34dba:	e7de      	b.n	34d7a <reject_ext_ind_send+0x8e>
	    ((pdu_data_tx->llctrl.opcode !=
   34dbc:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   34dbe:	2a03      	cmp	r2, #3
   34dc0:	d0f4      	beq.n	34dac <reject_ext_ind_send+0xc0>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   34dc2:	2a0a      	cmp	r2, #10
   34dc4:	d1cc      	bne.n	34d60 <reject_ext_ind_send+0x74>
   34dc6:	e7f1      	b.n	34dac <reject_ext_ind_send+0xc0>
   34dc8:	20002820 	.word	0x20002820

00034dcc <event_len_prep>:
{
   34dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (conn->llcp_length.state) {
   34dce:	f890 31b6 	ldrb.w	r3, [r0, #438]	; 0x1b6
   34dd2:	f003 0207 	and.w	r2, r3, #7
{
   34dd6:	4604      	mov	r4, r0
	switch (conn->llcp_length.state) {
   34dd8:	2a06      	cmp	r2, #6
   34dda:	f200 80e1 	bhi.w	34fa0 <event_len_prep+0x1d4>
   34dde:	e8df f002 	tbb	[pc, r2]
   34de2:	4c04      	.short	0x4c04
   34de4:	4d4d4c4c 	.word	0x4d4d4c4c
   34de8:	4c          	.byte	0x4c
   34de9:	00          	.byte	0x00
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   34dea:	4874      	ldr	r0, [pc, #464]	; (34fbc <event_len_prep+0x1f0>)
   34dec:	f7fb f910 	bl	30010 <mem_acquire>
		if (!tx) {
   34df0:	2800      	cmp	r0, #0
   34df2:	d042      	beq.n	34e7a <event_len_prep+0xae>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   34df4:	f894 21b6 	ldrb.w	r2, [r4, #438]	; 0x1b6
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   34df8:	f8b4 11ba 	ldrh.w	r1, [r4, #442]	; 0x1ba
   34dfc:	f8a4 10d2 	strh.w	r1, [r4, #210]	; 0xd2
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   34e00:	2301      	movs	r3, #1
		conn->default_tx_time = conn->llcp_length.tx_time;
   34e02:	f8b4 11be 	ldrh.w	r1, [r4, #446]	; 0x1be
   34e06:	f8a4 10d4 	strh.w	r1, [r4, #212]	; 0xd4
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   34e0a:	f363 0202 	bfi	r2, r3, #0, #3
   34e0e:	f884 21b6 	strb.w	r2, [r4, #438]	; 0x1b6
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   34e12:	7902      	ldrb	r2, [r0, #4]
   34e14:	f042 0203 	orr.w	r2, r2, #3
   34e18:	7102      	strb	r2, [r0, #4]
		pdu_ctrl_tx->len =
   34e1a:	2109      	movs	r1, #9
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   34e1c:	2214      	movs	r2, #20
		pdu_ctrl_tx->len =
   34e1e:	7141      	strb	r1, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   34e20:	71c2      	strb	r2, [r0, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   34e22:	2100      	movs	r1, #0
   34e24:	221b      	movs	r2, #27
   34e26:	7202      	strb	r2, [r0, #8]
   34e28:	7241      	strb	r1, [r0, #9]
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
   34e2a:	f8b4 10d2 	ldrh.w	r1, [r4, #210]	; 0xd2
   34e2e:	8181      	strh	r1, [r0, #12]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   34e30:	2248      	movs	r2, #72	; 0x48
   34e32:	7282      	strb	r2, [r0, #10]
   34e34:	72c3      	strb	r3, [r0, #11]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   34e36:	7382      	strb	r2, [r0, #14]
   34e38:	73c3      	strb	r3, [r0, #15]
	    conn->tx_head &&
   34e3a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
	if (
   34e3e:	b13b      	cbz	r3, 34e50 <event_len_prep+0x84>
	    !conn->llcp_cu.pause_tx &&
   34e40:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
	    conn->tx_head &&
   34e44:	06d5      	lsls	r5, r2, #27
   34e46:	d403      	bmi.n	34e50 <event_len_prep+0x84>
	    !conn->llcp_enc.pause_tx &&
   34e48:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    !conn->llcp_cu.pause_tx &&
   34e4c:	0791      	lsls	r1, r2, #30
   34e4e:	d578      	bpl.n	34f42 <event_len_prep+0x176>
		if (!conn->tx_ctrl) {
   34e50:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   34e54:	2a00      	cmp	r2, #0
   34e56:	f000 8089 	beq.w	34f6c <event_len_prep+0x1a0>
	tx->next = conn->tx_ctrl_last->next;
   34e5a:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   34e5e:	681b      	ldr	r3, [r3, #0]
   34e60:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   34e62:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   34e66:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   34e68:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
	if (!tx->next) {
   34e6c:	6803      	ldr	r3, [r0, #0]
   34e6e:	2b00      	cmp	r3, #0
   34e70:	d056      	beq.n	34f20 <event_len_prep+0x154>
		conn->procedure_expire = conn->procedure_reload;
   34e72:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   34e76:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
}
   34e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   34e7c:	f003 0207 	and.w	r2, r3, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   34e80:	f8b0 01b8 	ldrh.w	r0, [r0, #440]	; 0x1b8
		lll->max_rx_time = conn->llcp_length.rx_time;
   34e84:	f8b4 11bc 	ldrh.w	r1, [r4, #444]	; 0x1bc
		tx_octets = conn->llcp_length.tx_octets;
   34e88:	f8b4 71ba 	ldrh.w	r7, [r4, #442]	; 0x1ba
		uint16_t tx_time = conn->llcp_length.tx_time;
   34e8c:	f8b4 61be 	ldrh.w	r6, [r4, #446]	; 0x1be
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   34e90:	f8a4 005a 	strh.w	r0, [r4, #90]	; 0x5a
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   34e94:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
   34e96:	f8a4 105e 	strh.w	r1, [r4, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   34e9a:	d028      	beq.n	34eee <event_len_prep+0x122>
			conn->llcp_length.state =
   34e9c:	2206      	movs	r2, #6
   34e9e:	f362 0302 	bfi	r3, r2, #0, #3
   34ea2:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
		rx = conn->llcp_rx;
   34ea6:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
   34eaa:	b355      	cbz	r5, 34f02 <event_len_prep+0x136>
   34eac:	682b      	ldr	r3, [r5, #0]
   34eae:	b343      	cbz	r3, 34f02 <event_len_prep+0x136>
		conn->llcp_rx = rx->hdr.link->mem;
   34eb0:	685b      	ldr	r3, [r3, #4]
   34eb2:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
		rx->hdr.handle = conn->lll.handle;
   34eb6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   34eb8:	80eb      	strh	r3, [r5, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   34eba:	2303      	movs	r3, #3
   34ebc:	712b      	strb	r3, [r5, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   34ebe:	7f2b      	ldrb	r3, [r5, #28]
		ll_rx_put(rx->hdr.link, rx);
   34ec0:	6828      	ldr	r0, [r5, #0]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   34ec2:	f043 0303 	orr.w	r3, r3, #3
   34ec6:	772b      	strb	r3, [r5, #28]
		pdu_ctrl_rx->len =
   34ec8:	2309      	movs	r3, #9
   34eca:	776b      	strb	r3, [r5, #29]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   34ecc:	2315      	movs	r3, #21
   34ece:	77eb      	strb	r3, [r5, #31]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   34ed0:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
   34ed4:	842b      	strh	r3, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
   34ed6:	84af      	strh	r7, [r5, #36]	; 0x24
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   34ed8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
   34edc:	846b      	strh	r3, [r5, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   34ede:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   34ee0:	4629      	mov	r1, r5
   34ee2:	f7fe fa49 	bl	33378 <ll_rx_put>
}
   34ee6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		ll_rx_sched();
   34eea:	f7fe ba4f 	b.w	3338c <ll_rx_sched>
			if (!conn->llcp_length.cache.tx_octets) {
   34eee:	f8b4 21c0 	ldrh.w	r2, [r4, #448]	; 0x1c0
   34ef2:	b9c2      	cbnz	r2, 34f26 <event_len_prep+0x15a>
				conn->llcp_length.ack = conn->llcp_length.req;
   34ef4:	f894 31b4 	ldrb.w	r3, [r4, #436]	; 0x1b4
   34ef8:	f884 31b5 	strb.w	r3, [r4, #437]	; 0x1b5
				conn->procedure_expire = 0U;
   34efc:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
   34f00:	e7d1      	b.n	34ea6 <event_len_prep+0xda>
		LL_ASSERT(rx && rx->hdr.link);
   34f02:	4a2f      	ldr	r2, [pc, #188]	; (34fc0 <event_len_prep+0x1f4>)
   34f04:	492f      	ldr	r1, [pc, #188]	; (34fc4 <event_len_prep+0x1f8>)
   34f06:	4830      	ldr	r0, [pc, #192]	; (34fc8 <event_len_prep+0x1fc>)
   34f08:	f241 13a4 	movw	r3, #4516	; 0x11a4
   34f0c:	f00d fb5c 	bl	425c8 <assert_print>
   34f10:	4040      	eors	r0, r0
   34f12:	f380 8811 	msr	BASEPRI, r0
   34f16:	f04f 0003 	mov.w	r0, #3
   34f1a:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   34f1c:	682b      	ldr	r3, [r5, #0]
   34f1e:	e7c7      	b.n	34eb0 <event_len_prep+0xe4>
		conn->tx_data_last = tx;
   34f20:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
   34f24:	e7a5      	b.n	34e72 <event_len_prep+0xa6>
				conn->llcp_length.tx_octets =
   34f26:	f8a4 21ba 	strh.w	r2, [r4, #442]	; 0x1ba
				conn->llcp_length.cache.tx_octets = 0U;
   34f2a:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   34f2c:	f362 0302 	bfi	r3, r2, #0, #3
   34f30:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
				conn->llcp_length.tx_time =
   34f34:	f8b4 31c2 	ldrh.w	r3, [r4, #450]	; 0x1c2
				conn->llcp_length.cache.tx_octets = 0U;
   34f38:	f8a4 21c0 	strh.w	r2, [r4, #448]	; 0x1c0
				conn->llcp_length.tx_time =
   34f3c:	f8a4 31be 	strh.w	r3, [r4, #446]	; 0x1be
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   34f40:	e7b1      	b.n	34ea6 <event_len_prep+0xda>
	    !conn->llcp_phy.pause_tx &&
   34f42:	f894 21c7 	ldrb.w	r2, [r4, #455]	; 0x1c7
   34f46:	07d2      	lsls	r2, r2, #31
   34f48:	d482      	bmi.n	34e50 <event_len_prep+0x84>
		if (conn->tx_head == conn->tx_data) {
   34f4a:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   34f4e:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (conn->tx_head == conn->tx_data) {
   34f52:	4293      	cmp	r3, r2
   34f54:	d010      	beq.n	34f78 <event_len_prep+0x1ac>
		} else if (!conn->tx_ctrl) {
   34f56:	2900      	cmp	r1, #0
   34f58:	f47f af7f 	bne.w	34e5a <event_len_prep+0x8e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   34f5c:	791a      	ldrb	r2, [r3, #4]
   34f5e:	f002 0203 	and.w	r2, r2, #3
   34f62:	2a03      	cmp	r2, #3
   34f64:	d016      	beq.n	34f94 <event_len_prep+0x1c8>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   34f66:	e9c4 3374 	strd	r3, r3, [r4, #464]	; 0x1d0
   34f6a:	e778      	b.n	34e5e <event_len_prep+0x92>
			tx->next = conn->tx_head;
   34f6c:	6003      	str	r3, [r0, #0]
			conn->tx_head = tx;
   34f6e:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   34f72:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
				conn->tx_ctrl_last = tx;
   34f76:	e777      	b.n	34e68 <event_len_prep+0x9c>
			conn->tx_data = conn->tx_data->next;
   34f78:	681a      	ldr	r2, [r3, #0]
   34f7a:	f8c4 21d8 	str.w	r2, [r4, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   34f7e:	2900      	cmp	r1, #0
   34f80:	f47f af6b 	bne.w	34e5a <event_len_prep+0x8e>
			tx->next = conn->tx_head->next;
   34f84:	681b      	ldr	r3, [r3, #0]
   34f86:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   34f88:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   34f8c:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   34f8e:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
				conn->tx_ctrl_last = tx;
   34f92:	e769      	b.n	34e68 <event_len_prep+0x9c>
	    ((pdu_data_tx->llctrl.opcode !=
   34f94:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   34f96:	2a03      	cmp	r2, #3
   34f98:	d0f4      	beq.n	34f84 <event_len_prep+0x1b8>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   34f9a:	2a0a      	cmp	r2, #10
   34f9c:	d1e3      	bne.n	34f66 <event_len_prep+0x19a>
   34f9e:	e7f1      	b.n	34f84 <event_len_prep+0x1b8>
		LL_ASSERT(0);
   34fa0:	4a07      	ldr	r2, [pc, #28]	; (34fc0 <event_len_prep+0x1f4>)
   34fa2:	490a      	ldr	r1, [pc, #40]	; (34fcc <event_len_prep+0x200>)
   34fa4:	4808      	ldr	r0, [pc, #32]	; (34fc8 <event_len_prep+0x1fc>)
   34fa6:	f241 13ce 	movw	r3, #4558	; 0x11ce
   34faa:	f00d fb0d 	bl	425c8 <assert_print>
   34fae:	4040      	eors	r0, r0
   34fb0:	f380 8811 	msr	BASEPRI, r0
   34fb4:	f04f 0003 	mov.w	r0, #3
   34fb8:	df02      	svc	2
}
   34fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34fbc:	20002820 	.word	0x20002820
   34fc0:	00049c60 	.word	0x00049c60
   34fc4:	00049d2c 	.word	0x00049d2c
   34fc8:	000497b0 	.word	0x000497b0
   34fcc:	00049810 	.word	0x00049810

00034fd0 <event_phy_upd_ind_prep>:
{
   34fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (conn->llcp.phy_upd_ind.initiate) {
   34fd4:	f890 30e8 	ldrb.w	r3, [r0, #232]	; 0xe8
   34fd8:	f013 0601 	ands.w	r6, r3, #1
{
   34fdc:	4604      	mov	r4, r0
   34fde:	460d      	mov	r5, r1
	if (conn->llcp.phy_upd_ind.initiate) {
   34fe0:	f040 8093 	bne.w	3510a <event_phy_upd_ind_prep+0x13a>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
   34fe4:	f8b0 10ea 	ldrh.w	r1, [r0, #234]	; 0xea
   34fe8:	1a69      	subs	r1, r5, r1
   34fea:	040a      	lsls	r2, r1, #16
   34fec:	f100 8094 	bmi.w	35118 <event_phy_upd_ind_prep+0x148>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   34ff0:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
   34ff4:	2900      	cmp	r1, #0
   34ff6:	f2c0 8148 	blt.w	3528a <event_phy_upd_ind_prep+0x2ba>
		rx = conn->llcp_rx;
   34ffa:	f8d0 5108 	ldr.w	r5, [r0, #264]	; 0x108
   34ffe:	461a      	mov	r2, r3
			conn->llcp_ack = conn->llcp_req;
   35000:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
   35004:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
		old_tx = lll->phy_tx;
   35008:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
		old_rx = lll->phy_rx;
   3500c:	f894 8061 	ldrb.w	r8, [r4, #97]	; 0x61
		uint16_t eff_tx_time = lll->max_tx_time;
   35010:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
		uint16_t eff_rx_time = lll->max_rx_time;
   35014:	f8b4 705e 	ldrh.w	r7, [r4, #94]	; 0x5e
		if (conn->llcp.phy_upd_ind.tx) {
   35018:	f013 0f1c 	tst.w	r3, #28
		old_rx = lll->phy_rx;
   3501c:	f008 0807 	and.w	r8, r8, #7
		old_tx = lll->phy_tx;
   35020:	f001 0907 	and.w	r9, r1, #7
		if (conn->llcp.phy_upd_ind.tx) {
   35024:	d00a      	beq.n	3503c <event_phy_upd_ind_prep+0x6c>
			if (conn->llcp.phy_upd_ind.tx & phy_bitmask) {
   35026:	f013 0f0c 	tst.w	r3, #12
				lll->phy_tx = conn->llcp.phy_upd_ind.tx &
   3502a:	f3c3 0081 	ubfx	r0, r3, #2, #2
   3502e:	bf1c      	itt	ne
   35030:	f360 0102 	bfine	r1, r0, #0, #3
   35034:	f884 1060 	strbne.w	r1, [r4, #96]	; 0x60
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
   35038:	f44f 76a4 	mov.w	r6, #328	; 0x148
		if (conn->llcp.phy_upd_ind.rx) {
   3503c:	2b1f      	cmp	r3, #31
   3503e:	d86d      	bhi.n	3511c <event_phy_upd_ind_prep+0x14c>
		LL_ASSERT(rx && rx->hdr.link);
   35040:	2d00      	cmp	r5, #0
   35042:	f000 8102 	beq.w	3524a <event_phy_upd_ind_prep+0x27a>
   35046:	682b      	ldr	r3, [r5, #0]
   35048:	2b00      	cmp	r3, #0
   3504a:	f000 80fe 	beq.w	3524a <event_phy_upd_ind_prep+0x27a>
		conn->llcp_rx = rx->hdr.link->mem;
   3504e:	685b      	ldr	r3, [r3, #4]
   35050:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   35054:	0793      	lsls	r3, r2, #30
   35056:	d406      	bmi.n	35066 <event_phy_upd_ind_prep+0x96>
   35058:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   3505c:	f003 0307 	and.w	r3, r3, #7
   35060:	454b      	cmp	r3, r9
   35062:	f000 80cf 	beq.w	35204 <event_phy_upd_ind_prep+0x234>
		rx->hdr.handle = lll->handle;
   35066:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   35068:	80eb      	strh	r3, [r5, #6]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   3506a:	231d      	movs	r3, #29
   3506c:	712b      	strb	r3, [r5, #4]
		upd->status = 0U;
   3506e:	2300      	movs	r3, #0
   35070:	772b      	strb	r3, [r5, #28]
		upd->tx = lll->phy_tx;
   35072:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		ll_rx_put(rx->hdr.link, rx);
   35076:	6828      	ldr	r0, [r5, #0]
		upd->tx = lll->phy_tx;
   35078:	f3c3 0302 	ubfx	r3, r3, #0, #3
   3507c:	776b      	strb	r3, [r5, #29]
		upd->rx = lll->phy_rx;
   3507e:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   35082:	f3c3 0302 	ubfx	r3, r3, #0, #3
   35086:	77ab      	strb	r3, [r5, #30]
		ll_rx_put(rx->hdr.link, rx);
   35088:	4629      	mov	r1, r5
   3508a:	f7fe f975 	bl	33378 <ll_rx_put>
		rx = conn->llcp_rx;
   3508e:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
   35092:	2d00      	cmp	r5, #0
   35094:	f000 80ea 	beq.w	3526c <event_phy_upd_ind_prep+0x29c>
   35098:	682b      	ldr	r3, [r5, #0]
   3509a:	2b00      	cmp	r3, #0
   3509c:	f000 80e6 	beq.w	3526c <event_phy_upd_ind_prep+0x29c>
		conn->llcp_rx = rx->hdr.link->mem;
   350a0:	685b      	ldr	r3, [r3, #4]
   350a2:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
		if ((eff_tx_time <= lll->max_tx_time) &&
   350a6:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
   350aa:	42b3      	cmp	r3, r6
   350ac:	d30a      	bcc.n	350c4 <event_phy_upd_ind_prep+0xf4>
   350ae:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   350b2:	d807      	bhi.n	350c4 <event_phy_upd_ind_prep+0xf4>
		    (eff_rx_time <= lll->max_rx_time) &&
   350b4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
		    (lll->max_tx_time <= max_tx_time) &&
   350b8:	42bb      	cmp	r3, r7
   350ba:	d303      	bcc.n	350c4 <event_phy_upd_ind_prep+0xf4>
		    (eff_rx_time <= lll->max_rx_time) &&
   350bc:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   350c0:	f240 80b9 	bls.w	35236 <event_phy_upd_ind_prep+0x266>
		lll->max_tx_time = eff_tx_time;
   350c4:	f8a4 605c 	strh.w	r6, [r4, #92]	; 0x5c
		lll->max_rx_time = eff_rx_time;
   350c8:	f8a4 705e 	strh.w	r7, [r4, #94]	; 0x5e
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   350cc:	7f2b      	ldrb	r3, [r5, #28]
		rx->hdr.handle = lll->handle;
   350ce:	8d21      	ldrh	r1, [r4, #40]	; 0x28
   350d0:	80e9      	strh	r1, [r5, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   350d2:	2203      	movs	r2, #3
   350d4:	712a      	strb	r2, [r5, #4]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   350d6:	4313      	orrs	r3, r2
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   350d8:	2109      	movs	r1, #9
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   350da:	2215      	movs	r2, #21
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   350dc:	7769      	strb	r1, [r5, #29]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   350de:	772b      	strb	r3, [r5, #28]
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   350e0:	77ea      	strb	r2, [r5, #31]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   350e2:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
   350e6:	842b      	strh	r3, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
   350e8:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
   350ec:	84ab      	strh	r3, [r5, #36]	; 0x24
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   350ee:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
   350f2:	846b      	strh	r3, [r5, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
   350f4:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
		ll_rx_put(rx->hdr.link, rx);
   350f8:	6828      	ldr	r0, [r5, #0]
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
   350fa:	84eb      	strh	r3, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   350fc:	4629      	mov	r1, r5
   350fe:	f7fe f93b 	bl	33378 <ll_rx_put>
}
   35102:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   35106:	f7fe b941 	b.w	3338c <ll_rx_sched>
		if (memq_peek(conn->lll.memq_tx.head, conn->lll.memq_tx.tail,
   3510a:	e9d0 0119 	ldrd	r0, r1, [r0, #100]	; 0x64
   3510e:	2200      	movs	r2, #0
   35110:	f7fa ffee 	bl	300f0 <memq_peek>
   35114:	4606      	mov	r6, r0
   35116:	b178      	cbz	r0, 35138 <event_phy_upd_ind_prep+0x168>
}
   35118:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (conn->llcp.phy_upd_ind.rx & phy_bitmask) {
   3511c:	f013 0f60 	tst.w	r3, #96	; 0x60
   35120:	f3c3 1141 	ubfx	r1, r3, #5, #2
   35124:	d005      	beq.n	35132 <event_phy_upd_ind_prep+0x162>
				lll->phy_rx = conn->llcp.phy_upd_ind.rx &
   35126:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   3512a:	f361 0302 	bfi	r3, r1, #0, #3
   3512e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
   35132:	f44f 77a4 	mov.w	r7, #328	; 0x148
   35136:	e783      	b.n	35040 <event_phy_upd_ind_prep+0x70>
		rx = ll_pdu_rx_alloc_peek(2);
   35138:	2002      	movs	r0, #2
   3513a:	f7fe f92d 	bl	33398 <ll_pdu_rx_alloc_peek>
		if (!rx) {
   3513e:	4680      	mov	r8, r0
   35140:	2800      	cmp	r0, #0
   35142:	d0e9      	beq.n	35118 <event_phy_upd_ind_prep+0x148>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   35144:	4894      	ldr	r0, [pc, #592]	; (35398 <event_phy_upd_ind_prep+0x3c8>)
   35146:	f7fa ff63 	bl	30010 <mem_acquire>
		if (!tx) {
   3514a:	4607      	mov	r7, r0
   3514c:	2800      	cmp	r0, #0
   3514e:	d0e3      	beq.n	35118 <event_phy_upd_ind_prep+0x148>
		conn->llcp.phy_upd_ind.initiate = 0U;
   35150:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   35154:	f366 0300 	bfi	r3, r6, #0, #1
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
   35158:	f3c3 1242 	ubfx	r2, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
   3515c:	ea42 0293 	orr.w	r2, r2, r3, lsr #2
   35160:	f012 0607 	ands.w	r6, r2, #7
		conn->llcp.phy_upd_ind.initiate = 0U;
   35164:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
		if (!((conn->llcp.phy_upd_ind.tx |
   35168:	b2db      	uxtb	r3, r3
   3516a:	f040 80aa 	bne.w	352c2 <event_phy_upd_ind_prep+0x2f2>
			conn->llcp_ack = conn->llcp_req;
   3516e:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
			conn->llcp.phy_upd_ind.instant = 0U;
   35172:	f8a4 60ea 	strh.w	r6, [r4, #234]	; 0xea
			if (conn->llcp.phy_upd_ind.cmd) {
   35176:	079b      	lsls	r3, r3, #30
			conn->llcp_ack = conn->llcp_req;
   35178:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			if (conn->llcp.phy_upd_ind.cmd) {
   3517c:	f100 80c3 	bmi.w	35306 <event_phy_upd_ind_prep+0x336>
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   35180:	793b      	ldrb	r3, [r7, #4]
		pdu_ctrl_tx->len =
   35182:	2105      	movs	r1, #5
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   35184:	f043 0303 	orr.w	r3, r3, #3
		pdu_ctrl_tx->llctrl.opcode =
   35188:	2218      	movs	r2, #24
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3518a:	713b      	strb	r3, [r7, #4]
		pdu_ctrl_tx->len =
   3518c:	7179      	strb	r1, [r7, #5]
		pdu_ctrl_tx->llctrl.opcode =
   3518e:	71fa      	strb	r2, [r7, #7]
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   35190:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   35194:	f3c3 0382 	ubfx	r3, r3, #2, #3
   35198:	723b      	strb	r3, [r7, #8]
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
   3519a:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   3519e:	f3c3 1342 	ubfx	r3, r3, #5, #3
   351a2:	727b      	strb	r3, [r7, #9]
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   351a4:	f8b4 30ea 	ldrh.w	r3, [r4, #234]	; 0xea
   351a8:	817b      	strh	r3, [r7, #10]
	    conn->tx_head &&
   351aa:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
	if (
   351ae:	2b00      	cmp	r3, #0
   351b0:	f000 809e 	beq.w	352f0 <event_phy_upd_ind_prep+0x320>
	    !conn->llcp_cu.pause_tx &&
   351b4:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
	    conn->tx_head &&
   351b8:	06d5      	lsls	r5, r2, #27
   351ba:	f100 8099 	bmi.w	352f0 <event_phy_upd_ind_prep+0x320>
	    !conn->llcp_enc.pause_tx &&
   351be:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    !conn->llcp_cu.pause_tx &&
   351c2:	0790      	lsls	r0, r2, #30
   351c4:	f100 8094 	bmi.w	352f0 <event_phy_upd_ind_prep+0x320>
	    !conn->llcp_phy.pause_tx &&
   351c8:	f894 21c7 	ldrb.w	r2, [r4, #455]	; 0x1c7
   351cc:	07d1      	lsls	r1, r2, #31
   351ce:	f100 808f 	bmi.w	352f0 <event_phy_upd_ind_prep+0x320>
		if (conn->tx_head == conn->tx_data) {
   351d2:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   351d6:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
		if (conn->tx_head == conn->tx_data) {
   351da:	428b      	cmp	r3, r1
   351dc:	f000 80c0 	beq.w	35360 <event_phy_upd_ind_prep+0x390>
		} else if (!conn->tx_ctrl) {
   351e0:	2a00      	cmp	r2, #0
   351e2:	f000 80cb 	beq.w	3537c <event_phy_upd_ind_prep+0x3ac>
	tx->next = conn->tx_ctrl_last->next;
   351e6:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   351ea:	681b      	ldr	r3, [r3, #0]
   351ec:	603b      	str	r3, [r7, #0]
	conn->tx_ctrl_last->next = tx;
   351ee:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   351f2:	601f      	str	r7, [r3, #0]
	conn->tx_ctrl_last = tx;
   351f4:	f8c4 71d4 	str.w	r7, [r4, #468]	; 0x1d4
	if (!tx->next) {
   351f8:	683b      	ldr	r3, [r7, #0]
   351fa:	2b00      	cmp	r3, #0
   351fc:	d18c      	bne.n	35118 <event_phy_upd_ind_prep+0x148>
		conn->tx_data_last = tx;
   351fe:	f8c4 71dc 	str.w	r7, [r4, #476]	; 0x1dc
   35202:	e789      	b.n	35118 <event_phy_upd_ind_prep+0x148>
		    (lll->phy_rx == old_rx)) {
   35204:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   35208:	f003 0307 	and.w	r3, r3, #7
   3520c:	4543      	cmp	r3, r8
   3520e:	f47f af2a 	bne.w	35066 <event_phy_upd_ind_prep+0x96>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   35212:	2301      	movs	r3, #1
			ll_rx_put(rx->hdr.link, rx);
   35214:	6828      	ldr	r0, [r5, #0]
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   35216:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   35218:	4629      	mov	r1, r5
   3521a:	f7fe f8ad 	bl	33378 <ll_rx_put>
				rx = conn->llcp_rx;
   3521e:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
				LL_ASSERT(rx && rx->hdr.link);
   35222:	2d00      	cmp	r5, #0
   35224:	f000 808d 	beq.w	35342 <event_phy_upd_ind_prep+0x372>
   35228:	682b      	ldr	r3, [r5, #0]
   3522a:	2b00      	cmp	r3, #0
   3522c:	f000 8089 	beq.w	35342 <event_phy_upd_ind_prep+0x372>
				conn->llcp_rx = rx->hdr.link->mem;
   35230:	685b      	ldr	r3, [r3, #4]
   35232:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   35236:	2301      	movs	r3, #1
			ll_rx_put(rx->hdr.link, rx);
   35238:	6828      	ldr	r0, [r5, #0]
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3523a:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   3523c:	4629      	mov	r1, r5
   3523e:	f7fe f89b 	bl	33378 <ll_rx_put>
}
   35242:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   35246:	f7fe b8a1 	b.w	3338c <ll_rx_sched>
		LL_ASSERT(rx && rx->hdr.link);
   3524a:	4a54      	ldr	r2, [pc, #336]	; (3539c <event_phy_upd_ind_prep+0x3cc>)
   3524c:	4954      	ldr	r1, [pc, #336]	; (353a0 <event_phy_upd_ind_prep+0x3d0>)
   3524e:	4855      	ldr	r0, [pc, #340]	; (353a4 <event_phy_upd_ind_prep+0x3d4>)
   35250:	f241 3310 	movw	r3, #4880	; 0x1310
   35254:	f00d f9b8 	bl	425c8 <assert_print>
   35258:	4040      	eors	r0, r0
   3525a:	f380 8811 	msr	BASEPRI, r0
   3525e:	f04f 0003 	mov.w	r0, #3
   35262:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   35264:	682b      	ldr	r3, [r5, #0]
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   35266:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   3526a:	e6f0      	b.n	3504e <event_phy_upd_ind_prep+0x7e>
		LL_ASSERT(rx && rx->hdr.link);
   3526c:	4a4b      	ldr	r2, [pc, #300]	; (3539c <event_phy_upd_ind_prep+0x3cc>)
   3526e:	494c      	ldr	r1, [pc, #304]	; (353a0 <event_phy_upd_ind_prep+0x3d0>)
   35270:	484c      	ldr	r0, [pc, #304]	; (353a4 <event_phy_upd_ind_prep+0x3d4>)
   35272:	f241 3344 	movw	r3, #4932	; 0x1344
   35276:	f00d f9a7 	bl	425c8 <assert_print>
   3527a:	4040      	eors	r0, r0
   3527c:	f380 8811 	msr	BASEPRI, r0
   35280:	f04f 0003 	mov.w	r0, #3
   35284:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   35286:	682b      	ldr	r3, [r5, #0]
   35288:	e70a      	b.n	350a0 <event_phy_upd_ind_prep+0xd0>
			rx = ll_pdu_rx_alloc();
   3528a:	f7fe f8a7 	bl	333dc <ll_pdu_rx_alloc>
			if (!rx) {
   3528e:	4605      	mov	r5, r0
   35290:	2800      	cmp	r0, #0
   35292:	f43f af41 	beq.w	35118 <event_phy_upd_ind_prep+0x148>
			rx->hdr.link->mem = conn->llcp_rx;
   35296:	6803      	ldr	r3, [r0, #0]
   35298:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   3529c:	605a      	str	r2, [r3, #4]
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3529e:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
			conn->llcp_rx = rx;
   352a2:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   352a6:	2b00      	cmp	r3, #0
		if (conn->llcp.phy_upd_ind.tx) {
   352a8:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   352ac:	461a      	mov	r2, r3
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   352ae:	f6bf aea7 	bge.w	35000 <event_phy_upd_ind_prep+0x30>
   352b2:	f894 10d9 	ldrb.w	r1, [r4, #217]	; 0xd9
   352b6:	2900      	cmp	r1, #0
   352b8:	f43f aea2 	beq.w	35000 <event_phy_upd_ind_prep+0x30>
			conn->periph.llcp_type = LLCP_NONE;
   352bc:	f884 60d9 	strb.w	r6, [r4, #217]	; 0xd9
   352c0:	e6a2      	b.n	35008 <event_phy_upd_ind_prep+0x38>
							 lll->latency +
   352c2:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   352c4:	1da9      	adds	r1, r5, #6
   352c6:	4419      	add	r1, r3
			conn->llcp.phy_upd_ind.instant = event_counter +
   352c8:	f8a4 10ea 	strh.w	r1, [r4, #234]	; 0xea
			(void)ll_pdu_rx_alloc();
   352cc:	f7fe f886 	bl	333dc <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
   352d0:	f8d8 3000 	ldr.w	r3, [r8]
   352d4:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   352d8:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
   352da:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
				rx = ll_pdu_rx_alloc();
   352de:	f7fe f87d 	bl	333dc <ll_pdu_rx_alloc>
				rx->hdr.link->mem = conn->llcp_rx;
   352e2:	6803      	ldr	r3, [r0, #0]
   352e4:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   352e8:	605a      	str	r2, [r3, #4]
				conn->llcp_rx = rx;
   352ea:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
   352ee:	e747      	b.n	35180 <event_phy_upd_ind_prep+0x1b0>
		if (!conn->tx_ctrl) {
   352f0:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   352f4:	2a00      	cmp	r2, #0
   352f6:	f47f af76 	bne.w	351e6 <event_phy_upd_ind_prep+0x216>
			tx->next = conn->tx_head;
   352fa:	603b      	str	r3, [r7, #0]
			conn->tx_head = tx;
   352fc:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
   35300:	f8c4 71d0 	str.w	r7, [r4, #464]	; 0x1d0
				conn->tx_ctrl_last = tx;
   35304:	e776      	b.n	351f4 <event_phy_upd_ind_prep+0x224>
				(void)ll_pdu_rx_alloc();
   35306:	f7fe f869 	bl	333dc <ll_pdu_rx_alloc>
				rx->hdr.handle = lll->handle;
   3530a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   3530c:	f8a8 3006 	strh.w	r3, [r8, #6]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   35310:	231d      	movs	r3, #29
   35312:	f888 3004 	strb.w	r3, [r8, #4]
				upd->status = 0U;
   35316:	f888 601c 	strb.w	r6, [r8, #28]
				upd->tx = lll->phy_tx;
   3531a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
				ll_rx_put(rx->hdr.link, rx);
   3531e:	f8d8 0000 	ldr.w	r0, [r8]
				upd->tx = lll->phy_tx;
   35322:	f3c3 0302 	ubfx	r3, r3, #0, #3
   35326:	f888 301d 	strb.w	r3, [r8, #29]
				upd->rx = lll->phy_rx;
   3532a:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   3532e:	f3c3 0302 	ubfx	r3, r3, #0, #3
   35332:	f888 301e 	strb.w	r3, [r8, #30]
				ll_rx_put(rx->hdr.link, rx);
   35336:	4641      	mov	r1, r8
   35338:	f7fe f81e 	bl	33378 <ll_rx_put>
				ll_rx_sched();
   3533c:	f7fe f826 	bl	3338c <ll_rx_sched>
   35340:	e71e      	b.n	35180 <event_phy_upd_ind_prep+0x1b0>
				LL_ASSERT(rx && rx->hdr.link);
   35342:	4a16      	ldr	r2, [pc, #88]	; (3539c <event_phy_upd_ind_prep+0x3cc>)
   35344:	4916      	ldr	r1, [pc, #88]	; (353a0 <event_phy_upd_ind_prep+0x3d0>)
   35346:	4817      	ldr	r0, [pc, #92]	; (353a4 <event_phy_upd_ind_prep+0x3d4>)
   35348:	f241 3322 	movw	r3, #4898	; 0x1322
   3534c:	f00d f93c 	bl	425c8 <assert_print>
   35350:	4040      	eors	r0, r0
   35352:	f380 8811 	msr	BASEPRI, r0
   35356:	f04f 0003 	mov.w	r0, #3
   3535a:	df02      	svc	2
				conn->llcp_rx = rx->hdr.link->mem;
   3535c:	682b      	ldr	r3, [r5, #0]
   3535e:	e767      	b.n	35230 <event_phy_upd_ind_prep+0x260>
			conn->tx_data = conn->tx_data->next;
   35360:	6819      	ldr	r1, [r3, #0]
   35362:	f8c4 11d8 	str.w	r1, [r4, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   35366:	2a00      	cmp	r2, #0
   35368:	f47f af3d 	bne.w	351e6 <event_phy_upd_ind_prep+0x216>
			tx->next = conn->tx_head->next;
   3536c:	681b      	ldr	r3, [r3, #0]
   3536e:	603b      	str	r3, [r7, #0]
			conn->tx_head->next = tx;
   35370:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   35374:	601f      	str	r7, [r3, #0]
				conn->tx_ctrl = tx;
   35376:	f8c4 71d0 	str.w	r7, [r4, #464]	; 0x1d0
				conn->tx_ctrl_last = tx;
   3537a:	e73b      	b.n	351f4 <event_phy_upd_ind_prep+0x224>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3537c:	791a      	ldrb	r2, [r3, #4]
   3537e:	f002 0203 	and.w	r2, r2, #3
   35382:	2a03      	cmp	r2, #3
   35384:	d002      	beq.n	3538c <event_phy_upd_ind_prep+0x3bc>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   35386:	e9c4 3374 	strd	r3, r3, [r4, #464]	; 0x1d0
   3538a:	e72c      	b.n	351e6 <event_phy_upd_ind_prep+0x216>
	    ((pdu_data_tx->llctrl.opcode !=
   3538c:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3538e:	2a03      	cmp	r2, #3
   35390:	d0ec      	beq.n	3536c <event_phy_upd_ind_prep+0x39c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   35392:	2a0a      	cmp	r2, #10
   35394:	d1f7      	bne.n	35386 <event_phy_upd_ind_prep+0x3b6>
   35396:	e7e9      	b.n	3536c <event_phy_upd_ind_prep+0x39c>
   35398:	20002820 	.word	0x20002820
   3539c:	00049c60 	.word	0x00049c60
   353a0:	00049d2c 	.word	0x00049d2c
   353a4:	000497b0 	.word	0x000497b0

000353a8 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   353a8:	4801      	ldr	r0, [pc, #4]	; (353b0 <ll_conn_acquire+0x8>)
   353aa:	f7fa be31 	b.w	30010 <mem_acquire>
   353ae:	bf00      	nop
   353b0:	200027d8 	.word	0x200027d8

000353b4 <ll_conn_release>:
	mem_release(conn, &conn_free);
   353b4:	4901      	ldr	r1, [pc, #4]	; (353bc <ll_conn_release+0x8>)
   353b6:	f7fa be47 	b.w	30048 <mem_release>
   353ba:	bf00      	nop
   353bc:	200027d8 	.word	0x200027d8

000353c0 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   353c0:	4902      	ldr	r1, [pc, #8]	; (353cc <ll_conn_handle_get+0xc>)
   353c2:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
   353c6:	f7fa be5b 	b.w	30080 <mem_index_get>
   353ca:	bf00      	nop
   353cc:	20001618 	.word	0x20001618

000353d0 <ll_conn_get>:
{
   353d0:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   353d2:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
   353d6:	4801      	ldr	r0, [pc, #4]	; (353dc <ll_conn_get+0xc>)
   353d8:	f7fa be4e 	b.w	30078 <mem_get>
   353dc:	20001618 	.word	0x20001618

000353e0 <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   353e0:	b958      	cbnz	r0, 353fa <ll_connected_get+0x1a>
{
   353e2:	b508      	push	{r3, lr}
   353e4:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   353e6:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
   353ea:	4805      	ldr	r0, [pc, #20]	; (35400 <ll_connected_get+0x20>)
   353ec:	f7fa fe44 	bl	30078 <mem_get>
	if (conn->lll.handle != handle) {
   353f0:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   353f2:	b903      	cbnz	r3, 353f6 <ll_connected_get+0x16>
}
   353f4:	bd08      	pop	{r3, pc}
		return NULL;
   353f6:	2000      	movs	r0, #0
}
   353f8:	bd08      	pop	{r3, pc}
		return NULL;
   353fa:	2000      	movs	r0, #0
}
   353fc:	4770      	bx	lr
   353fe:	bf00      	nop
   35400:	20001618 	.word	0x20001618

00035404 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   35404:	4801      	ldr	r0, [pc, #4]	; (3540c <ll_tx_mem_acquire+0x8>)
   35406:	f7fa be03 	b.w	30010 <mem_acquire>
   3540a:	bf00      	nop
   3540c:	200028d4 	.word	0x200028d4

00035410 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   35410:	4901      	ldr	r1, [pc, #4]	; (35418 <ll_tx_mem_release+0x8>)
   35412:	f7fa be19 	b.w	30048 <mem_release>
   35416:	bf00      	nop
   35418:	200028d4 	.word	0x200028d4

0003541c <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3541c:	2800      	cmp	r0, #0
   3541e:	d13f      	bne.n	354a0 <ll_tx_mem_enqueue+0x84>
{
   35420:	b570      	push	{r4, r5, r6, lr}
   35422:	4602      	mov	r2, r0
   35424:	460e      	mov	r6, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   35426:	4820      	ldr	r0, [pc, #128]	; (354a8 <ll_tx_mem_enqueue+0x8c>)
   35428:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
   3542c:	f7fa fe24 	bl	30078 <mem_get>
	if (conn->lll.handle != handle) {
   35430:	8d02      	ldrh	r2, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   35432:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
   35434:	b9fa      	cbnz	r2, 35476 <ll_tx_mem_enqueue+0x5a>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   35436:	4c1d      	ldr	r4, [pc, #116]	; (354ac <ll_tx_mem_enqueue+0x90>)
   35438:	f894 c005 	ldrb.w	ip, [r4, #5]
	if (last == count) {
   3543c:	78a1      	ldrb	r1, [r4, #2]
   3543e:	7820      	ldrb	r0, [r4, #0]
	last = last + 1;
   35440:	f10c 0301 	add.w	r3, ip, #1
   35444:	b2db      	uxtb	r3, r3
		last = 0U;
   35446:	4299      	cmp	r1, r3
   35448:	bf08      	it	eq
   3544a:	2300      	moveq	r3, #0
   3544c:	7921      	ldrb	r1, [r4, #4]
	if (last == first) {
   3544e:	4299      	cmp	r1, r3
   35450:	d023      	beq.n	3549a <ll_tx_mem_enqueue+0x7e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   35452:	fb1c fc00 	smulbb	ip, ip, r0
   35456:	f104 0108 	add.w	r1, r4, #8
	lll_tx->handle = handle;
   3545a:	f821 200c 	strh.w	r2, [r1, ip]
   3545e:	448c      	add	ip, r1
	lll_tx->node = tx;
   35460:	f8cc 6004 	str.w	r6, [ip, #4]
	*last = idx; /* Commit: Update write index */
   35464:	7163      	strb	r3, [r4, #5]
   35466:	782b      	ldrb	r3, [r5, #0]
	if (ull_ref_get(&conn->ull)) {
   35468:	b943      	cbnz	r3, 3547c <ll_tx_mem_enqueue+0x60>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3546a:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   3546e:	2b00      	cmp	r3, #0
   35470:	db0e      	blt.n	35490 <ll_tx_mem_enqueue+0x74>
	return 0;
   35472:	2000      	movs	r0, #0
}
   35474:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   35476:	f06f 0015 	mvn.w	r0, #21
}
   3547a:	bd70      	pop	{r4, r5, r6, pc}
	mfy.param = conn;
   3547c:	4b0c      	ldr	r3, [pc, #48]	; (354b0 <ll_tx_mem_enqueue+0x94>)
	mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U, &mfy);
   3547e:	2101      	movs	r1, #1
   35480:	2003      	movs	r0, #3
	mfy.param = conn;
   35482:	609d      	str	r5, [r3, #8]
	mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH, 0U, &mfy);
   35484:	f7fa fea0 	bl	301c8 <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   35488:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   3548c:	2b00      	cmp	r3, #0
   3548e:	daf0      	bge.n	35472 <ll_tx_mem_enqueue+0x56>
		ull_periph_latency_cancel(conn, handle);
   35490:	2100      	movs	r1, #0
   35492:	4628      	mov	r0, r5
   35494:	f003 ff3a 	bl	3930c <ull_periph_latency_cancel>
   35498:	e7eb      	b.n	35472 <ll_tx_mem_enqueue+0x56>
		return -ENOBUFS;
   3549a:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   3549e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   354a0:	f06f 0015 	mvn.w	r0, #21
}
   354a4:	4770      	bx	lr
   354a6:	bf00      	nop
   354a8:	20001618 	.word	0x20001618
   354ac:	200007c8 	.word	0x200007c8
   354b0:	20000768 	.word	0x20000768

000354b4 <ll_conn_update>:
{
   354b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   354b8:	f8bd 8020 	ldrh.w	r8, [sp, #32]
   354bc:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
   354c0:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
   354c4:	2800      	cmp	r0, #0
   354c6:	d15c      	bne.n	35582 <ll_conn_update+0xce>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   354c8:	460c      	mov	r4, r1
   354ca:	4615      	mov	r5, r2
   354cc:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
   354d0:	4602      	mov	r2, r0
   354d2:	4845      	ldr	r0, [pc, #276]	; (355e8 <ll_conn_update+0x134>)
   354d4:	461e      	mov	r6, r3
   354d6:	f7fa fdcf 	bl	30078 <mem_get>
	if (conn->lll.handle != handle) {
   354da:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   354dc:	2b00      	cmp	r3, #0
   354de:	d150      	bne.n	35582 <ll_conn_update+0xce>
	if (!cmd) {
   354e0:	b1e4      	cbz	r4, 3551c <ll_conn_update+0x68>
		cmd--;
   354e2:	3c01      	subs	r4, #1
		if (cmd) {
   354e4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   354e8:	d020      	beq.n	3552c <ll_conn_update+0x78>
			if ((conn->llcp_conn_param.req ==
   354ea:	f890 2185 	ldrb.w	r2, [r0, #389]	; 0x185
   354ee:	f890 3184 	ldrb.w	r3, [r0, #388]	; 0x184
   354f2:	429a      	cmp	r2, r3
   354f4:	d042      	beq.n	3557c <ll_conn_update+0xc8>
			    (conn->llcp_conn_param.state !=
   354f6:	f890 3186 	ldrb.w	r3, [r0, #390]	; 0x186
			     conn->llcp_conn_param.ack) ||
   354fa:	f003 020f 	and.w	r2, r3, #15
   354fe:	2a03      	cmp	r2, #3
   35500:	d13c      	bne.n	3557c <ll_conn_update+0xc8>
			conn->llcp_conn_param.state = cmd;
   35502:	f004 040f 	and.w	r4, r4, #15
   35506:	f044 0410 	orr.w	r4, r4, #16
   3550a:	f023 031f 	bic.w	r3, r3, #31
   3550e:	431c      	orrs	r4, r3
			conn->llcp_conn_param.status = status;
   35510:	f880 5187 	strb.w	r5, [r0, #391]	; 0x187
			conn->llcp_conn_param.state = cmd;
   35514:	f880 4186 	strb.w	r4, [r0, #390]	; 0x186
				return BT_HCI_ERR_SUCCESS;
   35518:	2000      	movs	r0, #0
   3551a:	e030      	b.n	3557e <ll_conn_update+0xca>
		if (!conn->llcp_conn_param.disabled &&
   3551c:	f890 3186 	ldrb.w	r3, [r0, #390]	; 0x186
   35520:	065b      	lsls	r3, r3, #25
   35522:	d421      	bmi.n	35568 <ll_conn_update+0xb4>
		    (!conn->common.fex_valid ||
   35524:	f890 30d8 	ldrb.w	r3, [r0, #216]	; 0xd8
		if (!conn->llcp_conn_param.disabled &&
   35528:	07dd      	lsls	r5, r3, #31
   3552a:	d419      	bmi.n	35560 <ll_conn_update+0xac>
   3552c:	2300      	movs	r3, #0
			if (conn->llcp_conn_param.req !=
   3552e:	f890 4184 	ldrb.w	r4, [r0, #388]	; 0x184
   35532:	f890 1185 	ldrb.w	r1, [r0, #389]	; 0x185
   35536:	461a      	mov	r2, r3
   35538:	f369 020f 	bfi	r2, r9, #0, #16
   3553c:	f366 030f 	bfi	r3, r6, #0, #16
   35540:	42a1      	cmp	r1, r4
   35542:	f368 431f 	bfi	r3, r8, #16, #16
   35546:	f367 421f 	bfi	r2, r7, #16, #16
   3554a:	d035      	beq.n	355b8 <ll_conn_update+0x104>
				if (!conn->llcp_conn_param.remote ||
   3554c:	f890 1186 	ldrb.w	r1, [r0, #390]	; 0x186
   35550:	0689      	lsls	r1, r1, #26
   35552:	d513      	bpl.n	3557c <ll_conn_update+0xc8>
   35554:	f8b0 1196 	ldrh.w	r1, [r0, #406]	; 0x196
   35558:	b981      	cbnz	r1, 3557c <ll_conn_update+0xc8>
				conn->llcp_conn_param.cache.interval_min =
   3555a:	e9c0 3264 	strd	r3, r2, [r0, #400]	; 0x190
				return BT_HCI_ERR_SUCCESS;
   3555e:	e7db      	b.n	35518 <ll_conn_update+0x64>
		     (conn->llcp_feature.features_conn &
   35560:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
		    (!conn->common.fex_valid ||
   35564:	079c      	lsls	r4, r3, #30
   35566:	d4e1      	bmi.n	3552c <ll_conn_update+0x78>
		} else if (conn->lll.role) {
   35568:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3556c:	2b00      	cmp	r3, #0
   3556e:	db38      	blt.n	355e2 <ll_conn_update+0x12e>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   35570:	f890 210c 	ldrb.w	r2, [r0, #268]	; 0x10c
   35574:	f890 310d 	ldrb.w	r3, [r0, #269]	; 0x10d
   35578:	4293      	cmp	r3, r2
   3557a:	d005      	beq.n	35588 <ll_conn_update+0xd4>
			return BT_HCI_ERR_CMD_DISALLOWED;
   3557c:	200c      	movs	r0, #12
}
   3557e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   35582:	2002      	movs	r0, #2
}
   35584:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   35588:	f890 210e 	ldrb.w	r2, [r0, #270]	; 0x10e
		conn->llcp_cu.interval = interval_max;
   3558c:	f8a0 8110 	strh.w	r8, [r0, #272]	; 0x110
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   35590:	f022 020f 	bic.w	r2, r2, #15
		conn->llcp_cu.req++;
   35594:	3301      	adds	r3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   35596:	f042 0209 	orr.w	r2, r2, #9
   3559a:	f880 210e 	strb.w	r2, [r0, #270]	; 0x10e
		conn->llcp_cu.req++;
   3559e:	f880 310c 	strb.w	r3, [r0, #268]	; 0x10c
		conn->llcp_cu.win_size = 1U;
   355a2:	2201      	movs	r2, #1
		conn->llcp_cu.win_offset_us = 0U;
   355a4:	2300      	movs	r3, #0
		conn->llcp_cu.latency = latency;
   355a6:	f8a0 9112 	strh.w	r9, [r0, #274]	; 0x112
		conn->llcp_cu.timeout = timeout;
   355aa:	f8a0 7114 	strh.w	r7, [r0, #276]	; 0x114
		conn->llcp_cu.win_size = 1U;
   355ae:	f880 211c 	strb.w	r2, [r0, #284]	; 0x11c
		conn->llcp_cu.win_offset_us = 0U;
   355b2:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
		conn->llcp_cu.req++;
   355b6:	e7af      	b.n	35518 <ll_conn_update+0x64>
			conn->llcp_conn_param.state = cmd;
   355b8:	f8b0 4186 	ldrh.w	r4, [r0, #390]	; 0x186
			conn->llcp_conn_param.interval_min = interval_min;
   355bc:	e9c0 3262 	strd	r3, r2, [r0, #392]	; 0x188
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   355c0:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
			conn->llcp_conn_param.state = cmd;
   355c4:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
			conn->llcp_conn_param.req++;
   355c8:	3101      	adds	r1, #1
			conn->llcp_conn_param.state = cmd;
   355ca:	f044 0410 	orr.w	r4, r4, #16
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   355ce:	2b00      	cmp	r3, #0
			conn->llcp_conn_param.state = cmd;
   355d0:	f8a0 4186 	strh.w	r4, [r0, #390]	; 0x186
			conn->llcp_conn_param.req++;
   355d4:	f880 1184 	strb.w	r1, [r0, #388]	; 0x184
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   355d8:	da9e      	bge.n	35518 <ll_conn_update+0x64>
				ull_periph_latency_cancel(conn, handle);
   355da:	2100      	movs	r1, #0
   355dc:	f003 fe96 	bl	3930c <ull_periph_latency_cancel>
   355e0:	e79a      	b.n	35518 <ll_conn_update+0x64>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   355e2:	201a      	movs	r0, #26
   355e4:	e7cb      	b.n	3557e <ll_conn_update+0xca>
   355e6:	bf00      	nop
   355e8:	20001618 	.word	0x20001618

000355ec <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   355ec:	b9d0      	cbnz	r0, 35624 <ll_chm_get+0x38>
{
   355ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   355f0:	4602      	mov	r2, r0
   355f2:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   355f4:	480c      	ldr	r0, [pc, #48]	; (35628 <ll_chm_get+0x3c>)
   355f6:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
   355fa:	f7fa fd3d 	bl	30078 <mem_get>
	if (conn->lll.handle != handle) {
   355fe:	8d06      	ldrh	r6, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   35600:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   35602:	b96e      	cbnz	r6, 35620 <ll_chm_get+0x34>
		memcpy(chm, conn->lll.data_chan_map,
   35604:	f100 0734 	add.w	r7, r0, #52	; 0x34
		conn->chm_updated = 0U;
   35608:	f884 61e0 	strb.w	r6, [r4, #480]	; 0x1e0
		memcpy(chm, conn->lll.data_chan_map,
   3560c:	2205      	movs	r2, #5
   3560e:	4639      	mov	r1, r7
   35610:	4628      	mov	r0, r5
   35612:	f00e fe81 	bl	44318 <memcpy>
	} while (conn->chm_updated);
   35616:	f894 01e0 	ldrb.w	r0, [r4, #480]	; 0x1e0
   3561a:	2800      	cmp	r0, #0
   3561c:	d1f4      	bne.n	35608 <ll_chm_get+0x1c>
}
   3561e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   35620:	2002      	movs	r0, #2
}
   35622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   35624:	2002      	movs	r0, #2
}
   35626:	4770      	bx	lr
   35628:	20001618 	.word	0x20001618

0003562c <ll_terminate_ind_send>:
	if (IS_ACL_HANDLE(handle)) {
   3562c:	b108      	cbz	r0, 35632 <ll_terminate_ind_send+0x6>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3562e:	2002      	movs	r0, #2
}
   35630:	4770      	bx	lr
{
   35632:	b510      	push	{r4, lr}
   35634:	4602      	mov	r2, r0
   35636:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   35638:	4816      	ldr	r0, [pc, #88]	; (35694 <ll_terminate_ind_send+0x68>)
   3563a:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
   3563e:	f7fa fd1b 	bl	30078 <mem_get>
	if (conn->lll.handle != handle) {
   35642:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   35644:	bb03      	cbnz	r3, 35688 <ll_terminate_ind_send+0x5c>
		if (conn->llcp_terminate.req != conn->llcp_terminate.ack) {
   35646:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
   3564a:	f890 2141 	ldrb.w	r2, [r0, #321]	; 0x141
   3564e:	429a      	cmp	r2, r3
   35650:	d11a      	bne.n	35688 <ll_terminate_ind_send+0x5c>
	switch (reason) {
   35652:	2c1a      	cmp	r4, #26
   35654:	d803      	bhi.n	3565e <ll_terminate_ind_send+0x32>
   35656:	2c04      	cmp	r4, #4
   35658:	d810      	bhi.n	3567c <ll_terminate_ind_send+0x50>
   3565a:	2012      	movs	r0, #18
}
   3565c:	bd10      	pop	{r4, pc}
	switch (reason) {
   3565e:	2c29      	cmp	r4, #41	; 0x29
   35660:	d001      	beq.n	35666 <ll_terminate_ind_send+0x3a>
   35662:	2c3b      	cmp	r4, #59	; 0x3b
   35664:	d1f9      	bne.n	3565a <ll_terminate_ind_send+0x2e>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   35666:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
		conn->llcp_terminate.reason_own = reason;
   3566a:	f880 4142 	strb.w	r4, [r0, #322]	; 0x142
		conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   3566e:	3301      	adds	r3, #1
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   35670:	2a00      	cmp	r2, #0
		conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   35672:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   35676:	db09      	blt.n	3568c <ll_terminate_ind_send+0x60>
		return 0;
   35678:	2000      	movs	r0, #0
}
   3567a:	bd10      	pop	{r4, pc}
	switch (reason) {
   3567c:	4a06      	ldr	r2, [pc, #24]	; (35698 <ll_terminate_ind_send+0x6c>)
   3567e:	40e2      	lsrs	r2, r4
   35680:	07d2      	lsls	r2, r2, #31
   35682:	d4f0      	bmi.n	35666 <ll_terminate_ind_send+0x3a>
   35684:	2012      	movs	r0, #18
   35686:	e7e9      	b.n	3565c <ll_terminate_ind_send+0x30>
			return BT_HCI_ERR_CMD_DISALLOWED;
   35688:	200c      	movs	r0, #12
}
   3568a:	bd10      	pop	{r4, pc}
			ull_periph_latency_cancel(conn, handle);
   3568c:	2100      	movs	r1, #0
   3568e:	f003 fe3d 	bl	3930c <ull_periph_latency_cancel>
   35692:	e7f1      	b.n	35678 <ll_terminate_ind_send+0x4c>
   35694:	20001618 	.word	0x20001618
   35698:	04380020 	.word	0x04380020

0003569c <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3569c:	bb00      	cbnz	r0, 356e0 <ll_feature_req_send+0x44>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3569e:	4602      	mov	r2, r0
   356a0:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
{
   356a4:	b508      	push	{r3, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   356a6:	480f      	ldr	r0, [pc, #60]	; (356e4 <ll_feature_req_send+0x48>)
   356a8:	f7fa fce6 	bl	30078 <mem_get>
	if (conn->lll.handle != handle) {
   356ac:	8d01      	ldrh	r1, [r0, #40]	; 0x28
   356ae:	b989      	cbnz	r1, 356d4 <ll_feature_req_send+0x38>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   356b0:	f890 c120 	ldrb.w	ip, [r0, #288]	; 0x120
   356b4:	f890 2121 	ldrb.w	r2, [r0, #289]	; 0x121
   356b8:	4562      	cmp	r2, ip
   356ba:	d109      	bne.n	356d0 <ll_feature_req_send+0x34>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   356bc:	f990 c039 	ldrsb.w	ip, [r0, #57]	; 0x39
	conn->llcp_feature.req++;
   356c0:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   356c2:	f1bc 0f00 	cmp.w	ip, #0
	conn->llcp_feature.req++;
   356c6:	f880 2120 	strb.w	r2, [r0, #288]	; 0x120
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   356ca:	db05      	blt.n	356d8 <ll_feature_req_send+0x3c>
	return 0;
   356cc:	2000      	movs	r0, #0
}
   356ce:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   356d0:	200c      	movs	r0, #12
}
   356d2:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   356d4:	2002      	movs	r0, #2
}
   356d6:	bd08      	pop	{r3, pc}
		ull_periph_latency_cancel(conn, handle);
   356d8:	f003 fe18 	bl	3930c <ull_periph_latency_cancel>
	return 0;
   356dc:	2000      	movs	r0, #0
   356de:	e7f6      	b.n	356ce <ll_feature_req_send+0x32>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   356e0:	2002      	movs	r0, #2
}
   356e2:	4770      	bx	lr
   356e4:	20001618 	.word	0x20001618

000356e8 <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   356e8:	bb00      	cbnz	r0, 3572c <ll_version_ind_send+0x44>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   356ea:	4602      	mov	r2, r0
   356ec:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
{
   356f0:	b508      	push	{r3, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   356f2:	480f      	ldr	r0, [pc, #60]	; (35730 <ll_version_ind_send+0x48>)
   356f4:	f7fa fcc0 	bl	30078 <mem_get>
	if (conn->lll.handle != handle) {
   356f8:	8d01      	ldrh	r1, [r0, #40]	; 0x28
   356fa:	b989      	cbnz	r1, 35720 <ll_version_ind_send+0x38>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   356fc:	f890 c138 	ldrb.w	ip, [r0, #312]	; 0x138
   35700:	f890 2139 	ldrb.w	r2, [r0, #313]	; 0x139
   35704:	4562      	cmp	r2, ip
   35706:	d109      	bne.n	3571c <ll_version_ind_send+0x34>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   35708:	f990 c039 	ldrsb.w	ip, [r0, #57]	; 0x39
	conn->llcp_version.req++;
   3570c:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3570e:	f1bc 0f00 	cmp.w	ip, #0
	conn->llcp_version.req++;
   35712:	f880 2138 	strb.w	r2, [r0, #312]	; 0x138
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   35716:	db05      	blt.n	35724 <ll_version_ind_send+0x3c>
	return 0;
   35718:	2000      	movs	r0, #0
}
   3571a:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   3571c:	200c      	movs	r0, #12
}
   3571e:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   35720:	2002      	movs	r0, #2
}
   35722:	bd08      	pop	{r3, pc}
		ull_periph_latency_cancel(conn, handle);
   35724:	f003 fdf2 	bl	3930c <ull_periph_latency_cancel>
	return 0;
   35728:	2000      	movs	r0, #0
   3572a:	e7f6      	b.n	3571a <ll_version_ind_send+0x32>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3572c:	2002      	movs	r0, #2
}
   3572e:	4770      	bx	lr
   35730:	20001618 	.word	0x20001618

00035734 <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   35734:	2800      	cmp	r0, #0
   35736:	d150      	bne.n	357da <ll_length_req_send+0xa6>
{
   35738:	b538      	push	{r3, r4, r5, lr}
   3573a:	460c      	mov	r4, r1
   3573c:	4615      	mov	r5, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3573e:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
   35742:	4602      	mov	r2, r0
   35744:	4826      	ldr	r0, [pc, #152]	; (357e0 <ll_length_req_send+0xac>)
   35746:	f7fa fc97 	bl	30078 <mem_get>
	if (conn->lll.handle != handle) {
   3574a:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3574c:	2b00      	cmp	r3, #0
   3574e:	d140      	bne.n	357d2 <ll_length_req_send+0x9e>
	if (conn->llcp_length.disabled ||
   35750:	f890 31b6 	ldrb.w	r3, [r0, #438]	; 0x1b6
   35754:	071a      	lsls	r2, r3, #28
   35756:	d43a      	bmi.n	357ce <ll_length_req_send+0x9a>
	    (conn->common.fex_valid &&
   35758:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
	if (conn->llcp_length.disabled ||
   3575c:	07d1      	lsls	r1, r2, #31
   3575e:	d503      	bpl.n	35768 <ll_length_req_send+0x34>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_DLE)))) {
   35760:	f8d0 2128 	ldr.w	r2, [r0, #296]	; 0x128
	    (conn->common.fex_valid &&
   35764:	0692      	lsls	r2, r2, #26
   35766:	d532      	bpl.n	357ce <ll_length_req_send+0x9a>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
   35768:	f890 c1b4 	ldrb.w	ip, [r0, #436]	; 0x1b4
   3576c:	f890 11b5 	ldrb.w	r1, [r0, #437]	; 0x1b5
	if (tx_time > tx_time_max) {
   35770:	f5b5 7fa4 	cmp.w	r5, #328	; 0x148
   35774:	462a      	mov	r2, r5
   35776:	bf28      	it	cs
   35778:	f44f 72a4 	movcs.w	r2, #328	; 0x148
	if (conn->llcp_length.req != conn->llcp_length.ack) {
   3577c:	4561      	cmp	r1, ip
   3577e:	d011      	beq.n	357a4 <ll_length_req_send+0x70>
		switch (conn->llcp_length.state) {
   35780:	f003 0307 	and.w	r3, r3, #7
   35784:	2b03      	cmp	r3, #3
   35786:	d004      	beq.n	35792 <ll_length_req_send+0x5e>
   35788:	3303      	adds	r3, #3
   3578a:	f003 0307 	and.w	r3, r3, #7
   3578e:	2b01      	cmp	r3, #1
   35790:	d821      	bhi.n	357d6 <ll_length_req_send+0xa2>
			if (!conn->llcp_length.cache.tx_octets) {
   35792:	f8b0 31c0 	ldrh.w	r3, [r0, #448]	; 0x1c0
   35796:	b9f3      	cbnz	r3, 357d6 <ll_length_req_send+0xa2>
				conn->llcp_length.cache.tx_octets = tx_octets;
   35798:	f8a0 41c0 	strh.w	r4, [r0, #448]	; 0x1c0
				conn->llcp_length.cache.tx_time = tx_time;
   3579c:	f8a0 21c2 	strh.w	r2, [r0, #450]	; 0x1c2
	return 0;
   357a0:	2000      	movs	r0, #0
}
   357a2:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   357a4:	f890 31b6 	ldrb.w	r3, [r0, #438]	; 0x1b6
	conn->llcp_length.tx_octets = tx_octets;
   357a8:	f8a0 41ba 	strh.w	r4, [r0, #442]	; 0x1ba
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   357ac:	f36f 0302 	bfc	r3, #0, #3
   357b0:	f880 31b6 	strb.w	r3, [r0, #438]	; 0x1b6
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   357b4:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	conn->llcp_length.tx_time = tx_time;
   357b8:	f8a0 21be 	strh.w	r2, [r0, #446]	; 0x1be
	conn->llcp_length.req++;
   357bc:	3101      	adds	r1, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   357be:	2b00      	cmp	r3, #0
	conn->llcp_length.req++;
   357c0:	f880 11b4 	strb.w	r1, [r0, #436]	; 0x1b4
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   357c4:	daec      	bge.n	357a0 <ll_length_req_send+0x6c>
		ull_periph_latency_cancel(conn, handle);
   357c6:	2100      	movs	r1, #0
   357c8:	f003 fda0 	bl	3930c <ull_periph_latency_cancel>
   357cc:	e7e8      	b.n	357a0 <ll_length_req_send+0x6c>
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   357ce:	201a      	movs	r0, #26
}
   357d0:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   357d2:	2002      	movs	r0, #2
}
   357d4:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   357d6:	200c      	movs	r0, #12
}
   357d8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   357da:	2002      	movs	r0, #2
}
   357dc:	4770      	bx	lr
   357de:	bf00      	nop
   357e0:	20001618 	.word	0x20001618

000357e4 <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
   357e4:	4a03      	ldr	r2, [pc, #12]	; (357f4 <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
   357e6:	4b04      	ldr	r3, [pc, #16]	; (357f8 <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
   357e8:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
   357ea:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
   357ec:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
   357ee:	800b      	strh	r3, [r1, #0]
}
   357f0:	4770      	bx	lr
   357f2:	bf00      	nop
   357f4:	200039d8 	.word	0x200039d8
   357f8:	200039d6 	.word	0x200039d6

000357fc <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
   357fc:	4a02      	ldr	r2, [pc, #8]	; (35808 <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
   357fe:	4b03      	ldr	r3, [pc, #12]	; (3580c <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
   35800:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
   35802:	8019      	strh	r1, [r3, #0]
}
   35804:	2000      	movs	r0, #0
   35806:	4770      	bx	lr
   35808:	200039d8 	.word	0x200039d8
   3580c:	200039d6 	.word	0x200039d6

00035810 <ll_length_max_get>:
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   35810:	f04f 0c1b 	mov.w	ip, #27
   35814:	f8a0 c000 	strh.w	ip, [r0]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   35818:	f44f 70a4 	mov.w	r0, #328	; 0x148
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   3581c:	f8a2 c000 	strh.w	ip, [r2]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   35820:	8008      	strh	r0, [r1, #0]
	*max_rx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   35822:	8018      	strh	r0, [r3, #0]
}
   35824:	4770      	bx	lr
   35826:	bf00      	nop

00035828 <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   35828:	b9c0      	cbnz	r0, 3585c <ll_phy_get+0x34>
{
   3582a:	b538      	push	{r3, r4, r5, lr}
   3582c:	460d      	mov	r5, r1
   3582e:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   35830:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
   35834:	4602      	mov	r2, r0
   35836:	480a      	ldr	r0, [pc, #40]	; (35860 <ll_phy_get+0x38>)
   35838:	f7fa fc1e 	bl	30078 <mem_get>
   3583c:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   3583e:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   35840:	b950      	cbnz	r0, 35858 <ll_phy_get+0x30>
	*tx = conn->lll.phy_tx;
   35842:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   35846:	f3c2 0202 	ubfx	r2, r2, #0, #3
   3584a:	702a      	strb	r2, [r5, #0]
	*rx = conn->lll.phy_rx;
   3584c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
   35850:	f3c3 0302 	ubfx	r3, r3, #0, #3
   35854:	7023      	strb	r3, [r4, #0]
}
   35856:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   35858:	2002      	movs	r0, #2
}
   3585a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3585c:	2002      	movs	r0, #2
}
   3585e:	4770      	bx	lr
   35860:	20001618 	.word	0x20001618

00035864 <ll_phy_default_set>:
	default_phy_tx = tx;
   35864:	4a02      	ldr	r2, [pc, #8]	; (35870 <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
   35866:	4b03      	ldr	r3, [pc, #12]	; (35874 <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
   35868:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
   3586a:	7019      	strb	r1, [r3, #0]
}
   3586c:	2000      	movs	r0, #0
   3586e:	4770      	bx	lr
   35870:	20003b10 	.word	0x20003b10
   35874:	20003b0f 	.word	0x20003b0f

00035878 <ll_phy_req_send>:
{
   35878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   3587a:	2800      	cmp	r0, #0
   3587c:	d143      	bne.n	35906 <ll_phy_req_send+0x8e>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3587e:	460c      	mov	r4, r1
   35880:	4616      	mov	r6, r2
   35882:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
   35886:	4602      	mov	r2, r0
   35888:	4823      	ldr	r0, [pc, #140]	; (35918 <ll_phy_req_send+0xa0>)
   3588a:	461f      	mov	r7, r3
   3588c:	f7fa fbf4 	bl	30078 <mem_get>
	if (conn->lll.handle != handle) {
   35890:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   35892:	bbc3      	cbnz	r3, 35906 <ll_phy_req_send+0x8e>
	if (conn->llcp_phy.disabled ||
   35894:	f890 51c7 	ldrb.w	r5, [r0, #455]	; 0x1c7
   35898:	f015 0508 	ands.w	r5, r5, #8
   3589c:	d130      	bne.n	35900 <ll_phy_req_send+0x88>
	    (conn->common.fex_valid &&
   3589e:	f890 30d8 	ldrb.w	r3, [r0, #216]	; 0xd8
	if (conn->llcp_phy.disabled ||
   358a2:	07db      	lsls	r3, r3, #31
   358a4:	d504      	bpl.n	358b0 <ll_phy_req_send+0x38>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_PHY_2M)) &&
   358a6:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   358aa:	f413 6f10 	tst.w	r3, #2304	; 0x900
   358ae:	d027      	beq.n	35900 <ll_phy_req_send+0x88>
	if (conn->llcp_phy.req != conn->llcp_phy.ack) {
   358b0:	f890 31c4 	ldrb.w	r3, [r0, #452]	; 0x1c4
   358b4:	f890 11c5 	ldrb.w	r1, [r0, #453]	; 0x1c5
   358b8:	4299      	cmp	r1, r3
   358ba:	d11e      	bne.n	358fa <ll_phy_req_send+0x82>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   358bc:	f004 0407 	and.w	r4, r4, #7
   358c0:	00a4      	lsls	r4, r4, #2
   358c2:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
   358c6:	f007 0707 	and.w	r7, r7, #7
   358ca:	ea44 1347 	orr.w	r3, r4, r7, lsl #5
   358ce:	f006 0601 	and.w	r6, r6, #1
   358d2:	ea43 2246 	orr.w	r2, r3, r6, lsl #9
   358d6:	f8b0 31c6 	ldrh.w	r3, [r0, #454]	; 0x1c6
   358da:	f423 63df 	bic.w	r3, r3, #1784	; 0x6f8
   358de:	f023 0307 	bic.w	r3, r3, #7
   358e2:	431a      	orrs	r2, r3
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   358e4:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   358e8:	f8a0 21c6 	strh.w	r2, [r0, #454]	; 0x1c6
	conn->llcp_phy.req++;
   358ec:	3101      	adds	r1, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   358ee:	2b00      	cmp	r3, #0
	conn->llcp_phy.req++;
   358f0:	f880 11c4 	strb.w	r1, [r0, #452]	; 0x1c4
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   358f4:	db0a      	blt.n	3590c <ll_phy_req_send+0x94>
}
   358f6:	4628      	mov	r0, r5
   358f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   358fa:	250c      	movs	r5, #12
}
   358fc:	4628      	mov	r0, r5
   358fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   35900:	251a      	movs	r5, #26
}
   35902:	4628      	mov	r0, r5
   35904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   35906:	2502      	movs	r5, #2
}
   35908:	4628      	mov	r0, r5
   3590a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ull_periph_latency_cancel(conn, handle);
   3590c:	2100      	movs	r1, #0
   3590e:	f003 fcfd 	bl	3930c <ull_periph_latency_cancel>
}
   35912:	4628      	mov	r0, r5
   35914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35916:	bf00      	nop
   35918:	20001618 	.word	0x20001618

0003591c <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3591c:	b9d8      	cbnz	r0, 35956 <ll_apto_get+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3591e:	4602      	mov	r2, r0
{
   35920:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   35922:	480e      	ldr	r0, [pc, #56]	; (3595c <ll_apto_get+0x40>)
   35924:	460c      	mov	r4, r1
   35926:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
   3592a:	f7fa fba5 	bl	30078 <mem_get>
   3592e:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   35930:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   35932:	b970      	cbnz	r0, 35952 <ll_apto_get+0x36>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   35934:	f8b2 30ce 	ldrh.w	r3, [r2, #206]	; 0xce
   35938:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
   3593a:	fb02 f303 	mul.w	r3, r2, r3
   3593e:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   35942:	4a07      	ldr	r2, [pc, #28]	; (35960 <ll_apto_get+0x44>)
   35944:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   35948:	fba2 2303 	umull	r2, r3, r2, r3
   3594c:	099b      	lsrs	r3, r3, #6
   3594e:	8023      	strh	r3, [r4, #0]
}
   35950:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   35952:	2002      	movs	r0, #2
}
   35954:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   35956:	2002      	movs	r0, #2
}
   35958:	4770      	bx	lr
   3595a:	bf00      	nop
   3595c:	20001618 	.word	0x20001618
   35960:	10624dd3 	.word	0x10624dd3

00035964 <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   35964:	b9d8      	cbnz	r0, 3599e <ll_apto_set+0x3a>
{
   35966:	b510      	push	{r4, lr}
   35968:	4602      	mov	r2, r0
   3596a:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3596c:	480d      	ldr	r0, [pc, #52]	; (359a4 <ll_apto_set+0x40>)
   3596e:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
   35972:	f7fa fb81 	bl	30078 <mem_get>
   35976:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   35978:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   3597a:	b970      	cbnz	r0, 3599a <ll_apto_set+0x36>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   3597c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
   3597e:	f240 41e2 	movw	r1, #1250	; 0x4e2
   35982:	fb01 f202 	mul.w	r2, r1, r2
   35986:	f242 7110 	movw	r1, #10000	; 0x2710
   3598a:	fb01 2104 	mla	r1, r1, r4, r2
   3598e:	3901      	subs	r1, #1
   35990:	fbb1 f1f2 	udiv	r1, r1, r2
   35994:	f8a3 10ce 	strh.w	r1, [r3, #206]	; 0xce
}
   35998:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3599a:	2002      	movs	r0, #2
}
   3599c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3599e:	2002      	movs	r0, #2
}
   359a0:	4770      	bx	lr
   359a2:	bf00      	nop
   359a4:	20001618 	.word	0x20001618

000359a8 <ull_conn_init>:
	err = init_reset();
   359a8:	f7fe bec6 	b.w	34738 <init_reset>

000359ac <ull_conn_reset>:
{
   359ac:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   359ae:	2200      	movs	r2, #0
   359b0:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
   359b4:	4813      	ldr	r0, [pc, #76]	; (35a04 <ull_conn_reset+0x58>)
   359b6:	f7fa fb5f 	bl	30078 <mem_get>
   359ba:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
   359bc:	f100 021c 	add.w	r2, r0, #28
   359c0:	4601      	mov	r1, r0
   359c2:	2003      	movs	r0, #3
   359c4:	f7fd fe1a 	bl	335fc <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   359c8:	b108      	cbz	r0, 359ce <ull_conn_reset+0x22>
   359ca:	3078      	adds	r0, #120	; 0x78
   359cc:	d10c      	bne.n	359e8 <ull_conn_reset+0x3c>
	MFIFO_INIT(conn_tx);
   359ce:	490e      	ldr	r1, [pc, #56]	; (35a08 <ull_conn_reset+0x5c>)
	MFIFO_INIT(conn_ack);
   359d0:	4a0e      	ldr	r2, [pc, #56]	; (35a0c <ull_conn_reset+0x60>)
	conn->lll.link_tx_free = NULL;
   359d2:	2300      	movs	r3, #0
	conn->lll.handle = LLL_HANDLE_INVALID;
   359d4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   359d8:	8520      	strh	r0, [r4, #40]	; 0x28
	conn->lll.link_tx_free = NULL;
   359da:	6763      	str	r3, [r4, #116]	; 0x74
	MFIFO_INIT(conn_tx);
   359dc:	808b      	strh	r3, [r1, #4]
	MFIFO_INIT(conn_ack);
   359de:	8093      	strh	r3, [r2, #4]
}
   359e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = init_reset();
   359e4:	f7fe bea8 	b.w	34738 <init_reset>
	LL_ASSERT(err == 0 || err == -EALREADY);
   359e8:	4a09      	ldr	r2, [pc, #36]	; (35a10 <ull_conn_reset+0x64>)
   359ea:	490a      	ldr	r1, [pc, #40]	; (35a14 <ull_conn_reset+0x68>)
   359ec:	480a      	ldr	r0, [pc, #40]	; (35a18 <ull_conn_reset+0x6c>)
   359ee:	f640 13c9 	movw	r3, #2505	; 0x9c9
   359f2:	f00c fde9 	bl	425c8 <assert_print>
   359f6:	4040      	eors	r0, r0
   359f8:	f380 8811 	msr	BASEPRI, r0
   359fc:	f04f 0003 	mov.w	r0, #3
   35a00:	df02      	svc	2
   35a02:	e7e4      	b.n	359ce <ull_conn_reset+0x22>
   35a04:	20001618 	.word	0x20001618
   35a08:	200007c8 	.word	0x200007c8
   35a0c:	20000778 	.word	0x20000778
   35a10:	00049c60 	.word	0x00049c60
   35a14:	00049d70 	.word	0x00049d70
   35a18:	000497b0 	.word	0x000497b0

00035a1c <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
   35a1c:	4b01      	ldr	r3, [pc, #4]	; (35a24 <ull_conn_default_tx_octets_get+0x8>)
}
   35a1e:	8818      	ldrh	r0, [r3, #0]
   35a20:	4770      	bx	lr
   35a22:	bf00      	nop
   35a24:	200039d8 	.word	0x200039d8

00035a28 <ull_conn_default_tx_time_get>:
	return default_tx_time;
   35a28:	4b01      	ldr	r3, [pc, #4]	; (35a30 <ull_conn_default_tx_time_get+0x8>)
}
   35a2a:	8818      	ldrh	r0, [r3, #0]
   35a2c:	4770      	bx	lr
   35a2e:	bf00      	nop
   35a30:	200039d6 	.word	0x200039d6

00035a34 <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
   35a34:	4b01      	ldr	r3, [pc, #4]	; (35a3c <ull_conn_default_phy_tx_get+0x8>)
}
   35a36:	7818      	ldrb	r0, [r3, #0]
   35a38:	4770      	bx	lr
   35a3a:	bf00      	nop
   35a3c:	20003b10 	.word	0x20003b10

00035a40 <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
   35a40:	4b01      	ldr	r3, [pc, #4]	; (35a48 <ull_conn_default_phy_rx_get+0x8>)
}
   35a42:	7818      	ldrb	r0, [r3, #0]
   35a44:	4770      	bx	lr
   35a46:	bf00      	nop
   35a48:	20003b0f 	.word	0x20003b0f

00035a4c <ull_conn_setup>:
{
   35a4c:	b538      	push	{r3, r4, r5, lr}
	hdr = HDR_LLL2ULL(ftr->param);
   35a4e:	688b      	ldr	r3, [r1, #8]
	rx->link = rx_link;
   35a50:	6008      	str	r0, [r1, #0]
	hdr = HDR_LLL2ULL(ftr->param);
   35a52:	681d      	ldr	r5, [r3, #0]
   35a54:	782b      	ldrb	r3, [r5, #0]
{
   35a56:	460c      	mov	r4, r1
	if (ull_ref_get(hdr)) {
   35a58:	b193      	cbz	r3, 35a80 <ull_conn_setup+0x34>
		LL_ASSERT(!hdr->disabled_cb);
   35a5a:	696b      	ldr	r3, [r5, #20]
   35a5c:	b163      	cbz	r3, 35a78 <ull_conn_setup+0x2c>
   35a5e:	4a0b      	ldr	r2, [pc, #44]	; (35a8c <ull_conn_setup+0x40>)
   35a60:	490b      	ldr	r1, [pc, #44]	; (35a90 <ull_conn_setup+0x44>)
   35a62:	480c      	ldr	r0, [pc, #48]	; (35a94 <ull_conn_setup+0x48>)
   35a64:	f240 4322 	movw	r3, #1058	; 0x422
   35a68:	f00c fdae 	bl	425c8 <assert_print>
   35a6c:	4040      	eors	r0, r0
   35a6e:	f380 8811 	msr	BASEPRI, r0
   35a72:	f04f 0003 	mov.w	r0, #3
   35a76:	df02      	svc	2
		hdr->disabled_cb = conn_setup_adv_scan_disabled_cb;
   35a78:	4b07      	ldr	r3, [pc, #28]	; (35a98 <ull_conn_setup+0x4c>)
   35a7a:	e9c5 3405 	strd	r3, r4, [r5, #20]
}
   35a7e:	bd38      	pop	{r3, r4, r5, pc}
   35a80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		conn_setup_adv_scan_disabled_cb(rx);
   35a84:	4608      	mov	r0, r1
   35a86:	f7ff b85b 	b.w	34b40 <conn_setup_adv_scan_disabled_cb>
   35a8a:	bf00      	nop
   35a8c:	00049c60 	.word	0x00049c60
   35a90:	00049b68 	.word	0x00049b68
   35a94:	000497b0 	.word	0x000497b0
   35a98:	00034b41 	.word	0x00034b41

00035a9c <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
   35a9c:	680b      	ldr	r3, [r1, #0]
	if (handle >= CONFIG_BT_MAX_CONN) {
   35a9e:	88da      	ldrh	r2, [r3, #6]
   35aa0:	2a00      	cmp	r2, #0
   35aa2:	f040 80d4 	bne.w	35c4e <ull_conn_rx+0x1b2>
{
   35aa6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35aaa:	460d      	mov	r5, r1
   35aac:	b085      	sub	sp, #20
   35aae:	4607      	mov	r7, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   35ab0:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
   35ab4:	48b1      	ldr	r0, [pc, #708]	; (35d7c <ull_conn_rx+0x2e0>)
   35ab6:	f7fa fadf 	bl	30078 <mem_get>
	if (conn->lll.handle != handle) {
   35aba:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   35abc:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   35abe:	2b00      	cmp	r3, #0
   35ac0:	d150      	bne.n	35b64 <ull_conn_rx+0xc8>
	pdu_rx = (void *)(*rx)->pdu;
   35ac2:	682e      	ldr	r6, [r5, #0]

	opcode = pdu_rx->llctrl.opcode;

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   35ac4:	f890 3166 	ldrb.w	r3, [r0, #358]	; 0x166
	switch (pdu_rx->ll_id) {
   35ac8:	7f32      	ldrb	r2, [r6, #28]
   35aca:	f002 0203 	and.w	r2, r2, #3
   35ace:	2a03      	cmp	r2, #3
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   35ad0:	f003 0001 	and.w	r0, r3, #1
	switch (pdu_rx->ll_id) {
   35ad4:	d139      	bne.n	35b4a <ull_conn_rx+0xae>
	opcode = pdu_rx->llctrl.opcode;
   35ad6:	f896 901f 	ldrb.w	r9, [r6, #31]
	pdu_rx = (void *)(*rx)->pdu;
   35ada:	f106 0c1c 	add.w	ip, r6, #28
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   35ade:	2800      	cmp	r0, #0
   35ae0:	d044      	beq.n	35b6c <ull_conn_rx+0xd0>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   35ae2:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   35ae6:	2a00      	cmp	r2, #0
		((!conn->llcp_enc.refresh &&
   35ae8:	f003 0004 	and.w	r0, r3, #4
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   35aec:	f2c0 8211 	blt.w	35f12 <ull_conn_rx+0x476>
	return (!conn->lll.role &&
   35af0:	2800      	cmp	r0, #0
   35af2:	f040 80b0 	bne.w	35c56 <ull_conn_rx+0x1ba>
		((!conn->llcp_enc.refresh &&
   35af6:	f1b9 0f02 	cmp.w	r9, #2
   35afa:	f000 8219 	beq.w	35f30 <ull_conn_rx+0x494>
   35afe:	f1b9 0f11 	cmp.w	r9, #17
   35b02:	d82c      	bhi.n	35b5e <ull_conn_rx+0xc2>
   35b04:	489e      	ldr	r0, [pc, #632]	; (35d80 <ull_conn_rx+0x2e4>)
   35b06:	fa20 f009 	lsr.w	r0, r0, r9
   35b0a:	07c1      	lsls	r1, r0, #31
   35b0c:	d527      	bpl.n	35b5e <ull_conn_rx+0xc2>

		return 0;
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
   35b0e:	f1b9 0f18 	cmp.w	r9, #24
   35b12:	d84e      	bhi.n	35bb2 <ull_conn_rx+0x116>
   35b14:	e8df f019 	tbh	[pc, r9, lsl #1]
   35b18:	035503f8 	.word	0x035503f8
   35b1c:	004d020c 	.word	0x004d020c
   35b20:	004d004d 	.word	0x004d004d
   35b24:	01d40217 	.word	0x01d40217
   35b28:	01380389 	.word	0x01380389
   35b2c:	04a70312 	.word	0x04a70312
   35b30:	02420297 	.word	0x02420297
   35b34:	0288004d 	.word	0x0288004d
   35b38:	019f004d 	.word	0x019f004d
   35b3c:	0174017e 	.word	0x0174017e
   35b40:	00c800c8 	.word	0x00c800c8
   35b44:	004d0101 	.word	0x004d0101
   35b48:	0470      	.short	0x0470
	switch (pdu_rx->ll_id) {
   35b4a:	b932      	cbnz	r2, 35b5a <ull_conn_rx+0xbe>
		if (conn->llcp_enc.pause_rx) {
   35b4c:	bb60      	cbnz	r0, 35ba8 <ull_conn_rx+0x10c>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   35b4e:	2301      	movs	r3, #1
   35b50:	7133      	strb	r3, [r6, #4]
		return 0;
   35b52:	2000      	movs	r0, #0
}
   35b54:	b005      	add	sp, #20
   35b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
   35b5a:	2800      	cmp	r0, #0
   35b5c:	d0f9      	beq.n	35b52 <ull_conn_rx+0xb6>
			conn->llcp_terminate.reason_final =
   35b5e:	233d      	movs	r3, #61	; 0x3d
   35b60:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   35b64:	682b      	ldr	r3, [r5, #0]
   35b66:	2201      	movs	r2, #1
   35b68:	711a      	strb	r2, [r3, #4]
   35b6a:	e7f2      	b.n	35b52 <ull_conn_rx+0xb6>
	switch (opcode) {
   35b6c:	f1b9 0f18 	cmp.w	r9, #24
   35b70:	d81f      	bhi.n	35bb2 <ull_conn_rx+0x116>
   35b72:	e8df f019 	tbh	[pc, r9, lsl #1]
   35b76:	03c7      	.short	0x03c7
   35b78:	01dd0324 	.word	0x01dd0324
   35b7c:	001e0295 	.word	0x001e0295
   35b80:	01e8001e 	.word	0x01e8001e
   35b84:	035801a5 	.word	0x035801a5
   35b88:	02e10109 	.word	0x02e10109
   35b8c:	02680478 	.word	0x02680478
   35b90:	001e0213 	.word	0x001e0213
   35b94:	001e0259 	.word	0x001e0259
   35b98:	014f0170 	.word	0x014f0170
   35b9c:	00990145 	.word	0x00990145
   35ba0:	00d20099 	.word	0x00d20099
   35ba4:	043f001e 	.word	0x043f001e
			conn->llcp_terminate.reason_final =
   35ba8:	233d      	movs	r3, #61	; 0x3d
   35baa:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   35bae:	682e      	ldr	r6, [r5, #0]
   35bb0:	e7cd      	b.n	35b4e <ull_conn_rx+0xb2>
	if (conn->common.txn_lock) {
   35bb2:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   35bb6:	079f      	lsls	r7, r3, #30
   35bb8:	d4c9      	bmi.n	35b4e <ull_conn_rx+0xb2>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   35bba:	4872      	ldr	r0, [pc, #456]	; (35d84 <ull_conn_rx+0x2e8>)
   35bbc:	f7fa fa28 	bl	30010 <mem_acquire>
	if (!tx) {
   35bc0:	2800      	cmp	r0, #0
   35bc2:	f000 854c 	beq.w	3665e <ull_conn_rx+0xbc2>
	conn->common.txn_lock = 1U;
   35bc6:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   35bca:	f043 0302 	orr.w	r3, r3, #2
   35bce:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   35bd2:	7903      	ldrb	r3, [r0, #4]
	pdu->llctrl.unknown_rsp.type = type;
   35bd4:	f880 9008 	strb.w	r9, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   35bd8:	f043 0303 	orr.w	r3, r3, #3
   35bdc:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   35bde:	2202      	movs	r2, #2
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   35be0:	2307      	movs	r3, #7
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   35be2:	7142      	strb	r2, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   35be4:	71c3      	strb	r3, [r0, #7]
	    conn->tx_head &&
   35be6:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
	if (
   35bea:	b1e3      	cbz	r3, 35c26 <ull_conn_rx+0x18a>
	    !conn->llcp_cu.pause_tx &&
   35bec:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
	    conn->tx_head &&
   35bf0:	06d5      	lsls	r5, r2, #27
   35bf2:	d418      	bmi.n	35c26 <ull_conn_rx+0x18a>
	    !conn->llcp_enc.pause_tx &&
   35bf4:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    !conn->llcp_cu.pause_tx &&
   35bf8:	0791      	lsls	r1, r2, #30
   35bfa:	d414      	bmi.n	35c26 <ull_conn_rx+0x18a>
	    !conn->llcp_phy.pause_tx &&
   35bfc:	f894 21c7 	ldrb.w	r2, [r4, #455]	; 0x1c7
   35c00:	07d2      	lsls	r2, r2, #31
   35c02:	d410      	bmi.n	35c26 <ull_conn_rx+0x18a>
		if (conn->tx_head == conn->tx_data) {
   35c04:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   35c08:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (conn->tx_head == conn->tx_data) {
   35c0c:	4293      	cmp	r3, r2
   35c0e:	f000 8556 	beq.w	366be <ull_conn_rx+0xc22>
		} else if (!conn->tx_ctrl) {
   35c12:	b969      	cbnz	r1, 35c30 <ull_conn_rx+0x194>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   35c14:	791a      	ldrb	r2, [r3, #4]
   35c16:	f002 0203 	and.w	r2, r2, #3
   35c1a:	2a03      	cmp	r2, #3
   35c1c:	f001 80ea 	beq.w	36df4 <ull_conn_rx+0x1358>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   35c20:	e9c4 3374 	strd	r3, r3, [r4, #464]	; 0x1d0
   35c24:	e004      	b.n	35c30 <ull_conn_rx+0x194>
		if (!conn->tx_ctrl) {
   35c26:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   35c2a:	2a00      	cmp	r2, #0
   35c2c:	f000 84d0 	beq.w	365d0 <ull_conn_rx+0xb34>
	tx->next = conn->tx_ctrl_last->next;
   35c30:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   35c34:	681b      	ldr	r3, [r3, #0]
   35c36:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   35c38:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   35c3c:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   35c3e:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
	if (!tx->next) {
   35c42:	6803      	ldr	r3, [r0, #0]
   35c44:	2b00      	cmp	r3, #0
   35c46:	d182      	bne.n	35b4e <ull_conn_rx+0xb2>
		conn->tx_data_last = tx;
   35c48:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   35c4c:	e77f      	b.n	35b4e <ull_conn_rx+0xb2>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   35c4e:	2201      	movs	r2, #1
   35c50:	711a      	strb	r2, [r3, #4]
		return 0;
   35c52:	2000      	movs	r0, #0
}
   35c54:	4770      	bx	lr
   35c56:	f1a9 0802 	sub.w	r8, r9, #2
   35c5a:	fa5f fe88 	uxtb.w	lr, r8
   35c5e:	f1be 0f09 	cmp.w	lr, #9
   35c62:	f63f af4c 	bhi.w	35afe <ull_conn_rx+0x62>
   35c66:	f240 2005 	movw	r0, #517	; 0x205
   35c6a:	fa20 f00e 	lsr.w	r0, r0, lr
   35c6e:	07c0      	lsls	r0, r0, #31
   35c70:	f57f af48 	bpl.w	35b04 <ull_conn_rx+0x68>
	switch (opcode) {
   35c74:	f1b8 0f09 	cmp.w	r8, #9
   35c78:	d89b      	bhi.n	35bb2 <ull_conn_rx+0x116>
   35c7a:	a001      	add	r0, pc, #4	; (adr r0, 35c80 <ull_conn_rx+0x1e4>)
   35c7c:	f850 f028 	ldr.w	pc, [r0, r8, lsl #2]
   35c80:	00035f31 	.word	0x00035f31
   35c84:	000360a5 	.word	0x000360a5
   35c88:	00035bb3 	.word	0x00035bb3
   35c8c:	00035bb3 	.word	0x00035bb3
   35c90:	00035f47 	.word	0x00035f47
   35c94:	00035ec1 	.word	0x00035ec1
   35c98:	0003622b 	.word	0x0003622b
   35c9c:	00035d89 	.word	0x00035d89
   35ca0:	0003613d 	.word	0x0003613d
   35ca4:	00036467 	.word	0x00036467
		break;

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_RSP:
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if (PDU_DATA_LLCTRL_LEN(length_req) != pdu_rx->len) {
   35ca8:	7f73      	ldrb	r3, [r6, #29]
   35caa:	2b09      	cmp	r3, #9
   35cac:	d181      	bne.n	35bb2 <ull_conn_rx+0x116>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   35cae:	f1b9 0f14 	cmp.w	r9, #20
   35cb2:	f000 8513 	beq.w	366dc <ull_conn_rx+0xc40>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   35cb6:	f894 21b4 	ldrb.w	r2, [r4, #436]	; 0x1b4
	if (/* Local idle, and Peer request then complete the Peer procedure
   35cba:	f894 31b5 	ldrb.w	r3, [r4, #437]	; 0x1b5
	eff_rx_octets = conn->lll.max_rx_octets;
   35cbe:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
	eff_tx_octets = conn->lll.max_tx_octets;
   35cc2:	f8b4 a058 	ldrh.w	sl, [r4, #88]	; 0x58
	eff_rx_time = conn->lll.max_rx_time;
   35cc6:	f8b4 b05e 	ldrh.w	fp, [r4, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
   35cca:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
	if (/* Local idle, and Peer request then complete the Peer procedure
   35cce:	4293      	cmp	r3, r2
	eff_rx_octets = conn->lll.max_rx_octets;
   35cd0:	468e      	mov	lr, r1
	if (/* Local idle, and Peer request then complete the Peer procedure
   35cd2:	f001 808c 	beq.w	36dee <ull_conn_rx+0x1352>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   35cd6:	f894 11b6 	ldrb.w	r1, [r4, #438]	; 0x1b6
	struct node_tx *tx = NULL;
   35cda:	2300      	movs	r3, #0
	       tx) ||
   35cdc:	f001 0107 	and.w	r1, r1, #7
   35ce0:	2902      	cmp	r1, #2
   35ce2:	f000 851c 	beq.w	3671e <ull_conn_rx+0xc82>
   35ce6:	f896 901f 	ldrb.w	r9, [r6, #31]
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
   35cea:	f1b9 0f15 	cmp.w	r9, #21
   35cee:	f43f af30 	beq.w	35b52 <ull_conn_rx+0xb6>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   35cf2:	4618      	mov	r0, r3
   35cf4:	4923      	ldr	r1, [pc, #140]	; (35d84 <ull_conn_rx+0x2e8>)
   35cf6:	f7fa f9a7 	bl	30048 <mem_release>
			if (conn->llcp_length.state ==
   35cfa:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
			conn->common.txn_lock = 0U;
   35cfe:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
			if (conn->llcp_length.state ==
   35d02:	f003 0307 	and.w	r3, r3, #7
			conn->common.txn_lock = 0U;
   35d06:	f36f 0241 	bfc	r2, #1, #1
			if (conn->llcp_length.state ==
   35d0a:	2b04      	cmp	r3, #4
			conn->common.txn_lock = 0U;
   35d0c:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
			if (conn->llcp_length.state ==
   35d10:	f47f af1f 	bne.w	35b52 <ull_conn_rx+0xb6>
				return -EBUSY;
   35d14:	f06f 000f 	mvn.w	r0, #15
   35d18:	e71c      	b.n	35b54 <ull_conn_rx+0xb8>
		break;
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

#if defined(CONFIG_BT_CTLR_PHY)
	case PDU_DATA_LLCTRL_TYPE_PHY_REQ:
		if (PDU_DATA_LLCTRL_LEN(phy_req) != pdu_rx->len) {
   35d1a:	7f73      	ldrb	r3, [r6, #29]
   35d1c:	2b03      	cmp	r3, #3
   35d1e:	f47f af48 	bne.w	35bb2 <ull_conn_rx+0x116>
			goto ull_conn_rx_unknown_rsp_send;
		}

		if (!conn->lll.role) {
   35d22:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   35d26:	2b00      	cmp	r3, #0
   35d28:	f2c0 8588 	blt.w	3683c <ull_conn_rx+0xda0>
			if ((conn->llcp_phy.ack !=
   35d2c:	f894 11c5 	ldrb.w	r1, [r4, #453]	; 0x1c5
			     conn->llcp_phy.req) &&
   35d30:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
			if ((conn->llcp_phy.ack !=
   35d34:	4281      	cmp	r1, r0
   35d36:	d007      	beq.n	35d48 <ull_conn_rx+0x2ac>
			    ((conn->llcp_phy.state ==
			      LLCP_PHY_STATE_ACK_WAIT) ||
			     (conn->llcp_phy.state ==
			      LLCP_PHY_STATE_RSP_WAIT) ||
   35d38:	f894 21c6 	ldrb.w	r2, [r4, #454]	; 0x1c6
   35d3c:	f002 0203 	and.w	r2, r2, #3
			     conn->llcp_phy.req) &&
   35d40:	3a01      	subs	r2, #1
   35d42:	2a02      	cmp	r2, #2
   35d44:	f240 874a 	bls.w	36bdc <ull_conn_rx+0x1140>
				nack = reject_ext_ind_send(conn, *rx,
					PDU_DATA_LLCTRL_TYPE_PHY_REQ,
					BT_HCI_ERR_LL_PROC_COLLISION);
#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
#if defined(CONFIG_BT_CTLR_LE_ENC)
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   35d48:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   35d4c:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   35d50:	1a9b      	subs	r3, r3, r2
   35d52:	f003 0303 	and.w	r3, r3, #3
   35d56:	2b02      	cmp	r3, #2
   35d58:	f000 86e1 	beq.w	36b1e <ull_conn_rx+0x1082>
				      0x03) == 0x02) &&
				    (conn->llcp_type !=
				     LLCP_ENCRYPTION)) ||
   35d5c:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   35d60:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   35d64:	429a      	cmp	r2, r3
   35d66:	f000 86eb 	beq.w	36b40 <ull_conn_rx+0x10a4>
			} else if (((conn->llcp_req - conn->llcp_ack) &
				    0x03) == 0x02) {
#endif /* !CONFIG_BT_CTLR_LE_ENC */
#endif /* !CONFIG_BT_CTLR_CONN_PARAM_REQ */
				/* Different procedure collision */
				nack = reject_ext_ind_send(conn, *rx,
   35d6a:	232a      	movs	r3, #42	; 0x2a
   35d6c:	2216      	movs	r2, #22
   35d6e:	4631      	mov	r1, r6
   35d70:	4620      	mov	r0, r4
}
   35d72:	b005      	add	sp, #20
   35d74:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(conn, *rx,
   35d78:	f7fe bfb8 	b.w	34cec <reject_ext_ind_send>
   35d7c:	20001618 	.word	0x20001618
   35d80:	00022060 	.word	0x00022060
   35d84:	20002820 	.word	0x20002820
		if ((!IS_ENABLED(CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG) &&
   35d88:	7f73      	ldrb	r3, [r6, #29]
   35d8a:	2b09      	cmp	r3, #9
   35d8c:	f47f af11 	bne.w	35bb2 <ull_conn_rx+0x116>
   35d90:	6a32      	ldr	r2, [r6, #32]
	feat &= LL_FEAT_BIT_MASK;
   35d92:	49c0      	ldr	r1, [pc, #768]	; (36094 <ull_conn_rx+0x5f8>)
   35d94:	6a73      	ldr	r3, [r6, #36]	; 0x24
   35d96:	4311      	orrs	r1, r2
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   35d98:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
   35d9c:	400a      	ands	r2, r1
   35d9e:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
	feat &= LL_FEAT_BIT_MASK;
   35da2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   35da6:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
	feat &= LL_FEAT_BIT_MASK;
   35daa:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   35dae:	401a      	ands	r2, r3
   35db0:	f8c4 212c 	str.w	r2, [r4, #300]	; 0x12c
   35db4:	6a75      	ldr	r5, [r6, #36]	; 0x24
   35db6:	6a37      	ldr	r7, [r6, #32]
		feat_land_octet0(feat_get(&rsp->features[0]), ll_feat_get());
   35db8:	f7fc fe0e 	bl	329d8 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   35dbc:	f005 03ff 	and.w	r3, r5, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   35dc0:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_peer =
   35dc4:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
	conn->common.fex_valid = 1U;
   35dc8:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   35dcc:	f043 0301 	orr.w	r3, r3, #1
   35dd0:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	conn->llcp_feature.ack = conn->llcp_feature.req;
   35dd4:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
   35dd8:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
	feat &= LL_FEAT_BIT_MASK;
   35ddc:	4bad      	ldr	r3, [pc, #692]	; (36094 <ull_conn_rx+0x5f8>)
   35dde:	433b      	orrs	r3, r7
	feat_result = feat_to_keep & feat_octet0;
   35de0:	4003      	ands	r3, r0
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   35de2:	f027 02ff 	bic.w	r2, r7, #255	; 0xff
	feat_result &= 0xFF;
   35de6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   35dea:	4313      	orrs	r3, r2
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   35dec:	f043 6307 	orr.w	r3, r3, #141557760	; 0x8700000
	feat_result &= 0xFF;
   35df0:	2200      	movs	r2, #0
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   35df2:	f443 2303 	orr.w	r3, r3, #536576	; 0x83000
	conn->procedure_expire = 0U;
   35df6:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	conn->llcp_feature.features_peer =
   35dfa:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
}
   35dfe:	e6a8      	b.n	35b52 <ull_conn_rx+0xb6>
		if (PDU_DATA_LLCTRL_LEN(ping_rsp) != pdu_rx->len) {
   35e00:	7f73      	ldrb	r3, [r6, #29]
   35e02:	2b01      	cmp	r3, #1
   35e04:	f47f aed5 	bne.w	35bb2 <ull_conn_rx+0x116>
		conn->procedure_expire = 0U;
   35e08:	2200      	movs	r2, #0
   35e0a:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   35e0e:	682a      	ldr	r2, [r5, #0]
   35e10:	7113      	strb	r3, [r2, #4]
		break;
   35e12:	e69e      	b.n	35b52 <ull_conn_rx+0xb6>
		if (PDU_DATA_LLCTRL_LEN(ping_req) != pdu_rx->len) {
   35e14:	7f75      	ldrb	r5, [r6, #29]
   35e16:	2d01      	cmp	r5, #1
   35e18:	f47f aecb 	bne.w	35bb2 <ull_conn_rx+0x116>
	if (conn->common.txn_lock) {
   35e1c:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   35e20:	0798      	lsls	r0, r3, #30
   35e22:	d416      	bmi.n	35e52 <ull_conn_rx+0x3b6>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   35e24:	489c      	ldr	r0, [pc, #624]	; (36098 <ull_conn_rx+0x5fc>)
   35e26:	f7fa f8f3 	bl	30010 <mem_acquire>
	if (!tx) {
   35e2a:	4601      	mov	r1, r0
   35e2c:	2800      	cmp	r0, #0
   35e2e:	f000 8416 	beq.w	3665e <ull_conn_rx+0xbc2>
	conn->common.txn_lock = 1U;
   35e32:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   35e36:	f043 0302 	orr.w	r3, r3, #2
   35e3a:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   35e3e:	7903      	ldrb	r3, [r0, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   35e40:	7145      	strb	r5, [r0, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   35e42:	f043 0303 	orr.w	r3, r3, #3
   35e46:	7103      	strb	r3, [r0, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   35e48:	2313      	movs	r3, #19
   35e4a:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   35e4c:	4620      	mov	r0, r4
   35e4e:	f7fe fd9f 	bl	34990 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   35e52:	7135      	strb	r5, [r6, #4]
	return 0;
   35e54:	e67d      	b.n	35b52 <ull_conn_rx+0xb6>
		if (PDU_DATA_LLCTRL_LEN(reject_ext_ind) != pdu_rx->len) {
   35e56:	7f73      	ldrb	r3, [r6, #29]
   35e58:	2b03      	cmp	r3, #3
   35e5a:	f47f aeaa 	bne.w	35bb2 <ull_conn_rx+0x116>
	switch (rej_ext_ind->reject_opcode) {
   35e5e:	f896 3020 	ldrb.w	r3, [r6, #32]
   35e62:	3b03      	subs	r3, #3
   35e64:	2b13      	cmp	r3, #19
   35e66:	f63f ae72 	bhi.w	35b4e <ull_conn_rx+0xb2>
   35e6a:	a201      	add	r2, pc, #4	; (adr r2, 35e70 <ull_conn_rx+0x3d4>)
   35e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   35e70:	00036553 	.word	0x00036553
   35e74:	00035b4f 	.word	0x00035b4f
   35e78:	00035b4f 	.word	0x00035b4f
   35e7c:	00035b4f 	.word	0x00035b4f
   35e80:	00035b4f 	.word	0x00035b4f
   35e84:	00035b4f 	.word	0x00035b4f
   35e88:	00035b4f 	.word	0x00035b4f
   35e8c:	00035b4f 	.word	0x00035b4f
   35e90:	00035b4f 	.word	0x00035b4f
   35e94:	00035b4f 	.word	0x00035b4f
   35e98:	00035b4f 	.word	0x00035b4f
   35e9c:	00035b4f 	.word	0x00035b4f
   35ea0:	000364e5 	.word	0x000364e5
   35ea4:	00035b4f 	.word	0x00035b4f
   35ea8:	00035b4f 	.word	0x00035b4f
   35eac:	00035b4f 	.word	0x00035b4f
   35eb0:	00035b4f 	.word	0x00035b4f
   35eb4:	000364a9 	.word	0x000364a9
   35eb8:	00035b4f 	.word	0x00035b4f
   35ebc:	00036591 	.word	0x00036591
		if (PDU_DATA_LLCTRL_LEN(unknown_rsp) != pdu_rx->len) {
   35ec0:	7f73      	ldrb	r3, [r6, #29]
   35ec2:	2b02      	cmp	r3, #2
   35ec4:	f47f ae75 	bne.w	35bb2 <ull_conn_rx+0x116>
			    conn->llcp_conn_param.req) &&
   35ec8:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
		} else if ((conn->llcp_conn_param.ack !=
   35ecc:	f894 1185 	ldrb.w	r1, [r4, #389]	; 0x185
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   35ed0:	f896 3020 	ldrb.w	r3, [r6, #32]
		} else if ((conn->llcp_conn_param.ack !=
   35ed4:	4291      	cmp	r1, r2
   35ed6:	d002      	beq.n	35ede <ull_conn_rx+0x442>
			    conn->llcp_conn_param.req) &&
   35ed8:	2b0f      	cmp	r3, #15
   35eda:	f000 853f 	beq.w	3695c <ull_conn_rx+0xec0>
		} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
   35ede:	f894 21b4 	ldrb.w	r2, [r4, #436]	; 0x1b4
   35ee2:	f894 11b5 	ldrb.w	r1, [r4, #437]	; 0x1b5
   35ee6:	4291      	cmp	r1, r2
   35ee8:	d002      	beq.n	35ef0 <ull_conn_rx+0x454>
   35eea:	2b14      	cmp	r3, #20
   35eec:	f000 861e 	beq.w	36b2c <ull_conn_rx+0x1090>
		} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
   35ef0:	f894 21c4 	ldrb.w	r2, [r4, #452]	; 0x1c4
   35ef4:	f894 11c5 	ldrb.w	r1, [r4, #453]	; 0x1c5
   35ef8:	4291      	cmp	r1, r2
   35efa:	d002      	beq.n	35f02 <ull_conn_rx+0x466>
   35efc:	2b16      	cmp	r3, #22
   35efe:	f000 8674 	beq.w	36bea <ull_conn_rx+0x114e>
			switch (llctrl->unknown_rsp.type) {
   35f02:	2b12      	cmp	r3, #18
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   35f04:	bf04      	itt	eq
   35f06:	2301      	moveq	r3, #1
   35f08:	7133      	strbeq	r3, [r6, #4]
		conn->procedure_expire = 0U;
   35f0a:	2300      	movs	r3, #0
   35f0c:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
		break;
   35f10:	e61f      	b.n	35b52 <ull_conn_rx+0xb6>
	       (conn->lll.role &&
   35f12:	2800      	cmp	r0, #0
   35f14:	f000 8361 	beq.w	365da <ull_conn_rx+0xb3e>
   35f18:	f1b9 0f03 	cmp.w	r9, #3
   35f1c:	f200 8390 	bhi.w	36640 <ull_conn_rx+0xba4>
   35f20:	f1b9 0f01 	cmp.w	r9, #1
   35f24:	f67f ae1b 	bls.w	35b5e <ull_conn_rx+0xc2>
	switch (opcode) {
   35f28:	f1b9 0f03 	cmp.w	r9, #3
   35f2c:	f000 80ba 	beq.w	360a4 <ull_conn_rx+0x608>
		if (PDU_DATA_LLCTRL_LEN(terminate_ind) != pdu_rx->len) {
   35f30:	7f73      	ldrb	r3, [r6, #29]
   35f32:	2b02      	cmp	r3, #2
   35f34:	f47f ae3d 	bne.w	35bb2 <ull_conn_rx+0x116>
		pdu->llctrl.terminate_ind.error_code;
   35f38:	f896 2020 	ldrb.w	r2, [r6, #32]
	conn->llcp_terminate.reason_final =
   35f3c:	f884 2143 	strb.w	r2, [r4, #323]	; 0x143
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   35f40:	2301      	movs	r3, #1
   35f42:	7133      	strb	r3, [r6, #4]
}
   35f44:	e605      	b.n	35b52 <ull_conn_rx+0xb6>
		if ((conn->llcp_req == conn->llcp_ack) ||
   35f46:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   35f4a:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   35f4e:	4290      	cmp	r0, r2
   35f50:	f43f ae2f 	beq.w	35bb2 <ull_conn_rx+0x116>
   35f54:	f894 00e6 	ldrb.w	r0, [r4, #230]	; 0xe6
   35f58:	2803      	cmp	r0, #3
   35f5a:	f47f ae2a 	bne.w	35bb2 <ull_conn_rx+0x116>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
   35f5e:	7f70      	ldrb	r0, [r6, #29]
   35f60:	2801      	cmp	r0, #1
   35f62:	f47f ae26 	bne.w	35bb2 <ull_conn_rx+0x116>
		if (conn->lll.role) {
   35f66:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
   35f6a:	2900      	cmp	r1, #0
   35f6c:	f2c0 862e 	blt.w	36bcc <ull_conn_rx+0x1130>
			conn->llcp_enc.pause_rx = 0U;
   35f70:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
			conn->llcp_ack = conn->llcp_req;
   35f74:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			conn->procedure_expire = 0U;
   35f78:	2100      	movs	r1, #0
			conn->llcp_enc.pause_rx = 0U;
   35f7a:	f023 0303 	bic.w	r3, r3, #3
   35f7e:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
			conn->procedure_expire = 0U;
   35f82:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
		if (conn->llcp_enc.refresh) {
   35f86:	075a      	lsls	r2, r3, #29
   35f88:	f57f ade3 	bpl.w	35b52 <ull_conn_rx+0xb6>
			conn->llcp_enc.refresh = 0U;
   35f8c:	f36f 0382 	bfc	r3, #2, #1
   35f90:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   35f94:	682b      	ldr	r3, [r5, #0]
   35f96:	221a      	movs	r2, #26
   35f98:	711a      	strb	r2, [r3, #4]
   35f9a:	e5da      	b.n	35b52 <ull_conn_rx+0xb6>
		if (PDU_DATA_LLCTRL_LEN(reject_ind) != pdu_rx->len) {
   35f9c:	7f73      	ldrb	r3, [r6, #29]
   35f9e:	2b02      	cmp	r3, #2
   35fa0:	f47f ae07 	bne.w	35bb2 <ull_conn_rx+0x116>
	} else if ((conn->llcp_ack != conn->llcp_req) &&
   35fa4:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   35fa8:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   35fac:	429a      	cmp	r2, r3
   35fae:	d004      	beq.n	35fba <ull_conn_rx+0x51e>
   35fb0:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
   35fb4:	2a03      	cmp	r2, #3
   35fb6:	f000 863f 	beq.w	36c38 <ull_conn_rx+0x119c>
	} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   35fba:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
   35fbe:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
   35fc2:	429a      	cmp	r2, r3
   35fc4:	f000 8400 	beq.w	367c8 <ull_conn_rx+0xd2c>
		rej_ext_ind->error_code = rej_ind->error_code;
   35fc8:	f896 3020 	ldrb.w	r3, [r6, #32]
   35fcc:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   35fd0:	2b23      	cmp	r3, #35	; 0x23
   35fd2:	d014      	beq.n	35ffe <ull_conn_rx+0x562>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   35fd4:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.ack = conn->llcp_phy.req;
   35fd8:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
   35fdc:	f884 11c5 	strb.w	r1, [r4, #453]	; 0x1c5
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   35fe0:	f3c3 0202 	ubfx	r2, r3, #0, #3
   35fe4:	f362 1306 	bfi	r3, r2, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   35fe8:	f894 21c7 	ldrb.w	r2, [r4, #455]	; 0x1c7
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   35fec:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   35ff0:	f36f 0200 	bfc	r2, #0, #1
		conn->procedure_expire = 0U;
   35ff4:	2300      	movs	r3, #0
		conn->llcp_phy.pause_tx = 0U;
   35ff6:	f884 21c7 	strb.w	r2, [r4, #455]	; 0x1c7
		conn->procedure_expire = 0U;
   35ffa:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (!conn->llcp_phy.cmd) {
   35ffe:	f894 31c7 	ldrb.w	r3, [r4, #455]	; 0x1c7
   36002:	075f      	lsls	r7, r3, #29
   36004:	f57f ada3 	bpl.w	35b4e <ull_conn_rx+0xb2>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   36008:	221d      	movs	r2, #29
	p->status = rej_ext_ind->error_code;
   3600a:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   3600e:	7132      	strb	r2, [r6, #4]
		p->status = 0U;
   36010:	7733      	strb	r3, [r6, #28]
		p->tx = conn->lll.phy_tx;
   36012:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   36016:	f3c3 0302 	ubfx	r3, r3, #0, #3
   3601a:	7773      	strb	r3, [r6, #29]
		p->rx = conn->lll.phy_rx;
   3601c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   36020:	f3c3 0302 	ubfx	r3, r3, #0, #3
   36024:	77b3      	strb	r3, [r6, #30]
		    PDU_DATA_LLCTRL_LEN(phy_upd_ind) != pdu_rx->len) {
			goto ull_conn_rx_unknown_rsp_send;
		}

		err = phy_upd_ind_recv(conn, link, rx, pdu_rx);
		if (err) {
   36026:	e594      	b.n	35b52 <ull_conn_rx+0xb6>
		if (PDU_DATA_LLCTRL_LEN(conn_param_req) != pdu_rx->len) {
   36028:	7f72      	ldrb	r2, [r6, #29]
   3602a:	2a18      	cmp	r2, #24
   3602c:	f47f adc1 	bne.w	35bb2 <ull_conn_rx+0x116>
	return conn_upd_curr && (conn_upd_curr != conn);
   36030:	481a      	ldr	r0, [pc, #104]	; (3609c <ull_conn_rx+0x600>)
   36032:	6802      	ldr	r2, [r0, #0]
   36034:	2a00      	cmp	r2, #0
   36036:	f000 8316 	beq.w	36666 <ull_conn_rx+0xbca>
   3603a:	4294      	cmp	r4, r2
   3603c:	f000 8313 	beq.w	36666 <ull_conn_rx+0xbca>
			nack = reject_ext_ind_send(conn, *rx,
   36040:	2320      	movs	r3, #32
   36042:	220f      	movs	r2, #15
   36044:	e693      	b.n	35d6e <ull_conn_rx+0x2d2>
		if (PDU_DATA_LLCTRL_LEN(version_ind) != pdu_rx->len) {
   36046:	7f75      	ldrb	r5, [r6, #29]
   36048:	2d06      	cmp	r5, #6
   3604a:	f47f adb2 	bne.w	35bb2 <ull_conn_rx+0x116>
	if (!conn->llcp_version.tx) {
   3604e:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   36052:	07da      	lsls	r2, r3, #31
   36054:	f140 8536 	bpl.w	36ac4 <ull_conn_rx+0x1028>
	} else if (!conn->llcp_version.rx) {
   36058:	f013 0302 	ands.w	r3, r3, #2
   3605c:	f47f ad77 	bne.w	35b4e <ull_conn_rx+0xb2>
		conn->llcp_version.ack = conn->llcp_version.req;
   36060:	f894 2138 	ldrb.w	r2, [r4, #312]	; 0x138
   36064:	f884 2139 	strb.w	r2, [r4, #313]	; 0x139
		conn->procedure_expire = 0U;
   36068:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp_version.version_number = v->version_number;
   3606c:	f896 3020 	ldrb.w	r3, [r6, #32]
   36070:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   36074:	f8b6 2021 	ldrh.w	r2, [r6, #33]	; 0x21
	conn->llcp_version.rx = 1U;
   36078:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   3607c:	f8a4 213c 	strh.w	r2, [r4, #316]	; 0x13c
		sys_le16_to_cpu(v->sub_version_number);
   36080:	f8b6 2023 	ldrh.w	r2, [r6, #35]	; 0x23
	conn->llcp_version.sub_version_number =
   36084:	f8a4 213e 	strh.w	r2, [r4, #318]	; 0x13e
	conn->llcp_version.rx = 1U;
   36088:	f043 0302 	orr.w	r3, r3, #2
   3608c:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
	return 0;
   36090:	e55f      	b.n	35b52 <ull_conn_rx+0xb6>
   36092:	bf00      	nop
   36094:	087830d0 	.word	0x087830d0
   36098:	20002820 	.word	0x20002820
   3609c:	20002968 	.word	0x20002968
   360a0:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
		if (!conn->lll.role ||
   360a4:	2a00      	cmp	r2, #0
   360a6:	f6bf ad84 	bge.w	35bb2 <ull_conn_rx+0x116>
   360aa:	7f73      	ldrb	r3, [r6, #29]
   360ac:	2b17      	cmp	r3, #23
   360ae:	f47f ad80 	bne.w	35bb2 <ull_conn_rx+0x116>
		if (unlikely(((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   360b2:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   360b6:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   360ba:	1a9b      	subs	r3, r3, r2
   360bc:	f003 0303 	and.w	r3, r3, #3
   360c0:	2b02      	cmp	r3, #2
   360c2:	f000 86fb 	beq.w	36ebc <ull_conn_rx+0x1420>
		memcpy(&conn->llcp_enc.rand[0],
   360c6:	2208      	movs	r2, #8
   360c8:	f106 0120 	add.w	r1, r6, #32
   360cc:	f204 1069 	addw	r0, r4, #361	; 0x169
   360d0:	f00e f922 	bl	44318 <memcpy>
		conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
   360d4:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
   360d8:	f884 3167 	strb.w	r3, [r4, #359]	; 0x167
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   360dc:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   360e0:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   360e4:	f884 3168 	strb.w	r3, [r4, #360]	; 0x168
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   360e8:	2301      	movs	r3, #1
   360ea:	f363 0201 	bfi	r2, r3, #0, #2
   360ee:	f884 20f4 	strb.w	r2, [r4, #244]	; 0xf4
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   360f2:	682a      	ldr	r2, [r5, #0]
   360f4:	7113      	strb	r3, [r2, #4]
		conn->llcp_ack -= 2U;
   360f6:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
		conn->llcp_type = LLCP_ENCRYPTION;
   360fa:	2103      	movs	r1, #3
		conn->llcp_ack -= 2U;
   360fc:	3b02      	subs	r3, #2
   360fe:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		memcpy(&conn->llcp.encryption.skd[0],
   36102:	2208      	movs	r2, #8
		conn->llcp_type = LLCP_ENCRYPTION;
   36104:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
		memcpy(&conn->llcp.encryption.skd[0],
   36108:	f104 00f6 	add.w	r0, r4, #246	; 0xf6
   3610c:	f106 012a 	add.w	r1, r6, #42	; 0x2a
   36110:	f00e f902 	bl	44318 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
   36114:	2204      	movs	r2, #4
   36116:	f106 0132 	add.w	r1, r6, #50	; 0x32
   3611a:	f104 0094 	add.w	r0, r4, #148	; 0x94
   3611e:	f00e f8fb 	bl	44318 <memcpy>
		conn->llcp_enc.pause_rx = 1U;
   36122:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
		conn->procedure_expire = conn->procedure_reload;
   36126:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
   3612a:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		conn->llcp_enc.pause_rx = 1U;
   3612e:	f043 0301 	orr.w	r3, r3, #1
   36132:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
		break;
   36136:	e50c      	b.n	35b52 <ull_conn_rx+0xb6>
   36138:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
		if (!conn->lll.role ||
   3613c:	2a00      	cmp	r2, #0
   3613e:	f6bf ad38 	bge.w	35bb2 <ull_conn_rx+0x116>
   36142:	7f75      	ldrb	r5, [r6, #29]
   36144:	2d01      	cmp	r5, #1
   36146:	f47f ad34 	bne.w	35bb2 <ull_conn_rx+0x116>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3614a:	48d4      	ldr	r0, [pc, #848]	; (3649c <ull_conn_rx+0xa00>)
   3614c:	f7f9 ff60 	bl	30010 <mem_acquire>
		if (!tx) {
   36150:	2800      	cmp	r0, #0
   36152:	f000 8284 	beq.w	3665e <ull_conn_rx+0xbc2>
	conn->llcp_enc.pause_rx = 1U;
   36156:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   3615a:	f023 0305 	bic.w	r3, r3, #5
   3615e:	f043 0305 	orr.w	r3, r3, #5
   36162:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
	conn->lll.enc_rx = 0U;
   36166:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   3616a:	f36f 03c3 	bfc	r3, #3, #1
   3616e:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   36172:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   36174:	7145      	strb	r5, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   36176:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   3617a:	220b      	movs	r2, #11
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3617c:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   3617e:	71c2      	strb	r2, [r0, #7]
	    conn->tx_head &&
   36180:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
	if (
   36184:	2b00      	cmp	r3, #0
   36186:	f43f ad4e 	beq.w	35c26 <ull_conn_rx+0x18a>
	    !conn->llcp_cu.pause_tx &&
   3618a:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
	    conn->tx_head &&
   3618e:	06d7      	lsls	r7, r2, #27
   36190:	f53f ad49 	bmi.w	35c26 <ull_conn_rx+0x18a>
	    !conn->llcp_enc.pause_tx &&
   36194:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    !conn->llcp_cu.pause_tx &&
   36198:	0795      	lsls	r5, r2, #30
   3619a:	f53f ad44 	bmi.w	35c26 <ull_conn_rx+0x18a>
	    !conn->llcp_phy.pause_tx &&
   3619e:	f894 21c7 	ldrb.w	r2, [r4, #455]	; 0x1c7
   361a2:	07d1      	lsls	r1, r2, #31
   361a4:	f53f ad3f 	bmi.w	35c26 <ull_conn_rx+0x18a>
		if (conn->tx_head == conn->tx_data) {
   361a8:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   361ac:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
		if (conn->tx_head == conn->tx_data) {
   361b0:	428b      	cmp	r3, r1
   361b2:	f000 8733 	beq.w	3701c <ull_conn_rx+0x1580>
		} else if (!conn->tx_ctrl) {
   361b6:	2a00      	cmp	r2, #0
   361b8:	f47f ad3a 	bne.w	35c30 <ull_conn_rx+0x194>
   361bc:	e52a      	b.n	35c14 <ull_conn_rx+0x178>
   361be:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
		if (!conn->lll.role ||
   361c2:	2a00      	cmp	r2, #0
   361c4:	f6bf acf5 	bge.w	35bb2 <ull_conn_rx+0x116>
   361c8:	7f73      	ldrb	r3, [r6, #29]
   361ca:	2b08      	cmp	r3, #8
   361cc:	f47f acf1 	bne.w	35bb2 <ull_conn_rx+0x116>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   361d0:	f8b6 5025 	ldrh.w	r5, [r6, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   361d4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   361d6:	1aeb      	subs	r3, r5, r3
   361d8:	0419      	lsls	r1, r3, #16
   361da:	f100 85bf 	bmi.w	36d5c <ull_conn_rx+0x12c0>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   361de:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   361e2:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   361e6:	1a9b      	subs	r3, r3, r2
   361e8:	f003 0303 	and.w	r3, r3, #3
   361ec:	2b02      	cmp	r3, #2
   361ee:	f000 85e2 	beq.w	36db6 <ull_conn_rx+0x131a>
	memcpy(&conn->llcp.chan_map.chm[0], &pdu->llctrl.chan_map_ind.chm[0],
   361f2:	2205      	movs	r2, #5
   361f4:	f106 0120 	add.w	r1, r6, #32
   361f8:	f104 00e9 	add.w	r0, r4, #233	; 0xe9
   361fc:	f00e f88c 	bl	44318 <memcpy>
	conn->llcp.chan_map.initiate = 0U;
   36200:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
	conn->llcp_ack -= 2U;
   36204:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
	conn->llcp.chan_map.instant = instant;
   36208:	f8a4 50ee 	strh.w	r5, [r4, #238]	; 0xee
	conn->llcp.chan_map.initiate = 0U;
   3620c:	f36f 0200 	bfc	r2, #0, #1
   36210:	f884 20e8 	strb.w	r2, [r4, #232]	; 0xe8
	conn->llcp_type = LLCP_CHAN_MAP;
   36214:	2102      	movs	r1, #2
	conn->llcp_ack -= 2U;
   36216:	3b02      	subs	r3, #2
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   36218:	2201      	movs	r2, #1
	conn->llcp_type = LLCP_CHAN_MAP;
   3621a:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
	conn->llcp_ack -= 2U;
   3621e:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   36222:	7132      	strb	r2, [r6, #4]
		if (err) {
   36224:	e495      	b.n	35b52 <ull_conn_rx+0xb6>
   36226:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
		if (!conn->lll.role ||
   3622a:	2a00      	cmp	r2, #0
   3622c:	f6bf acc1 	bge.w	35bb2 <ull_conn_rx+0x116>
   36230:	7f77      	ldrb	r7, [r6, #29]
   36232:	2f09      	cmp	r7, #9
   36234:	f47f acbd 	bne.w	35bb2 <ull_conn_rx+0x116>
	if (conn->common.txn_lock) {
   36238:	f894 80d8 	ldrb.w	r8, [r4, #216]	; 0xd8
   3623c:	f018 0802 	ands.w	r8, r8, #2
   36240:	f47f ac85 	bne.w	35b4e <ull_conn_rx+0xb2>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   36244:	4895      	ldr	r0, [pc, #596]	; (3649c <ull_conn_rx+0xa00>)
   36246:	f7f9 fee3 	bl	30010 <mem_acquire>
	if (!tx) {
   3624a:	4605      	mov	r5, r0
   3624c:	2800      	cmp	r0, #0
   3624e:	f000 8206 	beq.w	3665e <ull_conn_rx+0xbc2>
	conn->common.txn_lock = 1U;
   36252:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	feat &= LL_FEAT_BIT_MASK;
   36256:	4992      	ldr	r1, [pc, #584]	; (364a0 <ull_conn_rx+0xa04>)
	conn->common.txn_lock = 1U;
   36258:	f043 0302 	orr.w	r3, r3, #2
   3625c:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
   36260:	6a32      	ldr	r2, [r6, #32]
   36262:	6a73      	ldr	r3, [r6, #36]	; 0x24
	feat &= LL_FEAT_BIT_MASK;
   36264:	4311      	orrs	r1, r2
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   36266:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
   3626a:	400a      	ands	r2, r1
   3626c:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
	feat &= LL_FEAT_BIT_MASK;
   36270:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   36274:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
	feat &= LL_FEAT_BIT_MASK;
   36278:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   3627c:	401a      	ands	r2, r3
   3627e:	f8c4 212c 	str.w	r2, [r4, #300]	; 0x12c
   36282:	f8d6 9024 	ldr.w	r9, [r6, #36]	; 0x24
   36286:	f8d6 a020 	ldr.w	sl, [r6, #32]
		feat_land_octet0(feat_get(&req->features[0]), ll_feat_get());
   3628a:	f7fc fba5 	bl	329d8 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   3628e:	f009 03ff 	and.w	r3, r9, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   36292:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_peer =
   36296:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
	feat &= LL_FEAT_BIT_MASK;
   3629a:	4b81      	ldr	r3, [pc, #516]	; (364a0 <ull_conn_rx+0xa04>)
   3629c:	ea4a 0303 	orr.w	r3, sl, r3
	feat_result = feat_to_keep & feat_octet0;
   362a0:	4003      	ands	r3, r0
	feat_result &= 0xFF;
   362a2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   362a6:	f02a 0aff 	bic.w	sl, sl, #255	; 0xff
   362aa:	ea43 030a 	orr.w	r3, r3, sl
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   362ae:	f043 6307 	orr.w	r3, r3, #141557760	; 0x8700000
   362b2:	f443 2303 	orr.w	r3, r3, #536576	; 0x83000
	conn->llcp_feature.features_peer =
   362b6:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
	conn->common.fex_valid = 1U;
   362ba:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   362be:	f043 0301 	orr.w	r3, r3, #1
   362c2:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   362c6:	792b      	ldrb	r3, [r5, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   362c8:	716f      	strb	r7, [r5, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   362ca:	f043 0303 	orr.w	r3, r3, #3
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   362ce:	2208      	movs	r2, #8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   362d0:	712b      	strb	r3, [r5, #4]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   362d2:	18a8      	adds	r0, r5, r2
   362d4:	4641      	mov	r1, r8
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   362d6:	71ef      	strb	r7, [r5, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   362d8:	f00e f829 	bl	4432e <memset>
	feat = feat_land_octet0(ll_feat_get(),
   362dc:	f7fc fb7c 	bl	329d8 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   362e0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	dst[0] = val;
   362e4:	7329      	strb	r1, [r5, #12]
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   362e6:	f063 03ff 	orn	r3, r3, #255	; 0xff
   362ea:	4003      	ands	r3, r0
   362ec:	60ab      	str	r3, [r5, #8]
	dst[1] = val >> 8;
   362ee:	f8a5 800d 	strh.w	r8, [r5, #13]
   362f2:	f885 800f 	strb.w	r8, [r5, #15]
	ctrl_tx_sec_enqueue(conn, tx);
   362f6:	4629      	mov	r1, r5
   362f8:	4620      	mov	r0, r4
   362fa:	f7fe fb49 	bl	34990 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   362fe:	2301      	movs	r3, #1
   36300:	7133      	strb	r3, [r6, #4]
	return 0;
   36302:	e426      	b.n	35b52 <ull_conn_rx+0xb6>
   36304:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
		if (!conn->lll.role ||
   36308:	2a00      	cmp	r2, #0
   3630a:	f6bf ac52 	bge.w	35bb2 <ull_conn_rx+0x116>
   3630e:	7f73      	ldrb	r3, [r6, #29]
   36310:	2b0c      	cmp	r3, #12
   36312:	f47f ac4e 	bne.w	35bb2 <ull_conn_rx+0x116>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   36316:	f8b6 2029 	ldrh.w	r2, [r6, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   3631a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   3631c:	1ad3      	subs	r3, r2, r3
   3631e:	0418      	lsls	r0, r3, #16
   36320:	f100 851c 	bmi.w	36d5c <ull_conn_rx+0x12c0>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   36324:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   36328:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   3632c:	1a5b      	subs	r3, r3, r1
   3632e:	f003 0303 	and.w	r3, r3, #3
   36332:	2b02      	cmp	r3, #2
   36334:	f000 853f 	beq.w	36db6 <ull_conn_rx+0x131a>
	if (!conn_upd_curr) {
   36338:	4b5a      	ldr	r3, [pc, #360]	; (364a4 <ull_conn_rx+0xa08>)
   3633a:	6819      	ldr	r1, [r3, #0]
   3633c:	2900      	cmp	r1, #0
   3633e:	f000 853c 	beq.w	36dba <ull_conn_rx+0x131e>
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   36342:	f896 3020 	ldrb.w	r3, [r6, #32]
   36346:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) *
   3634a:	f8b6 3021 	ldrh.w	r3, [r6, #33]	; 0x21
   3634e:	f240 41e2 	movw	r1, #1250	; 0x4e2
   36352:	fb01 f303 	mul.w	r3, r1, r3
	conn->llcp_cu.win_offset_us =
   36356:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   3635a:	f8b6 3023 	ldrh.w	r3, [r6, #35]	; 0x23
	conn->llcp_cu.interval =
   3635e:	f8a4 3110 	strh.w	r3, [r4, #272]	; 0x110
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   36362:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
   36366:	f8b6 1025 	ldrh.w	r1, [r6, #37]	; 0x25
	conn->llcp_cu.latency =
   3636a:	f8a4 1112 	strh.w	r1, [r4, #274]	; 0x112
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   3636e:	f023 030f 	bic.w	r3, r3, #15
   36372:	f043 0308 	orr.w	r3, r3, #8
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   36376:	f8b6 1027 	ldrh.w	r1, [r6, #39]	; 0x27
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   3637a:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
	conn->llcp_cu.ack--;
   3637e:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
	conn->llcp.conn_upd.instant = instant;
   36382:	f8a4 20e8 	strh.w	r2, [r4, #232]	; 0xe8
	conn->llcp_cu.ack--;
   36386:	3b01      	subs	r3, #1
	link->mem = conn->llcp_rx;
   36388:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
	conn->llcp_cu.timeout =
   3638c:	f8a4 1114 	strh.w	r1, [r4, #276]	; 0x114
	conn->llcp_cu.ack--;
   36390:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
	link->mem = conn->llcp_rx;
   36394:	607a      	str	r2, [r7, #4]
	(*rx)->hdr.link = link;
   36396:	682b      	ldr	r3, [r5, #0]
   36398:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   3639a:	682b      	ldr	r3, [r5, #0]
   3639c:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	*rx = NULL;
   363a0:	2100      	movs	r1, #0
   363a2:	6029      	str	r1, [r5, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   363a4:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   363a8:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   363ac:	4293      	cmp	r3, r2
   363ae:	f43f adac 	beq.w	35f0a <ull_conn_rx+0x46e>
	    ((conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) ||
   363b2:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   363b6:	f003 030e 	and.w	r3, r3, #14
   363ba:	2b04      	cmp	r3, #4
   363bc:	f47f ada5 	bne.w	35f0a <ull_conn_rx+0x46e>
	if (conn->llcp_conn_param.cache.timeout) {
   363c0:	f8b4 0196 	ldrh.w	r0, [r4, #406]	; 0x196
   363c4:	2800      	cmp	r0, #0
   363c6:	f000 8617 	beq.w	36ff8 <ull_conn_rx+0x155c>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
   363ca:	f8b4 3186 	ldrh.w	r3, [r4, #390]	; 0x186
		conn->llcp_conn_param.interval_min =
   363ce:	f8d4 2190 	ldr.w	r2, [r4, #400]	; 0x190
   363d2:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
   363d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
		conn->llcp_conn_param.latency =
   363da:	f8b4 2194 	ldrh.w	r2, [r4, #404]	; 0x194
   363de:	f8a4 218c 	strh.w	r2, [r4, #396]	; 0x18c
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
   363e2:	f043 0310 	orr.w	r3, r3, #16
		conn->llcp_conn_param.timeout =
   363e6:	f8a4 018e 	strh.w	r0, [r4, #398]	; 0x18e
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
   363ea:	f8a4 3186 	strh.w	r3, [r4, #390]	; 0x186
		conn->llcp_conn_param.cache.timeout = 0U;
   363ee:	f8a4 1196 	strh.w	r1, [r4, #406]	; 0x196
		if (err) {
   363f2:	e58a      	b.n	35f0a <ull_conn_rx+0x46e>
   363f4:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
		if (!conn->lll.role ||
   363f8:	2a00      	cmp	r2, #0
   363fa:	f6bf abda 	bge.w	35bb2 <ull_conn_rx+0x116>
   363fe:	7f73      	ldrb	r3, [r6, #29]
   36400:	2b05      	cmp	r3, #5
   36402:	f47f abd6 	bne.w	35bb2 <ull_conn_rx+0x116>
	if (!((ind->c_to_p_phy | ind->p_to_c_phy) & 0x07)) {
   36406:	f896 2020 	ldrb.w	r2, [r6, #32]
   3640a:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   3640e:	4313      	orrs	r3, r2
   36410:	f013 0307 	ands.w	r3, r3, #7
   36414:	f040 8428 	bne.w	36c68 <ull_conn_rx+0x11cc>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   36418:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
   3641c:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
   36420:	428a      	cmp	r2, r1
   36422:	f43f ab94 	beq.w	35b4e <ull_conn_rx+0xb2>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   36426:	f894 21c6 	ldrb.w	r2, [r4, #454]	; 0x1c6
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   3642a:	f002 0203 	and.w	r2, r2, #3
   3642e:	2a02      	cmp	r2, #2
   36430:	f47f ab8d 	bne.w	35b4e <ull_conn_rx+0xb2>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   36434:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
		conn->llcp_phy.ack = conn->llcp_phy.req;
   36438:	f884 11c5 	strb.w	r1, [r4, #453]	; 0x1c5
		conn->llcp_phy.pause_tx = 0U;
   3643c:	f894 11c7 	ldrb.w	r1, [r4, #455]	; 0x1c7
		conn->procedure_expire = 0U;
   36440:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   36444:	f3c2 0002 	ubfx	r0, r2, #0, #3
		conn->llcp_phy.pause_tx = 0U;
   36448:	f363 0100 	bfi	r1, r3, #0, #1
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   3644c:	f360 1206 	bfi	r2, r0, #4, #3
   36450:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
		if (!conn->llcp_phy.cmd) {
   36454:	074a      	lsls	r2, r1, #29
		conn->llcp_phy.pause_tx = 0U;
   36456:	f884 11c7 	strb.w	r1, [r4, #455]	; 0x1c7
		if (!conn->llcp_phy.cmd) {
   3645a:	f57f ab83 	bpl.w	35b64 <ull_conn_rx+0xc8>
		(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   3645e:	682a      	ldr	r2, [r5, #0]
   36460:	211d      	movs	r1, #29
   36462:	7111      	strb	r1, [r2, #4]
   36464:	e5d4      	b.n	36010 <ull_conn_rx+0x574>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   36466:	7f75      	ldrb	r5, [r6, #29]
   36468:	2d01      	cmp	r5, #1
   3646a:	f47f aba2 	bne.w	35bb2 <ull_conn_rx+0x116>
	} else if (!conn->lll.role) {
   3646e:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   36472:	2b00      	cmp	r3, #0
   36474:	f2c0 80eb 	blt.w	3664e <ull_conn_rx+0xbb2>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   36478:	4808      	ldr	r0, [pc, #32]	; (3649c <ull_conn_rx+0xa00>)
   3647a:	f7f9 fdc9 	bl	30010 <mem_acquire>
		if (!tx) {
   3647e:	2800      	cmp	r0, #0
   36480:	f000 80ed 	beq.w	3665e <ull_conn_rx+0xbc2>
	conn->llcp_enc.pause_rx = 1U;
   36484:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   36488:	f043 0301 	orr.w	r3, r3, #1
   3648c:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
	conn->lll.enc_rx = 0U;
   36490:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   36494:	f023 0318 	bic.w	r3, r3, #24
   36498:	e669      	b.n	3616e <ull_conn_rx+0x6d2>
   3649a:	bf00      	nop
   3649c:	20002820 	.word	0x20002820
   364a0:	087830d0 	.word	0x087830d0
   364a4:	20002968 	.word	0x20002968
		if (conn->llcp_length.ack != conn->llcp_length.req) {
   364a8:	f894 31b4 	ldrb.w	r3, [r4, #436]	; 0x1b4
   364ac:	f894 21b5 	ldrb.w	r2, [r4, #437]	; 0x1b5
   364b0:	429a      	cmp	r2, r3
   364b2:	f43f ab4c 	beq.w	35b4e <ull_conn_rx+0xb2>
	conn->llcp_length.ack = conn->llcp_length.req;
   364b6:	f884 31b5 	strb.w	r3, [r4, #437]	; 0x1b5
	conn->procedure_expire = 0U;
   364ba:	2100      	movs	r1, #0
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   364bc:	2315      	movs	r3, #21
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   364be:	2209      	movs	r2, #9
	conn->procedure_expire = 0U;
   364c0:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   364c4:	7772      	strb	r2, [r6, #29]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   364c6:	77f3      	strb	r3, [r6, #31]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   364c8:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
   364cc:	8433      	strh	r3, [r6, #32]
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   364ce:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
   364d2:	84b3      	strh	r3, [r6, #36]	; 0x24
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   364d4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
   364d8:	8473      	strh	r3, [r6, #34]	; 0x22
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   364da:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
   364de:	84f3      	strh	r3, [r6, #38]	; 0x26
	if (err) {
   364e0:	f7ff bb37 	b.w	35b52 <ull_conn_rx+0xb6>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   364e4:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   364e8:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   364ec:	4293      	cmp	r3, r2
   364ee:	f43f ab2e 	beq.w	35b4e <ull_conn_rx+0xb2>
	if (!lll->role && (rej_ext_ind->error_code ==
   364f2:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
	return ((uint16_t)src[1] << 8) | src[0];
   364f6:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   364fa:	2900      	cmp	r1, #0
   364fc:	f2c0 85aa 	blt.w	37054 <ull_conn_rx+0x15b8>
   36500:	2b1a      	cmp	r3, #26
   36502:	f000 85bf 	beq.w	37084 <ull_conn_rx+0x15e8>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   36506:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   3650a:	f003 010f 	and.w	r1, r3, #15
   3650e:	2904      	cmp	r1, #4
   36510:	f000 85a8 	beq.w	37064 <ull_conn_rx+0x15c8>
	if (!conn->llcp_conn_param.cmd) {
   36514:	06dd      	lsls	r5, r3, #27
   36516:	f57f ab1a 	bpl.w	35b4e <ull_conn_rx+0xb2>
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   3651a:	2319      	movs	r3, #25
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   3651c:	f01c 0f01 	tst.w	ip, #1
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   36520:	7133      	strb	r3, [r6, #4]
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   36522:	f040 8455 	bne.w	36dd0 <ull_conn_rx+0x1334>
	cu->status = rej_ext_ind->error_code;
   36526:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   3652a:	7733      	strb	r3, [r6, #28]
	cu->interval = lll->interval;
   3652c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   3652e:	83f3      	strh	r3, [r6, #30]
	cu->latency = lll->latency;
   36530:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   36532:	8433      	strh	r3, [r6, #32]
	cu->timeout = conn->supervision_reload *
   36534:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
		      lll->interval * 125U / 1000;
   36538:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
   3653a:	227d      	movs	r2, #125	; 0x7d
	cu->timeout = conn->supervision_reload *
   3653c:	fb01 f303 	mul.w	r3, r1, r3
		      lll->interval * 125U / 1000;
   36540:	fb02 f303 	mul.w	r3, r2, r3
   36544:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   36548:	fbb3 f3f2 	udiv	r3, r3, r2
	cu->timeout = conn->supervision_reload *
   3654c:	8473      	strh	r3, [r6, #34]	; 0x22
	if (err) {
   3654e:	f7ff bb00 	b.w	35b52 <ull_conn_rx+0xb6>
		if ((conn->llcp_ack != conn->llcp_req) &&
   36552:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   36556:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   3655a:	4293      	cmp	r3, r2
   3655c:	f43f aaf7 	beq.w	35b4e <ull_conn_rx+0xb2>
   36560:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   36564:	2b03      	cmp	r3, #3
   36566:	f47f aaf2 	bne.w	35b4e <ull_conn_rx+0xb2>
	conn->llcp_enc.pause_rx = 0U;
   3656a:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	conn->llcp_ack = conn->llcp_req;
   3656e:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
	conn->llcp_enc.pause_rx = 0U;
   36572:	f023 0303 	bic.w	r3, r3, #3
	conn->procedure_expire = 0U;
   36576:	2100      	movs	r1, #0
	conn->llcp_enc.pause_rx = 0U;
   36578:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
	conn->procedure_expire = 0U;
   3657c:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
   36580:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   36584:	f886 3020 	strb.w	r3, [r6, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   36588:	220d      	movs	r2, #13
   3658a:	77f2      	strb	r2, [r6, #31]
	if (err) {
   3658c:	f7ff bae1 	b.w	35b52 <ull_conn_rx+0xb6>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   36590:	f894 21c4 	ldrb.w	r2, [r4, #452]	; 0x1c4
   36594:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
   36598:	4293      	cmp	r3, r2
   3659a:	f43f aad8 	beq.w	35b4e <ull_conn_rx+0xb2>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   3659e:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   365a2:	2b23      	cmp	r3, #35	; 0x23
   365a4:	f43f ad2b 	beq.w	35ffe <ull_conn_rx+0x562>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   365a8:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.ack = conn->llcp_phy.req;
   365ac:	f884 21c5 	strb.w	r2, [r4, #453]	; 0x1c5
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   365b0:	f3c3 0202 	ubfx	r2, r3, #0, #3
   365b4:	f362 1306 	bfi	r3, r2, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   365b8:	f894 21c7 	ldrb.w	r2, [r4, #455]	; 0x1c7
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   365bc:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		conn->procedure_expire = 0U;
   365c0:	2100      	movs	r1, #0
		conn->llcp_phy.pause_tx = 0U;
   365c2:	f36f 0200 	bfc	r2, #0, #1
   365c6:	f884 21c7 	strb.w	r2, [r4, #455]	; 0x1c7
		conn->procedure_expire = 0U;
   365ca:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
   365ce:	e516      	b.n	35ffe <ull_conn_rx+0x562>
			tx->next = conn->tx_head;
   365d0:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   365d2:	e9c4 0073 	strd	r0, r0, [r4, #460]	; 0x1cc
				conn->tx_ctrl_last = tx;
   365d6:	f7ff bb32 	b.w	35c3e <ull_conn_rx+0x1a2>
		((!conn->llcp_enc.refresh &&
   365da:	f1b9 0f07 	cmp.w	r9, #7
   365de:	f43f ac6f 	beq.w	35ec0 <ull_conn_rx+0x424>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   365e2:	f1b9 0f02 	cmp.w	r9, #2
   365e6:	f43f aca3 	beq.w	35f30 <ull_conn_rx+0x494>
   365ea:	f1a9 0006 	sub.w	r0, r9, #6
   365ee:	b2c7      	uxtb	r7, r0
   365f0:	2f0b      	cmp	r7, #11
   365f2:	f63f aab4 	bhi.w	35b5e <ull_conn_rx+0xc2>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   365f6:	49d6      	ldr	r1, [pc, #856]	; (36950 <ull_conn_rx+0xeb4>)
   365f8:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   365fc:	07ff      	lsls	r7, r7, #31
   365fe:	f53f aaae 	bmi.w	35b5e <ull_conn_rx+0xc2>
	switch (opcode) {
   36602:	280b      	cmp	r0, #11
   36604:	f63f aad5 	bhi.w	35bb2 <ull_conn_rx+0x116>
   36608:	a701      	add	r7, pc, #4	; (adr r7, 36610 <ull_conn_rx+0xb74>)
   3660a:	f857 f020 	ldr.w	pc, [r7, r0, lsl #2]
   3660e:	bf00      	nop
   36610:	00035f47 	.word	0x00035f47
   36614:	00035ec1 	.word	0x00035ec1
   36618:	0003622b 	.word	0x0003622b
   3661c:	00035d89 	.word	0x00035d89
   36620:	0003613d 	.word	0x0003613d
   36624:	00036467 	.word	0x00036467
   36628:	00036047 	.word	0x00036047
   3662c:	00035f9d 	.word	0x00035f9d
   36630:	00035bb3 	.word	0x00035bb3
   36634:	00036029 	.word	0x00036029
   36638:	00035bb3 	.word	0x00035bb3
   3663c:	00035e57 	.word	0x00035e57
   36640:	f1b9 0f0b 	cmp.w	r9, #11
   36644:	d1d1      	bne.n	365ea <ull_conn_rx+0xb4e>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   36646:	7f73      	ldrb	r3, [r6, #29]
   36648:	2b01      	cmp	r3, #1
   3664a:	f47f aab2 	bne.w	35bb2 <ull_conn_rx+0x116>
		conn->lll.enc_tx = 0U;
   3664e:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   36652:	f36f 1304 	bfc	r3, #4, #1
   36656:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		goto pause_enc_rsp_send_exit;
   3665a:	f7ff ba78 	b.w	35b4e <ull_conn_rx+0xb2>
		*err = -ENOBUFS;
   3665e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   36662:	f7ff ba77 	b.w	35b54 <ull_conn_rx+0xb8>
		if (!conn->lll.role) {
   36666:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   3666a:	f894 7184 	ldrb.w	r7, [r4, #388]	; 0x184
   3666e:	f894 1185 	ldrb.w	r1, [r4, #389]	; 0x185
		if (!conn->lll.role) {
   36672:	f1bc 0f00 	cmp.w	ip, #0
   36676:	f2c0 81b8 	blt.w	369ea <ull_conn_rx+0xf4e>
			if ((conn->llcp_conn_param.req !=
   3667a:	428f      	cmp	r7, r1
   3667c:	d009      	beq.n	36692 <ull_conn_rx+0xbf6>
			    ((conn->llcp_conn_param.state ==
   3667e:	f894 c186 	ldrb.w	ip, [r4, #390]	; 0x186
					conn->llcp_conn_param.ack) &&
   36682:	2751      	movs	r7, #81	; 0x51
   36684:	f00c 0c0f 	and.w	ip, ip, #15
   36688:	fa27 f70c 	lsr.w	r7, r7, ip
   3668c:	07ff      	lsls	r7, r7, #31
   3668e:	f100 82a8 	bmi.w	36be2 <ull_conn_rx+0x1146>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   36692:	f894 70e4 	ldrb.w	r7, [r4, #228]	; 0xe4
   36696:	f894 c0e5 	ldrb.w	ip, [r4, #229]	; 0xe5
   3669a:	eba7 070c 	sub.w	r7, r7, ip
   3669e:	f007 0703 	and.w	r7, r7, #3
   366a2:	2f02      	cmp	r7, #2
   366a4:	f000 8403 	beq.w	36eae <ull_conn_rx+0x1412>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   366a8:	f894 c1c4 	ldrb.w	ip, [r4, #452]	; 0x1c4
   366ac:	f894 71c5 	ldrb.w	r7, [r4, #453]	; 0x1c5
   366b0:	45bc      	cmp	ip, r7
   366b2:	f000 8434 	beq.w	36f1e <ull_conn_rx+0x1482>
				nack = reject_ext_ind_send(conn, *rx,
   366b6:	232a      	movs	r3, #42	; 0x2a
   366b8:	220f      	movs	r2, #15
   366ba:	f7ff bb58 	b.w	35d6e <ull_conn_rx+0x2d2>
			conn->tx_data = conn->tx_data->next;
   366be:	681a      	ldr	r2, [r3, #0]
   366c0:	f8c4 21d8 	str.w	r2, [r4, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   366c4:	2900      	cmp	r1, #0
   366c6:	f47f aab3 	bne.w	35c30 <ull_conn_rx+0x194>
			tx->next = conn->tx_head->next;
   366ca:	681b      	ldr	r3, [r3, #0]
   366cc:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   366ce:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   366d2:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   366d4:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
				conn->tx_ctrl_last = tx;
   366d8:	f7ff bab1 	b.w	35c3e <ull_conn_rx+0x1a2>
	if (conn->common.txn_lock) {
   366dc:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   366e0:	079b      	lsls	r3, r3, #30
   366e2:	f53f aa34 	bmi.w	35b4e <ull_conn_rx+0xb2>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   366e6:	489b      	ldr	r0, [pc, #620]	; (36954 <ull_conn_rx+0xeb8>)
   366e8:	f7f9 fc92 	bl	30010 <mem_acquire>
	if (!tx) {
   366ec:	4603      	mov	r3, r0
   366ee:	2800      	cmp	r0, #0
   366f0:	d0b5      	beq.n	3665e <ull_conn_rx+0xbc2>
	conn->common.txn_lock = 1U;
   366f2:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   366f6:	f894 11b5 	ldrb.w	r1, [r4, #437]	; 0x1b5
	eff_rx_octets = conn->lll.max_rx_octets;
   366fa:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
	eff_tx_octets = conn->lll.max_tx_octets;
   366fe:	f8b4 a058 	ldrh.w	sl, [r4, #88]	; 0x58
	eff_rx_time = conn->lll.max_rx_time;
   36702:	f8b4 b05e 	ldrh.w	fp, [r4, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
   36706:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
	conn->common.txn_lock = 1U;
   3670a:	f042 0202 	orr.w	r2, r2, #2
   3670e:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   36712:	f894 21b4 	ldrb.w	r2, [r4, #436]	; 0x1b4
	if (/* Local idle, and Peer request then complete the Peer procedure
   36716:	428a      	cmp	r2, r1
	eff_rx_octets = conn->lll.max_rx_octets;
   36718:	4686      	mov	lr, r0
	if (/* Local idle, and Peer request then complete the Peer procedure
   3671a:	f040 8532 	bne.w	37182 <ull_conn_rx+0x16e6>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
   3671e:	8c30      	ldrh	r0, [r6, #32]
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   36720:	281a      	cmp	r0, #26
   36722:	f240 8251 	bls.w	36bc8 <ull_conn_rx+0x112c>
			eff_tx_octets = MIN(max_rx_octets,
   36726:	f8b4 10d2 	ldrh.w	r1, [r4, #210]	; 0xd2
   3672a:	4281      	cmp	r1, r0
   3672c:	bf28      	it	cs
   3672e:	4601      	movcs	r1, r0
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   36730:	8cb0      	ldrh	r0, [r6, #36]	; 0x24
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
   36732:	f8b6 c026 	ldrh.w	ip, [r6, #38]	; 0x26
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   36736:	281a      	cmp	r0, #26
		if (lr_rx_time >= PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN,
   36738:	8c70      	ldrh	r0, [r6, #34]	; 0x22
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   3673a:	46f1      	mov	r9, lr
   3673c:	bf88      	it	hi
   3673e:	f04f 0e1b 	movhi.w	lr, #27
		if (lr_rx_time >= PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN,
   36742:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
   36746:	bf34      	ite	cc
   36748:	4640      	movcc	r0, r8
   3674a:	f44f 70a4 	movcs.w	r0, #328	; 0x148
		if (lr_tx_time >= PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN,
   3674e:	f5bc 7fa4 	cmp.w	ip, #328	; 0x148
   36752:	bf34      	ite	cc
   36754:	46dc      	movcc	ip, fp
   36756:	f44f 7ca4 	movcs.w	ip, #328	; 0x148
		if (eff_rx_octets != conn->lll.max_rx_octets) {
   3675a:	45f1      	cmp	r9, lr
   3675c:	f000 8305 	beq.w	36d6a <ull_conn_rx+0x12ce>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   36760:	3a01      	subs	r2, #1
   36762:	f884 21b5 	strb.w	r2, [r4, #437]	; 0x1b5
			conn->llcp_length.rx_octets = eff_rx_octets;
   36766:	f8a4 e1b8 	strh.w	lr, [r4, #440]	; 0x1b8
			link->mem = conn->llcp_rx;
   3676a:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
			conn->llcp_length.tx_octets = eff_tx_octets;
   3676e:	f8a4 11ba 	strh.w	r1, [r4, #442]	; 0x1ba
			conn->llcp_length.rx_time = eff_rx_time;
   36772:	f8a4 c1bc 	strh.w	ip, [r4, #444]	; 0x1bc
			conn->llcp_length.tx_time = eff_tx_time;
   36776:	f8a4 01be 	strh.w	r0, [r4, #446]	; 0x1be
			if (tx) {
   3677a:	2b00      	cmp	r3, #0
   3677c:	f000 8342 	beq.w	36e04 <ull_conn_rx+0x1368>
				conn->llcp_length.state =
   36780:	f894 61b6 	ldrb.w	r6, [r4, #438]	; 0x1b6
   36784:	f04f 0805 	mov.w	r8, #5
   36788:	f368 0602 	bfi	r6, r8, #0, #3
   3678c:	f884 61b6 	strb.w	r6, [r4, #438]	; 0x1b6
			link->mem = conn->llcp_rx;
   36790:	607a      	str	r2, [r7, #4]
			(*rx)->hdr.link = link;
   36792:	682a      	ldr	r2, [r5, #0]
   36794:	6017      	str	r7, [r2, #0]
			conn->llcp_rx = *rx;
   36796:	682a      	ldr	r2, [r5, #0]
   36798:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
			*rx = NULL;
   3679c:	2200      	movs	r2, #0
   3679e:	602a      	str	r2, [r5, #0]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   367a0:	791a      	ldrb	r2, [r3, #4]
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
   367a2:	81d8      	strh	r0, [r3, #14]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   367a4:	f042 0203 	orr.w	r2, r2, #3
	ctrl_tx_sec_enqueue(conn, tx);
   367a8:	4620      	mov	r0, r4
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   367aa:	711a      	strb	r2, [r3, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   367ac:	2409      	movs	r4, #9
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   367ae:	2215      	movs	r2, #21
	pdu_tx->llctrl.length_rsp.max_tx_octets =
   367b0:	8199      	strh	r1, [r3, #12]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
   367b2:	f8a3 e008 	strh.w	lr, [r3, #8]
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
   367b6:	f8a3 c00a 	strh.w	ip, [r3, #10]
	ctrl_tx_sec_enqueue(conn, tx);
   367ba:	4619      	mov	r1, r3
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   367bc:	715c      	strb	r4, [r3, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   367be:	71da      	strb	r2, [r3, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   367c0:	f7fe f8e6 	bl	34990 <ctrl_tx_sec_enqueue>
}
   367c4:	f7ff b9c5 	b.w	35b52 <ull_conn_rx+0xb6>
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   367c8:	f894 2185 	ldrb.w	r2, [r4, #389]	; 0x185
   367cc:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   367d0:	429a      	cmp	r2, r3
   367d2:	f43f ae69 	beq.w	364a8 <ull_conn_rx+0xa0c>
		rej_ext_ind->error_code = rej_ind->error_code;
   367d6:	f896 3020 	ldrb.w	r3, [r6, #32]
   367da:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
	if (!lll->role && (rej_ext_ind->error_code ==
   367de:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   367e2:	2a00      	cmp	r2, #0
   367e4:	f2c0 8378 	blt.w	36ed8 <ull_conn_rx+0x143c>
   367e8:	2b1a      	cmp	r3, #26
   367ea:	f000 844b 	beq.w	37084 <ull_conn_rx+0x15e8>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   367ee:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   367f2:	f003 020f 	and.w	r2, r3, #15
   367f6:	2a04      	cmp	r2, #4
   367f8:	f47f ae8c 	bne.w	36514 <ull_conn_rx+0xa78>
	conn_upd_curr = NULL;
   367fc:	4856      	ldr	r0, [pc, #344]	; (36958 <ull_conn_rx+0xebc>)
	if (conn->llcp_conn_param.cache.timeout) {
   367fe:	f8b4 1196 	ldrh.w	r1, [r4, #406]	; 0x196
   36802:	2200      	movs	r2, #0
   36804:	6002      	str	r2, [r0, #0]
   36806:	2900      	cmp	r1, #0
   36808:	f000 8410 	beq.w	3702c <ull_conn_rx+0x1590>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
   3680c:	f8b4 3186 	ldrh.w	r3, [r4, #390]	; 0x186
		conn->llcp_conn_param.timeout =
   36810:	f8a4 118e 	strh.w	r1, [r4, #398]	; 0x18e
		conn->llcp_conn_param.cache.timeout = 0U;
   36814:	f8a4 2196 	strh.w	r2, [r4, #406]	; 0x196
		conn->llcp_conn_param.interval_min =
   36818:	f8d4 2190 	ldr.w	r2, [r4, #400]	; 0x190
   3681c:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
   36820:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
		conn->llcp_conn_param.latency =
   36824:	f8b4 2194 	ldrh.w	r2, [r4, #404]	; 0x194
   36828:	f8a4 218c 	strh.w	r2, [r4, #396]	; 0x18c
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
   3682c:	f043 0310 	orr.w	r3, r3, #16
   36830:	f8a4 3186 	strh.w	r3, [r4, #390]	; 0x186
		conn->procedure_expire = 0U;
   36834:	2200      	movs	r2, #0
   36836:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
   3683a:	e66b      	b.n	36514 <ull_conn_rx+0xa78>
	if (conn->common.txn_lock) {
   3683c:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   36840:	079f      	lsls	r7, r3, #30
   36842:	f53f a984 	bmi.w	35b4e <ull_conn_rx+0xb2>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   36846:	4843      	ldr	r0, [pc, #268]	; (36954 <ull_conn_rx+0xeb8>)
   36848:	f7f9 fbe2 	bl	30010 <mem_acquire>
	if (!tx) {
   3684c:	4603      	mov	r3, r0
   3684e:	2800      	cmp	r0, #0
   36850:	f43f af05 	beq.w	3665e <ull_conn_rx+0xbc2>
	conn->common.txn_lock = 1U;
   36854:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   36858:	f894 11c6 	ldrb.w	r1, [r4, #454]	; 0x1c6
	if (conn->llcp_phy.ack ==
   3685c:	f894 01c5 	ldrb.w	r0, [r4, #453]	; 0x1c5
	conn->common.txn_lock = 1U;
   36860:	f042 0202 	orr.w	r2, r2, #2
   36864:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   36868:	2202      	movs	r2, #2
   3686a:	f362 0101 	bfi	r1, r2, #0, #2
	if (conn->llcp_phy.ack ==
   3686e:	f894 21c4 	ldrb.w	r2, [r4, #452]	; 0x1c4
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   36872:	f884 11c6 	strb.w	r1, [r4, #454]	; 0x1c6
	if (conn->llcp_phy.ack ==
   36876:	4282      	cmp	r2, r0
   36878:	d115      	bne.n	368a6 <ull_conn_rx+0xe0a>
		conn->llcp_phy.tx =
   3687a:	f8b4 11c6 	ldrh.w	r1, [r4, #454]	; 0x1c6
			conn->phy_pref_rx;
   3687e:	f894 01c8 	ldrb.w	r0, [r4, #456]	; 0x1c8
		conn->llcp_phy.ack--;
   36882:	3a01      	subs	r2, #1
   36884:	f884 21c5 	strb.w	r2, [r4, #453]	; 0x1c5
		conn->llcp_phy.tx =
   36888:	f421 619f 	bic.w	r1, r1, #1272	; 0x4f8
   3688c:	f240 42fc 	movw	r2, #1276	; 0x4fc
   36890:	f021 0104 	bic.w	r1, r1, #4
   36894:	ea02 0280 	and.w	r2, r2, r0, lsl #2
   36898:	430a      	orrs	r2, r1
		conn->procedure_expire =
   3689a:	f8b4 10c6 	ldrh.w	r1, [r4, #198]	; 0xc6
		conn->llcp_phy.tx =
   3689e:	f8a4 21c6 	strh.w	r2, [r4, #454]	; 0x1c6
		conn->procedure_expire =
   368a2:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
	conn->llcp_phy.tx &= p->rx_phys;
   368a6:	f894 21c6 	ldrb.w	r2, [r4, #454]	; 0x1c6
   368aa:	f896 1021 	ldrb.w	r1, [r6, #33]	; 0x21
   368ae:	f3c2 0082 	ubfx	r0, r2, #2, #3
   368b2:	4001      	ands	r1, r0
   368b4:	f361 0284 	bfi	r2, r1, #2, #3
   368b8:	f884 21c6 	strb.w	r2, [r4, #454]	; 0x1c6
	conn->llcp_phy.rx &= p->tx_phys;
   368bc:	f896 1020 	ldrb.w	r1, [r6, #32]
   368c0:	f3c2 1042 	ubfx	r0, r2, #5, #3
   368c4:	4001      	ands	r1, r0
   368c6:	f361 1247 	bfi	r2, r1, #5, #3
   368ca:	f884 21c6 	strb.w	r2, [r4, #454]	; 0x1c6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   368ce:	791a      	ldrb	r2, [r3, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   368d0:	2103      	movs	r1, #3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   368d2:	430a      	orrs	r2, r1
   368d4:	711a      	strb	r2, [r3, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   368d6:	2217      	movs	r2, #23
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   368d8:	7159      	strb	r1, [r3, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   368da:	71da      	strb	r2, [r3, #7]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   368dc:	f894 21c8 	ldrb.w	r2, [r4, #456]	; 0x1c8
   368e0:	f3c2 0202 	ubfx	r2, r2, #0, #3
   368e4:	721a      	strb	r2, [r3, #8]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   368e6:	f894 21c8 	ldrb.w	r2, [r4, #456]	; 0x1c8
   368ea:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   368ee:	725a      	strb	r2, [r3, #9]
	    conn->tx_head &&
   368f0:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
	if (
   368f4:	2a00      	cmp	r2, #0
   368f6:	f000 8109 	beq.w	36b0c <ull_conn_rx+0x1070>
	    !conn->llcp_cu.pause_tx &&
   368fa:	f894 110e 	ldrb.w	r1, [r4, #270]	; 0x10e
	    conn->tx_head &&
   368fe:	06cd      	lsls	r5, r1, #27
   36900:	f100 8104 	bmi.w	36b0c <ull_conn_rx+0x1070>
	    !conn->llcp_enc.pause_tx &&
   36904:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    !conn->llcp_cu.pause_tx &&
   36908:	0788      	lsls	r0, r1, #30
   3690a:	f100 80ff 	bmi.w	36b0c <ull_conn_rx+0x1070>
	    !conn->llcp_phy.pause_tx &&
   3690e:	f894 11c7 	ldrb.w	r1, [r4, #455]	; 0x1c7
   36912:	07c9      	lsls	r1, r1, #31
   36914:	f100 80fa 	bmi.w	36b0c <ull_conn_rx+0x1070>
		if (conn->tx_head == conn->tx_data) {
   36918:	f8d4 01d8 	ldr.w	r0, [r4, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   3691c:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (conn->tx_head == conn->tx_data) {
   36920:	4282      	cmp	r2, r0
   36922:	f000 8456 	beq.w	371d2 <ull_conn_rx+0x1736>
		} else if (!conn->tx_ctrl) {
   36926:	2900      	cmp	r1, #0
   36928:	f000 83e6 	beq.w	370f8 <ull_conn_rx+0x165c>
	tx->next = conn->tx_ctrl_last->next;
   3692c:	f8d4 21d4 	ldr.w	r2, [r4, #468]	; 0x1d4
   36930:	6812      	ldr	r2, [r2, #0]
   36932:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last->next = tx;
   36934:	f8d4 21d4 	ldr.w	r2, [r4, #468]	; 0x1d4
   36938:	6013      	str	r3, [r2, #0]
	conn->tx_ctrl_last = tx;
   3693a:	f8c4 31d4 	str.w	r3, [r4, #468]	; 0x1d4
	if (!tx->next) {
   3693e:	681a      	ldr	r2, [r3, #0]
   36940:	2a00      	cmp	r2, #0
   36942:	f47f a904 	bne.w	35b4e <ull_conn_rx+0xb2>
		conn->tx_data_last = tx;
   36946:	f8c4 31dc 	str.w	r3, [r4, #476]	; 0x1dc
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3694a:	f7ff b900 	b.w	35b4e <ull_conn_rx+0xb2>
   3694e:	bf00      	nop
   36950:	00049e54 	.word	0x00049e54
   36954:	20002820 	.word	0x20002820
   36958:	20002968 	.word	0x20002968
			conn->llcp_conn_param.disabled = 1U;
   3695c:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   36960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   36964:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
			if (!conn->lll.role) {
   36968:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3696c:	2b00      	cmp	r3, #0
   3696e:	f2c0 8262 	blt.w	36e36 <ull_conn_rx+0x139a>
				LL_ASSERT(conn->llcp_cu.req ==
   36972:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   36976:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   3697a:	429a      	cmp	r2, r3
   3697c:	d00e      	beq.n	3699c <ull_conn_rx+0xf00>
   3697e:	4ab5      	ldr	r2, [pc, #724]	; (36c54 <ull_conn_rx+0x11b8>)
   36980:	49b5      	ldr	r1, [pc, #724]	; (36c58 <ull_conn_rx+0x11bc>)
   36982:	48b6      	ldr	r0, [pc, #728]	; (36c5c <ull_conn_rx+0x11c0>)
   36984:	f641 5346 	movw	r3, #7494	; 0x1d46
   36988:	f00b fe1e 	bl	425c8 <assert_print>
   3698c:	4040      	eors	r0, r0
   3698e:	f380 8811 	msr	BASEPRI, r0
   36992:	f04f 0003 	mov.w	r0, #3
   36996:	df02      	svc	2
   36998:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
				conn->llcp_conn_param.state =
   3699c:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   369a0:	2106      	movs	r1, #6
   369a2:	f361 0203 	bfi	r2, r1, #0, #4
				conn->llcp_cu.ack--;
   369a6:	3b01      	subs	r3, #1
   369a8:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
				conn->llcp_conn_param.state =
   369ac:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   369b0:	f3c2 1300 	ubfx	r3, r2, #4, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   369b4:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
				conn->llcp_cu.win_size = 1U;
   369b8:	2101      	movs	r1, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   369ba:	00db      	lsls	r3, r3, #3
   369bc:	f022 020f 	bic.w	r2, r2, #15
   369c0:	430b      	orrs	r3, r1
   369c2:	4313      	orrs	r3, r2
   369c4:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
				conn->llcp_cu.timeout =
   369c8:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
   369cc:	f8a4 3114 	strh.w	r3, [r4, #276]	; 0x114
					conn->llcp_conn_param.interval_max;
   369d0:	f8d4 218a 	ldr.w	r2, [r4, #394]	; 0x18a
				conn->llcp_cu.win_size = 1U;
   369d4:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
				conn->llcp_cu.win_offset_us = 0U;
   369d8:	2300      	movs	r3, #0
				conn->llcp_cu.interval =
   369da:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
				conn->llcp_cu.win_offset_us = 0U;
   369de:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   369e2:	682b      	ldr	r3, [r5, #0]
   369e4:	7119      	strb	r1, [r3, #4]
				break;
   369e6:	f7ff b8b4 	b.w	35b52 <ull_conn_rx+0xb6>
		} else if ((conn->llcp_conn_param.req ==
   369ea:	428f      	cmp	r7, r1
   369ec:	d005      	beq.n	369fa <ull_conn_rx+0xf5e>
			    conn->llcp_conn_param.ack) ||
   369ee:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   369f2:	f013 0f0b 	tst.w	r3, #11
   369f6:	f47f a8aa 	bne.w	35b4e <ull_conn_rx+0xb2>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   369fa:	f8d6 9020 	ldr.w	r9, [r6, #32]
   369fe:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
				cpr->preferred_periodicity;
   36a02:	f896 a028 	ldrb.w	sl, [r6, #40]	; 0x28
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   36a06:	fa1f f389 	uxth.w	r3, r9
   36a0a:	2b05      	cmp	r3, #5
   36a0c:	d97a      	bls.n	36b04 <ull_conn_rx+0x1068>
   36a0e:	ea4f 4719 	mov.w	r7, r9, lsr #16
   36a12:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
   36a16:	d875      	bhi.n	36b04 <ull_conn_rx+0x1068>
			    (interval_max > 3200) ||
   36a18:	429f      	cmp	r7, r3
   36a1a:	d373      	bcc.n	36b04 <ull_conn_rx+0x1068>
   36a1c:	fa1f fe88 	uxth.w	lr, r8
			    (interval_min > interval_max) ||
   36a20:	f5be 7ffa 	cmp.w	lr, #500	; 0x1f4
   36a24:	d26e      	bcs.n	36b04 <ull_conn_rx+0x1068>
   36a26:	ea4f 4318 	mov.w	r3, r8, lsr #16
			    (latency > 499) ||
   36a2a:	f1a3 0c0a 	sub.w	ip, r3, #10
   36a2e:	fa1f fc8c 	uxth.w	ip, ip
   36a32:	f640 4b76 	movw	fp, #3190	; 0xc76
   36a36:	45dc      	cmp	ip, fp
   36a38:	d864      	bhi.n	36b04 <ull_conn_rx+0x1068>
			     ((latency + 1) * interval_max)) ||
   36a3a:	f10e 0c01 	add.w	ip, lr, #1
   36a3e:	fa1f fc8c 	uxth.w	ip, ip
   36a42:	fb07 fc0c 	mul.w	ip, r7, ip
			    (timeout < 10) || (timeout > 3200) ||
   36a46:	ebbc 0f83 	cmp.w	ip, r3, lsl #2
   36a4a:	d25b      	bcs.n	36b04 <ull_conn_rx+0x1068>
			     ((latency + 1) * interval_max)) ||
   36a4c:	45ba      	cmp	sl, r7
   36a4e:	d859      	bhi.n	36b04 <ull_conn_rx+0x1068>
			conn->llcp_conn_param.interval_min = interval_min;
   36a50:	e9c4 9862 	strd	r9, r8, [r4, #392]	; 0x188
			conn->llcp_conn_param.preferred_periodicity =
   36a54:	f884 a198 	strb.w	sl, [r4, #408]	; 0x198
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   36a58:	f8b6 c029 	ldrh.w	ip, [r6, #41]	; 0x29
			conn->llcp_conn_param.reference_conn_event_count =
   36a5c:	f8a4 c19a 	strh.w	ip, [r4, #410]	; 0x19a
				sys_le16_to_cpu(cpr->offset0);
   36a60:	f8b6 c02b 	ldrh.w	ip, [r6, #43]	; 0x2b
			conn->llcp_conn_param.offset0 =
   36a64:	f8a4 c19c 	strh.w	ip, [r4, #412]	; 0x19c
				sys_le16_to_cpu(cpr->offset1);
   36a68:	f8b6 c02d 	ldrh.w	ip, [r6, #45]	; 0x2d
			conn->llcp_conn_param.offset1 =
   36a6c:	f8a4 c19e 	strh.w	ip, [r4, #414]	; 0x19e
				sys_le16_to_cpu(cpr->offset2);
   36a70:	f8b6 c02f 	ldrh.w	ip, [r6, #47]	; 0x2f
			conn->llcp_conn_param.offset2 =
   36a74:	f8a4 c1a0 	strh.w	ip, [r4, #416]	; 0x1a0
				sys_le16_to_cpu(cpr->offset3);
   36a78:	f8b6 c031 	ldrh.w	ip, [r6, #49]	; 0x31
			conn->llcp_conn_param.offset3 =
   36a7c:	f8a4 c1a2 	strh.w	ip, [r4, #418]	; 0x1a2
				sys_le16_to_cpu(cpr->offset4);
   36a80:	f8b6 c033 	ldrh.w	ip, [r6, #51]	; 0x33
			conn->llcp_conn_param.offset4 =
   36a84:	f8a4 c1a4 	strh.w	ip, [r4, #420]	; 0x1a4
				sys_le16_to_cpu(cpr->offset5);
   36a88:	f8b6 6035 	ldrh.w	r6, [r6, #53]	; 0x35
			conn->llcp_conn_param.offset5 =
   36a8c:	f8a4 61a6 	strh.w	r6, [r4, #422]	; 0x1a6
			if ((conn->llcp_conn_param.interval_max !=
   36a90:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
   36a92:	42be      	cmp	r6, r7
   36a94:	f000 8344 	beq.w	37120 <ull_conn_rx+0x1684>
				conn->llcp_conn_param.state =
   36a98:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   36a9c:	2503      	movs	r5, #3
   36a9e:	f365 0303 	bfi	r3, r5, #0, #4
   36aa2:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
			conn->llcp_conn_param.remote = 1U;
   36aa6:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
			conn->llcp_conn_param.ack--;
   36aaa:	3901      	subs	r1, #1
			conn->llcp_conn_param.remote = 1U;
   36aac:	f043 0320 	orr.w	r3, r3, #32
   36ab0:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
			conn->llcp_conn_param.ack--;
   36ab4:	f884 1185 	strb.w	r1, [r4, #389]	; 0x185
	if (!conn_upd_curr) {
   36ab8:	2a00      	cmp	r2, #0
   36aba:	f47f a84a 	bne.w	35b52 <ull_conn_rx+0xb6>
		conn_upd_curr = conn;
   36abe:	6004      	str	r4, [r0, #0]
   36ac0:	f7ff b847 	b.w	35b52 <ull_conn_rx+0xb6>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   36ac4:	4866      	ldr	r0, [pc, #408]	; (36c60 <ull_conn_rx+0x11c4>)
   36ac6:	f7f9 faa3 	bl	30010 <mem_acquire>
		if (!tx) {
   36aca:	4601      	mov	r1, r0
   36acc:	2800      	cmp	r0, #0
   36ace:	f43f adc6 	beq.w	3665e <ull_conn_rx+0xbc2>
		conn->llcp_version.tx = 1U;
   36ad2:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   36ad6:	f043 0301 	orr.w	r3, r3, #1
   36ada:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   36ade:	7903      	ldrb	r3, [r0, #4]
		pdu_tx->len =
   36ae0:	7145      	strb	r5, [r0, #5]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   36ae2:	f043 0303 	orr.w	r3, r3, #3
   36ae6:	7103      	strb	r3, [r0, #4]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   36ae8:	f640 420c 	movw	r2, #3084	; 0xc0c
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   36aec:	4b5d      	ldr	r3, [pc, #372]	; (36c64 <ull_conn_rx+0x11c8>)
   36aee:	f8c0 3009 	str.w	r3, [r0, #9]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   36af2:	f8a0 2007 	strh.w	r2, [r0, #7]
		ctrl_tx_sec_enqueue(conn, tx);
   36af6:	4620      	mov	r0, r4
   36af8:	f7fd ff4a 	bl	34990 <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   36afc:	2301      	movs	r3, #1
   36afe:	7133      	strb	r3, [r6, #4]
   36b00:	f7ff bab4 	b.w	3606c <ull_conn_rx+0x5d0>
				nack = reject_ext_ind_send(conn, *rx,
   36b04:	231e      	movs	r3, #30
   36b06:	220f      	movs	r2, #15
   36b08:	f7ff b931 	b.w	35d6e <ull_conn_rx+0x2d2>
		if (!conn->tx_ctrl) {
   36b0c:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   36b10:	2900      	cmp	r1, #0
   36b12:	f47f af0b 	bne.w	3692c <ull_conn_rx+0xe90>
			tx->next = conn->tx_head;
   36b16:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl = tx;
   36b18:	e9c4 3373 	strd	r3, r3, [r4, #460]	; 0x1cc
				conn->tx_ctrl_last = tx;
   36b1c:	e70d      	b.n	3693a <ull_conn_rx+0xe9e>
				      0x03) == 0x02) &&
   36b1e:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   36b22:	2b03      	cmp	r3, #3
   36b24:	f47f a921 	bne.w	35d6a <ull_conn_rx+0x2ce>
   36b28:	f7ff b918 	b.w	35d5c <ull_conn_rx+0x2c0>
			conn->llcp_length.disabled = 1U;
   36b2c:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
			conn->llcp_length.ack = conn->llcp_length.req;
   36b30:	f884 21b5 	strb.w	r2, [r4, #437]	; 0x1b5
			conn->llcp_length.disabled = 1U;
   36b34:	f043 0308 	orr.w	r3, r3, #8
   36b38:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
			conn->llcp_length.ack = conn->llcp_length.req;
   36b3c:	f7ff b9e5 	b.w	35f0a <ull_conn_rx+0x46e>
				conn->llcp_phy.state =
   36b40:	f894 31c6 	ldrb.w	r3, [r4, #454]	; 0x1c6
				if (conn->llcp_phy.ack ==
   36b44:	4281      	cmp	r1, r0
				conn->llcp_phy.state =
   36b46:	f043 0303 	orr.w	r3, r3, #3
   36b4a:	f884 31c6 	strb.w	r3, [r4, #454]	; 0x1c6
				if (conn->llcp_phy.ack ==
   36b4e:	d111      	bne.n	36b74 <ull_conn_rx+0x10d8>
					conn->llcp_phy.tx =
   36b50:	f8b4 21c6 	ldrh.w	r2, [r4, #454]	; 0x1c6
						conn->phy_pref_rx;
   36b54:	f894 01c8 	ldrb.w	r0, [r4, #456]	; 0x1c8
					conn->llcp_phy.ack--;
   36b58:	1e4b      	subs	r3, r1, #1
   36b5a:	f884 31c5 	strb.w	r3, [r4, #453]	; 0x1c5
					conn->llcp_phy.tx =
   36b5e:	f422 629f 	bic.w	r2, r2, #1272	; 0x4f8
   36b62:	f240 43fc 	movw	r3, #1276	; 0x4fc
   36b66:	f022 0204 	bic.w	r2, r2, #4
   36b6a:	ea03 0380 	and.w	r3, r3, r0, lsl #2
   36b6e:	4313      	orrs	r3, r2
   36b70:	f8a4 31c6 	strh.w	r3, [r4, #454]	; 0x1c6
				conn->llcp_phy.tx &= p->rx_phys;
   36b74:	f894 31c6 	ldrb.w	r3, [r4, #454]	; 0x1c6
   36b78:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   36b7c:	f3c3 0182 	ubfx	r1, r3, #2, #3
   36b80:	400a      	ands	r2, r1
   36b82:	f362 0384 	bfi	r3, r2, #2, #3
   36b86:	f884 31c6 	strb.w	r3, [r4, #454]	; 0x1c6
				conn->llcp_phy.rx &= p->tx_phys;
   36b8a:	f896 2020 	ldrb.w	r2, [r6, #32]
   36b8e:	f3c3 1142 	ubfx	r1, r3, #5, #3
   36b92:	400a      	ands	r2, r1
   36b94:	f362 1347 	bfi	r3, r2, #5, #3
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   36b98:	f003 021c 	and.w	r2, r3, #28
				conn->llcp_phy.rx &= p->tx_phys;
   36b9c:	f884 31c6 	strb.w	r3, [r4, #454]	; 0x1c6
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   36ba0:	b2db      	uxtb	r3, r3
   36ba2:	b10a      	cbz	r2, 36ba8 <ull_conn_rx+0x110c>
   36ba4:	2b1f      	cmp	r3, #31
   36ba6:	d805      	bhi.n	36bb4 <ull_conn_rx+0x1118>
					conn->llcp_phy.tx = 0U;
   36ba8:	f894 31c6 	ldrb.w	r3, [r4, #454]	; 0x1c6
   36bac:	f003 0303 	and.w	r3, r3, #3
   36bb0:	f884 31c6 	strb.w	r3, [r4, #454]	; 0x1c6
				conn->llcp_phy.pause_tx = 1U;
   36bb4:	f894 31c7 	ldrb.w	r3, [r4, #455]	; 0x1c7
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   36bb8:	2201      	movs	r2, #1
				conn->llcp_phy.pause_tx = 1U;
   36bba:	4313      	orrs	r3, r2
   36bbc:	f884 31c7 	strb.w	r3, [r4, #455]	; 0x1c7
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   36bc0:	682b      	ldr	r3, [r5, #0]
   36bc2:	711a      	strb	r2, [r3, #4]
   36bc4:	f7fe bfc5 	b.w	35b52 <ull_conn_rx+0xb6>
   36bc8:	4651      	mov	r1, sl
   36bca:	e5b1      	b.n	36730 <ull_conn_rx+0xc94>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   36bcc:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
   36bd0:	f36f 0201 	bfc	r2, #0, #2
   36bd4:	f884 20f4 	strb.w	r2, [r4, #244]	; 0xf4
   36bd8:	f7ff b9d5 	b.w	35f86 <ull_conn_rx+0x4ea>
				nack = reject_ext_ind_send(conn, *rx,
   36bdc:	2323      	movs	r3, #35	; 0x23
   36bde:	f7ff b8c5 	b.w	35d6c <ull_conn_rx+0x2d0>
				nack = reject_ext_ind_send(conn, *rx,
   36be2:	2323      	movs	r3, #35	; 0x23
   36be4:	220f      	movs	r2, #15
   36be6:	f7ff b8c2 	b.w	35d6e <ull_conn_rx+0x2d2>
			lll->phy_tx_time = lll->phy_tx;
   36bea:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
			conn->llcp_phy.pause_tx = 0U;
   36bee:	f894 31c7 	ldrb.w	r3, [r4, #455]	; 0x1c7
			conn->llcp_phy.ack = conn->llcp_phy.req;
   36bf2:	f884 21c5 	strb.w	r2, [r4, #453]	; 0x1c5
			conn->llcp_phy.pause_tx = 0U;
   36bf6:	f023 0309 	bic.w	r3, r3, #9
			lll->phy_tx_time = lll->phy_tx;
   36bfa:	f3c1 0002 	ubfx	r0, r1, #0, #3
   36bfe:	460a      	mov	r2, r1
			conn->llcp_phy.pause_tx = 0U;
   36c00:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
   36c04:	f360 1206 	bfi	r2, r0, #4, #3
   36c08:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
			if (conn->llcp_phy.cmd) {
   36c0c:	075a      	lsls	r2, r3, #29
			conn->llcp_phy.pause_tx = 0U;
   36c0e:	f884 31c7 	strb.w	r3, [r4, #455]	; 0x1c7
			if (conn->llcp_phy.cmd) {
   36c12:	f140 810b 	bpl.w	36e2c <ull_conn_rx+0x1390>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   36c16:	682a      	ldr	r2, [r5, #0]
				p->status = 0U;
   36c18:	2300      	movs	r3, #0
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   36c1a:	211d      	movs	r1, #29
   36c1c:	7111      	strb	r1, [r2, #4]
				p->status = 0U;
   36c1e:	7733      	strb	r3, [r6, #28]
				p->tx = lll->phy_tx;
   36c20:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   36c24:	f3c3 0302 	ubfx	r3, r3, #0, #3
   36c28:	7773      	strb	r3, [r6, #29]
				p->rx = lll->phy_rx;
   36c2a:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   36c2e:	f3c3 0302 	ubfx	r3, r3, #0, #3
   36c32:	77b3      	strb	r3, [r6, #30]
   36c34:	f7ff b969 	b.w	35f0a <ull_conn_rx+0x46e>
	conn->llcp_enc.pause_rx = 0U;
   36c38:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	conn->llcp_ack = conn->llcp_req;
   36c3c:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	conn->procedure_expire = 0U;
   36c40:	2100      	movs	r1, #0
	conn->llcp_enc.pause_rx = 0U;
   36c42:	f022 0203 	bic.w	r2, r2, #3
   36c46:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	conn->procedure_expire = 0U;
   36c4a:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
	if (err) {
   36c4e:	f7fe bf80 	b.w	35b52 <ull_conn_rx+0xb6>
   36c52:	bf00      	nop
   36c54:	00049c60 	.word	0x00049c60
   36c58:	00049dac 	.word	0x00049dac
   36c5c:	000497b0 	.word	0x000497b0
   36c60:	20002820 	.word	0x20002820
   36c64:	ffff05f1 	.word	0xffff05f1
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
   36c68:	2101      	movs	r1, #1
   36c6a:	f10d 000f 	add.w	r0, sp, #15
	phy = ind->c_to_p_phy;
   36c6e:	f88d 200f 	strb.w	r2, [sp, #15]
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
   36c72:	f7f9 fbaf 	bl	303d4 <util_ones_count_get>
   36c76:	2801      	cmp	r0, #1
   36c78:	f200 80a2 	bhi.w	36dc0 <ull_conn_rx+0x1324>
	phy = ind->p_to_c_phy;
   36c7c:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   36c80:	f88d 300f 	strb.w	r3, [sp, #15]
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
   36c84:	f10d 000f 	add.w	r0, sp, #15
   36c88:	2101      	movs	r1, #1
   36c8a:	f7f9 fba3 	bl	303d4 <util_ones_count_get>
   36c8e:	2801      	cmp	r0, #1
   36c90:	f200 8096 	bhi.w	36dc0 <ull_conn_rx+0x1324>
	instant = sys_le16_to_cpu(ind->instant);
   36c94:	8c72      	ldrh	r2, [r6, #34]	; 0x22
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   36c96:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   36c98:	1ad3      	subs	r3, r2, r3
   36c9a:	041b      	lsls	r3, r3, #16
   36c9c:	f100 827e 	bmi.w	3719c <ull_conn_rx+0x1700>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   36ca0:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   36ca4:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   36ca8:	1a5b      	subs	r3, r3, r1
   36caa:	f003 0303 	and.w	r3, r3, #3
   36cae:	2b02      	cmp	r3, #2
   36cb0:	f000 826f 	beq.w	37192 <ull_conn_rx+0x16f6>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   36cb4:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
   36cb8:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
   36cbc:	428b      	cmp	r3, r1
   36cbe:	d018      	beq.n	36cf2 <ull_conn_rx+0x1256>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   36cc0:	f894 31c6 	ldrb.w	r3, [r4, #454]	; 0x1c6
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   36cc4:	f003 0303 	and.w	r3, r3, #3
   36cc8:	2b02      	cmp	r3, #2
   36cca:	d112      	bne.n	36cf2 <ull_conn_rx+0x1256>
		conn->llcp_phy.pause_tx = 0U;
   36ccc:	f894 31c7 	ldrb.w	r3, [r4, #455]	; 0x1c7
		conn->llcp_phy.ack = conn->llcp_phy.req;
   36cd0:	f884 11c5 	strb.w	r1, [r4, #453]	; 0x1c5
		conn->llcp_phy.pause_tx = 0U;
   36cd4:	f36f 0300 	bfc	r3, #0, #1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   36cd8:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
		conn->llcp_phy.pause_tx = 0U;
   36cdc:	f884 31c7 	strb.w	r3, [r4, #455]	; 0x1c7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   36ce0:	f3c3 0380 	ubfx	r3, r3, #2, #1
   36ce4:	f363 0141 	bfi	r1, r3, #1, #1
		conn->procedure_expire = 0U;
   36ce8:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   36cea:	f884 10e8 	strb.w	r1, [r4, #232]	; 0xe8
		conn->procedure_expire = 0U;
   36cee:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp.phy_upd_ind.tx = ind->p_to_c_phy;
   36cf2:	f896 1021 	ldrb.w	r1, [r6, #33]	; 0x21
   36cf6:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   36cfa:	f361 0384 	bfi	r3, r1, #2, #3
   36cfe:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	conn->llcp.phy_upd_ind.rx = ind->c_to_p_phy;
   36d02:	f896 1020 	ldrb.w	r1, [r6, #32]
	conn->llcp.phy_upd_ind.instant = instant;
   36d06:	f8a4 20ea 	strh.w	r2, [r4, #234]	; 0xea
	conn->llcp.phy_upd_ind.initiate = 0U;
   36d0a:	b2db      	uxtb	r3, r3
   36d0c:	f003 031e 	and.w	r3, r3, #30
	link->mem = conn->llcp_rx;
   36d10:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
	conn->llcp.phy_upd_ind.initiate = 0U;
   36d14:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   36d18:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	link->mem = conn->llcp_rx;
   36d1c:	607a      	str	r2, [r7, #4]
	(*rx)->hdr.link = link;
   36d1e:	682a      	ldr	r2, [r5, #0]
   36d20:	6017      	str	r7, [r2, #0]
	conn->llcp_rx = *rx;
   36d22:	682a      	ldr	r2, [r5, #0]
   36d24:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
	*rx = NULL;
   36d28:	2300      	movs	r3, #0
   36d2a:	602b      	str	r3, [r5, #0]
	conn->llcp_ack -= 2U;
   36d2c:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
	if (conn->llcp.phy_upd_ind.tx) {
   36d30:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
	conn->llcp_type = LLCP_PHY_UPD;
   36d34:	2106      	movs	r1, #6
	conn->llcp_ack -= 2U;
   36d36:	3a02      	subs	r2, #2
	if (conn->llcp.phy_upd_ind.tx) {
   36d38:	f013 0f1c 	tst.w	r3, #28
	conn->llcp_type = LLCP_PHY_UPD;
   36d3c:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
	conn->llcp_ack -= 2U;
   36d40:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
	if (conn->llcp.phy_upd_ind.tx) {
   36d44:	f43e af05 	beq.w	35b52 <ull_conn_rx+0xb6>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   36d48:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
   36d4c:	f3c3 0382 	ubfx	r3, r3, #2, #3
   36d50:	f363 1206 	bfi	r2, r3, #4, #3
   36d54:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
		if (err) {
   36d58:	f7fe befb 	b.w	35b52 <ull_conn_rx+0xb6>
		err = BT_HCI_ERR_INSTANT_PASSED;
   36d5c:	2328      	movs	r3, #40	; 0x28
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   36d5e:	2201      	movs	r2, #1
   36d60:	7132      	strb	r2, [r6, #4]
			conn->llcp_terminate.reason_final = err;
   36d62:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
   36d66:	f7fe bef4 	b.w	35b52 <ull_conn_rx+0xb6>
			conn->procedure_expire = 0U;
   36d6a:	2700      	movs	r7, #0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   36d6c:	4551      	cmp	r1, sl
			conn->llcp_length.ack = conn->llcp_length.req;
   36d6e:	f884 21b5 	strb.w	r2, [r4, #437]	; 0x1b5
			conn->procedure_expire = 0U;
   36d72:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   36d76:	f000 80c2 	beq.w	36efe <ull_conn_rx+0x1462>
			conn->lll.max_rx_time = eff_rx_time;
   36d7a:	f8a4 c05e 	strh.w	ip, [r4, #94]	; 0x5e
			if (tx) {
   36d7e:	2b00      	cmp	r3, #0
   36d80:	f000 80b1 	beq.w	36ee6 <ull_conn_rx+0x144a>
					(conn->llcp_length.req - 1);
   36d84:	3a01      	subs	r2, #1
				conn->llcp_length.ack =
   36d86:	f884 21b5 	strb.w	r2, [r4, #437]	; 0x1b5
				conn->llcp_length.state =
   36d8a:	f894 21b6 	ldrb.w	r2, [r4, #438]	; 0x1b6
				conn->llcp_length.rx_octets = eff_rx_octets;
   36d8e:	f8a4 e1b8 	strh.w	lr, [r4, #440]	; 0x1b8
				conn->llcp_length.state =
   36d92:	2503      	movs	r5, #3
   36d94:	f365 0202 	bfi	r2, r5, #0, #3
				conn->llcp_length.tx_octets = eff_tx_octets;
   36d98:	f8a4 11ba 	strh.w	r1, [r4, #442]	; 0x1ba
				conn->llcp_length.rx_time = eff_rx_time;
   36d9c:	f8a4 c1bc 	strh.w	ip, [r4, #444]	; 0x1bc
				conn->llcp_length.tx_time = eff_tx_time;
   36da0:	f8a4 01be 	strh.w	r0, [r4, #446]	; 0x1be
				conn->llcp_length.state =
   36da4:	f884 21b6 	strb.w	r2, [r4, #438]	; 0x1b6
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   36da8:	f8a6 e020 	strh.w	lr, [r6, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   36dac:	84b1      	strh	r1, [r6, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   36dae:	f8a6 c022 	strh.w	ip, [r6, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   36db2:	84f0      	strh	r0, [r6, #38]	; 0x26
	if (tx) {
   36db4:	e4f4      	b.n	367a0 <ull_conn_rx+0xd04>
		err = BT_HCI_ERR_DIFF_TRANS_COLLISION;
   36db6:	232a      	movs	r3, #42	; 0x2a
   36db8:	e7d1      	b.n	36d5e <ull_conn_rx+0x12c2>
   36dba:	601c      	str	r4, [r3, #0]
   36dbc:	f7ff bac1 	b.w	36342 <ull_conn_rx+0x8a6>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   36dc0:	682b      	ldr	r3, [r5, #0]
   36dc2:	2201      	movs	r2, #1
   36dc4:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_INVALID_LL_PARAM;
   36dc6:	231e      	movs	r3, #30
			conn->llcp_terminate.reason_final = err;
   36dc8:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
   36dcc:	f7fe bec1 	b.w	35b52 <ull_conn_rx+0xb6>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   36dd0:	4acd      	ldr	r2, [pc, #820]	; (37108 <ull_conn_rx+0x166c>)
   36dd2:	49ce      	ldr	r1, [pc, #824]	; (3710c <ull_conn_rx+0x1670>)
   36dd4:	48ce      	ldr	r0, [pc, #824]	; (37110 <ull_conn_rx+0x1674>)
   36dd6:	f241 53e6 	movw	r3, #5606	; 0x15e6
   36dda:	f00b fbf5 	bl	425c8 <assert_print>
   36dde:	4040      	eors	r0, r0
   36de0:	f380 8811 	msr	BASEPRI, r0
   36de4:	f04f 0003 	mov.w	r0, #3
   36de8:	df02      	svc	2
   36dea:	f7ff bb9c 	b.w	36526 <ull_conn_rx+0xa8a>
	struct node_tx *tx = NULL;
   36dee:	2300      	movs	r3, #0
   36df0:	f7fe bf7b 	b.w	35cea <ull_conn_rx+0x24e>
	    ((pdu_data_tx->llctrl.opcode !=
   36df4:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   36df6:	2a03      	cmp	r2, #3
   36df8:	f43f ac67 	beq.w	366ca <ull_conn_rx+0xc2e>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   36dfc:	2a0a      	cmp	r2, #10
   36dfe:	f47e af0f 	bne.w	35c20 <ull_conn_rx+0x184>
   36e02:	e462      	b.n	366ca <ull_conn_rx+0xc2e>
				conn->lll.max_tx_octets = eff_tx_octets;
   36e04:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
				conn->llcp_length.state =
   36e08:	f894 11b6 	ldrb.w	r1, [r4, #438]	; 0x1b6
				conn->lll.max_tx_time = eff_tx_time;
   36e0c:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
				conn->llcp_length.state =
   36e10:	2004      	movs	r0, #4
   36e12:	f360 0102 	bfi	r1, r0, #0, #3
   36e16:	f884 11b6 	strb.w	r1, [r4, #438]	; 0x1b6
			link->mem = conn->llcp_rx;
   36e1a:	607a      	str	r2, [r7, #4]
			(*rx)->hdr.link = link;
   36e1c:	682a      	ldr	r2, [r5, #0]
   36e1e:	6017      	str	r7, [r2, #0]
			conn->llcp_rx = *rx;
   36e20:	682a      	ldr	r2, [r5, #0]
   36e22:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
			*rx = NULL;
   36e26:	602b      	str	r3, [r5, #0]
	if (tx) {
   36e28:	f7fe be93 	b.w	35b52 <ull_conn_rx+0xb6>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   36e2c:	682b      	ldr	r3, [r5, #0]
   36e2e:	2201      	movs	r2, #1
   36e30:	711a      	strb	r2, [r3, #4]
   36e32:	f7ff b86a 	b.w	35f0a <ull_conn_rx+0x46e>
	conn_upd_curr = NULL;
   36e36:	48b7      	ldr	r0, [pc, #732]	; (37114 <ull_conn_rx+0x1678>)
	if (conn->llcp_conn_param.cache.timeout) {
   36e38:	f8b4 1196 	ldrh.w	r1, [r4, #406]	; 0x196
   36e3c:	2300      	movs	r3, #0
   36e3e:	6003      	str	r3, [r0, #0]
   36e40:	2900      	cmp	r1, #0
   36e42:	d069      	beq.n	36f18 <ull_conn_rx+0x147c>
		conn->llcp_conn_param.cache.timeout = 0U;
   36e44:	f8a4 3196 	strh.w	r3, [r4, #406]	; 0x196
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
   36e48:	f8b4 3186 	ldrh.w	r3, [r4, #390]	; 0x186
		conn->llcp_conn_param.timeout =
   36e4c:	f8a4 118e 	strh.w	r1, [r4, #398]	; 0x18e
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
   36e50:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   36e54:	f043 0310 	orr.w	r3, r3, #16
   36e58:	f8a4 3186 	strh.w	r3, [r4, #390]	; 0x186
		conn->llcp_conn_param.interval_min =
   36e5c:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
   36e60:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
		conn->llcp_conn_param.latency =
   36e64:	f8b4 3194 	ldrh.w	r3, [r4, #404]	; 0x194
   36e68:	f8a4 318c 	strh.w	r3, [r4, #396]	; 0x18c
			if (!conn->llcp_conn_param.cmd) {
   36e6c:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   36e70:	682b      	ldr	r3, [r5, #0]
			if (!conn->llcp_conn_param.cmd) {
   36e72:	06d1      	lsls	r1, r2, #27
   36e74:	f57e ae77 	bpl.w	35b66 <ull_conn_rx+0xca>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   36e78:	2219      	movs	r2, #25
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   36e7a:	f01c 0f01 	tst.w	ip, #1
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   36e7e:	711a      	strb	r2, [r3, #4]
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   36e80:	f040 80be 	bne.w	37000 <ull_conn_rx+0x1564>
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   36e84:	231a      	movs	r3, #26
   36e86:	7733      	strb	r3, [r6, #28]
			cu->interval = lll->interval;
   36e88:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   36e8a:	83f3      	strh	r3, [r6, #30]
			cu->latency = lll->latency;
   36e8c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   36e8e:	8433      	strh	r3, [r6, #32]
			cu->timeout = conn->supervision_reload *
   36e90:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
				      lll->interval * 125U / 1000;
   36e94:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
   36e96:	227d      	movs	r2, #125	; 0x7d
			cu->timeout = conn->supervision_reload *
   36e98:	fb01 f303 	mul.w	r3, r1, r3
				      lll->interval * 125U / 1000;
   36e9c:	fb02 f303 	mul.w	r3, r2, r3
   36ea0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   36ea4:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   36ea8:	8473      	strh	r3, [r6, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
   36eaa:	f7ff b82e 	b.w	35f0a <ull_conn_rx+0x46e>
				      0x03) == 0x02) &&
   36eae:	f894 70e6 	ldrb.w	r7, [r4, #230]	; 0xe6
   36eb2:	2f03      	cmp	r7, #3
   36eb4:	f47f abff 	bne.w	366b6 <ull_conn_rx+0xc1a>
   36eb8:	f7ff bbf6 	b.w	366a8 <ull_conn_rx+0xc0c>
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
   36ebc:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
			conn->llcp_ack += 2U;
   36ec0:	3202      	adds	r2, #2
   36ec2:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
   36ec6:	2b00      	cmp	r3, #0
   36ec8:	f040 80b6 	bne.w	37038 <ull_conn_rx+0x159c>
			conn->periph.llcp_type = conn->llcp_type;
   36ecc:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   36ed0:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
   36ed4:	f7ff b8f7 	b.w	360c6 <ull_conn_rx+0x62a>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   36ed8:	2b23      	cmp	r3, #35	; 0x23
			conn->periph.ticks_to_offset =
   36eda:	bf1c      	itt	ne
   36edc:	f8d4 31b0 	ldrne.w	r3, [r4, #432]	; 0x1b0
   36ee0:	f8c4 30e0 	strne.w	r3, [r4, #224]	; 0xe0
   36ee4:	e483      	b.n	367ee <ull_conn_rx+0xd52>
				conn->lll.max_tx_octets = eff_tx_octets;
   36ee6:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
				conn->lll.max_tx_time = eff_tx_time;
   36eea:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   36eee:	f8a6 e020 	strh.w	lr, [r6, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   36ef2:	84b1      	strh	r1, [r6, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   36ef4:	f8a6 c022 	strh.w	ip, [r6, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   36ef8:	84f0      	strh	r0, [r6, #38]	; 0x26
	if (tx) {
   36efa:	f7fe be2a 	b.w	35b52 <ull_conn_rx+0xb6>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   36efe:	4540      	cmp	r0, r8
   36f00:	f47f af3b 	bne.w	36d7a <ull_conn_rx+0x12de>
			    eff_rx_time == conn->lll.max_rx_time &&
   36f04:	45dc      	cmp	ip, fp
   36f06:	f47f af38 	bne.w	36d7a <ull_conn_rx+0x12de>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   36f0a:	682a      	ldr	r2, [r5, #0]
   36f0c:	2501      	movs	r5, #1
   36f0e:	7115      	strb	r5, [r2, #4]
	if (tx) {
   36f10:	2b00      	cmp	r3, #0
   36f12:	f43e ae1e 	beq.w	35b52 <ull_conn_rx+0xb6>
   36f16:	e443      	b.n	367a0 <ull_conn_rx+0xd04>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   36f18:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
   36f1c:	e7a6      	b.n	36e6c <ull_conn_rx+0x13d0>
				uint16_t interval_min =
   36f1e:	f8d6 9020 	ldr.w	r9, [r6, #32]
					cpr->preferred_periodicity;
   36f22:	f896 a028 	ldrb.w	sl, [r6, #40]	; 0x28
				uint16_t interval_min =
   36f26:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
					cpr->preferred_periodicity;
   36f2a:	f8cd a004 	str.w	sl, [sp, #4]
   36f2e:	fa1f f789 	uxth.w	r7, r9
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   36f32:	2f05      	cmp	r7, #5
   36f34:	f67f ade6 	bls.w	36b04 <ull_conn_rx+0x1068>
   36f38:	ea4f 4c19 	mov.w	ip, r9, lsr #16
   36f3c:	f5bc 6f48 	cmp.w	ip, #3200	; 0xc80
   36f40:	f63f ade0 	bhi.w	36b04 <ull_conn_rx+0x1068>
				    (interval_max > 3200) ||
   36f44:	45bc      	cmp	ip, r7
   36f46:	f4ff addd 	bcc.w	36b04 <ull_conn_rx+0x1068>
   36f4a:	fa1f fe88 	uxth.w	lr, r8
				    (interval_min > interval_max) ||
   36f4e:	f5be 7ffa 	cmp.w	lr, #500	; 0x1f4
   36f52:	f4bf add7 	bcs.w	36b04 <ull_conn_rx+0x1068>
   36f56:	ea4f 4718 	mov.w	r7, r8, lsr #16
				    (latency > 499) ||
   36f5a:	f1a7 0a0a 	sub.w	sl, r7, #10
   36f5e:	fa1f fa8a 	uxth.w	sl, sl
   36f62:	f640 4b76 	movw	fp, #3190	; 0xc76
   36f66:	45da      	cmp	sl, fp
   36f68:	f63f adcc 	bhi.w	36b04 <ull_conn_rx+0x1068>
				     ((latency + 1) * interval_max)) ||
   36f6c:	f10e 0a01 	add.w	sl, lr, #1
   36f70:	fa1f fa8a 	uxth.w	sl, sl
   36f74:	fb0c fa0a 	mul.w	sl, ip, sl
				    (timeout > 3200) ||
   36f78:	ebba 0f87 	cmp.w	sl, r7, lsl #2
   36f7c:	f4bf adc2 	bcs.w	36b04 <ull_conn_rx+0x1068>
				     ((latency + 1) * interval_max)) ||
   36f80:	f8dd a004 	ldr.w	sl, [sp, #4]
   36f84:	45e2      	cmp	sl, ip
   36f86:	f63f adbd 	bhi.w	36b04 <ull_conn_rx+0x1068>
				conn->llcp_conn_param.interval_min =
   36f8a:	e9c4 9862 	strd	r9, r8, [r4, #392]	; 0x188
				conn->llcp_conn_param.preferred_periodicity =
   36f8e:	f8dd 8004 	ldr.w	r8, [sp, #4]
   36f92:	f884 8198 	strb.w	r8, [r4, #408]	; 0x198
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   36f96:	f8b6 8029 	ldrh.w	r8, [r6, #41]	; 0x29
				conn->llcp_conn_param.reference_conn_event_count =
   36f9a:	f8a4 819a 	strh.w	r8, [r4, #410]	; 0x19a
					sys_le16_to_cpu(cpr->offset0);
   36f9e:	f8b6 802b 	ldrh.w	r8, [r6, #43]	; 0x2b
				conn->llcp_conn_param.offset0 =
   36fa2:	f8a4 819c 	strh.w	r8, [r4, #412]	; 0x19c
					sys_le16_to_cpu(cpr->offset1);
   36fa6:	f8b6 802d 	ldrh.w	r8, [r6, #45]	; 0x2d
				conn->llcp_conn_param.offset1 =
   36faa:	f8a4 819e 	strh.w	r8, [r4, #414]	; 0x19e
					sys_le16_to_cpu(cpr->offset2);
   36fae:	f8b6 802f 	ldrh.w	r8, [r6, #47]	; 0x2f
				conn->llcp_conn_param.offset2 =
   36fb2:	f8a4 81a0 	strh.w	r8, [r4, #416]	; 0x1a0
					sys_le16_to_cpu(cpr->offset3);
   36fb6:	f8b6 8031 	ldrh.w	r8, [r6, #49]	; 0x31
				conn->llcp_conn_param.offset3 =
   36fba:	f8a4 81a2 	strh.w	r8, [r4, #418]	; 0x1a2
					sys_le16_to_cpu(cpr->offset4);
   36fbe:	f8b6 8033 	ldrh.w	r8, [r6, #51]	; 0x33
				conn->llcp_conn_param.offset4 =
   36fc2:	f8a4 81a4 	strh.w	r8, [r4, #420]	; 0x1a4
					sys_le16_to_cpu(cpr->offset5);
   36fc6:	f8b6 6035 	ldrh.w	r6, [r6, #53]	; 0x35
				conn->llcp_conn_param.offset5 =
   36fca:	f8a4 61a6 	strh.w	r6, [r4, #422]	; 0x1a6
				if ((conn->llcp_conn_param.interval_max !=
   36fce:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
   36fd0:	4566      	cmp	r6, ip
   36fd2:	f000 80e8 	beq.w	371a6 <ull_conn_rx+0x170a>
					if (conn->llcp_enc.pause_tx) {
   36fd6:	f013 0f02 	tst.w	r3, #2
						conn->llcp_conn_param.state =
   36fda:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
					if (conn->llcp_enc.pause_tx) {
   36fde:	f43f ad5d 	beq.w	36a9c <ull_conn_rx+0x1000>
						conn->llcp_conn_param.state =
   36fe2:	2102      	movs	r1, #2
   36fe4:	f361 0303 	bfi	r3, r1, #0, #4
   36fe8:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
						(*rx)->hdr.type =
   36fec:	682b      	ldr	r3, [r5, #0]
   36fee:	2101      	movs	r1, #1
   36ff0:	7119      	strb	r1, [r3, #4]
   36ff2:	f894 1185 	ldrb.w	r1, [r4, #389]	; 0x185
   36ff6:	e556      	b.n	36aa6 <ull_conn_rx+0x100a>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   36ff8:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
		if (err) {
   36ffc:	f7fe bf85 	b.w	35f0a <ull_conn_rx+0x46e>
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   37000:	4a41      	ldr	r2, [pc, #260]	; (37108 <ull_conn_rx+0x166c>)
   37002:	4942      	ldr	r1, [pc, #264]	; (3710c <ull_conn_rx+0x1670>)
   37004:	4842      	ldr	r0, [pc, #264]	; (37110 <ull_conn_rx+0x1674>)
   37006:	f641 5373 	movw	r3, #7539	; 0x1d73
   3700a:	f00b fadd 	bl	425c8 <assert_print>
   3700e:	4040      	eors	r0, r0
   37010:	f380 8811 	msr	BASEPRI, r0
   37014:	f04f 0003 	mov.w	r0, #3
   37018:	df02      	svc	2
   3701a:	e733      	b.n	36e84 <ull_conn_rx+0x13e8>
			conn->tx_data = conn->tx_data->next;
   3701c:	6819      	ldr	r1, [r3, #0]
   3701e:	f8c4 11d8 	str.w	r1, [r4, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   37022:	2a00      	cmp	r2, #0
   37024:	f43f ab51 	beq.w	366ca <ull_conn_rx+0xc2e>
   37028:	f7fe be02 	b.w	35c30 <ull_conn_rx+0x194>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   3702c:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   37030:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
		conn->procedure_expire = 0U;
   37034:	f7ff bbfe 	b.w	36834 <ull_conn_rx+0xd98>
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
   37038:	4a33      	ldr	r2, [pc, #204]	; (37108 <ull_conn_rx+0x166c>)
   3703a:	4937      	ldr	r1, [pc, #220]	; (37118 <ull_conn_rx+0x167c>)
   3703c:	4834      	ldr	r0, [pc, #208]	; (37110 <ull_conn_rx+0x1674>)
   3703e:	f641 23fa 	movw	r3, #6906	; 0x1afa
   37042:	f00b fac1 	bl	425c8 <assert_print>
   37046:	4040      	eors	r0, r0
   37048:	f380 8811 	msr	BASEPRI, r0
   3704c:	f04f 0003 	mov.w	r0, #3
   37050:	df02      	svc	2
   37052:	e73b      	b.n	36ecc <ull_conn_rx+0x1430>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   37054:	2b23      	cmp	r3, #35	; 0x23
			conn->periph.ticks_to_offset =
   37056:	bf1c      	itt	ne
   37058:	f8d4 31b0 	ldrne.w	r3, [r4, #432]	; 0x1b0
   3705c:	f8c4 30e0 	strne.w	r3, [r4, #224]	; 0xe0
   37060:	f7ff ba51 	b.w	36506 <ull_conn_rx+0xa6a>
   37064:	4d2b      	ldr	r5, [pc, #172]	; (37114 <ull_conn_rx+0x1678>)
	if (conn->llcp_conn_param.cache.timeout) {
   37066:	f8b4 0196 	ldrh.w	r0, [r4, #406]	; 0x196
   3706a:	2100      	movs	r1, #0
   3706c:	6029      	str	r1, [r5, #0]
   3706e:	2800      	cmp	r0, #0
   37070:	f000 80b6 	beq.w	371e0 <ull_conn_rx+0x1744>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
   37074:	f8b4 3186 	ldrh.w	r3, [r4, #390]	; 0x186
		conn->llcp_conn_param.timeout =
   37078:	f8a4 018e 	strh.w	r0, [r4, #398]	; 0x18e
		conn->llcp_conn_param.cache.timeout = 0U;
   3707c:	f8a4 1196 	strh.w	r1, [r4, #406]	; 0x196
   37080:	f7ff bbca 	b.w	36818 <ull_conn_rx+0xd7c>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   37084:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   37088:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   3708c:	429a      	cmp	r2, r3
   3708e:	d00e      	beq.n	370ae <ull_conn_rx+0x1612>
   37090:	4a1d      	ldr	r2, [pc, #116]	; (37108 <ull_conn_rx+0x166c>)
   37092:	4922      	ldr	r1, [pc, #136]	; (3711c <ull_conn_rx+0x1680>)
   37094:	481e      	ldr	r0, [pc, #120]	; (37110 <ull_conn_rx+0x1674>)
   37096:	f241 53b5 	movw	r3, #5557	; 0x15b5
   3709a:	f00b fa95 	bl	425c8 <assert_print>
   3709e:	4040      	eors	r0, r0
   370a0:	f380 8811 	msr	BASEPRI, r0
   370a4:	f04f 0003 	mov.w	r0, #3
   370a8:	df02      	svc	2
   370aa:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   370ae:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   370b2:	2106      	movs	r1, #6
   370b4:	f361 0203 	bfi	r2, r1, #0, #4
		conn->llcp_cu.ack--;
   370b8:	3b01      	subs	r3, #1
   370ba:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   370be:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   370c2:	f3c2 1300 	ubfx	r3, r2, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   370c6:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
		conn->llcp_cu.win_size = 1U;
   370ca:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   370cc:	00db      	lsls	r3, r3, #3
   370ce:	430b      	orrs	r3, r1
   370d0:	f022 020f 	bic.w	r2, r2, #15
   370d4:	4313      	orrs	r3, r2
		conn->llcp_cu.win_size = 1U;
   370d6:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   370da:	f8b4 218e 	ldrh.w	r2, [r4, #398]	; 0x18e
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   370de:	f8d4 118a 	ldr.w	r1, [r4, #394]	; 0x18a
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   370e2:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
		conn->llcp_cu.win_offset_us = 0U;
   370e6:	2000      	movs	r0, #0
   370e8:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   370ec:	f8c4 1110 	str.w	r1, [r4, #272]	; 0x110
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   370f0:	f8a4 2114 	strh.w	r2, [r4, #276]	; 0x114
	if (err) {
   370f4:	f7fe bd2b 	b.w	35b4e <ull_conn_rx+0xb2>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   370f8:	7911      	ldrb	r1, [r2, #4]
   370fa:	f001 0103 	and.w	r1, r1, #3
   370fe:	2903      	cmp	r1, #3
   37100:	d031      	beq.n	37166 <ull_conn_rx+0x16ca>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   37102:	e9c4 2274 	strd	r2, r2, [r4, #464]	; 0x1d0
   37106:	e411      	b.n	3692c <ull_conn_rx+0xe90>
   37108:	00049c60 	.word	0x00049c60
   3710c:	000498d8 	.word	0x000498d8
   37110:	000497b0 	.word	0x000497b0
   37114:	20002968 	.word	0x20002968
   37118:	00049d88 	.word	0x00049d88
   3711c:	00049dac 	.word	0x00049dac
			     lll->interval) ||
   37120:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
   37122:	4577      	cmp	r7, lr
   37124:	f47f acb8 	bne.w	36a98 <ull_conn_rx+0xffc>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   37128:	f240 47e2 	movw	r7, #1250	; 0x4e2
   3712c:	fb07 f606 	mul.w	r6, r7, r6
   37130:	f242 7710 	movw	r7, #10000	; 0x2710
   37134:	fb07 6303 	mla	r3, r7, r3, r6
   37138:	3b01      	subs	r3, #1
   3713a:	fbb3 f3f6 	udiv	r3, r3, r6
			    (conn->llcp_conn_param.latency != lll->latency) ||
   3713e:	f8b4 60c2 	ldrh.w	r6, [r4, #194]	; 0xc2
   37142:	b29b      	uxth	r3, r3
   37144:	429e      	cmp	r6, r3
   37146:	f47f aca7 	bne.w	36a98 <ull_conn_rx+0xffc>
				conn->llcp_conn_param.state =
   3714a:	f8b4 3186 	ldrh.w	r3, [r4, #390]	; 0x186
   3714e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   37152:	f043 0301 	orr.w	r3, r3, #1
   37156:	f8a4 3186 	strh.w	r3, [r4, #390]	; 0x186
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3715a:	682b      	ldr	r3, [r5, #0]
   3715c:	2101      	movs	r1, #1
   3715e:	7119      	strb	r1, [r3, #4]
   37160:	f894 1185 	ldrb.w	r1, [r4, #389]	; 0x185
   37164:	e49f      	b.n	36aa6 <ull_conn_rx+0x100a>
	    ((pdu_data_tx->llctrl.opcode !=
   37166:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   37168:	2903      	cmp	r1, #3
   3716a:	d001      	beq.n	37170 <ull_conn_rx+0x16d4>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3716c:	290a      	cmp	r1, #10
   3716e:	d1c8      	bne.n	37102 <ull_conn_rx+0x1666>
			tx->next = conn->tx_head->next;
   37170:	6812      	ldr	r2, [r2, #0]
   37172:	601a      	str	r2, [r3, #0]
			conn->tx_head->next = tx;
   37174:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   37178:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
   3717a:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
				conn->tx_ctrl_last = tx;
   3717e:	f7ff bbdc 	b.w	3693a <ull_conn_rx+0xe9e>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   37182:	f894 11b6 	ldrb.w	r1, [r4, #438]	; 0x1b6
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
   37186:	f011 0f06 	tst.w	r1, #6
   3718a:	f43f aac8 	beq.w	3671e <ull_conn_rx+0xc82>
   3718e:	f7fe bda5 	b.w	35cdc <ull_conn_rx+0x240>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   37192:	682b      	ldr	r3, [r5, #0]
   37194:	2201      	movs	r2, #1
   37196:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
   37198:	232a      	movs	r3, #42	; 0x2a
   3719a:	e615      	b.n	36dc8 <ull_conn_rx+0x132c>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3719c:	682b      	ldr	r3, [r5, #0]
   3719e:	2201      	movs	r2, #1
   371a0:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_INSTANT_PASSED;
   371a2:	2328      	movs	r3, #40	; 0x28
   371a4:	e610      	b.n	36dc8 <ull_conn_rx+0x132c>
				     lll->interval) ||
   371a6:	8da6      	ldrh	r6, [r4, #44]	; 0x2c
   371a8:	4576      	cmp	r6, lr
   371aa:	f47f af14 	bne.w	36fd6 <ull_conn_rx+0x153a>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   371ae:	f240 46e2 	movw	r6, #1250	; 0x4e2
   371b2:	fb06 fc0c 	mul.w	ip, r6, ip
   371b6:	f242 7610 	movw	r6, #10000	; 0x2710
   371ba:	fb06 c607 	mla	r6, r6, r7, ip
				     lll->latency) ||
   371be:	f8b4 70c2 	ldrh.w	r7, [r4, #194]	; 0xc2
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   371c2:	3e01      	subs	r6, #1
   371c4:	fbb6 f6fc 	udiv	r6, r6, ip
				     lll->latency) ||
   371c8:	b2b6      	uxth	r6, r6
   371ca:	42b7      	cmp	r7, r6
   371cc:	f47f af03 	bne.w	36fd6 <ull_conn_rx+0x153a>
   371d0:	e7bb      	b.n	3714a <ull_conn_rx+0x16ae>
			conn->tx_data = conn->tx_data->next;
   371d2:	6810      	ldr	r0, [r2, #0]
   371d4:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   371d8:	2900      	cmp	r1, #0
   371da:	d0c9      	beq.n	37170 <ull_conn_rx+0x16d4>
   371dc:	f7ff bba6 	b.w	3692c <ull_conn_rx+0xe90>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   371e0:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
   371e4:	f7ff bb26 	b.w	36834 <ull_conn_rx+0xd98>

000371e8 <ull_conn_llcp>:
{
   371e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   371ec:	4604      	mov	r4, r0
	if ((conn->llcp_ack == conn->llcp_req) &&
   371ee:	f890 00e5 	ldrb.w	r0, [r0, #229]	; 0xe5
   371f2:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   371f6:	4298      	cmp	r0, r3
{
   371f8:	460e      	mov	r6, r1
   371fa:	4615      	mov	r5, r2
	if ((conn->llcp_ack == conn->llcp_req) &&
   371fc:	d030      	beq.n	37260 <ull_conn_llcp+0x78>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   371fe:	1a1b      	subs	r3, r3, r0
   37200:	f003 0303 	and.w	r3, r3, #3
   37204:	2b02      	cmp	r3, #2
   37206:	d010      	beq.n	3722a <ull_conn_llcp+0x42>
   37208:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
   3720c:	460a      	mov	r2, r1
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3720e:	2a00      	cmp	r2, #0
   37210:	db4b      	blt.n	372aa <ull_conn_llcp+0xc2>
	if (((conn->llcp_terminate.req - conn->llcp_terminate.ack) & 0xFF) ==
   37212:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
   37216:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
   3721a:	1a9b      	subs	r3, r3, r2
   3721c:	b2db      	uxtb	r3, r3
   3721e:	2b01      	cmp	r3, #1
   37220:	f000 8182 	beq.w	37528 <ull_conn_llcp+0x340>
				return 0;
   37224:	2000      	movs	r0, #0
}
   37226:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   3722a:	f894 21b5 	ldrb.w	r2, [r4, #437]	; 0x1b5
   3722e:	f894 31b4 	ldrb.w	r3, [r4, #436]	; 0x1b4
   37232:	429a      	cmp	r2, r3
   37234:	d006      	beq.n	37244 <ull_conn_llcp+0x5c>
			     LLCP_LENGTH_STATE_RESIZE) ||
   37236:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
			if ((conn->llcp_length.state ==
   3723a:	f003 0306 	and.w	r3, r3, #6
   3723e:	2b04      	cmp	r3, #4
   37240:	f000 821b 	beq.w	3767a <ull_conn_llcp+0x492>
		switch (conn->llcp_type) {
   37244:	f894 70e6 	ldrb.w	r7, [r4, #230]	; 0xe6
   37248:	1e7b      	subs	r3, r7, #1
   3724a:	2b05      	cmp	r3, #5
   3724c:	f200 815e 	bhi.w	3750c <ull_conn_llcp+0x324>
   37250:	e8df f013 	tbh	[pc, r3, lsl #1]
   37254:	01200151 	.word	0x01200151
   37258:	015c0095 	.word	0x015c0095
   3725c:	00460051 	.word	0x00460051
   37260:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
	if ((conn->llcp_ack == conn->llcp_req) &&
   37264:	2900      	cmp	r1, #0
   37266:	460a      	mov	r2, r1
   37268:	f2c0 81b1 	blt.w	375ce <ull_conn_llcp+0x3e6>
	    !conn->llcp_enc.pause_rx) {
   3726c:	f894 7166 	ldrb.w	r7, [r4, #358]	; 0x166
	    (!conn->lll.role || (conn->periph.llcp_type == LLCP_NONE)) &&
   37270:	f017 0f01 	tst.w	r7, #1
   37274:	d1cd      	bne.n	37212 <ull_conn_llcp+0x2a>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
   37276:	f894 c10d 	ldrb.w	ip, [r4, #269]	; 0x10d
   3727a:	f894 e10c 	ldrb.w	lr, [r4, #268]	; 0x10c
   3727e:	45e6      	cmp	lr, ip
   37280:	f000 81b4 	beq.w	375ec <ull_conn_llcp+0x404>
			if (memq_peek(conn->lll.memq_tx.head,
   37284:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
   37288:	2200      	movs	r2, #0
   3728a:	f7f8 ff31 	bl	300f0 <memq_peek>
   3728e:	2800      	cmp	r0, #0
   37290:	d1c8      	bne.n	37224 <ull_conn_llcp+0x3c>
			conn->llcp_ack -= 2U;
   37292:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   37296:	3802      	subs	r0, #2
			conn->llcp_type = LLCP_CONN_UPD;
   37298:	2301      	movs	r3, #1
			conn->llcp_ack -= 2U;
   3729a:	b2c0      	uxtb	r0, r0
			conn->llcp_type = LLCP_CONN_UPD;
   3729c:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
			conn->llcp_ack -= 2U;
   372a0:	f884 00e5 	strb.w	r0, [r4, #229]	; 0xe5
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   372a4:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   372a8:	e7a9      	b.n	371fe <ull_conn_llcp+0x16>
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   372aa:	f894 70d9 	ldrb.w	r7, [r4, #217]	; 0xd9
   372ae:	2f00      	cmp	r7, #0
   372b0:	d0af      	beq.n	37212 <ull_conn_llcp+0x2a>
		switch (conn->periph.llcp_type) {
   372b2:	2f02      	cmp	r7, #2
   372b4:	f000 8325 	beq.w	37902 <ull_conn_llcp+0x71a>
   372b8:	2f06      	cmp	r7, #6
   372ba:	f000 834b 	beq.w	37954 <ull_conn_llcp+0x76c>
   372be:	2f01      	cmp	r7, #1
   372c0:	f000 8314 	beq.w	378ec <ull_conn_llcp+0x704>
			LL_ASSERT(0);
   372c4:	4ac5      	ldr	r2, [pc, #788]	; (375dc <ull_conn_llcp+0x3f4>)
   372c6:	49c6      	ldr	r1, [pc, #792]	; (375e0 <ull_conn_llcp+0x3f8>)
   372c8:	48c6      	ldr	r0, [pc, #792]	; (375e4 <ull_conn_llcp+0x3fc>)
   372ca:	f240 5356 	movw	r3, #1366	; 0x556
   372ce:	f00b f97b 	bl	425c8 <assert_print>
   372d2:	4040      	eors	r0, r0
   372d4:	f380 8811 	msr	BASEPRI, r0
   372d8:	f04f 0003 	mov.w	r0, #3
   372dc:	df02      	svc	2
			break;
   372de:	e798      	b.n	37212 <ull_conn_llcp+0x2a>
			event_counter = lll->event_counter +
   372e0:	8e61      	ldrh	r1, [r4, #50]	; 0x32
   372e2:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   372e4:	4419      	add	r1, r3
   372e6:	4429      	add	r1, r5
			event_phy_upd_ind_prep(conn, event_counter);
   372e8:	b289      	uxth	r1, r1
   372ea:	4620      	mov	r0, r4
   372ec:	f7fd fe70 	bl	34fd0 <event_phy_upd_ind_prep>
		break;
   372f0:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   372f4:	e78b      	b.n	3720e <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   372f6:	48bc      	ldr	r0, [pc, #752]	; (375e8 <ull_conn_llcp+0x400>)
   372f8:	f7f8 fe8a 	bl	30010 <mem_acquire>
	if (tx) {
   372fc:	2800      	cmp	r0, #0
   372fe:	f000 8102 	beq.w	37506 <ull_conn_llcp+0x31e>
		conn->llcp_ack = conn->llcp_req;
   37302:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   37306:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3730a:	7903      	ldrb	r3, [r0, #4]
   3730c:	f043 0303 	orr.w	r3, r3, #3
   37310:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
   37312:	2301      	movs	r3, #1
   37314:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   37316:	2312      	movs	r3, #18
   37318:	71c3      	strb	r3, [r0, #7]
	    conn->tx_head &&
   3731a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
	if (
   3731e:	2b00      	cmp	r3, #0
   37320:	f000 8328 	beq.w	37974 <ull_conn_llcp+0x78c>
	    !conn->llcp_cu.pause_tx &&
   37324:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
	    conn->tx_head &&
   37328:	06d1      	lsls	r1, r2, #27
   3732a:	f100 8323 	bmi.w	37974 <ull_conn_llcp+0x78c>
	    !conn->llcp_enc.pause_tx &&
   3732e:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    !conn->llcp_cu.pause_tx &&
   37332:	0792      	lsls	r2, r2, #30
   37334:	f100 831e 	bmi.w	37974 <ull_conn_llcp+0x78c>
	    !conn->llcp_phy.pause_tx &&
   37338:	f894 21c7 	ldrb.w	r2, [r4, #455]	; 0x1c7
   3733c:	07d7      	lsls	r7, r2, #31
   3733e:	f100 8319 	bmi.w	37974 <ull_conn_llcp+0x78c>
		if (conn->tx_head == conn->tx_data) {
   37342:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   37346:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
		if (conn->tx_head == conn->tx_data) {
   3734a:	428b      	cmp	r3, r1
   3734c:	f000 876f 	beq.w	3822e <ull_conn_llcp+0x1046>
		} else if (!conn->tx_ctrl) {
   37350:	2a00      	cmp	r2, #0
   37352:	f000 87fa 	beq.w	3834a <ull_conn_llcp+0x1162>
	tx->next = conn->tx_ctrl_last->next;
   37356:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   3735a:	681b      	ldr	r3, [r3, #0]
   3735c:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   3735e:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   37362:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   37364:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
	if (!tx->next) {
   37368:	6803      	ldr	r3, [r0, #0]
   3736a:	2b00      	cmp	r3, #0
   3736c:	f000 8560 	beq.w	37e30 <ull_conn_llcp+0xc48>
		conn->procedure_expire = conn->procedure_reload;
   37370:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   37374:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   37378:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   3737c:	e747      	b.n	3720e <ull_conn_llcp+0x26>
	if (conn->llcp.encryption.state) {
   3737e:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   37382:	f013 0903 	ands.w	r9, r3, #3
   37386:	f000 820e 	beq.w	377a6 <ull_conn_llcp+0x5be>
		if (lll->role &&
   3738a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3738e:	2b00      	cmp	r3, #0
   37390:	f6bf af3f 	bge.w	37212 <ull_conn_llcp+0x2a>
   37394:	f1b9 0f01 	cmp.w	r9, #1
   37398:	d187      	bne.n	372aa <ull_conn_llcp+0xc2>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3739a:	4893      	ldr	r0, [pc, #588]	; (375e8 <ull_conn_llcp+0x400>)
   3739c:	f7f8 fe38 	bl	30010 <mem_acquire>
	if (!tx) {
   373a0:	4607      	mov	r7, r0
   373a2:	2800      	cmp	r0, #0
   373a4:	f000 80af 	beq.w	37506 <ull_conn_llcp+0x31e>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   373a8:	7903      	ldrb	r3, [r0, #4]
   373aa:	f043 0303 	orr.w	r3, r3, #3
   373ae:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   373b0:	f04f 0904 	mov.w	r9, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   373b4:	230d      	movs	r3, #13
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   373b6:	f100 0808 	add.w	r8, r0, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   373ba:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   373bc:	f880 9007 	strb.w	r9, [r0, #7]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   373c0:	210c      	movs	r1, #12
   373c2:	4640      	mov	r0, r8
   373c4:	f002 fb76 	bl	39ab4 <lll_csrand_isr_get>
	memcpy(&conn->llcp.encryption.skd[8],
   373c8:	4641      	mov	r1, r8
   373ca:	2208      	movs	r2, #8
   373cc:	f104 00fe 	add.w	r0, r4, #254	; 0xfe
   373d0:	f00c ffa2 	bl	44318 <memcpy>
	memcpy(&conn->lll.ccm_rx.iv[4],
   373d4:	464a      	mov	r2, r9
   373d6:	f107 0110 	add.w	r1, r7, #16
   373da:	f104 0098 	add.w	r0, r4, #152	; 0x98
   373de:	f00c ff9b 	bl	44318 <memcpy>
	    conn->tx_head &&
   373e2:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
	if (
   373e6:	2b00      	cmp	r3, #0
   373e8:	f000 8538 	beq.w	37e5c <ull_conn_llcp+0xc74>
	    !conn->llcp_cu.pause_tx &&
   373ec:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
	    conn->tx_head &&
   373f0:	06d0      	lsls	r0, r2, #27
   373f2:	f100 8533 	bmi.w	37e5c <ull_conn_llcp+0xc74>
	    !conn->llcp_enc.pause_tx &&
   373f6:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    !conn->llcp_cu.pause_tx &&
   373fa:	0791      	lsls	r1, r2, #30
   373fc:	f100 852e 	bmi.w	37e5c <ull_conn_llcp+0xc74>
	    !conn->llcp_phy.pause_tx &&
   37400:	f894 21c7 	ldrb.w	r2, [r4, #455]	; 0x1c7
   37404:	07d2      	lsls	r2, r2, #31
   37406:	f100 8529 	bmi.w	37e5c <ull_conn_llcp+0xc74>
		if (conn->tx_head == conn->tx_data) {
   3740a:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   3740e:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
		if (conn->tx_head == conn->tx_data) {
   37412:	428b      	cmp	r3, r1
   37414:	f001 8033 	beq.w	3847e <ull_conn_llcp+0x1296>
		} else if (!conn->tx_ctrl) {
   37418:	2a00      	cmp	r2, #0
   3741a:	f001 80bb 	beq.w	38594 <ull_conn_llcp+0x13ac>
	tx->next = conn->tx_ctrl_last->next;
   3741e:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   37422:	681b      	ldr	r3, [r3, #0]
   37424:	603b      	str	r3, [r7, #0]
	conn->tx_ctrl_last->next = tx;
   37426:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   3742a:	601f      	str	r7, [r3, #0]
	conn->tx_ctrl_last = tx;
   3742c:	f8c4 71d4 	str.w	r7, [r4, #468]	; 0x1d4
	if (!tx->next) {
   37430:	683b      	ldr	r3, [r7, #0]
   37432:	2b00      	cmp	r3, #0
   37434:	f000 8695 	beq.w	38162 <ull_conn_llcp+0xf7a>
			rx = ll_pdu_rx_alloc();
   37438:	f7fb ffd0 	bl	333dc <ll_pdu_rx_alloc>
			if (!rx) {
   3743c:	4607      	mov	r7, r0
   3743e:	2800      	cmp	r0, #0
   37440:	d061      	beq.n	37506 <ull_conn_llcp+0x31e>
			rx->hdr.handle = conn->lll.handle;
   37442:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   37444:	80c3      	strh	r3, [r0, #6]
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   37446:	2303      	movs	r3, #3
   37448:	7103      	strb	r3, [r0, #4]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   3744a:	77c3      	strb	r3, [r0, #31]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   3744c:	7f03      	ldrb	r3, [r0, #28]
   3744e:	f043 0303 	orr.w	r3, r3, #3
   37452:	7703      	strb	r3, [r0, #28]
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   37454:	2317      	movs	r3, #23
			memcpy(&pdu->llctrl.enc_req.rand[0],
   37456:	2208      	movs	r2, #8
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   37458:	7743      	strb	r3, [r0, #29]
			memcpy(&pdu->llctrl.enc_req.rand[0],
   3745a:	f204 1169 	addw	r1, r4, #361	; 0x169
   3745e:	3020      	adds	r0, #32
   37460:	f00c ff5a 	bl	44318 <memcpy>
			pdu->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   37464:	f894 3167 	ldrb.w	r3, [r4, #359]	; 0x167
   37468:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			pdu->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   3746c:	f894 3168 	ldrb.w	r3, [r4, #360]	; 0x168
   37470:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			ll_rx_put(rx->hdr.link, rx);
   37474:	6838      	ldr	r0, [r7, #0]
   37476:	4639      	mov	r1, r7
   37478:	f7fb ff7e 	bl	33378 <ll_rx_put>
			ll_rx_sched();
   3747c:	f7fb ff86 	bl	3338c <ll_rx_sched>
			conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
   37480:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   37484:	2202      	movs	r2, #2
   37486:	f362 0301 	bfi	r3, r2, #0, #2
   3748a:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
   3748e:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   37492:	e6bc      	b.n	3720e <ull_conn_llcp+0x26>
			event_counter = lll->event_counter +
   37494:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   37496:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   37498:	4413      	add	r3, r2
	if (conn->llcp.chan_map.initiate) {
   3749a:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
			event_counter = lll->event_counter +
   3749e:	442b      	add	r3, r5
	if (conn->llcp.chan_map.initiate) {
   374a0:	f012 0101 	ands.w	r1, r2, #1
			event_counter = lll->event_counter +
   374a4:	b29f      	uxth	r7, r3
	if (conn->llcp.chan_map.initiate) {
   374a6:	f040 8127 	bne.w	376f8 <ull_conn_llcp+0x510>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   374aa:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   374ae:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   374b2:	1afb      	subs	r3, r7, r3
   374b4:	041f      	lsls	r7, r3, #16
   374b6:	f53f aeaa 	bmi.w	3720e <ull_conn_llcp+0x26>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   374ba:	2a00      	cmp	r2, #0
   374bc:	f2c0 84a2 	blt.w	37e04 <ull_conn_llcp+0xc1c>
			conn->llcp_ack = conn->llcp_req;
   374c0:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   374c4:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		memcpy(&lll->data_chan_map[0],
   374c8:	f104 0734 	add.w	r7, r4, #52	; 0x34
   374cc:	2205      	movs	r2, #5
   374ce:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
   374d2:	4638      	mov	r0, r7
   374d4:	f00c ff20 	bl	44318 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
   374d8:	2105      	movs	r1, #5
   374da:	4638      	mov	r0, r7
   374dc:	f7f8 ff7a 	bl	303d4 <util_ones_count_get>
		lll->data_chan_count =
   374e0:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   374e4:	2301      	movs	r3, #1
		lll->data_chan_count =
   374e6:	f360 0205 	bfi	r2, r0, #0, #6
   374ea:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   374ee:	f884 31e0 	strb.w	r3, [r4, #480]	; 0x1e0
   374f2:	b252      	sxtb	r2, r2
   374f4:	e68b      	b.n	3720e <ull_conn_llcp+0x26>
			if (event_conn_upd_prep(conn, lazy,
   374f6:	4632      	mov	r2, r6
   374f8:	4629      	mov	r1, r5
   374fa:	4620      	mov	r0, r4
   374fc:	f7ef fc14 	bl	26d28 <event_conn_upd_prep>
   37500:	2800      	cmp	r0, #0
   37502:	f000 81fb 	beq.w	378fc <ull_conn_llcp+0x714>
			break;
   37506:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   3750a:	e680      	b.n	3720e <ull_conn_llcp+0x26>
			LL_ASSERT(0);
   3750c:	4a33      	ldr	r2, [pc, #204]	; (375dc <ull_conn_llcp+0x3f4>)
   3750e:	4934      	ldr	r1, [pc, #208]	; (375e0 <ull_conn_llcp+0x3f8>)
   37510:	4834      	ldr	r0, [pc, #208]	; (375e4 <ull_conn_llcp+0x3fc>)
   37512:	f240 5325 	movw	r3, #1317	; 0x525
   37516:	f00b f857 	bl	425c8 <assert_print>
   3751a:	4040      	eors	r0, r0
   3751c:	f380 8811 	msr	BASEPRI, r0
   37520:	f04f 0003 	mov.w	r0, #3
   37524:	df02      	svc	2
   37526:	e7ee      	b.n	37506 <ull_conn_llcp+0x31e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   37528:	482f      	ldr	r0, [pc, #188]	; (375e8 <ull_conn_llcp+0x400>)
   3752a:	f7f8 fd71 	bl	30010 <mem_acquire>
		if (tx) {
   3752e:	2800      	cmp	r0, #0
   37530:	d040      	beq.n	375b4 <ull_conn_llcp+0x3cc>
			conn->llcp_terminate.ack--;
   37532:	f894 3141 	ldrb.w	r3, [r4, #321]	; 0x141
   37536:	3b01      	subs	r3, #1
   37538:	f884 3141 	strb.w	r3, [r4, #321]	; 0x141
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3753c:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
   3753e:	2202      	movs	r2, #2
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   37540:	f043 0303 	orr.w	r3, r3, #3
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
   37544:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   37546:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
   37548:	71c2      	strb	r2, [r0, #7]
				conn->llcp_terminate.reason_own;
   3754a:	f894 3142 	ldrb.w	r3, [r4, #322]	; 0x142
			pdu_tx->llctrl.terminate_ind.error_code =
   3754e:	7203      	strb	r3, [r0, #8]
	    conn->tx_head &&
   37550:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
	if (
   37554:	b1e3      	cbz	r3, 37590 <ull_conn_llcp+0x3a8>
	    !conn->llcp_cu.pause_tx &&
   37556:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
	    conn->tx_head &&
   3755a:	06d5      	lsls	r5, r2, #27
   3755c:	d418      	bmi.n	37590 <ull_conn_llcp+0x3a8>
	    !conn->llcp_enc.pause_tx &&
   3755e:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    !conn->llcp_cu.pause_tx &&
   37562:	0791      	lsls	r1, r2, #30
   37564:	d414      	bmi.n	37590 <ull_conn_llcp+0x3a8>
	    !conn->llcp_phy.pause_tx &&
   37566:	f894 21c7 	ldrb.w	r2, [r4, #455]	; 0x1c7
   3756a:	07d2      	lsls	r2, r2, #31
   3756c:	d410      	bmi.n	37590 <ull_conn_llcp+0x3a8>
		if (conn->tx_head == conn->tx_data) {
   3756e:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   37572:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (conn->tx_head == conn->tx_data) {
   37576:	4293      	cmp	r3, r2
   37578:	f000 85be 	beq.w	380f8 <ull_conn_llcp+0xf10>
		} else if (!conn->tx_ctrl) {
   3757c:	b969      	cbnz	r1, 3759a <ull_conn_llcp+0x3b2>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3757e:	791a      	ldrb	r2, [r3, #4]
   37580:	f002 0203 	and.w	r2, r2, #3
   37584:	2a03      	cmp	r2, #3
   37586:	f000 866d 	beq.w	38264 <ull_conn_llcp+0x107c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3758a:	e9c4 3374 	strd	r3, r3, [r4, #464]	; 0x1d0
   3758e:	e004      	b.n	3759a <ull_conn_llcp+0x3b2>
		if (!conn->tx_ctrl) {
   37590:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   37594:	2a00      	cmp	r2, #0
   37596:	f000 81e9 	beq.w	3796c <ull_conn_llcp+0x784>
	tx->next = conn->tx_ctrl_last->next;
   3759a:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   3759e:	681b      	ldr	r3, [r3, #0]
   375a0:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   375a2:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   375a6:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   375a8:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
	if (!tx->next) {
   375ac:	6803      	ldr	r3, [r0, #0]
   375ae:	2b00      	cmp	r3, #0
   375b0:	f000 81d9 	beq.w	37966 <ull_conn_llcp+0x77e>
		if (!conn->procedure_expire) {
   375b4:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   375b8:	2b00      	cmp	r3, #0
   375ba:	f47f ae33 	bne.w	37224 <ull_conn_llcp+0x3c>
			conn->procedure_expire = conn->supervision_reload;
   375be:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
			if (conn->procedure_expire <= 1U) {
   375c2:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
   375c4:	bf98      	it	ls
   375c6:	3301      	addls	r3, #1
   375c8:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   375cc:	e62a      	b.n	37224 <ull_conn_llcp+0x3c>
	    (!conn->lll.role || (conn->periph.llcp_type == LLCP_NONE)) &&
   375ce:	f894 70d9 	ldrb.w	r7, [r4, #217]	; 0xd9
   375d2:	2f00      	cmp	r7, #0
   375d4:	f47f ae6d 	bne.w	372b2 <ull_conn_llcp+0xca>
   375d8:	e648      	b.n	3726c <ull_conn_llcp+0x84>
   375da:	bf00      	nop
   375dc:	00049c60 	.word	0x00049c60
   375e0:	00049810 	.word	0x00049810
   375e4:	000497b0 	.word	0x000497b0
   375e8:	20002820 	.word	0x20002820
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
   375ec:	f894 e121 	ldrb.w	lr, [r4, #289]	; 0x121
   375f0:	f894 8120 	ldrb.w	r8, [r4, #288]	; 0x120
   375f4:	45c6      	cmp	lr, r8
   375f6:	d144      	bne.n	37682 <ull_conn_llcp+0x49a>
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
   375f8:	f894 e139 	ldrb.w	lr, [r4, #313]	; 0x139
   375fc:	f894 8138 	ldrb.w	r8, [r4, #312]	; 0x138
   37600:	45c6      	cmp	lr, r8
   37602:	f000 81c0 	beq.w	37986 <ull_conn_llcp+0x79e>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
   37606:	ebae 0e08 	sub.w	lr, lr, r8
   3760a:	f01e 0f01 	tst.w	lr, #1
   3760e:	f43f adfe 	beq.w	3720e <ull_conn_llcp+0x26>
	if (conn->llcp_version.tx == 0U) {
   37612:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   37616:	07d8      	lsls	r0, r3, #31
   37618:	f140 84dd 	bpl.w	37fd6 <ull_conn_llcp+0xdee>
	} else if (conn->llcp_version.rx) {
   3761c:	0798      	lsls	r0, r3, #30
   3761e:	f140 8529 	bpl.w	38074 <ull_conn_llcp+0xe8c>
		rx = ll_pdu_rx_alloc();
   37622:	f7fb fedb 	bl	333dc <ll_pdu_rx_alloc>
		if (!rx) {
   37626:	4601      	mov	r1, r0
   37628:	2800      	cmp	r0, #0
   3762a:	f000 8365 	beq.w	37cf8 <ull_conn_llcp+0xb10>
		conn->llcp_version.ack = conn->llcp_version.req;
   3762e:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
   37632:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
		rx->hdr.handle = conn->lll.handle;
   37636:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   37638:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   3763a:	2303      	movs	r3, #3
   3763c:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   3763e:	7f03      	ldrb	r3, [r0, #28]
   37640:	f043 0303 	orr.w	r3, r3, #3
   37644:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
   37646:	2306      	movs	r3, #6
   37648:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   3764a:	230c      	movs	r3, #12
   3764c:	77c3      	strb	r3, [r0, #31]
			conn->llcp_version.version_number;
   3764e:	f894 313b 	ldrb.w	r3, [r4, #315]	; 0x13b
		pdu->llctrl.version_ind.version_number =
   37652:	f880 3020 	strb.w	r3, [r0, #32]
			sys_cpu_to_le16(conn->llcp_version.company_id);
   37656:	f8b4 313c 	ldrh.w	r3, [r4, #316]	; 0x13c
		pdu->llctrl.version_ind.company_id =
   3765a:	f8a0 3021 	strh.w	r3, [r0, #33]	; 0x21
			sys_cpu_to_le16(conn->llcp_version.sub_version_number);
   3765e:	f8b4 313e 	ldrh.w	r3, [r4, #318]	; 0x13e
		pdu->llctrl.version_ind.sub_version_number =
   37662:	f8a0 3023 	strh.w	r3, [r0, #35]	; 0x23
	ll_rx_put(rx->hdr.link, rx);
   37666:	6808      	ldr	r0, [r1, #0]
   37668:	f7fb fe86 	bl	33378 <ll_rx_put>
	ll_rx_sched();
   3766c:	f7fb fe8e 	bl	3338c <ll_rx_sched>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   37670:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   37674:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   37678:	e5c1      	b.n	371fe <ull_conn_llcp+0x16>
				event_len_prep(conn);
   3767a:	4620      	mov	r0, r4
   3767c:	f7fd fba6 	bl	34dcc <event_len_prep>
   37680:	e5e0      	b.n	37244 <ull_conn_llcp+0x5c>
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
   37682:	ebae 0e08 	sub.w	lr, lr, r8
   37686:	f01e 0f01 	tst.w	lr, #1
   3768a:	f43f adc0 	beq.w	3720e <ull_conn_llcp+0x26>
	if (conn->common.fex_valid) {
   3768e:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   37692:	f013 0701 	ands.w	r7, r3, #1
   37696:	f000 8335 	beq.w	37d04 <ull_conn_llcp+0xb1c>
		rx = ll_pdu_rx_alloc();
   3769a:	f7fb fe9f 	bl	333dc <ll_pdu_rx_alloc>
		if (!rx) {
   3769e:	4607      	mov	r7, r0
   376a0:	2800      	cmp	r0, #0
   376a2:	f000 8329 	beq.w	37cf8 <ull_conn_llcp+0xb10>
		conn->llcp_feature.ack = conn->llcp_feature.req;
   376a6:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
   376aa:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
		rx->hdr.handle = conn->lll.handle;
   376ae:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   376b0:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   376b2:	2303      	movs	r3, #3
   376b4:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   376b6:	7f03      	ldrb	r3, [r0, #28]
   376b8:	f043 0303 	orr.w	r3, r3, #3
   376bc:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   376be:	2309      	movs	r3, #9
   376c0:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   376c2:	77c3      	strb	r3, [r0, #31]
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
   376c4:	2208      	movs	r2, #8
   376c6:	2100      	movs	r1, #0
   376c8:	3020      	adds	r0, #32
   376ca:	f00c fe30 	bl	4432e <memset>
	sys_put_le32(val >> 32, &dst[4]);
   376ce:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
	dst[0] = val;
   376d2:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   376d4:	f3c3 2107 	ubfx	r1, r3, #8, #8
	dst[0] = val;
   376d8:	f363 0207 	bfi	r2, r3, #0, #8
   376dc:	f361 220f 	bfi	r2, r1, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   376e0:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   376e2:	f363 4217 	bfi	r2, r3, #16, #8
	dst[1] = val >> 8;
   376e6:	0a1b      	lsrs	r3, r3, #8
	dst[0] = val;
   376e8:	f363 621f 	bfi	r2, r3, #24, #8
   376ec:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
   376f0:	623b      	str	r3, [r7, #32]
   376f2:	627a      	str	r2, [r7, #36]	; 0x24
		ll_rx_put(rx->hdr.link, rx);
   376f4:	4639      	mov	r1, r7
   376f6:	e7b6      	b.n	37666 <ull_conn_llcp+0x47e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   376f8:	48cf      	ldr	r0, [pc, #828]	; (37a38 <ull_conn_llcp+0x850>)
   376fa:	f7f8 fc89 	bl	30010 <mem_acquire>
		if (tx) {
   376fe:	4680      	mov	r8, r0
   37700:	2800      	cmp	r0, #0
   37702:	f43f af00 	beq.w	37506 <ull_conn_llcp+0x31e>
						      conn->lll.latency + 6;
   37706:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   37708:	3306      	adds	r3, #6
   3770a:	443b      	add	r3, r7
			conn->llcp.chan_map.instant = event_counter +
   3770c:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
			conn->llcp.chan_map.initiate = 0U;
   37710:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   37714:	f36f 0300 	bfc	r3, #0, #1
   37718:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3771c:	7903      	ldrb	r3, [r0, #4]
   3771e:	f043 0303 	orr.w	r3, r3, #3
   37722:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   37724:	2308      	movs	r3, #8
   37726:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   37728:	2301      	movs	r3, #1
   3772a:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   3772c:	2205      	movs	r2, #5
   3772e:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
   37732:	3008      	adds	r0, #8
   37734:	f00c fdf0 	bl	44318 <memcpy>
				sys_cpu_to_le16(conn->llcp.chan_map.instant);
   37738:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   3773c:	f8a8 300d 	strh.w	r3, [r8, #13]
	    conn->tx_head &&
   37740:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
	if (
   37744:	2b00      	cmp	r3, #0
   37746:	f000 8369 	beq.w	37e1c <ull_conn_llcp+0xc34>
	    !conn->llcp_cu.pause_tx &&
   3774a:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
	    conn->tx_head &&
   3774e:	06d0      	lsls	r0, r2, #27
   37750:	f100 8364 	bmi.w	37e1c <ull_conn_llcp+0xc34>
	    !conn->llcp_enc.pause_tx &&
   37754:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    !conn->llcp_cu.pause_tx &&
   37758:	0791      	lsls	r1, r2, #30
   3775a:	f100 835f 	bmi.w	37e1c <ull_conn_llcp+0xc34>
	    !conn->llcp_phy.pause_tx &&
   3775e:	f894 21c7 	ldrb.w	r2, [r4, #455]	; 0x1c7
   37762:	07d2      	lsls	r2, r2, #31
   37764:	f100 835a 	bmi.w	37e1c <ull_conn_llcp+0xc34>
		if (conn->tx_head == conn->tx_data) {
   37768:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   3776c:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
		if (conn->tx_head == conn->tx_data) {
   37770:	428b      	cmp	r3, r1
   37772:	f000 85d9 	beq.w	38328 <ull_conn_llcp+0x1140>
		} else if (!conn->tx_ctrl) {
   37776:	2a00      	cmp	r2, #0
   37778:	f000 86ab 	beq.w	384d2 <ull_conn_llcp+0x12ea>
	tx->next = conn->tx_ctrl_last->next;
   3777c:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   37780:	681b      	ldr	r3, [r3, #0]
   37782:	f8c8 3000 	str.w	r3, [r8]
	conn->tx_ctrl_last->next = tx;
   37786:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   3778a:	f8c3 8000 	str.w	r8, [r3]
	conn->tx_ctrl_last = tx;
   3778e:	f8c4 81d4 	str.w	r8, [r4, #468]	; 0x1d4
	if (!tx->next) {
   37792:	f8d8 3000 	ldr.w	r3, [r8]
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   37796:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
	if (!tx->next) {
   3779a:	2b00      	cmp	r3, #0
   3779c:	f47f aea9 	bne.w	374f2 <ull_conn_llcp+0x30a>
		conn->tx_data_last = tx;
   377a0:	f8c4 81dc 	str.w	r8, [r4, #476]	; 0x1dc
   377a4:	e6a5      	b.n	374f2 <ull_conn_llcp+0x30a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   377a6:	48a4      	ldr	r0, [pc, #656]	; (37a38 <ull_conn_llcp+0x850>)
   377a8:	f7f8 fc32 	bl	30010 <mem_acquire>
	if (!tx) {
   377ac:	4680      	mov	r8, r0
   377ae:	2800      	cmp	r0, #0
   377b0:	f43f aea9 	beq.w	37506 <ull_conn_llcp+0x31e>
	if (!lll->role) {
   377b4:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   377b8:	2b00      	cmp	r3, #0
   377ba:	f280 8359 	bge.w	37e70 <ull_conn_llcp+0xc88>
	else if (!lll->enc_rx) {
   377be:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   377c2:	0719      	lsls	r1, r3, #28
   377c4:	f100 8469 	bmi.w	3809a <ull_conn_llcp+0xeb2>
		if (conn->llcp.encryption.error_code) {
   377c8:	f894 90f5 	ldrb.w	r9, [r4, #245]	; 0xf5
   377cc:	f1b9 0f00 	cmp.w	r9, #0
   377d0:	f040 84cb 	bne.w	3816a <ull_conn_llcp+0xf82>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
   377d4:	f104 077b 	add.w	r7, r4, #123	; 0x7b
   377d8:	463b      	mov	r3, r7
   377da:	464a      	mov	r2, r9
   377dc:	f104 01f6 	add.w	r1, r4, #246	; 0xf6
   377e0:	f204 1071 	addw	r0, r4, #369	; 0x171
   377e4:	f003 ff00 	bl	3b5e8 <ecb_encrypt>
			memcpy(&lll->ccm_tx.key[0],
   377e8:	4639      	mov	r1, r7
   377ea:	2210      	movs	r2, #16
   377ec:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   377f0:	f00c fd92 	bl	44318 <memcpy>
			memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
   377f4:	2208      	movs	r2, #8
   377f6:	f104 0194 	add.w	r1, r4, #148	; 0x94
   377fa:	f104 00b5 	add.w	r0, r4, #181	; 0xb5
   377fe:	f00c fd8b 	bl	44318 <memcpy>
			lll->ccm_rx.direction = 1U;
   37802:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
			lll->ccm_rx.counter = 0U;
   37806:	f884 908b 	strb.w	r9, [r4, #139]	; 0x8b
			lll->ccm_rx.direction = 1U;
   3780a:	f043 0301 	orr.w	r3, r3, #1
   3780e:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
			lll->ccm_tx.direction = 0U;
   37812:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
			lll->ccm_rx.counter = 0U;
   37816:	f884 908c 	strb.w	r9, [r4, #140]	; 0x8c
			lll->ccm_tx.direction = 0U;
   3781a:	f369 0300 	bfi	r3, r9, #0, #1
   3781e:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			lll->enc_rx = 1U;
   37822:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
			lll->ccm_rx.counter = 0U;
   37826:	f884 908d 	strb.w	r9, [r4, #141]	; 0x8d
			lll->ccm_tx.counter = 0U;
   3782a:	e9c4 992b 	strd	r9, r9, [r4, #172]	; 0xac
			lll->enc_rx = 1U;
   3782e:	f043 0308 	orr.w	r3, r3, #8
			lll->ccm_rx.counter = 0U;
   37832:	f884 908e 	strb.w	r9, [r4, #142]	; 0x8e
   37836:	f884 908f 	strb.w	r9, [r4, #143]	; 0x8f
   3783a:	f884 9090 	strb.w	r9, [r4, #144]	; 0x90
   3783e:	f884 9091 	strb.w	r9, [r4, #145]	; 0x91
   37842:	f884 9092 	strb.w	r9, [r4, #146]	; 0x92
			lll->enc_rx = 1U;
   37846:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3784a:	f898 3004 	ldrb.w	r3, [r8, #4]
   3784e:	f043 0303 	orr.w	r3, r3, #3
   37852:	f888 3004 	strb.w	r3, [r8, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   37856:	2301      	movs	r3, #1
   37858:	f888 3005 	strb.w	r3, [r8, #5]
			pdu_ctrl_tx->llctrl.opcode =
   3785c:	2305      	movs	r3, #5
   3785e:	f888 3007 	strb.w	r3, [r8, #7]
	    conn->tx_head &&
   37862:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
	if (
   37866:	2a00      	cmp	r2, #0
   37868:	f000 82c2 	beq.w	37df0 <ull_conn_llcp+0xc08>
	    !conn->llcp_cu.pause_tx &&
   3786c:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
	    conn->tx_head &&
   37870:	06df      	lsls	r7, r3, #27
   37872:	f100 82bd 	bmi.w	37df0 <ull_conn_llcp+0xc08>
	    !conn->llcp_enc.pause_tx &&
   37876:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    !conn->llcp_cu.pause_tx &&
   3787a:	0798      	lsls	r0, r3, #30
   3787c:	f100 82b8 	bmi.w	37df0 <ull_conn_llcp+0xc08>
	    !conn->llcp_phy.pause_tx &&
   37880:	f894 31c7 	ldrb.w	r3, [r4, #455]	; 0x1c7
   37884:	07d9      	lsls	r1, r3, #31
   37886:	f100 82b3 	bmi.w	37df0 <ull_conn_llcp+0xc08>
		if (conn->tx_head == conn->tx_data) {
   3788a:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   3788e:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
		if (conn->tx_head == conn->tx_data) {
   37892:	428a      	cmp	r2, r1
   37894:	d01b      	beq.n	378ce <ull_conn_llcp+0x6e6>
		} else if (!conn->tx_ctrl) {
   37896:	2b00      	cmp	r3, #0
   37898:	f000 8635 	beq.w	38506 <ull_conn_llcp+0x131e>
	tx->next = conn->tx_ctrl_last->next;
   3789c:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   378a0:	681b      	ldr	r3, [r3, #0]
   378a2:	f8c8 3000 	str.w	r3, [r8]
	conn->tx_ctrl_last->next = tx;
   378a6:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   378aa:	f8c3 8000 	str.w	r8, [r3]
	conn->tx_ctrl_last = tx;
   378ae:	f8c4 81d4 	str.w	r8, [r4, #468]	; 0x1d4
	if (!tx->next) {
   378b2:	f8d8 3000 	ldr.w	r3, [r8]
   378b6:	2b00      	cmp	r3, #0
   378b8:	f000 83d9 	beq.w	3806e <ull_conn_llcp+0xe86>
	conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   378bc:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   378c0:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   378c4:	f043 0303 	orr.w	r3, r3, #3
   378c8:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
   378cc:	e49f      	b.n	3720e <ull_conn_llcp+0x26>
			conn->tx_data = conn->tx_data->next;
   378ce:	6809      	ldr	r1, [r1, #0]
   378d0:	f8c4 11d8 	str.w	r1, [r4, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   378d4:	2b00      	cmp	r3, #0
   378d6:	d1e1      	bne.n	3789c <ull_conn_llcp+0x6b4>
			tx->next = conn->tx_head->next;
   378d8:	6813      	ldr	r3, [r2, #0]
   378da:	f8c8 3000 	str.w	r3, [r8]
			conn->tx_head->next = tx;
   378de:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   378e2:	f8c3 8000 	str.w	r8, [r3]
				conn->tx_ctrl = tx;
   378e6:	f8c4 81d0 	str.w	r8, [r4, #464]	; 0x1d0
				conn->tx_ctrl_last = tx;
   378ea:	e7e0      	b.n	378ae <ull_conn_llcp+0x6c6>
			if (event_conn_upd_prep(conn, lazy,
   378ec:	4632      	mov	r2, r6
   378ee:	4629      	mov	r1, r5
   378f0:	4620      	mov	r0, r4
   378f2:	f7ef fa19 	bl	26d28 <event_conn_upd_prep>
   378f6:	2800      	cmp	r0, #0
   378f8:	f47f ac8b 	bne.w	37212 <ull_conn_llcp+0x2a>
				return -ECANCELED;
   378fc:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   37900:	e491      	b.n	37226 <ull_conn_llcp+0x3e>
			event_counter = lll->event_counter +
   37902:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   37904:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
	if (conn->llcp.chan_map.initiate) {
   37906:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
			event_counter = lll->event_counter +
   3790a:	440b      	add	r3, r1
   3790c:	442b      	add	r3, r5
	if (conn->llcp.chan_map.initiate) {
   3790e:	f012 0601 	ands.w	r6, r2, #1
			event_counter = lll->event_counter +
   37912:	b29d      	uxth	r5, r3
	if (conn->llcp.chan_map.initiate) {
   37914:	f040 8143 	bne.w	37b9e <ull_conn_llcp+0x9b6>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   37918:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   3791c:	1aeb      	subs	r3, r5, r3
   3791e:	041f      	lsls	r7, r3, #16
   37920:	f53f ac77 	bmi.w	37212 <ull_conn_llcp+0x2a>
		memcpy(&lll->data_chan_map[0],
   37924:	f104 0534 	add.w	r5, r4, #52	; 0x34
   37928:	2205      	movs	r2, #5
   3792a:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
			conn->periph.llcp_type = LLCP_NONE;
   3792e:	f884 60d9 	strb.w	r6, [r4, #217]	; 0xd9
		memcpy(&lll->data_chan_map[0],
   37932:	4628      	mov	r0, r5
   37934:	f00c fcf0 	bl	44318 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
   37938:	2105      	movs	r1, #5
   3793a:	4628      	mov	r0, r5
   3793c:	f7f8 fd4a 	bl	303d4 <util_ones_count_get>
		lll->data_chan_count =
   37940:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   37944:	2201      	movs	r2, #1
		lll->data_chan_count =
   37946:	f360 0305 	bfi	r3, r0, #0, #6
   3794a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   3794e:	f884 21e0 	strb.w	r2, [r4, #480]	; 0x1e0
   37952:	e45e      	b.n	37212 <ull_conn_llcp+0x2a>
			event_counter = lll->event_counter +
   37954:	8e61      	ldrh	r1, [r4, #50]	; 0x32
   37956:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   37958:	4419      	add	r1, r3
   3795a:	4429      	add	r1, r5
			event_phy_upd_ind_prep(conn, event_counter);
   3795c:	4620      	mov	r0, r4
   3795e:	b289      	uxth	r1, r1
   37960:	f7fd fb36 	bl	34fd0 <event_phy_upd_ind_prep>
		break;
   37964:	e455      	b.n	37212 <ull_conn_llcp+0x2a>
		conn->tx_data_last = tx;
   37966:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
   3796a:	e623      	b.n	375b4 <ull_conn_llcp+0x3cc>
			tx->next = conn->tx_head;
   3796c:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   3796e:	e9c4 0073 	strd	r0, r0, [r4, #460]	; 0x1cc
				conn->tx_ctrl_last = tx;
   37972:	e619      	b.n	375a8 <ull_conn_llcp+0x3c0>
		if (!conn->tx_ctrl) {
   37974:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   37978:	2a00      	cmp	r2, #0
   3797a:	f47f acec 	bne.w	37356 <ull_conn_llcp+0x16e>
			tx->next = conn->tx_head;
   3797e:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   37980:	e9c4 0073 	strd	r0, r0, [r4, #460]	; 0x1cc
				conn->tx_ctrl_last = tx;
   37984:	e4ee      	b.n	37364 <ull_conn_llcp+0x17c>
		} else if (conn->llcp_conn_param.ack !=
   37986:	f894 8185 	ldrb.w	r8, [r4, #389]	; 0x185
   3798a:	f894 e184 	ldrb.w	lr, [r4, #388]	; 0x184
   3798e:	45f0      	cmp	r8, lr
   37990:	f000 821e 	beq.w	37dd0 <ull_conn_llcp+0xbe8>
	return conn_upd_curr && (conn_upd_curr != conn);
   37994:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 37a3c <ull_conn_llcp+0x854>
			event_counter = lll->event_counter +
   37998:	f8b4 9032 	ldrh.w	r9, [r4, #50]	; 0x32
   3799c:	f8d8 e000 	ldr.w	lr, [r8]
					lll->latency_prepare + lazy;
   379a0:	f8b4 a02e 	ldrh.w	sl, [r4, #46]	; 0x2e
   379a4:	f1be 0f00 	cmp.w	lr, #0
   379a8:	f000 83c0 	beq.w	3812c <ull_conn_llcp+0xf44>
   379ac:	4574      	cmp	r4, lr
   379ae:	f47f ac2e 	bne.w	3720e <ull_conn_llcp+0x26>
	switch (conn->llcp_conn_param.state) {
   379b2:	f894 e186 	ldrb.w	lr, [r4, #390]	; 0x186
   379b6:	f00e 0e0f 	and.w	lr, lr, #15
   379ba:	f1be 0f06 	cmp.w	lr, #6
   379be:	f200 86a2 	bhi.w	38706 <ull_conn_llcp+0x151e>
   379c2:	f20f 0b08 	addw	fp, pc, #8
   379c6:	f85b f02e 	ldr.w	pc, [fp, lr, lsl #2]
   379ca:	bf00      	nop
   379cc:	00037abf 	.word	0x00037abf
   379d0:	00037a41 	.word	0x00037a41
   379d4:	000379e9 	.word	0x000379e9
   379d8:	000371ff 	.word	0x000371ff
   379dc:	000371ff 	.word	0x000371ff
   379e0:	000371ff 	.word	0x000371ff
   379e4:	000371ff 	.word	0x000371ff
	if (conn->llcp_enc.pause_tx) {
   379e8:	07b9      	lsls	r1, r7, #30
   379ea:	f53f ac10 	bmi.w	3720e <ull_conn_llcp+0x26>
	rx = ll_pdu_rx_alloc();
   379ee:	f7fb fcf5 	bl	333dc <ll_pdu_rx_alloc>
	if (!rx) {
   379f2:	4601      	mov	r1, r0
   379f4:	2800      	cmp	r0, #0
   379f6:	f000 817f 	beq.w	37cf8 <ull_conn_llcp+0xb10>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   379fa:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   379fe:	2203      	movs	r2, #3
   37a00:	f362 0303 	bfi	r3, r2, #0, #4
   37a04:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   37a08:	7f03      	ldrb	r3, [r0, #28]
	rx->hdr.handle = conn->lll.handle;
   37a0a:	8d20      	ldrh	r0, [r4, #40]	; 0x28
   37a0c:	80c8      	strh	r0, [r1, #6]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   37a0e:	4313      	orrs	r3, r2
   37a10:	770b      	strb	r3, [r1, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   37a12:	2318      	movs	r3, #24
   37a14:	774b      	strb	r3, [r1, #29]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   37a16:	230f      	movs	r3, #15
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   37a18:	710a      	strb	r2, [r1, #4]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   37a1a:	77cb      	strb	r3, [r1, #31]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   37a1c:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
   37a20:	840b      	strh	r3, [r1, #32]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   37a22:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
   37a26:	844b      	strh	r3, [r1, #34]	; 0x22
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   37a28:	f8b4 318c 	ldrh.w	r3, [r4, #396]	; 0x18c
   37a2c:	848b      	strh	r3, [r1, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   37a2e:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
   37a32:	84cb      	strh	r3, [r1, #38]	; 0x26
   37a34:	e617      	b.n	37666 <ull_conn_llcp+0x47e>
   37a36:	bf00      	nop
   37a38:	20002820 	.word	0x20002820
   37a3c:	20002968 	.word	0x20002968
	if (conn->llcp_conn_param.status) {
   37a40:	f894 3187 	ldrb.w	r3, [r4, #391]	; 0x187
   37a44:	2b00      	cmp	r3, #0
   37a46:	f040 80fd 	bne.w	37c44 <ull_conn_llcp+0xa5c>
	if (!conn->lll.role) {
   37a4a:	2900      	cmp	r1, #0
   37a4c:	f2c0 8487 	blt.w	3835e <ull_conn_llcp+0x1176>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   37a50:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.win_offset_us = 0U;
   37a54:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   37a58:	2106      	movs	r1, #6
   37a5a:	f361 0203 	bfi	r2, r1, #0, #4
		preferred_periodicity = conn->llcp_conn_param.preferred_periodicity;
   37a5e:	f894 1198 	ldrb.w	r1, [r4, #408]	; 0x198
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   37a62:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.win_size = 1U;
   37a66:	2001      	movs	r0, #1
		interval_max = conn->llcp_conn_param.interval_max;
   37a68:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
		conn->llcp_cu.win_size = 1U;
   37a6c:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
		if (preferred_periodicity) {
   37a70:	2900      	cmp	r1, #0
   37a72:	f000 8570 	beq.w	38556 <ull_conn_llcp+0x136e>
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
   37a76:	fbb2 f3f1 	udiv	r3, r2, r1
   37a7a:	fb13 f301 	smulbb	r3, r3, r1
			if (conn->llcp_cu.interval < conn->llcp_conn_param.interval_min) {
   37a7e:	f8b4 1188 	ldrh.w	r1, [r4, #392]	; 0x188
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
   37a82:	b29b      	uxth	r3, r3
				conn->llcp_cu.interval = interval_max;
   37a84:	4299      	cmp	r1, r3
   37a86:	bf98      	it	ls
   37a88:	461a      	movls	r2, r3
   37a8a:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   37a8e:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   37a92:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   37a96:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
   37a9a:	f8c4 1112 	str.w	r1, [r4, #274]	; 0x112
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   37a9e:	f3c3 1300 	ubfx	r3, r3, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   37aa2:	00db      	lsls	r3, r3, #3
   37aa4:	f043 0302 	orr.w	r3, r3, #2
   37aa8:	f022 020f 	bic.w	r2, r2, #15
   37aac:	4313      	orrs	r3, r2
		conn->llcp_cu.ack--;
   37aae:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   37ab2:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
		conn->llcp_cu.ack--;
   37ab6:	f884 c10d 	strb.w	ip, [r4, #269]	; 0x10d
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   37aba:	f7ff bbaa 	b.w	37212 <ull_conn_llcp+0x2a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   37abe:	48d6      	ldr	r0, [pc, #856]	; (37e18 <ull_conn_llcp+0xc30>)
   37ac0:	f7f8 faa6 	bl	30010 <mem_acquire>
	if (!tx) {
   37ac4:	4602      	mov	r2, r0
   37ac6:	2800      	cmp	r0, #0
   37ac8:	f000 8116 	beq.w	37cf8 <ull_conn_llcp+0xb10>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   37acc:	7903      	ldrb	r3, [r0, #4]
	conn_upd_curr = conn;
   37ace:	f8c8 4000 	str.w	r4, [r8]
   37ad2:	f043 0303 	orr.w	r3, r3, #3
   37ad6:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   37ad8:	2318      	movs	r3, #24
   37ada:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   37adc:	230f      	movs	r3, #15
   37ade:	71c3      	strb	r3, [r0, #7]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   37ae0:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
   37ae4:	8103      	strh	r3, [r0, #8]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   37ae6:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
   37aea:	8143      	strh	r3, [r0, #10]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   37aec:	f8b4 318c 	ldrh.w	r3, [r4, #396]	; 0x18c
   37af0:	8183      	strh	r3, [r0, #12]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   37af2:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
   37af6:	81c3      	strh	r3, [r0, #14]
	p->offset1 = sys_cpu_to_le16(0xffff);
   37af8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   37afc:	7543      	strb	r3, [r0, #21]
   37afe:	7583      	strb	r3, [r0, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
   37b00:	75c3      	strb	r3, [r0, #23]
   37b02:	7603      	strb	r3, [r0, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
   37b04:	7643      	strb	r3, [r0, #25]
   37b06:	7683      	strb	r3, [r0, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
   37b08:	76c3      	strb	r3, [r0, #27]
   37b0a:	7703      	strb	r3, [r0, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
   37b0c:	7743      	strb	r3, [r0, #29]
   37b0e:	7783      	strb	r3, [r0, #30]
	p->preferred_periodicity = 0U;
   37b10:	2300      	movs	r3, #0
   37b12:	7403      	strb	r3, [r0, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
   37b14:	74c3      	strb	r3, [r0, #19]
   37b16:	7503      	strb	r3, [r0, #20]
			event_counter = lll->event_counter +
   37b18:	eb09 010a 	add.w	r1, r9, sl
	conn->procedure_expire = conn->procedure_reload;
   37b1c:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   37b20:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
			event_counter = lll->event_counter +
   37b24:	4429      	add	r1, r5
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
   37b26:	f8a0 1011 	strh.w	r1, [r0, #17]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   37b2a:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   37b2e:	2104      	movs	r1, #4
   37b30:	f361 0303 	bfi	r3, r1, #0, #4
   37b34:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
	    conn->tx_head &&
   37b38:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
	if (
   37b3c:	2b00      	cmp	r3, #0
   37b3e:	f000 8388 	beq.w	38252 <ull_conn_llcp+0x106a>
	    !conn->llcp_cu.pause_tx &&
   37b42:	f894 110e 	ldrb.w	r1, [r4, #270]	; 0x10e
	    conn->tx_head &&
   37b46:	06c9      	lsls	r1, r1, #27
   37b48:	f100 8383 	bmi.w	38252 <ull_conn_llcp+0x106a>
	    !conn->llcp_enc.pause_tx &&
   37b4c:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    !conn->llcp_cu.pause_tx &&
   37b50:	078f      	lsls	r7, r1, #30
   37b52:	f100 837e 	bmi.w	38252 <ull_conn_llcp+0x106a>
	    !conn->llcp_phy.pause_tx &&
   37b56:	f894 11c7 	ldrb.w	r1, [r4, #455]	; 0x1c7
   37b5a:	07c8      	lsls	r0, r1, #31
   37b5c:	f100 8379 	bmi.w	38252 <ull_conn_llcp+0x106a>
		if (conn->tx_head == conn->tx_data) {
   37b60:	f8d4 01d8 	ldr.w	r0, [r4, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   37b64:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (conn->tx_head == conn->tx_data) {
   37b68:	4283      	cmp	r3, r0
   37b6a:	f000 8561 	beq.w	38630 <ull_conn_llcp+0x1448>
		} else if (!conn->tx_ctrl) {
   37b6e:	2900      	cmp	r1, #0
   37b70:	f000 8519 	beq.w	385a6 <ull_conn_llcp+0x13be>
	tx->next = conn->tx_ctrl_last->next;
   37b74:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   37b78:	681b      	ldr	r3, [r3, #0]
   37b7a:	6013      	str	r3, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   37b7c:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   37b80:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   37b82:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
	if (!tx->next) {
   37b86:	6811      	ldr	r1, [r2, #0]
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   37b88:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   37b8c:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
	if (!tx->next) {
   37b90:	2900      	cmp	r1, #0
   37b92:	f47f ab34 	bne.w	371fe <ull_conn_llcp+0x16>
		conn->tx_data_last = tx;
   37b96:	f8c4 21dc 	str.w	r2, [r4, #476]	; 0x1dc
   37b9a:	f7ff bb30 	b.w	371fe <ull_conn_llcp+0x16>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   37b9e:	489e      	ldr	r0, [pc, #632]	; (37e18 <ull_conn_llcp+0xc30>)
   37ba0:	f7f8 fa36 	bl	30010 <mem_acquire>
		if (tx) {
   37ba4:	4606      	mov	r6, r0
   37ba6:	2800      	cmp	r0, #0
   37ba8:	f43f ab33 	beq.w	37212 <ull_conn_llcp+0x2a>
						      conn->lll.latency + 6;
   37bac:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
   37bae:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
						      conn->lll.latency + 6;
   37bb2:	3306      	adds	r3, #6
			conn->llcp.chan_map.initiate = 0U;
   37bb4:	f36f 0200 	bfc	r2, #0, #1
						      conn->lll.latency + 6;
   37bb8:	442b      	add	r3, r5
			conn->llcp.chan_map.initiate = 0U;
   37bba:	f884 20e8 	strb.w	r2, [r4, #232]	; 0xe8
			conn->llcp.chan_map.instant = event_counter +
   37bbe:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   37bc2:	7903      	ldrb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   37bc4:	2108      	movs	r1, #8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   37bc6:	f043 0303 	orr.w	r3, r3, #3
			pdu_ctrl_tx->llctrl.opcode =
   37bca:	2201      	movs	r2, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   37bcc:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   37bce:	7141      	strb	r1, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   37bd0:	71c2      	strb	r2, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   37bd2:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
   37bd6:	2205      	movs	r2, #5
   37bd8:	3008      	adds	r0, #8
   37bda:	f00c fb9d 	bl	44318 <memcpy>
				sys_cpu_to_le16(conn->llcp.chan_map.instant);
   37bde:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   37be2:	f8a6 300d 	strh.w	r3, [r6, #13]
	    conn->tx_head &&
   37be6:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
	if (
   37bea:	2b00      	cmp	r3, #0
   37bec:	f000 8124 	beq.w	37e38 <ull_conn_llcp+0xc50>
	    !conn->llcp_cu.pause_tx &&
   37bf0:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
	    conn->tx_head &&
   37bf4:	06d0      	lsls	r0, r2, #27
   37bf6:	f100 811f 	bmi.w	37e38 <ull_conn_llcp+0xc50>
	    !conn->llcp_enc.pause_tx &&
   37bfa:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    !conn->llcp_cu.pause_tx &&
   37bfe:	0791      	lsls	r1, r2, #30
   37c00:	f100 811a 	bmi.w	37e38 <ull_conn_llcp+0xc50>
	    !conn->llcp_phy.pause_tx &&
   37c04:	f894 21c7 	ldrb.w	r2, [r4, #455]	; 0x1c7
   37c08:	07d2      	lsls	r2, r2, #31
   37c0a:	f100 8115 	bmi.w	37e38 <ull_conn_llcp+0xc50>
		if (conn->tx_head == conn->tx_data) {
   37c0e:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   37c12:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
		if (conn->tx_head == conn->tx_data) {
   37c16:	428b      	cmp	r3, r1
   37c18:	f000 8412 	beq.w	38440 <ull_conn_llcp+0x1258>
		} else if (!conn->tx_ctrl) {
   37c1c:	2a00      	cmp	r2, #0
   37c1e:	f000 843d 	beq.w	3849c <ull_conn_llcp+0x12b4>
	tx->next = conn->tx_ctrl_last->next;
   37c22:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   37c26:	681b      	ldr	r3, [r3, #0]
   37c28:	6033      	str	r3, [r6, #0]
	conn->tx_ctrl_last->next = tx;
   37c2a:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   37c2e:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
   37c30:	f8c4 61d4 	str.w	r6, [r4, #468]	; 0x1d4
	if (!tx->next) {
   37c34:	6833      	ldr	r3, [r6, #0]
   37c36:	2b00      	cmp	r3, #0
   37c38:	f47f aaeb 	bne.w	37212 <ull_conn_llcp+0x2a>
		conn->tx_data_last = tx;
   37c3c:	f8c4 61dc 	str.w	r6, [r4, #476]	; 0x1dc
   37c40:	f7ff bae7 	b.w	37212 <ull_conn_llcp+0x2a>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   37c44:	4874      	ldr	r0, [pc, #464]	; (37e18 <ull_conn_llcp+0xc30>)
   37c46:	f7f8 f9e3 	bl	30010 <mem_acquire>
		if (!tx) {
   37c4a:	2800      	cmp	r0, #0
   37c4c:	d054      	beq.n	37cf8 <ull_conn_llcp+0xb10>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   37c4e:	7902      	ldrb	r2, [r0, #4]
   37c50:	f042 0203 	orr.w	r2, r2, #3
   37c54:	7102      	strb	r2, [r0, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   37c56:	2203      	movs	r2, #3
   37c58:	7142      	strb	r2, [r0, #5]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   37c5a:	f640 7211 	movw	r2, #3857	; 0xf11
   37c5e:	f8a0 2007 	strh.w	r2, [r0, #7]
		rej->error_code = conn->llcp_conn_param.status;
   37c62:	f894 2187 	ldrb.w	r2, [r4, #391]	; 0x187
   37c66:	7242      	strb	r2, [r0, #9]
	    conn->tx_head &&
   37c68:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
	if (
   37c6c:	2a00      	cmp	r2, #0
   37c6e:	f000 847f 	beq.w	38570 <ull_conn_llcp+0x1388>
	    !conn->llcp_cu.pause_tx &&
   37c72:	f894 110e 	ldrb.w	r1, [r4, #270]	; 0x10e
	    conn->tx_head &&
   37c76:	06c9      	lsls	r1, r1, #27
   37c78:	f100 847a 	bmi.w	38570 <ull_conn_llcp+0x1388>
	    !conn->llcp_enc.pause_tx &&
   37c7c:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    !conn->llcp_cu.pause_tx &&
   37c80:	078b      	lsls	r3, r1, #30
   37c82:	f100 8475 	bmi.w	38570 <ull_conn_llcp+0x1388>
	    !conn->llcp_phy.pause_tx &&
   37c86:	f894 11c7 	ldrb.w	r1, [r4, #455]	; 0x1c7
   37c8a:	07cf      	lsls	r7, r1, #31
   37c8c:	f100 8470 	bmi.w	38570 <ull_conn_llcp+0x1388>
		if (conn->tx_head == conn->tx_data) {
   37c90:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   37c94:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (conn->tx_head == conn->tx_data) {
   37c98:	429a      	cmp	r2, r3
   37c9a:	f000 84a6 	beq.w	385ea <ull_conn_llcp+0x1402>
		} else if (!conn->tx_ctrl) {
   37c9e:	2900      	cmp	r1, #0
   37ca0:	f000 84bd 	beq.w	3861e <ull_conn_llcp+0x1436>
	tx->next = conn->tx_ctrl_last->next;
   37ca4:	f8d4 21d4 	ldr.w	r2, [r4, #468]	; 0x1d4
   37ca8:	6812      	ldr	r2, [r2, #0]
   37caa:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   37cac:	f8d4 21d4 	ldr.w	r2, [r4, #468]	; 0x1d4
   37cb0:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
   37cb2:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
	if (!tx->next) {
   37cb6:	6802      	ldr	r2, [r0, #0]
   37cb8:	2a00      	cmp	r2, #0
   37cba:	f000 84ac 	beq.w	38616 <ull_conn_llcp+0x142e>
	if (conn->llcp_conn_param.cache.timeout) {
   37cbe:	f8b4 3196 	ldrh.w	r3, [r4, #406]	; 0x196
   37cc2:	2b00      	cmp	r3, #0
   37cc4:	f000 83f4 	beq.w	384b0 <ull_conn_llcp+0x12c8>
		conn->llcp_conn_param.timeout =
   37cc8:	f8a4 318e 	strh.w	r3, [r4, #398]	; 0x18e
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
   37ccc:	f8b4 3186 	ldrh.w	r3, [r4, #390]	; 0x186
   37cd0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   37cd4:	f043 0310 	orr.w	r3, r3, #16
   37cd8:	f8a4 3186 	strh.w	r3, [r4, #390]	; 0x186
		conn->llcp_conn_param.cache.timeout = 0U;
   37cdc:	2300      	movs	r3, #0
   37cde:	f8a4 3196 	strh.w	r3, [r4, #406]	; 0x196
		conn->llcp_conn_param.interval_min =
   37ce2:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
   37ce6:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
		conn->llcp_conn_param.latency =
   37cea:	f8b4 3194 	ldrh.w	r3, [r4, #404]	; 0x194
   37cee:	f8a4 318c 	strh.w	r3, [r4, #396]	; 0x18c
	conn_upd_curr = NULL;
   37cf2:	2300      	movs	r3, #0
   37cf4:	f8c8 3000 	str.w	r3, [r8]
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   37cf8:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   37cfc:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		return;
   37d00:	f7ff ba7d 	b.w	371fe <ull_conn_llcp+0x16>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   37d04:	4844      	ldr	r0, [pc, #272]	; (37e18 <ull_conn_llcp+0xc30>)
   37d06:	f7f8 f983 	bl	30010 <mem_acquire>
	if (tx) {
   37d0a:	4680      	mov	r8, r0
   37d0c:	2800      	cmp	r0, #0
   37d0e:	d0f3      	beq.n	37cf8 <ull_conn_llcp+0xb10>
		conn->llcp_feature.ack--;
   37d10:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
   37d14:	3b01      	subs	r3, #1
   37d16:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   37d1a:	7903      	ldrb	r3, [r0, #4]
   37d1c:	f043 0303 	orr.w	r3, r3, #3
   37d20:	7103      	strb	r3, [r0, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
   37d22:	2309      	movs	r3, #9
   37d24:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
   37d26:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   37d2a:	2b00      	cmp	r3, #0
   37d2c:	bfb4      	ite	lt
   37d2e:	230e      	movlt	r3, #14
   37d30:	2308      	movge	r3, #8
		(void)memset(&pdu->llctrl.feature_req.features[0],
   37d32:	2208      	movs	r2, #8
		pdu->llctrl.opcode = !conn->lll.role ?
   37d34:	71c3      	strb	r3, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
   37d36:	4639      	mov	r1, r7
   37d38:	4410      	add	r0, r2
   37d3a:	f00c faf8 	bl	4432e <memset>
	sys_put_le32(val >> 32, &dst[4]);
   37d3e:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
	dst[0] = val;
   37d42:	463b      	mov	r3, r7
   37d44:	f362 0307 	bfi	r3, r2, #0, #8
	dst[1] = val >> 8;
   37d48:	f3c2 2107 	ubfx	r1, r2, #8, #8
	dst[0] = val;
   37d4c:	f361 230f 	bfi	r3, r1, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   37d50:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
   37d52:	f362 4317 	bfi	r3, r2, #16, #8
	dst[1] = val >> 8;
   37d56:	0a12      	lsrs	r2, r2, #8
	dst[0] = val;
   37d58:	f362 631f 	bfi	r3, r2, #24, #8
   37d5c:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
   37d60:	f8c8 2008 	str.w	r2, [r8, #8]
   37d64:	f8c8 300c 	str.w	r3, [r8, #12]
	    conn->tx_head &&
   37d68:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
	if (
   37d6c:	2b00      	cmp	r3, #0
   37d6e:	d06c      	beq.n	37e4a <ull_conn_llcp+0xc62>
	    !conn->llcp_cu.pause_tx &&
   37d70:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
	    conn->tx_head &&
   37d74:	06d1      	lsls	r1, r2, #27
   37d76:	d468      	bmi.n	37e4a <ull_conn_llcp+0xc62>
	    !conn->llcp_enc.pause_tx &&
   37d78:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    !conn->llcp_cu.pause_tx &&
   37d7c:	0792      	lsls	r2, r2, #30
   37d7e:	d464      	bmi.n	37e4a <ull_conn_llcp+0xc62>
	    !conn->llcp_phy.pause_tx &&
   37d80:	f894 21c7 	ldrb.w	r2, [r4, #455]	; 0x1c7
   37d84:	07d7      	lsls	r7, r2, #31
   37d86:	d460      	bmi.n	37e4a <ull_conn_llcp+0xc62>
		if (conn->tx_head == conn->tx_data) {
   37d88:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   37d8c:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
		if (conn->tx_head == conn->tx_data) {
   37d90:	428b      	cmp	r3, r1
   37d92:	f000 8364 	beq.w	3845e <ull_conn_llcp+0x1276>
		} else if (!conn->tx_ctrl) {
   37d96:	2a00      	cmp	r2, #0
   37d98:	f000 83f4 	beq.w	38584 <ull_conn_llcp+0x139c>
	tx->next = conn->tx_ctrl_last->next;
   37d9c:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   37da0:	681b      	ldr	r3, [r3, #0]
   37da2:	f8c8 3000 	str.w	r3, [r8]
	conn->tx_ctrl_last->next = tx;
   37da6:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   37daa:	f8c3 8000 	str.w	r8, [r3]
	conn->tx_ctrl_last = tx;
   37dae:	f8c4 81d4 	str.w	r8, [r4, #468]	; 0x1d4
	if (!tx->next) {
   37db2:	f8d8 3000 	ldr.w	r3, [r8]
   37db6:	2b00      	cmp	r3, #0
   37db8:	f000 81d0 	beq.w	3815c <ull_conn_llcp+0xf74>
		conn->procedure_expire = conn->procedure_reload;
   37dbc:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   37dc0:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   37dc4:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		conn->procedure_expire = conn->procedure_reload;
   37dc8:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	break;
   37dcc:	f7ff ba17 	b.w	371fe <ull_conn_llcp+0x16>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   37dd0:	f894 71b5 	ldrb.w	r7, [r4, #437]	; 0x1b5
   37dd4:	f894 31b4 	ldrb.w	r3, [r4, #436]	; 0x1b4
   37dd8:	429f      	cmp	r7, r3
   37dda:	f000 80b4 	beq.w	37f46 <ull_conn_llcp+0xd5e>
			event_len_prep(conn);
   37dde:	4620      	mov	r0, r4
   37de0:	f7fc fff4 	bl	34dcc <event_len_prep>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   37de4:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   37de8:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   37dec:	f7ff ba07 	b.w	371fe <ull_conn_llcp+0x16>
		if (!conn->tx_ctrl) {
   37df0:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
   37df4:	2b00      	cmp	r3, #0
   37df6:	f47f ad51 	bne.w	3789c <ull_conn_llcp+0x6b4>
			tx->next = conn->tx_head;
   37dfa:	f8c8 2000 	str.w	r2, [r8]
				conn->tx_ctrl = tx;
   37dfe:	e9c4 8873 	strd	r8, r8, [r4, #460]	; 0x1cc
				conn->tx_ctrl_last = tx;
   37e02:	e554      	b.n	378ae <ull_conn_llcp+0x6c6>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   37e04:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
   37e08:	2b00      	cmp	r3, #0
   37e0a:	f43f ab59 	beq.w	374c0 <ull_conn_llcp+0x2d8>
			conn->periph.llcp_type = LLCP_NONE;
   37e0e:	f884 10d9 	strb.w	r1, [r4, #217]	; 0xd9
   37e12:	f7ff bb59 	b.w	374c8 <ull_conn_llcp+0x2e0>
   37e16:	bf00      	nop
   37e18:	20002820 	.word	0x20002820
		if (!conn->tx_ctrl) {
   37e1c:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   37e20:	2a00      	cmp	r2, #0
   37e22:	f47f acab 	bne.w	3777c <ull_conn_llcp+0x594>
			tx->next = conn->tx_head;
   37e26:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   37e2a:	e9c4 8873 	strd	r8, r8, [r4, #460]	; 0x1cc
				conn->tx_ctrl_last = tx;
   37e2e:	e4ae      	b.n	3778e <ull_conn_llcp+0x5a6>
		conn->tx_data_last = tx;
   37e30:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
   37e34:	f7ff ba9c 	b.w	37370 <ull_conn_llcp+0x188>
		if (!conn->tx_ctrl) {
   37e38:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   37e3c:	2a00      	cmp	r2, #0
   37e3e:	f47f aef0 	bne.w	37c22 <ull_conn_llcp+0xa3a>
			tx->next = conn->tx_head;
   37e42:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
   37e44:	e9c4 6673 	strd	r6, r6, [r4, #460]	; 0x1cc
				conn->tx_ctrl_last = tx;
   37e48:	e6f2      	b.n	37c30 <ull_conn_llcp+0xa48>
		if (!conn->tx_ctrl) {
   37e4a:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   37e4e:	2a00      	cmp	r2, #0
   37e50:	d1a4      	bne.n	37d9c <ull_conn_llcp+0xbb4>
			tx->next = conn->tx_head;
   37e52:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   37e56:	e9c4 8873 	strd	r8, r8, [r4, #460]	; 0x1cc
				conn->tx_ctrl_last = tx;
   37e5a:	e7a8      	b.n	37dae <ull_conn_llcp+0xbc6>
		if (!conn->tx_ctrl) {
   37e5c:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   37e60:	2a00      	cmp	r2, #0
   37e62:	f47f aadc 	bne.w	3741e <ull_conn_llcp+0x236>
			tx->next = conn->tx_head;
   37e66:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
   37e68:	e9c4 7773 	strd	r7, r7, [r4, #460]	; 0x1cc
				conn->tx_ctrl_last = tx;
   37e6c:	f7ff bade 	b.w	3742c <ull_conn_llcp+0x244>
		ecb_encrypt(&conn->llcp_enc.ltk[0],
   37e70:	f104 077b 	add.w	r7, r4, #123	; 0x7b
   37e74:	463b      	mov	r3, r7
   37e76:	464a      	mov	r2, r9
   37e78:	f104 01f6 	add.w	r1, r4, #246	; 0xf6
   37e7c:	f204 1071 	addw	r0, r4, #369	; 0x171
   37e80:	f003 fbb2 	bl	3b5e8 <ecb_encrypt>
		memcpy(&lll->ccm_tx.key[0], &lll->ccm_rx.key[0],
   37e84:	4639      	mov	r1, r7
   37e86:	2210      	movs	r2, #16
   37e88:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   37e8c:	f00c fa44 	bl	44318 <memcpy>
		memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
   37e90:	2208      	movs	r2, #8
   37e92:	f104 0194 	add.w	r1, r4, #148	; 0x94
   37e96:	f104 00b5 	add.w	r0, r4, #181	; 0xb5
   37e9a:	f00c fa3d 	bl	44318 <memcpy>
		lll->enc_rx = 1U;
   37e9e:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
		lll->ccm_rx.counter = 0U;
   37ea2:	f884 908b 	strb.w	r9, [r4, #139]	; 0x8b
		lll->enc_rx = 1U;
   37ea6:	f023 0318 	bic.w	r3, r3, #24
   37eaa:	f043 0318 	orr.w	r3, r3, #24
   37eae:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		lll->ccm_rx.direction = 0U;
   37eb2:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
		lll->ccm_rx.counter = 0U;
   37eb6:	f884 908c 	strb.w	r9, [r4, #140]	; 0x8c
		lll->ccm_rx.direction = 0U;
   37eba:	f369 0300 	bfi	r3, r9, #0, #1
   37ebe:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		lll->ccm_tx.direction = 1U;
   37ec2:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
		lll->ccm_rx.counter = 0U;
   37ec6:	f884 908d 	strb.w	r9, [r4, #141]	; 0x8d
		lll->ccm_tx.counter = 0U;
   37eca:	e9c4 992b 	strd	r9, r9, [r4, #172]	; 0xac
		lll->ccm_tx.direction = 1U;
   37ece:	f043 0301 	orr.w	r3, r3, #1
		lll->ccm_rx.counter = 0U;
   37ed2:	f884 908e 	strb.w	r9, [r4, #142]	; 0x8e
   37ed6:	f884 908f 	strb.w	r9, [r4, #143]	; 0x8f
   37eda:	f884 9090 	strb.w	r9, [r4, #144]	; 0x90
   37ede:	f884 9091 	strb.w	r9, [r4, #145]	; 0x91
   37ee2:	f884 9092 	strb.w	r9, [r4, #146]	; 0x92
		lll->ccm_tx.direction = 1U;
   37ee6:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   37eea:	f898 3004 	ldrb.w	r3, [r8, #4]
   37eee:	f043 0303 	orr.w	r3, r3, #3
   37ef2:	f888 3004 	strb.w	r3, [r8, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   37ef6:	2301      	movs	r3, #1
   37ef8:	f888 3005 	strb.w	r3, [r8, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   37efc:	2306      	movs	r3, #6
   37efe:	f888 3007 	strb.w	r3, [r8, #7]
	    conn->tx_head &&
   37f02:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
	if (
   37f06:	2a00      	cmp	r2, #0
   37f08:	f43f af72 	beq.w	37df0 <ull_conn_llcp+0xc08>
	    !conn->llcp_cu.pause_tx &&
   37f0c:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
	    conn->tx_head &&
   37f10:	06db      	lsls	r3, r3, #27
   37f12:	f53f af6d 	bmi.w	37df0 <ull_conn_llcp+0xc08>
	    !conn->llcp_enc.pause_tx &&
   37f16:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    !conn->llcp_cu.pause_tx &&
   37f1a:	079f      	lsls	r7, r3, #30
   37f1c:	f53f af68 	bmi.w	37df0 <ull_conn_llcp+0xc08>
	    !conn->llcp_phy.pause_tx &&
   37f20:	f894 31c7 	ldrb.w	r3, [r4, #455]	; 0x1c7
   37f24:	07d8      	lsls	r0, r3, #31
   37f26:	f53f af63 	bmi.w	37df0 <ull_conn_llcp+0xc08>
		if (conn->tx_head == conn->tx_data) {
   37f2a:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   37f2e:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
		if (conn->tx_head == conn->tx_data) {
   37f32:	428a      	cmp	r2, r1
   37f34:	f47f acaf 	bne.w	37896 <ull_conn_llcp+0x6ae>
			conn->tx_data = conn->tx_data->next;
   37f38:	6811      	ldr	r1, [r2, #0]
   37f3a:	f8c4 11d8 	str.w	r1, [r4, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   37f3e:	2b00      	cmp	r3, #0
   37f40:	f43f acca 	beq.w	378d8 <ull_conn_llcp+0x6f0>
   37f44:	e4aa      	b.n	3789c <ull_conn_llcp+0x6b4>
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   37f46:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
   37f4a:	f894 71c5 	ldrb.w	r7, [r4, #453]	; 0x1c5
   37f4e:	429f      	cmp	r7, r3
   37f50:	f43f a95d 	beq.w	3720e <ull_conn_llcp+0x26>
	switch (conn->llcp_phy.state) {
   37f54:	f894 21c6 	ldrb.w	r2, [r4, #454]	; 0x1c6
   37f58:	f002 0703 	and.w	r7, r2, #3
   37f5c:	2f03      	cmp	r7, #3
   37f5e:	f000 8193 	beq.w	38288 <ull_conn_llcp+0x10a0>
   37f62:	2f00      	cmp	r7, #0
   37f64:	f47f a952 	bne.w	3720c <ull_conn_llcp+0x24>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   37f68:	48c2      	ldr	r0, [pc, #776]	; (38274 <ull_conn_llcp+0x108c>)
   37f6a:	f7f8 f851 	bl	30010 <mem_acquire>
		if (!tx) {
   37f6e:	4601      	mov	r1, r0
   37f70:	2800      	cmp	r0, #0
   37f72:	f43f aec1 	beq.w	37cf8 <ull_conn_llcp+0xb10>
		conn->phy_pref_tx = conn->llcp_phy.tx;
   37f76:	f894 01c8 	ldrb.w	r0, [r4, #456]	; 0x1c8
   37f7a:	f894 31c6 	ldrb.w	r3, [r4, #454]	; 0x1c6
   37f7e:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
   37f82:	ea40 0093 	orr.w	r0, r0, r3, lsr #2
   37f86:	f884 01c8 	strb.w	r0, [r4, #456]	; 0x1c8
		conn->lll.phy_flags = conn->llcp_phy.flags;
   37f8a:	f894 01c7 	ldrb.w	r0, [r4, #455]	; 0x1c7
	ctrl_tx_pause_enqueue(conn, tx, false);
   37f8e:	463a      	mov	r2, r7
		conn->lll.phy_flags = conn->llcp_phy.flags;
   37f90:	f894 7060 	ldrb.w	r7, [r4, #96]	; 0x60
   37f94:	f3c0 0040 	ubfx	r0, r0, #1, #1
   37f98:	f360 07c3 	bfi	r7, r0, #3, #1
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   37f9c:	2001      	movs	r0, #1
   37f9e:	f360 0301 	bfi	r3, r0, #0, #2
   37fa2:	f884 31c6 	strb.w	r3, [r4, #454]	; 0x1c6
		conn->lll.phy_flags = conn->llcp_phy.flags;
   37fa6:	f884 7060 	strb.w	r7, [r4, #96]	; 0x60
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   37faa:	790b      	ldrb	r3, [r1, #4]
   37fac:	f043 0303 	orr.w	r3, r3, #3
   37fb0:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len =
   37fb2:	2303      	movs	r3, #3
   37fb4:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   37fb6:	2316      	movs	r3, #22
   37fb8:	71cb      	strb	r3, [r1, #7]
		pr->tx_phys = conn->llcp_phy.tx;
   37fba:	f894 31c6 	ldrb.w	r3, [r4, #454]	; 0x1c6
   37fbe:	f3c3 0382 	ubfx	r3, r3, #2, #3
   37fc2:	720b      	strb	r3, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
   37fc4:	f894 31c6 	ldrb.w	r3, [r4, #454]	; 0x1c6
   37fc8:	f3c3 1342 	ubfx	r3, r3, #5, #3
   37fcc:	724b      	strb	r3, [r1, #9]
	ctrl_tx_pause_enqueue(conn, tx, false);
   37fce:	4620      	mov	r0, r4
   37fd0:	f7fc fbf2 	bl	347b8 <ctrl_tx_pause_enqueue>
   37fd4:	e6f2      	b.n	37dbc <ull_conn_llcp+0xbd4>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   37fd6:	48a7      	ldr	r0, [pc, #668]	; (38274 <ull_conn_llcp+0x108c>)
   37fd8:	f7f8 f81a 	bl	30010 <mem_acquire>
		if (tx) {
   37fdc:	2800      	cmp	r0, #0
   37fde:	f43f ae8b 	beq.w	37cf8 <ull_conn_llcp+0xb10>
			conn->llcp_version.ack--;
   37fe2:	f894 3139 	ldrb.w	r3, [r4, #313]	; 0x139
   37fe6:	3b01      	subs	r3, #1
   37fe8:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
			conn->llcp_version.tx = 1U;
   37fec:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   37ff0:	f043 0301 	orr.w	r3, r3, #1
   37ff4:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   37ff8:	7903      	ldrb	r3, [r0, #4]
   37ffa:	f043 0303 	orr.w	r3, r3, #3
   37ffe:	7103      	strb	r3, [r0, #4]
			pdu->len =
   38000:	2306      	movs	r3, #6
   38002:	7143      	strb	r3, [r0, #5]
			pdu->llctrl.opcode =
   38004:	f640 430c 	movw	r3, #3084	; 0xc0c
   38008:	f8a0 3007 	strh.w	r3, [r0, #7]
			pdu->llctrl.version_ind.company_id = cid;
   3800c:	4b9a      	ldr	r3, [pc, #616]	; (38278 <ull_conn_llcp+0x1090>)
   3800e:	f8c0 3009 	str.w	r3, [r0, #9]
	    conn->tx_head &&
   38012:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
	if (
   38016:	2b00      	cmp	r3, #0
   38018:	f000 80ee 	beq.w	381f8 <ull_conn_llcp+0x1010>
	    !conn->llcp_cu.pause_tx &&
   3801c:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
	    conn->tx_head &&
   38020:	06d1      	lsls	r1, r2, #27
   38022:	f100 80e9 	bmi.w	381f8 <ull_conn_llcp+0x1010>
	    !conn->llcp_enc.pause_tx &&
   38026:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    !conn->llcp_cu.pause_tx &&
   3802a:	0792      	lsls	r2, r2, #30
   3802c:	f100 80e4 	bmi.w	381f8 <ull_conn_llcp+0x1010>
	    !conn->llcp_phy.pause_tx &&
   38030:	f894 21c7 	ldrb.w	r2, [r4, #455]	; 0x1c7
   38034:	07d7      	lsls	r7, r2, #31
   38036:	f100 80df 	bmi.w	381f8 <ull_conn_llcp+0x1010>
		if (conn->tx_head == conn->tx_data) {
   3803a:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   3803e:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
		if (conn->tx_head == conn->tx_data) {
   38042:	428b      	cmp	r3, r1
   38044:	f000 8279 	beq.w	3853a <ull_conn_llcp+0x1352>
		} else if (!conn->tx_ctrl) {
   38048:	2a00      	cmp	r2, #0
   3804a:	f000 82b5 	beq.w	385b8 <ull_conn_llcp+0x13d0>
	tx->next = conn->tx_ctrl_last->next;
   3804e:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   38052:	681b      	ldr	r3, [r3, #0]
   38054:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   38056:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   3805a:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   3805c:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
	if (!tx->next) {
   38060:	6803      	ldr	r3, [r0, #0]
   38062:	2b00      	cmp	r3, #0
   38064:	f47f aeaa 	bne.w	37dbc <ull_conn_llcp+0xbd4>
		conn->tx_data_last = tx;
   38068:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
			conn->procedure_expire = conn->procedure_reload;
   3806c:	e6a6      	b.n	37dbc <ull_conn_llcp+0xbd4>
		conn->tx_data_last = tx;
   3806e:	f8c4 81dc 	str.w	r8, [r4, #476]	; 0x1dc
   38072:	e423      	b.n	378bc <ull_conn_llcp+0x6d4>
		LL_ASSERT(0);
   38074:	4a81      	ldr	r2, [pc, #516]	; (3827c <ull_conn_llcp+0x1094>)
   38076:	4982      	ldr	r1, [pc, #520]	; (38280 <ull_conn_llcp+0x1098>)
   38078:	4882      	ldr	r0, [pc, #520]	; (38284 <ull_conn_llcp+0x109c>)
   3807a:	f640 7385 	movw	r3, #3973	; 0xf85
   3807e:	f00a faa3 	bl	425c8 <assert_print>
   38082:	4040      	eors	r0, r0
   38084:	f380 8811 	msr	BASEPRI, r0
   38088:	f04f 0003 	mov.w	r0, #3
   3808c:	df02      	svc	2
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3808e:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   38092:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   38096:	f7ff b8b2 	b.w	371fe <ull_conn_llcp+0x16>
	conn->lll.enc_tx = 1;
   3809a:	f043 0310 	orr.w	r3, r3, #16
   3809e:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   380a2:	7903      	ldrb	r3, [r0, #4]
   380a4:	f043 0303 	orr.w	r3, r3, #3
   380a8:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   380aa:	2301      	movs	r3, #1
   380ac:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   380ae:	2306      	movs	r3, #6
   380b0:	71c3      	strb	r3, [r0, #7]
	    conn->tx_head &&
   380b2:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
	if (
   380b6:	b373      	cbz	r3, 38116 <ull_conn_llcp+0xf2e>
	    !conn->llcp_cu.pause_tx &&
   380b8:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
	    conn->tx_head &&
   380bc:	06d2      	lsls	r2, r2, #27
   380be:	d42a      	bmi.n	38116 <ull_conn_llcp+0xf2e>
	    !conn->llcp_enc.pause_tx &&
   380c0:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    !conn->llcp_cu.pause_tx &&
   380c4:	0797      	lsls	r7, r2, #30
   380c6:	d426      	bmi.n	38116 <ull_conn_llcp+0xf2e>
	    !conn->llcp_phy.pause_tx &&
   380c8:	f894 21c7 	ldrb.w	r2, [r4, #455]	; 0x1c7
   380cc:	07d0      	lsls	r0, r2, #31
   380ce:	d422      	bmi.n	38116 <ull_conn_llcp+0xf2e>
		if (conn->tx_head == conn->tx_data) {
   380d0:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   380d4:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
		if (conn->tx_head == conn->tx_data) {
   380d8:	428b      	cmp	r3, r1
   380da:	f000 821d 	beq.w	38518 <ull_conn_llcp+0x1330>
		} else if (!conn->tx_ctrl) {
   380de:	2a00      	cmp	r2, #0
   380e0:	f47f abdc 	bne.w	3789c <ull_conn_llcp+0x6b4>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   380e4:	791a      	ldrb	r2, [r3, #4]
   380e6:	f002 0203 	and.w	r2, r2, #3
   380ea:	2a03      	cmp	r2, #3
   380ec:	f000 82f4 	beq.w	386d8 <ull_conn_llcp+0x14f0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   380f0:	e9c4 3374 	strd	r3, r3, [r4, #464]	; 0x1d0
   380f4:	f7ff bbd2 	b.w	3789c <ull_conn_llcp+0x6b4>
			conn->tx_data = conn->tx_data->next;
   380f8:	681a      	ldr	r2, [r3, #0]
   380fa:	f8c4 21d8 	str.w	r2, [r4, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   380fe:	2900      	cmp	r1, #0
   38100:	f47f aa4b 	bne.w	3759a <ull_conn_llcp+0x3b2>
			tx->next = conn->tx_head->next;
   38104:	681b      	ldr	r3, [r3, #0]
   38106:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   38108:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   3810c:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   3810e:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
				conn->tx_ctrl_last = tx;
   38112:	f7ff ba49 	b.w	375a8 <ull_conn_llcp+0x3c0>
		if (!conn->tx_ctrl) {
   38116:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   3811a:	2a00      	cmp	r2, #0
   3811c:	f47f abbe 	bne.w	3789c <ull_conn_llcp+0x6b4>
			tx->next = conn->tx_head;
   38120:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   38124:	e9c4 8873 	strd	r8, r8, [r4, #460]	; 0x1cc
				conn->tx_ctrl_last = tx;
   38128:	f7ff bbc1 	b.w	378ae <ull_conn_llcp+0x6c6>
	switch (conn->llcp_conn_param.state) {
   3812c:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   38130:	f003 030f 	and.w	r3, r3, #15
   38134:	2b06      	cmp	r3, #6
   38136:	f200 82e6 	bhi.w	38706 <ull_conn_llcp+0x151e>
   3813a:	a001      	add	r0, pc, #4	; (adr r0, 38140 <ull_conn_llcp+0xf58>)
   3813c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   38140:	00037abf 	.word	0x00037abf
   38144:	00037a41 	.word	0x00037a41
   38148:	000379e9 	.word	0x000379e9
   3814c:	0003720f 	.word	0x0003720f
   38150:	0003720f 	.word	0x0003720f
   38154:	0003720f 	.word	0x0003720f
   38158:	0003720f 	.word	0x0003720f
		conn->tx_data_last = tx;
   3815c:	f8c4 81dc 	str.w	r8, [r4, #476]	; 0x1dc
		conn->procedure_expire = conn->procedure_reload;
   38160:	e62c      	b.n	37dbc <ull_conn_llcp+0xbd4>
		conn->tx_data_last = tx;
   38162:	f8c4 71dc 	str.w	r7, [r4, #476]	; 0x1dc
			if (err) {
   38166:	f7ff b967 	b.w	37438 <ull_conn_llcp+0x250>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   3816a:	7903      	ldrb	r3, [r0, #4]
   3816c:	f043 0303 	orr.w	r3, r3, #3
   38170:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
   38172:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   38176:	07da      	lsls	r2, r3, #31
   38178:	d550      	bpl.n	3821c <ull_conn_llcp+0x1034>
	    (conn->llcp_feature.features_conn &
   3817a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	if (conn->common.fex_valid &&
   3817e:	075b      	lsls	r3, r3, #29
   38180:	d54c      	bpl.n	3821c <ull_conn_llcp+0x1034>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   38182:	f240 3311 	movw	r3, #785	; 0x311
   38186:	f8a0 3007 	strh.w	r3, [r0, #7]
		p->error_code = conn->llcp.encryption.error_code;
   3818a:	f894 30f5 	ldrb.w	r3, [r4, #245]	; 0xf5
   3818e:	7243      	strb	r3, [r0, #9]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
   38190:	f888 7005 	strb.w	r7, [r8, #5]
	conn->llcp.encryption.error_code = 0U;
   38194:	2300      	movs	r3, #0
   38196:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
	    conn->tx_head &&
   3819a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
	if (
   3819e:	b3a3      	cbz	r3, 3820a <ull_conn_llcp+0x1022>
	    !conn->llcp_cu.pause_tx &&
   381a0:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
	    conn->tx_head &&
   381a4:	06d0      	lsls	r0, r2, #27
   381a6:	d430      	bmi.n	3820a <ull_conn_llcp+0x1022>
	    !conn->llcp_enc.pause_tx &&
   381a8:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    !conn->llcp_cu.pause_tx &&
   381ac:	0791      	lsls	r1, r2, #30
   381ae:	d42c      	bmi.n	3820a <ull_conn_llcp+0x1022>
	    !conn->llcp_phy.pause_tx &&
   381b0:	f894 21c7 	ldrb.w	r2, [r4, #455]	; 0x1c7
   381b4:	07d2      	lsls	r2, r2, #31
   381b6:	d428      	bmi.n	3820a <ull_conn_llcp+0x1022>
		if (conn->tx_head == conn->tx_data) {
   381b8:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   381bc:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
		if (conn->tx_head == conn->tx_data) {
   381c0:	428b      	cmp	r3, r1
   381c2:	f000 8190 	beq.w	384e6 <ull_conn_llcp+0x12fe>
		} else if (!conn->tx_ctrl) {
   381c6:	2a00      	cmp	r2, #0
   381c8:	f000 8276 	beq.w	386b8 <ull_conn_llcp+0x14d0>
	tx->next = conn->tx_ctrl_last->next;
   381cc:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   381d0:	681b      	ldr	r3, [r3, #0]
   381d2:	f8c8 3000 	str.w	r3, [r8]
	conn->tx_ctrl_last->next = tx;
   381d6:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   381da:	f8c3 8000 	str.w	r8, [r3]
	conn->tx_ctrl_last = tx;
   381de:	f8c4 81d4 	str.w	r8, [r4, #468]	; 0x1d4
	if (!tx->next) {
   381e2:	f8d8 3000 	ldr.w	r3, [r8]
   381e6:	b38b      	cbz	r3, 3824c <ull_conn_llcp+0x1064>
			conn->llcp_ack = conn->llcp_req;
   381e8:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   381ec:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   381f0:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
			return;
   381f4:	f7ff b80b 	b.w	3720e <ull_conn_llcp+0x26>
		if (!conn->tx_ctrl) {
   381f8:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   381fc:	2a00      	cmp	r2, #0
   381fe:	f47f af26 	bne.w	3804e <ull_conn_llcp+0xe66>
			tx->next = conn->tx_head;
   38202:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   38204:	e9c4 0073 	strd	r0, r0, [r4, #460]	; 0x1cc
				conn->tx_ctrl_last = tx;
   38208:	e728      	b.n	3805c <ull_conn_llcp+0xe74>
		if (!conn->tx_ctrl) {
   3820a:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   3820e:	2a00      	cmp	r2, #0
   38210:	d1dc      	bne.n	381cc <ull_conn_llcp+0xfe4>
			tx->next = conn->tx_head;
   38212:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   38216:	e9c4 8873 	strd	r8, r8, [r4, #460]	; 0x1cc
				conn->tx_ctrl_last = tx;
   3821a:	e7e0      	b.n	381de <ull_conn_llcp+0xff6>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   3821c:	230d      	movs	r3, #13
   3821e:	f888 3007 	strb.w	r3, [r8, #7]
		p->error_code =	conn->llcp.encryption.error_code;
   38222:	f894 30f5 	ldrb.w	r3, [r4, #245]	; 0xf5
   38226:	f888 3008 	strb.w	r3, [r8, #8]
   3822a:	2702      	movs	r7, #2
   3822c:	e7b0      	b.n	38190 <ull_conn_llcp+0xfa8>
			conn->tx_data = conn->tx_data->next;
   3822e:	6819      	ldr	r1, [r3, #0]
   38230:	f8c4 11d8 	str.w	r1, [r4, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   38234:	2a00      	cmp	r2, #0
   38236:	f47f a88e 	bne.w	37356 <ull_conn_llcp+0x16e>
			tx->next = conn->tx_head->next;
   3823a:	681b      	ldr	r3, [r3, #0]
   3823c:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   3823e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   38242:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   38244:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
				conn->tx_ctrl_last = tx;
   38248:	f7ff b88c 	b.w	37364 <ull_conn_llcp+0x17c>
		conn->tx_data_last = tx;
   3824c:	f8c4 81dc 	str.w	r8, [r4, #476]	; 0x1dc
   38250:	e7ca      	b.n	381e8 <ull_conn_llcp+0x1000>
		if (!conn->tx_ctrl) {
   38252:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   38256:	2900      	cmp	r1, #0
   38258:	f47f ac8c 	bne.w	37b74 <ull_conn_llcp+0x98c>
			tx->next = conn->tx_head;
   3825c:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
   3825e:	e9c4 2273 	strd	r2, r2, [r4, #460]	; 0x1cc
				conn->tx_ctrl_last = tx;
   38262:	e48e      	b.n	37b82 <ull_conn_llcp+0x99a>
	    ((pdu_data_tx->llctrl.opcode !=
   38264:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   38266:	2a03      	cmp	r2, #3
   38268:	f43f af4c 	beq.w	38104 <ull_conn_llcp+0xf1c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3826c:	2a0a      	cmp	r2, #10
   3826e:	f47f a98c 	bne.w	3758a <ull_conn_llcp+0x3a2>
   38272:	e747      	b.n	38104 <ull_conn_llcp+0xf1c>
   38274:	20002820 	.word	0x20002820
   38278:	ffff05f1 	.word	0xffff05f1
   3827c:	00049c60 	.word	0x00049c60
   38280:	00049810 	.word	0x00049810
   38284:	000497b0 	.word	0x000497b0
		conn->llcp_phy.ack = conn->llcp_phy.req;
   38288:	f884 31c5 	strb.w	r3, [r4, #453]	; 0x1c5
		if (conn->llcp_phy.tx & PHY_2M) {
   3828c:	f3c2 0382 	ubfx	r3, r2, #2, #3
   38290:	0712      	lsls	r2, r2, #28
   38292:	f100 811c 	bmi.w	384ce <ull_conn_llcp+0x12e6>
		} else if (conn->llcp_phy.tx & PHY_1M) {
   38296:	f013 0201 	ands.w	r2, r3, #1
   3829a:	d104      	bne.n	382a6 <ull_conn_llcp+0x10be>
		} else if (conn->llcp_phy.tx & PHY_CODED) {
   3829c:	2b03      	cmp	r3, #3
   3829e:	bf94      	ite	ls
   382a0:	2300      	movls	r3, #0
   382a2:	2301      	movhi	r3, #1
   382a4:	009a      	lsls	r2, r3, #2
			conn->llcp_phy.tx = PHY_2M;
   382a6:	f894 11c6 	ldrb.w	r1, [r4, #454]	; 0x1c6
   382aa:	f362 0184 	bfi	r1, r2, #2, #3
		if (conn->llcp_phy.rx & PHY_2M) {
   382ae:	064f      	lsls	r7, r1, #25
			conn->llcp_phy.tx = PHY_2M;
   382b0:	f884 11c6 	strb.w	r1, [r4, #454]	; 0x1c6
		if (conn->llcp_phy.rx & PHY_2M) {
   382b4:	f3c1 1342 	ubfx	r3, r1, #5, #3
   382b8:	f100 8107 	bmi.w	384ca <ull_conn_llcp+0x12e2>
		} else if (conn->llcp_phy.rx & PHY_1M) {
   382bc:	f013 0101 	ands.w	r1, r3, #1
   382c0:	d104      	bne.n	382cc <ull_conn_llcp+0x10e4>
		} else if (conn->llcp_phy.rx & PHY_CODED) {
   382c2:	2b03      	cmp	r3, #3
   382c4:	bf94      	ite	ls
   382c6:	2300      	movls	r3, #0
   382c8:	2301      	movhi	r3, #1
   382ca:	0099      	lsls	r1, r3, #2
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   382cc:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
			conn->llcp_phy.rx = PHY_2M;
   382d0:	f894 71c6 	ldrb.w	r7, [r4, #454]	; 0x1c6
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   382d4:	f003 0307 	and.w	r3, r3, #7
			conn->llcp.phy_upd_ind.tx = 0U;
   382d8:	4293      	cmp	r3, r2
   382da:	bf08      	it	eq
   382dc:	2200      	moveq	r2, #0
		conn->llcp_ack -= 2U;
   382de:	3802      	subs	r0, #2
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   382e0:	f894 31c7 	ldrb.w	r3, [r4, #455]	; 0x1c7
		conn->llcp_ack -= 2U;
   382e4:	f884 00e5 	strb.w	r0, [r4, #229]	; 0xe5
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   382e8:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   382ec:	f3c3 0380 	ubfx	r3, r3, #2, #1
		conn->llcp.phy_upd_ind.initiate = 1U;
   382f0:	005b      	lsls	r3, r3, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   382f2:	f000 0007 	and.w	r0, r0, #7
			conn->llcp_phy.rx = PHY_2M;
   382f6:	f361 1747 	bfi	r7, r1, #5, #3
		conn->llcp.phy_upd_ind.initiate = 1U;
   382fa:	f043 0301 	orr.w	r3, r3, #1
			conn->llcp.phy_upd_ind.rx = 0U;
   382fe:	4288      	cmp	r0, r1
   38300:	bf08      	it	eq
   38302:	2100      	moveq	r1, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   38304:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   38308:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
			conn->llcp_phy.rx = PHY_2M;
   3830c:	f884 71c6 	strb.w	r7, [r4, #454]	; 0x1c6
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   38310:	f362 0184 	bfi	r1, r2, #2, #3
		conn->llcp.phy_upd_ind.initiate = 1U;
   38314:	f001 011c 	and.w	r1, r1, #28
   38318:	430b      	orrs	r3, r1
		conn->llcp_type = LLCP_PHY_UPD;
   3831a:	2206      	movs	r2, #6
		conn->llcp.phy_upd_ind.initiate = 1U;
   3831c:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
		conn->llcp_type = LLCP_PHY_UPD;
   38320:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   38324:	f7fe bf8e 	b.w	37244 <ull_conn_llcp+0x5c>
			conn->tx_data = conn->tx_data->next;
   38328:	6819      	ldr	r1, [r3, #0]
   3832a:	f8c4 11d8 	str.w	r1, [r4, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   3832e:	2a00      	cmp	r2, #0
   38330:	f47f aa24 	bne.w	3777c <ull_conn_llcp+0x594>
			tx->next = conn->tx_head->next;
   38334:	681b      	ldr	r3, [r3, #0]
   38336:	f8c8 3000 	str.w	r3, [r8]
			conn->tx_head->next = tx;
   3833a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   3833e:	f8c3 8000 	str.w	r8, [r3]
				conn->tx_ctrl = tx;
   38342:	f8c4 81d0 	str.w	r8, [r4, #464]	; 0x1d0
				conn->tx_ctrl_last = tx;
   38346:	f7ff ba22 	b.w	3778e <ull_conn_llcp+0x5a6>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3834a:	791a      	ldrb	r2, [r3, #4]
   3834c:	f002 0203 	and.w	r2, r2, #3
   38350:	2a03      	cmp	r2, #3
   38352:	f000 80b2 	beq.w	384ba <ull_conn_llcp+0x12d2>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   38356:	e9c4 3374 	strd	r3, r3, [r4, #464]	; 0x1d0
   3835a:	f7fe bffc 	b.w	37356 <ull_conn_llcp+0x16e>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3835e:	48c3      	ldr	r0, [pc, #780]	; (3866c <ull_conn_llcp+0x1484>)
   38360:	f7f7 fe56 	bl	30010 <mem_acquire>
	if (!tx) {
   38364:	2800      	cmp	r0, #0
   38366:	f43f acc7 	beq.w	37cf8 <ull_conn_llcp+0xb10>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   3836a:	7902      	ldrb	r2, [r0, #4]
   3836c:	f042 0203 	orr.w	r2, r2, #3
   38370:	7102      	strb	r2, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
   38372:	2218      	movs	r2, #24
   38374:	7142      	strb	r2, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
   38376:	2210      	movs	r2, #16
   38378:	71c2      	strb	r2, [r0, #7]
		sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   3837a:	f8b4 2188 	ldrh.w	r2, [r4, #392]	; 0x188
	rsp->interval_min =
   3837e:	8102      	strh	r2, [r0, #8]
		sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   38380:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
	rsp->interval_max =
   38384:	8142      	strh	r2, [r0, #10]
		sys_cpu_to_le16(conn->llcp_conn_param.latency);
   38386:	f8b4 218c 	ldrh.w	r2, [r4, #396]	; 0x18c
	rsp->latency =
   3838a:	8182      	strh	r2, [r0, #12]
		sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   3838c:	f8b4 218e 	ldrh.w	r2, [r4, #398]	; 0x18e
	rsp->timeout =
   38390:	81c2      	strh	r2, [r0, #14]
		conn->llcp_conn_param.preferred_periodicity;
   38392:	f894 2198 	ldrb.w	r2, [r4, #408]	; 0x198
	rsp->preferred_periodicity =
   38396:	7402      	strb	r2, [r0, #16]
		sys_cpu_to_le16(conn->llcp_conn_param.reference_conn_event_count);
   38398:	f8b4 219a 	ldrh.w	r2, [r4, #410]	; 0x19a
	rsp->reference_conn_event_count =
   3839c:	f8a0 2011 	strh.w	r2, [r0, #17]
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
   383a0:	f8b4 219c 	ldrh.w	r2, [r4, #412]	; 0x19c
   383a4:	f8a0 2013 	strh.w	r2, [r0, #19]
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
   383a8:	f8b4 219e 	ldrh.w	r2, [r4, #414]	; 0x19e
   383ac:	f8a0 2015 	strh.w	r2, [r0, #21]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
   383b0:	f8b4 21a0 	ldrh.w	r2, [r4, #416]	; 0x1a0
   383b4:	f8a0 2017 	strh.w	r2, [r0, #23]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
   383b8:	f8b4 21a2 	ldrh.w	r2, [r4, #418]	; 0x1a2
   383bc:	f8a0 2019 	strh.w	r2, [r0, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
   383c0:	f8b4 21a4 	ldrh.w	r2, [r4, #420]	; 0x1a4
   383c4:	f8a0 201b 	strh.w	r2, [r0, #27]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
   383c8:	f8b4 21a6 	ldrh.w	r2, [r4, #422]	; 0x1a6
   383cc:	f8a0 201d 	strh.w	r2, [r0, #29]
	    conn->tx_head &&
   383d0:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
	if (
   383d4:	2a00      	cmp	r2, #0
   383d6:	f000 80c2 	beq.w	3855e <ull_conn_llcp+0x1376>
	    !conn->llcp_cu.pause_tx &&
   383da:	f894 110e 	ldrb.w	r1, [r4, #270]	; 0x10e
	    conn->tx_head &&
   383de:	06c9      	lsls	r1, r1, #27
   383e0:	f100 80bd 	bmi.w	3855e <ull_conn_llcp+0x1376>
	    !conn->llcp_enc.pause_tx &&
   383e4:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    !conn->llcp_cu.pause_tx &&
   383e8:	078b      	lsls	r3, r1, #30
   383ea:	f100 80b8 	bmi.w	3855e <ull_conn_llcp+0x1376>
	    !conn->llcp_phy.pause_tx &&
   383ee:	f894 11c7 	ldrb.w	r1, [r4, #455]	; 0x1c7
   383f2:	07cf      	lsls	r7, r1, #31
   383f4:	f100 80b3 	bmi.w	3855e <ull_conn_llcp+0x1376>
		if (conn->tx_head == conn->tx_data) {
   383f8:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   383fc:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (conn->tx_head == conn->tx_data) {
   38400:	429a      	cmp	r2, r3
   38402:	f000 813d 	beq.w	38680 <ull_conn_llcp+0x1498>
		} else if (!conn->tx_ctrl) {
   38406:	2900      	cmp	r1, #0
   38408:	f000 8132 	beq.w	38670 <ull_conn_llcp+0x1488>
	tx->next = conn->tx_ctrl_last->next;
   3840c:	f8d4 21d4 	ldr.w	r2, [r4, #468]	; 0x1d4
   38410:	6812      	ldr	r2, [r2, #0]
   38412:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   38414:	f8d4 21d4 	ldr.w	r2, [r4, #468]	; 0x1d4
   38418:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
   3841a:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
	if (!tx->next) {
   3841e:	6802      	ldr	r2, [r0, #0]
   38420:	2a00      	cmp	r2, #0
   38422:	f000 8120 	beq.w	38666 <ull_conn_llcp+0x147e>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
   38426:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3842a:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
   3842e:	2305      	movs	r3, #5
   38430:	f363 0203 	bfi	r2, r3, #0, #4
   38434:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   38438:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3843c:	f7fe bedf 	b.w	371fe <ull_conn_llcp+0x16>
			conn->tx_data = conn->tx_data->next;
   38440:	6819      	ldr	r1, [r3, #0]
   38442:	f8c4 11d8 	str.w	r1, [r4, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   38446:	2a00      	cmp	r2, #0
   38448:	f47f abeb 	bne.w	37c22 <ull_conn_llcp+0xa3a>
			tx->next = conn->tx_head->next;
   3844c:	681b      	ldr	r3, [r3, #0]
   3844e:	6033      	str	r3, [r6, #0]
			conn->tx_head->next = tx;
   38450:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   38454:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl = tx;
   38456:	f8c4 61d0 	str.w	r6, [r4, #464]	; 0x1d0
				conn->tx_ctrl_last = tx;
   3845a:	f7ff bbe9 	b.w	37c30 <ull_conn_llcp+0xa48>
			conn->tx_data = conn->tx_data->next;
   3845e:	6819      	ldr	r1, [r3, #0]
   38460:	f8c4 11d8 	str.w	r1, [r4, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   38464:	2a00      	cmp	r2, #0
   38466:	f47f ac99 	bne.w	37d9c <ull_conn_llcp+0xbb4>
			tx->next = conn->tx_head->next;
   3846a:	681b      	ldr	r3, [r3, #0]
   3846c:	f8c8 3000 	str.w	r3, [r8]
			conn->tx_head->next = tx;
   38470:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   38474:	f8c3 8000 	str.w	r8, [r3]
				conn->tx_ctrl = tx;
   38478:	f8c4 81d0 	str.w	r8, [r4, #464]	; 0x1d0
				conn->tx_ctrl_last = tx;
   3847c:	e497      	b.n	37dae <ull_conn_llcp+0xbc6>
			conn->tx_data = conn->tx_data->next;
   3847e:	6819      	ldr	r1, [r3, #0]
   38480:	f8c4 11d8 	str.w	r1, [r4, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   38484:	2a00      	cmp	r2, #0
   38486:	f47e afca 	bne.w	3741e <ull_conn_llcp+0x236>
			tx->next = conn->tx_head->next;
   3848a:	681b      	ldr	r3, [r3, #0]
   3848c:	603b      	str	r3, [r7, #0]
			conn->tx_head->next = tx;
   3848e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   38492:	601f      	str	r7, [r3, #0]
				conn->tx_ctrl = tx;
   38494:	f8c4 71d0 	str.w	r7, [r4, #464]	; 0x1d0
				conn->tx_ctrl_last = tx;
   38498:	f7fe bfc8 	b.w	3742c <ull_conn_llcp+0x244>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3849c:	791a      	ldrb	r2, [r3, #4]
   3849e:	f002 0203 	and.w	r2, r2, #3
   384a2:	2a03      	cmp	r2, #3
   384a4:	f000 8091 	beq.w	385ca <ull_conn_llcp+0x13e2>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   384a8:	e9c4 3374 	strd	r3, r3, [r4, #464]	; 0x1d0
   384ac:	f7ff bbb9 	b.w	37c22 <ull_conn_llcp+0xa3a>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   384b0:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   384b4:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
   384b8:	e41b      	b.n	37cf2 <ull_conn_llcp+0xb0a>
	    ((pdu_data_tx->llctrl.opcode !=
   384ba:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   384bc:	2a03      	cmp	r2, #3
   384be:	f43f aebc 	beq.w	3823a <ull_conn_llcp+0x1052>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   384c2:	2a0a      	cmp	r2, #10
   384c4:	f47f af47 	bne.w	38356 <ull_conn_llcp+0x116e>
   384c8:	e6b7      	b.n	3823a <ull_conn_llcp+0x1052>
   384ca:	2102      	movs	r1, #2
   384cc:	e6fe      	b.n	382cc <ull_conn_llcp+0x10e4>
   384ce:	2202      	movs	r2, #2
   384d0:	e6e9      	b.n	382a6 <ull_conn_llcp+0x10be>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   384d2:	791a      	ldrb	r2, [r3, #4]
   384d4:	f002 0203 	and.w	r2, r2, #3
   384d8:	2a03      	cmp	r2, #3
   384da:	f000 80f5 	beq.w	386c8 <ull_conn_llcp+0x14e0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   384de:	e9c4 3374 	strd	r3, r3, [r4, #464]	; 0x1d0
   384e2:	f7ff b94b 	b.w	3777c <ull_conn_llcp+0x594>
			conn->tx_data = conn->tx_data->next;
   384e6:	6819      	ldr	r1, [r3, #0]
   384e8:	f8c4 11d8 	str.w	r1, [r4, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   384ec:	2a00      	cmp	r2, #0
   384ee:	f47f ae6d 	bne.w	381cc <ull_conn_llcp+0xfe4>
			tx->next = conn->tx_head->next;
   384f2:	681b      	ldr	r3, [r3, #0]
   384f4:	f8c8 3000 	str.w	r3, [r8]
			conn->tx_head->next = tx;
   384f8:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   384fc:	f8c3 8000 	str.w	r8, [r3]
				conn->tx_ctrl = tx;
   38500:	f8c4 81d0 	str.w	r8, [r4, #464]	; 0x1d0
				conn->tx_ctrl_last = tx;
   38504:	e66b      	b.n	381de <ull_conn_llcp+0xff6>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   38506:	7913      	ldrb	r3, [r2, #4]
   38508:	f003 0303 	and.w	r3, r3, #3
   3850c:	2b03      	cmp	r3, #3
   3850e:	d064      	beq.n	385da <ull_conn_llcp+0x13f2>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   38510:	e9c4 2274 	strd	r2, r2, [r4, #464]	; 0x1d0
   38514:	f7ff b9c2 	b.w	3789c <ull_conn_llcp+0x6b4>
			conn->tx_data = conn->tx_data->next;
   38518:	6819      	ldr	r1, [r3, #0]
   3851a:	f8c4 11d8 	str.w	r1, [r4, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   3851e:	2a00      	cmp	r2, #0
   38520:	f47f a9bc 	bne.w	3789c <ull_conn_llcp+0x6b4>
			tx->next = conn->tx_head->next;
   38524:	681b      	ldr	r3, [r3, #0]
   38526:	f8c8 3000 	str.w	r3, [r8]
			conn->tx_head->next = tx;
   3852a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   3852e:	f8c3 8000 	str.w	r8, [r3]
				conn->tx_ctrl = tx;
   38532:	f8c4 81d0 	str.w	r8, [r4, #464]	; 0x1d0
				conn->tx_ctrl_last = tx;
   38536:	f7ff b9ba 	b.w	378ae <ull_conn_llcp+0x6c6>
			conn->tx_data = conn->tx_data->next;
   3853a:	6819      	ldr	r1, [r3, #0]
   3853c:	f8c4 11d8 	str.w	r1, [r4, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   38540:	2a00      	cmp	r2, #0
   38542:	f47f ad84 	bne.w	3804e <ull_conn_llcp+0xe66>
			tx->next = conn->tx_head->next;
   38546:	681b      	ldr	r3, [r3, #0]
   38548:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   3854a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   3854e:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   38550:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
				conn->tx_ctrl_last = tx;
   38554:	e582      	b.n	3805c <ull_conn_llcp+0xe74>
			conn->llcp_cu.interval = interval_max;
   38556:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
   3855a:	f7ff ba98 	b.w	37a8e <ull_conn_llcp+0x8a6>
		if (!conn->tx_ctrl) {
   3855e:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   38562:	2900      	cmp	r1, #0
   38564:	f47f af52 	bne.w	3840c <ull_conn_llcp+0x1224>
			tx->next = conn->tx_head;
   38568:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   3856a:	e9c4 0073 	strd	r0, r0, [r4, #460]	; 0x1cc
				conn->tx_ctrl_last = tx;
   3856e:	e754      	b.n	3841a <ull_conn_llcp+0x1232>
		if (!conn->tx_ctrl) {
   38570:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   38574:	2900      	cmp	r1, #0
   38576:	f47f ab95 	bne.w	37ca4 <ull_conn_llcp+0xabc>
			tx->next = conn->tx_head;
   3857a:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   3857c:	e9c4 0073 	strd	r0, r0, [r4, #460]	; 0x1cc
				conn->tx_ctrl_last = tx;
   38580:	f7ff bb97 	b.w	37cb2 <ull_conn_llcp+0xaca>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   38584:	791a      	ldrb	r2, [r3, #4]
   38586:	f002 0203 	and.w	r2, r2, #3
   3858a:	2a03      	cmp	r2, #3
   3858c:	d03c      	beq.n	38608 <ull_conn_llcp+0x1420>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3858e:	e9c4 3374 	strd	r3, r3, [r4, #464]	; 0x1d0
   38592:	e403      	b.n	37d9c <ull_conn_llcp+0xbb4>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   38594:	791a      	ldrb	r2, [r3, #4]
   38596:	f002 0203 	and.w	r2, r2, #3
   3859a:	2a03      	cmp	r2, #3
   3859c:	d07e      	beq.n	3869c <ull_conn_llcp+0x14b4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3859e:	e9c4 3374 	strd	r3, r3, [r4, #464]	; 0x1d0
   385a2:	f7fe bf3c 	b.w	3741e <ull_conn_llcp+0x236>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   385a6:	7919      	ldrb	r1, [r3, #4]
   385a8:	f001 0103 	and.w	r1, r1, #3
   385ac:	2903      	cmp	r1, #3
   385ae:	d04e      	beq.n	3864e <ull_conn_llcp+0x1466>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   385b0:	e9c4 3374 	strd	r3, r3, [r4, #464]	; 0x1d0
   385b4:	f7ff bade 	b.w	37b74 <ull_conn_llcp+0x98c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   385b8:	791a      	ldrb	r2, [r3, #4]
   385ba:	f002 0203 	and.w	r2, r2, #3
   385be:	2a03      	cmp	r2, #3
   385c0:	f000 8092 	beq.w	386e8 <ull_conn_llcp+0x1500>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   385c4:	e9c4 3374 	strd	r3, r3, [r4, #464]	; 0x1d0
   385c8:	e541      	b.n	3804e <ull_conn_llcp+0xe66>
	    ((pdu_data_tx->llctrl.opcode !=
   385ca:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   385cc:	2a03      	cmp	r2, #3
   385ce:	f43f af3d 	beq.w	3844c <ull_conn_llcp+0x1264>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   385d2:	2a0a      	cmp	r2, #10
   385d4:	f47f af68 	bne.w	384a8 <ull_conn_llcp+0x12c0>
   385d8:	e738      	b.n	3844c <ull_conn_llcp+0x1264>
	    ((pdu_data_tx->llctrl.opcode !=
   385da:	79d3      	ldrb	r3, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   385dc:	2b03      	cmp	r3, #3
   385de:	f43f a97b 	beq.w	378d8 <ull_conn_llcp+0x6f0>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   385e2:	2b0a      	cmp	r3, #10
   385e4:	d194      	bne.n	38510 <ull_conn_llcp+0x1328>
   385e6:	f7ff b977 	b.w	378d8 <ull_conn_llcp+0x6f0>
			conn->tx_data = conn->tx_data->next;
   385ea:	6813      	ldr	r3, [r2, #0]
   385ec:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   385f0:	2900      	cmp	r1, #0
   385f2:	f47f ab57 	bne.w	37ca4 <ull_conn_llcp+0xabc>
			tx->next = conn->tx_head->next;
   385f6:	6812      	ldr	r2, [r2, #0]
   385f8:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   385fa:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   385fe:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl = tx;
   38600:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
				conn->tx_ctrl_last = tx;
   38604:	f7ff bb55 	b.w	37cb2 <ull_conn_llcp+0xaca>
	    ((pdu_data_tx->llctrl.opcode !=
   38608:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3860a:	2a03      	cmp	r2, #3
   3860c:	f43f af2d 	beq.w	3846a <ull_conn_llcp+0x1282>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   38610:	2a0a      	cmp	r2, #10
   38612:	d1bc      	bne.n	3858e <ull_conn_llcp+0x13a6>
   38614:	e729      	b.n	3846a <ull_conn_llcp+0x1282>
		conn->tx_data_last = tx;
   38616:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
   3861a:	f7ff bb50 	b.w	37cbe <ull_conn_llcp+0xad6>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3861e:	7911      	ldrb	r1, [r2, #4]
   38620:	f001 0103 	and.w	r1, r1, #3
   38624:	2903      	cmp	r1, #3
   38626:	d018      	beq.n	3865a <ull_conn_llcp+0x1472>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   38628:	e9c4 2274 	strd	r2, r2, [r4, #464]	; 0x1d0
   3862c:	f7ff bb3a 	b.w	37ca4 <ull_conn_llcp+0xabc>
			conn->tx_data = conn->tx_data->next;
   38630:	6818      	ldr	r0, [r3, #0]
   38632:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   38636:	2900      	cmp	r1, #0
   38638:	f47f aa9c 	bne.w	37b74 <ull_conn_llcp+0x98c>
			tx->next = conn->tx_head->next;
   3863c:	681b      	ldr	r3, [r3, #0]
   3863e:	6013      	str	r3, [r2, #0]
			conn->tx_head->next = tx;
   38640:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   38644:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl = tx;
   38646:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
				conn->tx_ctrl_last = tx;
   3864a:	f7ff ba9a 	b.w	37b82 <ull_conn_llcp+0x99a>
	    ((pdu_data_tx->llctrl.opcode !=
   3864e:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   38650:	2903      	cmp	r1, #3
   38652:	d0f3      	beq.n	3863c <ull_conn_llcp+0x1454>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   38654:	290a      	cmp	r1, #10
   38656:	d1ab      	bne.n	385b0 <ull_conn_llcp+0x13c8>
   38658:	e7f0      	b.n	3863c <ull_conn_llcp+0x1454>
	    ((pdu_data_tx->llctrl.opcode !=
   3865a:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3865c:	2903      	cmp	r1, #3
   3865e:	d0ca      	beq.n	385f6 <ull_conn_llcp+0x140e>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   38660:	290a      	cmp	r1, #10
   38662:	d1e1      	bne.n	38628 <ull_conn_llcp+0x1440>
   38664:	e7c7      	b.n	385f6 <ull_conn_llcp+0x140e>
		conn->tx_data_last = tx;
   38666:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
   3866a:	e6dc      	b.n	38426 <ull_conn_llcp+0x123e>
   3866c:	20002820 	.word	0x20002820
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   38670:	7911      	ldrb	r1, [r2, #4]
   38672:	f001 0103 	and.w	r1, r1, #3
   38676:	2903      	cmp	r1, #3
   38678:	d018      	beq.n	386ac <ull_conn_llcp+0x14c4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3867a:	e9c4 2274 	strd	r2, r2, [r4, #464]	; 0x1d0
   3867e:	e6c5      	b.n	3840c <ull_conn_llcp+0x1224>
			conn->tx_data = conn->tx_data->next;
   38680:	6813      	ldr	r3, [r2, #0]
   38682:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   38686:	2900      	cmp	r1, #0
   38688:	f47f aec0 	bne.w	3840c <ull_conn_llcp+0x1224>
			tx->next = conn->tx_head->next;
   3868c:	6812      	ldr	r2, [r2, #0]
   3868e:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   38690:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   38694:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl = tx;
   38696:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
				conn->tx_ctrl_last = tx;
   3869a:	e6be      	b.n	3841a <ull_conn_llcp+0x1232>
	    ((pdu_data_tx->llctrl.opcode !=
   3869c:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3869e:	2a03      	cmp	r2, #3
   386a0:	f43f aef3 	beq.w	3848a <ull_conn_llcp+0x12a2>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   386a4:	2a0a      	cmp	r2, #10
   386a6:	f47f af7a 	bne.w	3859e <ull_conn_llcp+0x13b6>
   386aa:	e6ee      	b.n	3848a <ull_conn_llcp+0x12a2>
	    ((pdu_data_tx->llctrl.opcode !=
   386ac:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   386ae:	2903      	cmp	r1, #3
   386b0:	d0ec      	beq.n	3868c <ull_conn_llcp+0x14a4>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   386b2:	290a      	cmp	r1, #10
   386b4:	d1e1      	bne.n	3867a <ull_conn_llcp+0x1492>
   386b6:	e7e9      	b.n	3868c <ull_conn_llcp+0x14a4>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   386b8:	791a      	ldrb	r2, [r3, #4]
   386ba:	f002 0203 	and.w	r2, r2, #3
   386be:	2a03      	cmp	r2, #3
   386c0:	d01a      	beq.n	386f8 <ull_conn_llcp+0x1510>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   386c2:	e9c4 3374 	strd	r3, r3, [r4, #464]	; 0x1d0
   386c6:	e581      	b.n	381cc <ull_conn_llcp+0xfe4>
	    ((pdu_data_tx->llctrl.opcode !=
   386c8:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   386ca:	2a03      	cmp	r2, #3
   386cc:	f43f ae32 	beq.w	38334 <ull_conn_llcp+0x114c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   386d0:	2a0a      	cmp	r2, #10
   386d2:	f47f af04 	bne.w	384de <ull_conn_llcp+0x12f6>
   386d6:	e62d      	b.n	38334 <ull_conn_llcp+0x114c>
	    ((pdu_data_tx->llctrl.opcode !=
   386d8:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   386da:	2a03      	cmp	r2, #3
   386dc:	f43f af22 	beq.w	38524 <ull_conn_llcp+0x133c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   386e0:	2a0a      	cmp	r2, #10
   386e2:	f47f ad05 	bne.w	380f0 <ull_conn_llcp+0xf08>
   386e6:	e71d      	b.n	38524 <ull_conn_llcp+0x133c>
	    ((pdu_data_tx->llctrl.opcode !=
   386e8:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   386ea:	2a03      	cmp	r2, #3
   386ec:	f43f af2b 	beq.w	38546 <ull_conn_llcp+0x135e>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   386f0:	2a0a      	cmp	r2, #10
   386f2:	f47f af67 	bne.w	385c4 <ull_conn_llcp+0x13dc>
   386f6:	e726      	b.n	38546 <ull_conn_llcp+0x135e>
	    ((pdu_data_tx->llctrl.opcode !=
   386f8:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   386fa:	2a03      	cmp	r2, #3
   386fc:	f43f aef9 	beq.w	384f2 <ull_conn_llcp+0x130a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   38700:	2a0a      	cmp	r2, #10
   38702:	d1de      	bne.n	386c2 <ull_conn_llcp+0x14da>
   38704:	e6f5      	b.n	384f2 <ull_conn_llcp+0x130a>
		LL_ASSERT(0);
   38706:	4a07      	ldr	r2, [pc, #28]	; (38724 <ull_conn_llcp+0x153c>)
   38708:	4907      	ldr	r1, [pc, #28]	; (38728 <ull_conn_llcp+0x1540>)
   3870a:	4808      	ldr	r0, [pc, #32]	; (3872c <ull_conn_llcp+0x1544>)
   3870c:	f241 03c5 	movw	r3, #4293	; 0x10c5
   38710:	f009 ff5a 	bl	425c8 <assert_print>
   38714:	4040      	eors	r0, r0
   38716:	f380 8811 	msr	BASEPRI, r0
   3871a:	f04f 0003 	mov.w	r0, #3
   3871e:	df02      	svc	2
		break;
   38720:	f7ff baea 	b.w	37cf8 <ull_conn_llcp+0xb10>
   38724:	00049c60 	.word	0x00049c60
   38728:	00049810 	.word	0x00049810
   3872c:	000497b0 	.word	0x000497b0

00038730 <ull_conn_tx_demux>:
{
   38730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   38734:	4c24      	ldr	r4, [pc, #144]	; (387c8 <ull_conn_tx_demux+0x98>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   38736:	4f25      	ldr	r7, [pc, #148]	; (387cc <ull_conn_tx_demux+0x9c>)
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   38738:	7962      	ldrb	r2, [r4, #5]
{
   3873a:	4605      	mov	r5, r0
	return (void *)(fifo + first * size);
   3873c:	f104 0608 	add.w	r6, r4, #8
   38740:	e021      	b.n	38786 <ull_conn_tx_demux+0x56>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   38742:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
   38746:	4638      	mov	r0, r7
   38748:	f7f7 fc96 	bl	30078 <mem_get>
	if (conn->lll.handle != handle) {
   3874c:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   3874e:	bb2a      	cbnz	r2, 3879c <ull_conn_tx_demux+0x6c>
			struct node_tx *tx = lll_tx->node;
   38750:	f8d8 3004 	ldr.w	r3, [r8, #4]
			tx->next = NULL;
   38754:	601a      	str	r2, [r3, #0]
			if (!conn->tx_data) {
   38756:	f8d0 21d8 	ldr.w	r2, [r0, #472]	; 0x1d8
   3875a:	b352      	cbz	r2, 387b2 <ull_conn_tx_demux+0x82>
			if (conn->tx_data_last) {
   3875c:	f8d0 21dc 	ldr.w	r2, [r0, #476]	; 0x1dc
   38760:	b102      	cbz	r2, 38764 <ull_conn_tx_demux+0x34>
				conn->tx_data_last->next = tx;
   38762:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
   38764:	f8c0 31dc 	str.w	r3, [r0, #476]	; 0x1dc
		MFIFO_DEQUEUE(conn_tx);
   38768:	7962      	ldrb	r2, [r4, #5]
	uint8_t _first = *first; /* Copy read-index */
   3876a:	7923      	ldrb	r3, [r4, #4]
   3876c:	78a1      	ldrb	r1, [r4, #2]
	if (_first == last) {
   3876e:	429a      	cmp	r2, r3
   38770:	d005      	beq.n	3877e <ull_conn_tx_demux+0x4e>
	_first += 1U;
   38772:	3301      	adds	r3, #1
   38774:	b2db      	uxtb	r3, r3
		_first = 0U;
   38776:	4299      	cmp	r1, r3
   38778:	bf08      	it	eq
   3877a:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   3877c:	7123      	strb	r3, [r4, #4]
	} while (--count);
   3877e:	3d01      	subs	r5, #1
   38780:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   38784:	d01e      	beq.n	387c4 <ull_conn_tx_demux+0x94>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   38786:	7923      	ldrb	r3, [r4, #4]
   38788:	7821      	ldrb	r1, [r4, #0]
	if (first == last) {
   3878a:	4293      	cmp	r3, r2
   3878c:	d01a      	beq.n	387c4 <ull_conn_tx_demux+0x94>
	return (void *)(fifo + first * size);
   3878e:	fb13 f301 	smulbb	r3, r3, r1
   38792:	eb03 0806 	add.w	r8, r3, r6
	if (handle >= CONFIG_BT_MAX_CONN) {
   38796:	5af2      	ldrh	r2, [r6, r3]
   38798:	2a00      	cmp	r2, #0
   3879a:	d0d2      	beq.n	38742 <ull_conn_tx_demux+0x12>
			struct node_tx *tx = lll_tx->node;
   3879c:	f8d8 1004 	ldr.w	r1, [r8, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
   387a0:	790b      	ldrb	r3, [r1, #4]
   387a2:	f36f 0301 	bfc	r3, #0, #2
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   387a6:	f64f 70ff 	movw	r0, #65535	; 0xffff
			p->ll_id = PDU_DATA_LLID_RESV;
   387aa:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   387ac:	f7fa fe2c 	bl	33408 <ll_tx_ack_put>
   387b0:	e7da      	b.n	38768 <ull_conn_tx_demux+0x38>
				if (!conn->tx_head) {
   387b2:	f8d0 21cc 	ldr.w	r2, [r0, #460]	; 0x1cc
				conn->tx_data = tx;
   387b6:	f8c0 31d8 	str.w	r3, [r0, #472]	; 0x1d8
				if (!conn->tx_head) {
   387ba:	2a00      	cmp	r2, #0
   387bc:	d1ce      	bne.n	3875c <ull_conn_tx_demux+0x2c>
					conn->tx_head = tx;
   387be:	f8c0 31cc 	str.w	r3, [r0, #460]	; 0x1cc
			if (conn->tx_data_last) {
   387c2:	e7cf      	b.n	38764 <ull_conn_tx_demux+0x34>
}
   387c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   387c8:	200007c8 	.word	0x200007c8
   387cc:	20001618 	.word	0x20001618

000387d0 <conn_cleanup>:
{
   387d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (conn == conn_upd_curr) {
   387d4:	4b38      	ldr	r3, [pc, #224]	; (388b8 <conn_cleanup+0xe8>)
	rx = conn->llcp_rx;
   387d6:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
   387da:	681a      	ldr	r2, [r3, #0]
	*((uint8_t *)rx->pdu) = reason;
   387dc:	f880 1160 	strb.w	r1, [r0, #352]	; 0x160
   387e0:	4290      	cmp	r0, r2
		conn_upd_curr = NULL;
   387e2:	bf04      	itt	eq
   387e4:	2200      	moveq	r2, #0
   387e6:	601a      	streq	r2, [r3, #0]
	rx->hdr.handle = conn->lll.handle;
   387e8:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   387ea:	f8a0 214a 	strh.w	r2, [r0, #330]	; 0x14a
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   387ee:	2318      	movs	r3, #24
{
   387f0:	b082      	sub	sp, #8
   387f2:	4606      	mov	r6, r0
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   387f4:	f880 3148 	strb.w	r3, [r0, #328]	; 0x148
	while (rx) {
   387f8:	b144      	cbz	r4, 3880c <conn_cleanup+0x3c>
		hdr->type = NODE_RX_TYPE_RELEASE;
   387fa:	2501      	movs	r5, #1
		rx = hdr->link->mem;
   387fc:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
   387fe:	4621      	mov	r1, r4
		rx = hdr->link->mem;
   38800:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
   38802:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   38804:	f7fa fdb8 	bl	33378 <ll_rx_put>
	while (rx) {
   38808:	2c00      	cmp	r4, #0
   3880a:	d1f7      	bne.n	387fc <conn_cleanup+0x2c>
	while (conn->tx_head) {
   3880c:	f8d6 11cc 	ldr.w	r1, [r6, #460]	; 0x1cc
   38810:	b381      	cbz	r1, 38874 <conn_cleanup+0xa4>
		link = mem_acquire(&mem_link_tx.free);
   38812:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 388bc <conn_cleanup+0xec>
		LL_ASSERT(link);
   38816:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 388c0 <conn_cleanup+0xf0>
   3881a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 388c4 <conn_cleanup+0xf4>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   3881e:	f106 0768 	add.w	r7, r6, #104	; 0x68
   38822:	e007      	b.n	38834 <conn_cleanup+0x64>
   38824:	4629      	mov	r1, r5
   38826:	463a      	mov	r2, r7
   38828:	4620      	mov	r0, r4
   3882a:	f7f7 fc57 	bl	300dc <memq_enqueue>
	while (conn->tx_head) {
   3882e:	f8d6 11cc 	ldr.w	r1, [r6, #460]	; 0x1cc
   38832:	b1f9      	cbz	r1, 38874 <conn_cleanup+0xa4>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   38834:	4630      	mov	r0, r6
   38836:	f7fc fa1b 	bl	34c70 <tx_ull_dequeue>
   3883a:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
   3883c:	4640      	mov	r0, r8
   3883e:	f7f7 fbe7 	bl	30010 <mem_acquire>
		LL_ASSERT(link);
   38842:	4604      	mov	r4, r0
   38844:	2800      	cmp	r0, #0
   38846:	d1ed      	bne.n	38824 <conn_cleanup+0x54>
   38848:	481f      	ldr	r0, [pc, #124]	; (388c8 <conn_cleanup+0xf8>)
   3884a:	f640 2349 	movw	r3, #2633	; 0xa49
   3884e:	4652      	mov	r2, sl
   38850:	4649      	mov	r1, r9
   38852:	f009 feb9 	bl	425c8 <assert_print>
   38856:	4040      	eors	r0, r0
   38858:	f380 8811 	msr	BASEPRI, r0
   3885c:	f04f 0003 	mov.w	r0, #3
   38860:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   38862:	4629      	mov	r1, r5
   38864:	463a      	mov	r2, r7
   38866:	4620      	mov	r0, r4
   38868:	f7f7 fc38 	bl	300dc <memq_enqueue>
	while (conn->tx_head) {
   3886c:	f8d6 11cc 	ldr.w	r1, [r6, #460]	; 0x1cc
   38870:	2900      	cmp	r1, #0
   38872:	d1df      	bne.n	38834 <conn_cleanup+0x64>
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   38874:	8d32      	ldrh	r2, [r6, #40]	; 0x28
   38876:	4b15      	ldr	r3, [pc, #84]	; (388cc <conn_cleanup+0xfc>)
   38878:	9600      	str	r6, [sp, #0]
   3887a:	3203      	adds	r2, #3
   3887c:	b2d2      	uxtb	r2, r2
   3887e:	2101      	movs	r1, #1
   38880:	2000      	movs	r0, #0
   38882:	f7f8 fe21 	bl	314c8 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   38886:	f030 0302 	bics.w	r3, r0, #2
   3888a:	d00c      	beq.n	388a6 <conn_cleanup+0xd6>
   3888c:	4a0c      	ldr	r2, [pc, #48]	; (388c0 <conn_cleanup+0xf0>)
   3888e:	4910      	ldr	r1, [pc, #64]	; (388d0 <conn_cleanup+0x100>)
   38890:	480d      	ldr	r0, [pc, #52]	; (388c8 <conn_cleanup+0xf8>)
   38892:	f640 230e 	movw	r3, #2574	; 0xa0e
   38896:	f009 fe97 	bl	425c8 <assert_print>
   3889a:	4040      	eors	r0, r0
   3889c:	f380 8811 	msr	BASEPRI, r0
   388a0:	f04f 0003 	mov.w	r0, #3
   388a4:	df02      	svc	2
	lll->handle = LLL_HANDLE_INVALID;
   388a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   388aa:	20ff      	movs	r0, #255	; 0xff
	lll->handle = LLL_HANDLE_INVALID;
   388ac:	8533      	strh	r3, [r6, #40]	; 0x28
}
   388ae:	b002      	add	sp, #8
   388b0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull_conn_tx_demux(UINT8_MAX);
   388b4:	f7ff bf3c 	b.w	38730 <ull_conn_tx_demux>
   388b8:	20002968 	.word	0x20002968
   388bc:	200027dc 	.word	0x200027dc
   388c0:	00049c60 	.word	0x00049c60
   388c4:	00049cb8 	.word	0x00049cb8
   388c8:	000497b0 	.word	0x000497b0
   388cc:	00034a1d 	.word	0x00034a1d
   388d0:	00049d40 	.word	0x00049d40

000388d4 <ull_conn_done>:
{
   388d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	conn = CONTAINER_OF(done->param, struct ll_conn, ull);
   388d8:	69c4      	ldr	r4, [r0, #28]
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   388da:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   388dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   388e0:	429a      	cmp	r2, r3
{
   388e2:	b08a      	sub	sp, #40	; 0x28
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   388e4:	d06d      	beq.n	389c2 <ull_conn_done+0xee>
	switch (done->extra.mic_state) {
   388e6:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   388ea:	2b01      	cmp	r3, #1
   388ec:	4605      	mov	r5, r0
   388ee:	f000 80de 	beq.w	38aae <ull_conn_done+0x1da>
   388f2:	2b02      	cmp	r3, #2
   388f4:	f000 80d1 	beq.w	38a9a <ull_conn_done+0x1c6>
   388f8:	2b00      	cmp	r3, #0
   388fa:	f000 80b4 	beq.w	38a66 <ull_conn_done+0x192>
	reason_final = conn->llcp_terminate.reason_final;
   388fe:	f894 7143 	ldrb.w	r7, [r4, #323]	; 0x143
	if (reason_final && (
   38902:	2f00      	cmp	r7, #0
   38904:	f040 80cc 	bne.w	38aa0 <ull_conn_done+0x1cc>
	if (lll->latency_prepare) {
   38908:	8de6      	ldrh	r6, [r4, #46]	; 0x2e
	latency_event = lll->latency_event;
   3890a:	f8b4 8030 	ldrh.w	r8, [r4, #48]	; 0x30
	if (lll->latency_prepare) {
   3890e:	2e00      	cmp	r6, #0
   38910:	d15a      	bne.n	389c8 <ull_conn_done+0xf4>
	if (done->extra.trx_cnt) {
   38912:	8caa      	ldrh	r2, [r5, #36]	; 0x24
		elapsed_event = latency_event + 1U;
   38914:	f108 0601 	add.w	r6, r8, #1
	ticks_drift_plus = 0U;
   38918:	2300      	movs	r3, #0
	ticks_drift_minus = 0U;
   3891a:	e9cd 3308 	strd	r3, r3, [sp, #32]
		elapsed_event = latency_event + 1U;
   3891e:	b2b6      	uxth	r6, r6
	if (done->extra.trx_cnt) {
   38920:	2a00      	cmp	r2, #0
   38922:	d059      	beq.n	389d8 <ull_conn_done+0x104>
		} else if (lll->role) {
   38924:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   38928:	2b00      	cmp	r3, #0
   3892a:	f2c0 8110 	blt.w	38b4e <ull_conn_done+0x27a>
		conn->connect_expire = 0U;
   3892e:	2300      	movs	r3, #0
   38930:	f8a4 30c0 	strh.w	r3, [r4, #192]	; 0xc0
	if (done->extra.crc_valid) {
   38934:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   38938:	07d9      	lsls	r1, r3, #31
   3893a:	f140 80be 	bpl.w	38aba <ull_conn_done+0x1e6>
		conn->supervision_expire = 0U;
   3893e:	2300      	movs	r3, #0
   38940:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
	if (conn->procedure_expire != 0U) {
   38944:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   38948:	b12b      	cbz	r3, 38956 <ull_conn_done+0x82>
		if (conn->procedure_expire > elapsed_event) {
   3894a:	42b3      	cmp	r3, r6
   3894c:	f240 8115 	bls.w	38b7a <ull_conn_done+0x2a6>
			conn->procedure_expire -= elapsed_event;
   38950:	1b9b      	subs	r3, r3, r6
   38952:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (conn->apto_expire != 0U) {
   38956:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
   3895a:	b12b      	cbz	r3, 38968 <ull_conn_done+0x94>
		if (conn->apto_expire > elapsed_event) {
   3895c:	42b3      	cmp	r3, r6
   3895e:	f240 80d1 	bls.w	38b04 <ull_conn_done+0x230>
			conn->apto_expire -= elapsed_event;
   38962:	1b9b      	subs	r3, r3, r6
   38964:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
	if (conn->appto_expire != 0U) {
   38968:	f8b4 20cc 	ldrh.w	r2, [r4, #204]	; 0xcc
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   3896c:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   38970:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
	if (conn->appto_expire != 0U) {
   38974:	b15a      	cbz	r2, 3898e <ull_conn_done+0xba>
		if (conn->appto_expire > elapsed_event) {
   38976:	42b2      	cmp	r2, r6
   38978:	f200 80a8 	bhi.w	38acc <ull_conn_done+0x1f8>
			if ((conn->procedure_expire == 0U) &&
   3897c:	f8b4 20c8 	ldrh.w	r2, [r4, #200]	; 0xc8
			conn->appto_expire = 0U;
   38980:	2000      	movs	r0, #0
   38982:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
			if ((conn->procedure_expire == 0U) &&
   38986:	b912      	cbnz	r2, 3898e <ull_conn_done+0xba>
   38988:	4299      	cmp	r1, r3
   3898a:	f000 80ff 	beq.w	38b8c <ull_conn_done+0x2b8>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   3898e:	1a5b      	subs	r3, r3, r1
   38990:	f003 0303 	and.w	r3, r3, #3
   38994:	2b02      	cmp	r3, #2
   38996:	f000 80a2 	beq.w	38ade <ull_conn_done+0x20a>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   3899a:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   3899e:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   389a2:	429a      	cmp	r2, r3
   389a4:	f000 80c0 	beq.w	38b28 <ull_conn_done+0x254>
		lll->latency_event = 0U;
   389a8:	2200      	movs	r2, #0
   389aa:	8622      	strh	r2, [r4, #48]	; 0x30
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   389ac:	e9dd 1308 	ldrd	r1, r3, [sp, #32]
	if ((force) || (latency_event != lll->latency_event)) {
   389b0:	bb97      	cbnz	r7, 38a18 <ull_conn_done+0x144>
   389b2:	4590      	cmp	r8, r2
   389b4:	f000 80a0 	beq.w	38af8 <ull_conn_done+0x224>
		lazy = lll->latency_event + 1U;
   389b8:	3201      	adds	r2, #1
   389ba:	b290      	uxth	r0, r2
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   389bc:	bb73      	cbnz	r3, 38a1c <ull_conn_done+0x148>
   389be:	bb69      	cbnz	r1, 38a1c <ull_conn_done+0x148>
   389c0:	bb60      	cbnz	r0, 38a1c <ull_conn_done+0x148>
}
   389c2:	b00a      	add	sp, #40	; 0x28
   389c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (done->extra.trx_cnt) {
   389c8:	8caa      	ldrh	r2, [r5, #36]	; 0x24
		elapsed_event = latency_event + lll->latency_prepare;
   389ca:	4446      	add	r6, r8
	ticks_drift_plus = 0U;
   389cc:	2300      	movs	r3, #0
	ticks_drift_minus = 0U;
   389ce:	e9cd 3308 	strd	r3, r3, [sp, #32]
		elapsed_event = latency_event + lll->latency_prepare;
   389d2:	b2b6      	uxth	r6, r6
	if (done->extra.trx_cnt) {
   389d4:	2a00      	cmp	r2, #0
   389d6:	d1a5      	bne.n	38924 <ull_conn_done+0x50>
	if (done->extra.crc_valid) {
   389d8:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   389dc:	07da      	lsls	r2, r3, #31
   389de:	d4ae      	bmi.n	3893e <ull_conn_done+0x6a>
	else if (conn->connect_expire) {
   389e0:	f8b4 30c0 	ldrh.w	r3, [r4, #192]	; 0xc0
   389e4:	2b00      	cmp	r3, #0
   389e6:	d068      	beq.n	38aba <ull_conn_done+0x1e6>
		if (conn->connect_expire > elapsed_event) {
   389e8:	42b3      	cmp	r3, r6
   389ea:	f240 80d6 	bls.w	38b9a <ull_conn_done+0x2c6>
			conn->connect_expire -= elapsed_event;
   389ee:	1b9b      	subs	r3, r3, r6
   389f0:	f8a4 30c0 	strh.w	r3, [r4, #192]	; 0xc0
	if (conn->supervision_expire) {
   389f4:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   389f8:	2b00      	cmp	r3, #0
   389fa:	d0a3      	beq.n	38944 <ull_conn_done+0x70>
		if (conn->supervision_expire > elapsed_event) {
   389fc:	429e      	cmp	r6, r3
   389fe:	f080 80b7 	bcs.w	38b70 <ull_conn_done+0x29c>
			conn->supervision_expire -= elapsed_event;
   38a02:	1b9b      	subs	r3, r3, r6
   38a04:	b29b      	uxth	r3, r3
			lll->latency_event = 0U;
   38a06:	2200      	movs	r2, #0
			if (conn->supervision_expire <= 6U) {
   38a08:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
   38a0a:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
			lll->latency_event = 0U;
   38a0e:	8622      	strh	r2, [r4, #48]	; 0x30
			if (conn->supervision_expire <= 6U) {
   38a10:	f200 808c 	bhi.w	38b2c <ull_conn_done+0x258>
				force = 1U;
   38a14:	2701      	movs	r7, #1
   38a16:	e795      	b.n	38944 <ull_conn_done+0x70>
		lazy = lll->latency_event + 1U;
   38a18:	3201      	adds	r2, #1
   38a1a:	b290      	uxth	r0, r2
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   38a1c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   38a1e:	4d6e      	ldr	r5, [pc, #440]	; (38bd8 <ull_conn_done+0x304>)
		struct ll_conn *conn = lll->hdr.parent;
   38a20:	69e4      	ldr	r4, [r4, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   38a22:	9003      	str	r0, [sp, #12]
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   38a24:	3203      	adds	r2, #3
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   38a26:	2000      	movs	r0, #0
   38a28:	9100      	str	r1, [sp, #0]
   38a2a:	e9cd 0001 	strd	r0, r0, [sp, #4]
   38a2e:	9704      	str	r7, [sp, #16]
   38a30:	9406      	str	r4, [sp, #24]
   38a32:	b2d2      	uxtb	r2, r2
   38a34:	2101      	movs	r1, #1
   38a36:	9505      	str	r5, [sp, #20]
   38a38:	f7f8 fd2e 	bl	31498 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   38a3c:	f030 0302 	bics.w	r3, r0, #2
   38a40:	d0bf      	beq.n	389c2 <ull_conn_done+0xee>
   38a42:	f7fa fd79 	bl	33538 <ull_disable_mark_get>
   38a46:	4284      	cmp	r4, r0
   38a48:	d0bb      	beq.n	389c2 <ull_conn_done+0xee>
   38a4a:	4a64      	ldr	r2, [pc, #400]	; (38bdc <ull_conn_done+0x308>)
   38a4c:	4964      	ldr	r1, [pc, #400]	; (38be0 <ull_conn_done+0x30c>)
   38a4e:	4865      	ldr	r0, [pc, #404]	; (38be4 <ull_conn_done+0x310>)
   38a50:	f240 7344 	movw	r3, #1860	; 0x744
   38a54:	f009 fdb8 	bl	425c8 <assert_print>
   38a58:	4040      	eors	r0, r0
   38a5a:	f380 8811 	msr	BASEPRI, r0
   38a5e:	f04f 0003 	mov.w	r0, #3
   38a62:	df02      	svc	2
   38a64:	e7ad      	b.n	389c2 <ull_conn_done+0xee>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   38a66:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   38a6a:	071f      	lsls	r7, r3, #28
   38a6c:	d53e      	bpl.n	38aec <ull_conn_done+0x218>
					    (lll->latency + 6)) ?
   38a6e:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
			appto_reload_new = (conn->apto_reload >
   38a70:	f8b4 20ce 	ldrh.w	r2, [r4, #206]	; 0xce
					    (lll->latency + 6)) ?
   38a74:	1d8b      	adds	r3, r1, #6
			appto_reload_new = (conn->apto_reload >
   38a76:	429a      	cmp	r2, r3
   38a78:	bfc4      	itt	gt
   38a7a:	1f93      	subgt	r3, r2, #6
   38a7c:	1a5b      	subgt	r3, r3, r1
			if (conn->appto_reload != appto_reload_new) {
   38a7e:	f8b4 10ca 	ldrh.w	r1, [r4, #202]	; 0xca
			appto_reload_new = (conn->apto_reload >
   38a82:	bfcc      	ite	gt
   38a84:	b29b      	uxthgt	r3, r3
   38a86:	4613      	movle	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   38a88:	4299      	cmp	r1, r3
   38a8a:	d06b      	beq.n	38b64 <ull_conn_done+0x290>
				conn->appto_reload = appto_reload_new;
   38a8c:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
				conn->appto_expire = conn->appto_reload;
   38a90:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
				conn->apto_expire = conn->apto_reload;
   38a94:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
   38a98:	e731      	b.n	388fe <ull_conn_done+0x2a>
		conn->llcp_terminate.reason_final =
   38a9a:	273d      	movs	r7, #61	; 0x3d
   38a9c:	f884 7143 	strb.w	r7, [r4, #323]	; 0x143
		conn_cleanup(conn, reason_final);
   38aa0:	4639      	mov	r1, r7
   38aa2:	4620      	mov	r0, r4
}
   38aa4:	b00a      	add	sp, #40	; 0x28
   38aa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		conn_cleanup(conn, reason_final);
   38aaa:	f7ff be91 	b.w	387d0 <conn_cleanup>
		conn->appto_expire = conn->apto_expire = 0U;
   38aae:	2300      	movs	r3, #0
   38ab0:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
   38ab4:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		break;
   38ab8:	e721      	b.n	388fe <ull_conn_done+0x2a>
		if (!conn->supervision_expire) {
   38aba:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   38abe:	2b00      	cmp	r3, #0
   38ac0:	d19c      	bne.n	389fc <ull_conn_done+0x128>
			conn->supervision_expire = conn->supervision_reload;
   38ac2:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
   38ac6:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
   38aca:	e795      	b.n	389f8 <ull_conn_done+0x124>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   38acc:	1a5b      	subs	r3, r3, r1
   38ace:	f003 0303 	and.w	r3, r3, #3
			conn->appto_expire -= elapsed_event;
   38ad2:	1b92      	subs	r2, r2, r6
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   38ad4:	2b02      	cmp	r3, #2
			conn->appto_expire -= elapsed_event;
   38ad6:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   38ada:	f47f af5e 	bne.w	3899a <ull_conn_done+0xc6>
	     ((conn->llcp_type == LLCP_CONN_UPD) ||
   38ade:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   38ae2:	3b01      	subs	r3, #1
   38ae4:	2b01      	cmp	r3, #1
   38ae6:	f63f af58 	bhi.w	3899a <ull_conn_done+0xc6>
   38aea:	e75d      	b.n	389a8 <ull_conn_done+0xd4>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   38aec:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   38af0:	07de      	lsls	r6, r3, #31
   38af2:	f57f af04 	bpl.w	388fe <ull_conn_done+0x2a>
   38af6:	e7ba      	b.n	38a6e <ull_conn_done+0x19a>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   38af8:	b913      	cbnz	r3, 38b00 <ull_conn_done+0x22c>
   38afa:	2900      	cmp	r1, #0
   38afc:	f43f af61 	beq.w	389c2 <ull_conn_done+0xee>
	lazy = 0U;
   38b00:	4638      	mov	r0, r7
   38b02:	e78b      	b.n	38a1c <ull_conn_done+0x148>
			rx = ll_pdu_rx_alloc();
   38b04:	f7fa fc6a 	bl	333dc <ll_pdu_rx_alloc>
			if (rx) {
   38b08:	4601      	mov	r1, r0
   38b0a:	2800      	cmp	r0, #0
   38b0c:	d03a      	beq.n	38b84 <ull_conn_done+0x2b0>
				conn->apto_expire = 0U;
   38b0e:	2300      	movs	r3, #0
   38b10:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
				rx->handle = lll->handle;
   38b14:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   38b16:	80c3      	strh	r3, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
   38b18:	231b      	movs	r3, #27
   38b1a:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
   38b1c:	6800      	ldr	r0, [r0, #0]
   38b1e:	f7fa fc2b 	bl	33378 <ll_rx_put>
				ll_rx_sched();
   38b22:	f7fa fc33 	bl	3338c <ll_rx_sched>
   38b26:	e71f      	b.n	38968 <ull_conn_done+0x94>
	if ((force) || (latency_event != lll->latency_event)) {
   38b28:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   38b2a:	e73f      	b.n	389ac <ull_conn_done+0xd8>
			else if (lll->role) {
   38b2c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   38b30:	4293      	cmp	r3, r2
   38b32:	f6bf af07 	bge.w	38944 <ull_conn_done+0x70>
				if (latency_event) {
   38b36:	f1b8 0f00 	cmp.w	r8, #0
   38b3a:	f47f af6b 	bne.w	38a14 <ull_conn_done+0x140>
					force = conn->periph.force & 0x01;
   38b3e:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
					conn->periph.force >>= 1U;
   38b42:	085a      	lsrs	r2, r3, #1
					if (force) {
   38b44:	07db      	lsls	r3, r3, #31
   38b46:	d441      	bmi.n	38bcc <ull_conn_done+0x2f8>
					conn->periph.force >>= 1U;
   38b48:	f8c4 20dc 	str.w	r2, [r4, #220]	; 0xdc
   38b4c:	e6fa      	b.n	38944 <ull_conn_done+0x70>
			ull_drift_ticks_get(done, &ticks_drift_plus,
   38b4e:	aa08      	add	r2, sp, #32
   38b50:	a909      	add	r1, sp, #36	; 0x24
   38b52:	4628      	mov	r0, r5
   38b54:	f7ed fe44 	bl	267e0 <ull_drift_ticks_get>
			if (!conn->tx_head) {
   38b58:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   38b5c:	b313      	cbz	r3, 38ba4 <ull_conn_done+0x2d0>
				lll->latency_event = 0U;
   38b5e:	2300      	movs	r3, #0
   38b60:	8623      	strh	r3, [r4, #48]	; 0x30
   38b62:	e6e4      	b.n	3892e <ull_conn_done+0x5a>
			if (conn->apto_expire == 0U) {
   38b64:	f8b4 10d0 	ldrh.w	r1, [r4, #208]	; 0xd0
   38b68:	2900      	cmp	r1, #0
   38b6a:	f47f aec8 	bne.w	388fe <ull_conn_done+0x2a>
   38b6e:	e78f      	b.n	38a90 <ull_conn_done+0x1bc>
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
   38b70:	2108      	movs	r1, #8
   38b72:	4620      	mov	r0, r4
   38b74:	f7ff fe2c 	bl	387d0 <conn_cleanup>
			return;
   38b78:	e723      	b.n	389c2 <ull_conn_done+0xee>
			conn_cleanup(conn, BT_HCI_ERR_LL_RESP_TIMEOUT);
   38b7a:	2122      	movs	r1, #34	; 0x22
   38b7c:	4620      	mov	r0, r4
   38b7e:	f7ff fe27 	bl	387d0 <conn_cleanup>
			return;
   38b82:	e71e      	b.n	389c2 <ull_conn_done+0xee>
				conn->apto_expire = 1U;
   38b84:	2301      	movs	r3, #1
   38b86:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
   38b8a:	e6ed      	b.n	38968 <ull_conn_done+0x94>
				conn->llcp_type = LLCP_PING;
   38b8c:	2305      	movs	r3, #5
				conn->llcp_ack -= 2U;
   38b8e:	3902      	subs	r1, #2
				conn->llcp_type = LLCP_PING;
   38b90:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
				conn->llcp_ack -= 2U;
   38b94:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   38b98:	e6ff      	b.n	3899a <ull_conn_done+0xc6>
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
   38b9a:	213e      	movs	r1, #62	; 0x3e
   38b9c:	4620      	mov	r0, r4
   38b9e:	f7ff fe17 	bl	387d0 <conn_cleanup>
			return;
   38ba2:	e70e      	b.n	389c2 <ull_conn_done+0xee>
				ull_conn_tx_demux(UINT8_MAX);
   38ba4:	20ff      	movs	r0, #255	; 0xff
   38ba6:	f7ff fdc3 	bl	38730 <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   38baa:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   38bae:	2a00      	cmp	r2, #0
   38bb0:	d1d5      	bne.n	38b5e <ull_conn_done+0x28a>
   38bb2:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
   38bb6:	f7f7 fa9b 	bl	300f0 <memq_peek>
   38bba:	2800      	cmp	r0, #0
   38bbc:	d1cf      	bne.n	38b5e <ull_conn_done+0x28a>
			} else if (lll->periph.latency_enabled) {
   38bbe:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   38bc2:	0758      	lsls	r0, r3, #29
				lll->latency_event = lll->latency;
   38bc4:	bf44      	itt	mi
   38bc6:	8da3      	ldrhmi	r3, [r4, #44]	; 0x2c
   38bc8:	8623      	strhmi	r3, [r4, #48]	; 0x30
   38bca:	e6b0      	b.n	3892e <ull_conn_done+0x5a>
						conn->periph.force |= BIT(31);
   38bcc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
   38bd0:	f8c4 20dc 	str.w	r2, [r4, #220]	; 0xdc
   38bd4:	e71e      	b.n	38a14 <ull_conn_done+0x140>
   38bd6:	bf00      	nop
   38bd8:	00034c31 	.word	0x00034c31
   38bdc:	00049c60 	.word	0x00049c60
   38be0:	00049dd4 	.word	0x00049dd4
   38be4:	000497b0 	.word	0x000497b0

00038be8 <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
   38be8:	f8d0 31cc 	ldr.w	r3, [r0, #460]	; 0x1cc
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   38bec:	2b00      	cmp	r3, #0
   38bee:	f000 809a 	beq.w	38d26 <ull_conn_tx_lll_enqueue+0x13e>
   38bf2:	3901      	subs	r1, #1
{
   38bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   38bf8:	f8df 8184 	ldr.w	r8, [pc, #388]	; 38d80 <ull_conn_tx_lll_enqueue+0x198>
		LL_ASSERT(link);
   38bfc:	f8df a184 	ldr.w	sl, [pc, #388]	; 38d84 <ull_conn_tx_lll_enqueue+0x19c>
   38c00:	f8df 9184 	ldr.w	r9, [pc, #388]	; 38d88 <ull_conn_tx_lll_enqueue+0x1a0>
   38c04:	4604      	mov	r4, r0
   38c06:	b2cd      	uxtb	r5, r1
   38c08:	e021      	b.n	38c4e <ull_conn_tx_lll_enqueue+0x66>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   38c0a:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   38c0e:	429a      	cmp	r2, r3
   38c10:	d145      	bne.n	38c9e <ull_conn_tx_lll_enqueue+0xb6>
   38c12:	2dff      	cmp	r5, #255	; 0xff
   38c14:	d043      	beq.n	38c9e <ull_conn_tx_lll_enqueue+0xb6>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   38c16:	f8d4 11cc 	ldr.w	r1, [r4, #460]	; 0x1cc
   38c1a:	4620      	mov	r0, r4
   38c1c:	f7fc f828 	bl	34c70 <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   38c20:	7903      	ldrb	r3, [r0, #4]
   38c22:	f003 0303 	and.w	r3, r3, #3
   38c26:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
   38c28:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   38c2a:	d03a      	beq.n	38ca2 <ull_conn_tx_lll_enqueue+0xba>
		link = mem_acquire(&mem_link_tx.free);
   38c2c:	4640      	mov	r0, r8
   38c2e:	f7f7 f9ef 	bl	30010 <mem_acquire>
		LL_ASSERT(link);
   38c32:	4607      	mov	r7, r0
   38c34:	2800      	cmp	r0, #0
   38c36:	d046      	beq.n	38cc6 <ull_conn_tx_lll_enqueue+0xde>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   38c38:	f104 0268 	add.w	r2, r4, #104	; 0x68
   38c3c:	4631      	mov	r1, r6
   38c3e:	4638      	mov	r0, r7
   38c40:	f7f7 fa4c 	bl	300dc <memq_enqueue>
	while (conn->tx_head &&
   38c44:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   38c48:	3d01      	subs	r5, #1
   38c4a:	b2ed      	uxtb	r5, r5
   38c4c:	b33b      	cbz	r3, 38c9e <ull_conn_tx_lll_enqueue+0xb6>
	while (conn->tx_head &&
   38c4e:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
   38c52:	f894 210d 	ldrb.w	r2, [r4, #269]	; 0x10d
   38c56:	4291      	cmp	r1, r2
   38c58:	d1d7      	bne.n	38c0a <ull_conn_tx_lll_enqueue+0x22>
		 !conn->llcp_phy.pause_tx &&
   38c5a:	f894 21c7 	ldrb.w	r2, [r4, #455]	; 0x1c7
		 (conn->llcp_cu.req == conn->llcp_cu.ack) &&
   38c5e:	07d1      	lsls	r1, r2, #31
   38c60:	d4d3      	bmi.n	38c0a <ull_conn_tx_lll_enqueue+0x22>
		 !conn->llcp_enc.pause_tx &&
   38c62:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
		 !conn->llcp_phy.pause_tx &&
   38c66:	0792      	lsls	r2, r2, #30
   38c68:	d4cf      	bmi.n	38c0a <ull_conn_tx_lll_enqueue+0x22>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   38c6a:	791a      	ldrb	r2, [r3, #4]
   38c6c:	f002 0203 	and.w	r2, r2, #3
   38c70:	2a03      	cmp	r2, #3
   38c72:	d1ce      	bne.n	38c12 <ull_conn_tx_lll_enqueue+0x2a>
	    ((pdu_data_tx->llctrl.opcode ==
   38c74:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   38c76:	2a03      	cmp	r2, #3
   38c78:	d001      	beq.n	38c7e <ull_conn_tx_lll_enqueue+0x96>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   38c7a:	2a0a      	cmp	r2, #10
   38c7c:	d1c9      	bne.n	38c12 <ull_conn_tx_lll_enqueue+0x2a>
		if (((conn->llcp_req != conn->llcp_ack) &&
   38c7e:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   38c82:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   38c86:	428a      	cmp	r2, r1
   38c88:	d04e      	beq.n	38d28 <ull_conn_tx_lll_enqueue+0x140>
   38c8a:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
   38c8e:	2a03      	cmp	r2, #3
   38c90:	d0bf      	beq.n	38c12 <ull_conn_tx_lll_enqueue+0x2a>
			if ((tx->next != NULL) &&
   38c92:	681a      	ldr	r2, [r3, #0]
   38c94:	b11a      	cbz	r2, 38c9e <ull_conn_tx_lll_enqueue+0xb6>
   38c96:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   38c9a:	428a      	cmp	r2, r1
   38c9c:	d030      	beq.n	38d00 <ull_conn_tx_lll_enqueue+0x118>
}
   38c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ctrl_tx_pre_ack(conn, pdu_tx);
   38ca2:	79c3      	ldrb	r3, [r0, #7]
	switch (pdu_tx->llctrl.opcode) {
   38ca4:	2b0b      	cmp	r3, #11
   38ca6:	d026      	beq.n	38cf6 <ull_conn_tx_lll_enqueue+0x10e>
   38ca8:	d81b      	bhi.n	38ce2 <ull_conn_tx_lll_enqueue+0xfa>
   38caa:	2b04      	cmp	r3, #4
   38cac:	d1be      	bne.n	38c2c <ull_conn_tx_lll_enqueue+0x44>
		conn->llcp_enc.pause_tx = 1U;
   38cae:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   38cb2:	f043 0302 	orr.w	r3, r3, #2
   38cb6:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
		link = mem_acquire(&mem_link_tx.free);
   38cba:	4640      	mov	r0, r8
   38cbc:	f7f7 f9a8 	bl	30010 <mem_acquire>
		LL_ASSERT(link);
   38cc0:	4607      	mov	r7, r0
   38cc2:	2800      	cmp	r0, #0
   38cc4:	d1b8      	bne.n	38c38 <ull_conn_tx_lll_enqueue+0x50>
   38cc6:	4831      	ldr	r0, [pc, #196]	; (38d8c <ull_conn_tx_lll_enqueue+0x1a4>)
   38cc8:	f240 73aa 	movw	r3, #1962	; 0x7aa
   38ccc:	4652      	mov	r2, sl
   38cce:	4649      	mov	r1, r9
   38cd0:	f009 fc7a 	bl	425c8 <assert_print>
   38cd4:	4040      	eors	r0, r0
   38cd6:	f380 8811 	msr	BASEPRI, r0
   38cda:	f04f 0003 	mov.w	r0, #3
   38cde:	df02      	svc	2
   38ce0:	e7aa      	b.n	38c38 <ull_conn_tx_lll_enqueue+0x50>
	switch (pdu_tx->llctrl.opcode) {
   38ce2:	3b16      	subs	r3, #22
   38ce4:	2b01      	cmp	r3, #1
   38ce6:	d8a1      	bhi.n	38c2c <ull_conn_tx_lll_enqueue+0x44>
		conn->llcp_phy.pause_tx = 1U;
   38ce8:	f894 31c7 	ldrb.w	r3, [r4, #455]	; 0x1c7
   38cec:	f043 0301 	orr.w	r3, r3, #1
   38cf0:	f884 31c7 	strb.w	r3, [r4, #455]	; 0x1c7
		break;
   38cf4:	e79a      	b.n	38c2c <ull_conn_tx_lll_enqueue+0x44>
		if (!conn->lll.role) {
   38cf6:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   38cfa:	2b00      	cmp	r3, #0
   38cfc:	da96      	bge.n	38c2c <ull_conn_tx_lll_enqueue+0x44>
   38cfe:	e7d6      	b.n	38cae <ull_conn_tx_lll_enqueue+0xc6>
				conn->tx_head = tx->next;
   38d00:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
				tx->next = conn->tx_ctrl_last->next;
   38d04:	f8d4 21d4 	ldr.w	r2, [r4, #468]	; 0x1d4
   38d08:	6812      	ldr	r2, [r2, #0]
   38d0a:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last->next = tx;
   38d0c:	f8d4 21d4 	ldr.w	r2, [r4, #468]	; 0x1d4
   38d10:	6013      	str	r3, [r2, #0]
				if (!conn->tx_data_last) {
   38d12:	f8d4 21dc 	ldr.w	r2, [r4, #476]	; 0x1dc
				conn->tx_data = tx;
   38d16:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
				if (!conn->tx_data_last) {
   38d1a:	2a00      	cmp	r2, #0
   38d1c:	f47f af79 	bne.w	38c12 <ull_conn_tx_lll_enqueue+0x2a>
					conn->tx_data_last = tx;
   38d20:	f8c4 31dc 	str.w	r3, [r4, #476]	; 0x1dc
   38d24:	e775      	b.n	38c12 <ull_conn_tx_lll_enqueue+0x2a>
   38d26:	4770      	bx	lr
		    ((conn->llcp_req == conn->llcp_ack) &&
   38d28:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
   38d2c:	f894 1120 	ldrb.w	r1, [r4, #288]	; 0x120
   38d30:	4288      	cmp	r0, r1
   38d32:	d1ae      	bne.n	38c92 <ull_conn_tx_lll_enqueue+0xaa>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
   38d34:	f894 0139 	ldrb.w	r0, [r4, #313]	; 0x139
   38d38:	f894 1138 	ldrb.w	r1, [r4, #312]	; 0x138
   38d3c:	4288      	cmp	r0, r1
   38d3e:	d1a8      	bne.n	38c92 <ull_conn_tx_lll_enqueue+0xaa>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
   38d40:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
   38d44:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
   38d48:	4288      	cmp	r0, r1
   38d4a:	d1a2      	bne.n	38c92 <ull_conn_tx_lll_enqueue+0xaa>
		       conn->llcp_conn_param.req) ||
   38d4c:	f894 01b5 	ldrb.w	r0, [r4, #437]	; 0x1b5
   38d50:	f894 11b4 	ldrb.w	r1, [r4, #436]	; 0x1b4
   38d54:	4288      	cmp	r0, r1
   38d56:	d19c      	bne.n	38c92 <ull_conn_tx_lll_enqueue+0xaa>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   38d58:	f894 01c5 	ldrb.w	r0, [r4, #453]	; 0x1c5
   38d5c:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
   38d60:	4288      	cmp	r0, r1
   38d62:	d196      	bne.n	38c92 <ull_conn_tx_lll_enqueue+0xaa>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   38d64:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
			conn->llcp_ack -= 2U;
   38d68:	3a02      	subs	r2, #2
   38d6a:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   38d6e:	2201      	movs	r2, #1
   38d70:	f362 0301 	bfi	r3, r2, #0, #2
   38d74:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
			conn->llcp_type = LLCP_ENCRYPTION;
   38d78:	2303      	movs	r3, #3
   38d7a:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
			conn->llcp_ack -= 2U;
   38d7e:	e748      	b.n	38c12 <ull_conn_tx_lll_enqueue+0x2a>
   38d80:	200027dc 	.word	0x200027dc
   38d84:	00049c60 	.word	0x00049c60
   38d88:	00049cb8 	.word	0x00049cb8
   38d8c:	000497b0 	.word	0x000497b0

00038d90 <tx_demux>:
{
   38d90:	b510      	push	{r4, lr}
   38d92:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   38d94:	2001      	movs	r0, #1
   38d96:	f7ff fccb 	bl	38730 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   38d9a:	4620      	mov	r0, r4
   38d9c:	2101      	movs	r1, #1
}
   38d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   38da2:	f7ff bf21 	b.w	38be8 <ull_conn_tx_lll_enqueue>
   38da6:	bf00      	nop

00038da8 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   38da8:	4901      	ldr	r1, [pc, #4]	; (38db0 <ull_conn_link_tx_release+0x8>)
   38daa:	f7f7 b94d 	b.w	30048 <mem_release>
   38dae:	bf00      	nop
   38db0:	200027dc 	.word	0x200027dc

00038db4 <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   38db4:	4b01      	ldr	r3, [pc, #4]	; (38dbc <ull_conn_ack_last_idx_get+0x8>)
}
   38db6:	7958      	ldrb	r0, [r3, #5]
   38db8:	4770      	bx	lr
   38dba:	bf00      	nop
   38dbc:	20000778 	.word	0x20000778

00038dc0 <ull_conn_ack_peek>:
{
   38dc0:	b510      	push	{r4, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   38dc2:	4b0c      	ldr	r3, [pc, #48]	; (38df4 <ull_conn_ack_peek+0x34>)
   38dc4:	f893 c004 	ldrb.w	ip, [r3, #4]
   38dc8:	f893 e005 	ldrb.w	lr, [r3, #5]
   38dcc:	781c      	ldrb	r4, [r3, #0]
	if (first == last) {
   38dce:	45f4      	cmp	ip, lr
   38dd0:	d00d      	beq.n	38dee <ull_conn_ack_peek+0x2e>
	return (void *)(fifo + first * size);
   38dd2:	fb1c fc04 	smulbb	ip, ip, r4
   38dd6:	3308      	adds	r3, #8
	*ack_last = mfifo_conn_ack.l;
   38dd8:	f880 e000 	strb.w	lr, [r0]
   38ddc:	eb0c 0003 	add.w	r0, ip, r3
	*handle = lll_tx->handle;
   38de0:	f833 300c 	ldrh.w	r3, [r3, ip]
   38de4:	800b      	strh	r3, [r1, #0]
	*tx = lll_tx->node;
   38de6:	6843      	ldr	r3, [r0, #4]
   38de8:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   38dea:	6818      	ldr	r0, [r3, #0]
}
   38dec:	bd10      	pop	{r4, pc}
		return NULL;
   38dee:	2000      	movs	r0, #0
}
   38df0:	bd10      	pop	{r4, pc}
   38df2:	bf00      	nop
   38df4:	20000778 	.word	0x20000778

00038df8 <ull_conn_ack_by_last_peek>:
{
   38df8:	b500      	push	{lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   38dfa:	4b0b      	ldr	r3, [pc, #44]	; (38e28 <ull_conn_ack_by_last_peek+0x30>)
   38dfc:	f893 c004 	ldrb.w	ip, [r3, #4]
   38e00:	f893 e000 	ldrb.w	lr, [r3]
	if (first == last) {
   38e04:	4584      	cmp	ip, r0
   38e06:	d00c      	beq.n	38e22 <ull_conn_ack_by_last_peek+0x2a>
	return (void *)(fifo + first * size);
   38e08:	fb1c fc0e 	smulbb	ip, ip, lr
   38e0c:	3308      	adds	r3, #8
   38e0e:	eb0c 0003 	add.w	r0, ip, r3
	*handle = lll_tx->handle;
   38e12:	f833 300c 	ldrh.w	r3, [r3, ip]
   38e16:	800b      	strh	r3, [r1, #0]
	*tx = lll_tx->node;
   38e18:	6843      	ldr	r3, [r0, #4]
   38e1a:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   38e1c:	6818      	ldr	r0, [r3, #0]
}
   38e1e:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   38e22:	2000      	movs	r0, #0
   38e24:	e7fb      	b.n	38e1e <ull_conn_ack_by_last_peek+0x26>
   38e26:	bf00      	nop
   38e28:	20000778 	.word	0x20000778

00038e2c <ull_conn_ack_dequeue>:
	return MFIFO_DEQUEUE(conn_ack);
   38e2c:	4b09      	ldr	r3, [pc, #36]	; (38e54 <ull_conn_ack_dequeue+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   38e2e:	7919      	ldrb	r1, [r3, #4]
	if (_first == last) {
   38e30:	795a      	ldrb	r2, [r3, #5]
   38e32:	7818      	ldrb	r0, [r3, #0]
   38e34:	f893 c002 	ldrb.w	ip, [r3, #2]
   38e38:	428a      	cmp	r2, r1
   38e3a:	d009      	beq.n	38e50 <ull_conn_ack_dequeue+0x24>
	_first += 1U;
   38e3c:	1c4a      	adds	r2, r1, #1
	mem = *((void **)(fifo + _first * size));
   38e3e:	fb01 3000 	mla	r0, r1, r0, r3
	_first += 1U;
   38e42:	b2d2      	uxtb	r2, r2
		_first = 0U;
   38e44:	4594      	cmp	ip, r2
   38e46:	bf08      	it	eq
   38e48:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   38e4a:	6880      	ldr	r0, [r0, #8]
	*first = _first; /* Write back read-index */
   38e4c:	711a      	strb	r2, [r3, #4]
	return mem;
   38e4e:	4770      	bx	lr
		return NULL;
   38e50:	2000      	movs	r0, #0
}
   38e52:	4770      	bx	lr
   38e54:	20000778 	.word	0x20000778

00038e58 <ull_conn_lll_ack_enqueue>:
{
   38e58:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   38e5a:	4c14      	ldr	r4, [pc, #80]	; (38eac <ull_conn_lll_ack_enqueue+0x54>)
   38e5c:	7962      	ldrb	r2, [r4, #5]
	if (last == count) {
   38e5e:	f894 e002 	ldrb.w	lr, [r4, #2]
   38e62:	f894 c004 	ldrb.w	ip, [r4, #4]
   38e66:	7825      	ldrb	r5, [r4, #0]
	last = last + 1;
   38e68:	1c53      	adds	r3, r2, #1
   38e6a:	b2db      	uxtb	r3, r3
		last = 0U;
   38e6c:	459e      	cmp	lr, r3
   38e6e:	bf08      	it	eq
   38e70:	2300      	moveq	r3, #0
	if (last == first) {
   38e72:	459c      	cmp	ip, r3
   38e74:	d009      	beq.n	38e8a <ull_conn_lll_ack_enqueue+0x32>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   38e76:	fb12 f205 	smulbb	r2, r2, r5
   38e7a:	f104 0c08 	add.w	ip, r4, #8
	lll_tx->handle = handle;
   38e7e:	f82c 0002 	strh.w	r0, [ip, r2]
   38e82:	4462      	add	r2, ip
	lll_tx->node = tx;
   38e84:	6051      	str	r1, [r2, #4]
	*last = idx; /* Commit: Update write index */
   38e86:	7163      	strb	r3, [r4, #5]
}
   38e88:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(lll_tx);
   38e8a:	4a09      	ldr	r2, [pc, #36]	; (38eb0 <ull_conn_lll_ack_enqueue+0x58>)
   38e8c:	4909      	ldr	r1, [pc, #36]	; (38eb4 <ull_conn_lll_ack_enqueue+0x5c>)
   38e8e:	480a      	ldr	r0, [pc, #40]	; (38eb8 <ull_conn_lll_ack_enqueue+0x60>)
   38e90:	f240 73fa 	movw	r3, #2042	; 0x7fa
   38e94:	f009 fb98 	bl	425c8 <assert_print>
   38e98:	4040      	eors	r0, r0
   38e9a:	f380 8811 	msr	BASEPRI, r0
   38e9e:	f04f 0003 	mov.w	r0, #3
   38ea2:	df02      	svc	2
	lll_tx->handle = handle;
   38ea4:	2300      	movs	r3, #0
   38ea6:	801b      	strh	r3, [r3, #0]
   38ea8:	deff      	udf	#255	; 0xff
   38eaa:	bf00      	nop
   38eac:	20000778 	.word	0x20000778
   38eb0:	00049c60 	.word	0x00049c60
   38eb4:	00049ca8 	.word	0x00049ca8
   38eb8:	000497b0 	.word	0x000497b0

00038ebc <ull_conn_tx_ack>:
{
   38ebc:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(pdu_tx->len);
   38ebe:	7953      	ldrb	r3, [r2, #5]
{
   38ec0:	b082      	sub	sp, #8
   38ec2:	4614      	mov	r4, r2
   38ec4:	4605      	mov	r5, r0
   38ec6:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
   38ec8:	b37b      	cbz	r3, 38f2a <ull_conn_tx_ack+0x6e>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   38eca:	7923      	ldrb	r3, [r4, #4]
   38ecc:	f003 0203 	and.w	r2, r3, #3
   38ed0:	2a03      	cmp	r2, #3
   38ed2:	d00d      	beq.n	38ef0 <ull_conn_tx_ack+0x34>
	} else if (handle == LLL_HANDLE_INVALID) {
   38ed4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   38ed8:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   38eda:	bf04      	itt	eq
   38edc:	f36f 0301 	bfceq	r3, #0, #2
   38ee0:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
   38ee2:	4621      	mov	r1, r4
   38ee4:	4628      	mov	r0, r5
}
   38ee6:	b002      	add	sp, #8
   38ee8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
   38eec:	f7fa ba8c 	b.w	33408 <ll_tx_ack_put>
		if (handle != LLL_HANDLE_INVALID) {
   38ef0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   38ef4:	429d      	cmp	r5, r3
   38ef6:	d126      	bne.n	38f46 <ull_conn_tx_ack+0x8a>
		if (link->next == (void *)tx) {
   38ef8:	6833      	ldr	r3, [r6, #0]
   38efa:	42a3      	cmp	r3, r4
   38efc:	d05e      	beq.n	38fbc <ull_conn_tx_ack+0x100>
		LL_ASSERT(!link->next);
   38efe:	2b00      	cmp	r3, #0
   38f00:	d0ef      	beq.n	38ee2 <ull_conn_tx_ack+0x26>
   38f02:	4a93      	ldr	r2, [pc, #588]	; (39150 <ull_conn_tx_ack+0x294>)
   38f04:	4993      	ldr	r1, [pc, #588]	; (39154 <ull_conn_tx_ack+0x298>)
   38f06:	4894      	ldr	r0, [pc, #592]	; (39158 <ull_conn_tx_ack+0x29c>)
   38f08:	f640 032a 	movw	r3, #2090	; 0x82a
   38f0c:	f009 fb5c 	bl	425c8 <assert_print>
   38f10:	4040      	eors	r0, r0
   38f12:	f380 8811 	msr	BASEPRI, r0
   38f16:	f04f 0003 	mov.w	r0, #3
   38f1a:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   38f1c:	4621      	mov	r1, r4
   38f1e:	4628      	mov	r0, r5
}
   38f20:	b002      	add	sp, #8
   38f22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
   38f26:	f7fa ba6f 	b.w	33408 <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
   38f2a:	4a89      	ldr	r2, [pc, #548]	; (39150 <ull_conn_tx_ack+0x294>)
   38f2c:	498b      	ldr	r1, [pc, #556]	; (3915c <ull_conn_tx_ack+0x2a0>)
   38f2e:	488a      	ldr	r0, [pc, #552]	; (39158 <ull_conn_tx_ack+0x29c>)
   38f30:	f640 0307 	movw	r3, #2055	; 0x807
   38f34:	f009 fb48 	bl	425c8 <assert_print>
   38f38:	4040      	eors	r0, r0
   38f3a:	f380 8811 	msr	BASEPRI, r0
   38f3e:	f04f 0003 	mov.w	r0, #3
   38f42:	df02      	svc	2
   38f44:	e7c1      	b.n	38eca <ull_conn_tx_ack+0xe>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   38f46:	462a      	mov	r2, r5
   38f48:	4885      	ldr	r0, [pc, #532]	; (39160 <ull_conn_tx_ack+0x2a4>)
   38f4a:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
   38f4e:	f7f7 f893 	bl	30078 <mem_get>
	switch (pdu_tx->llctrl.opcode) {
   38f52:	79e2      	ldrb	r2, [r4, #7]
   38f54:	3a02      	subs	r2, #2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   38f56:	4603      	mov	r3, r0
	switch (pdu_tx->llctrl.opcode) {
   38f58:	2a15      	cmp	r2, #21
   38f5a:	d8cd      	bhi.n	38ef8 <ull_conn_tx_ack+0x3c>
   38f5c:	a101      	add	r1, pc, #4	; (adr r1, 38f64 <ull_conn_tx_ack+0xa8>)
   38f5e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   38f62:	bf00      	nop
   38f64:	000390a9 	.word	0x000390a9
   38f68:	00038ef9 	.word	0x00038ef9
   38f6c:	00038fdf 	.word	0x00038fdf
   38f70:	00039011 	.word	0x00039011
   38f74:	000390c1 	.word	0x000390c1
   38f78:	00038fd1 	.word	0x00038fd1
   38f7c:	00038ef9 	.word	0x00038ef9
   38f80:	00038fd1 	.word	0x00038fd1
   38f84:	00038ef9 	.word	0x00038ef9
   38f88:	00038fdf 	.word	0x00038fdf
   38f8c:	00038ef9 	.word	0x00038ef9
   38f90:	0003901f 	.word	0x0003901f
   38f94:	00038ef9 	.word	0x00038ef9
   38f98:	00038ef9 	.word	0x00038ef9
   38f9c:	00038ef9 	.word	0x00038ef9
   38fa0:	00038fcb 	.word	0x00038fcb
   38fa4:	00038ef9 	.word	0x00038ef9
   38fa8:	00038fd1 	.word	0x00038fd1
   38fac:	0003908f 	.word	0x0003908f
   38fb0:	00039033 	.word	0x00039033
   38fb4:	00038fed 	.word	0x00038fed
   38fb8:	00038ffb 	.word	0x00038ffb
			mem_release(tx, &mem_conn_tx_ctrl.free);
   38fbc:	4969      	ldr	r1, [pc, #420]	; (39164 <ull_conn_tx_ack+0x2a8>)
   38fbe:	4620      	mov	r0, r4
}
   38fc0:	b002      	add	sp, #8
   38fc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   38fc6:	f7f7 b83f 	b.w	30048 <mem_release>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   38fca:	7a22      	ldrb	r2, [r4, #8]
   38fcc:	2a03      	cmp	r2, #3
   38fce:	d026      	beq.n	3901e <ull_conn_tx_ack+0x162>
			conn->common.txn_lock = 0U;
   38fd0:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
   38fd4:	f36f 0241 	bfc	r2, #1, #1
   38fd8:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
			break;
   38fdc:	e78c      	b.n	38ef8 <ull_conn_tx_ack+0x3c>
			conn->llcp_enc.pause_tx = 1U;
   38fde:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
   38fe2:	f042 0202 	orr.w	r2, r2, #2
   38fe6:	f880 2166 	strb.w	r2, [r0, #358]	; 0x166
		break;
   38fea:	e785      	b.n	38ef8 <ull_conn_tx_ack+0x3c>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   38fec:	f890 21c6 	ldrb.w	r2, [r0, #454]	; 0x1c6
   38ff0:	2102      	movs	r1, #2
   38ff2:	f361 0201 	bfi	r2, r1, #0, #2
   38ff6:	f880 21c6 	strb.w	r2, [r0, #454]	; 0x1c6
		if (conn->lll.role) {
   38ffa:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
   38ffe:	2a00      	cmp	r2, #0
   39000:	db70      	blt.n	390e4 <ull_conn_tx_ack+0x228>
		conn->llcp_phy.pause_tx = 0U;
   39002:	f893 21c7 	ldrb.w	r2, [r3, #455]	; 0x1c7
   39006:	f36f 0200 	bfc	r2, #0, #1
   3900a:	f883 21c7 	strb.w	r2, [r3, #455]	; 0x1c7
		break;
   3900e:	e773      	b.n	38ef8 <ull_conn_tx_ack+0x3c>
			conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   39010:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
   39014:	f042 0203 	orr.w	r2, r2, #3
   39018:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
   3901c:	e76c      	b.n	38ef8 <ull_conn_tx_ack+0x3c>
		conn->llcp_enc.pause_rx = 0U;
   3901e:	f893 2166 	ldrb.w	r2, [r3, #358]	; 0x166
   39022:	f022 0203 	bic.w	r2, r2, #3
   39026:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
		conn->procedure_expire = 0U;
   3902a:	2200      	movs	r2, #0
   3902c:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
		break;
   39030:	e762      	b.n	38ef8 <ull_conn_tx_ack+0x3c>
		conn->common.txn_lock = 0U;
   39032:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
   39036:	f36f 0241 	bfc	r2, #1, #1
   3903a:	f880 20d8 	strb.w	r2, [r0, #216]	; 0xd8
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   3903e:	f893 21b5 	ldrb.w	r2, [r3, #437]	; 0x1b5
   39042:	f890 01b4 	ldrb.w	r0, [r0, #436]	; 0x1b4
   39046:	4282      	cmp	r2, r0
   39048:	f43f af56 	beq.w	38ef8 <ull_conn_tx_ack+0x3c>
			switch (conn->llcp_length.state) {
   3904c:	f893 11b6 	ldrb.w	r1, [r3, #438]	; 0x1b6
   39050:	f001 0207 	and.w	r2, r1, #7
   39054:	2a03      	cmp	r2, #3
   39056:	d005      	beq.n	39064 <ull_conn_tx_ack+0x1a8>
   39058:	3203      	adds	r2, #3
   3905a:	f002 0207 	and.w	r2, r2, #7
   3905e:	2a01      	cmp	r2, #1
   39060:	f63f af4a 	bhi.w	38ef8 <ull_conn_tx_ack+0x3c>
				conn->lll.max_tx_octets =
   39064:	f8b3 21ba 	ldrh.w	r2, [r3, #442]	; 0x1ba
   39068:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
				conn->lll.max_tx_time =
   3906c:	f8b3 21be 	ldrh.w	r2, [r3, #446]	; 0x1be
   39070:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
				if (conn->llcp_length.state ==
   39074:	f001 0207 	and.w	r2, r1, #7
   39078:	2a05      	cmp	r2, #5
   3907a:	d063      	beq.n	39144 <ull_conn_tx_ack+0x288>
				if (!conn->llcp_length.cache.tx_octets) {
   3907c:	f8b3 21c0 	ldrh.w	r2, [r3, #448]	; 0x1c0
   39080:	2a00      	cmp	r2, #0
   39082:	d151      	bne.n	39128 <ull_conn_tx_ack+0x26c>
					conn->llcp_length.ack =
   39084:	f883 01b5 	strb.w	r0, [r3, #437]	; 0x1b5
					conn->procedure_expire = 0U;
   39088:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
					break;
   3908c:	e734      	b.n	38ef8 <ull_conn_tx_ack+0x3c>
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_REQ_ACK_WAIT) {
   3908e:	f890 21b6 	ldrb.w	r2, [r0, #438]	; 0x1b6
   39092:	f002 0107 	and.w	r1, r2, #7
   39096:	2901      	cmp	r1, #1
   39098:	f47f af2e 	bne.w	38ef8 <ull_conn_tx_ack+0x3c>
			conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   3909c:	2102      	movs	r1, #2
   3909e:	f361 0202 	bfi	r2, r1, #0, #3
   390a2:	f880 21b6 	strb.w	r2, [r0, #438]	; 0x1b6
   390a6:	e727      	b.n	38ef8 <ull_conn_tx_ack+0x3c>
		if (pdu_tx->llctrl.terminate_ind.error_code ==
   390a8:	7a22      	ldrb	r2, [r4, #8]
			conn->llcp_terminate.reason_final =
   390aa:	2a13      	cmp	r2, #19
   390ac:	bf08      	it	eq
   390ae:	2216      	moveq	r2, #22
   390b0:	f880 2143 	strb.w	r2, [r0, #323]	; 0x143
		conn->llcp_terminate.ack--;
   390b4:	f890 2141 	ldrb.w	r2, [r0, #321]	; 0x141
   390b8:	3a01      	subs	r2, #1
   390ba:	f880 2141 	strb.w	r2, [r0, #321]	; 0x141
	break;
   390be:	e71b      	b.n	38ef8 <ull_conn_tx_ack+0x3c>
		if (conn->lll.role) {
   390c0:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
   390c4:	2a00      	cmp	r2, #0
   390c6:	daa3      	bge.n	39010 <ull_conn_tx_ack+0x154>
			conn->llcp_enc.pause_rx = 0U;
   390c8:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
   390cc:	f022 0203 	bic.w	r2, r2, #3
   390d0:	f880 2166 	strb.w	r2, [r0, #358]	; 0x166
			conn->procedure_expire = 0U;
   390d4:	2200      	movs	r2, #0
   390d6:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
			conn->llcp_ack = conn->llcp_req;
   390da:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
   390de:	f880 20e5 	strb.w	r2, [r0, #229]	; 0xe5
   390e2:	e709      	b.n	38ef8 <ull_conn_tx_ack+0x3c>
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   390e4:	4a20      	ldr	r2, [pc, #128]	; (39168 <ull_conn_tx_ack+0x2ac>)
			if (pdu_tx->llctrl.opcode ==
   390e6:	f894 c007 	ldrb.w	ip, [r4, #7]
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   390ea:	e892 0003 	ldmia.w	r2, {r0, r1}
			if (pdu_tx->llctrl.opcode ==
   390ee:	f1bc 0f17 	cmp.w	ip, #23
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   390f2:	aa02      	add	r2, sp, #8
   390f4:	e902 0003 	stmdb	r2, {r0, r1}
			if (pdu_tx->llctrl.opcode ==
   390f8:	d105      	bne.n	39106 <ull_conn_tx_ack+0x24a>
				conn->common.txn_lock = 0U;
   390fa:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
   390fe:	f36f 0241 	bfc	r2, #1, #1
   39102:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
			phys = conn->llcp_phy.tx | lll->phy_tx;
   39106:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
   3910a:	f893 21c6 	ldrb.w	r2, [r3, #454]	; 0x1c6
   3910e:	ea41 0292 	orr.w	r2, r1, r2, lsr #2
			lll->phy_tx_time = phy_tx_time[phys];
   39112:	f002 0207 	and.w	r2, r2, #7
   39116:	3208      	adds	r2, #8
   39118:	446a      	add	r2, sp
   3911a:	f812 2c08 	ldrb.w	r2, [r2, #-8]
   3911e:	f362 1106 	bfi	r1, r2, #4, #3
   39122:	f883 1060 	strb.w	r1, [r3, #96]	; 0x60
   39126:	e76c      	b.n	39002 <ull_conn_tx_ack+0x146>
				conn->llcp_length.tx_octets =
   39128:	f8a3 21ba 	strh.w	r2, [r3, #442]	; 0x1ba
				conn->llcp_length.cache.tx_octets = 0U;
   3912c:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   3912e:	f362 0102 	bfi	r1, r2, #0, #3
				conn->llcp_length.cache.tx_octets = 0U;
   39132:	f8a3 21c0 	strh.w	r2, [r3, #448]	; 0x1c0
				conn->llcp_length.tx_time =
   39136:	f8b3 21c2 	ldrh.w	r2, [r3, #450]	; 0x1c2
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   3913a:	f883 11b6 	strb.w	r1, [r3, #438]	; 0x1b6
				conn->llcp_length.tx_time =
   3913e:	f8a3 21be 	strh.w	r2, [r3, #446]	; 0x1be
				break;
   39142:	e6d9      	b.n	38ef8 <ull_conn_tx_ack+0x3c>
					conn->llcp_length.state =
   39144:	2204      	movs	r2, #4
   39146:	f362 0102 	bfi	r1, r2, #0, #3
   3914a:	f883 11b6 	strb.w	r1, [r3, #438]	; 0x1b6
					break;
   3914e:	e6d3      	b.n	38ef8 <ull_conn_tx_ack+0x3c>
   39150:	00049c60 	.word	0x00049c60
   39154:	00049e3c 	.word	0x00049e3c
   39158:	000497b0 	.word	0x000497b0
   3915c:	00049e30 	.word	0x00049e30
   39160:	20001618 	.word	0x20001618
   39164:	20002820 	.word	0x20002820
   39168:	00049e48 	.word	0x00049e48

0003916c <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   3916c:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   39170:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
	switch (lll->phy_tx_time) {
   39174:	f3c2 1202 	ubfx	r2, r2, #4, #3
   39178:	2a02      	cmp	r2, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   3917a:	bf14      	ite	ne
   3917c:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   3917e:	089b      	lsreq	r3, r3, #2
	if (lll->enc_tx) {
   39180:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
	return max_tx_octets;
   39184:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   39186:	bf14      	ite	ne
   39188:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   3918a:	3b0b      	subeq	r3, #11
   3918c:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   3918e:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   39190:	bf44      	itt	mi
   39192:	3b04      	submi	r3, #4
   39194:	b29b      	uxthmi	r3, r3
}
   39196:	4298      	cmp	r0, r3
   39198:	bf28      	it	cs
   3919a:	4618      	movcs	r0, r3
   3919c:	4770      	bx	lr
   3919e:	bf00      	nop

000391a0 <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param)
{
   391a0:	b510      	push	{r4, lr}
   391a2:	460c      	mov	r4, r1
	struct ll_conn *conn = param;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   391a4:	b930      	cbnz	r0, 391b4 <ticker_update_latency_cancel_op_cb+0x14>

	conn->periph.latency_cancel = 0U;
   391a6:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   391aa:	f36f 0382 	bfc	r3, #2, #1
   391ae:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
}
   391b2:	bd10      	pop	{r4, pc}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   391b4:	4a09      	ldr	r2, [pc, #36]	; (391dc <ticker_update_latency_cancel_op_cb+0x3c>)
   391b6:	490a      	ldr	r1, [pc, #40]	; (391e0 <ticker_update_latency_cancel_op_cb+0x40>)
   391b8:	480a      	ldr	r0, [pc, #40]	; (391e4 <ticker_update_latency_cancel_op_cb+0x44>)
   391ba:	f240 23b1 	movw	r3, #689	; 0x2b1
   391be:	f009 fa03 	bl	425c8 <assert_print>
   391c2:	4040      	eors	r0, r0
   391c4:	f380 8811 	msr	BASEPRI, r0
   391c8:	f04f 0003 	mov.w	r0, #3
   391cc:	df02      	svc	2
	conn->periph.latency_cancel = 0U;
   391ce:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   391d2:	f36f 0382 	bfc	r3, #2, #1
   391d6:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
}
   391da:	bd10      	pop	{r4, pc}
   391dc:	00049e84 	.word	0x00049e84
   391e0:	00049ecc 	.word	0x00049ecc
   391e4:	000497b0 	.word	0x000497b0

000391e8 <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   391e8:	b900      	cbnz	r0, 391ec <ticker_op_cb+0x4>
   391ea:	4770      	bx	lr
{
   391ec:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   391ee:	4a07      	ldr	r2, [pc, #28]	; (3920c <ticker_op_cb+0x24>)
   391f0:	4907      	ldr	r1, [pc, #28]	; (39210 <ticker_op_cb+0x28>)
   391f2:	4808      	ldr	r0, [pc, #32]	; (39214 <ticker_op_cb+0x2c>)
   391f4:	f240 23a9 	movw	r3, #681	; 0x2a9
   391f8:	f009 f9e6 	bl	425c8 <assert_print>
   391fc:	4040      	eors	r0, r0
   391fe:	f380 8811 	msr	BASEPRI, r0
   39202:	f04f 0003 	mov.w	r0, #3
   39206:	df02      	svc	2
}
   39208:	bd08      	pop	{r3, pc}
   3920a:	bf00      	nop
   3920c:	00049e84 	.word	0x00049e84
   39210:	00049cc0 	.word	0x00049cc0
   39214:	000497b0 	.word	0x000497b0

00039218 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   39218:	2801      	cmp	r0, #1
   3921a:	d000      	beq.n	3921e <ticker_op_stop_adv_cb+0x6>
   3921c:	4770      	bx	lr
{
   3921e:	b510      	push	{r4, lr}
   39220:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   39222:	f7fa f989 	bl	33538 <ull_disable_mark_get>
   39226:	4284      	cmp	r4, r0
   39228:	d00c      	beq.n	39244 <ticker_op_stop_adv_cb+0x2c>
   3922a:	4a07      	ldr	r2, [pc, #28]	; (39248 <ticker_op_stop_adv_cb+0x30>)
   3922c:	4907      	ldr	r1, [pc, #28]	; (3924c <ticker_op_stop_adv_cb+0x34>)
   3922e:	4808      	ldr	r0, [pc, #32]	; (39250 <ticker_op_stop_adv_cb+0x38>)
   39230:	f240 23a1 	movw	r3, #673	; 0x2a1
   39234:	f009 f9c8 	bl	425c8 <assert_print>
   39238:	4040      	eors	r0, r0
   3923a:	f380 8811 	msr	BASEPRI, r0
   3923e:	f04f 0003 	mov.w	r0, #3
   39242:	df02      	svc	2
}
   39244:	bd10      	pop	{r4, pc}
   39246:	bf00      	nop
   39248:	00049e84 	.word	0x00049e84
   3924c:	00049ee0 	.word	0x00049ee0
   39250:	000497b0 	.word	0x000497b0

00039254 <ull_periph_ticker_cb>:
{
   39254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39258:	9c07      	ldr	r4, [sp, #28]
   3925a:	f89d 8018 	ldrb.w	r8, [sp, #24]
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   3925e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
{
   39260:	461d      	mov	r5, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   39262:	f64f 73ff 	movw	r3, #65535	; 0xffff
   39266:	4299      	cmp	r1, r3
   39268:	d026      	beq.n	392b8 <ull_periph_ticker_cb+0x64>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   3926a:	4606      	mov	r6, r0
   3926c:	4617      	mov	r7, r2
   3926e:	4601      	mov	r1, r0
   39270:	462a      	mov	r2, r5
   39272:	4620      	mov	r0, r4
   39274:	f7fd ffb8 	bl	371e8 <ull_conn_llcp>
		if (ret) {
   39278:	b9f0      	cbnz	r0, 392b8 <ull_periph_ticker_cb+0x64>
	return ++hdr->ref;
   3927a:	7823      	ldrb	r3, [r4, #0]
   3927c:	3301      	adds	r3, #1
   3927e:	b2db      	uxtb	r3, r3
   39280:	7023      	strb	r3, [r4, #0]
	LL_ASSERT(ref);
   39282:	b34b      	cbz	r3, 392d8 <ull_periph_ticker_cb+0x84>
	p.ticks_at_expire = ticks_at_expire;
   39284:	491b      	ldr	r1, [pc, #108]	; (392f4 <ull_periph_ticker_cb+0xa0>)
	mfy.param = &p;
   39286:	4b1c      	ldr	r3, [pc, #112]	; (392f8 <ull_periph_ticker_cb+0xa4>)
	p.lazy = lazy;
   39288:	810d      	strh	r5, [r1, #8]
	p.param = &conn->lll;
   3928a:	f104 001c 	add.w	r0, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   3928e:	2200      	movs	r2, #0
	p.param = &conn->lll;
   39290:	60c8      	str	r0, [r1, #12]
	p.remainder = remainder;
   39292:	e9c1 6700 	strd	r6, r7, [r1]
	p.force = force;
   39296:	f881 800a 	strb.w	r8, [r1, #10]
	mfy.param = &p;
   3929a:	6099      	str	r1, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   3929c:	2001      	movs	r0, #1
   3929e:	4611      	mov	r1, r2
   392a0:	f7f6 ff92 	bl	301c8 <mayfly_enqueue>
	LL_ASSERT(!err);
   392a4:	b950      	cbnz	r0, 392bc <ull_periph_ticker_cb+0x68>
	ull_conn_tx_demux(UINT8_MAX);
   392a6:	20ff      	movs	r0, #255	; 0xff
   392a8:	f7ff fa42 	bl	38730 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   392ac:	4620      	mov	r0, r4
   392ae:	21ff      	movs	r1, #255	; 0xff
}
   392b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   392b4:	f7ff bc98 	b.w	38be8 <ull_conn_tx_lll_enqueue>
}
   392b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(!err);
   392bc:	4a0f      	ldr	r2, [pc, #60]	; (392fc <ull_periph_ticker_cb+0xa8>)
   392be:	4910      	ldr	r1, [pc, #64]	; (39300 <ull_periph_ticker_cb+0xac>)
   392c0:	4810      	ldr	r0, [pc, #64]	; (39304 <ull_periph_ticker_cb+0xb0>)
   392c2:	f44f 730e 	mov.w	r3, #568	; 0x238
   392c6:	f009 f97f 	bl	425c8 <assert_print>
   392ca:	4040      	eors	r0, r0
   392cc:	f380 8811 	msr	BASEPRI, r0
   392d0:	f04f 0003 	mov.w	r0, #3
   392d4:	df02      	svc	2
   392d6:	e7e6      	b.n	392a6 <ull_periph_ticker_cb+0x52>
	LL_ASSERT(ref);
   392d8:	4a08      	ldr	r2, [pc, #32]	; (392fc <ull_periph_ticker_cb+0xa8>)
   392da:	490b      	ldr	r1, [pc, #44]	; (39308 <ull_periph_ticker_cb+0xb4>)
   392dc:	4809      	ldr	r0, [pc, #36]	; (39304 <ull_periph_ticker_cb+0xb0>)
   392de:	f240 232b 	movw	r3, #555	; 0x22b
   392e2:	f009 f971 	bl	425c8 <assert_print>
   392e6:	4040      	eors	r0, r0
   392e8:	f380 8811 	msr	BASEPRI, r0
   392ec:	f04f 0003 	mov.w	r0, #3
   392f0:	df02      	svc	2
   392f2:	e7c7      	b.n	39284 <ull_periph_ticker_cb+0x30>
   392f4:	20002974 	.word	0x20002974
   392f8:	200007f8 	.word	0x200007f8
   392fc:	00049e84 	.word	0x00049e84
   39300:	00049950 	.word	0x00049950
   39304:	000497b0 	.word	0x000497b0
   39308:	00049be4 	.word	0x00049be4

0003930c <ull_periph_latency_cancel>:
	if (conn->lll.latency_event && !conn->periph.latency_cancel) {
   3930c:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   3930e:	b123      	cbz	r3, 3931a <ull_periph_latency_cancel+0xe>
   39310:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
   39314:	f012 0304 	ands.w	r3, r2, #4
   39318:	d000      	beq.n	3931c <ull_periph_latency_cancel+0x10>
   3931a:	4770      	bx	lr
{
   3931c:	b510      	push	{r4, lr}
		conn->periph.latency_cancel = 1U;
   3931e:	f042 0204 	orr.w	r2, r2, #4
{
   39322:	b088      	sub	sp, #32
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   39324:	4c11      	ldr	r4, [pc, #68]	; (3936c <ull_periph_latency_cancel+0x60>)
		conn->periph.latency_cancel = 1U;
   39326:	f880 20d8 	strb.w	r2, [r0, #216]	; 0xd8
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   3932a:	3103      	adds	r1, #3
   3932c:	2201      	movs	r2, #1
   3932e:	e9cd 3202 	strd	r3, r2, [sp, #8]
   39332:	e9cd 3404 	strd	r3, r4, [sp, #16]
   39336:	e9cd 3300 	strd	r3, r3, [sp]
   3933a:	9006      	str	r0, [sp, #24]
   3933c:	b2ca      	uxtb	r2, r1
   3933e:	4618      	mov	r0, r3
   39340:	2103      	movs	r1, #3
   39342:	f7f8 f8a9 	bl	31498 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   39346:	f030 0302 	bics.w	r3, r0, #2
   3934a:	d00c      	beq.n	39366 <ull_periph_latency_cancel+0x5a>
   3934c:	4a08      	ldr	r2, [pc, #32]	; (39370 <ull_periph_latency_cancel+0x64>)
   3934e:	4909      	ldr	r1, [pc, #36]	; (39374 <ull_periph_latency_cancel+0x68>)
   39350:	4809      	ldr	r0, [pc, #36]	; (39378 <ull_periph_latency_cancel+0x6c>)
   39352:	f240 13f1 	movw	r3, #497	; 0x1f1
   39356:	f009 f937 	bl	425c8 <assert_print>
   3935a:	4040      	eors	r0, r0
   3935c:	f380 8811 	msr	BASEPRI, r0
   39360:	f04f 0003 	mov.w	r0, #3
   39364:	df02      	svc	2
}
   39366:	b008      	add	sp, #32
   39368:	bd10      	pop	{r4, pc}
   3936a:	bf00      	nop
   3936c:	000391a1 	.word	0x000391a1
   39370:	00049e84 	.word	0x00049e84
   39374:	00049d40 	.word	0x00049d40
   39378:	000497b0 	.word	0x000497b0

0003937c <ll_start_enc_req_send>:
{
   3937c:	b570      	push	{r4, r5, r6, lr}
   3937e:	460d      	mov	r5, r1
   39380:	4616      	mov	r6, r2
	conn = ll_connected_get(handle);
   39382:	f7fc f82d 	bl	353e0 <ll_connected_get>
	if (!conn) {
   39386:	b3f8      	cbz	r0, 39408 <ll_start_enc_req_send+0x8c>
	if (error_code) {
   39388:	4604      	mov	r4, r0
   3938a:	b95d      	cbnz	r5, 393a4 <ll_start_enc_req_send+0x28>
		if ((conn->llcp_req == conn->llcp_ack) ||
   3938c:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
   39390:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
   39394:	429a      	cmp	r2, r3
   39396:	d003      	beq.n	393a0 <ll_start_enc_req_send+0x24>
   39398:	f890 30e6 	ldrb.w	r3, [r0, #230]	; 0xe6
   3939c:	2b03      	cmp	r3, #3
   3939e:	d026      	beq.n	393ee <ll_start_enc_req_send+0x72>
				return BT_HCI_ERR_CMD_DISALLOWED;
   393a0:	200c      	movs	r0, #12
}
   393a2:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->llcp_enc.refresh == 0U) {
   393a4:	f890 3166 	ldrb.w	r3, [r0, #358]	; 0x166
   393a8:	f013 0304 	ands.w	r3, r3, #4
   393ac:	d113      	bne.n	393d6 <ll_start_enc_req_send+0x5a>
			if ((conn->llcp_req == conn->llcp_ack) ||
   393ae:	f890 10e4 	ldrb.w	r1, [r0, #228]	; 0xe4
   393b2:	f890 20e5 	ldrb.w	r2, [r0, #229]	; 0xe5
   393b6:	4291      	cmp	r1, r2
   393b8:	d0f2      	beq.n	393a0 <ll_start_enc_req_send+0x24>
   393ba:	f890 20e6 	ldrb.w	r2, [r0, #230]	; 0xe6
   393be:	2a03      	cmp	r2, #3
   393c0:	d1ee      	bne.n	393a0 <ll_start_enc_req_send+0x24>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   393c2:	f890 20f4 	ldrb.w	r2, [r0, #244]	; 0xf4
			conn->llcp.encryption.error_code = error_code;
   393c6:	f880 50f5 	strb.w	r5, [r0, #245]	; 0xf5
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   393ca:	f363 0201 	bfi	r2, r3, #0, #2
   393ce:	f880 20f4 	strb.w	r2, [r0, #244]	; 0xf4
	return 0;
   393d2:	2000      	movs	r0, #0
}
   393d4:	bd70      	pop	{r4, r5, r6, pc}
			    conn->llcp_terminate.req) {
   393d6:	f890 2140 	ldrb.w	r2, [r0, #320]	; 0x140
			if (conn->llcp_terminate.ack !=
   393da:	f890 3141 	ldrb.w	r3, [r0, #321]	; 0x141
   393de:	4293      	cmp	r3, r2
   393e0:	d1de      	bne.n	393a0 <ll_start_enc_req_send+0x24>
			conn->llcp_terminate.req++;
   393e2:	3301      	adds	r3, #1
			conn->llcp_terminate.reason_own = error_code;
   393e4:	f880 5142 	strb.w	r5, [r0, #322]	; 0x142
			conn->llcp_terminate.req++;
   393e8:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
   393ec:	e7f1      	b.n	393d2 <ll_start_enc_req_send+0x56>
		memcpy(&conn->llcp_enc.ltk[0], ltk,
   393ee:	2210      	movs	r2, #16
   393f0:	4631      	mov	r1, r6
   393f2:	f200 1071 	addw	r0, r0, #369	; 0x171
   393f6:	f00a ff8f 	bl	44318 <memcpy>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   393fa:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
   393fe:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
   39402:	f8a4 30f4 	strh.w	r3, [r4, #244]	; 0xf4
   39406:	e7e4      	b.n	393d2 <ll_start_enc_req_send+0x56>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   39408:	2002      	movs	r0, #2
}
   3940a:	bd70      	pop	{r4, r5, r6, pc}

0003940c <lll_chan_sel_1>:
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.2
 * Channel Selection algorithm #1
 */
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   3940c:	b530      	push	{r4, r5, lr}
   3940e:	4604      	mov	r4, r0
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   39410:	7800      	ldrb	r0, [r0, #0]
{
   39412:	f89d 500c 	ldrb.w	r5, [sp, #12]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   39416:	fb02 1101 	mla	r1, r2, r1, r1
   3941a:	4a1f      	ldr	r2, [pc, #124]	; (39498 <lll_chan_sel_1+0x8c>)
   3941c:	4401      	add	r1, r0
   3941e:	fb82 0201 	smull	r0, r2, r2, r1
   39422:	440a      	add	r2, r1
   39424:	1152      	asrs	r2, r2, #5
   39426:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
   3942a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   3942e:	1a8a      	subs	r2, r1, r2
   39430:	b2d0      	uxtb	r0, r2
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   39432:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
   39434:	7020      	strb	r0, [r4, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   39436:	5c59      	ldrb	r1, [r3, r1]
   39438:	f002 0207 	and.w	r2, r2, #7
   3943c:	fa41 f202 	asr.w	r2, r1, r2
   39440:	f012 0201 	ands.w	r2, r2, #1
   39444:	d11f      	bne.n	39486 <lll_chan_sel_1+0x7a>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   39446:	fbb0 f4f5 	udiv	r4, r0, r5
   3944a:	fb05 0414 	mls	r4, r5, r4, r0
   3944e:	b2e4      	uxtb	r4, r4
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   39450:	1e5d      	subs	r5, r3, #1
	chan_next = 0U;
   39452:	4610      	mov	r0, r2
   39454:	3304      	adds	r3, #4
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   39456:	f100 0e08 	add.w	lr, r0, #8
   3945a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
		bit_count = 8U;
		while (bit_count--) {
   3945e:	fa5f fe8e 	uxtb.w	lr, lr
		bite = *chan_map;
   39462:	4602      	mov	r2, r0
			if (bite & 0x01) {
   39464:	f011 0f01 	tst.w	r1, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   39468:	f102 0c01 	add.w	ip, r2, #1
			bite >>= 1;
   3946c:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   39470:	d002      	beq.n	39478 <lll_chan_sel_1+0x6c>
				if (chan_index == 0U) {
   39472:	b14c      	cbz	r4, 39488 <lll_chan_sel_1+0x7c>
				chan_index--;
   39474:	3c01      	subs	r4, #1
   39476:	b2e4      	uxtb	r4, r4
			chan_next++;
   39478:	fa5f f28c 	uxtb.w	r2, ip
		while (bit_count--) {
   3947c:	4572      	cmp	r2, lr
   3947e:	d1f1      	bne.n	39464 <lll_chan_sel_1+0x58>
			chan_next++;
   39480:	4610      	mov	r0, r2
	while (byte_count--) {
   39482:	429d      	cmp	r5, r3
   39484:	d1e7      	bne.n	39456 <lll_chan_sel_1+0x4a>
}
   39486:	bd30      	pop	{r4, r5, pc}
		}

		if (bit_count < 8) {
   39488:	1dc1      	adds	r1, r0, #7
   3948a:	1a89      	subs	r1, r1, r2
   3948c:	b2c9      	uxtb	r1, r1
   3948e:	2907      	cmp	r1, #7
   39490:	4610      	mov	r0, r2
   39492:	d8f6      	bhi.n	39482 <lll_chan_sel_1+0x76>
}
   39494:	bd30      	pop	{r4, r5, pc}
   39496:	bf00      	nop
   39498:	dd67c8a7 	.word	0xdd67c8a7

0003949c <lll_chan_id>:
	return aa_ms ^ aa_ls;
   3949c:	8842      	ldrh	r2, [r0, #2]
   3949e:	8800      	ldrh	r0, [r0, #0]
}
   394a0:	4050      	eors	r0, r2
   394a2:	4770      	bx	lr

000394a4 <lll_chan_sel_2>:
{
   394a4:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.3.2
 * Inputs and basic components, for below operations
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   394a6:	4d34      	ldr	r5, [pc, #208]	; (39578 <lll_chan_sel_2+0xd4>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   394a8:	4c34      	ldr	r4, [pc, #208]	; (3957c <lll_chan_sel_2+0xd8>)
static uint16_t chan_prn_s(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_s;

	prn_s = counter ^ chan_id;
   394aa:	4048      	eors	r0, r1
   394ac:	f04f 0c03 	mov.w	ip, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   394b0:	0a06      	lsrs	r6, r0, #8
   394b2:	fa5f fe80 	uxtb.w	lr, r0
   394b6:	eb0e 2e8e 	add.w	lr, lr, lr, lsl #10
   394ba:	eb06 2086 	add.w	r0, r6, r6, lsl #10
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   394be:	ea04 1740 	and.w	r7, r4, r0, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   394c2:	ea05 0640 	and.w	r6, r5, r0, lsl #1
   394c6:	ea05 004e 	and.w	r0, r5, lr, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   394ca:	ea04 1e4e 	and.w	lr, r4, lr, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   394ce:	433e      	orrs	r6, r7
   394d0:	ea40 000e 	orr.w	r0, r0, lr
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   394d4:	eb00 2700 	add.w	r7, r0, r0, lsl #8
   394d8:	eb06 2e06 	add.w	lr, r6, r6, lsl #8
   394dc:	eb06 260e 	add.w	r6, r6, lr, lsl #8
   394e0:	eb00 2007 	add.w	r0, r0, r7, lsl #8
   394e4:	0c36      	lsrs	r6, r6, #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   394e6:	f3c0 4007 	ubfx	r0, r0, #16, #8
   394ea:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   394ee:	eb00 1000 	add.w	r0, r0, r0, lsl #4

	for (iterate = 0U; iterate < 3; iterate++) {
   394f2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   394f6:	4408      	add	r0, r1
	for (iterate = 0U; iterate < 3; iterate++) {
   394f8:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   394fc:	b280      	uxth	r0, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   394fe:	d1d7      	bne.n	394b0 <lll_chan_sel_2+0xc>
static uint16_t chan_prn_e(uint16_t counter, uint16_t chan_id)
{
	uint16_t prn_e;

	prn_e = chan_prn_s(counter, chan_id);
	prn_e ^= chan_id;
   39500:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
   39502:	481f      	ldr	r0, [pc, #124]	; (39580 <lll_chan_sel_2+0xdc>)
   39504:	fba0 4001 	umull	r4, r0, r0, r1
   39508:	1a0c      	subs	r4, r1, r0
   3950a:	eb00 0054 	add.w	r0, r0, r4, lsr #1
   3950e:	0940      	lsrs	r0, r0, #5
   39510:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
   39514:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   39518:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   3951a:	f3c0 04c4 	ubfx	r4, r0, #3, #5
   3951e:	f000 0507 	and.w	r5, r0, #7
   39522:	5d14      	ldrb	r4, [r2, r4]
   39524:	412c      	asrs	r4, r5
   39526:	07e4      	lsls	r4, r4, #31
	chan_next = prn_e % 37;
   39528:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   3952a:	d41c      	bmi.n	39566 <lll_chan_sel_2+0xc2>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   3952c:	fb01 f303 	mul.w	r3, r1, r3
   39530:	1e56      	subs	r6, r2, #1
   39532:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   39536:	3204      	adds	r2, #4
	chan_next = 0U;
   39538:	4660      	mov	r0, ip
		bite = *chan_map;
   3953a:	f100 0508 	add.w	r5, r0, #8
   3953e:	f816 cf01 	ldrb.w	ip, [r6, #1]!
		while (bit_count--) {
   39542:	b2ed      	uxtb	r5, r5
		bite = *chan_map;
   39544:	4601      	mov	r1, r0
			if (bite & 0x01) {
   39546:	f01c 0f01 	tst.w	ip, #1
			chan_next++;
   3954a:	f101 0401 	add.w	r4, r1, #1
			bite >>= 1;
   3954e:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
			if (bite & 0x01) {
   39552:	d002      	beq.n	3955a <lll_chan_sel_2+0xb6>
				if (chan_index == 0U) {
   39554:	b143      	cbz	r3, 39568 <lll_chan_sel_2+0xc4>
				chan_index--;
   39556:	3b01      	subs	r3, #1
   39558:	b2db      	uxtb	r3, r3
			chan_next++;
   3955a:	b2e1      	uxtb	r1, r4
		while (bit_count--) {
   3955c:	42a9      	cmp	r1, r5
   3955e:	d1f2      	bne.n	39546 <lll_chan_sel_2+0xa2>
			chan_next++;
   39560:	4608      	mov	r0, r1
	while (byte_count--) {
   39562:	4296      	cmp	r6, r2
   39564:	d1e9      	bne.n	3953a <lll_chan_sel_2+0x96>
}
   39566:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (bit_count < 8) {
   39568:	3007      	adds	r0, #7
   3956a:	1a40      	subs	r0, r0, r1
   3956c:	b2c0      	uxtb	r0, r0
   3956e:	2807      	cmp	r0, #7
   39570:	4608      	mov	r0, r1
   39572:	d8f6      	bhi.n	39562 <lll_chan_sel_2+0xbe>
}
   39574:	bdf0      	pop	{r4, r5, r6, r7, pc}
   39576:	bf00      	nop
   39578:	00022110 	.word	0x00022110
   3957c:	00088440 	.word	0x00088440
   39580:	bacf914d 	.word	0xbacf914d

00039584 <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   39584:	4668      	mov	r0, sp
   39586:	f020 0107 	bic.w	r1, r0, #7
   3958a:	468d      	mov	sp, r1
   3958c:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_radio();

	isr_radio();
   3958e:	f002 f84d 	bl	3b62c <isr_radio>

	ISR_DIRECT_PM();
   39592:	f7f0 fef9 	bl	2a388 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   39596:	f7f0 ffc9 	bl	2a52c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   3959a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   3959e:	4685      	mov	sp, r0
   395a0:	4770      	bx	lr
   395a2:	bf00      	nop

000395a4 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   395a4:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	lll_prof_enter_ull_high();

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   395a6:	4b09      	ldr	r3, [pc, #36]	; (395cc <rtc0_nrf5_isr+0x28>)
   395a8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   395ac:	b93a      	cbnz	r2, 395be <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   395ae:	2001      	movs	r0, #1
   395b0:	f7f6 fe68 	bl	30284 <mayfly_run>

	lll_prof_exit_ull_low();
#endif

	DEBUG_TICKER_ISR(0);
}
   395b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   395b8:	2002      	movs	r0, #2
   395ba:	f7f6 be63 	b.w	30284 <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   395be:	2000      	movs	r0, #0
   395c0:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   395c4:	f7f7 fe86 	bl	312d4 <ticker_trigger>
   395c8:	e7f1      	b.n	395ae <rtc0_nrf5_isr+0xa>
   395ca:	bf00      	nop
   395cc:	4000b000 	.word	0x4000b000

000395d0 <swi_lll_nrf5_isr>:
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_lll();

	mayfly_run(TICKER_USER_ID_LLL);
   395d0:	2000      	movs	r0, #0
   395d2:	f7f6 be57 	b.w	30284 <mayfly_run>
   395d6:	bf00      	nop

000395d8 <ticker_start_op_cb>:

	preempt_req = preempt_ack;
}

static void ticker_start_op_cb(uint32_t status, void *param)
{
   395d8:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(param);
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   395da:	b9f8      	cbnz	r0, 3961c <ticker_start_op_cb+0x44>

	LL_ASSERT(preempt_start_req != preempt_start_ack);
   395dc:	4b1e      	ldr	r3, [pc, #120]	; (39658 <ticker_start_op_cb+0x80>)
   395de:	4d1f      	ldr	r5, [pc, #124]	; (3965c <ticker_start_op_cb+0x84>)
   395e0:	781a      	ldrb	r2, [r3, #0]
   395e2:	782b      	ldrb	r3, [r5, #0]
   395e4:	429a      	cmp	r2, r3
   395e6:	d027      	beq.n	39638 <ticker_start_op_cb+0x60>
	preempt_start_ack++;

	LL_ASSERT(preempt_req == preempt_ack);
   395e8:	4a1d      	ldr	r2, [pc, #116]	; (39660 <ticker_start_op_cb+0x88>)
   395ea:	4c1e      	ldr	r4, [pc, #120]	; (39664 <ticker_start_op_cb+0x8c>)
   395ec:	7812      	ldrb	r2, [r2, #0]
   395ee:	7821      	ldrb	r1, [r4, #0]
	preempt_start_ack++;
   395f0:	3301      	adds	r3, #1
	LL_ASSERT(preempt_req == preempt_ack);
   395f2:	4291      	cmp	r1, r2
	preempt_start_ack++;
   395f4:	702b      	strb	r3, [r5, #0]
	LL_ASSERT(preempt_req == preempt_ack);
   395f6:	b2d3      	uxtb	r3, r2
   395f8:	d00d      	beq.n	39616 <ticker_start_op_cb+0x3e>
   395fa:	4a1b      	ldr	r2, [pc, #108]	; (39668 <ticker_start_op_cb+0x90>)
   395fc:	491b      	ldr	r1, [pc, #108]	; (3966c <ticker_start_op_cb+0x94>)
   395fe:	481c      	ldr	r0, [pc, #112]	; (39670 <ticker_start_op_cb+0x98>)
   39600:	f240 332e 	movw	r3, #814	; 0x32e
   39604:	f008 ffe0 	bl	425c8 <assert_print>
   39608:	4040      	eors	r0, r0
   3960a:	f380 8811 	msr	BASEPRI, r0
   3960e:	f04f 0003 	mov.w	r0, #3
   39612:	df02      	svc	2
	preempt_req++;
   39614:	7823      	ldrb	r3, [r4, #0]
   39616:	3301      	adds	r3, #1
   39618:	7023      	strb	r3, [r4, #0]
}
   3961a:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   3961c:	4a12      	ldr	r2, [pc, #72]	; (39668 <ticker_start_op_cb+0x90>)
   3961e:	4915      	ldr	r1, [pc, #84]	; (39674 <ticker_start_op_cb+0x9c>)
   39620:	4813      	ldr	r0, [pc, #76]	; (39670 <ticker_start_op_cb+0x98>)
   39622:	f240 3329 	movw	r3, #809	; 0x329
   39626:	f008 ffcf 	bl	425c8 <assert_print>
   3962a:	4040      	eors	r0, r0
   3962c:	f380 8811 	msr	BASEPRI, r0
   39630:	f04f 0003 	mov.w	r0, #3
   39634:	df02      	svc	2
   39636:	e7d1      	b.n	395dc <ticker_start_op_cb+0x4>
	LL_ASSERT(preempt_start_req != preempt_start_ack);
   39638:	4a0b      	ldr	r2, [pc, #44]	; (39668 <ticker_start_op_cb+0x90>)
   3963a:	490f      	ldr	r1, [pc, #60]	; (39678 <ticker_start_op_cb+0xa0>)
   3963c:	480c      	ldr	r0, [pc, #48]	; (39670 <ticker_start_op_cb+0x98>)
   3963e:	f240 332b 	movw	r3, #811	; 0x32b
   39642:	f008 ffc1 	bl	425c8 <assert_print>
   39646:	4040      	eors	r0, r0
   39648:	f380 8811 	msr	BASEPRI, r0
   3964c:	f04f 0003 	mov.w	r0, #3
   39650:	df02      	svc	2
	preempt_start_ack++;
   39652:	782b      	ldrb	r3, [r5, #0]
   39654:	e7c8      	b.n	395e8 <ticker_start_op_cb+0x10>
   39656:	bf00      	nop
   39658:	20003b16 	.word	0x20003b16
   3965c:	20003b15 	.word	0x20003b15
   39660:	20003b11 	.word	0x20003b11
   39664:	20003b12 	.word	0x20003b12
   39668:	00049f10 	.word	0x00049f10
   3966c:	00049f80 	.word	0x00049f80
   39670:	000497b0 	.word	0x000497b0
   39674:	00049cc0 	.word	0x00049cc0
   39678:	00049f58 	.word	0x00049f58

0003967c <ticker_stop_op_cb>:
{
   3967c:	b510      	push	{r4, lr}
	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   3967e:	4b0e      	ldr	r3, [pc, #56]	; (396b8 <ticker_stop_op_cb+0x3c>)
   39680:	4c0e      	ldr	r4, [pc, #56]	; (396bc <ticker_stop_op_cb+0x40>)
   39682:	781a      	ldrb	r2, [r3, #0]
   39684:	7823      	ldrb	r3, [r4, #0]
   39686:	429a      	cmp	r2, r3
   39688:	d006      	beq.n	39698 <ticker_stop_op_cb+0x1c>
	preempt_req = preempt_ack;
   3968a:	490d      	ldr	r1, [pc, #52]	; (396c0 <ticker_stop_op_cb+0x44>)
   3968c:	4a0d      	ldr	r2, [pc, #52]	; (396c4 <ticker_stop_op_cb+0x48>)
   3968e:	7809      	ldrb	r1, [r1, #0]
   39690:	7011      	strb	r1, [r2, #0]
	preempt_stop_ack++;
   39692:	3301      	adds	r3, #1
   39694:	7023      	strb	r3, [r4, #0]
}
   39696:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   39698:	4a0b      	ldr	r2, [pc, #44]	; (396c8 <ticker_stop_op_cb+0x4c>)
   3969a:	490c      	ldr	r1, [pc, #48]	; (396cc <ticker_stop_op_cb+0x50>)
   3969c:	480c      	ldr	r0, [pc, #48]	; (396d0 <ticker_stop_op_cb+0x54>)
   3969e:	f44f 7348 	mov.w	r3, #800	; 0x320
   396a2:	f008 ff91 	bl	425c8 <assert_print>
   396a6:	4040      	eors	r0, r0
   396a8:	f380 8811 	msr	BASEPRI, r0
   396ac:	f04f 0003 	mov.w	r0, #3
   396b0:	df02      	svc	2
	preempt_stop_ack++;
   396b2:	7823      	ldrb	r3, [r4, #0]
   396b4:	e7e9      	b.n	3968a <ticker_stop_op_cb+0xe>
   396b6:	bf00      	nop
   396b8:	20003b14 	.word	0x20003b14
   396bc:	20003b13 	.word	0x20003b13
   396c0:	20003b11 	.word	0x20003b11
   396c4:	20003b12 	.word	0x20003b12
   396c8:	00049f10 	.word	0x00049f10
   396cc:	00049f9c 	.word	0x00049f9c
   396d0:	000497b0 	.word	0x000497b0

000396d4 <isr_race>:
	radio_status_reset();
   396d4:	f002 b8b4 	b.w	3b840 <radio_status_reset>

000396d8 <preempt_ticker_cb>:
}

static void preempt_ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
			      uint32_t remainder, uint16_t lazy, uint8_t force,
			      void *param)
{
   396d8:	b510      	push	{r4, lr}
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, preempt};
	uint32_t ret;

	LL_ASSERT(preempt_ack != preempt_req);
   396da:	4a18      	ldr	r2, [pc, #96]	; (3973c <preempt_ticker_cb+0x64>)
   396dc:	4c18      	ldr	r4, [pc, #96]	; (39740 <preempt_ticker_cb+0x68>)
   396de:	7812      	ldrb	r2, [r2, #0]
   396e0:	7823      	ldrb	r3, [r4, #0]
   396e2:	429a      	cmp	r2, r3
   396e4:	d01b      	beq.n	3971e <preempt_ticker_cb+0x46>
	preempt_ack++;
   396e6:	7821      	ldrb	r1, [r4, #0]

	mfy.param = param;
   396e8:	4b16      	ldr	r3, [pc, #88]	; (39744 <preempt_ticker_cb+0x6c>)
	preempt_ack++;
   396ea:	3101      	adds	r1, #1
   396ec:	b2c9      	uxtb	r1, r1
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   396ee:	2200      	movs	r2, #0
	preempt_ack++;
   396f0:	7021      	strb	r1, [r4, #0]
	mfy.param = param;
   396f2:	9903      	ldr	r1, [sp, #12]
   396f4:	6099      	str	r1, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   396f6:	2001      	movs	r0, #1
   396f8:	4611      	mov	r1, r2
   396fa:	f7f6 fd65 	bl	301c8 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   396fe:	b900      	cbnz	r0, 39702 <preempt_ticker_cb+0x2a>
}
   39700:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   39702:	4a11      	ldr	r2, [pc, #68]	; (39748 <preempt_ticker_cb+0x70>)
   39704:	4911      	ldr	r1, [pc, #68]	; (3974c <preempt_ticker_cb+0x74>)
   39706:	4812      	ldr	r0, [pc, #72]	; (39750 <preempt_ticker_cb+0x78>)
   39708:	f44f 736b 	mov.w	r3, #940	; 0x3ac
   3970c:	f008 ff5c 	bl	425c8 <assert_print>
   39710:	4040      	eors	r0, r0
   39712:	f380 8811 	msr	BASEPRI, r0
   39716:	f04f 0003 	mov.w	r0, #3
   3971a:	df02      	svc	2
}
   3971c:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_ack != preempt_req);
   3971e:	4a0a      	ldr	r2, [pc, #40]	; (39748 <preempt_ticker_cb+0x70>)
   39720:	490c      	ldr	r1, [pc, #48]	; (39754 <preempt_ticker_cb+0x7c>)
   39722:	480b      	ldr	r0, [pc, #44]	; (39750 <preempt_ticker_cb+0x78>)
   39724:	f240 33a6 	movw	r3, #934	; 0x3a6
   39728:	f008 ff4e 	bl	425c8 <assert_print>
   3972c:	4040      	eors	r0, r0
   3972e:	f380 8811 	msr	BASEPRI, r0
   39732:	f04f 0003 	mov.w	r0, #3
   39736:	df02      	svc	2
   39738:	e7d5      	b.n	396e6 <preempt_ticker_cb+0xe>
   3973a:	bf00      	nop
   3973c:	20003b12 	.word	0x20003b12
   39740:	20003b11 	.word	0x20003b11
   39744:	20000808 	.word	0x20000808
   39748:	00049f10 	.word	0x00049f10
   3974c:	00049a4c 	.word	0x00049a4c
   39750:	000497b0 	.word	0x000497b0
   39754:	00049fc4 	.word	0x00049fc4

00039758 <preempt_ticker_start>:
{
   39758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((preempt_start_req != preempt_start_ack) ||
   3975c:	f8df 8144 	ldr.w	r8, [pc, #324]	; 398a4 <preempt_ticker_start+0x14c>
{
   39760:	4615      	mov	r5, r2
	if ((preempt_start_req != preempt_start_ack) ||
   39762:	4a51      	ldr	r2, [pc, #324]	; (398a8 <preempt_ticker_start+0x150>)
   39764:	f898 3000 	ldrb.w	r3, [r8]
   39768:	7812      	ldrb	r2, [r2, #0]
   3976a:	429a      	cmp	r2, r3
{
   3976c:	b08a      	sub	sp, #40	; 0x28
   3976e:	460c      	mov	r4, r1
	if ((preempt_start_req != preempt_start_ack) ||
   39770:	d04a      	beq.n	39808 <preempt_ticker_start+0xb0>
		if (!prev || prev->is_aborted ||
   39772:	2c00      	cmp	r4, #0
   39774:	d063      	beq.n	3983e <preempt_ticker_start+0xe6>
   39776:	7f22      	ldrb	r2, [r4, #28]
   39778:	f012 0202 	ands.w	r2, r2, #2
   3977c:	d15f      	bne.n	3983e <preempt_ticker_start+0xe6>
		ull = HDR_LLL2ULL(p->param);
   3977e:	68eb      	ldr	r3, [r5, #12]
		preempt_anchor = p->ticks_at_expire;
   39780:	f8d5 a000 	ldr.w	sl, [r5]
		ull = HDR_LLL2ULL(p->param);
   39784:	681b      	ldr	r3, [r3, #0]
		diff = ticks_at_preempt_new - ticks_at_preempt;
   39786:	f8df 9124 	ldr.w	r9, [pc, #292]	; 398ac <preempt_ticker_start+0x154>
		preempt_to = MAX(ull->ticks_active_to_start,
   3978a:	68df      	ldr	r7, [r3, #12]
   3978c:	e9d3 1001 	ldrd	r1, r0, [r3, #4]
   39790:	4288      	cmp	r0, r1
   39792:	bf2c      	ite	cs
   39794:	ebc7 0700 	rsbcs	r7, r7, r0
   39798:	ebc7 0701 	rsbcc	r7, r7, r1
		ticks_at_preempt_new = preempt_anchor + preempt_to;
   3979c:	eb0a 0607 	add.w	r6, sl, r7
		diff = ticks_at_preempt_new - ticks_at_preempt;
   397a0:	f8d9 0000 	ldr.w	r0, [r9]
		ticks_at_preempt_new &= HAL_TICKER_CNTR_MASK;
   397a4:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		diff = ticks_at_preempt_new - ticks_at_preempt;
   397a8:	1a30      	subs	r0, r6, r0
		if (!prev || prev->is_aborted ||
   397aa:	f410 0000 	ands.w	r0, r0, #8388608	; 0x800000
   397ae:	d047      	beq.n	39840 <preempt_ticker_start+0xe8>
	if ((preempt_stop_req != preempt_stop_ack) ||
   397b0:	493f      	ldr	r1, [pc, #252]	; (398b0 <preempt_ticker_start+0x158>)
   397b2:	4b40      	ldr	r3, [pc, #256]	; (398b4 <preempt_ticker_start+0x15c>)
   397b4:	7808      	ldrb	r0, [r1, #0]
   397b6:	7819      	ldrb	r1, [r3, #0]
   397b8:	4288      	cmp	r0, r1
   397ba:	d044      	beq.n	39846 <preempt_ticker_start+0xee>
		prev->is_aborted = 1U;
   397bc:	7f23      	ldrb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   397be:	68e1      	ldr	r1, [r4, #12]
		ticks_at_preempt = ticks_at_preempt_new;
   397c0:	f8c9 6000 	str.w	r6, [r9]
		prev->is_aborted = 1U;
   397c4:	f043 0302 	orr.w	r3, r3, #2
   397c8:	7723      	strb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   397ca:	4620      	mov	r0, r4
   397cc:	69a3      	ldr	r3, [r4, #24]
   397ce:	4798      	blx	r3
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   397d0:	4b39      	ldr	r3, [pc, #228]	; (398b8 <preempt_ticker_start+0x160>)
	ticks_at_preempt = ticks_at_preempt_new;
   397d2:	f8c9 6000 	str.w	r6, [r9]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   397d6:	e9cd 3507 	strd	r3, r5, [sp, #28]
   397da:	4b38      	ldr	r3, [pc, #224]	; (398bc <preempt_ticker_start+0x164>)
   397dc:	9700      	str	r7, [sp, #0]
   397de:	2200      	movs	r2, #0
   397e0:	e9cd 3505 	strd	r3, r5, [sp, #20]
   397e4:	e9cd 2203 	strd	r2, r2, [sp, #12]
   397e8:	e9cd 2201 	strd	r2, r2, [sp, #4]
	preempt_start_req++;
   397ec:	f898 4000 	ldrb.w	r4, [r8]
   397f0:	3401      	adds	r4, #1
   397f2:	b2e4      	uxtb	r4, r4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   397f4:	4653      	mov	r3, sl
   397f6:	4611      	mov	r1, r2
   397f8:	4610      	mov	r0, r2
	preempt_start_req++;
   397fa:	f888 4000 	strb.w	r4, [r8]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   397fe:	f7f7 fdd7 	bl	313b0 <ticker_start>
}
   39802:	b00a      	add	sp, #40	; 0x28
   39804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    (preempt_req != preempt_ack)) {
   39808:	4b2d      	ldr	r3, [pc, #180]	; (398c0 <preempt_ticker_start+0x168>)
   3980a:	4a2e      	ldr	r2, [pc, #184]	; (398c4 <preempt_ticker_start+0x16c>)
   3980c:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   3980e:	7812      	ldrb	r2, [r2, #0]
   39810:	429a      	cmp	r2, r3
   39812:	d1ae      	bne.n	39772 <preempt_ticker_start+0x1a>
		ull = HDR_LLL2ULL(p->param);
   39814:	68c3      	ldr	r3, [r0, #12]
		preempt_anchor = p->ticks_at_expire;
   39816:	f8d0 a000 	ldr.w	sl, [r0]
		ull = HDR_LLL2ULL(p->param);
   3981a:	681b      	ldr	r3, [r3, #0]
		preempt_to = MAX(ull->ticks_active_to_start,
   3981c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 398ac <preempt_ticker_start+0x154>
   39820:	68df      	ldr	r7, [r3, #12]
   39822:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   39826:	4291      	cmp	r1, r2
   39828:	bf2c      	ite	cs
   3982a:	ebc7 0701 	rsbcs	r7, r7, r1
   3982e:	ebc7 0702 	rsbcc	r7, r7, r2
		ticks_at_preempt_new = preempt_anchor + preempt_to;
   39832:	eb0a 0607 	add.w	r6, sl, r7
		ticks_at_preempt_new &= HAL_TICKER_CNTR_MASK;
   39836:	4605      	mov	r5, r0
   39838:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
   3983c:	e7c8      	b.n	397d0 <preempt_ticker_start+0x78>
			return TICKER_STATUS_SUCCESS;
   3983e:	2000      	movs	r0, #0
}
   39840:	b00a      	add	sp, #40	; 0x28
   39842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    (preempt_req == preempt_ack)) {
   39846:	491e      	ldr	r1, [pc, #120]	; (398c0 <preempt_ticker_start+0x168>)
   39848:	481e      	ldr	r0, [pc, #120]	; (398c4 <preempt_ticker_start+0x16c>)
   3984a:	7809      	ldrb	r1, [r1, #0]
	if ((preempt_stop_req != preempt_stop_ack) ||
   3984c:	7800      	ldrb	r0, [r0, #0]
   3984e:	4288      	cmp	r0, r1
   39850:	d0b4      	beq.n	397bc <preempt_ticker_start+0x64>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   39852:	9200      	str	r2, [sp, #0]
	preempt_stop_req++;
   39854:	7819      	ldrb	r1, [r3, #0]
   39856:	3101      	adds	r1, #1
   39858:	b2c9      	uxtb	r1, r1
   3985a:	7019      	strb	r1, [r3, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   3985c:	4610      	mov	r0, r2
   3985e:	4b1a      	ldr	r3, [pc, #104]	; (398c8 <preempt_ticker_start+0x170>)
   39860:	4611      	mov	r1, r2
   39862:	f7f7 fe31 	bl	314c8 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   39866:	f030 0302 	bics.w	r3, r0, #2
   3986a:	d0a7      	beq.n	397bc <preempt_ticker_start+0x64>
   3986c:	4a17      	ldr	r2, [pc, #92]	; (398cc <preempt_ticker_start+0x174>)
   3986e:	4918      	ldr	r1, [pc, #96]	; (398d0 <preempt_ticker_start+0x178>)
   39870:	4818      	ldr	r0, [pc, #96]	; (398d4 <preempt_ticker_start+0x17c>)
   39872:	f44f 7366 	mov.w	r3, #920	; 0x398
   39876:	f008 fea7 	bl	425c8 <assert_print>
   3987a:	4040      	eors	r0, r0
   3987c:	f380 8811 	msr	BASEPRI, r0
   39880:	f04f 0003 	mov.w	r0, #3
   39884:	df02      	svc	2
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   39886:	4a11      	ldr	r2, [pc, #68]	; (398cc <preempt_ticker_start+0x174>)
   39888:	4911      	ldr	r1, [pc, #68]	; (398d0 <preempt_ticker_start+0x178>)
   3988a:	4812      	ldr	r0, [pc, #72]	; (398d4 <preempt_ticker_start+0x17c>)
   3988c:	f240 3357 	movw	r3, #855	; 0x357
   39890:	f008 fe9a 	bl	425c8 <assert_print>
   39894:	4040      	eors	r0, r0
   39896:	f380 8811 	msr	BASEPRI, r0
   3989a:	f04f 0003 	mov.w	r0, #3
   3989e:	df02      	svc	2
   398a0:	e78c      	b.n	397bc <preempt_ticker_start+0x64>
   398a2:	bf00      	nop
   398a4:	20003b16 	.word	0x20003b16
   398a8:	20003b15 	.word	0x20003b15
   398ac:	2000298c 	.word	0x2000298c
   398b0:	20003b13 	.word	0x20003b13
   398b4:	20003b14 	.word	0x20003b14
   398b8:	000395d9 	.word	0x000395d9
   398bc:	000396d9 	.word	0x000396d9
   398c0:	20003b11 	.word	0x20003b11
   398c4:	20003b12 	.word	0x20003b12
   398c8:	0003967d 	.word	0x0003967d
   398cc:	00049f10 	.word	0x00049f10
   398d0:	00049b20 	.word	0x00049b20
   398d4:	000497b0 	.word	0x000497b0

000398d8 <preempt>:

static void preempt(void *param)
{
   398d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	uint8_t idx;
	int err;

	/* No event to abort */
	if (!event.curr.abort_cb || !event.curr.param) {
   398da:	4e4b      	ldr	r6, [pc, #300]	; (39a08 <preempt+0x130>)
   398dc:	68b3      	ldr	r3, [r6, #8]
{
   398de:	b089      	sub	sp, #36	; 0x24
	if (!event.curr.abort_cb || !event.curr.param) {
   398e0:	b15b      	cbz	r3, 398fa <preempt+0x22>
   398e2:	6833      	ldr	r3, [r6, #0]
   398e4:	b14b      	cbz	r3, 398fa <preempt+0x22>
		return;
	}

	/* Check if any prepare in pipeline */
	idx = UINT8_MAX;
   398e6:	23ff      	movs	r3, #255	; 0xff
   398e8:	4605      	mov	r5, r0
	next = ull_prepare_dequeue_iter(&idx);
   398ea:	f10d 000a 	add.w	r0, sp, #10
	idx = UINT8_MAX;
   398ee:	f88d 300a 	strb.w	r3, [sp, #10]
	next = ull_prepare_dequeue_iter(&idx);
   398f2:	f7f9 ff55 	bl	337a0 <ull_prepare_dequeue_iter>
	if (!next) {
   398f6:	4602      	mov	r2, r0
   398f8:	b930      	cbnz	r0, 39908 <preempt+0x30>
		iter = resume_enqueue(resume_cb);
		LL_ASSERT(iter);
	} else {
		LL_ASSERT(err == -ECANCELED);
	}
}
   398fa:	b009      	add	sp, #36	; 0x24
   398fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = ull_prepare_dequeue_iter(&idx);
   398fe:	f7f9 ff4f 	bl	337a0 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   39902:	4602      	mov	r2, r0
   39904:	2800      	cmp	r0, #0
   39906:	d0f8      	beq.n	398fa <preempt+0x22>
   39908:	7f11      	ldrb	r1, [r2, #28]
   3990a:	f011 0403 	ands.w	r4, r1, #3
		next = ull_prepare_dequeue_iter(&idx);
   3990e:	f10d 000a 	add.w	r0, sp, #10
	while (next && (next->is_aborted || next->is_resume)) {
   39912:	d1f4      	bne.n	398fe <preempt+0x26>
	if (next != param) {
   39914:	4295      	cmp	r5, r2
   39916:	d126      	bne.n	39966 <preempt+0x8e>
	err = event.curr.is_abort_cb(next->prepare_param.param,
   39918:	6873      	ldr	r3, [r6, #4]
   3991a:	6831      	ldr	r1, [r6, #0]
   3991c:	68e8      	ldr	r0, [r5, #12]
   3991e:	aa03      	add	r2, sp, #12
   39920:	4798      	blx	r3
	if (!err) {
   39922:	4607      	mov	r7, r0
   39924:	b1b0      	cbz	r0, 39954 <preempt+0x7c>
	event.curr.abort_cb(NULL, event.curr.param);
   39926:	68b3      	ldr	r3, [r6, #8]
   39928:	6831      	ldr	r1, [r6, #0]
   3992a:	4620      	mov	r0, r4
   3992c:	4798      	blx	r3
	if (err == -EAGAIN) {
   3992e:	f117 0f0b 	cmn.w	r7, #11
   39932:	d02d      	beq.n	39990 <preempt+0xb8>
		LL_ASSERT(err == -ECANCELED);
   39934:	378c      	adds	r7, #140	; 0x8c
   39936:	d0e0      	beq.n	398fa <preempt+0x22>
   39938:	4a34      	ldr	r2, [pc, #208]	; (39a0c <preempt+0x134>)
   3993a:	4935      	ldr	r1, [pc, #212]	; (39a10 <preempt+0x138>)
   3993c:	4835      	ldr	r0, [pc, #212]	; (39a14 <preempt+0x13c>)
   3993e:	f240 4306 	movw	r3, #1030	; 0x406
   39942:	f008 fe41 	bl	425c8 <assert_print>
   39946:	4040      	eors	r0, r0
   39948:	f380 8811 	msr	BASEPRI, r0
   3994c:	f04f 0003 	mov.w	r0, #3
   39950:	df02      	svc	2
   39952:	e7d2      	b.n	398fa <preempt+0x22>
		next->is_aborted = 1;
   39954:	7f2b      	ldrb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   39956:	69aa      	ldr	r2, [r5, #24]
   39958:	68e9      	ldr	r1, [r5, #12]
		next->is_aborted = 1;
   3995a:	f043 0302 	orr.w	r3, r3, #2
   3995e:	772b      	strb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   39960:	4628      	mov	r0, r5
   39962:	4790      	blx	r2
		return;
   39964:	e7c9      	b.n	398fa <preempt+0x22>
		ret = preempt_ticker_start(next, NULL, next);
   39966:	4621      	mov	r1, r4
   39968:	4610      	mov	r0, r2
   3996a:	f7ff fef5 	bl	39758 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   3996e:	f030 0302 	bics.w	r3, r0, #2
   39972:	d0c2      	beq.n	398fa <preempt+0x22>
   39974:	4a25      	ldr	r2, [pc, #148]	; (39a0c <preempt+0x134>)
   39976:	4928      	ldr	r1, [pc, #160]	; (39a18 <preempt+0x140>)
   39978:	4826      	ldr	r0, [pc, #152]	; (39a14 <preempt+0x13c>)
   3997a:	f240 33d2 	movw	r3, #978	; 0x3d2
   3997e:	f008 fe23 	bl	425c8 <assert_print>
   39982:	4040      	eors	r0, r0
   39984:	f380 8811 	msr	BASEPRI, r0
   39988:	f04f 0003 	mov.w	r0, #3
   3998c:	df02      	svc	2
   3998e:	e7b4      	b.n	398fa <preempt+0x22>
		iter_idx = UINT8_MAX;
   39990:	24ff      	movs	r4, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   39992:	f10d 000b 	add.w	r0, sp, #11
		iter_idx = UINT8_MAX;
   39996:	f88d 400b 	strb.w	r4, [sp, #11]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   3999a:	f7f9 ff01 	bl	337a0 <ull_prepare_dequeue_iter>
		while (iter) {
   3999e:	b928      	cbnz	r0, 399ac <preempt+0xd4>
   399a0:	e013      	b.n	399ca <preempt+0xf2>
			iter = ull_prepare_dequeue_iter(&iter_idx);
   399a2:	f10d 000b 	add.w	r0, sp, #11
   399a6:	f7f9 fefb 	bl	337a0 <ull_prepare_dequeue_iter>
		while (iter) {
   399aa:	b170      	cbz	r0, 399ca <preempt+0xf2>
			if (!iter->is_aborted &&
   399ac:	7f03      	ldrb	r3, [r0, #28]
   399ae:	079a      	lsls	r2, r3, #30
   399b0:	d4f7      	bmi.n	399a2 <preempt+0xca>
			    event.curr.param == iter->prepare_param.param) {
   399b2:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   399b4:	6831      	ldr	r1, [r6, #0]
   399b6:	4291      	cmp	r1, r2
   399b8:	d1f3      	bne.n	399a2 <preempt+0xca>
				iter->is_aborted = 1;
   399ba:	f043 0302 	orr.w	r3, r3, #2
   399be:	7703      	strb	r3, [r0, #28]
				iter->abort_cb(&iter->prepare_param,
   399c0:	6983      	ldr	r3, [r0, #24]
   399c2:	4798      	blx	r3
				iter_idx = UINT8_MAX;
   399c4:	f88d 400b 	strb.w	r4, [sp, #11]
   399c8:	e7eb      	b.n	399a2 <preempt+0xca>
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   399ca:	2301      	movs	r3, #1
	prepare_param.param = event.curr.param;
   399cc:	6830      	ldr	r0, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   399ce:	9300      	str	r3, [sp, #0]
	struct lll_prepare_param prepare_param = {0};
   399d0:	2100      	movs	r1, #0
   399d2:	e9cd 1104 	strd	r1, r1, [sp, #16]
   399d6:	9106      	str	r1, [sp, #24]
	prepare_param.param = event.curr.param;
   399d8:	9007      	str	r0, [sp, #28]
	event.curr.param = NULL;
   399da:	6031      	str	r1, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   399dc:	9b03      	ldr	r3, [sp, #12]
   399de:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   399e2:	aa04      	add	r2, sp, #16
   399e4:	f7f9 fe9c 	bl	33720 <ull_prepare_enqueue>
		LL_ASSERT(iter);
   399e8:	2800      	cmp	r0, #0
   399ea:	d186      	bne.n	398fa <preempt+0x22>
   399ec:	4a07      	ldr	r2, [pc, #28]	; (39a0c <preempt+0x134>)
   399ee:	490b      	ldr	r1, [pc, #44]	; (39a1c <preempt+0x144>)
   399f0:	4808      	ldr	r0, [pc, #32]	; (39a14 <preempt+0x13c>)
   399f2:	f240 4304 	movw	r3, #1028	; 0x404
   399f6:	f008 fde7 	bl	425c8 <assert_print>
   399fa:	4040      	eors	r0, r0
   399fc:	f380 8811 	msr	BASEPRI, r0
   39a00:	f04f 0003 	mov.w	r0, #3
   39a04:	df02      	svc	2
   39a06:	e778      	b.n	398fa <preempt+0x22>
   39a08:	20002990 	.word	0x20002990
   39a0c:	00049f10 	.word	0x00049f10
   39a10:	00049fe8 	.word	0x00049fe8
   39a14:	000497b0 	.word	0x000497b0
   39a18:	00049b20 	.word	0x00049b20
   39a1c:	00049fe0 	.word	0x00049fe0

00039a20 <lll_init>:
{
   39a20:	b510      	push	{r4, lr}
   39a22:	4815      	ldr	r0, [pc, #84]	; (39a78 <lll_init+0x58>)
   39a24:	f00e f978 	bl	47d18 <z_device_is_ready>
	if (!device_is_ready(dev_entropy)) {
   39a28:	b310      	cbz	r0, 39a70 <lll_init+0x50>
	event.curr.abort_cb = NULL;
   39a2a:	4b14      	ldr	r3, [pc, #80]	; (39a7c <lll_init+0x5c>)
   39a2c:	2400      	movs	r4, #0
   39a2e:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   39a30:	f000 faf6 	bl	3a020 <lll_clock_init>
	if (err < 0) {
   39a34:	2800      	cmp	r0, #0
   39a36:	db1a      	blt.n	39a6e <lll_init+0x4e>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   39a38:	4621      	mov	r1, r4
   39a3a:	2001      	movs	r0, #1
   39a3c:	4622      	mov	r2, r4
   39a3e:	f7f0 fc8b 	bl	2a358 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   39a42:	4622      	mov	r2, r4
   39a44:	200b      	movs	r0, #11
   39a46:	2101      	movs	r1, #1
   39a48:	f7f0 fc86 	bl	2a358 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   39a4c:	4622      	mov	r2, r4
   39a4e:	4621      	mov	r1, r4
   39a50:	2018      	movs	r0, #24
   39a52:	f7f0 fc81 	bl	2a358 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   39a56:	2001      	movs	r0, #1
   39a58:	f7f0 fc4e 	bl	2a2f8 <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   39a5c:	200b      	movs	r0, #11
   39a5e:	f7f0 fc4b 	bl	2a2f8 <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   39a62:	2018      	movs	r0, #24
   39a64:	f7f0 fc48 	bl	2a2f8 <arch_irq_enable>
	radio_setup();
   39a68:	f001 fe10 	bl	3b68c <radio_setup>
	return 0;
   39a6c:	4620      	mov	r0, r4
}
   39a6e:	bd10      	pop	{r4, pc}
		return -ENODEV;
   39a70:	f06f 0012 	mvn.w	r0, #18
}
   39a74:	bd10      	pop	{r4, pc}
   39a76:	bf00      	nop
   39a78:	00048aa8 	.word	0x00048aa8
   39a7c:	20002990 	.word	0x20002990

00039a80 <lll_deinit>:
{
   39a80:	b508      	push	{r3, lr}
	err = lll_clock_deinit();
   39a82:	f000 fadd 	bl	3a040 <lll_clock_deinit>
	if (err < 0) {
   39a86:	2800      	cmp	r0, #0
   39a88:	db09      	blt.n	39a9e <lll_deinit+0x1e>
	irq_disable(RADIO_IRQn);
   39a8a:	2001      	movs	r0, #1
   39a8c:	f7f0 fc42 	bl	2a314 <arch_irq_disable>
	irq_disable(RTC0_IRQn);
   39a90:	200b      	movs	r0, #11
   39a92:	f7f0 fc3f 	bl	2a314 <arch_irq_disable>
	irq_disable(HAL_SWI_RADIO_IRQ);
   39a96:	2018      	movs	r0, #24
   39a98:	f7f0 fc3c 	bl	2a314 <arch_irq_disable>
	return 0;
   39a9c:	2000      	movs	r0, #0
}
   39a9e:	bd08      	pop	{r3, pc}

00039aa0 <lll_csrand_get>:
{
   39aa0:	4603      	mov	r3, r0
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   39aa2:	4803      	ldr	r0, [pc, #12]	; (39ab0 <lll_csrand_get+0x10>)
   39aa4:	b28a      	uxth	r2, r1
   39aa6:	4619      	mov	r1, r3
   39aa8:	6883      	ldr	r3, [r0, #8]
   39aaa:	681b      	ldr	r3, [r3, #0]
   39aac:	4718      	bx	r3
   39aae:	bf00      	nop
   39ab0:	00048aa8 	.word	0x00048aa8

00039ab4 <lll_csrand_isr_get>:
{
   39ab4:	b430      	push	{r4, r5}
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   39ab6:	4d07      	ldr	r5, [pc, #28]	; (39ad4 <lll_csrand_isr_get+0x20>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   39ab8:	68ab      	ldr	r3, [r5, #8]
   39aba:	685c      	ldr	r4, [r3, #4]
   39abc:	b134      	cbz	r4, 39acc <lll_csrand_isr_get+0x18>
   39abe:	b28a      	uxth	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   39ac0:	46a4      	mov	ip, r4
   39ac2:	4601      	mov	r1, r0
   39ac4:	2300      	movs	r3, #0
   39ac6:	4628      	mov	r0, r5
}
   39ac8:	bc30      	pop	{r4, r5}
   39aca:	4760      	bx	ip
   39acc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   39ad0:	bc30      	pop	{r4, r5}
   39ad2:	4770      	bx	lr
   39ad4:	00048aa8 	.word	0x00048aa8

00039ad8 <lll_rand_isr_get>:
int lll_rand_isr_get(void *buf, size_t len)
   39ad8:	b430      	push	{r4, r5}
   39ada:	4d07      	ldr	r5, [pc, #28]	; (39af8 <lll_rand_isr_get+0x20>)
   39adc:	68ab      	ldr	r3, [r5, #8]
   39ade:	685c      	ldr	r4, [r3, #4]
   39ae0:	b134      	cbz	r4, 39af0 <lll_rand_isr_get+0x18>
   39ae2:	b28a      	uxth	r2, r1
   39ae4:	46a4      	mov	ip, r4
   39ae6:	4601      	mov	r1, r0
   39ae8:	2300      	movs	r3, #0
   39aea:	4628      	mov	r0, r5
   39aec:	bc30      	pop	{r4, r5}
   39aee:	4760      	bx	ip
   39af0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   39af4:	bc30      	pop	{r4, r5}
   39af6:	4770      	bx	lr
   39af8:	00048aa8 	.word	0x00048aa8

00039afc <lll_reset>:
}
   39afc:	2000      	movs	r0, #0
   39afe:	4770      	bx	lr

00039b00 <lll_disable>:
{
   39b00:	b530      	push	{r4, r5, lr}
	if (!param || (param == event.curr.param)) {
   39b02:	4604      	mov	r4, r0
{
   39b04:	b083      	sub	sp, #12
	if (!param || (param == event.curr.param)) {
   39b06:	b378      	cbz	r0, 39b68 <lll_disable+0x68>
   39b08:	4b23      	ldr	r3, [pc, #140]	; (39b98 <lll_disable+0x98>)
   39b0a:	681a      	ldr	r2, [r3, #0]
   39b0c:	4282      	cmp	r2, r0
   39b0e:	d025      	beq.n	39b5c <lll_disable+0x5c>
		idx = UINT8_MAX;
   39b10:	25ff      	movs	r5, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   39b12:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   39b16:	f88d 5007 	strb.w	r5, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   39b1a:	f7f9 fe41 	bl	337a0 <ull_prepare_dequeue_iter>
		while (next) {
   39b1e:	b938      	cbnz	r0, 39b30 <lll_disable+0x30>
   39b20:	e01a      	b.n	39b58 <lll_disable+0x58>
			    (!param || (param == next->prepare_param.param))) {
   39b22:	42a1      	cmp	r1, r4
   39b24:	d00a      	beq.n	39b3c <lll_disable+0x3c>
			next = ull_prepare_dequeue_iter(&idx);
   39b26:	f10d 0007 	add.w	r0, sp, #7
   39b2a:	f7f9 fe39 	bl	337a0 <ull_prepare_dequeue_iter>
		while (next) {
   39b2e:	b198      	cbz	r0, 39b58 <lll_disable+0x58>
			if (!next->is_aborted &&
   39b30:	7f03      	ldrb	r3, [r0, #28]
   39b32:	079b      	lsls	r3, r3, #30
   39b34:	d4f7      	bmi.n	39b26 <lll_disable+0x26>
			    (!param || (param == next->prepare_param.param))) {
   39b36:	68c1      	ldr	r1, [r0, #12]
			if (!next->is_aborted &&
   39b38:	2c00      	cmp	r4, #0
   39b3a:	d1f2      	bne.n	39b22 <lll_disable+0x22>
				next->is_aborted = 1;
   39b3c:	7f03      	ldrb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   39b3e:	6982      	ldr	r2, [r0, #24]
				next->is_aborted = 1;
   39b40:	f043 0302 	orr.w	r3, r3, #2
   39b44:	7703      	strb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   39b46:	4790      	blx	r2
			next = ull_prepare_dequeue_iter(&idx);
   39b48:	f10d 0007 	add.w	r0, sp, #7
				idx = UINT8_MAX;
   39b4c:	f88d 5007 	strb.w	r5, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
   39b50:	f7f9 fe26 	bl	337a0 <ull_prepare_dequeue_iter>
		while (next) {
   39b54:	2800      	cmp	r0, #0
   39b56:	d1eb      	bne.n	39b30 <lll_disable+0x30>
}
   39b58:	b003      	add	sp, #12
   39b5a:	bd30      	pop	{r4, r5, pc}
		if (event.curr.abort_cb && event.curr.param) {
   39b5c:	689b      	ldr	r3, [r3, #8]
   39b5e:	b16b      	cbz	r3, 39b7c <lll_disable+0x7c>
   39b60:	4601      	mov	r1, r0
			event.curr.abort_cb(NULL, event.curr.param);
   39b62:	2000      	movs	r0, #0
   39b64:	4798      	blx	r3
   39b66:	e7d3      	b.n	39b10 <lll_disable+0x10>
		if (event.curr.abort_cb && event.curr.param) {
   39b68:	4a0b      	ldr	r2, [pc, #44]	; (39b98 <lll_disable+0x98>)
   39b6a:	6893      	ldr	r3, [r2, #8]
   39b6c:	2b00      	cmp	r3, #0
   39b6e:	d0cf      	beq.n	39b10 <lll_disable+0x10>
   39b70:	6811      	ldr	r1, [r2, #0]
   39b72:	2900      	cmp	r1, #0
   39b74:	d0cc      	beq.n	39b10 <lll_disable+0x10>
			event.curr.abort_cb(NULL, event.curr.param);
   39b76:	2000      	movs	r0, #0
   39b78:	4798      	blx	r3
   39b7a:	e7c9      	b.n	39b10 <lll_disable+0x10>
			LL_ASSERT(!param);
   39b7c:	4a07      	ldr	r2, [pc, #28]	; (39b9c <lll_disable+0x9c>)
   39b7e:	4908      	ldr	r1, [pc, #32]	; (39ba0 <lll_disable+0xa0>)
   39b80:	4808      	ldr	r0, [pc, #32]	; (39ba4 <lll_disable+0xa4>)
   39b82:	f240 1313 	movw	r3, #275	; 0x113
   39b86:	f008 fd1f 	bl	425c8 <assert_print>
   39b8a:	4040      	eors	r0, r0
   39b8c:	f380 8811 	msr	BASEPRI, r0
   39b90:	f04f 0003 	mov.w	r0, #3
   39b94:	df02      	svc	2
   39b96:	e7bb      	b.n	39b10 <lll_disable+0x10>
   39b98:	20002990 	.word	0x20002990
   39b9c:	00049f10 	.word	0x00049f10
   39ba0:	00049ff4 	.word	0x00049ff4
   39ba4:	000497b0 	.word	0x000497b0

00039ba8 <lll_prepare_done>:
}
   39ba8:	2000      	movs	r0, #0
   39baa:	4770      	bx	lr

00039bac <lll_done>:
{
   39bac:	b538      	push	{r3, r4, r5, lr}
   39bae:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   39bb0:	f7f9 fde8 	bl	33784 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   39bb4:	b154      	cbz	r4, 39bcc <lll_done+0x20>
   39bb6:	b310      	cbz	r0, 39bfe <lll_done+0x52>
			ull = HDR_LLL2ULL(param);
   39bb8:	6824      	ldr	r4, [r4, #0]
	ull_prepare_dequeue(TICKER_USER_ID_LLL);
   39bba:	2000      	movs	r0, #0
   39bbc:	f7f9 fe10 	bl	337e0 <ull_prepare_dequeue>
	evdone = ull_event_done(ull);
   39bc0:	4620      	mov	r0, r4
   39bc2:	f7f9 fe81 	bl	338c8 <ull_event_done>
	LL_ASSERT(evdone);
   39bc6:	b158      	cbz	r0, 39be0 <lll_done+0x34>
}
   39bc8:	2000      	movs	r0, #0
   39bca:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(event.curr.abort_cb);
   39bcc:	4d1a      	ldr	r5, [pc, #104]	; (39c38 <lll_done+0x8c>)
   39bce:	68ab      	ldr	r3, [r5, #8]
   39bd0:	b31b      	cbz	r3, 39c1a <lll_done+0x6e>
		param = event.curr.param;
   39bd2:	682c      	ldr	r4, [r5, #0]
		event.curr.abort_cb = NULL;
   39bd4:	2300      	movs	r3, #0
   39bd6:	60ab      	str	r3, [r5, #8]
		event.curr.param = NULL;
   39bd8:	602b      	str	r3, [r5, #0]
		if (param) {
   39bda:	2c00      	cmp	r4, #0
   39bdc:	d1ec      	bne.n	39bb8 <lll_done+0xc>
   39bde:	e7ec      	b.n	39bba <lll_done+0xe>
	LL_ASSERT(evdone);
   39be0:	4a16      	ldr	r2, [pc, #88]	; (39c3c <lll_done+0x90>)
   39be2:	4917      	ldr	r1, [pc, #92]	; (39c40 <lll_done+0x94>)
   39be4:	4817      	ldr	r0, [pc, #92]	; (39c44 <lll_done+0x98>)
   39be6:	f44f 73c2 	mov.w	r3, #388	; 0x184
   39bea:	f008 fced 	bl	425c8 <assert_print>
   39bee:	4040      	eors	r0, r0
   39bf0:	f380 8811 	msr	BASEPRI, r0
   39bf4:	f04f 0003 	mov.w	r0, #3
   39bf8:	df02      	svc	2
}
   39bfa:	2000      	movs	r0, #0
   39bfc:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(!param || next);
   39bfe:	4a0f      	ldr	r2, [pc, #60]	; (39c3c <lll_done+0x90>)
   39c00:	4911      	ldr	r1, [pc, #68]	; (39c48 <lll_done+0x9c>)
   39c02:	4810      	ldr	r0, [pc, #64]	; (39c44 <lll_done+0x98>)
   39c04:	f240 134d 	movw	r3, #333	; 0x14d
   39c08:	f008 fcde 	bl	425c8 <assert_print>
   39c0c:	4040      	eors	r0, r0
   39c0e:	f380 8811 	msr	BASEPRI, r0
   39c12:	f04f 0003 	mov.w	r0, #3
   39c16:	df02      	svc	2
		ull = HDR_LLL2ULL(param);
   39c18:	e7ce      	b.n	39bb8 <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   39c1a:	4a08      	ldr	r2, [pc, #32]	; (39c3c <lll_done+0x90>)
   39c1c:	490b      	ldr	r1, [pc, #44]	; (39c4c <lll_done+0xa0>)
   39c1e:	4809      	ldr	r0, [pc, #36]	; (39c44 <lll_done+0x98>)
   39c20:	f44f 73a9 	mov.w	r3, #338	; 0x152
   39c24:	f008 fcd0 	bl	425c8 <assert_print>
   39c28:	4040      	eors	r0, r0
   39c2a:	f380 8811 	msr	BASEPRI, r0
   39c2e:	f04f 0003 	mov.w	r0, #3
   39c32:	df02      	svc	2
   39c34:	e7cd      	b.n	39bd2 <lll_done+0x26>
   39c36:	bf00      	nop
   39c38:	20002990 	.word	0x20002990
   39c3c:	00049f10 	.word	0x00049f10
   39c40:	0004a020 	.word	0x0004a020
   39c44:	000497b0 	.word	0x000497b0
   39c48:	00049ffc 	.word	0x00049ffc
   39c4c:	0004a00c 	.word	0x0004a00c

00039c50 <lll_is_abort_cb>:
}
   39c50:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   39c54:	4770      	bx	lr
   39c56:	bf00      	nop

00039c58 <lll_event_offset_get>:
		return MAX(ull->ticks_active_to_start,
   39c58:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
	} else if (ull->ticks_prepare_to_start & XON_BITMASK) {
   39c5c:	2a00      	cmp	r2, #0
   39c5e:	db04      	blt.n	39c6a <lll_event_offset_get+0x12>
		return MAX(ull->ticks_active_to_start,
   39c60:	429a      	cmp	r2, r3
   39c62:	bf38      	it	cc
   39c64:	461a      	movcc	r2, r3
   39c66:	4610      	mov	r0, r2
}
   39c68:	4770      	bx	lr
		return MAX(ull->ticks_active_to_start,
   39c6a:	68c0      	ldr	r0, [r0, #12]
   39c6c:	4298      	cmp	r0, r3
   39c6e:	bf38      	it	cc
   39c70:	4618      	movcc	r0, r3
   39c72:	4770      	bx	lr

00039c74 <lll_preempt_calc>:
{
   39c74:	b510      	push	{r4, lr}
   39c76:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   39c78:	f7f7 fc68 	bl	3154c <ticker_ticks_now_get>
	diff = ticks_now - ticks_at_event;
   39c7c:	1b02      	subs	r2, r0, r4
	if (diff & BIT(HAL_TICKER_CNTR_MSBIT)) {
   39c7e:	0213      	lsls	r3, r2, #8
   39c80:	d405      	bmi.n	39c8e <lll_preempt_calc+0x1a>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   39c82:	1cd0      	adds	r0, r2, #3
	if (diff > HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) {
   39c84:	2818      	cmp	r0, #24
   39c86:	bf94      	ite	ls
   39c88:	2000      	movls	r0, #0
   39c8a:	2001      	movhi	r0, #1
}
   39c8c:	bd10      	pop	{r4, pc}
		return 0;
   39c8e:	2000      	movs	r0, #0
}
   39c90:	bd10      	pop	{r4, pc}
   39c92:	bf00      	nop

00039c94 <lll_chan_set>:
	switch (chan) {
   39c94:	2826      	cmp	r0, #38	; 0x26
{
   39c96:	b510      	push	{r4, lr}
   39c98:	4604      	mov	r4, r0
	switch (chan) {
   39c9a:	d01c      	beq.n	39cd6 <lll_chan_set+0x42>
   39c9c:	2827      	cmp	r0, #39	; 0x27
   39c9e:	d012      	beq.n	39cc6 <lll_chan_set+0x32>
   39ca0:	2825      	cmp	r0, #37	; 0x25
   39ca2:	d008      	beq.n	39cb6 <lll_chan_set+0x22>
		if (chan < 11) {
   39ca4:	280a      	cmp	r0, #10
   39ca6:	d91e      	bls.n	39ce6 <lll_chan_set+0x52>
		} else if (chan < 40) {
   39ca8:	2827      	cmp	r0, #39	; 0x27
   39caa:	d821      	bhi.n	39cf0 <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   39cac:	3003      	adds	r0, #3
   39cae:	0040      	lsls	r0, r0, #1
   39cb0:	f001 fd40 	bl	3b734 <radio_freq_chan_set>
   39cb4:	e002      	b.n	39cbc <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   39cb6:	2002      	movs	r0, #2
   39cb8:	f001 fd3c 	bl	3b734 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   39cbc:	4620      	mov	r0, r4
}
   39cbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   39cc2:	f001 bd3d 	b.w	3b740 <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   39cc6:	2050      	movs	r0, #80	; 0x50
   39cc8:	f001 fd34 	bl	3b734 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   39ccc:	4620      	mov	r0, r4
}
   39cce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   39cd2:	f001 bd35 	b.w	3b740 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   39cd6:	201a      	movs	r0, #26
   39cd8:	f001 fd2c 	bl	3b734 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   39cdc:	4620      	mov	r0, r4
}
   39cde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   39ce2:	f001 bd2d 	b.w	3b740 <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   39ce6:	3002      	adds	r0, #2
   39ce8:	0040      	lsls	r0, r0, #1
   39cea:	f001 fd23 	bl	3b734 <radio_freq_chan_set>
   39cee:	e7e5      	b.n	39cbc <lll_chan_set+0x28>
			LL_ASSERT(0);
   39cf0:	4a06      	ldr	r2, [pc, #24]	; (39d0c <lll_chan_set+0x78>)
   39cf2:	4907      	ldr	r1, [pc, #28]	; (39d10 <lll_chan_set+0x7c>)
   39cf4:	4807      	ldr	r0, [pc, #28]	; (39d14 <lll_chan_set+0x80>)
   39cf6:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
   39cfa:	f008 fc65 	bl	425c8 <assert_print>
   39cfe:	4040      	eors	r0, r0
   39d00:	f380 8811 	msr	BASEPRI, r0
   39d04:	f04f 0003 	mov.w	r0, #3
   39d08:	df02      	svc	2
   39d0a:	e7d7      	b.n	39cbc <lll_chan_set+0x28>
   39d0c:	00049f10 	.word	0x00049f10
   39d10:	00049810 	.word	0x00049810
   39d14:	000497b0 	.word	0x000497b0

00039d18 <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   39d18:	f001 bd70 	b.w	3b7fc <radio_rx_ready_delay_get>

00039d1c <lll_isr_tx_status_reset>:
{
   39d1c:	b508      	push	{r3, lr}
	radio_status_reset();
   39d1e:	f001 fd8f 	bl	3b840 <radio_status_reset>
}
   39d22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   39d26:	f001 bebd 	b.w	3baa4 <radio_tmr_status_reset>
   39d2a:	bf00      	nop

00039d2c <lll_isr_rx_status_reset>:
{
   39d2c:	b508      	push	{r3, lr}
	radio_status_reset();
   39d2e:	f001 fd87 	bl	3b840 <radio_status_reset>
	radio_tmr_status_reset();
   39d32:	f001 feb7 	bl	3baa4 <radio_tmr_status_reset>
}
   39d36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   39d3a:	f001 be7f 	b.w	3ba3c <radio_rssi_status_reset>
   39d3e:	bf00      	nop

00039d40 <lll_isr_status_reset>:
{
   39d40:	b508      	push	{r3, lr}
	radio_status_reset();
   39d42:	f001 fd7d 	bl	3b840 <radio_status_reset>
	radio_tmr_status_reset();
   39d46:	f001 fead 	bl	3baa4 <radio_tmr_status_reset>
	radio_filter_status_reset();
   39d4a:	f001 fe93 	bl	3ba74 <radio_filter_status_reset>
}
   39d4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   39d52:	f001 be73 	b.w	3ba3c <radio_rssi_status_reset>
   39d56:	bf00      	nop

00039d58 <lll_isr_cleanup>:
{
   39d58:	b508      	push	{r3, lr}
   39d5a:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   39d5c:	4817      	ldr	r0, [pc, #92]	; (39dbc <lll_isr_cleanup+0x64>)
   39d5e:	f001 fc75 	bl	3b64c <radio_isr_set>
	if (!radio_is_idle()) {
   39d62:	f001 fd8d 	bl	3b880 <radio_is_idle>
   39d66:	b160      	cbz	r0, 39d82 <lll_isr_cleanup+0x2a>
	radio_tmr_stop();
   39d68:	f001 ff40 	bl	3bbec <radio_tmr_stop>
	radio_stop();
   39d6c:	f001 fcca 	bl	3b704 <radio_stop>
	err = lll_hfclock_off();
   39d70:	f000 f9a2 	bl	3a0b8 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   39d74:	2800      	cmp	r0, #0
   39d76:	db0e      	blt.n	39d96 <lll_isr_cleanup+0x3e>
}
   39d78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   39d7c:	2000      	movs	r0, #0
   39d7e:	f7ff bf15 	b.w	39bac <lll_done>
		radio_disable();
   39d82:	f001 fd49 	bl	3b818 <radio_disable>
	radio_tmr_stop();
   39d86:	f001 ff31 	bl	3bbec <radio_tmr_stop>
	radio_stop();
   39d8a:	f001 fcbb 	bl	3b704 <radio_stop>
	err = lll_hfclock_off();
   39d8e:	f000 f993 	bl	3a0b8 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   39d92:	2800      	cmp	r0, #0
   39d94:	daf0      	bge.n	39d78 <lll_isr_cleanup+0x20>
   39d96:	4a0a      	ldr	r2, [pc, #40]	; (39dc0 <lll_isr_cleanup+0x68>)
   39d98:	490a      	ldr	r1, [pc, #40]	; (39dc4 <lll_isr_cleanup+0x6c>)
   39d9a:	480b      	ldr	r0, [pc, #44]	; (39dc8 <lll_isr_cleanup+0x70>)
   39d9c:	f44f 7317 	mov.w	r3, #604	; 0x25c
   39da0:	f008 fc12 	bl	425c8 <assert_print>
   39da4:	4040      	eors	r0, r0
   39da6:	f380 8811 	msr	BASEPRI, r0
   39daa:	f04f 0003 	mov.w	r0, #3
   39dae:	df02      	svc	2
	lll_done(NULL);
   39db0:	2000      	movs	r0, #0
}
   39db2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   39db6:	f7ff bef9 	b.w	39bac <lll_done>
   39dba:	bf00      	nop
   39dbc:	000396d5 	.word	0x000396d5
   39dc0:	00049f10 	.word	0x00049f10
   39dc4:	0004a028 	.word	0x0004a028
   39dc8:	000497b0 	.word	0x000497b0

00039dcc <lll_isr_abort>:
{
   39dcc:	b510      	push	{r4, lr}
   39dce:	4604      	mov	r4, r0
	radio_status_reset();
   39dd0:	f001 fd36 	bl	3b840 <radio_status_reset>
	radio_tmr_status_reset();
   39dd4:	f001 fe66 	bl	3baa4 <radio_tmr_status_reset>
	radio_filter_status_reset();
   39dd8:	f001 fe4c 	bl	3ba74 <radio_filter_status_reset>
	radio_rssi_status_reset();
   39ddc:	f001 fe2e 	bl	3ba3c <radio_rssi_status_reset>
	lll_isr_cleanup(param);
   39de0:	4620      	mov	r0, r4
}
   39de2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   39de6:	f7ff bfb7 	b.w	39d58 <lll_isr_cleanup>
   39dea:	bf00      	nop

00039dec <lll_isr_early_abort>:
{
   39dec:	b508      	push	{r3, lr}
   39dee:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   39df0:	4813      	ldr	r0, [pc, #76]	; (39e40 <lll_isr_early_abort+0x54>)
   39df2:	f001 fc2b 	bl	3b64c <radio_isr_set>
	if (!radio_is_idle()) {
   39df6:	f001 fd43 	bl	3b880 <radio_is_idle>
   39dfa:	b140      	cbz	r0, 39e0e <lll_isr_early_abort+0x22>
	err = lll_hfclock_off();
   39dfc:	f000 f95c 	bl	3a0b8 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   39e00:	2800      	cmp	r0, #0
   39e02:	db0a      	blt.n	39e1a <lll_isr_early_abort+0x2e>
}
   39e04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   39e08:	2000      	movs	r0, #0
   39e0a:	f7ff becf 	b.w	39bac <lll_done>
		radio_disable();
   39e0e:	f001 fd03 	bl	3b818 <radio_disable>
	err = lll_hfclock_off();
   39e12:	f000 f951 	bl	3a0b8 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   39e16:	2800      	cmp	r0, #0
   39e18:	daf4      	bge.n	39e04 <lll_isr_early_abort+0x18>
   39e1a:	4a0a      	ldr	r2, [pc, #40]	; (39e44 <lll_isr_early_abort+0x58>)
   39e1c:	490a      	ldr	r1, [pc, #40]	; (39e48 <lll_isr_early_abort+0x5c>)
   39e1e:	480b      	ldr	r0, [pc, #44]	; (39e4c <lll_isr_early_abort+0x60>)
   39e20:	f240 236b 	movw	r3, #619	; 0x26b
   39e24:	f008 fbd0 	bl	425c8 <assert_print>
   39e28:	4040      	eors	r0, r0
   39e2a:	f380 8811 	msr	BASEPRI, r0
   39e2e:	f04f 0003 	mov.w	r0, #3
   39e32:	df02      	svc	2
	lll_done(NULL);
   39e34:	2000      	movs	r0, #0
}
   39e36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   39e3a:	f7ff beb7 	b.w	39bac <lll_done>
   39e3e:	bf00      	nop
   39e40:	000396d5 	.word	0x000396d5
   39e44:	00049f10 	.word	0x00049f10
   39e48:	0004a028 	.word	0x0004a028
   39e4c:	000497b0 	.word	0x000497b0

00039e50 <lll_prepare_resolve>:
{
   39e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   39e54:	b084      	sub	sp, #16
   39e56:	4606      	mov	r6, r0
   39e58:	461d      	mov	r5, r3
	p = ull_prepare_dequeue_iter(&idx);
   39e5a:	f10d 000f 	add.w	r0, sp, #15
	idx = UINT8_MAX;
   39e5e:	23ff      	movs	r3, #255	; 0xff
{
   39e60:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
	idx = UINT8_MAX;
   39e64:	f88d 300f 	strb.w	r3, [sp, #15]
{
   39e68:	460f      	mov	r7, r1
   39e6a:	4690      	mov	r8, r2
	p = ull_prepare_dequeue_iter(&idx);
   39e6c:	f7f9 fc98 	bl	337a0 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   39e70:	4604      	mov	r4, r0
   39e72:	b928      	cbnz	r0, 39e80 <lll_prepare_resolve+0x30>
   39e74:	e03b      	b.n	39eee <lll_prepare_resolve+0x9e>
		p = ull_prepare_dequeue_iter(&idx);
   39e76:	f7f9 fc93 	bl	337a0 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   39e7a:	4604      	mov	r4, r0
   39e7c:	2800      	cmp	r0, #0
   39e7e:	d036      	beq.n	39eee <lll_prepare_resolve+0x9e>
   39e80:	f894 c01c 	ldrb.w	ip, [r4, #28]
   39e84:	f01c 0f03 	tst.w	ip, #3
		p = ull_prepare_dequeue_iter(&idx);
   39e88:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   39e8c:	d1f3      	bne.n	39e76 <lll_prepare_resolve+0x26>
	    event.curr.abort_cb ||
   39e8e:	f8df a11c 	ldr.w	sl, [pc, #284]	; 39fac <lll_prepare_resolve+0x15c>
	if ((!is_dequeue && !is_done_sync()) ||
   39e92:	f8da 3008 	ldr.w	r3, [sl, #8]
   39e96:	2b00      	cmp	r3, #0
   39e98:	d130      	bne.n	39efc <lll_prepare_resolve+0xac>
	    (p && is_resume)) {
   39e9a:	f1b9 0f00 	cmp.w	r9, #0
   39e9e:	d16b      	bne.n	39f78 <lll_prepare_resolve+0x128>
	LL_ASSERT(!p || &p->prepare_param == prepare_param);
   39ea0:	42ac      	cmp	r4, r5
   39ea2:	d00c      	beq.n	39ebe <lll_prepare_resolve+0x6e>
   39ea4:	4a42      	ldr	r2, [pc, #264]	; (39fb0 <lll_prepare_resolve+0x160>)
   39ea6:	4943      	ldr	r1, [pc, #268]	; (39fb4 <lll_prepare_resolve+0x164>)
   39ea8:	4843      	ldr	r0, [pc, #268]	; (39fb8 <lll_prepare_resolve+0x168>)
   39eaa:	f240 23da 	movw	r3, #730	; 0x2da
   39eae:	f008 fb8b 	bl	425c8 <assert_print>
   39eb2:	4040      	eors	r0, r0
   39eb4:	f380 8811 	msr	BASEPRI, r0
   39eb8:	f04f 0003 	mov.w	r0, #3
   39ebc:	df02      	svc	2
	event.curr.param = prepare_param->param;
   39ebe:	68eb      	ldr	r3, [r5, #12]
   39ec0:	f8ca 3000 	str.w	r3, [sl]
	event.curr.abort_cb = abort_cb;
   39ec4:	e9ca 6701 	strd	r6, r7, [sl, #4]
	err = prepare_cb(prepare_param);
   39ec8:	4628      	mov	r0, r5
   39eca:	47c0      	blx	r8
   39ecc:	4604      	mov	r4, r0
   39ece:	e003      	b.n	39ed8 <lll_prepare_resolve+0x88>
	} while (p->is_aborted || p->is_resume);
   39ed0:	7f01      	ldrb	r1, [r0, #28]
   39ed2:	f011 0103 	ands.w	r1, r1, #3
   39ed6:	d039      	beq.n	39f4c <lll_prepare_resolve+0xfc>
		p = ull_prepare_dequeue_iter(&idx);
   39ed8:	f10d 000f 	add.w	r0, sp, #15
   39edc:	f7f9 fc60 	bl	337a0 <ull_prepare_dequeue_iter>
   39ee0:	4602      	mov	r2, r0
		if (!p) {
   39ee2:	2800      	cmp	r0, #0
   39ee4:	d1f4      	bne.n	39ed0 <lll_prepare_resolve+0x80>
}
   39ee6:	4620      	mov	r0, r4
   39ee8:	b004      	add	sp, #16
   39eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    event.curr.abort_cb ||
   39eee:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 39fac <lll_prepare_resolve+0x15c>
	if ((!is_dequeue && !is_done_sync()) ||
   39ef2:	f8da 3008 	ldr.w	r3, [sl, #8]
   39ef6:	2b00      	cmp	r3, #0
   39ef8:	d0e1      	beq.n	39ebe <lll_prepare_resolve+0x6e>
{
   39efa:	2400      	movs	r4, #0
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   39efc:	462a      	mov	r2, r5
   39efe:	f8cd 9000 	str.w	r9, [sp]
   39f02:	4643      	mov	r3, r8
   39f04:	4639      	mov	r1, r7
   39f06:	4630      	mov	r0, r6
   39f08:	f7f9 fc0a 	bl	33720 <ull_prepare_enqueue>
		LL_ASSERT(next);
   39f0c:	4602      	mov	r2, r0
   39f0e:	2800      	cmp	r0, #0
   39f10:	d03c      	beq.n	39f8c <lll_prepare_resolve+0x13c>
		if (is_resume) {
   39f12:	f1b9 0f00 	cmp.w	r9, #0
   39f16:	d116      	bne.n	39f46 <lll_prepare_resolve+0xf6>
		ret  = preempt_ticker_start(first, p, next);
   39f18:	2c00      	cmp	r4, #0
   39f1a:	bf14      	ite	ne
   39f1c:	4620      	movne	r0, r4
   39f1e:	4610      	moveq	r0, r2
   39f20:	4621      	mov	r1, r4
   39f22:	f7ff fc19 	bl	39758 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   39f26:	f030 0302 	bics.w	r3, r0, #2
   39f2a:	d00c      	beq.n	39f46 <lll_prepare_resolve+0xf6>
   39f2c:	4a20      	ldr	r2, [pc, #128]	; (39fb0 <lll_prepare_resolve+0x160>)
   39f2e:	4923      	ldr	r1, [pc, #140]	; (39fbc <lll_prepare_resolve+0x16c>)
   39f30:	4821      	ldr	r0, [pc, #132]	; (39fb8 <lll_prepare_resolve+0x168>)
   39f32:	f44f 732d 	mov.w	r3, #692	; 0x2b4
   39f36:	f008 fb47 	bl	425c8 <assert_print>
   39f3a:	4040      	eors	r0, r0
   39f3c:	f380 8811 	msr	BASEPRI, r0
   39f40:	f04f 0003 	mov.w	r0, #3
   39f44:	df02      	svc	2
			return -EINPROGRESS;
   39f46:	f06f 0476 	mvn.w	r4, #118	; 0x76
   39f4a:	e7cc      	b.n	39ee6 <lll_prepare_resolve+0x96>
	ret = preempt_ticker_start(p, NULL, p);
   39f4c:	f7ff fc04 	bl	39758 <preempt_ticker_start>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   39f50:	f030 0302 	bics.w	r3, r0, #2
   39f54:	d0c7      	beq.n	39ee6 <lll_prepare_resolve+0x96>
   39f56:	4a16      	ldr	r2, [pc, #88]	; (39fb0 <lll_prepare_resolve+0x160>)
   39f58:	4918      	ldr	r1, [pc, #96]	; (39fbc <lll_prepare_resolve+0x16c>)
   39f5a:	4817      	ldr	r0, [pc, #92]	; (39fb8 <lll_prepare_resolve+0x168>)
   39f5c:	f240 23f7 	movw	r3, #759	; 0x2f7
   39f60:	f008 fb32 	bl	425c8 <assert_print>
   39f64:	4040      	eors	r0, r0
   39f66:	f380 8811 	msr	BASEPRI, r0
   39f6a:	f04f 0003 	mov.w	r0, #3
   39f6e:	df02      	svc	2
}
   39f70:	4620      	mov	r0, r4
   39f72:	b004      	add	sp, #16
   39f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   39f78:	f8cd 9000 	str.w	r9, [sp]
   39f7c:	4643      	mov	r3, r8
   39f7e:	462a      	mov	r2, r5
   39f80:	4639      	mov	r1, r7
   39f82:	4630      	mov	r0, r6
   39f84:	f7f9 fbcc 	bl	33720 <ull_prepare_enqueue>
		LL_ASSERT(next);
   39f88:	2800      	cmp	r0, #0
   39f8a:	d1dc      	bne.n	39f46 <lll_prepare_resolve+0xf6>
   39f8c:	4a08      	ldr	r2, [pc, #32]	; (39fb0 <lll_prepare_resolve+0x160>)
   39f8e:	490c      	ldr	r1, [pc, #48]	; (39fc0 <lll_prepare_resolve+0x170>)
   39f90:	4809      	ldr	r0, [pc, #36]	; (39fb8 <lll_prepare_resolve+0x168>)
   39f92:	f240 23a7 	movw	r3, #679	; 0x2a7
   39f96:	f008 fb17 	bl	425c8 <assert_print>
   39f9a:	4040      	eors	r0, r0
   39f9c:	f380 8811 	msr	BASEPRI, r0
   39fa0:	f04f 0003 	mov.w	r0, #3
   39fa4:	df02      	svc	2
   39fa6:	2200      	movs	r2, #0
   39fa8:	e7b3      	b.n	39f12 <lll_prepare_resolve+0xc2>
   39faa:	bf00      	nop
   39fac:	20002990 	.word	0x20002990
   39fb0:	00049f10 	.word	0x00049f10
   39fb4:	0004a03c 	.word	0x0004a03c
   39fb8:	000497b0 	.word	0x000497b0
   39fbc:	00049b20 	.word	0x00049b20
   39fc0:	0004a034 	.word	0x0004a034

00039fc4 <clock_ready>:
	z_impl_k_sem_give(sem);
   39fc4:	f101 0010 	add.w	r0, r1, #16
   39fc8:	f006 bdce 	b.w	40b68 <z_impl_k_sem_give>

00039fcc <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   39fcc:	b570      	push	{r4, r5, r6, lr}
   39fce:	4605      	mov	r5, r0
   39fd0:	b08a      	sub	sp, #40	; 0x28
   39fd2:	460c      	mov	r4, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   39fd4:	2201      	movs	r2, #1
   39fd6:	2100      	movs	r1, #0
   39fd8:	a804      	add	r0, sp, #16
   39fda:	f00e f896 	bl	4810a <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   39fde:	4b0f      	ldr	r3, [pc, #60]	; (3a01c <blocking_on+0x50>)
   39fe0:	9301      	str	r3, [sp, #4]
   39fe2:	2600      	movs	r6, #0
   39fe4:	2303      	movs	r3, #3
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   39fe6:	4669      	mov	r1, sp
   39fe8:	4628      	mov	r0, r5
   39fea:	9603      	str	r6, [sp, #12]
   39fec:	9302      	str	r3, [sp, #8]
   39fee:	f008 f883 	bl	420f8 <onoff_request>
	if (err < 0) {
   39ff2:	2800      	cmp	r0, #0
   39ff4:	db10      	blt.n	3a018 <blocking_on+0x4c>
			return ((t * to_hz + off) / from_hz);
   39ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   39ffa:	4631      	mov	r1, r6
   39ffc:	f240 30e7 	movw	r0, #999	; 0x3e7
   3a000:	fbe4 0103 	umlal	r0, r1, r4, r3
   3a004:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3a008:	2300      	movs	r3, #0
   3a00a:	f7ec f879 	bl	26100 <__aeabi_uldivmod>
   3a00e:	4602      	mov	r2, r0
   3a010:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   3a012:	a804      	add	r0, sp, #16
   3a014:	f006 fdce 	bl	40bb4 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   3a018:	b00a      	add	sp, #40	; 0x28
   3a01a:	bd70      	pop	{r4, r5, r6, pc}
   3a01c:	00039fc5 	.word	0x00039fc5

0003a020 <lll_clock_init>:

int lll_clock_init(void)
{
   3a020:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   3a022:	2001      	movs	r0, #1
   3a024:	f003 fa46 	bl	3d4b4 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   3a028:	4904      	ldr	r1, [pc, #16]	; (3a03c <lll_clock_init+0x1c>)
   3a02a:	2300      	movs	r3, #0
   3a02c:	2401      	movs	r4, #1
   3a02e:	604b      	str	r3, [r1, #4]
   3a030:	608c      	str	r4, [r1, #8]
   3a032:	60cb      	str	r3, [r1, #12]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   3a034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return onoff_request(mgr, &lf_cli);
   3a038:	f008 b85e 	b.w	420f8 <onoff_request>
   3a03c:	200029a0 	.word	0x200029a0

0003a040 <lll_clock_deinit>:

int lll_clock_deinit(void)
{
   3a040:	b508      	push	{r3, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   3a042:	2001      	movs	r0, #1
   3a044:	f003 fa36 	bl	3d4b4 <z_nrf_clock_control_get_onoff>

	return onoff_release(mgr);
}
   3a048:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return onoff_release(mgr);
   3a04c:	f008 b8ac 	b.w	421a8 <onoff_release>

0003a050 <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   3a050:	4b0c      	ldr	r3, [pc, #48]	; (3a084 <lll_clock_wait+0x34>)
   3a052:	781a      	ldrb	r2, [r3, #0]
   3a054:	b10a      	cbz	r2, 3a05a <lll_clock_wait+0xa>
		return 0;
   3a056:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   3a058:	4770      	bx	lr
{
   3a05a:	b510      	push	{r4, lr}
	done = true;
   3a05c:	2001      	movs	r0, #1
   3a05e:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   3a060:	f003 fa28 	bl	3d4b4 <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   3a064:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   3a068:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   3a06a:	f7ff ffaf 	bl	39fcc <blocking_on>
	if (err) {
   3a06e:	b938      	cbnz	r0, 3a080 <lll_clock_wait+0x30>
	err = onoff_release(mgr);
   3a070:	4620      	mov	r0, r4
   3a072:	f008 f899 	bl	421a8 <onoff_release>
	if (err != ONOFF_STATE_ON) {
   3a076:	2802      	cmp	r0, #2
		return 0;
   3a078:	bf0c      	ite	eq
   3a07a:	2000      	moveq	r0, #0
		return -EIO;
   3a07c:	f06f 0004 	mvnne.w	r0, #4
}
   3a080:	bd10      	pop	{r4, pc}
   3a082:	bf00      	nop
   3a084:	20003b17 	.word	0x20003b17

0003a088 <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   3a088:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   3a08a:	4b0a      	ldr	r3, [pc, #40]	; (3a0b4 <lll_hfclock_on+0x2c>)
   3a08c:	f3bf 8f5b 	dmb	ish
   3a090:	e853 2f00 	ldrex	r2, [r3]
   3a094:	1c51      	adds	r1, r2, #1
   3a096:	e843 1000 	strex	r0, r1, [r3]
   3a09a:	2800      	cmp	r0, #0
   3a09c:	d1f8      	bne.n	3a090 <lll_hfclock_on+0x8>
   3a09e:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   3a0a2:	2a00      	cmp	r2, #0
   3a0a4:	dd01      	ble.n	3a0aa <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   3a0a6:	2000      	movs	r0, #0
   3a0a8:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   3a0aa:	f003 fa0b 	bl	3d4c4 <z_nrf_clock_bt_ctlr_hf_request>
}
   3a0ae:	2000      	movs	r0, #0
   3a0b0:	bd08      	pop	{r3, pc}
   3a0b2:	bf00      	nop
   3a0b4:	2000299c 	.word	0x2000299c

0003a0b8 <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   3a0b8:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   3a0ba:	4b0c      	ldr	r3, [pc, #48]	; (3a0ec <lll_hfclock_off+0x34>)
   3a0bc:	681a      	ldr	r2, [r3, #0]
   3a0be:	2a00      	cmp	r2, #0
   3a0c0:	dd11      	ble.n	3a0e6 <lll_hfclock_off+0x2e>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   3a0c2:	f3bf 8f5b 	dmb	ish
   3a0c6:	e853 2f00 	ldrex	r2, [r3]
   3a0ca:	1e51      	subs	r1, r2, #1
   3a0cc:	e843 1000 	strex	r0, r1, [r3]
   3a0d0:	2800      	cmp	r0, #0
   3a0d2:	d1f8      	bne.n	3a0c6 <lll_hfclock_off+0xe>
   3a0d4:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   3a0d8:	2a01      	cmp	r2, #1
   3a0da:	dd01      	ble.n	3a0e0 <lll_hfclock_off+0x28>
		return 0;
   3a0dc:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   3a0de:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   3a0e0:	f003 fa06 	bl	3d4f0 <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   3a0e4:	e7fa      	b.n	3a0dc <lll_hfclock_off+0x24>
		return -EALREADY;
   3a0e6:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   3a0ea:	bd08      	pop	{r3, pc}
   3a0ec:	2000299c 	.word	0x2000299c

0003a0f0 <lll_clock_ppm_local_get>:
}

uint32_t lll_clock_ppm_local_get(void)
{
	return sca_ppm_lut[CLOCK_CONTROL_NRF_K32SRC_ACCURACY];
}
   3a0f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   3a0f4:	4770      	bx	lr
   3a0f6:	bf00      	nop

0003a0f8 <lll_clock_ppm_get>:

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
   3a0f8:	4b01      	ldr	r3, [pc, #4]	; (3a100 <lll_clock_ppm_get+0x8>)
}
   3a0fa:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   3a0fe:	4770      	bx	lr
   3a100:	0004a068 	.word	0x0004a068

0003a104 <isr_abort>:

	lll_isr_cleanup(param);
}

static void isr_abort(void *param)
{
   3a104:	b510      	push	{r4, lr}
   3a106:	4604      	mov	r4, r0
	/* Clear radio status and events */
	lll_isr_status_reset();
   3a108:	f7ff fe1a 	bl	39d40 <lll_isr_status_reset>

	/* Disable any filter that was setup */
	radio_filter_disable();
   3a10c:	f001 fca8 	bl	3ba60 <radio_filter_disable>

	/* Current LLL radio event is done*/
	lll_isr_cleanup(param);
   3a110:	4620      	mov	r0, r4
}
   3a112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   3a116:	f7ff be1f 	b.w	39d58 <lll_isr_cleanup>
   3a11a:	bf00      	nop

0003a11c <isr_tx>:
{
   3a11c:	b538      	push	{r3, r4, r5, lr}
   3a11e:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   3a120:	f7ff fdfc 	bl	39d1c <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   3a124:	2096      	movs	r0, #150	; 0x96
   3a126:	f001 fccd 	bl	3bac4 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, phy_flags);
   3a12a:	2300      	movs	r3, #0
   3a12c:	4618      	mov	r0, r3
   3a12e:	461a      	mov	r2, r3
   3a130:	4619      	mov	r1, r3
   3a132:	f001 fc15 	bl	3b960 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   3a136:	2001      	movs	r0, #1
   3a138:	f7f9 faa2 	bl	33680 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   3a13c:	4604      	mov	r4, r0
   3a13e:	b368      	cbz	r0, 3a19c <isr_tx+0x80>
	radio_pkt_rx_set(node_rx->pdu);
   3a140:	f104 001c 	add.w	r0, r4, #28
   3a144:	f001 fb4c 	bl	3b7e0 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   3a148:	f001 fb86 	bl	3b858 <radio_is_ready>
   3a14c:	b9c0      	cbnz	r0, 3a180 <isr_tx+0x64>
	radio_isr_set(isr_rx, param);
   3a14e:	4629      	mov	r1, r5
   3a150:	4819      	ldr	r0, [pc, #100]	; (3a1b8 <isr_tx+0x9c>)
   3a152:	f001 fa7b 	bl	3b64c <radio_isr_set>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   3a156:	f001 fd9d 	bl	3bc94 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   3a15a:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   3a15c:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   3a15e:	4608      	mov	r0, r1
   3a160:	f001 fb4e 	bl	3b800 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   3a164:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   3a166:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   3a168:	4608      	mov	r0, r1
   3a16a:	f001 fb45 	bl	3b7f8 <radio_tx_chain_delay_get>
   3a16e:	442c      	add	r4, r5
   3a170:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   3a172:	1a20      	subs	r0, r4, r0
   3a174:	f001 fd46 	bl	3bc04 <radio_tmr_hcto_configure>
}
   3a178:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_tmr_end_capture();
   3a17c:	f001 bd7c 	b.w	3bc78 <radio_tmr_end_capture>
	LL_ASSERT(!radio_is_ready());
   3a180:	4a0e      	ldr	r2, [pc, #56]	; (3a1bc <isr_tx+0xa0>)
   3a182:	490f      	ldr	r1, [pc, #60]	; (3a1c0 <isr_tx+0xa4>)
   3a184:	480f      	ldr	r0, [pc, #60]	; (3a1c4 <isr_tx+0xa8>)
   3a186:	f240 4387 	movw	r3, #1159	; 0x487
   3a18a:	f008 fa1d 	bl	425c8 <assert_print>
   3a18e:	4040      	eors	r0, r0
   3a190:	f380 8811 	msr	BASEPRI, r0
   3a194:	f04f 0003 	mov.w	r0, #3
   3a198:	df02      	svc	2
   3a19a:	e7d8      	b.n	3a14e <isr_tx+0x32>
	LL_ASSERT(node_rx);
   3a19c:	4a07      	ldr	r2, [pc, #28]	; (3a1bc <isr_tx+0xa0>)
   3a19e:	490a      	ldr	r1, [pc, #40]	; (3a1c8 <isr_tx+0xac>)
   3a1a0:	4808      	ldr	r0, [pc, #32]	; (3a1c4 <isr_tx+0xa8>)
   3a1a2:	f240 4383 	movw	r3, #1155	; 0x483
   3a1a6:	f008 fa0f 	bl	425c8 <assert_print>
   3a1aa:	4040      	eors	r0, r0
   3a1ac:	f380 8811 	msr	BASEPRI, r0
   3a1b0:	f04f 0003 	mov.w	r0, #3
   3a1b4:	df02      	svc	2
   3a1b6:	e7c3      	b.n	3a140 <isr_tx+0x24>
   3a1b8:	0003a86d 	.word	0x0003a86d
   3a1bc:	0004a078 	.word	0x0004a078
   3a1c0:	0004a0cc 	.word	0x0004a0cc
   3a1c4:	000497b0 	.word	0x000497b0
   3a1c8:	0004a0c4 	.word	0x0004a0c4

0003a1cc <is_abort_cb>:
	if (next != curr) {
   3a1cc:	4281      	cmp	r1, r0
{
   3a1ce:	b508      	push	{r3, lr}
	if (next != curr) {
   3a1d0:	d00e      	beq.n	3a1f0 <is_abort_cb+0x24>
		} else if (lll->is_hdcd) {
   3a1d2:	7a0b      	ldrb	r3, [r1, #8]
   3a1d4:	07db      	lsls	r3, r3, #31
   3a1d6:	d402      	bmi.n	3a1de <is_abort_cb+0x12>
			return -ECANCELED;
   3a1d8:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   3a1dc:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   3a1de:	4b12      	ldr	r3, [pc, #72]	; (3a228 <is_abort_cb+0x5c>)
   3a1e0:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
   3a1e2:	f7ff ff51 	bl	3a088 <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   3a1e6:	2800      	cmp	r0, #0
   3a1e8:	db0f      	blt.n	3a20a <is_abort_cb+0x3e>
{
   3a1ea:	f06f 000a 	mvn.w	r0, #10
}
   3a1ee:	bd08      	pop	{r3, pc}
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   3a1f0:	7b0b      	ldrb	r3, [r1, #12]
   3a1f2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   3a1f6:	690b      	ldr	r3, [r1, #16]
   3a1f8:	781b      	ldrb	r3, [r3, #0]
   3a1fa:	f003 030f 	and.w	r3, r3, #15
		return 0;
   3a1fe:	2b01      	cmp	r3, #1
   3a200:	bf14      	ite	ne
   3a202:	f06f 008b 	mvnne.w	r0, #139	; 0x8b
   3a206:	2000      	moveq	r0, #0
}
   3a208:	bd08      	pop	{r3, pc}
			LL_ASSERT(err >= 0);
   3a20a:	4a08      	ldr	r2, [pc, #32]	; (3a22c <is_abort_cb+0x60>)
   3a20c:	4908      	ldr	r1, [pc, #32]	; (3a230 <is_abort_cb+0x64>)
   3a20e:	4809      	ldr	r0, [pc, #36]	; (3a234 <is_abort_cb+0x68>)
   3a210:	f240 433c 	movw	r3, #1084	; 0x43c
   3a214:	f008 f9d8 	bl	425c8 <assert_print>
   3a218:	4040      	eors	r0, r0
   3a21a:	f380 8811 	msr	BASEPRI, r0
   3a21e:	f04f 0003 	mov.w	r0, #3
   3a222:	df02      	svc	2
   3a224:	e7e1      	b.n	3a1ea <is_abort_cb+0x1e>
   3a226:	bf00      	nop
   3a228:	0003a759 	.word	0x0003a759
   3a22c:	0004a078 	.word	0x0004a078
   3a230:	0004a028 	.word	0x0004a028
   3a234:	000497b0 	.word	0x000497b0

0003a238 <isr_abort_all>:

#if defined(CONFIG_BT_PERIPHERAL)
static void isr_abort_all(void *param)
{
   3a238:	b510      	push	{r4, lr}
   3a23a:	4604      	mov	r4, r0
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, lll_disable};
	uint32_t ret;

	/* Clear radio status and events */
	lll_isr_status_reset();
   3a23c:	f7ff fd80 	bl	39d40 <lll_isr_status_reset>

	/* Disable any filter that was setup */
	radio_filter_disable();
   3a240:	f001 fc0e 	bl	3ba60 <radio_filter_disable>

	/* Current LLL radio event is done*/
	lll_isr_cleanup(param);
   3a244:	4620      	mov	r0, r4
   3a246:	f7ff fd87 	bl	39d58 <lll_isr_cleanup>

	/* Abort any LLL prepare/resume enqueued in pipeline */
	mfy.param = param;
   3a24a:	4b0b      	ldr	r3, [pc, #44]	; (3a278 <isr_abort_all+0x40>)
	ret = mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_LLL, 1U, &mfy);
   3a24c:	2100      	movs	r1, #0
   3a24e:	2201      	movs	r2, #1
   3a250:	4608      	mov	r0, r1
	mfy.param = param;
   3a252:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_LLL, 1U, &mfy);
   3a254:	f7f5 ffb8 	bl	301c8 <mayfly_enqueue>
	LL_ASSERT(!ret);
   3a258:	b900      	cbnz	r0, 3a25c <isr_abort_all+0x24>
}
   3a25a:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   3a25c:	4a07      	ldr	r2, [pc, #28]	; (3a27c <isr_abort_all+0x44>)
   3a25e:	4908      	ldr	r1, [pc, #32]	; (3a280 <isr_abort_all+0x48>)
   3a260:	4808      	ldr	r0, [pc, #32]	; (3a284 <isr_abort_all+0x4c>)
   3a262:	f240 5391 	movw	r3, #1425	; 0x591
   3a266:	f008 f9af 	bl	425c8 <assert_print>
   3a26a:	4040      	eors	r0, r0
   3a26c:	f380 8811 	msr	BASEPRI, r0
   3a270:	f04f 0003 	mov.w	r0, #3
   3a274:	df02      	svc	2
}
   3a276:	bd10      	pop	{r4, pc}
   3a278:	20000818 	.word	0x20000818
   3a27c:	0004a078 	.word	0x0004a078
   3a280:	00049a4c 	.word	0x00049a4c
   3a284:	000497b0 	.word	0x000497b0

0003a288 <abort_cb>:
{
   3a288:	b510      	push	{r4, lr}
	if (!prepare_param) {
   3a28a:	b1d8      	cbz	r0, 3a2c4 <abort_cb+0x3c>
	err = lll_hfclock_off();
   3a28c:	460c      	mov	r4, r1
   3a28e:	f7ff ff13 	bl	3a0b8 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   3a292:	2800      	cmp	r0, #0
   3a294:	db04      	blt.n	3a2a0 <abort_cb+0x18>
	lll_done(param);
   3a296:	4620      	mov	r0, r4
}
   3a298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   3a29c:	f7ff bc86 	b.w	39bac <lll_done>
	LL_ASSERT(err >= 0);
   3a2a0:	4a0c      	ldr	r2, [pc, #48]	; (3a2d4 <abort_cb+0x4c>)
   3a2a2:	490d      	ldr	r1, [pc, #52]	; (3a2d8 <abort_cb+0x50>)
   3a2a4:	480d      	ldr	r0, [pc, #52]	; (3a2dc <abort_cb+0x54>)
   3a2a6:	f240 4362 	movw	r3, #1122	; 0x462
   3a2aa:	f008 f98d 	bl	425c8 <assert_print>
   3a2ae:	4040      	eors	r0, r0
   3a2b0:	f380 8811 	msr	BASEPRI, r0
   3a2b4:	f04f 0003 	mov.w	r0, #3
   3a2b8:	df02      	svc	2
	lll_done(param);
   3a2ba:	4620      	mov	r0, r4
}
   3a2bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   3a2c0:	f7ff bc74 	b.w	39bac <lll_done>
		radio_isr_set(isr_abort, param);
   3a2c4:	4806      	ldr	r0, [pc, #24]	; (3a2e0 <abort_cb+0x58>)
   3a2c6:	f001 f9c1 	bl	3b64c <radio_isr_set>
}
   3a2ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   3a2ce:	f001 baa3 	b.w	3b818 <radio_disable>
   3a2d2:	bf00      	nop
   3a2d4:	0004a078 	.word	0x0004a078
   3a2d8:	0004a028 	.word	0x0004a028
   3a2dc:	000497b0 	.word	0x000497b0
   3a2e0:	0003a105 	.word	0x0003a105

0003a2e4 <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   3a2e4:	4b08      	ldr	r3, [pc, #32]	; (3a308 <lll_adv_init+0x24>)
   3a2e6:	2204      	movs	r2, #4
{
   3a2e8:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   3a2ea:	1898      	adds	r0, r3, r2
   3a2ec:	2128      	movs	r1, #40	; 0x28
   3a2ee:	f7f5 fe5f 	bl	2ffb0 <mem_init>
	MFIFO_INIT(pdu_free);
   3a2f2:	4b06      	ldr	r3, [pc, #24]	; (3a30c <lll_adv_init+0x28>)
   3a2f4:	2400      	movs	r4, #0
   3a2f6:	809c      	strh	r4, [r3, #4]
	return z_impl_k_sem_init(sem, initial_count, limit);
   3a2f8:	2202      	movs	r2, #2
   3a2fa:	4621      	mov	r1, r4
   3a2fc:	4804      	ldr	r0, [pc, #16]	; (3a310 <lll_adv_init+0x2c>)
   3a2fe:	f00d ff04 	bl	4810a <z_impl_k_sem_init>
}
   3a302:	4620      	mov	r0, r4
   3a304:	bd10      	pop	{r4, pc}
   3a306:	bf00      	nop
   3a308:	200029d0 	.word	0x200029d0
   3a30c:	20000828 	.word	0x20000828
   3a310:	200029b8 	.word	0x200029b8

0003a314 <lll_adv_reset>:
int lll_adv_reset(void)
   3a314:	4b08      	ldr	r3, [pc, #32]	; (3a338 <lll_adv_reset+0x24>)
   3a316:	2204      	movs	r2, #4
   3a318:	b510      	push	{r4, lr}
   3a31a:	1898      	adds	r0, r3, r2
   3a31c:	2128      	movs	r1, #40	; 0x28
   3a31e:	f7f5 fe47 	bl	2ffb0 <mem_init>
   3a322:	4b06      	ldr	r3, [pc, #24]	; (3a33c <lll_adv_reset+0x28>)
   3a324:	2400      	movs	r4, #0
   3a326:	809c      	strh	r4, [r3, #4]
   3a328:	2202      	movs	r2, #2
   3a32a:	4621      	mov	r1, r4
   3a32c:	4804      	ldr	r0, [pc, #16]	; (3a340 <lll_adv_reset+0x2c>)
   3a32e:	f00d feec 	bl	4810a <z_impl_k_sem_init>
   3a332:	4620      	mov	r0, r4
   3a334:	bd10      	pop	{r4, pc}
   3a336:	bf00      	nop
   3a338:	200029d0 	.word	0x200029d0
   3a33c:	20000828 	.word	0x20000828
   3a340:	200029b8 	.word	0x200029b8

0003a344 <lll_adv_data_init>:
{
   3a344:	b510      	push	{r4, lr}
   3a346:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   3a348:	4805      	ldr	r0, [pc, #20]	; (3a360 <lll_adv_data_init+0x1c>)
   3a34a:	f7f5 fe61 	bl	30010 <mem_acquire>
	if (!p) {
   3a34e:	b120      	cbz	r0, 3a35a <lll_adv_data_init+0x16>
   3a350:	4603      	mov	r3, r0
	p->len = 0U;
   3a352:	2000      	movs	r0, #0
   3a354:	7058      	strb	r0, [r3, #1]
	pdu->pdu[0] = (void *)p;
   3a356:	6063      	str	r3, [r4, #4]
}
   3a358:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   3a35a:	f06f 000b 	mvn.w	r0, #11
}
   3a35e:	bd10      	pop	{r4, pc}
   3a360:	200029d0 	.word	0x200029d0

0003a364 <lll_adv_data_reset>:
{
   3a364:	4603      	mov	r3, r0
	pdu->first = 0U;
   3a366:	2000      	movs	r0, #0
   3a368:	7018      	strb	r0, [r3, #0]
	pdu->last = 0U;
   3a36a:	7058      	strb	r0, [r3, #1]
	pdu->pdu[1] = NULL;
   3a36c:	6098      	str	r0, [r3, #8]
}
   3a36e:	4770      	bx	lr

0003a370 <lll_adv_pdu_alloc_pdu_adv>:
{
   3a370:	b538      	push	{r3, r4, r5, lr}
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   3a372:	4c2d      	ldr	r4, [pc, #180]	; (3a428 <lll_adv_pdu_alloc_pdu_adv+0xb8>)
   3a374:	7923      	ldrb	r3, [r4, #4]
	if (first == last) {
   3a376:	7962      	ldrb	r2, [r4, #5]
   3a378:	7821      	ldrb	r1, [r4, #0]
   3a37a:	429a      	cmp	r2, r3
   3a37c:	d003      	beq.n	3a386 <lll_adv_pdu_alloc_pdu_adv+0x16>
	return *((void **)(fifo + first * size));
   3a37e:	fb01 4303 	mla	r3, r1, r3, r4
   3a382:	689d      	ldr	r5, [r3, #8]
	if (p) {
   3a384:	b935      	cbnz	r5, 3a394 <lll_adv_pdu_alloc_pdu_adv+0x24>
	p = mem_acquire(&mem_pdu.free);
   3a386:	4829      	ldr	r0, [pc, #164]	; (3a42c <lll_adv_pdu_alloc_pdu_adv+0xbc>)
   3a388:	f7f5 fe42 	bl	30010 <mem_acquire>
	if (p) {
   3a38c:	4605      	mov	r5, r0
   3a38e:	b188      	cbz	r0, 3a3b4 <lll_adv_pdu_alloc_pdu_adv+0x44>
}
   3a390:	4628      	mov	r0, r5
   3a392:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_sem_reset(sem);
   3a394:	4826      	ldr	r0, [pc, #152]	; (3a430 <lll_adv_pdu_alloc_pdu_adv+0xc0>)
   3a396:	f006 fc35 	bl	40c04 <z_impl_k_sem_reset>
	uint8_t _first = *first; /* Copy read-index */
   3a39a:	7923      	ldrb	r3, [r4, #4]
	if (_first == last) {
   3a39c:	7962      	ldrb	r2, [r4, #5]
		MFIFO_DEQUEUE(pdu_free);
   3a39e:	78a1      	ldrb	r1, [r4, #2]
   3a3a0:	429a      	cmp	r2, r3
   3a3a2:	d0f5      	beq.n	3a390 <lll_adv_pdu_alloc_pdu_adv+0x20>
	_first += 1U;
   3a3a4:	3301      	adds	r3, #1
   3a3a6:	b2db      	uxtb	r3, r3
		_first = 0U;
   3a3a8:	4299      	cmp	r1, r3
   3a3aa:	bf08      	it	eq
   3a3ac:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   3a3ae:	7123      	strb	r3, [r4, #4]
}
   3a3b0:	4628      	mov	r0, r5
   3a3b2:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_sem_take(sem, timeout);
   3a3b4:	481e      	ldr	r0, [pc, #120]	; (3a430 <lll_adv_pdu_alloc_pdu_adv+0xc0>)
   3a3b6:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   3a3ba:	2300      	movs	r3, #0
   3a3bc:	f006 fbfa 	bl	40bb4 <z_impl_k_sem_take>
	LL_ASSERT(!err);
   3a3c0:	b9b0      	cbnz	r0, 3a3f0 <lll_adv_pdu_alloc_pdu_adv+0x80>
	z_impl_k_sem_reset(sem);
   3a3c2:	481b      	ldr	r0, [pc, #108]	; (3a430 <lll_adv_pdu_alloc_pdu_adv+0xc0>)
   3a3c4:	f006 fc1e 	bl	40c04 <z_impl_k_sem_reset>
	uint8_t _first = *first; /* Copy read-index */
   3a3c8:	7923      	ldrb	r3, [r4, #4]
	if (_first == last) {
   3a3ca:	7961      	ldrb	r1, [r4, #5]
	p = MFIFO_DEQUEUE(pdu_free);
   3a3cc:	7822      	ldrb	r2, [r4, #0]
   3a3ce:	78a0      	ldrb	r0, [r4, #2]
   3a3d0:	4299      	cmp	r1, r3
   3a3d2:	d01b      	beq.n	3a40c <lll_adv_pdu_alloc_pdu_adv+0x9c>
	mem = *((void **)(fifo + _first * size));
   3a3d4:	fb13 f202 	smulbb	r2, r3, r2
   3a3d8:	4916      	ldr	r1, [pc, #88]	; (3a434 <lll_adv_pdu_alloc_pdu_adv+0xc4>)
	_first += 1U;
   3a3da:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   3a3dc:	588a      	ldr	r2, [r1, r2]
	_first += 1U;
   3a3de:	b2db      	uxtb	r3, r3
		_first = 0U;
   3a3e0:	4298      	cmp	r0, r3
   3a3e2:	bf08      	it	eq
   3a3e4:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   3a3e6:	7123      	strb	r3, [r4, #4]
	LL_ASSERT(p);
   3a3e8:	b182      	cbz	r2, 3a40c <lll_adv_pdu_alloc_pdu_adv+0x9c>
   3a3ea:	4615      	mov	r5, r2
}
   3a3ec:	4628      	mov	r0, r5
   3a3ee:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(!err);
   3a3f0:	4a11      	ldr	r2, [pc, #68]	; (3a438 <lll_adv_pdu_alloc_pdu_adv+0xc8>)
   3a3f2:	4912      	ldr	r1, [pc, #72]	; (3a43c <lll_adv_pdu_alloc_pdu_adv+0xcc>)
   3a3f4:	4812      	ldr	r0, [pc, #72]	; (3a440 <lll_adv_pdu_alloc_pdu_adv+0xd0>)
   3a3f6:	f44f 73d9 	mov.w	r3, #434	; 0x1b2
   3a3fa:	f008 f8e5 	bl	425c8 <assert_print>
   3a3fe:	4040      	eors	r0, r0
   3a400:	f380 8811 	msr	BASEPRI, r0
   3a404:	f04f 0003 	mov.w	r0, #3
   3a408:	df02      	svc	2
   3a40a:	e7da      	b.n	3a3c2 <lll_adv_pdu_alloc_pdu_adv+0x52>
	LL_ASSERT(p);
   3a40c:	4a0a      	ldr	r2, [pc, #40]	; (3a438 <lll_adv_pdu_alloc_pdu_adv+0xc8>)
   3a40e:	490d      	ldr	r1, [pc, #52]	; (3a444 <lll_adv_pdu_alloc_pdu_adv+0xd4>)
   3a410:	480b      	ldr	r0, [pc, #44]	; (3a440 <lll_adv_pdu_alloc_pdu_adv+0xd0>)
   3a412:	f240 13b7 	movw	r3, #439	; 0x1b7
   3a416:	f008 f8d7 	bl	425c8 <assert_print>
   3a41a:	4040      	eors	r0, r0
   3a41c:	f380 8811 	msr	BASEPRI, r0
   3a420:	f04f 0003 	mov.w	r0, #3
   3a424:	df02      	svc	2
   3a426:	e7b3      	b.n	3a390 <lll_adv_pdu_alloc_pdu_adv+0x20>
   3a428:	20000828 	.word	0x20000828
   3a42c:	200029d0 	.word	0x200029d0
   3a430:	200029b8 	.word	0x200029b8
   3a434:	20000830 	.word	0x20000830
   3a438:	0004a078 	.word	0x0004a078
   3a43c:	00049950 	.word	0x00049950
   3a440:	000497b0 	.word	0x000497b0
   3a444:	0004a0e0 	.word	0x0004a0e0

0003a448 <lll_adv_pdu_alloc>:
{
   3a448:	b510      	push	{r4, lr}
	first = pdu->first;
   3a44a:	7802      	ldrb	r2, [r0, #0]
	last = pdu->last;
   3a44c:	7843      	ldrb	r3, [r0, #1]
	if (first == last) {
   3a44e:	429a      	cmp	r2, r3
   3a450:	d014      	beq.n	3a47c <lll_adv_pdu_alloc+0x34>
		pdu->last = first;
   3a452:	b2d4      	uxtb	r4, r2
   3a454:	7044      	strb	r4, [r0, #1]
		first_latest = pdu->first;
   3a456:	7802      	ldrb	r2, [r0, #0]
		if (first_latest != first) {
   3a458:	4294      	cmp	r4, r2
   3a45a:	d004      	beq.n	3a466 <lll_adv_pdu_alloc+0x1e>
			last++;
   3a45c:	1c5a      	adds	r2, r3, #1
			pdu->last = last;
   3a45e:	7043      	strb	r3, [r0, #1]
			last++;
   3a460:	b2d3      	uxtb	r3, r2
			if (last == DOUBLE_BUFFER_SIZE) {
   3a462:	2b02      	cmp	r3, #2
   3a464:	d00e      	beq.n	3a484 <lll_adv_pdu_alloc+0x3c>
	p = (void *)pdu->pdu[last];
   3a466:	461a      	mov	r2, r3
	*idx = last;
   3a468:	eb00 0482 	add.w	r4, r0, r2, lsl #2
   3a46c:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   3a46e:	6860      	ldr	r0, [r4, #4]
	if (p) {
   3a470:	b100      	cbz	r0, 3a474 <lll_adv_pdu_alloc+0x2c>
}
   3a472:	bd10      	pop	{r4, pc}
	p = lll_adv_pdu_alloc_pdu_adv();
   3a474:	f7ff ff7c 	bl	3a370 <lll_adv_pdu_alloc_pdu_adv>
	pdu->pdu[last] = (void *)p;
   3a478:	6060      	str	r0, [r4, #4]
}
   3a47a:	bd10      	pop	{r4, pc}
		last++;
   3a47c:	3301      	adds	r3, #1
   3a47e:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   3a480:	2b02      	cmp	r3, #2
   3a482:	d1f0      	bne.n	3a466 <lll_adv_pdu_alloc+0x1e>
{
   3a484:	2200      	movs	r2, #0
			last = 0U;
   3a486:	4613      	mov	r3, r2
   3a488:	e7ee      	b.n	3a468 <lll_adv_pdu_alloc+0x20>
   3a48a:	bf00      	nop

0003a48c <lll_adv_pdu_latest_get>:
{
   3a48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	first = pdu->first;
   3a48e:	7802      	ldrb	r2, [r0, #0]
	if (first != pdu->last) {
   3a490:	7843      	ldrb	r3, [r0, #1]
   3a492:	4293      	cmp	r3, r2
{
   3a494:	4604      	mov	r4, r0
	if (first != pdu->last) {
   3a496:	d02c      	beq.n	3a4f2 <lll_adv_pdu_latest_get+0x66>
		pdu_idx = first;
   3a498:	b2d5      	uxtb	r5, r2
			if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   3a49a:	4a18      	ldr	r2, [pc, #96]	; (3a4fc <lll_adv_pdu_latest_get+0x70>)
   3a49c:	f892 e005 	ldrb.w	lr, [r2, #5]
   3a4a0:	eb00 0785 	add.w	r7, r0, r5, lsl #2
	last = last + 1;
   3a4a4:	f10e 0301 	add.w	r3, lr, #1
	if (last == count) {
   3a4a8:	7890      	ldrb	r0, [r2, #2]
	last = last + 1;
   3a4aa:	b2db      	uxtb	r3, r3
		last = 0U;
   3a4ac:	4298      	cmp	r0, r3
   3a4ae:	bf08      	it	eq
   3a4b0:	2300      	moveq	r3, #0
   3a4b2:	7910      	ldrb	r0, [r2, #4]
	if (last == first) {
   3a4b4:	4298      	cmp	r0, r3
   3a4b6:	460e      	mov	r6, r1
		p = pdu->pdu[pdu_idx];
   3a4b8:	6879      	ldr	r1, [r7, #4]
   3a4ba:	d00b      	beq.n	3a4d4 <lll_adv_pdu_latest_get+0x48>
			MFIFO_BY_IDX_ENQUEUE(pdu_free, free_idx, p);
   3a4bc:	4694      	mov	ip, r2
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   3a4be:	f81c 0b08 	ldrb.w	r0, [ip], #8
   3a4c2:	fb10 f00e 	smulbb	r0, r0, lr
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   3a4c6:	f84c 1000 	str.w	r1, [ip, r0]
	*last = idx; /* Commit: Update write index */
   3a4ca:	7153      	strb	r3, [r2, #5]
	z_impl_k_sem_give(sem);
   3a4cc:	480c      	ldr	r0, [pc, #48]	; (3a500 <lll_adv_pdu_latest_get+0x74>)
   3a4ce:	f006 fb4b 	bl	40b68 <z_impl_k_sem_give>
			p = next;
   3a4d2:	2100      	movs	r1, #0
		first += 1U;
   3a4d4:	1c6b      	adds	r3, r5, #1
   3a4d6:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   3a4d8:	2b02      	cmp	r3, #2
   3a4da:	bf0a      	itet	eq
   3a4dc:	2200      	moveq	r2, #0
	return (void *)pdu->pdu[first];
   3a4de:	461a      	movne	r2, r3
			first = 0U;
   3a4e0:	4613      	moveq	r3, r2
		pdu->pdu[pdu_idx] = p;
   3a4e2:	6079      	str	r1, [r7, #4]
		pdu->first = first;
   3a4e4:	7023      	strb	r3, [r4, #0]
		*is_modified = 1U;
   3a4e6:	2101      	movs	r1, #1
	return (void *)pdu->pdu[first];
   3a4e8:	eb04 0482 	add.w	r4, r4, r2, lsl #2
		*is_modified = 1U;
   3a4ec:	7031      	strb	r1, [r6, #0]
}
   3a4ee:	6860      	ldr	r0, [r4, #4]
   3a4f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p = pdu->pdu[pdu_idx];
   3a4f2:	461a      	mov	r2, r3
	return (void *)pdu->pdu[first];
   3a4f4:	eb04 0482 	add.w	r4, r4, r2, lsl #2
}
   3a4f8:	6860      	ldr	r0, [r4, #4]
   3a4fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3a4fc:	20000828 	.word	0x20000828
   3a500:	200029b8 	.word	0x200029b8

0003a504 <chan_prepare.isra.0>:
#endif /* CONFIG_BT_PERIPHERAL */

static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   3a504:	b530      	push	{r4, r5, lr}
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   3a506:	7a03      	ldrb	r3, [r0, #8]
   3a508:	f3c3 1302 	ubfx	r3, r3, #4, #3
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   3a50c:	4604      	mov	r4, r0
   3a50e:	2b00      	cmp	r3, #0
   3a510:	fa93 f0a3 	rbit	r0, r3
   3a514:	fab0 f080 	clz	r0, r0
   3a518:	bf08      	it	eq
   3a51a:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
   3a51e:	b083      	sub	sp, #12
   3a520:	f100 0501 	add.w	r5, r0, #1
	LL_ASSERT(chan);
   3a524:	d03b      	beq.n	3a59e <chan_prepare.isra.0+0x9a>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   3a526:	7a21      	ldrb	r1, [r4, #8]
   3a528:	1e5a      	subs	r2, r3, #1
   3a52a:	4013      	ands	r3, r2
   3a52c:	f363 1106 	bfi	r1, r3, #4, #3

	lll_chan_set(36 + chan);
   3a530:	f105 0024 	add.w	r0, r5, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   3a534:	7221      	strb	r1, [r4, #8]
	lll_chan_set(36 + chan);
   3a536:	f7ff fbad 	bl	39c94 <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   3a53a:	2300      	movs	r3, #0
#endif /* CONFIG_BT_CTLR_ADV_EXT_PDU_EXTRA_DATA_MEMORY */

static inline struct pdu_adv *lll_adv_data_latest_get(struct lll_adv *lll,
						      uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   3a53c:	f10d 0107 	add.w	r1, sp, #7
   3a540:	f104 000c 	add.w	r0, r4, #12
   3a544:	f88d 3007 	strb.w	r3, [sp, #7]
   3a548:	f7ff ffa0 	bl	3a48c <lll_adv_pdu_latest_get>
	pdu = lll_adv_data_latest_get(lll, &upd);
	LL_ASSERT(pdu);
   3a54c:	4605      	mov	r5, r0
   3a54e:	2800      	cmp	r0, #0
   3a550:	d036      	beq.n	3a5c0 <chan_prepare.isra.0+0xbc>

	radio_pkt_tx_set(pdu);
   3a552:	4628      	mov	r0, r5
   3a554:	f001 f94a 	bl	3b7ec <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   3a558:	782b      	ldrb	r3, [r5, #0]
   3a55a:	f003 030f 	and.w	r3, r3, #15
   3a55e:	2b02      	cmp	r3, #2
   3a560:	d014      	beq.n	3a58c <chan_prepare.isra.0+0x88>
}

static inline struct pdu_adv *lll_adv_scan_rsp_latest_get(struct lll_adv *lll,
							  uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   3a562:	f10d 0107 	add.w	r1, sp, #7
   3a566:	f104 0018 	add.w	r0, r4, #24
   3a56a:	f7ff ff8f 	bl	3a48c <lll_adv_pdu_latest_get>
	    (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		struct pdu_adv *scan_pdu;

		scan_pdu = lll_adv_scan_rsp_latest_get(lll, &upd);
		LL_ASSERT(scan_pdu);
   3a56e:	2800      	cmp	r0, #0
   3a570:	d034      	beq.n	3a5dc <chan_prepare.isra.0+0xd8>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   3a572:	4621      	mov	r1, r4
   3a574:	4820      	ldr	r0, [pc, #128]	; (3a5f8 <chan_prepare.isra.0+0xf4>)
   3a576:	f001 f869 	bl	3b64c <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   3a57a:	2096      	movs	r0, #150	; 0x96
   3a57c:	f001 faa2 	bl	3bac4 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   3a580:	2000      	movs	r0, #0
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   3a582:	b003      	add	sp, #12
   3a584:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		radio_switch_complete_and_rx(0);
   3a588:	f001 b9a2 	b.w	3b8d0 <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
   3a58c:	481b      	ldr	r0, [pc, #108]	; (3a5fc <chan_prepare.isra.0+0xf8>)
   3a58e:	4621      	mov	r1, r4
   3a590:	f001 f85c 	bl	3b64c <radio_isr_set>
}
   3a594:	b003      	add	sp, #12
   3a596:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		radio_switch_complete_and_disable();
   3a59a:	f001 ba41 	b.w	3ba20 <radio_switch_complete_and_disable>
	LL_ASSERT(chan);
   3a59e:	4a18      	ldr	r2, [pc, #96]	; (3a600 <chan_prepare.isra.0+0xfc>)
   3a5a0:	4918      	ldr	r1, [pc, #96]	; (3a604 <chan_prepare.isra.0+0x100>)
   3a5a2:	4819      	ldr	r0, [pc, #100]	; (3a608 <chan_prepare.isra.0+0x104>)
   3a5a4:	f240 539c 	movw	r3, #1436	; 0x59c
   3a5a8:	f008 f80e 	bl	425c8 <assert_print>
   3a5ac:	4040      	eors	r0, r0
   3a5ae:	f380 8811 	msr	BASEPRI, r0
   3a5b2:	f04f 0003 	mov.w	r0, #3
   3a5b6:	df02      	svc	2
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   3a5b8:	7a23      	ldrb	r3, [r4, #8]
   3a5ba:	f3c3 1302 	ubfx	r3, r3, #4, #3
   3a5be:	e7b2      	b.n	3a526 <chan_prepare.isra.0+0x22>
	LL_ASSERT(pdu);
   3a5c0:	4a0f      	ldr	r2, [pc, #60]	; (3a600 <chan_prepare.isra.0+0xfc>)
   3a5c2:	4912      	ldr	r1, [pc, #72]	; (3a60c <chan_prepare.isra.0+0x108>)
   3a5c4:	4810      	ldr	r0, [pc, #64]	; (3a608 <chan_prepare.isra.0+0x104>)
   3a5c6:	f240 53a5 	movw	r3, #1445	; 0x5a5
   3a5ca:	f007 fffd 	bl	425c8 <assert_print>
   3a5ce:	4040      	eors	r0, r0
   3a5d0:	f380 8811 	msr	BASEPRI, r0
   3a5d4:	f04f 0003 	mov.w	r0, #3
   3a5d8:	df02      	svc	2
   3a5da:	e7ba      	b.n	3a552 <chan_prepare.isra.0+0x4e>
		LL_ASSERT(scan_pdu);
   3a5dc:	4a08      	ldr	r2, [pc, #32]	; (3a600 <chan_prepare.isra.0+0xfc>)
   3a5de:	490c      	ldr	r1, [pc, #48]	; (3a610 <chan_prepare.isra.0+0x10c>)
   3a5e0:	4809      	ldr	r0, [pc, #36]	; (3a608 <chan_prepare.isra.0+0x104>)
   3a5e2:	f240 53af 	movw	r3, #1455	; 0x5af
   3a5e6:	f007 ffef 	bl	425c8 <assert_print>
   3a5ea:	4040      	eors	r0, r0
   3a5ec:	f380 8811 	msr	BASEPRI, r0
   3a5f0:	f04f 0003 	mov.w	r0, #3
   3a5f4:	df02      	svc	2
   3a5f6:	e7bc      	b.n	3a572 <chan_prepare.isra.0+0x6e>
   3a5f8:	0003a11d 	.word	0x0003a11d
   3a5fc:	0003a615 	.word	0x0003a615
   3a600:	0004a078 	.word	0x0004a078
   3a604:	0004a0e4 	.word	0x0004a0e4
   3a608:	000497b0 	.word	0x000497b0
   3a60c:	0004a0ec 	.word	0x0004a0ec
   3a610:	0004a0f0 	.word	0x0004a0f0

0003a614 <isr_done>:
{
   3a614:	b510      	push	{r4, lr}
   3a616:	4604      	mov	r4, r0
	lll_isr_status_reset();
   3a618:	f7ff fb92 	bl	39d40 <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   3a61c:	7a23      	ldrb	r3, [r4, #8]
   3a61e:	f003 0271 	and.w	r2, r3, #113	; 0x71
   3a622:	2a01      	cmp	r2, #1
   3a624:	d105      	bne.n	3a632 <isr_done+0x1e>
		lll->chan_map_curr = lll->chan_map;
   3a626:	f3c3 0242 	ubfx	r2, r3, #1, #3
   3a62a:	f362 1306 	bfi	r3, r2, #4, #3
   3a62e:	7223      	strb	r3, [r4, #8]
	if (lll->chan_map_curr &&
   3a630:	b2db      	uxtb	r3, r3
   3a632:	f013 0f70 	tst.w	r3, #112	; 0x70
   3a636:	d005      	beq.n	3a644 <isr_done+0x30>
	    (!lll->conn || !lll->conn->periph.cancelled) &&
   3a638:	6863      	ldr	r3, [r4, #4]
   3a63a:	b153      	cbz	r3, 3a652 <isr_done+0x3e>
   3a63c:	f893 3020 	ldrb.w	r3, [r3, #32]
   3a640:	079b      	lsls	r3, r3, #30
   3a642:	d506      	bpl.n	3a652 <isr_done+0x3e>
	radio_filter_disable();
   3a644:	f001 fa0c 	bl	3ba60 <radio_filter_disable>
	lll_isr_cleanup(param);
   3a648:	4620      	mov	r0, r4
}
   3a64a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   3a64e:	f7ff bb83 	b.w	39d58 <lll_isr_cleanup>
		pdu = chan_prepare(lll);
   3a652:	4620      	mov	r0, r4
   3a654:	f7ff ff56 	bl	3a504 <chan_prepare.isra.0>
		radio_tx_enable();
   3a658:	f001 f8d8 	bl	3b80c <radio_tx_enable>
}
   3a65c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   3a660:	f001 bb0a 	b.w	3bc78 <radio_tmr_end_capture>

0003a664 <prepare_cb>:
{
   3a664:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   3a666:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->conn &&
   3a668:	6863      	ldr	r3, [r4, #4]
{
   3a66a:	b083      	sub	sp, #12
   3a66c:	4605      	mov	r5, r0
	if (unlikely(lll->conn &&
   3a66e:	2b00      	cmp	r3, #0
   3a670:	d158      	bne.n	3a724 <prepare_cb+0xc0>
	radio_reset();
   3a672:	f001 f82d 	bl	3b6d0 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   3a676:	2000      	movs	r0, #0
   3a678:	f001 f856 	bl	3b728 <radio_tx_power_set>
	radio_phy_set(0, 0);
   3a67c:	2100      	movs	r1, #0
   3a67e:	4608      	mov	r0, r1
   3a680:	f001 f842 	bl	3b708 <radio_phy_set>
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, PDU_AC_LEG_PAYLOAD_SIZE_MAX,
   3a684:	2200      	movs	r2, #0
   3a686:	2125      	movs	r1, #37	; 0x25
   3a688:	2008      	movs	r0, #8
   3a68a:	f001 f883 	bl	3b794 <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   3a68e:	4b2b      	ldr	r3, [pc, #172]	; (3a73c <prepare_cb+0xd8>)
   3a690:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   3a692:	a801      	add	r0, sp, #4
   3a694:	f001 f866 	bl	3b764 <radio_aa_set>
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   3a698:	4929      	ldr	r1, [pc, #164]	; (3a740 <prepare_cb+0xdc>)
   3a69a:	f240 605b 	movw	r0, #1627	; 0x65b
   3a69e:	f001 f8f9 	bl	3b894 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   3a6a2:	7a23      	ldrb	r3, [r4, #8]
   3a6a4:	f3c3 0242 	ubfx	r2, r3, #1, #3
   3a6a8:	f362 1306 	bfi	r3, r2, #4, #3
   3a6ac:	7223      	strb	r3, [r4, #8]
	pdu = chan_prepare(lll);
   3a6ae:	4620      	mov	r0, r4
   3a6b0:	f7ff ff28 	bl	3a504 <chan_prepare.isra.0>
	ull = HDR_LLL2ULL(lll);
   3a6b4:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   3a6b6:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   3a6b8:	4638      	mov	r0, r7
   3a6ba:	f7ff facd 	bl	39c58 <lll_event_offset_get>
   3a6be:	4406      	add	r6, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   3a6c0:	686a      	ldr	r2, [r5, #4]
   3a6c2:	f106 0118 	add.w	r1, r6, #24
   3a6c6:	2001      	movs	r0, #1
   3a6c8:	f001 fa08 	bl	3badc <radio_tmr_start>
	radio_tmr_end_capture();
   3a6cc:	f001 fad4 	bl	3bc78 <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   3a6d0:	4620      	mov	r0, r4
   3a6d2:	f7f9 ff51 	bl	34578 <ull_adv_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_ADV_BASE +
   3a6d6:	1c81      	adds	r1, r0, #2
   3a6d8:	4632      	mov	r2, r6
   3a6da:	b2c9      	uxtb	r1, r1
   3a6dc:	4638      	mov	r0, r7
   3a6de:	f7ff fac9 	bl	39c74 <lll_preempt_calc>
   3a6e2:	b930      	cbnz	r0, 3a6f2 <prepare_cb+0x8e>
		ret = lll_prepare_done(lll);
   3a6e4:	4620      	mov	r0, r4
   3a6e6:	f7ff fa5f 	bl	39ba8 <lll_prepare_done>
		LL_ASSERT(!ret);
   3a6ea:	b958      	cbnz	r0, 3a704 <prepare_cb+0xa0>
}
   3a6ec:	2000      	movs	r0, #0
   3a6ee:	b003      	add	sp, #12
   3a6f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(isr_abort, lll);
   3a6f2:	4814      	ldr	r0, [pc, #80]	; (3a744 <prepare_cb+0xe0>)
   3a6f4:	4621      	mov	r1, r4
   3a6f6:	f000 ffa9 	bl	3b64c <radio_isr_set>
		radio_disable();
   3a6fa:	f001 f88d 	bl	3b818 <radio_disable>
}
   3a6fe:	2000      	movs	r0, #0
   3a700:	b003      	add	sp, #12
   3a702:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LL_ASSERT(!ret);
   3a704:	4a10      	ldr	r2, [pc, #64]	; (3a748 <prepare_cb+0xe4>)
   3a706:	4911      	ldr	r1, [pc, #68]	; (3a74c <prepare_cb+0xe8>)
   3a708:	4811      	ldr	r0, [pc, #68]	; (3a750 <prepare_cb+0xec>)
   3a70a:	f240 4313 	movw	r3, #1043	; 0x413
   3a70e:	f007 ff5b 	bl	425c8 <assert_print>
   3a712:	4040      	eors	r0, r0
   3a714:	f380 8811 	msr	BASEPRI, r0
   3a718:	f04f 0003 	mov.w	r0, #3
   3a71c:	df02      	svc	2
}
   3a71e:	2000      	movs	r0, #0
   3a720:	b003      	add	sp, #12
   3a722:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (unlikely(lll->conn &&
   3a724:	f893 3020 	ldrb.w	r3, [r3, #32]
   3a728:	079b      	lsls	r3, r3, #30
   3a72a:	d0a2      	beq.n	3a672 <prepare_cb+0xe>
		radio_isr_set(lll_isr_early_abort, lll);
   3a72c:	4809      	ldr	r0, [pc, #36]	; (3a754 <prepare_cb+0xf0>)
   3a72e:	4621      	mov	r1, r4
   3a730:	f000 ff8c 	bl	3b64c <radio_isr_set>
		radio_disable();
   3a734:	f001 f870 	bl	3b818 <radio_disable>
		return 0;
   3a738:	e7d8      	b.n	3a6ec <prepare_cb+0x88>
   3a73a:	bf00      	nop
   3a73c:	8e89bed6 	.word	0x8e89bed6
   3a740:	00555555 	.word	0x00555555
   3a744:	0003a105 	.word	0x0003a105
   3a748:	0004a078 	.word	0x0004a078
   3a74c:	00049a4c 	.word	0x00049a4c
   3a750:	000497b0 	.word	0x000497b0
   3a754:	00039ded 	.word	0x00039ded

0003a758 <resume_prepare_cb>:
{
   3a758:	b570      	push	{r4, r5, r6, lr}
	ull = HDR_LLL2ULL(p->param);
   3a75a:	68c3      	ldr	r3, [r0, #12]
{
   3a75c:	4604      	mov	r4, r0
	ull = HDR_LLL2ULL(p->param);
   3a75e:	681e      	ldr	r6, [r3, #0]
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   3a760:	f7f6 fef4 	bl	3154c <ticker_ticks_now_get>
   3a764:	4605      	mov	r5, r0
   3a766:	4630      	mov	r0, r6
   3a768:	f7ff fa76 	bl	39c58 <lll_event_offset_get>
	p->remainder = 0;
   3a76c:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   3a76e:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   3a770:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   3a774:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   3a776:	4620      	mov	r0, r4
}
   3a778:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   3a77c:	f7ff bf72 	b.w	3a664 <prepare_cb>

0003a780 <lll_adv_prepare>:
{
   3a780:	b510      	push	{r4, lr}
   3a782:	b082      	sub	sp, #8
   3a784:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   3a786:	f7ff fc7f 	bl	3a088 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   3a78a:	2800      	cmp	r0, #0
   3a78c:	db1a      	blt.n	3a7c4 <lll_adv_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   3a78e:	4a14      	ldr	r2, [pc, #80]	; (3a7e0 <lll_adv_prepare+0x60>)
   3a790:	4914      	ldr	r1, [pc, #80]	; (3a7e4 <lll_adv_prepare+0x64>)
   3a792:	4815      	ldr	r0, [pc, #84]	; (3a7e8 <lll_adv_prepare+0x68>)
   3a794:	9400      	str	r4, [sp, #0]
   3a796:	2300      	movs	r3, #0
   3a798:	f7f9 faaa 	bl	33cf0 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   3a79c:	b108      	cbz	r0, 3a7a2 <lll_adv_prepare+0x22>
   3a79e:	3077      	adds	r0, #119	; 0x77
   3a7a0:	d101      	bne.n	3a7a6 <lll_adv_prepare+0x26>
}
   3a7a2:	b002      	add	sp, #8
   3a7a4:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   3a7a6:	4a11      	ldr	r2, [pc, #68]	; (3a7ec <lll_adv_prepare+0x6c>)
   3a7a8:	4911      	ldr	r1, [pc, #68]	; (3a7f0 <lll_adv_prepare+0x70>)
   3a7aa:	4812      	ldr	r0, [pc, #72]	; (3a7f4 <lll_adv_prepare+0x74>)
   3a7ac:	f240 23ab 	movw	r3, #683	; 0x2ab
   3a7b0:	f007 ff0a 	bl	425c8 <assert_print>
   3a7b4:	4040      	eors	r0, r0
   3a7b6:	f380 8811 	msr	BASEPRI, r0
   3a7ba:	f04f 0003 	mov.w	r0, #3
   3a7be:	df02      	svc	2
}
   3a7c0:	b002      	add	sp, #8
   3a7c2:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   3a7c4:	4a09      	ldr	r2, [pc, #36]	; (3a7ec <lll_adv_prepare+0x6c>)
   3a7c6:	490c      	ldr	r1, [pc, #48]	; (3a7f8 <lll_adv_prepare+0x78>)
   3a7c8:	480a      	ldr	r0, [pc, #40]	; (3a7f4 <lll_adv_prepare+0x74>)
   3a7ca:	f44f 732a 	mov.w	r3, #680	; 0x2a8
   3a7ce:	f007 fefb 	bl	425c8 <assert_print>
   3a7d2:	4040      	eors	r0, r0
   3a7d4:	f380 8811 	msr	BASEPRI, r0
   3a7d8:	f04f 0003 	mov.w	r0, #3
   3a7dc:	df02      	svc	2
   3a7de:	e7d6      	b.n	3a78e <lll_adv_prepare+0xe>
   3a7e0:	0003a665 	.word	0x0003a665
   3a7e4:	0003a289 	.word	0x0003a289
   3a7e8:	0003a1cd 	.word	0x0003a1cd
   3a7ec:	0004a078 	.word	0x0004a078
   3a7f0:	0004a0fc 	.word	0x0004a0fc
   3a7f4:	000497b0 	.word	0x000497b0
   3a7f8:	0004a028 	.word	0x0004a028

0003a7fc <lll_adv_connect_ind_check>:
{
   3a7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3a7fe:	9e07      	ldr	r6, [sp, #28]
   3a800:	f89d 7018 	ldrb.w	r7, [sp, #24]
   3a804:	f89d 4020 	ldrb.w	r4, [sp, #32]
   3a808:	460d      	mov	r5, r1
	if (tgt_addr) {
   3a80a:	b95e      	cbnz	r6, 3a824 <lll_adv_connect_ind_check+0x28>
	return (((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) ||
   3a80c:	7a41      	ldrb	r1, [r0, #9]
		(devmatch_ok)) &&
   3a80e:	f001 0103 	and.w	r1, r1, #3
   3a812:	2901      	cmp	r1, #1
   3a814:	d900      	bls.n	3a818 <lll_adv_connect_ind_check+0x1c>
	return (((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) ||
   3a816:	b11c      	cbz	r4, 3a820 <lll_adv_connect_ind_check+0x24>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   3a818:	7829      	ldrb	r1, [r5, #0]
   3a81a:	ebb2 1fd1 	cmp.w	r2, r1, lsr #7
   3a81e:	d01b      	beq.n	3a858 <lll_adv_connect_ind_check+0x5c>
   3a820:	2000      	movs	r0, #0
}
   3a822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (tx_addr == sr->rx_addr) &&
   3a824:	7809      	ldrb	r1, [r1, #0]
   3a826:	ebb2 1fd1 	cmp.w	r2, r1, lsr #7
   3a82a:	d1f9      	bne.n	3a820 <lll_adv_connect_ind_check+0x24>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   3a82c:	2206      	movs	r2, #6
   3a82e:	4618      	mov	r0, r3
   3a830:	f105 0108 	add.w	r1, r5, #8
   3a834:	f009 fd60 	bl	442f8 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   3a838:	2800      	cmp	r0, #0
   3a83a:	d1f1      	bne.n	3a820 <lll_adv_connect_ind_check+0x24>
#if defined(CONFIG_BT_CTLR_PRIVACY)
	if (rl_idx != FILTER_IDX_NONE && lll->rl_idx != FILTER_IDX_NONE) {
		return rl_idx == lll->rl_idx;
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	return (rx_addr == ci->tx_addr) &&
   3a83c:	782b      	ldrb	r3, [r5, #0]
   3a83e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   3a842:	42bb      	cmp	r3, r7
   3a844:	d1ec      	bne.n	3a820 <lll_adv_connect_ind_check+0x24>
	       !memcmp(tgt_addr, ci->connect_ind.init_addr, BDADDR_SIZE);
   3a846:	2206      	movs	r2, #6
   3a848:	1ca9      	adds	r1, r5, #2
   3a84a:	4630      	mov	r0, r6
   3a84c:	f009 fd54 	bl	442f8 <memcmp>
	return (rx_addr == ci->tx_addr) &&
   3a850:	fab0 f080 	clz	r0, r0
   3a854:	0940      	lsrs	r0, r0, #5
}
   3a856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   3a858:	2206      	movs	r2, #6
   3a85a:	f105 0108 	add.w	r1, r5, #8
   3a85e:	4618      	mov	r0, r3
   3a860:	f009 fd4a 	bl	442f8 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   3a864:	fab0 f080 	clz	r0, r0
   3a868:	0940      	lsrs	r0, r0, #5
}
   3a86a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003a86c <isr_rx>:
{
   3a86c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3a870:	b088      	sub	sp, #32
   3a872:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   3a874:	f000 fffa 	bl	3b86c <radio_is_done>
	if (trx_done) {
   3a878:	b2c0      	uxtb	r0, r0
   3a87a:	b950      	cbnz	r0, 3a892 <isr_rx+0x26>
	lll_isr_status_reset();
   3a87c:	f7ff fa60 	bl	39d40 <lll_isr_status_reset>
	radio_isr_set(isr_done, param);
   3a880:	4874      	ldr	r0, [pc, #464]	; (3aa54 <isr_rx+0x1e8>)
   3a882:	4621      	mov	r1, r4
   3a884:	f000 fee2 	bl	3b64c <radio_isr_set>
}
   3a888:	b008      	add	sp, #32
   3a88a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	radio_disable();
   3a88e:	f000 bfc3 	b.w	3b818 <radio_disable>
		crc_ok = radio_crc_is_valid();
   3a892:	f001 f80b 	bl	3b8ac <radio_crc_is_valid>
   3a896:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
   3a898:	f001 f8f4 	bl	3ba84 <radio_filter_has_match>
	if (crc_ok) {
   3a89c:	b2ed      	uxtb	r5, r5
		devmatch_ok = radio_filter_has_match();
   3a89e:	4606      	mov	r6, r0
		devmatch_id = radio_filter_match_get();
   3a8a0:	f001 f8fa 	bl	3ba98 <radio_filter_match_get>
		rssi_ready = radio_rssi_is_ready();
   3a8a4:	f001 f8d2 	bl	3ba4c <radio_rssi_is_ready>
	lll_isr_status_reset();
   3a8a8:	f7ff fa4a 	bl	39d40 <lll_isr_status_reset>
	if (crc_ok) {
   3a8ac:	2d00      	cmp	r5, #0
   3a8ae:	d0e7      	beq.n	3a880 <isr_rx+0x14>
	uint8_t rl_idx = FILTER_IDX_NONE;
   3a8b0:	23ff      	movs	r3, #255	; 0xff
	node_rx = ull_pdu_rx_alloc_peek(1);
   3a8b2:	2001      	movs	r0, #1
	uint8_t rl_idx = FILTER_IDX_NONE;
   3a8b4:	f88d 301f 	strb.w	r3, [sp, #31]
	node_rx = ull_pdu_rx_alloc_peek(1);
   3a8b8:	f7f8 fee2 	bl	33680 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   3a8bc:	4605      	mov	r5, r0
   3a8be:	2800      	cmp	r0, #0
   3a8c0:	f000 8099 	beq.w	3a9f6 <isr_rx+0x18a>
   3a8c4:	7b23      	ldrb	r3, [r4, #12]
   3a8c6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	pdu_rx = (void *)node_rx->pdu;
   3a8ca:	f105 091c 	add.w	r9, r5, #28
   3a8ce:	6919      	ldr	r1, [r3, #16]
	addr = pdu_adv->adv_ind.addr;
   3a8d0:	460b      	mov	r3, r1
		devmatch_ok = radio_filter_has_match();
   3a8d2:	b2f6      	uxtb	r6, r6
	tx_addr = pdu_adv->tx_addr;
   3a8d4:	f813 2b02 	ldrb.w	r2, [r3], #2
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   3a8d8:	f002 000f 	and.w	r0, r2, #15
   3a8dc:	2801      	cmp	r0, #1
		tgt_addr = pdu_adv->direct_ind.tgt_addr;
   3a8de:	bf08      	it	eq
   3a8e0:	f101 0808 	addeq.w	r8, r1, #8
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   3a8e4:	7f29      	ldrb	r1, [r5, #28]
	tx_addr = pdu_adv->tx_addr;
   3a8e6:	f3c2 1a80 	ubfx	sl, r2, #6, #1
	rx_addr = pdu_adv->rx_addr;
   3a8ea:	ea4f 17d2 	mov.w	r7, r2, lsr #7
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   3a8ee:	f001 020f 	and.w	r2, r1, #15
		tgt_addr = NULL;
   3a8f2:	bf18      	it	ne
   3a8f4:	f04f 0800 	movne.w	r8, #0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   3a8f8:	2a03      	cmp	r2, #3
   3a8fa:	d04f      	beq.n	3a99c <isr_rx+0x130>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   3a8fc:	2a05      	cmp	r2, #5
   3a8fe:	d1bf      	bne.n	3a880 <isr_rx+0x14>
   3a900:	7f6a      	ldrb	r2, [r5, #29]
   3a902:	2a22      	cmp	r2, #34	; 0x22
   3a904:	d1bc      	bne.n	3a880 <isr_rx+0x14>
		   lll->conn && !lll->conn->periph.cancelled &&
   3a906:	6862      	ldr	r2, [r4, #4]
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   3a908:	2a00      	cmp	r2, #0
   3a90a:	d0b9      	beq.n	3a880 <isr_rx+0x14>
		   lll->conn && !lll->conn->periph.cancelled &&
   3a90c:	f892 2020 	ldrb.w	r2, [r2, #32]
   3a910:	0792      	lsls	r2, r2, #30
   3a912:	d4b5      	bmi.n	3a880 <isr_rx+0x14>
		   lll_adv_connect_ind_check(lll, pdu_rx, tx_addr, addr,
   3a914:	f10d 051f 	add.w	r5, sp, #31
   3a918:	e9cd 8601 	strd	r8, r6, [sp, #4]
   3a91c:	9700      	str	r7, [sp, #0]
   3a91e:	4652      	mov	r2, sl
   3a920:	4649      	mov	r1, r9
   3a922:	4620      	mov	r0, r4
   3a924:	9503      	str	r5, [sp, #12]
   3a926:	f7ff ff69 	bl	3a7fc <lll_adv_connect_ind_check>
		   lll->conn && !lll->conn->periph.cancelled &&
   3a92a:	2800      	cmp	r0, #0
   3a92c:	d0a8      	beq.n	3a880 <isr_rx+0x14>
			rx = ull_pdu_rx_alloc_peek(4);
   3a92e:	2004      	movs	r0, #4
   3a930:	f7f8 fea6 	bl	33680 <ull_pdu_rx_alloc_peek>
		if (!rx) {
   3a934:	2800      	cmp	r0, #0
   3a936:	d0a3      	beq.n	3a880 <isr_rx+0x14>
		radio_isr_set(isr_abort_all, lll);
   3a938:	4847      	ldr	r0, [pc, #284]	; (3aa58 <isr_rx+0x1ec>)
   3a93a:	4621      	mov	r1, r4
   3a93c:	f000 fe86 	bl	3b64c <radio_isr_set>
		radio_disable();
   3a940:	f000 ff6a 	bl	3b818 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   3a944:	f000 ff88 	bl	3b858 <radio_is_ready>
   3a948:	2800      	cmp	r0, #0
   3a94a:	d146      	bne.n	3a9da <isr_rx+0x16e>
		lll->conn->periph.initiated = 1;
   3a94c:	6862      	ldr	r2, [r4, #4]
   3a94e:	f892 3020 	ldrb.w	r3, [r2, #32]
   3a952:	f043 0301 	orr.w	r3, r3, #1
   3a956:	f882 3020 	strb.w	r3, [r2, #32]
		rx = ull_pdu_rx_alloc();
   3a95a:	f7f8 feb3 	bl	336c4 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   3a95e:	2217      	movs	r2, #23
		rx->hdr.handle = 0xffff;
   3a960:	f64f 73ff 	movw	r3, #65535	; 0xffff
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   3a964:	7102      	strb	r2, [r0, #4]
		rx->hdr.handle = 0xffff;
   3a966:	80c3      	strh	r3, [r0, #6]
		ftr->param = lll;
   3a968:	6084      	str	r4, [r0, #8]
		rx = ull_pdu_rx_alloc();
   3a96a:	4605      	mov	r5, r0
		ftr->ticks_anchor = radio_tmr_start_get();
   3a96c:	f001 f938 	bl	3bbe0 <radio_tmr_start_get>
   3a970:	6128      	str	r0, [r5, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   3a972:	f001 f989 	bl	3bc88 <radio_tmr_end_get>
				    radio_rx_chain_delay_get(0, 0);
   3a976:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   3a978:	4604      	mov	r4, r0
				    radio_rx_chain_delay_get(0, 0);
   3a97a:	4608      	mov	r0, r1
   3a97c:	f000 ff40 	bl	3b800 <radio_rx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   3a980:	1a24      	subs	r4, r4, r0
   3a982:	616c      	str	r4, [r5, #20]
			ftr->extra = ull_pdu_rx_alloc();
   3a984:	f7f8 fe9e 	bl	336c4 <ull_pdu_rx_alloc>
		ull_rx_put(rx->hdr.link, rx);
   3a988:	4629      	mov	r1, r5
			ftr->extra = ull_pdu_rx_alloc();
   3a98a:	60e8      	str	r0, [r5, #12]
		ull_rx_put(rx->hdr.link, rx);
   3a98c:	6828      	ldr	r0, [r5, #0]
   3a98e:	f7f8 feaf 	bl	336f0 <ull_rx_put>
}
   3a992:	b008      	add	sp, #32
   3a994:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		ull_rx_sched();
   3a998:	f7f8 beba 	b.w	33710 <ull_rx_sched>
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   3a99c:	7f6a      	ldrb	r2, [r5, #29]
   3a99e:	2a0c      	cmp	r2, #12
   3a9a0:	f47f af6e 	bne.w	3a880 <isr_rx+0x14>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   3a9a4:	f1b8 0f00 	cmp.w	r8, #0
   3a9a8:	f47f af6a 	bne.w	3a880 <isr_rx+0x14>
	return (((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0U) ||
   3a9ac:	7a62      	ldrb	r2, [r4, #9]
		 devmatch_ok) &&
   3a9ae:	07d0      	lsls	r0, r2, #31
   3a9b0:	d502      	bpl.n	3a9b8 <isr_rx+0x14c>
	return (((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0U) ||
   3a9b2:	2e00      	cmp	r6, #0
   3a9b4:	f43f af64 	beq.w	3a880 <isr_rx+0x14>
	return (tx_addr == sr->rx_addr) &&
   3a9b8:	ebba 1fd1 	cmp.w	sl, r1, lsr #7
   3a9bc:	f47f af60 	bne.w	3a880 <isr_rx+0x14>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   3a9c0:	2206      	movs	r2, #6
   3a9c2:	f105 0124 	add.w	r1, r5, #36	; 0x24
   3a9c6:	4618      	mov	r0, r3
   3a9c8:	9305      	str	r3, [sp, #20]
   3a9ca:	f009 fc95 	bl	442f8 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   3a9ce:	b300      	cbz	r0, 3aa12 <isr_rx+0x1a6>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   3a9d0:	7f2a      	ldrb	r2, [r5, #28]
   3a9d2:	9b05      	ldr	r3, [sp, #20]
   3a9d4:	f002 020f 	and.w	r2, r2, #15
   3a9d8:	e790      	b.n	3a8fc <isr_rx+0x90>
		LL_ASSERT(!radio_is_ready());
   3a9da:	4a20      	ldr	r2, [pc, #128]	; (3aa5c <isr_rx+0x1f0>)
   3a9dc:	4920      	ldr	r1, [pc, #128]	; (3aa60 <isr_rx+0x1f4>)
   3a9de:	4821      	ldr	r0, [pc, #132]	; (3aa64 <isr_rx+0x1f8>)
   3a9e0:	f240 633f 	movw	r3, #1599	; 0x63f
   3a9e4:	f007 fdf0 	bl	425c8 <assert_print>
   3a9e8:	4040      	eors	r0, r0
   3a9ea:	f380 8811 	msr	BASEPRI, r0
   3a9ee:	f04f 0003 	mov.w	r0, #3
   3a9f2:	df02      	svc	2
   3a9f4:	e7aa      	b.n	3a94c <isr_rx+0xe0>
	LL_ASSERT(node_rx);
   3a9f6:	4a19      	ldr	r2, [pc, #100]	; (3aa5c <isr_rx+0x1f0>)
   3a9f8:	491b      	ldr	r1, [pc, #108]	; (3aa68 <isr_rx+0x1fc>)
   3a9fa:	481a      	ldr	r0, [pc, #104]	; (3aa64 <isr_rx+0x1f8>)
   3a9fc:	f240 53df 	movw	r3, #1503	; 0x5df
   3aa00:	f007 fde2 	bl	425c8 <assert_print>
   3aa04:	4040      	eors	r0, r0
   3aa06:	f380 8811 	msr	BASEPRI, r0
   3aa0a:	f04f 0003 	mov.w	r0, #3
   3aa0e:	df02      	svc	2
   3aa10:	e758      	b.n	3a8c4 <isr_rx+0x58>
		radio_isr_set(isr_done, lll);
   3aa12:	4810      	ldr	r0, [pc, #64]	; (3aa54 <isr_rx+0x1e8>)
   3aa14:	4621      	mov	r1, r4
   3aa16:	f000 fe19 	bl	3b64c <radio_isr_set>
		radio_switch_complete_and_disable();
   3aa1a:	f001 f801 	bl	3ba20 <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   3aa1e:	7e23      	ldrb	r3, [r4, #24]
   3aa20:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   3aa24:	69d8      	ldr	r0, [r3, #28]
   3aa26:	f000 fee1 	bl	3b7ec <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   3aa2a:	f000 ff15 	bl	3b858 <radio_is_ready>
   3aa2e:	b910      	cbnz	r0, 3aa36 <isr_rx+0x1ca>
}
   3aa30:	b008      	add	sp, #32
   3aa32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		LL_ASSERT(!radio_is_ready());
   3aa36:	4a09      	ldr	r2, [pc, #36]	; (3aa5c <isr_rx+0x1f0>)
   3aa38:	4909      	ldr	r1, [pc, #36]	; (3aa60 <isr_rx+0x1f4>)
   3aa3a:	480a      	ldr	r0, [pc, #40]	; (3aa64 <isr_rx+0x1f8>)
   3aa3c:	f44f 63bf 	mov.w	r3, #1528	; 0x5f8
   3aa40:	f007 fdc2 	bl	425c8 <assert_print>
   3aa44:	4040      	eors	r0, r0
   3aa46:	f380 8811 	msr	BASEPRI, r0
   3aa4a:	f04f 0003 	mov.w	r0, #3
   3aa4e:	df02      	svc	2
		if (!err) {
   3aa50:	e7ee      	b.n	3aa30 <isr_rx+0x1c4>
   3aa52:	bf00      	nop
   3aa54:	0003a615 	.word	0x0003a615
   3aa58:	0003a239 	.word	0x0003a239
   3aa5c:	0004a078 	.word	0x0004a078
   3aa60:	0004a0cc 	.word	0x0004a0cc
   3aa64:	000497b0 	.word	0x000497b0
   3aa68:	0004a0c4 	.word	0x0004a0c4

0003aa6c <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   3aa6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3aa6e:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   3aa70:	f7ff f966 	bl	39d40 <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   3aa74:	f7f8 ff18 	bl	338a8 <ull_event_done_extra_get>
	LL_ASSERT(e);
   3aa78:	4604      	mov	r4, r0
   3aa7a:	2800      	cmp	r0, #0
   3aa7c:	d036      	beq.n	3aaec <isr_done+0x80>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
	e->crc_valid = crc_valid;
   3aa7e:	4922      	ldr	r1, [pc, #136]	; (3ab08 <isr_done+0x9c>)
   3aa80:	79a2      	ldrb	r2, [r4, #6]
   3aa82:	7808      	ldrb	r0, [r1, #0]
	e->trx_cnt = trx_cnt;
   3aa84:	4b21      	ldr	r3, [pc, #132]	; (3ab0c <isr_done+0xa0>)
	e->crc_valid = crc_valid;
   3aa86:	f360 0200 	bfi	r2, r0, #0, #1
   3aa8a:	71a2      	strb	r2, [r4, #6]

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   3aa8c:	4a20      	ldr	r2, [pc, #128]	; (3ab10 <isr_done+0xa4>)
	e->trx_cnt = trx_cnt;
   3aa8e:	881b      	ldrh	r3, [r3, #0]
	e->mic_state = mic_state;
   3aa90:	7812      	ldrb	r2, [r2, #0]
	e->trx_cnt = trx_cnt;
   3aa92:	80a3      	strh	r3, [r4, #4]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   3aa94:	2101      	movs	r1, #1
   3aa96:	7021      	strb	r1, [r4, #0]
	e->mic_state = mic_state;
   3aa98:	71e2      	strb	r2, [r4, #7]
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   3aa9a:	b11b      	cbz	r3, 3aaa4 <isr_done+0x38>
		struct lll_conn *lll = param;

		if (lll->role) {
   3aa9c:	f995 301d 	ldrsb.w	r3, [r5, #29]
   3aaa0:	2b00      	cmp	r3, #0
   3aaa2:	db04      	blt.n	3aaae <isr_done+0x42>
			lll->periph.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   3aaa4:	4628      	mov	r0, r5
}
   3aaa6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   3aaaa:	f7ff b955 	b.w	39d58 <lll_isr_cleanup>
				addr_us_get(lll->phy_rx);
   3aaae:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
   3aab2:	f003 0307 	and.w	r3, r3, #7
 */
#define HCTO_START_DELAY_US 1U

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   3aab6:	2b02      	cmp	r3, #2
   3aab8:	d016      	beq.n	3aae8 <isr_done+0x7c>
	default:
	case BIT(0):
		return 40;
   3aaba:	2b04      	cmp	r3, #4
   3aabc:	bf0c      	ite	eq
   3aabe:	f44f 77bc 	moveq.w	r7, #376	; 0x178
   3aac2:	2728      	movne	r7, #40	; 0x28
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   3aac4:	f001 f8cc 	bl	3bc60 <radio_tmr_aa_restore>
   3aac8:	4606      	mov	r6, r0
   3aaca:	f001 f8cf 	bl	3bc6c <radio_tmr_ready_get>
   3aace:	1a36      	subs	r6, r6, r0
			e->drift.start_to_address_actual_us =
   3aad0:	60a6      	str	r6, [r4, #8]
				lll->periph.window_widening_event_us;
   3aad2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   3aad4:	e9c4 2703 	strd	r2, r7, [r4, #12]
			lll->periph.window_widening_event_us = 0;
   3aad8:	2300      	movs	r3, #0
   3aada:	632b      	str	r3, [r5, #48]	; 0x30
			lll->periph.window_size_event_us = 0;
   3aadc:	63ab      	str	r3, [r5, #56]	; 0x38
	lll_isr_cleanup(param);
   3aade:	4628      	mov	r0, r5
}
   3aae0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   3aae4:	f7ff b938 	b.w	39d58 <lll_isr_cleanup>
	switch (phy) {
   3aae8:	2718      	movs	r7, #24
   3aaea:	e7eb      	b.n	3aac4 <isr_done+0x58>
	LL_ASSERT(e);
   3aaec:	4a09      	ldr	r2, [pc, #36]	; (3ab14 <isr_done+0xa8>)
   3aaee:	490a      	ldr	r1, [pc, #40]	; (3ab18 <isr_done+0xac>)
   3aaf0:	480a      	ldr	r0, [pc, #40]	; (3ab1c <isr_done+0xb0>)
   3aaf2:	f240 3345 	movw	r3, #837	; 0x345
   3aaf6:	f007 fd67 	bl	425c8 <assert_print>
   3aafa:	4040      	eors	r0, r0
   3aafc:	f380 8811 	msr	BASEPRI, r0
   3ab00:	f04f 0003 	mov.w	r0, #3
   3ab04:	df02      	svc	2
   3ab06:	e7ba      	b.n	3aa7e <isr_done+0x12>
   3ab08:	20003b19 	.word	0x20003b19
   3ab0c:	200039da 	.word	0x200039da
   3ab10:	20003b18 	.word	0x20003b18
   3ab14:	0004a110 	.word	0x0004a110
   3ab18:	00049b4c 	.word	0x00049b4c
   3ab1c:	000497b0 	.word	0x000497b0

0003ab20 <lll_conn_init>:
{
   3ab20:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   3ab22:	f000 fecd 	bl	3b8c0 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   3ab26:	7802      	ldrb	r2, [r0, #0]
	p = (void *)radio_pkt_empty_get();
   3ab28:	4603      	mov	r3, r0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   3ab2a:	2101      	movs	r1, #1
   3ab2c:	f361 0201 	bfi	r2, r1, #0, #2
   3ab30:	701a      	strb	r2, [r3, #0]
}
   3ab32:	2000      	movs	r0, #0
   3ab34:	bd08      	pop	{r3, pc}
   3ab36:	bf00      	nop

0003ab38 <lll_conn_reset>:
}
   3ab38:	2000      	movs	r0, #0
   3ab3a:	4770      	bx	lr

0003ab3c <lll_conn_flush>:
}
   3ab3c:	4770      	bx	lr
   3ab3e:	bf00      	nop

0003ab40 <lll_conn_prepare_reset>:
{
   3ab40:	b410      	push	{r4}
	crc_valid = 0U;
   3ab42:	4805      	ldr	r0, [pc, #20]	; (3ab58 <lll_conn_prepare_reset+0x18>)
	trx_cnt = 0U;
   3ab44:	4c05      	ldr	r4, [pc, #20]	; (3ab5c <lll_conn_prepare_reset+0x1c>)
	crc_expire = 0U;
   3ab46:	4906      	ldr	r1, [pc, #24]	; (3ab60 <lll_conn_prepare_reset+0x20>)
	mic_state = LLL_CONN_MIC_NONE;
   3ab48:	4a06      	ldr	r2, [pc, #24]	; (3ab64 <lll_conn_prepare_reset+0x24>)
	trx_cnt = 0U;
   3ab4a:	2300      	movs	r3, #0
   3ab4c:	8023      	strh	r3, [r4, #0]
	crc_valid = 0U;
   3ab4e:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   3ab50:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   3ab52:	7013      	strb	r3, [r2, #0]
}
   3ab54:	bc10      	pop	{r4}
   3ab56:	4770      	bx	lr
   3ab58:	20003b19 	.word	0x20003b19
   3ab5c:	200039da 	.word	0x200039da
   3ab60:	20003b1a 	.word	0x20003b1a
   3ab64:	20003b18 	.word	0x20003b18

0003ab68 <lll_conn_abort_cb>:
{
   3ab68:	b538      	push	{r3, r4, r5, lr}
	if (!prepare_param) {
   3ab6a:	b338      	cbz	r0, 3abbc <lll_conn_abort_cb+0x54>
	err = lll_hfclock_off();
   3ab6c:	460d      	mov	r5, r1
   3ab6e:	4604      	mov	r4, r0
   3ab70:	f7ff faa2 	bl	3a0b8 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   3ab74:	2800      	cmp	r0, #0
   3ab76:	db14      	blt.n	3aba2 <lll_conn_abort_cb+0x3a>
	lll = prepare_param->param;
   3ab78:	68e2      	ldr	r2, [r4, #12]
	lll->latency_prepare += (prepare_param->lazy + 1);
   3ab7a:	8923      	ldrh	r3, [r4, #8]
   3ab7c:	8a51      	ldrh	r1, [r2, #18]
   3ab7e:	3301      	adds	r3, #1
   3ab80:	440b      	add	r3, r1
   3ab82:	8253      	strh	r3, [r2, #18]
	e = ull_event_done_extra_get();
   3ab84:	f7f8 fe90 	bl	338a8 <ull_event_done_extra_get>
	LL_ASSERT(e);
   3ab88:	4604      	mov	r4, r0
   3ab8a:	b1f0      	cbz	r0, 3abca <lll_conn_abort_cb+0x62>
	e->trx_cnt = 0U;
   3ab8c:	6863      	ldr	r3, [r4, #4]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   3ab8e:	2201      	movs	r2, #1
	e->trx_cnt = 0U;
   3ab90:	f403 037e 	and.w	r3, r3, #16646144	; 0xfe0000
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   3ab94:	7022      	strb	r2, [r4, #0]
	e->trx_cnt = 0U;
   3ab96:	6063      	str	r3, [r4, #4]
	lll_done(param);
   3ab98:	4628      	mov	r0, r5
}
   3ab9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_done(param);
   3ab9e:	f7ff b805 	b.w	39bac <lll_done>
	LL_ASSERT(err >= 0);
   3aba2:	4a10      	ldr	r2, [pc, #64]	; (3abe4 <lll_conn_abort_cb+0x7c>)
   3aba4:	4910      	ldr	r1, [pc, #64]	; (3abe8 <lll_conn_abort_cb+0x80>)
   3aba6:	4811      	ldr	r0, [pc, #68]	; (3abec <lll_conn_abort_cb+0x84>)
   3aba8:	23ab      	movs	r3, #171	; 0xab
   3abaa:	f007 fd0d 	bl	425c8 <assert_print>
   3abae:	4040      	eors	r0, r0
   3abb0:	f380 8811 	msr	BASEPRI, r0
   3abb4:	f04f 0003 	mov.w	r0, #3
   3abb8:	df02      	svc	2
   3abba:	e7dd      	b.n	3ab78 <lll_conn_abort_cb+0x10>
		radio_isr_set(isr_done, param);
   3abbc:	480c      	ldr	r0, [pc, #48]	; (3abf0 <lll_conn_abort_cb+0x88>)
   3abbe:	f000 fd45 	bl	3b64c <radio_isr_set>
}
   3abc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_disable();
   3abc6:	f000 be27 	b.w	3b818 <radio_disable>
	LL_ASSERT(e);
   3abca:	4a06      	ldr	r2, [pc, #24]	; (3abe4 <lll_conn_abort_cb+0x7c>)
   3abcc:	4909      	ldr	r1, [pc, #36]	; (3abf4 <lll_conn_abort_cb+0x8c>)
   3abce:	4807      	ldr	r0, [pc, #28]	; (3abec <lll_conn_abort_cb+0x84>)
   3abd0:	23b3      	movs	r3, #179	; 0xb3
   3abd2:	f007 fcf9 	bl	425c8 <assert_print>
   3abd6:	4040      	eors	r0, r0
   3abd8:	f380 8811 	msr	BASEPRI, r0
   3abdc:	f04f 0003 	mov.w	r0, #3
   3abe0:	df02      	svc	2
   3abe2:	e7d3      	b.n	3ab8c <lll_conn_abort_cb+0x24>
   3abe4:	0004a110 	.word	0x0004a110
   3abe8:	0004a028 	.word	0x0004a028
   3abec:	000497b0 	.word	0x000497b0
   3abf0:	0003aa6d 	.word	0x0003aa6d
   3abf4:	00049b4c 	.word	0x00049b4c

0003abf8 <lll_conn_rx_pkt_set>:
{
   3abf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3abfa:	4605      	mov	r5, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   3abfc:	2001      	movs	r0, #1
   3abfe:	f7f8 fd3f 	bl	33680 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   3ac02:	4604      	mov	r4, r0
   3ac04:	b348      	cbz	r0, 3ac5a <lll_conn_rx_pkt_set+0x62>
	phy = lll->phy_rx;
   3ac06:	f895 6045 	ldrb.w	r6, [r5, #69]	; 0x45
	max_rx_octets = lll->max_rx_octets;
   3ac0a:	8fef      	ldrh	r7, [r5, #62]	; 0x3e
	phy = lll->phy_rx;
   3ac0c:	f006 0607 	and.w	r6, r6, #7
	radio_phy_set(phy, 0);
   3ac10:	2100      	movs	r1, #0
   3ac12:	4630      	mov	r0, r6
   3ac14:	f000 fd78 	bl	3b708 <radio_phy_set>
	} else if (lll->enc_rx) {
   3ac18:	f895 305e 	ldrb.w	r3, [r5, #94]	; 0x5e
				    RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   3ac1c:	0072      	lsls	r2, r6, #1
	} else if (lll->enc_rx) {
   3ac1e:	071b      	lsls	r3, r3, #28
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   3ac20:	b2f9      	uxtb	r1, r7
   3ac22:	f042 0201 	orr.w	r2, r2, #1
						      node_rx->pdu));
   3ac26:	f104 041c 	add.w	r4, r4, #28
	} else if (lll->enc_rx) {
   3ac2a:	d50e      	bpl.n	3ac4a <lll_conn_rx_pkt_set+0x52>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   3ac2c:	3104      	adds	r1, #4
   3ac2e:	b2c9      	uxtb	r1, r1
   3ac30:	2008      	movs	r0, #8
   3ac32:	f000 fdaf 	bl	3b794 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   3ac36:	4622      	mov	r2, r4
   3ac38:	4631      	mov	r1, r6
   3ac3a:	f105 005f 	add.w	r0, r5, #95	; 0x5f
   3ac3e:	f001 f82f 	bl	3bca0 <radio_ccm_rx_pkt_set>
}
   3ac42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   3ac46:	f000 bdcb 	b.w	3b7e0 <radio_pkt_rx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_rx_octets,
   3ac4a:	2008      	movs	r0, #8
   3ac4c:	f000 fda2 	bl	3b794 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   3ac50:	4620      	mov	r0, r4
}
   3ac52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   3ac56:	f000 bdc3 	b.w	3b7e0 <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   3ac5a:	4a07      	ldr	r2, [pc, #28]	; (3ac78 <lll_conn_rx_pkt_set+0x80>)
   3ac5c:	4907      	ldr	r1, [pc, #28]	; (3ac7c <lll_conn_rx_pkt_set+0x84>)
   3ac5e:	4808      	ldr	r0, [pc, #32]	; (3ac80 <lll_conn_rx_pkt_set+0x88>)
   3ac60:	f44f 7322 	mov.w	r3, #648	; 0x288
   3ac64:	f007 fcb0 	bl	425c8 <assert_print>
   3ac68:	4040      	eors	r0, r0
   3ac6a:	f380 8811 	msr	BASEPRI, r0
   3ac6e:	f04f 0003 	mov.w	r0, #3
   3ac72:	df02      	svc	2
   3ac74:	e7c7      	b.n	3ac06 <lll_conn_rx_pkt_set+0xe>
   3ac76:	bf00      	nop
   3ac78:	0004a110 	.word	0x0004a110
   3ac7c:	0004a0c4 	.word	0x0004a0c4
   3ac80:	000497b0 	.word	0x000497b0

0003ac84 <lll_conn_isr_tx>:
{
   3ac84:	b538      	push	{r3, r4, r5, lr}
   3ac86:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   3ac88:	f7ff f848 	bl	39d1c <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   3ac8c:	2096      	movs	r0, #150	; 0x96
   3ac8e:	f000 ff19 	bl	3bac4 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   3ac92:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   3ac96:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   3ac9a:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   3ac9e:	f000 0007 	and.w	r0, r0, #7
   3aca2:	f002 0207 	and.w	r2, r2, #7
   3aca6:	2100      	movs	r1, #0
   3aca8:	f000 fe5a 	bl	3b960 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   3acac:	4620      	mov	r0, r4
   3acae:	f7ff ffa3 	bl	3abf8 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   3acb2:	f000 fdd1 	bl	3b858 <radio_is_ready>
   3acb6:	bb58      	cbnz	r0, 3ad10 <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + (EVENT_CLOCK_JITTER_US << 1) +
   3acb8:	f000 ffec 	bl	3bc94 <radio_tmr_tifs_base_get>
   3acbc:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   3acbe:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   3acc2:	2101      	movs	r1, #1
   3acc4:	f000 0007 	and.w	r0, r0, #7
   3acc8:	f000 fd9a 	bl	3b800 <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   3accc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   3acd0:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   3acd4:	4405      	add	r5, r0
   3acd6:	2b02      	cmp	r3, #2
   3acd8:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   3acdc:	d016      	beq.n	3ad0c <lll_conn_isr_tx+0x88>
		return 40;
   3acde:	2b04      	cmp	r3, #4
   3ace0:	bf0c      	ite	eq
   3ace2:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   3ace6:	2328      	movne	r3, #40	; 0x28
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   3ace8:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
   3acec:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   3acf0:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   3acf4:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   3acf6:	f000 fd7f 	bl	3b7f8 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   3acfa:	1a28      	subs	r0, r5, r0
   3acfc:	f000 ff82 	bl	3bc04 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   3ad00:	4621      	mov	r1, r4
   3ad02:	480a      	ldr	r0, [pc, #40]	; (3ad2c <lll_conn_isr_tx+0xa8>)
}
   3ad04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   3ad08:	f000 bca0 	b.w	3b64c <radio_isr_set>
	switch (phy) {
   3ad0c:	2318      	movs	r3, #24
   3ad0e:	e7eb      	b.n	3ace8 <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   3ad10:	4a07      	ldr	r2, [pc, #28]	; (3ad30 <lll_conn_isr_tx+0xac>)
   3ad12:	4908      	ldr	r1, [pc, #32]	; (3ad34 <lll_conn_isr_tx+0xb0>)
   3ad14:	4808      	ldr	r0, [pc, #32]	; (3ad38 <lll_conn_isr_tx+0xb4>)
   3ad16:	f240 233d 	movw	r3, #573	; 0x23d
   3ad1a:	f007 fc55 	bl	425c8 <assert_print>
   3ad1e:	4040      	eors	r0, r0
   3ad20:	f380 8811 	msr	BASEPRI, r0
   3ad24:	f04f 0003 	mov.w	r0, #3
   3ad28:	df02      	svc	2
   3ad2a:	e7c5      	b.n	3acb8 <lll_conn_isr_tx+0x34>
   3ad2c:	0003ae51 	.word	0x0003ae51
   3ad30:	0004a110 	.word	0x0004a110
   3ad34:	0004a0cc 	.word	0x0004a0cc
   3ad38:	000497b0 	.word	0x000497b0

0003ad3c <lll_conn_tx_pkt_set>:
{
   3ad3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3ad3e:	460f      	mov	r7, r1
	phy = lll->phy_tx;
   3ad40:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
	max_tx_octets = lll->max_tx_octets;
   3ad44:	8f86      	ldrh	r6, [r0, #60]	; 0x3c
	phy = lll->phy_tx;
   3ad46:	f001 0407 	and.w	r4, r1, #7
{
   3ad4a:	4605      	mov	r5, r0
	radio_phy_set(phy, flags);
   3ad4c:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   3ad50:	4620      	mov	r0, r4
   3ad52:	f000 fcd9 	bl	3b708 <radio_phy_set>
	} else if (lll->enc_tx) {
   3ad56:	f895 305e 	ldrb.w	r3, [r5, #94]	; 0x5e
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   3ad5a:	0062      	lsls	r2, r4, #1
	} else if (lll->enc_tx) {
   3ad5c:	06db      	lsls	r3, r3, #27
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   3ad5e:	f042 0201 	orr.w	r2, r2, #1
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   3ad62:	b2f1      	uxtb	r1, r6
	} else if (lll->enc_tx) {
   3ad64:	d50d      	bpl.n	3ad82 <lll_conn_tx_pkt_set+0x46>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   3ad66:	3104      	adds	r1, #4
   3ad68:	b2c9      	uxtb	r1, r1
   3ad6a:	2008      	movs	r0, #8
   3ad6c:	f000 fd12 	bl	3b794 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   3ad70:	4639      	mov	r1, r7
   3ad72:	f105 0080 	add.w	r0, r5, #128	; 0x80
   3ad76:	f000 ffdb 	bl	3bd30 <radio_ccm_tx_pkt_set>
}
   3ad7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   3ad7e:	f000 bd35 	b.w	3b7ec <radio_pkt_tx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_tx_octets, pkt_flags);
   3ad82:	2008      	movs	r0, #8
   3ad84:	f000 fd06 	bl	3b794 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   3ad88:	4638      	mov	r0, r7
}
   3ad8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   3ad8e:	f000 bd2d 	b.w	3b7ec <radio_pkt_tx_set>
   3ad92:	bf00      	nop

0003ad94 <lll_conn_pdu_tx_prep>:
{
   3ad94:	b5f0      	push	{r4, r5, r6, r7, lr}
   3ad96:	4605      	mov	r5, r0
   3ad98:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   3ad9a:	aa01      	add	r2, sp, #4
   3ad9c:	6c80      	ldr	r0, [r0, #72]	; 0x48
{
   3ad9e:	460f      	mov	r7, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   3ada0:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
   3ada2:	f7f5 f9a5 	bl	300f0 <memq_peek>
	if (lll->empty || !link) {
   3ada6:	f895 305e 	ldrb.w	r3, [r5, #94]	; 0x5e
   3adaa:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   3adac:	4606      	mov	r6, r0
	if (lll->empty || !link) {
   3adae:	d438      	bmi.n	3ae22 <lll_conn_pdu_tx_prep+0x8e>
   3adb0:	b348      	cbz	r0, 3ae06 <lll_conn_pdu_tx_prep+0x72>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   3adb2:	9c01      	ldr	r4, [sp, #4]
   3adb4:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
		if (!lll->packet_tx_head_len) {
   3adb8:	f895 205c 	ldrb.w	r2, [r5, #92]	; 0x5c
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   3adbc:	3404      	adds	r4, #4
   3adbe:	441c      	add	r4, r3
		if (!lll->packet_tx_head_len) {
   3adc0:	b912      	cbnz	r2, 3adc8 <lll_conn_pdu_tx_prep+0x34>
			lll->packet_tx_head_len = p->len;
   3adc2:	7862      	ldrb	r2, [r4, #1]
   3adc4:	f885 205c 	strb.w	r2, [r5, #92]	; 0x5c
		if (lll->packet_tx_head_offset) {
   3adc8:	b133      	cbz	r3, 3add8 <lll_conn_pdu_tx_prep+0x44>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   3adca:	7823      	ldrb	r3, [r4, #0]
   3adcc:	2201      	movs	r2, #1
   3adce:	f362 0301 	bfi	r3, r2, #0, #2
   3add2:	7023      	strb	r3, [r4, #0]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   3add4:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
   3add8:	f895 205c 	ldrb.w	r2, [r5, #92]	; 0x5c
   3addc:	1ad3      	subs	r3, r2, r3
   3adde:	7063      	strb	r3, [r4, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   3ade0:	4628      	mov	r0, r5
   3ade2:	f7fe f9c3 	bl	3916c <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   3ade6:	7863      	ldrb	r3, [r4, #1]
   3ade8:	4283      	cmp	r3, r0
   3adea:	d92a      	bls.n	3ae42 <lll_conn_pdu_tx_prep+0xae>
			p->len = max_tx_octets;
   3adec:	7060      	strb	r0, [r4, #1]
{
   3adee:	2101      	movs	r1, #1
			p->md = 1U;
   3adf0:	7823      	ldrb	r3, [r4, #0]
   3adf2:	f003 030f 	and.w	r3, r3, #15
		p->resv = 0U;
   3adf6:	2200      	movs	r2, #0
			p->md = 1U;
   3adf8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
   3adfc:	7023      	strb	r3, [r4, #0]
		p->resv = 0U;
   3adfe:	70a2      	strb	r2, [r4, #2]
	*pdu_data_tx = p;
   3ae00:	603c      	str	r4, [r7, #0]
}
   3ae02:	b003      	add	sp, #12
   3ae04:	bdf0      	pop	{r4, r5, r6, r7, pc}
		lll->empty = 1U;
   3ae06:	f043 0304 	orr.w	r3, r3, #4
   3ae0a:	f885 305e 	strb.w	r3, [r5, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   3ae0e:	f000 fd57 	bl	3b8c0 <radio_pkt_empty_get>
   3ae12:	4604      	mov	r4, r0
			p->md = 0U;
   3ae14:	7823      	ldrb	r3, [r4, #0]
   3ae16:	f36f 1304 	bfc	r3, #4, #1
   3ae1a:	7023      	strb	r3, [r4, #0]
	*pdu_data_tx = p;
   3ae1c:	603c      	str	r4, [r7, #0]
}
   3ae1e:	b003      	add	sp, #12
   3ae20:	bdf0      	pop	{r4, r5, r6, r7, pc}
		lll->empty = 1U;
   3ae22:	f043 0304 	orr.w	r3, r3, #4
   3ae26:	f885 305e 	strb.w	r3, [r5, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   3ae2a:	f000 fd49 	bl	3b8c0 <radio_pkt_empty_get>
   3ae2e:	4604      	mov	r4, r0
		if (link || FORCE_MD_CNT_GET()) {
   3ae30:	2e00      	cmp	r6, #0
   3ae32:	d0ef      	beq.n	3ae14 <lll_conn_pdu_tx_prep+0x80>
			p->md = 1U;
   3ae34:	7803      	ldrb	r3, [r0, #0]
   3ae36:	f043 0310 	orr.w	r3, r3, #16
   3ae3a:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   3ae3c:	603c      	str	r4, [r7, #0]
}
   3ae3e:	b003      	add	sp, #12
   3ae40:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   3ae42:	6832      	ldr	r2, [r6, #0]
   3ae44:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   3ae46:	429a      	cmp	r2, r3
   3ae48:	d1d1      	bne.n	3adee <lll_conn_pdu_tx_prep+0x5a>
   3ae4a:	2100      	movs	r1, #0
   3ae4c:	e7d0      	b.n	3adf0 <lll_conn_pdu_tx_prep+0x5c>
   3ae4e:	bf00      	nop

0003ae50 <lll_conn_isr_rx>:
{
   3ae50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3ae54:	b082      	sub	sp, #8
   3ae56:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   3ae58:	f000 fd08 	bl	3b86c <radio_is_done>
	if (trx_done) {
   3ae5c:	b2c0      	uxtb	r0, r0
   3ae5e:	b950      	cbnz	r0, 3ae76 <lll_conn_isr_rx+0x26>
	lll_isr_rx_status_reset();
   3ae60:	f7fe ff64 	bl	39d2c <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   3ae64:	48b8      	ldr	r0, [pc, #736]	; (3b148 <lll_conn_isr_rx+0x2f8>)
   3ae66:	4621      	mov	r1, r4
   3ae68:	f000 fbf0 	bl	3b64c <radio_isr_set>
}
   3ae6c:	b002      	add	sp, #8
   3ae6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		radio_disable();
   3ae72:	f000 bcd1 	b.w	3b818 <radio_disable>
		crc_ok = radio_crc_is_valid();
   3ae76:	f000 fd19 	bl	3b8ac <radio_crc_is_valid>
   3ae7a:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   3ae7c:	f000 fde6 	bl	3ba4c <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   3ae80:	f7fe ff54 	bl	39d2c <lll_isr_rx_status_reset>
	trx_cnt++;
   3ae84:	4ab1      	ldr	r2, [pc, #708]	; (3b14c <lll_conn_isr_rx+0x2fc>)
   3ae86:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   3ae88:	2001      	movs	r0, #1
	trx_cnt++;
   3ae8a:	4403      	add	r3, r0
   3ae8c:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   3ae8e:	f7f8 fbf7 	bl	33680 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   3ae92:	4680      	mov	r8, r0
   3ae94:	2800      	cmp	r0, #0
   3ae96:	f000 80dd 	beq.w	3b054 <lll_conn_isr_rx+0x204>
	if (crc_ok) {
   3ae9a:	2d00      	cmp	r5, #0
   3ae9c:	d149      	bne.n	3af32 <lll_conn_isr_rx+0xe2>
		if (crc_expire == 0U) {
   3ae9e:	4bac      	ldr	r3, [pc, #688]	; (3b150 <lll_conn_isr_rx+0x300>)
   3aea0:	781e      	ldrb	r6, [r3, #0]
   3aea2:	2e00      	cmp	r6, #0
   3aea4:	f040 80a4 	bne.w	3aff0 <lll_conn_isr_rx+0x1a0>
		crc_expire--;
   3aea8:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   3aeaa:	a901      	add	r1, sp, #4
   3aeac:	4620      	mov	r0, r4
		crc_expire--;
   3aeae:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   3aeb0:	f7ff ff70 	bl	3ad94 <lll_conn_pdu_tx_prep>
	pdu_data_tx->sn = lll->sn;
   3aeb4:	2600      	movs	r6, #0
   3aeb6:	9f01      	ldr	r7, [sp, #4]
   3aeb8:	4635      	mov	r5, r6
		radio_tmr_tifs_set(EVENT_IFS_US);
   3aeba:	2096      	movs	r0, #150	; 0x96
   3aebc:	f000 fe02 	bl	3bac4 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   3aec0:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   3aec4:	f000 0007 	and.w	r0, r0, #7
   3aec8:	f000 fd02 	bl	3b8d0 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   3aecc:	48a1      	ldr	r0, [pc, #644]	; (3b154 <lll_conn_isr_rx+0x304>)
   3aece:	4621      	mov	r1, r4
   3aed0:	f000 fbbc 	bl	3b64c <radio_isr_set>
		radio_tmr_end_capture();
   3aed4:	f000 fed0 	bl	3bc78 <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   3aed8:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
   3aedc:	783b      	ldrb	r3, [r7, #0]
   3aede:	f362 03c3 	bfi	r3, r2, #3, #1
   3aee2:	703b      	strb	r3, [r7, #0]
	pdu_data_tx->nesn = lll->nesn;
   3aee4:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   3aee8:	783a      	ldrb	r2, [r7, #0]
   3aeea:	f3c3 0340 	ubfx	r3, r3, #1, #1
   3aeee:	f363 0282 	bfi	r2, r3, #2, #1
   3aef2:	703a      	strb	r2, [r7, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   3aef4:	4639      	mov	r1, r7
   3aef6:	4620      	mov	r0, r4
   3aef8:	f7ff ff20 	bl	3ad3c <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   3aefc:	f000 fcac 	bl	3b858 <radio_is_ready>
   3af00:	2800      	cmp	r0, #0
   3af02:	f040 8099 	bne.w	3b038 <lll_conn_isr_rx+0x1e8>
	if (!radio_tmr_aa_restore()) {
   3af06:	f000 feab 	bl	3bc60 <radio_tmr_aa_restore>
   3af0a:	2800      	cmp	r0, #0
   3af0c:	d066      	beq.n	3afdc <lll_conn_isr_rx+0x18c>
	if (tx_release) {
   3af0e:	2d00      	cmp	r5, #0
   3af10:	d06a      	beq.n	3afe8 <lll_conn_isr_rx+0x198>
		LL_ASSERT(lll->handle != 0xFFFF);
   3af12:	89a0      	ldrh	r0, [r4, #12]
   3af14:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3af18:	4298      	cmp	r0, r3
   3af1a:	f000 80cc 	beq.w	3b0b6 <lll_conn_isr_rx+0x266>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   3af1e:	4629      	mov	r1, r5
   3af20:	f7fd ff9a 	bl	38e58 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   3af24:	2e00      	cmp	r6, #0
   3af26:	d175      	bne.n	3b014 <lll_conn_isr_rx+0x1c4>
}
   3af28:	b002      	add	sp, #8
   3af2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		ull_rx_sched();
   3af2e:	f7f8 bbef 	b.w	33710 <ull_rx_sched>
	if (pdu_data_rx->nesn != lll->sn) {
   3af32:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   3af36:	f898 201c 	ldrb.w	r2, [r8, #28]
   3af3a:	f003 0101 	and.w	r1, r3, #1
   3af3e:	f3c2 0080 	ubfx	r0, r2, #2, #1
   3af42:	4288      	cmp	r0, r1
   3af44:	f000 8096 	beq.w	3b074 <lll_conn_isr_rx+0x224>
		if (lll->role) {
   3af48:	f994 201d 	ldrsb.w	r2, [r4, #29]
		lll->sn++;
   3af4c:	f081 0101 	eor.w	r1, r1, #1
   3af50:	f361 0300 	bfi	r3, r1, #0, #1
		if (lll->role) {
   3af54:	2a00      	cmp	r2, #0
		lll->sn++;
   3af56:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (lll->role) {
   3af5a:	da05      	bge.n	3af68 <lll_conn_isr_rx+0x118>
			lll->periph.latency_enabled = 1;
   3af5c:	f894 3020 	ldrb.w	r3, [r4, #32]
   3af60:	f043 0304 	orr.w	r3, r3, #4
   3af64:	f884 3020 	strb.w	r3, [r4, #32]
		if (!lll->empty) {
   3af68:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   3af6c:	075d      	lsls	r5, r3, #29
   3af6e:	f100 80b3 	bmi.w	3b0d8 <lll_conn_isr_rx+0x288>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   3af72:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   3af76:	aa01      	add	r2, sp, #4
   3af78:	f7f5 f8ba 	bl	300f0 <memq_peek>
		if (link) {
   3af7c:	4605      	mov	r5, r0
   3af7e:	2800      	cmp	r0, #0
   3af80:	f000 80b0 	beq.w	3b0e4 <lll_conn_isr_rx+0x294>
					       lll->packet_tx_head_offset);
   3af84:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
			pdu_data_tx_len = pdu_data_tx->len;
   3af88:	9b01      	ldr	r3, [sp, #4]
   3af8a:	4413      	add	r3, r2
   3af8c:	7959      	ldrb	r1, [r3, #5]
			if (pdu_data_tx_len != 0U) {
   3af8e:	b171      	cbz	r1, 3afae <lll_conn_isr_rx+0x15e>
				if (lll->enc_tx) {
   3af90:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   3af94:	06d8      	lsls	r0, r3, #27
   3af96:	d50a      	bpl.n	3afae <lll_conn_isr_rx+0x15e>
					lll->ccm_tx.counter++;
   3af98:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   3af9c:	3301      	adds	r3, #1
   3af9e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   3afa2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   3afa6:	f143 0300 	adc.w	r3, r3, #0
   3afaa:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
			if (offset < lll->packet_tx_head_len) {
   3afae:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   3afb2:	440a      	add	r2, r1
   3afb4:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   3afb6:	429a      	cmp	r2, r3
   3afb8:	f0c0 809a 	bcc.w	3b0f0 <lll_conn_isr_rx+0x2a0>
			} else if (offset == lll->packet_tx_head_len) {
   3afbc:	f000 80b0 	beq.w	3b120 <lll_conn_isr_rx+0x2d0>
				LL_ASSERT(0);
   3afc0:	4a65      	ldr	r2, [pc, #404]	; (3b158 <lll_conn_isr_rx+0x308>)
   3afc2:	4966      	ldr	r1, [pc, #408]	; (3b15c <lll_conn_isr_rx+0x30c>)
   3afc4:	4866      	ldr	r0, [pc, #408]	; (3b160 <lll_conn_isr_rx+0x310>)
   3afc6:	f240 33d1 	movw	r3, #977	; 0x3d1
   3afca:	f007 fafd 	bl	425c8 <assert_print>
   3afce:	4040      	eors	r0, r0
   3afd0:	f380 8811 	msr	BASEPRI, r0
   3afd4:	f04f 0003 	mov.w	r0, #3
   3afd8:	df02      	svc	2
   3afda:	e083      	b.n	3b0e4 <lll_conn_isr_rx+0x294>
		radio_tmr_aa_save(radio_tmr_aa_get());
   3afdc:	f000 fe34 	bl	3bc48 <radio_tmr_aa_get>
   3afe0:	f000 fe38 	bl	3bc54 <radio_tmr_aa_save>
	if (tx_release) {
   3afe4:	2d00      	cmp	r5, #0
   3afe6:	d194      	bne.n	3af12 <lll_conn_isr_rx+0xc2>
	if (is_rx_enqueue) {
   3afe8:	b9a6      	cbnz	r6, 3b014 <lll_conn_isr_rx+0x1c4>
}
   3afea:	b002      	add	sp, #8
   3afec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		crc_expire--;
   3aff0:	3e01      	subs	r6, #1
   3aff2:	b2f6      	uxtb	r6, r6
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   3aff4:	a901      	add	r1, sp, #4
   3aff6:	4620      	mov	r0, r4
		crc_expire--;
   3aff8:	701e      	strb	r6, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   3affa:	f7ff fecb 	bl	3ad94 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   3affe:	2e00      	cmp	r6, #0
   3b000:	f47f af58 	bne.w	3aeb4 <lll_conn_isr_rx+0x64>
	pdu_data_tx->sn = lll->sn;
   3b004:	9f01      	ldr	r7, [sp, #4]
		radio_isr_set(isr_done, param);
   3b006:	4850      	ldr	r0, [pc, #320]	; (3b148 <lll_conn_isr_rx+0x2f8>)
   3b008:	4621      	mov	r1, r4
   3b00a:	f000 fb1f 	bl	3b64c <radio_isr_set>
			radio_switch_complete_and_disable();
   3b00e:	f000 fd07 	bl	3ba20 <radio_switch_complete_and_disable>
   3b012:	e761      	b.n	3aed8 <lll_conn_isr_rx+0x88>
		ull_pdu_rx_alloc();
   3b014:	f7f8 fb56 	bl	336c4 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   3b018:	2303      	movs	r3, #3
   3b01a:	f888 3004 	strb.w	r3, [r8, #4]
		node_rx->hdr.handle = lll->handle;
   3b01e:	89a3      	ldrh	r3, [r4, #12]
		ull_rx_put(node_rx->hdr.link, node_rx);
   3b020:	f8d8 0000 	ldr.w	r0, [r8]
		node_rx->hdr.handle = lll->handle;
   3b024:	f8a8 3006 	strh.w	r3, [r8, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   3b028:	4641      	mov	r1, r8
   3b02a:	f7f8 fb61 	bl	336f0 <ull_rx_put>
}
   3b02e:	b002      	add	sp, #8
   3b030:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		ull_rx_sched();
   3b034:	f7f8 bb6c 	b.w	33710 <ull_rx_sched>
	LL_ASSERT(!radio_is_ready());
   3b038:	4a47      	ldr	r2, [pc, #284]	; (3b158 <lll_conn_isr_rx+0x308>)
   3b03a:	494a      	ldr	r1, [pc, #296]	; (3b164 <lll_conn_isr_rx+0x314>)
   3b03c:	4848      	ldr	r0, [pc, #288]	; (3b160 <lll_conn_isr_rx+0x310>)
   3b03e:	f44f 73c6 	mov.w	r3, #396	; 0x18c
   3b042:	f007 fac1 	bl	425c8 <assert_print>
   3b046:	4040      	eors	r0, r0
   3b048:	f380 8811 	msr	BASEPRI, r0
   3b04c:	f04f 0003 	mov.w	r0, #3
   3b050:	df02      	svc	2
   3b052:	e758      	b.n	3af06 <lll_conn_isr_rx+0xb6>
	LL_ASSERT(node_rx);
   3b054:	4a40      	ldr	r2, [pc, #256]	; (3b158 <lll_conn_isr_rx+0x308>)
   3b056:	4944      	ldr	r1, [pc, #272]	; (3b168 <lll_conn_isr_rx+0x318>)
   3b058:	4841      	ldr	r0, [pc, #260]	; (3b160 <lll_conn_isr_rx+0x310>)
   3b05a:	23fe      	movs	r3, #254	; 0xfe
   3b05c:	f007 fab4 	bl	425c8 <assert_print>
   3b060:	4040      	eors	r0, r0
   3b062:	f380 8811 	msr	BASEPRI, r0
   3b066:	f04f 0003 	mov.w	r0, #3
   3b06a:	df02      	svc	2
	if (crc_ok) {
   3b06c:	2d00      	cmp	r5, #0
   3b06e:	f43f af16 	beq.w	3ae9e <lll_conn_isr_rx+0x4e>
   3b072:	e75e      	b.n	3af32 <lll_conn_isr_rx+0xe2>
	tx_release = NULL;
   3b074:	2500      	movs	r5, #0
	if ((pdu_data_rx->sn == lll->nesn) &&
   3b076:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   3b07a:	f3c3 0340 	ubfx	r3, r3, #1, #1
   3b07e:	429a      	cmp	r2, r3
   3b080:	d039      	beq.n	3b0f6 <lll_conn_isr_rx+0x2a6>
	is_rx_enqueue = 0U;
   3b082:	2600      	movs	r6, #0
		crc_expire = 0U;
   3b084:	4a32      	ldr	r2, [pc, #200]	; (3b150 <lll_conn_isr_rx+0x300>)
		crc_valid = 1U;
   3b086:	4b39      	ldr	r3, [pc, #228]	; (3b16c <lll_conn_isr_rx+0x31c>)
		crc_expire = 0U;
   3b088:	2100      	movs	r1, #0
   3b08a:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   3b08c:	4620      	mov	r0, r4
		crc_valid = 1U;
   3b08e:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   3b090:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   3b092:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   3b094:	f7ff fe7e 	bl	3ad94 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   3b098:	f898 301c 	ldrb.w	r3, [r8, #28]
   3b09c:	06da      	lsls	r2, r3, #27
   3b09e:	d419      	bmi.n	3b0d4 <lll_conn_isr_rx+0x284>
			      (pdu_data_tx->md == 0) &&
   3b0a0:	9f01      	ldr	r7, [sp, #4]
   3b0a2:	783b      	ldrb	r3, [r7, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   3b0a4:	06db      	lsls	r3, r3, #27
   3b0a6:	f53f af08 	bmi.w	3aeba <lll_conn_isr_rx+0x6a>
			      (pdu_data_tx->md == 0) &&
   3b0aa:	787b      	ldrb	r3, [r7, #1]
   3b0ac:	2b00      	cmp	r3, #0
   3b0ae:	f47f af04 	bne.w	3aeba <lll_conn_isr_rx+0x6a>
   3b0b2:	e7a8      	b.n	3b006 <lll_conn_isr_rx+0x1b6>
	pdu_data_tx->sn = lll->sn;
   3b0b4:	2600      	movs	r6, #0
		LL_ASSERT(lll->handle != 0xFFFF);
   3b0b6:	4a28      	ldr	r2, [pc, #160]	; (3b158 <lll_conn_isr_rx+0x308>)
   3b0b8:	492d      	ldr	r1, [pc, #180]	; (3b170 <lll_conn_isr_rx+0x320>)
   3b0ba:	4829      	ldr	r0, [pc, #164]	; (3b160 <lll_conn_isr_rx+0x310>)
   3b0bc:	f44f 73d1 	mov.w	r3, #418	; 0x1a2
   3b0c0:	f007 fa82 	bl	425c8 <assert_print>
   3b0c4:	4040      	eors	r0, r0
   3b0c6:	f380 8811 	msr	BASEPRI, r0
   3b0ca:	f04f 0003 	mov.w	r0, #3
   3b0ce:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   3b0d0:	89a0      	ldrh	r0, [r4, #12]
   3b0d2:	e724      	b.n	3af1e <lll_conn_isr_rx+0xce>
			      (pdu_data_tx->md == 0) &&
   3b0d4:	9f01      	ldr	r7, [sp, #4]
   3b0d6:	e6f0      	b.n	3aeba <lll_conn_isr_rx+0x6a>
			lll->empty = 0;
   3b0d8:	f36f 0382 	bfc	r3, #2, #1
   3b0dc:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			pdu_data_tx = (void *)radio_pkt_empty_get();
   3b0e0:	f000 fbee 	bl	3b8c0 <radio_pkt_empty_get>
		if (link) {
   3b0e4:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   3b0e8:	f898 201c 	ldrb.w	r2, [r8, #28]
	tx_release = NULL;
   3b0ec:	2500      	movs	r5, #0
   3b0ee:	e7c2      	b.n	3b076 <lll_conn_isr_rx+0x226>
				lll->packet_tx_head_offset = offset;
   3b0f0:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
   3b0f4:	e7f6      	b.n	3b0e4 <lll_conn_isr_rx+0x294>
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   3b0f6:	2003      	movs	r0, #3
   3b0f8:	f7f8 fac2 	bl	33680 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   3b0fc:	2800      	cmp	r0, #0
   3b0fe:	d0c0      	beq.n	3b082 <lll_conn_isr_rx+0x232>
		lll->nesn++;
   3b100:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   3b104:	f083 0302 	eor.w	r3, r3, #2
   3b108:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (pdu_data_rx->len != 0) {
   3b10c:	f898 301d 	ldrb.w	r3, [r8, #29]
   3b110:	2b00      	cmp	r3, #0
   3b112:	d0b6      	beq.n	3b082 <lll_conn_isr_rx+0x232>
			if (lll->enc_rx) {
   3b114:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   3b118:	0719      	lsls	r1, r3, #28
   3b11a:	d42b      	bmi.n	3b174 <lll_conn_isr_rx+0x324>
			*is_rx_enqueue = 1U;
   3b11c:	2601      	movs	r6, #1
   3b11e:	e7b1      	b.n	3b084 <lll_conn_isr_rx+0x234>
				lll->packet_tx_head_len = 0;
   3b120:	2200      	movs	r2, #0
   3b122:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
				memq_dequeue(lll->memq_tx.tail,
   3b126:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   3b128:	f104 0148 	add.w	r1, r4, #72	; 0x48
   3b12c:	f7f4 ffe8 	bl	30100 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   3b130:	9b01      	ldr	r3, [sp, #4]
   3b132:	681b      	ldr	r3, [r3, #0]
   3b134:	602b      	str	r3, [r5, #0]
				tx->next = link;
   3b136:	9b01      	ldr	r3, [sp, #4]
   3b138:	601d      	str	r5, [r3, #0]
				*tx_release = tx;
   3b13a:	9d01      	ldr	r5, [sp, #4]
				FORCE_MD_CNT_SET();
   3b13c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   3b140:	f898 201c 	ldrb.w	r2, [r8, #28]
   3b144:	e797      	b.n	3b076 <lll_conn_isr_rx+0x226>
   3b146:	bf00      	nop
   3b148:	0003aa6d 	.word	0x0003aa6d
   3b14c:	200039da 	.word	0x200039da
   3b150:	20003b1a 	.word	0x20003b1a
   3b154:	0003ac85 	.word	0x0003ac85
   3b158:	0004a110 	.word	0x0004a110
   3b15c:	00049810 	.word	0x00049810
   3b160:	000497b0 	.word	0x000497b0
   3b164:	0004a0cc 	.word	0x0004a0cc
   3b168:	0004a0c4 	.word	0x0004a0c4
   3b16c:	20003b19 	.word	0x20003b19
   3b170:	0004a164 	.word	0x0004a164
				done = radio_ccm_is_done();
   3b174:	f000 fe06 	bl	3bd84 <radio_ccm_is_done>
				LL_ASSERT(done);
   3b178:	2800      	cmp	r0, #0
   3b17a:	d067      	beq.n	3b24c <lll_conn_isr_rx+0x3fc>
				bool mic_failure = !radio_ccm_mic_is_valid();
   3b17c:	f000 fe24 	bl	3bdc8 <radio_ccm_mic_is_valid>
				if (mic_failure &&
   3b180:	2800      	cmp	r0, #0
   3b182:	d153      	bne.n	3b22c <lll_conn_isr_rx+0x3dc>
				    lll->ccm_rx.counter == 0 &&
   3b184:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
   3b188:	f8d4 2073 	ldr.w	r2, [r4, #115]	; 0x73
				if (mic_failure &&
   3b18c:	4313      	orrs	r3, r2
   3b18e:	d105      	bne.n	3b19c <lll_conn_isr_rx+0x34c>
				    (pdu_data_rx->ll_id ==
   3b190:	f898 301c 	ldrb.w	r3, [r8, #28]
				    lll->ccm_rx.counter == 0 &&
   3b194:	f003 0303 	and.w	r3, r3, #3
   3b198:	2b03      	cmp	r3, #3
   3b19a:	d030      	beq.n	3b1fe <lll_conn_isr_rx+0x3ae>
					mic_state = LLL_CONN_MIC_FAIL;
   3b19c:	4b32      	ldr	r3, [pc, #200]	; (3b268 <lll_conn_isr_rx+0x418>)
			radio_isr_set(isr_done, param);
   3b19e:	4833      	ldr	r0, [pc, #204]	; (3b26c <lll_conn_isr_rx+0x41c>)
					mic_state = LLL_CONN_MIC_FAIL;
   3b1a0:	2202      	movs	r2, #2
			radio_isr_set(isr_done, param);
   3b1a2:	4621      	mov	r1, r4
					mic_state = LLL_CONN_MIC_FAIL;
   3b1a4:	701a      	strb	r2, [r3, #0]
			radio_isr_set(isr_done, param);
   3b1a6:	f000 fa51 	bl	3b64c <radio_isr_set>
			radio_disable();
   3b1aa:	f000 fb35 	bl	3b818 <radio_disable>
			LL_ASSERT(!radio_is_ready());
   3b1ae:	f000 fb53 	bl	3b858 <radio_is_ready>
   3b1b2:	b978      	cbnz	r0, 3b1d4 <lll_conn_isr_rx+0x384>
	if (!radio_tmr_aa_restore()) {
   3b1b4:	f000 fd54 	bl	3bc60 <radio_tmr_aa_restore>
   3b1b8:	b1d0      	cbz	r0, 3b1f0 <lll_conn_isr_rx+0x3a0>
	if (tx_release) {
   3b1ba:	2d00      	cmp	r5, #0
   3b1bc:	f43f af15 	beq.w	3afea <lll_conn_isr_rx+0x19a>
		LL_ASSERT(lll->handle != 0xFFFF);
   3b1c0:	89a0      	ldrh	r0, [r4, #12]
   3b1c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3b1c6:	4298      	cmp	r0, r3
   3b1c8:	f43f af74 	beq.w	3b0b4 <lll_conn_isr_rx+0x264>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   3b1cc:	4629      	mov	r1, r5
   3b1ce:	f7fd fe43 	bl	38e58 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   3b1d2:	e6a9      	b.n	3af28 <lll_conn_isr_rx+0xd8>
			LL_ASSERT(!radio_is_ready());
   3b1d4:	4a26      	ldr	r2, [pc, #152]	; (3b270 <lll_conn_isr_rx+0x420>)
   3b1d6:	4927      	ldr	r1, [pc, #156]	; (3b274 <lll_conn_isr_rx+0x424>)
   3b1d8:	4827      	ldr	r0, [pc, #156]	; (3b278 <lll_conn_isr_rx+0x428>)
   3b1da:	f240 130f 	movw	r3, #271	; 0x10f
   3b1de:	f007 f9f3 	bl	425c8 <assert_print>
   3b1e2:	4040      	eors	r0, r0
   3b1e4:	f380 8811 	msr	BASEPRI, r0
   3b1e8:	f04f 0003 	mov.w	r0, #3
   3b1ec:	df02      	svc	2
   3b1ee:	e7e1      	b.n	3b1b4 <lll_conn_isr_rx+0x364>
		radio_tmr_aa_save(radio_tmr_aa_get());
   3b1f0:	f000 fd2a 	bl	3bc48 <radio_tmr_aa_get>
   3b1f4:	f000 fd2e 	bl	3bc54 <radio_tmr_aa_save>
	if (tx_release) {
   3b1f8:	2d00      	cmp	r5, #0
   3b1fa:	d1e1      	bne.n	3b1c0 <lll_conn_isr_rx+0x370>
   3b1fc:	e6f5      	b.n	3afea <lll_conn_isr_rx+0x19a>
						radio_pkt_scratch_get();
   3b1fe:	f000 fb63 	bl	3b8c8 <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   3b202:	7843      	ldrb	r3, [r0, #1]
   3b204:	2b27      	cmp	r3, #39	; 0x27
						radio_pkt_scratch_get();
   3b206:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   3b208:	d8c8      	bhi.n	3b19c <lll_conn_isr_rx+0x34c>
						memcpy(pdu_data_rx,
   3b20a:	3303      	adds	r3, #3
   3b20c:	b2da      	uxtb	r2, r3
   3b20e:	f108 001c 	add.w	r0, r8, #28
   3b212:	f009 f881 	bl	44318 <memcpy>
						lll->ccm_rx.counter--;
   3b216:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
   3b21a:	f8d4 2073 	ldr.w	r2, [r4, #115]	; 0x73
   3b21e:	3b01      	subs	r3, #1
   3b220:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
   3b224:	f142 33ff 	adc.w	r3, r2, #4294967295	; 0xffffffff
   3b228:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
				lll->ccm_rx.counter++;
   3b22c:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
				mic_state = LLL_CONN_MIC_PASS;
   3b230:	4a0d      	ldr	r2, [pc, #52]	; (3b268 <lll_conn_isr_rx+0x418>)
				lll->ccm_rx.counter++;
   3b232:	3301      	adds	r3, #1
   3b234:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
   3b238:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
						lll->ccm_rx.counter--;
   3b23c:	f104 016f 	add.w	r1, r4, #111	; 0x6f
				lll->ccm_rx.counter++;
   3b240:	f143 0300 	adc.w	r3, r3, #0
   3b244:	604b      	str	r3, [r1, #4]
				mic_state = LLL_CONN_MIC_PASS;
   3b246:	2301      	movs	r3, #1
   3b248:	7013      	strb	r3, [r2, #0]
		if (err) {
   3b24a:	e767      	b.n	3b11c <lll_conn_isr_rx+0x2cc>
				LL_ASSERT(done);
   3b24c:	4a08      	ldr	r2, [pc, #32]	; (3b270 <lll_conn_isr_rx+0x420>)
   3b24e:	490b      	ldr	r1, [pc, #44]	; (3b27c <lll_conn_isr_rx+0x42c>)
   3b250:	4809      	ldr	r0, [pc, #36]	; (3b278 <lll_conn_isr_rx+0x428>)
   3b252:	f44f 737b 	mov.w	r3, #1004	; 0x3ec
   3b256:	f007 f9b7 	bl	425c8 <assert_print>
   3b25a:	4040      	eors	r0, r0
   3b25c:	f380 8811 	msr	BASEPRI, r0
   3b260:	f04f 0003 	mov.w	r0, #3
   3b264:	df02      	svc	2
   3b266:	e789      	b.n	3b17c <lll_conn_isr_rx+0x32c>
   3b268:	20003b18 	.word	0x20003b18
   3b26c:	0003aa6d 	.word	0x0003aa6d
   3b270:	0004a110 	.word	0x0004a110
   3b274:	0004a0cc 	.word	0x0004a0cc
   3b278:	000497b0 	.word	0x000497b0
   3b27c:	0004a15c 	.word	0x0004a15c

0003b280 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   3b280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   3b284:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   3b286:	89a2      	ldrh	r2, [r4, #12]
   3b288:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3b28c:	429a      	cmp	r2, r3
{
   3b28e:	b082      	sub	sp, #8
	if (unlikely(lll->handle == 0xFFFF)) {
   3b290:	f000 80d2 	beq.w	3b438 <prepare_cb+0x1b8>

		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   3b294:	4605      	mov	r5, r0
   3b296:	f7ff fc53 	bl	3ab40 <lll_conn_prepare_reset>

	/* Calculate the current event latency */
	lll->latency_event = lll->latency_prepare + p->lazy;
   3b29a:	892b      	ldrh	r3, [r5, #8]
   3b29c:	8a62      	ldrh	r2, [r4, #18]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   3b29e:	8ae0      	ldrh	r0, [r4, #22]
	lll->latency_event = lll->latency_prepare + p->lazy;
   3b2a0:	441a      	add	r2, r3
   3b2a2:	b292      	uxth	r2, r2
	event_counter = lll->event_counter + lll->latency_event;
   3b2a4:	4410      	add	r0, r2
	lll->event_counter = (event_counter + 1);

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   3b2a6:	7f63      	ldrb	r3, [r4, #29]
	lll->latency_event = lll->latency_prepare + p->lazy;
   3b2a8:	82a2      	strh	r2, [r4, #20]
	event_counter = lll->event_counter + lll->latency_event;
   3b2aa:	b280      	uxth	r0, r0
	lll->event_counter = (event_counter + 1);
   3b2ac:	1c41      	adds	r1, r0, #1
   3b2ae:	82e1      	strh	r1, [r4, #22]
	if (lll->data_chan_sel) {
   3b2b0:	065e      	lsls	r6, r3, #25
	lll->latency_prepare = 0;
   3b2b2:	f04f 0100 	mov.w	r1, #0
   3b2b6:	8261      	strh	r1, [r4, #18]
#if defined(CONFIG_BT_CTLR_CHAN_SEL_2)
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   3b2b8:	f104 0118 	add.w	r1, r4, #24
	if (lll->data_chan_sel) {
   3b2bc:	f100 808e 	bmi.w	3b3dc <prepare_cb+0x15c>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   3b2c0:	f003 003f 	and.w	r0, r3, #63	; 0x3f
   3b2c4:	460b      	mov	r3, r1
   3b2c6:	7fa1      	ldrb	r1, [r4, #30]
   3b2c8:	9000      	str	r0, [sp, #0]
   3b2ca:	f104 001f 	add.w	r0, r4, #31
   3b2ce:	f7fe f89d 	bl	3940c <lll_chan_sel_1>
   3b2d2:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->periph.window_widening_event_us +=
   3b2d4:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	; 0x2c
   3b2d8:	4413      	add	r3, r2
		lll->periph.window_widening_event_us =
			lll->periph.window_widening_max_us;
	}

	/* current window size */
	lll->periph.window_size_event_us +=
   3b2da:	e9d4 020d 	ldrd	r0, r2, [r4, #52]	; 0x34
	lll->periph.window_widening_prepare_us = 0;
   3b2de:	2100      	movs	r1, #0
	lll->periph.window_size_event_us +=
   3b2e0:	4402      	add	r2, r0
	lll->periph.window_widening_prepare_us = 0;
   3b2e2:	62e1      	str	r1, [r4, #44]	; 0x2c
		lll->periph.window_size_prepare_us;
	lll->periph.window_size_prepare_us = 0;
   3b2e4:	6361      	str	r1, [r4, #52]	; 0x34
   3b2e6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	lll->periph.window_size_event_us +=
   3b2e8:	63a2      	str	r2, [r4, #56]	; 0x38
	/* Ensure that empty flag reflects the state of the Tx queue, as a
	 * peripheral if this is the first connection event and as no prior PDU
	 * is transmitted, an incorrect acknowledgment by peer should not
	 * dequeue a PDU that has not been transmitted on air.
	 */
	if (!lll->empty) {
   3b2ea:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
   3b2ee:	428b      	cmp	r3, r1
   3b2f0:	bf28      	it	cs
   3b2f2:	460b      	movcs	r3, r1
   3b2f4:	f012 0204 	ands.w	r2, r2, #4
   3b2f8:	6323      	str	r3, [r4, #48]	; 0x30
   3b2fa:	f000 808f 	beq.w	3b41c <prepare_cb+0x19c>
			lll->empty = 1U;
		}
	}

	/* Start setting up Radio h/w */
	radio_reset();
   3b2fe:	f000 f9e7 	bl	3b6d0 <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   3b302:	2000      	movs	r0, #0
   3b304:	f000 fa10 	bl	3b728 <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	radio_aa_set(lll->access_addr);
   3b308:	1d20      	adds	r0, r4, #4
   3b30a:	f000 fa2b 	bl	3b764 <radio_aa_set>
	return ((uint32_t)src[2] << 16) | sys_get_le16(&src[0]);
   3b30e:	8923      	ldrh	r3, [r4, #8]
   3b310:	7aa1      	ldrb	r1, [r4, #10]
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   3b312:	f240 605b 	movw	r0, #1627	; 0x65b
   3b316:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   3b31a:	f000 fabb 	bl	3b894 <radio_crc_configure>
				sys_get_le24(lll->crc_init));

	lll_chan_set(data_chan_use);
   3b31e:	4630      	mov	r0, r6
   3b320:	f7fe fcb8 	bl	39c94 <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   3b324:	4621      	mov	r1, r4
   3b326:	4849      	ldr	r0, [pc, #292]	; (3b44c <prepare_cb+0x1cc>)
   3b328:	f000 f990 	bl	3b64c <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   3b32c:	2096      	movs	r0, #150	; 0x96
   3b32e:	f000 fbc9 	bl	3bac4 <radio_tmr_tifs_set>
	 * - CTE RX is not enabled,
	 * - SOC does not require compensation for PHYEND event delay.
	 */
	if (!IS_ENABLED(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)) {
#if defined(CONFIG_BT_CTLR_PHY)
		radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   3b332:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   3b336:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   3b33a:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   3b33e:	2100      	movs	r1, #0
   3b340:	f002 0207 	and.w	r2, r2, #7
   3b344:	f000 0007 	and.w	r0, r0, #7
   3b348:	f000 fb0a 	bl	3b960 <radio_switch_complete_and_tx>
	}

	/* The call can use Radio interface that alternates NRF_RADIO->SHORTS. The register is
	 * set by radio_switch_complete_XXX functions, hence any changes done before are cleared.
	 */
	lll_conn_rx_pkt_set(lll);
   3b34c:	4620      	mov	r0, r4
   3b34e:	f7ff fc53 	bl	3abf8 <lll_conn_rx_pkt_set>

	ticks_at_event = p->ticks_at_expire;
	ull = HDR_LLL2ULL(lll);
   3b352:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   3b354:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   3b356:	4638      	mov	r0, r7
   3b358:	f7fe fc7e 	bl	39c58 <lll_event_offset_get>
   3b35c:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   3b35e:	686a      	ldr	r2, [r5, #4]
   3b360:	f106 0118 	add.w	r1, r6, #24
   3b364:	2000      	movs	r0, #0
   3b366:	f000 fbb9 	bl	3badc <radio_tmr_start>
   3b36a:	4680      	mov	r8, r0

	radio_tmr_aa_capture();
   3b36c:	f000 fc58 	bl	3bc20 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   3b370:	2000      	movs	r0, #0
   3b372:	f000 fc6f 	bl	3bc54 <radio_tmr_aa_save>

	hcto = remainder_us +
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   3b376:	6b23      	ldr	r3, [r4, #48]	; 0x30
		 lll->periph.window_widening_event_us) << 1) +
	       lll->periph.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   3b378:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   3b37c:	f103 0230 	add.w	r2, r3, #48	; 0x30
	hcto = remainder_us +
   3b380:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   3b382:	f000 0007 	and.w	r0, r0, #7
   3b386:	2101      	movs	r1, #1
	hcto = remainder_us +
   3b388:	eb03 0542 	add.w	r5, r3, r2, lsl #1
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   3b38c:	f000 fa36 	bl	3b7fc <radio_rx_ready_delay_get>
	hcto = remainder_us +
   3b390:	4445      	add	r5, r8
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   3b392:	4405      	add	r5, r0
	hcto += addr_us_get(lll->phy_rx);
   3b394:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   3b398:	f000 0007 	and.w	r0, r0, #7
   3b39c:	2802      	cmp	r0, #2
   3b39e:	d03b      	beq.n	3b418 <prepare_cb+0x198>
		return 40;
   3b3a0:	2804      	cmp	r0, #4
   3b3a2:	bf0c      	ite	eq
   3b3a4:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   3b3a8:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   3b3aa:	2101      	movs	r1, #1
	hcto += addr_us_get(lll->phy_rx);
   3b3ac:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   3b3ae:	f000 fa27 	bl	3b800 <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   3b3b2:	4428      	add	r0, r5
   3b3b4:	f000 fc26 	bl	3bc04 <radio_tmr_hcto_configure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
   3b3b8:	89a1      	ldrh	r1, [r4, #12]
   3b3ba:	3103      	adds	r1, #3
   3b3bc:	4632      	mov	r2, r6
   3b3be:	b2c9      	uxtb	r1, r1
   3b3c0:	4638      	mov	r0, r7
   3b3c2:	f7fe fc57 	bl	39c74 <lll_preempt_calc>
   3b3c6:	b188      	cbz	r0, 3b3ec <prepare_cb+0x16c>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   3b3c8:	4821      	ldr	r0, [pc, #132]	; (3b450 <prepare_cb+0x1d0>)
   3b3ca:	4621      	mov	r1, r4
   3b3cc:	f000 f93e 	bl	3b64c <radio_isr_set>
		radio_disable();
   3b3d0:	f000 fa22 	bl	3b818 <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   3b3d4:	2000      	movs	r0, #0
   3b3d6:	b002      	add	sp, #8
   3b3d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   3b3dc:	460a      	mov	r2, r1
   3b3de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3b3e2:	8be1      	ldrh	r1, [r4, #30]
   3b3e4:	f7fe f85e 	bl	394a4 <lll_chan_sel_2>
   3b3e8:	4606      	mov	r6, r0
   3b3ea:	e773      	b.n	3b2d4 <prepare_cb+0x54>
		ret = lll_prepare_done(lll);
   3b3ec:	4620      	mov	r0, r4
   3b3ee:	f7fe fbdb 	bl	39ba8 <lll_prepare_done>
		LL_ASSERT(!ret);
   3b3f2:	2800      	cmp	r0, #0
   3b3f4:	d0ee      	beq.n	3b3d4 <prepare_cb+0x154>
   3b3f6:	4a17      	ldr	r2, [pc, #92]	; (3b454 <prepare_cb+0x1d4>)
   3b3f8:	4917      	ldr	r1, [pc, #92]	; (3b458 <prepare_cb+0x1d8>)
   3b3fa:	4818      	ldr	r0, [pc, #96]	; (3b45c <prepare_cb+0x1dc>)
   3b3fc:	f240 1351 	movw	r3, #337	; 0x151
   3b400:	f007 f8e2 	bl	425c8 <assert_print>
   3b404:	4040      	eors	r0, r0
   3b406:	f380 8811 	msr	BASEPRI, r0
   3b40a:	f04f 0003 	mov.w	r0, #3
   3b40e:	df02      	svc	2
}
   3b410:	2000      	movs	r0, #0
   3b412:	b002      	add	sp, #8
   3b414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (phy) {
   3b418:	2318      	movs	r3, #24
   3b41a:	e7c6      	b.n	3b3aa <prepare_cb+0x12a>
		link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, NULL);
   3b41c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   3b420:	f7f4 fe66 	bl	300f0 <memq_peek>
		if (!link) {
   3b424:	2800      	cmp	r0, #0
   3b426:	f47f af6a 	bne.w	3b2fe <prepare_cb+0x7e>
			lll->empty = 1U;
   3b42a:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   3b42e:	f043 0304 	orr.w	r3, r3, #4
   3b432:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
   3b436:	e762      	b.n	3b2fe <prepare_cb+0x7e>
		radio_isr_set(lll_isr_early_abort, lll);
   3b438:	4809      	ldr	r0, [pc, #36]	; (3b460 <prepare_cb+0x1e0>)
   3b43a:	4621      	mov	r1, r4
   3b43c:	f000 f906 	bl	3b64c <radio_isr_set>
		radio_disable();
   3b440:	f000 f9ea 	bl	3b818 <radio_disable>
}
   3b444:	2000      	movs	r0, #0
   3b446:	b002      	add	sp, #8
   3b448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3b44c:	0003ae51 	.word	0x0003ae51
   3b450:	00039dcd 	.word	0x00039dcd
   3b454:	0004a17c 	.word	0x0004a17c
   3b458:	00049a4c 	.word	0x00049a4c
   3b45c:	000497b0 	.word	0x000497b0
   3b460:	00039ded 	.word	0x00039ded

0003b464 <lll_periph_prepare>:
{
   3b464:	b510      	push	{r4, lr}
   3b466:	b082      	sub	sp, #8
   3b468:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   3b46a:	f7fe fe0d 	bl	3a088 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   3b46e:	2800      	cmp	r0, #0
   3b470:	db25      	blt.n	3b4be <lll_periph_prepare+0x5a>
	lll = p->param;
   3b472:	68e1      	ldr	r1, [r4, #12]
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   3b474:	8920      	ldrh	r0, [r4, #8]
   3b476:	6a4b      	ldr	r3, [r1, #36]	; 0x24
	lll->periph.window_widening_prepare_us +=
   3b478:	6aca      	ldr	r2, [r1, #44]	; 0x2c
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   3b47a:	fb00 3303 	mla	r3, r0, r3, r3
   3b47e:	6a88      	ldr	r0, [r1, #40]	; 0x28
	lll->periph.window_widening_prepare_us +=
   3b480:	4413      	add	r3, r2
   3b482:	4283      	cmp	r3, r0
   3b484:	bf28      	it	cs
   3b486:	4603      	movcs	r3, r0
   3b488:	62cb      	str	r3, [r1, #44]	; 0x2c
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   3b48a:	4a13      	ldr	r2, [pc, #76]	; (3b4d8 <lll_periph_prepare+0x74>)
   3b48c:	4913      	ldr	r1, [pc, #76]	; (3b4dc <lll_periph_prepare+0x78>)
   3b48e:	4814      	ldr	r0, [pc, #80]	; (3b4e0 <lll_periph_prepare+0x7c>)
   3b490:	9400      	str	r4, [sp, #0]
   3b492:	2300      	movs	r3, #0
   3b494:	f7f8 fc2c 	bl	33cf0 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   3b498:	b108      	cbz	r0, 3b49e <lll_periph_prepare+0x3a>
   3b49a:	3077      	adds	r0, #119	; 0x77
   3b49c:	d101      	bne.n	3b4a2 <lll_periph_prepare+0x3e>
}
   3b49e:	b002      	add	sp, #8
   3b4a0:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   3b4a2:	4a10      	ldr	r2, [pc, #64]	; (3b4e4 <lll_periph_prepare+0x80>)
   3b4a4:	4910      	ldr	r1, [pc, #64]	; (3b4e8 <lll_periph_prepare+0x84>)
   3b4a6:	4811      	ldr	r0, [pc, #68]	; (3b4ec <lll_periph_prepare+0x88>)
   3b4a8:	235e      	movs	r3, #94	; 0x5e
   3b4aa:	f007 f88d 	bl	425c8 <assert_print>
   3b4ae:	4040      	eors	r0, r0
   3b4b0:	f380 8811 	msr	BASEPRI, r0
   3b4b4:	f04f 0003 	mov.w	r0, #3
   3b4b8:	df02      	svc	2
}
   3b4ba:	b002      	add	sp, #8
   3b4bc:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   3b4be:	4a09      	ldr	r2, [pc, #36]	; (3b4e4 <lll_periph_prepare+0x80>)
   3b4c0:	490b      	ldr	r1, [pc, #44]	; (3b4f0 <lll_periph_prepare+0x8c>)
   3b4c2:	480a      	ldr	r0, [pc, #40]	; (3b4ec <lll_periph_prepare+0x88>)
   3b4c4:	234d      	movs	r3, #77	; 0x4d
   3b4c6:	f007 f87f 	bl	425c8 <assert_print>
   3b4ca:	4040      	eors	r0, r0
   3b4cc:	f380 8811 	msr	BASEPRI, r0
   3b4d0:	f04f 0003 	mov.w	r0, #3
   3b4d4:	df02      	svc	2
   3b4d6:	e7cc      	b.n	3b472 <lll_periph_prepare+0xe>
   3b4d8:	0003b281 	.word	0x0003b281
   3b4dc:	0003ab69 	.word	0x0003ab69
   3b4e0:	00039c51 	.word	0x00039c51
   3b4e4:	0004a17c 	.word	0x0004a17c
   3b4e8:	0004a0fc 	.word	0x0004a0fc
   3b4ec:	000497b0 	.word	0x000497b0
   3b4f0:	0004a028 	.word	0x0004a028

0003b4f4 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   3b4f4:	4b05      	ldr	r3, [pc, #20]	; (3b50c <cntr_init+0x18>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   3b4f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   3b4fa:	2100      	movs	r1, #0
   3b4fc:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   3b500:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   3b504:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   3b508:	4770      	bx	lr
   3b50a:	bf00      	nop
   3b50c:	4000b000 	.word	0x4000b000

0003b510 <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   3b510:	4b05      	ldr	r3, [pc, #20]	; (3b528 <cntr_start+0x18>)
   3b512:	7818      	ldrb	r0, [r3, #0]
   3b514:	1c42      	adds	r2, r0, #1
   3b516:	701a      	strb	r2, [r3, #0]
   3b518:	b918      	cbnz	r0, 3b522 <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   3b51a:	4b04      	ldr	r3, [pc, #16]	; (3b52c <cntr_start+0x1c>)
   3b51c:	2201      	movs	r2, #1
   3b51e:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   3b520:	4770      	bx	lr
		return 1;
   3b522:	2001      	movs	r0, #1
}
   3b524:	4770      	bx	lr
   3b526:	bf00      	nop
   3b528:	20003b1b 	.word	0x20003b1b
   3b52c:	4000b000 	.word	0x4000b000

0003b530 <cntr_stop>:

uint32_t cntr_stop(void)
{
   3b530:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   3b532:	4c0d      	ldr	r4, [pc, #52]	; (3b568 <cntr_stop+0x38>)
   3b534:	7820      	ldrb	r0, [r4, #0]
   3b536:	b148      	cbz	r0, 3b54c <cntr_stop+0x1c>

	if (--_refcount) {
   3b538:	3801      	subs	r0, #1
   3b53a:	b2c0      	uxtb	r0, r0
   3b53c:	7020      	strb	r0, [r4, #0]
   3b53e:	b918      	cbnz	r0, 3b548 <cntr_stop+0x18>
   3b540:	4b0a      	ldr	r3, [pc, #40]	; (3b56c <cntr_stop+0x3c>)
   3b542:	2201      	movs	r2, #1
   3b544:	605a      	str	r2, [r3, #4]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   3b546:	bd10      	pop	{r4, pc}
		return 1;
   3b548:	2001      	movs	r0, #1
}
   3b54a:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   3b54c:	4a08      	ldr	r2, [pc, #32]	; (3b570 <cntr_stop+0x40>)
   3b54e:	4909      	ldr	r1, [pc, #36]	; (3b574 <cntr_stop+0x44>)
   3b550:	4809      	ldr	r0, [pc, #36]	; (3b578 <cntr_stop+0x48>)
   3b552:	232d      	movs	r3, #45	; 0x2d
   3b554:	f007 f838 	bl	425c8 <assert_print>
   3b558:	4040      	eors	r0, r0
   3b55a:	f380 8811 	msr	BASEPRI, r0
   3b55e:	f04f 0003 	mov.w	r0, #3
   3b562:	df02      	svc	2
	if (--_refcount) {
   3b564:	7820      	ldrb	r0, [r4, #0]
   3b566:	e7e7      	b.n	3b538 <cntr_stop+0x8>
   3b568:	20003b1b 	.word	0x20003b1b
   3b56c:	4000b000 	.word	0x4000b000
   3b570:	0004a1d0 	.word	0x0004a1d0
   3b574:	0004a21c 	.word	0x0004a21c
   3b578:	000497b0 	.word	0x000497b0

0003b57c <cntr_cnt_get>:
     return p_reg->COUNTER;
   3b57c:	4b01      	ldr	r3, [pc, #4]	; (3b584 <cntr_cnt_get+0x8>)
   3b57e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   3b582:	4770      	bx	lr
   3b584:	4000b000 	.word	0x4000b000

0003b588 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   3b588:	4b02      	ldr	r3, [pc, #8]	; (3b594 <cntr_cmp_set+0xc>)
   3b58a:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   3b58e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   3b592:	4770      	bx	lr
   3b594:	4000b000 	.word	0x4000b000

0003b598 <do_ecb>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3b598:	4b12      	ldr	r3, [pc, #72]	; (3b5e4 <do_ecb+0x4c>)
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   3b59a:	b430      	push	{r4, r5}
   3b59c:	2101      	movs	r1, #1
   3b59e:	4604      	mov	r4, r0
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   3b5a0:	2000      	movs	r0, #0
   3b5a2:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   3b5a4:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   3b5a8:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   3b5ac:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   3b5b0:	6019      	str	r1, [r3, #0]
}
   3b5b2:	e005      	b.n	3b5c0 <do_ecb+0x28>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   3b5b4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   3b5b8:	b932      	cbnz	r2, 3b5c8 <do_ecb+0x30>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   3b5ba:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   3b5be:	b11a      	cbz	r2, 3b5c8 <do_ecb+0x30>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   3b5c0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   3b5c4:	2a00      	cmp	r2, #0
   3b5c6:	d0f5      	beq.n	3b5b4 <do_ecb+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3b5c8:	6059      	str	r1, [r3, #4]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   3b5ca:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   3b5ce:	2a00      	cmp	r2, #0
   3b5d0:	d1e7      	bne.n	3b5a2 <do_ecb+0xa>
   3b5d2:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504
   3b5d6:	2d00      	cmp	r5, #0
   3b5d8:	d0e3      	beq.n	3b5a2 <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
   3b5da:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   3b5de:	bc30      	pop	{r4, r5}
   3b5e0:	4770      	bx	lr
   3b5e2:	bf00      	nop
   3b5e4:	4000e000 	.word	0x4000e000

0003b5e8 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   3b5e8:	b570      	push	{r4, r5, r6, lr}
   3b5ea:	b08c      	sub	sp, #48	; 0x30
   3b5ec:	460e      	mov	r6, r1
   3b5ee:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   3b5f0:	4601      	mov	r1, r0
   3b5f2:	2210      	movs	r2, #16
   3b5f4:	4668      	mov	r0, sp
{
   3b5f6:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   3b5f8:	f7f4 fd48 	bl	3008c <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   3b5fc:	2210      	movs	r2, #16
   3b5fe:	eb0d 0002 	add.w	r0, sp, r2
   3b602:	4631      	mov	r1, r6
   3b604:	f7f4 fd42 	bl	3008c <mem_rcopy>

	do_ecb(&ecb);
   3b608:	4668      	mov	r0, sp
   3b60a:	f7ff ffc5 	bl	3b598 <do_ecb>

	if (cipher_text_le) {
   3b60e:	b125      	cbz	r5, 3b61a <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   3b610:	2210      	movs	r2, #16
   3b612:	a908      	add	r1, sp, #32
   3b614:	4628      	mov	r0, r5
   3b616:	f7f4 fd39 	bl	3008c <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   3b61a:	b124      	cbz	r4, 3b626 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   3b61c:	2210      	movs	r2, #16
   3b61e:	a908      	add	r1, sp, #32
   3b620:	4620      	mov	r0, r4
   3b622:	f008 fe79 	bl	44318 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   3b626:	b00c      	add	sp, #48	; 0x30
   3b628:	bd70      	pop	{r4, r5, r6, pc}
   3b62a:	bf00      	nop

0003b62c <isr_radio>:
}
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

uint32_t radio_has_disabled(void)
{
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   3b62c:	4b04      	ldr	r3, [pc, #16]	; (3b640 <isr_radio+0x14>)
   3b62e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   3b632:	b123      	cbz	r3, 3b63e <isr_radio+0x12>
		isr_cb(isr_cb_param);
   3b634:	4a03      	ldr	r2, [pc, #12]	; (3b644 <isr_radio+0x18>)
   3b636:	4b04      	ldr	r3, [pc, #16]	; (3b648 <isr_radio+0x1c>)
   3b638:	6810      	ldr	r0, [r2, #0]
   3b63a:	681b      	ldr	r3, [r3, #0]
   3b63c:	4718      	bx	r3
}
   3b63e:	4770      	bx	lr
   3b640:	40001000 	.word	0x40001000
   3b644:	20002c8c 	.word	0x20002c8c
   3b648:	20002c90 	.word	0x20002c90

0003b64c <radio_isr_set>:
{
   3b64c:	b538      	push	{r3, r4, r5, lr}
   3b64e:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   3b650:	2001      	movs	r0, #1
{
   3b652:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   3b654:	f7ee fe5e 	bl	2a314 <arch_irq_disable>
	isr_cb = cb;
   3b658:	4b08      	ldr	r3, [pc, #32]	; (3b67c <radio_isr_set+0x30>)
	isr_cb_param = param;
   3b65a:	4a09      	ldr	r2, [pc, #36]	; (3b680 <radio_isr_set+0x34>)
	isr_cb = cb;
   3b65c:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   3b65e:	4909      	ldr	r1, [pc, #36]	; (3b684 <radio_isr_set+0x38>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   3b660:	4b09      	ldr	r3, [pc, #36]	; (3b688 <radio_isr_set+0x3c>)
	isr_cb_param = param;
   3b662:	6015      	str	r5, [r2, #0]
   3b664:	2010      	movs	r0, #16
   3b666:	2202      	movs	r2, #2
   3b668:	f8c1 0304 	str.w	r0, [r1, #772]	; 0x304
   3b66c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   3b670:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   3b674:	2001      	movs	r0, #1
   3b676:	f7ee be3f 	b.w	2a2f8 <arch_irq_enable>
   3b67a:	bf00      	nop
   3b67c:	20002c90 	.word	0x20002c90
   3b680:	20002c8c 	.word	0x20002c8c
   3b684:	40001000 	.word	0x40001000
   3b688:	e000e100 	.word	0xe000e100

0003b68c <radio_setup>:
			uint32_t volatile PDM;
			uint32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   3b68c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3b690:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   3b694:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   3b696:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   3b69a:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   3b69e:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   3b6a2:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   3b6a6:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   3b6aa:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   3b6ae:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   3b6b2:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   3b6b6:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   3b6ba:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   3b6be:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   3b6c2:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   3b6c6:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   3b6ca:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   3b6ce:	4770      	bx	lr

0003b6d0 <radio_reset>:
{
   3b6d0:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
   3b6d2:	2001      	movs	r0, #1
   3b6d4:	f7ee fe1e 	bl	2a314 <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (radio_power ? RADIO_POWER_POWER_Enabled : RADIO_POWER_POWER_Disabled)
   3b6d8:	4a08      	ldr	r2, [pc, #32]	; (3b6fc <radio_reset+0x2c>)
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   3b6da:	4b09      	ldr	r3, [pc, #36]	; (3b700 <radio_reset+0x30>)
   3b6dc:	2400      	movs	r4, #0
   3b6de:	2001      	movs	r0, #1
   3b6e0:	f8c2 4ffc 	str.w	r4, [r2, #4092]	; 0xffc
   3b6e4:	f44f 5190 	mov.w	r1, #4608	; 0x1200
   3b6e8:	f8c2 0ffc 	str.w	r0, [r2, #4092]	; 0xffc
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PHYEND_DELAY_COMPENSATION_PPI(0)) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   3b6ec:	f44f 5210 	mov.w	r2, #9216	; 0x2400
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   3b6f0:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   3b6f4:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
   3b6f8:	bd10      	pop	{r4, pc}
   3b6fa:	bf00      	nop
   3b6fc:	40001000 	.word	0x40001000
   3b700:	4001f000 	.word	0x4001f000

0003b704 <radio_stop>:
}
   3b704:	4770      	bx	lr
   3b706:	bf00      	nop

0003b708 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   3b708:	4b06      	ldr	r3, [pc, #24]	; (3b724 <radio_phy_set+0x1c>)
	uint32_t mode;

	switch (phy) {
	case BIT(0):
	default:
		mode = RADIO_MODE_MODE_Ble_1Mbit;
   3b70a:	2802      	cmp	r0, #2
   3b70c:	bf0c      	ite	eq
   3b70e:	2204      	moveq	r2, #4
   3b710:	2203      	movne	r2, #3
   3b712:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   3b716:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   3b71a:	f042 0201 	orr.w	r2, r2, #1
   3b71e:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   3b722:	4770      	bx	lr
   3b724:	40001000 	.word	0x40001000

0003b728 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   3b728:	4b01      	ldr	r3, [pc, #4]	; (3b730 <radio_tx_power_set+0x8>)
   3b72a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   3b72e:	4770      	bx	lr
   3b730:	40001000 	.word	0x40001000

0003b734 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   3b734:	4b01      	ldr	r3, [pc, #4]	; (3b73c <radio_freq_chan_set+0x8>)
   3b736:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   3b73a:	4770      	bx	lr
   3b73c:	40001000 	.word	0x40001000

0003b740 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   3b740:	4b07      	ldr	r3, [pc, #28]	; (3b760 <radio_whiten_iv_set+0x20>)
   3b742:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   3b746:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   3b74a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   3b74e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   3b752:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   3b756:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   3b75a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   3b75e:	4770      	bx	lr
   3b760:	40001000 	.word	0x40001000

0003b764 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   3b764:	4a0a      	ldr	r2, [pc, #40]	; (3b790 <radio_aa_set+0x2c>)
   3b766:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   3b768:	2301      	movs	r3, #1
	NRF_RADIO->TXADDRESS =
   3b76a:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   3b76e:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   3b772:	78c3      	ldrb	r3, [r0, #3]
   3b774:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   3b778:	7843      	ldrb	r3, [r0, #1]
   3b77a:	f890 c002 	ldrb.w	ip, [r0, #2]
   3b77e:	7801      	ldrb	r1, [r0, #0]
   3b780:	041b      	lsls	r3, r3, #16
   3b782:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   3b786:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   3b78a:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   3b78e:	4770      	bx	lr
   3b790:	40001000 	.word	0x40001000

0003b794 <radio_pkt_configure>:
	switch (phy) {
   3b794:	f3c2 0342 	ubfx	r3, r2, #1, #3
   3b798:	f1a3 0302 	sub.w	r3, r3, #2
   3b79c:	fab3 f383 	clz	r3, r3
   3b7a0:	095b      	lsrs	r3, r3, #5
   3b7a2:	061b      	lsls	r3, r3, #24
	if (pdu_type == RADIO_PKT_CONF_PDU_TYPE_DC) {
   3b7a4:	07d2      	lsls	r2, r2, #31
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   3b7a6:	bf48      	it	mi
   3b7a8:	f443 1380 	orrmi.w	r3, r3, #1048576	; 0x100000
		((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) & RADIO_PCNF0_LFLEN_Msk) |
   3b7ac:	f000 000f 	and.w	r0, r0, #15
	NRF_RADIO->PCNF0 =
   3b7b0:	4a09      	ldr	r2, [pc, #36]	; (3b7d8 <radio_pkt_configure+0x44>)
		((((uint32_t)bits_s1) << RADIO_PCNF0_S1LEN_Pos) & RADIO_PCNF0_S1LEN_Msk) | extra;
   3b7b2:	4318      	orrs	r0, r3
   3b7b4:	f440 7080 	orr.w	r0, r0, #256	; 0x100
	NRF_RADIO->PCNF0 =
   3b7b8:	f8c2 0514 	str.w	r0, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   3b7bc:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   3b7c0:	4b06      	ldr	r3, [pc, #24]	; (3b7dc <radio_pkt_configure+0x48>)
   3b7c2:	4003      	ands	r3, r0
   3b7c4:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |=
   3b7c8:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   3b7cc:	4319      	orrs	r1, r3
   3b7ce:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   3b7d2:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   3b7d6:	4770      	bx	lr
   3b7d8:	40001000 	.word	0x40001000
   3b7dc:	fef80000 	.word	0xfef80000

0003b7e0 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   3b7e0:	4b01      	ldr	r3, [pc, #4]	; (3b7e8 <radio_pkt_rx_set+0x8>)
   3b7e2:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   3b7e6:	4770      	bx	lr
   3b7e8:	40001000 	.word	0x40001000

0003b7ec <radio_pkt_tx_set>:
void radio_pkt_tx_set(void *tx_packet)
   3b7ec:	4b01      	ldr	r3, [pc, #4]	; (3b7f4 <radio_pkt_tx_set+0x8>)
   3b7ee:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   3b7f2:	4770      	bx	lr
   3b7f4:	40001000 	.word	0x40001000

0003b7f8 <radio_tx_chain_delay_get>:
}
   3b7f8:	2001      	movs	r0, #1
   3b7fa:	4770      	bx	lr

0003b7fc <radio_rx_ready_delay_get>:
}
   3b7fc:	2029      	movs	r0, #41	; 0x29
   3b7fe:	4770      	bx	lr

0003b800 <radio_rx_chain_delay_get>:
static inline uint32_t hal_radio_rx_chain_delay_us_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_US;
   3b800:	2802      	cmp	r0, #2
}
   3b802:	bf0c      	ite	eq
   3b804:	2005      	moveq	r0, #5
   3b806:	200a      	movne	r0, #10
   3b808:	4770      	bx	lr
   3b80a:	bf00      	nop

0003b80c <radio_tx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3b80c:	4b01      	ldr	r3, [pc, #4]	; (3b814 <radio_tx_enable+0x8>)
   3b80e:	2201      	movs	r2, #1
   3b810:	601a      	str	r2, [r3, #0]
}
   3b812:	4770      	bx	lr
   3b814:	40001000 	.word	0x40001000

0003b818 <radio_disable>:
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   3b818:	4a07      	ldr	r2, [pc, #28]	; (3b838 <radio_disable+0x20>)
	NRF_RADIO->SHORTS = 0;
   3b81a:	4908      	ldr	r1, [pc, #32]	; (3b83c <radio_disable+0x24>)
{
   3b81c:	b410      	push	{r4}
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   3b81e:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   3b820:	f44f 6410 	mov.w	r4, #2304	; 0x900
	NRF_RADIO->SHORTS = 0;
   3b824:	2000      	movs	r0, #0
   3b826:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   3b82a:	6053      	str	r3, [r2, #4]
   3b82c:	60d3      	str	r3, [r2, #12]
   3b82e:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   3b832:	610b      	str	r3, [r1, #16]
}
   3b834:	bc10      	pop	{r4}
   3b836:	4770      	bx	lr
   3b838:	4001f000 	.word	0x4001f000
   3b83c:	40001000 	.word	0x40001000

0003b840 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   3b840:	4b04      	ldr	r3, [pc, #16]	; (3b854 <radio_status_reset+0x14>)
   3b842:	2200      	movs	r2, #0
   3b844:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   3b848:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   3b84c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   3b850:	4770      	bx	lr
   3b852:	bf00      	nop
   3b854:	40001000 	.word	0x40001000

0003b858 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   3b858:	4b03      	ldr	r3, [pc, #12]	; (3b868 <radio_is_ready+0x10>)
   3b85a:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   3b85e:	3800      	subs	r0, #0
   3b860:	bf18      	it	ne
   3b862:	2001      	movne	r0, #1
   3b864:	4770      	bx	lr
   3b866:	bf00      	nop
   3b868:	40001000 	.word	0x40001000

0003b86c <radio_is_done>:
	return (NRF_RADIO->NRF_RADIO_TXRX_END_EVENT != 0);
   3b86c:	4b03      	ldr	r3, [pc, #12]	; (3b87c <radio_is_done+0x10>)
   3b86e:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   3b872:	3800      	subs	r0, #0
   3b874:	bf18      	it	ne
   3b876:	2001      	movne	r0, #1
   3b878:	4770      	bx	lr
   3b87a:	bf00      	nop
   3b87c:	40001000 	.word	0x40001000

0003b880 <radio_is_idle>:
}

uint32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
   3b880:	4b03      	ldr	r3, [pc, #12]	; (3b890 <radio_is_idle+0x10>)
   3b882:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   3b886:	fab0 f080 	clz	r0, r0
   3b88a:	0940      	lsrs	r0, r0, #5
   3b88c:	4770      	bx	lr
   3b88e:	bf00      	nop
   3b890:	40001000 	.word	0x40001000

0003b894 <radio_crc_configure>:

void radio_crc_configure(uint32_t polynomial, uint32_t iv)
{
	NRF_RADIO->CRCCNF =
   3b894:	4b04      	ldr	r3, [pc, #16]	; (3b8a8 <radio_crc_configure+0x14>)
   3b896:	f240 1203 	movw	r2, #259	; 0x103
   3b89a:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
   3b89e:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   3b8a2:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   3b8a6:	4770      	bx	lr
   3b8a8:	40001000 	.word	0x40001000

0003b8ac <radio_crc_is_valid>:

uint32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
   3b8ac:	4b03      	ldr	r3, [pc, #12]	; (3b8bc <radio_crc_is_valid+0x10>)
   3b8ae:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   3b8b2:	3800      	subs	r0, #0
   3b8b4:	bf18      	it	ne
   3b8b6:	2001      	movne	r0, #1
   3b8b8:	4770      	bx	lr
   3b8ba:	bf00      	nop
   3b8bc:	40001000 	.word	0x40001000

0003b8c0 <radio_pkt_empty_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
   3b8c0:	4800      	ldr	r0, [pc, #0]	; (3b8c4 <radio_pkt_empty_get+0x4>)
   3b8c2:	4770      	bx	lr
   3b8c4:	20002c88 	.word	0x20002c88

0003b8c8 <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
   3b8c8:	4800      	ldr	r0, [pc, #0]	; (3b8cc <radio_pkt_scratch_get+0x4>)
   3b8ca:	4770      	bx	lr
   3b8cc:	20002b84 	.word	0x20002b84

0003b8d0 <radio_switch_complete_and_rx>:
	sw_tifs_toggle &= 1U;
}
#endif /* CONFIG_BT_CTLR_TIFS_HW */

void radio_switch_complete_and_rx(uint8_t phy_rx)
{
   3b8d0:	b4f0      	push	{r4, r5, r6, r7}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   3b8d2:	4b1d      	ldr	r3, [pc, #116]	; (3b948 <radio_switch_complete_and_rx+0x78>)
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   3b8d4:	4d1d      	ldr	r5, [pc, #116]	; (3b94c <radio_switch_complete_and_rx+0x7c>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3b8d6:	4e1e      	ldr	r6, [pc, #120]	; (3b950 <radio_switch_complete_and_rx+0x80>)
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   3b8d8:	4c1e      	ldr	r4, [pc, #120]	; (3b954 <radio_switch_complete_and_rx+0x84>)
   3b8da:	4f1f      	ldr	r7, [pc, #124]	; (3b958 <radio_switch_complete_and_rx+0x88>)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   3b8dc:	2203      	movs	r2, #3
   3b8de:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   3b8e2:	782a      	ldrb	r2, [r5, #0]
   3b8e4:	f8c6 7568 	str.w	r7, [r6, #1384]	; 0x568
   3b8e8:	f102 030c 	add.w	r3, r2, #12
   3b8ec:	b2db      	uxtb	r3, r3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   3b8ee:	00d0      	lsls	r0, r2, #3
   3b8f0:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   3b8f2:	0091      	lsls	r1, r2, #2
   3b8f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   3b8f8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   3b8fc:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   3b900:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3b904:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   3b908:	f8c6 056c 	str.w	r0, [r6, #1388]	; 0x56c
	nrf_ppi_event_endpoint_setup(
   3b90c:	f501 4110 	add.w	r1, r1, #36864	; 0x9000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   3b910:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3b914:	4811      	ldr	r0, [pc, #68]	; (3b95c <radio_switch_complete_and_rx+0x8c>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3b916:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3b91a:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   3b91e:	f8d1 3540 	ldr.w	r3, [r1, #1344]	; 0x540
   3b922:	2b2d      	cmp	r3, #45	; 0x2d
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   3b924:	bf8a      	itet	hi
   3b926:	f8d1 3540 	ldrhi.w	r3, [r1, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   3b92a:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   3b92c:	3b2d      	subhi	r3, #45	; 0x2d
   3b92e:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   3b932:	3201      	adds	r2, #1
    p_reg->CHENSET = mask;
   3b934:	4b06      	ldr	r3, [pc, #24]	; (3b950 <radio_switch_complete_and_rx+0x80>)
   3b936:	f44f 6110 	mov.w	r1, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   3b93a:	f002 0201 	and.w	r2, r2, #1
   3b93e:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
   3b942:	702a      	strb	r2, [r5, #0]
	 *       calculations.
	 */
	sw_switch(SW_SWITCH_TX, SW_SWITCH_RX, SW_SWITCH_PHY_1M, SW_SWITCH_FLAGS_DONTCARE, phy_rx,
		  SW_SWITCH_FLAGS_DONTCARE, END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   3b944:	bcf0      	pop	{r4, r5, r6, r7}
   3b946:	4770      	bx	lr
   3b948:	40001000 	.word	0x40001000
   3b94c:	20003b1c 	.word	0x20003b1c
   3b950:	4001f000 	.word	0x4001f000
   3b954:	40009140 	.word	0x40009140
   3b958:	4000110c 	.word	0x4000110c
   3b95c:	40001004 	.word	0x40001004

0003b960 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(uint8_t phy_rx, uint8_t flags_rx,
				  uint8_t phy_tx, uint8_t flags_tx)
{
   3b960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   3b964:	4e28      	ldr	r6, [pc, #160]	; (3ba08 <radio_switch_complete_and_tx+0xa8>)
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   3b966:	4c29      	ldr	r4, [pc, #164]	; (3ba0c <radio_switch_complete_and_tx+0xac>)
   3b968:	4f29      	ldr	r7, [pc, #164]	; (3ba10 <radio_switch_complete_and_tx+0xb0>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3b96a:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 3ba14 <radio_switch_complete_and_tx+0xb4>
   3b96e:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 3ba18 <radio_switch_complete_and_tx+0xb8>
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   3b972:	2303      	movs	r3, #3
   3b974:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   3b978:	7821      	ldrb	r1, [r4, #0]
   3b97a:	f8ce 8568 	str.w	r8, [lr, #1384]	; 0x568
   3b97e:	f101 030c 	add.w	r3, r1, #12
   3b982:	b2db      	uxtb	r3, r3
   3b984:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   3b986:	00cd      	lsls	r5, r1, #3
   3b988:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3b98c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   3b990:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   3b994:	eb07 0781 	add.w	r7, r7, r1, lsl #2
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   3b998:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3b99c:	f8ce 556c 	str.w	r5, [lr, #1388]	; 0x56c
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   3b9a0:	ea4f 0c81 	mov.w	ip, r1, lsl #2
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3b9a4:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	}
}

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   3b9a8:	f649 6534 	movw	r5, #40500	; 0x9e34
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3b9ac:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
   3b9b0:	f24a 13b8 	movw	r3, #41400	; 0xa1b8
   3b9b4:	2a02      	cmp	r2, #2
   3b9b6:	bf18      	it	ne
   3b9b8:	461d      	movne	r5, r3
	}
}

static inline uint32_t hal_radio_rx_chain_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   3b9ba:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
   3b9be:	f242 42b8 	movw	r2, #9400	; 0x24b8
   3b9c2:	f241 3388 	movw	r3, #5000	; 0x1388
   3b9c6:	2802      	cmp	r0, #2
   3b9c8:	bf18      	it	ne
   3b9ca:	4613      	movne	r3, r2
   3b9cc:	f50c 4c10 	add.w	ip, ip, #36864	; 0x9000
			delay = HAL_RADIO_NS2US_ROUND(
   3b9d0:	4a12      	ldr	r2, [pc, #72]	; (3ba1c <radio_switch_complete_and_tx+0xbc>)
   3b9d2:	442b      	add	r3, r5
   3b9d4:	fba2 2303 	umull	r2, r3, r2, r3
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   3b9d8:	f8dc 2540 	ldr.w	r2, [ip, #1344]	; 0x540
   3b9dc:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
   3b9e0:	bf85      	ittet	hi
   3b9e2:	0998      	lsrhi	r0, r3, #6
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   3b9e4:	f8dc 3540 	ldrhi.w	r3, [ip, #1344]	; 0x540
   3b9e8:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   3b9ea:	1a1b      	subhi	r3, r3, r0
   3b9ec:	f8cc 3540 	str.w	r3, [ip, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   3b9f0:	3101      	adds	r1, #1
    p_reg->CHENSET = mask;
   3b9f2:	4b08      	ldr	r3, [pc, #32]	; (3ba14 <radio_switch_complete_and_tx+0xb4>)
   3b9f4:	f44f 6210 	mov.w	r2, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   3b9f8:	f001 0101 	and.w	r1, r1, #1
   3b9fc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   3ba00:	7021      	strb	r1, [r4, #0]

	sw_switch(SW_SWITCH_RX, SW_SWITCH_TX, phy_rx, flags_rx, phy_tx, flags_tx,
		  END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   3ba02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3ba06:	bf00      	nop
   3ba08:	40001000 	.word	0x40001000
   3ba0c:	20003b1c 	.word	0x20003b1c
   3ba10:	40009140 	.word	0x40009140
   3ba14:	4001f000 	.word	0x4001f000
   3ba18:	4000110c 	.word	0x4000110c
   3ba1c:	10624dd3 	.word	0x10624dd3

0003ba20 <radio_switch_complete_and_disable>:
void radio_switch_complete_and_disable(void)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);
#else /* CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE);
   3ba20:	4904      	ldr	r1, [pc, #16]	; (3ba34 <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   3ba22:	4b05      	ldr	r3, [pc, #20]	; (3ba38 <radio_switch_complete_and_disable+0x18>)
   3ba24:	2003      	movs	r0, #3
   3ba26:	f44f 6210 	mov.w	r2, #2304	; 0x900
   3ba2a:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   3ba2e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   3ba32:	4770      	bx	lr
   3ba34:	40001000 	.word	0x40001000
   3ba38:	4001f000 	.word	0x4001f000

0003ba3c <radio_rssi_status_reset>:
	return NRF_RADIO->RSSISAMPLE;
}

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   3ba3c:	4b02      	ldr	r3, [pc, #8]	; (3ba48 <radio_rssi_status_reset+0xc>)
   3ba3e:	2200      	movs	r2, #0
   3ba40:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   3ba44:	4770      	bx	lr
   3ba46:	bf00      	nop
   3ba48:	40001000 	.word	0x40001000

0003ba4c <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   3ba4c:	4b03      	ldr	r3, [pc, #12]	; (3ba5c <radio_rssi_is_ready+0x10>)
   3ba4e:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   3ba52:	3800      	subs	r0, #0
   3ba54:	bf18      	it	ne
   3ba56:	2001      	movne	r0, #1
   3ba58:	4770      	bx	lr
   3ba5a:	bf00      	nop
   3ba5c:	40001000 	.word	0x40001000

0003ba60 <radio_filter_disable>:
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   3ba60:	4a03      	ldr	r2, [pc, #12]	; (3ba70 <radio_filter_disable+0x10>)
   3ba62:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   3ba66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   3ba6a:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   3ba6e:	4770      	bx	lr
   3ba70:	40001000 	.word	0x40001000

0003ba74 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   3ba74:	4b02      	ldr	r3, [pc, #8]	; (3ba80 <radio_filter_status_reset+0xc>)
   3ba76:	2200      	movs	r2, #0
   3ba78:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   3ba7c:	4770      	bx	lr
   3ba7e:	bf00      	nop
   3ba80:	40001000 	.word	0x40001000

0003ba84 <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   3ba84:	4b03      	ldr	r3, [pc, #12]	; (3ba94 <radio_filter_has_match+0x10>)
   3ba86:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   3ba8a:	3800      	subs	r0, #0
   3ba8c:	bf18      	it	ne
   3ba8e:	2001      	movne	r0, #1
   3ba90:	4770      	bx	lr
   3ba92:	bf00      	nop
   3ba94:	40001000 	.word	0x40001000

0003ba98 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   3ba98:	4b01      	ldr	r3, [pc, #4]	; (3baa0 <radio_filter_match_get+0x8>)
   3ba9a:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   3ba9e:	4770      	bx	lr
   3baa0:	40001000 	.word	0x40001000

0003baa4 <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   3baa4:	4904      	ldr	r1, [pc, #16]	; (3bab8 <radio_tmr_status_reset+0x14>)
   3baa6:	4b05      	ldr	r3, [pc, #20]	; (3babc <radio_tmr_status_reset+0x18>)
   3baa8:	4a05      	ldr	r2, [pc, #20]	; (3bac0 <radio_tmr_status_reset+0x1c>)
   3baaa:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   3baae:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   3bab2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
#if defined(CONFIG_BT_CTLR_DF_CONN_CTE_RX)
			BIT(HAL_TRIGGER_CRYPT_DELAY_PPI) |
#endif /* CONFIG_BT_CTLR_DF_CONN_CTE_RX */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   3bab6:	4770      	bx	lr
   3bab8:	4000b000 	.word	0x4000b000
   3babc:	4001f000 	.word	0x4001f000
   3bac0:	0e7000c0 	.word	0x0e7000c0

0003bac4 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   3bac4:	4b03      	ldr	r3, [pc, #12]	; (3bad4 <radio_tmr_tifs_set+0x10>)
   3bac6:	4a04      	ldr	r2, [pc, #16]	; (3bad8 <radio_tmr_tifs_set+0x14>)
   3bac8:	781b      	ldrb	r3, [r3, #0]
   3baca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   3bace:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   3bad2:	4770      	bx	lr
   3bad4:	20003b1c 	.word	0x20003b1c
   3bad8:	40009000 	.word	0x40009000

0003badc <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   3badc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
/* Remove ticks and return positive remainder value in microseconds */
static inline void hal_ticker_remove_jitter(uint32_t *ticks,
					    uint32_t *remainder)
{
	/* Is remainder less than 1 us */
	if ((*remainder & BIT(31)) || !(*remainder / 1000000UL)) {
   3bae0:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   3bae4:	4d31      	ldr	r5, [pc, #196]	; (3bbac <radio_tmr_start+0xd0>)
   3bae6:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   3baea:	42ab      	cmp	r3, r5
   3baec:	4604      	mov	r4, r0
   3baee:	d906      	bls.n	3bafe <radio_tmr_start+0x22>
		*ticks -= 1U;
		*remainder += HAL_TICKER_CNTR_CLK_UNIT_FS / 1000UL;
   3baf0:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   3baf4:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
		*ticks -= 1U;
   3baf8:	3901      	subs	r1, #1
		*remainder += HAL_TICKER_CNTR_CLK_UNIT_FS / 1000UL;
   3bafa:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3bafe:	4b2c      	ldr	r3, [pc, #176]	; (3bbb0 <radio_tmr_start+0xd4>)
	}

	/* pico seconds to micro seconds unit */
	*remainder /= 1000000UL;
   3bb00:	482c      	ldr	r0, [pc, #176]	; (3bbb4 <radio_tmr_start+0xd8>)
    p_reg->CC[ch] = cc_val;
   3bb02:	4d2d      	ldr	r5, [pc, #180]	; (3bbb8 <radio_tmr_start+0xdc>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3bb04:	4e2d      	ldr	r6, [pc, #180]	; (3bbbc <radio_tmr_start+0xe0>)
   3bb06:	2701      	movs	r7, #1
   3bb08:	60df      	str	r7, [r3, #12]
	hal_ticker_remove_jitter(&ticks_start, &remainder);

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   3bb0a:	2700      	movs	r7, #0
   3bb0c:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
   3bb10:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   3bb14:	2704      	movs	r7, #4
   3bb16:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
   3bb1a:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   3bb1c:	2702      	movs	r7, #2
   3bb1e:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
   3bb22:	4a27      	ldr	r2, [pc, #156]	; (3bbc0 <radio_tmr_start+0xe4>)
    p_reg->CC[cc_channel] = cc_value;
   3bb24:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   3bb28:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   3bb2c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   3bb30:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
    p_reg->CHENSET = mask;
   3bb34:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3bb36:	f8c2 6540 	str.w	r6, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3bb3a:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    p_reg->CHENSET = mask;
   3bb3e:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   3bb42:	b364      	cbz	r4, 3bb9e <radio_tmr_start+0xc2>
    p_reg->CHENCLR = mask;
   3bb44:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   3bb48:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   3bb4c:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   3bb50:	4b1b      	ldr	r3, [pc, #108]	; (3bbc0 <radio_tmr_start+0xe4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3bb52:	4a1c      	ldr	r2, [pc, #112]	; (3bbc4 <radio_tmr_start+0xe8>)
   3bb54:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   3bb58:	2101      	movs	r1, #1
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   3bb5a:	2400      	movs	r4, #0
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3bb5c:	f8df 8068 	ldr.w	r8, [pc, #104]	; 3bbc8 <radio_tmr_start+0xec>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3bb60:	f8df e068 	ldr.w	lr, [pc, #104]	; 3bbcc <radio_tmr_start+0xf0>
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3bb64:	f8df c068 	ldr.w	ip, [pc, #104]	; 3bbd0 <radio_tmr_start+0xf4>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3bb68:	4f1a      	ldr	r7, [pc, #104]	; (3bbd4 <radio_tmr_start+0xf8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3bb6a:	4e1b      	ldr	r6, [pc, #108]	; (3bbd8 <radio_tmr_start+0xfc>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3bb6c:	4d1b      	ldr	r5, [pc, #108]	; (3bbdc <radio_tmr_start+0x100>)
   3bb6e:	60d1      	str	r1, [r2, #12]
	SW_SWITCH_TIMER->PRESCALER = 4;
   3bb70:	f04f 0904 	mov.w	r9, #4
	SW_SWITCH_TIMER->MODE = 0;
   3bb74:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   3bb78:	f8c2 9510 	str.w	r9, [r2, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   3bb7c:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
   3bb80:	6011      	str	r1, [r2, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3bb82:	f8c3 8550 	str.w	r8, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3bb86:	f8c3 e554 	str.w	lr, [r3, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3bb8a:	f8c3 c558 	str.w	ip, [r3, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3bb8e:	f8c3 755c 	str.w	r7, [r3, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3bb92:	f8c3 6560 	str.w	r6, [r3, #1376]	; 0x560
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3bb96:	f8c3 5564 	str.w	r5, [r3, #1380]	; 0x564
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   3bb9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    p_reg->CHENCLR = mask;
   3bb9e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   3bba2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   3bba6:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
   3bbaa:	e7d1      	b.n	3bb50 <radio_tmr_start+0x74>
   3bbac:	7ff0bdbf 	.word	0x7ff0bdbf
   3bbb0:	40008000 	.word	0x40008000
   3bbb4:	431bde83 	.word	0x431bde83
   3bbb8:	4000b000 	.word	0x4000b000
   3bbbc:	4000b148 	.word	0x4000b148
   3bbc0:	4001f000 	.word	0x4001f000
   3bbc4:	40009000 	.word	0x40009000
   3bbc8:	4000110c 	.word	0x4000110c
   3bbcc:	4000900c 	.word	0x4000900c
   3bbd0:	40009140 	.word	0x40009140
   3bbd4:	4001f004 	.word	0x4001f004
   3bbd8:	40009144 	.word	0x40009144
   3bbdc:	4001f00c 	.word	0x4001f00c

0003bbe0 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   3bbe0:	4b01      	ldr	r3, [pc, #4]	; (3bbe8 <radio_tmr_start_get+0x8>)
   3bbe2:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   3bbe6:	4770      	bx	lr
   3bbe8:	4000b000 	.word	0x4000b000

0003bbec <radio_tmr_stop>:
   3bbec:	4903      	ldr	r1, [pc, #12]	; (3bbfc <radio_tmr_stop+0x10>)
   3bbee:	4a04      	ldr	r2, [pc, #16]	; (3bc00 <radio_tmr_stop+0x14>)
   3bbf0:	2301      	movs	r3, #1
   3bbf2:	604b      	str	r3, [r1, #4]
   3bbf4:	610b      	str	r3, [r1, #16]
   3bbf6:	6053      	str	r3, [r2, #4]
   3bbf8:	6113      	str	r3, [r2, #16]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   3bbfa:	4770      	bx	lr
   3bbfc:	40008000 	.word	0x40008000
   3bc00:	40009000 	.word	0x40009000

0003bc04 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   3bc04:	4904      	ldr	r1, [pc, #16]	; (3bc18 <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   3bc06:	4b05      	ldr	r3, [pc, #20]	; (3bc1c <radio_tmr_hcto_configure+0x18>)
   3bc08:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   3bc0c:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   3bc10:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   3bc14:	4770      	bx	lr
   3bc16:	bf00      	nop
   3bc18:	40008000 	.word	0x40008000
   3bc1c:	4001f000 	.word	0x4001f000

0003bc20 <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3bc20:	4b05      	ldr	r3, [pc, #20]	; (3bc38 <radio_tmr_aa_capture+0x18>)
   3bc22:	4806      	ldr	r0, [pc, #24]	; (3bc3c <radio_tmr_aa_capture+0x1c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3bc24:	4906      	ldr	r1, [pc, #24]	; (3bc40 <radio_tmr_aa_capture+0x20>)
    p_reg->CHENSET = mask;
   3bc26:	4a07      	ldr	r2, [pc, #28]	; (3bc44 <radio_tmr_aa_capture+0x24>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3bc28:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3bc2c:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
    p_reg->CHENSET = mask;
   3bc30:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   3bc34:	4770      	bx	lr
   3bc36:	bf00      	nop
   3bc38:	4001f000 	.word	0x4001f000
   3bc3c:	40001100 	.word	0x40001100
   3bc40:	40008040 	.word	0x40008040
   3bc44:	04000080 	.word	0x04000080

0003bc48 <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   3bc48:	4b01      	ldr	r3, [pc, #4]	; (3bc50 <radio_tmr_aa_get+0x8>)
   3bc4a:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   3bc4e:	4770      	bx	lr
   3bc50:	40008000 	.word	0x40008000

0003bc54 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   3bc54:	4b01      	ldr	r3, [pc, #4]	; (3bc5c <radio_tmr_aa_save+0x8>)
   3bc56:	6018      	str	r0, [r3, #0]
}
   3bc58:	4770      	bx	lr
   3bc5a:	bf00      	nop
   3bc5c:	20002b80 	.word	0x20002b80

0003bc60 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   3bc60:	4b01      	ldr	r3, [pc, #4]	; (3bc68 <radio_tmr_aa_restore+0x8>)
}
   3bc62:	6818      	ldr	r0, [r3, #0]
   3bc64:	4770      	bx	lr
   3bc66:	bf00      	nop
   3bc68:	20002b80 	.word	0x20002b80

0003bc6c <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   3bc6c:	4b01      	ldr	r3, [pc, #4]	; (3bc74 <radio_tmr_ready_get+0x8>)
   3bc6e:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   3bc72:	4770      	bx	lr
   3bc74:	40008000 	.word	0x40008000

0003bc78 <radio_tmr_end_capture>:
   3bc78:	4b02      	ldr	r3, [pc, #8]	; (3bc84 <radio_tmr_end_capture+0xc>)
   3bc7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   3bc7e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
#endif /* !CONFIG_SOC_SERIES_NRF53X ||
	* (CONFIG_SOC_SERIES_NRF53X && !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	*/
}
   3bc82:	4770      	bx	lr
   3bc84:	4001f000 	.word	0x4001f000

0003bc88 <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   3bc88:	4b01      	ldr	r3, [pc, #4]	; (3bc90 <radio_tmr_end_get+0x8>)
   3bc8a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   3bc8e:	4770      	bx	lr
   3bc90:	40008000 	.word	0x40008000

0003bc94 <radio_tmr_tifs_base_get>:

uint32_t radio_tmr_tifs_base_get(void)
   3bc94:	4b01      	ldr	r3, [pc, #4]	; (3bc9c <radio_tmr_tifs_base_get+0x8>)
   3bc96:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   3bc9a:	4770      	bx	lr
   3bc9c:	40008000 	.word	0x40008000

0003bca0 <radio_ccm_rx_pkt_set>:

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   3bca0:	4b1c      	ldr	r3, [pc, #112]	; (3bd14 <radio_ccm_rx_pkt_set+0x74>)
{
   3bca2:	b430      	push	{r4, r5}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   3bca4:	2400      	movs	r4, #0
   3bca6:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	/* Enable CCM support for 8-bit length field PDUs. */
	mode |= (CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
		CCM_MODE_LENGTH_Msk;

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
   3bcaa:	2902      	cmp	r1, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   3bcac:	f04f 0402 	mov.w	r4, #2
   3bcb0:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
{
   3bcb4:	4604      	mov	r4, r0
	switch (phy) {
   3bcb6:	d026      	beq.n	3bd06 <radio_ccm_rx_pkt_set+0x66>
   3bcb8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   3bcbc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	default:
	case PHY_1M:
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   3bcc0:	4d15      	ldr	r5, [pc, #84]	; (3bd18 <radio_ccm_rx_pkt_set+0x78>)
   3bcc2:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	}

#if !defined(CONFIG_SOC_COMPATIBLE_NRF52832) && \
	(!defined(CONFIG_BT_CTLR_DATA_LENGTH_MAX) || \
	 (CONFIG_BT_CTLR_DATA_LENGTH_MAX < ((HAL_RADIO_PDU_LEN_MAX) - 4)))
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   3bcc6:	4915      	ldr	r1, [pc, #84]	; (3bd1c <radio_ccm_rx_pkt_set+0x7c>)
			RADIO_PCNF1_MAXLEN_Pos;

	NRF_CCM->MAXPACKETSIZE = max_len;
   3bcc8:	4b12      	ldr	r3, [pc, #72]	; (3bd14 <radio_ccm_rx_pkt_set+0x74>)
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   3bcca:	f8d1 1518 	ldr.w	r1, [r1, #1304]	; 0x518
#endif
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   3bcce:	4814      	ldr	r0, [pc, #80]	; (3bd20 <radio_ccm_rx_pkt_set+0x80>)
   3bcd0:	b2c9      	uxtb	r1, r1
	NRF_CCM->MAXPACKETSIZE = max_len;
   3bcd2:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
	NRF_CCM->MODE = mode;
   3bcd6:	f8c3 5504 	str.w	r5, [r3, #1284]	; 0x504
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
	NRF_CCM->SHORTS = 0;
   3bcda:	2100      	movs	r1, #0
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   3bcdc:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   3bce0:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   3bce4:	4c0f      	ldr	r4, [pc, #60]	; (3bd24 <radio_ccm_rx_pkt_set+0x84>)
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   3bce6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3bcea:	2201      	movs	r2, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   3bcec:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
   3bcf0:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDKSGEN = 0;
   3bcf4:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   3bcf8:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   3bcfc:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   3bd00:	601a      	str	r2, [r3, #0]

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   3bd02:	bc30      	pop	{r4, r5}
   3bd04:	4770      	bx	lr
   3bd06:	4b08      	ldr	r3, [pc, #32]	; (3bd28 <radio_ccm_rx_pkt_set+0x88>)
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   3bd08:	4d08      	ldr	r5, [pc, #32]	; (3bd2c <radio_ccm_rx_pkt_set+0x8c>)
   3bd0a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   3bd0e:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
}
   3bd12:	e7d8      	b.n	3bcc6 <radio_ccm_rx_pkt_set+0x26>
   3bd14:	4000f000 	.word	0x4000f000
   3bd18:	01000001 	.word	0x01000001
   3bd1c:	40001000 	.word	0x40001000
   3bd20:	20002b84 	.word	0x20002b84
   3bd24:	20002a74 	.word	0x20002a74
   3bd28:	4001f000 	.word	0x4001f000
   3bd2c:	01010001 	.word	0x01010001

0003bd30 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   3bd30:	4b10      	ldr	r3, [pc, #64]	; (3bd74 <radio_ccm_tx_pkt_set+0x44>)
{
   3bd32:	b410      	push	{r4}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   3bd34:	2200      	movs	r2, #0
{
   3bd36:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   3bd38:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   3bd3a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   3bd3e:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   3bd42:	480d      	ldr	r0, [pc, #52]	; (3bd78 <radio_ccm_tx_pkt_set+0x48>)
   3bd44:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   3bd48:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   3bd4c:	480b      	ldr	r0, [pc, #44]	; (3bd7c <radio_ccm_tx_pkt_set+0x4c>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   3bd4e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   3bd52:	4c0b      	ldr	r4, [pc, #44]	; (3bd80 <radio_ccm_tx_pkt_set+0x50>)
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   3bd54:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   3bd58:	2101      	movs	r1, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   3bd5a:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   3bd5e:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDKSGEN = 0;
   3bd62:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   3bd66:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   3bd6a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   3bd6e:	6019      	str	r1, [r3, #0]

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   3bd70:	bc10      	pop	{r4}
   3bd72:	4770      	bx	lr
   3bd74:	4000f000 	.word	0x4000f000
   3bd78:	01010000 	.word	0x01010000
   3bd7c:	20002b84 	.word	0x20002b84
   3bd80:	20002a74 	.word	0x20002a74

0003bd84 <radio_ccm_is_done>:
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   3bd84:	4a0e      	ldr	r2, [pc, #56]	; (3bdc0 <radio_ccm_is_done+0x3c>)
   3bd86:	2302      	movs	r3, #2
   3bd88:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   3bd8c:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   3bd90:	b933      	cbnz	r3, 3bda0 <radio_ccm_is_done+0x1c>
		__WFE();
   3bd92:	bf20      	wfe
		__SEV();
   3bd94:	bf40      	sev
		__WFE();
   3bd96:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   3bd98:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   3bd9c:	2b00      	cmp	r3, #0
   3bd9e:	d0f8      	beq.n	3bd92 <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   3bda0:	4b07      	ldr	r3, [pc, #28]	; (3bdc0 <radio_ccm_is_done+0x3c>)
   3bda2:	4a08      	ldr	r2, [pc, #32]	; (3bdc4 <radio_ccm_is_done+0x40>)
   3bda4:	2002      	movs	r0, #2
   3bda6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   3bdaa:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   3bdae:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   3bdb2:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   3bdb6:	fab0 f080 	clz	r0, r0
   3bdba:	0940      	lsrs	r0, r0, #5
   3bdbc:	4770      	bx	lr
   3bdbe:	bf00      	nop
   3bdc0:	4000f000 	.word	0x4000f000
   3bdc4:	e000e100 	.word	0xe000e100

0003bdc8 <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   3bdc8:	4b03      	ldr	r3, [pc, #12]	; (3bdd8 <radio_ccm_mic_is_valid+0x10>)
   3bdca:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   3bdce:	3800      	subs	r0, #0
   3bdd0:	bf18      	it	ne
   3bdd2:	2001      	movne	r0, #1
   3bdd4:	4770      	bx	lr
   3bdd6:	bf00      	nop
   3bdd8:	4000f000 	.word	0x4000f000

0003bddc <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   3bddc:	2902      	cmp	r1, #2
{
   3bdde:	b510      	push	{r4, lr}
   3bde0:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   3bde2:	d00b      	beq.n	3bdfc <mayfly_enable_cb+0x20>
   3bde4:	4a0a      	ldr	r2, [pc, #40]	; (3be10 <mayfly_enable_cb+0x34>)
   3bde6:	490b      	ldr	r1, [pc, #44]	; (3be14 <mayfly_enable_cb+0x38>)
   3bde8:	480b      	ldr	r0, [pc, #44]	; (3be18 <mayfly_enable_cb+0x3c>)
   3bdea:	231e      	movs	r3, #30
   3bdec:	f006 fbec 	bl	425c8 <assert_print>
   3bdf0:	4040      	eors	r0, r0
   3bdf2:	f380 8811 	msr	BASEPRI, r0
   3bdf6:	f04f 0003 	mov.w	r0, #3
   3bdfa:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   3bdfc:	200b      	movs	r0, #11
	if (enable) {
   3bdfe:	b11c      	cbz	r4, 3be08 <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   3be00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   3be04:	f7ee ba78 	b.w	2a2f8 <arch_irq_enable>
}
   3be08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   3be0c:	f7ee ba82 	b.w	2a314 <arch_irq_disable>
   3be10:	0004a228 	.word	0x0004a228
   3be14:	0004a278 	.word	0x0004a278
   3be18:	000497b0 	.word	0x000497b0

0003be1c <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   3be1c:	b129      	cbz	r1, 3be2a <mayfly_is_enabled+0xe>
   3be1e:	3901      	subs	r1, #1
   3be20:	2901      	cmp	r1, #1
   3be22:	d805      	bhi.n	3be30 <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   3be24:	200b      	movs	r0, #11
   3be26:	f7ee ba89 	b.w	2a33c <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   3be2a:	2018      	movs	r0, #24
   3be2c:	f7ee ba86 	b.w	2a33c <arch_irq_is_enabled>
{
   3be30:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   3be32:	4a07      	ldr	r2, [pc, #28]	; (3be50 <mayfly_is_enabled+0x34>)
   3be34:	4907      	ldr	r1, [pc, #28]	; (3be54 <mayfly_is_enabled+0x38>)
   3be36:	4808      	ldr	r0, [pc, #32]	; (3be58 <mayfly_is_enabled+0x3c>)
   3be38:	2336      	movs	r3, #54	; 0x36
   3be3a:	f006 fbc5 	bl	425c8 <assert_print>
   3be3e:	4040      	eors	r0, r0
   3be40:	f380 8811 	msr	BASEPRI, r0
   3be44:	f04f 0003 	mov.w	r0, #3
   3be48:	df02      	svc	2
		break;
	}

	return 0;
}
   3be4a:	2000      	movs	r0, #0
   3be4c:	bd08      	pop	{r3, pc}
   3be4e:	bf00      	nop
   3be50:	0004a228 	.word	0x0004a228
   3be54:	00049810 	.word	0x00049810
   3be58:	000497b0 	.word	0x000497b0

0003be5c <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   3be5c:	4288      	cmp	r0, r1
   3be5e:	d00f      	beq.n	3be80 <mayfly_prio_is_equal+0x24>
	return (caller_id == callee_id) ||
   3be60:	2801      	cmp	r0, #1
   3be62:	d007      	beq.n	3be74 <mayfly_prio_is_equal+0x18>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   3be64:	2802      	cmp	r0, #2
   3be66:	d10d      	bne.n	3be84 <mayfly_prio_is_equal+0x28>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   3be68:	f1a1 0001 	sub.w	r0, r1, #1
   3be6c:	fab0 f080 	clz	r0, r0
   3be70:	0940      	lsrs	r0, r0, #5
   3be72:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   3be74:	f1a1 0002 	sub.w	r0, r1, #2
   3be78:	fab0 f080 	clz	r0, r0
   3be7c:	0940      	lsrs	r0, r0, #5
   3be7e:	4770      	bx	lr
   3be80:	2001      	movs	r0, #1
   3be82:	4770      	bx	lr
   3be84:	2000      	movs	r0, #0
#endif
	       0;
}
   3be86:	4770      	bx	lr

0003be88 <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   3be88:	2901      	cmp	r1, #1
{
   3be8a:	b508      	push	{r3, lr}
	switch (callee_id) {
   3be8c:	d00f      	beq.n	3beae <mayfly_pend+0x26>
   3be8e:	2902      	cmp	r1, #2
   3be90:	d00d      	beq.n	3beae <mayfly_pend+0x26>
   3be92:	b191      	cbz	r1, 3beba <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   3be94:	4a0c      	ldr	r2, [pc, #48]	; (3bec8 <mayfly_pend+0x40>)
   3be96:	490d      	ldr	r1, [pc, #52]	; (3becc <mayfly_pend+0x44>)
   3be98:	480d      	ldr	r0, [pc, #52]	; (3bed0 <mayfly_pend+0x48>)
   3be9a:	2367      	movs	r3, #103	; 0x67
   3be9c:	f006 fb94 	bl	425c8 <assert_print>
   3bea0:	4040      	eors	r0, r0
   3bea2:	f380 8811 	msr	BASEPRI, r0
   3bea6:	f04f 0003 	mov.w	r0, #3
   3beaa:	df02      	svc	2
		break;
	}
}
   3beac:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   3beae:	4b09      	ldr	r3, [pc, #36]	; (3bed4 <mayfly_pend+0x4c>)
   3beb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
   3beb4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   3beb8:	bd08      	pop	{r3, pc}
   3beba:	4b06      	ldr	r3, [pc, #24]	; (3bed4 <mayfly_pend+0x4c>)
   3bebc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   3bec0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   3bec4:	bd08      	pop	{r3, pc}
   3bec6:	bf00      	nop
   3bec8:	0004a228 	.word	0x0004a228
   3becc:	00049810 	.word	0x00049810
   3bed0:	000497b0 	.word	0x000497b0
   3bed4:	e000e100 	.word	0xe000e100

0003bed8 <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   3bed8:	2803      	cmp	r0, #3
{
   3beda:	b510      	push	{r4, lr}
   3bedc:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   3bede:	d804      	bhi.n	3beea <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   3bee0:	4b11      	ldr	r3, [pc, #68]	; (3bf28 <hal_ticker_instance0_caller_id_get+0x50>)
   3bee2:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   3bee4:	b18c      	cbz	r4, 3bf0a <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   3bee6:	4620      	mov	r0, r4
   3bee8:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   3beea:	4a10      	ldr	r2, [pc, #64]	; (3bf2c <hal_ticker_instance0_caller_id_get+0x54>)
   3beec:	4910      	ldr	r1, [pc, #64]	; (3bf30 <hal_ticker_instance0_caller_id_get+0x58>)
   3beee:	4811      	ldr	r0, [pc, #68]	; (3bf34 <hal_ticker_instance0_caller_id_get+0x5c>)
   3bef0:	232b      	movs	r3, #43	; 0x2b
   3bef2:	f006 fb69 	bl	425c8 <assert_print>
   3bef6:	4040      	eors	r0, r0
   3bef8:	f380 8811 	msr	BASEPRI, r0
   3befc:	f04f 0003 	mov.w	r0, #3
   3bf00:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   3bf02:	4b09      	ldr	r3, [pc, #36]	; (3bf28 <hal_ticker_instance0_caller_id_get+0x50>)
   3bf04:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   3bf06:	2c00      	cmp	r4, #0
   3bf08:	d1ed      	bne.n	3bee6 <hal_ticker_instance0_caller_id_get+0xe>
   3bf0a:	4a08      	ldr	r2, [pc, #32]	; (3bf2c <hal_ticker_instance0_caller_id_get+0x54>)
   3bf0c:	490a      	ldr	r1, [pc, #40]	; (3bf38 <hal_ticker_instance0_caller_id_get+0x60>)
   3bf0e:	4809      	ldr	r0, [pc, #36]	; (3bf34 <hal_ticker_instance0_caller_id_get+0x5c>)
   3bf10:	232e      	movs	r3, #46	; 0x2e
   3bf12:	f006 fb59 	bl	425c8 <assert_print>
   3bf16:	4040      	eors	r0, r0
   3bf18:	f380 8811 	msr	BASEPRI, r0
   3bf1c:	f04f 0003 	mov.w	r0, #3
   3bf20:	df02      	svc	2
}
   3bf22:	4620      	mov	r0, r4
   3bf24:	bd10      	pop	{r4, pc}
   3bf26:	bf00      	nop
   3bf28:	0004a308 	.word	0x0004a308
   3bf2c:	0004a288 	.word	0x0004a288
   3bf30:	0004a2d8 	.word	0x0004a2d8
   3bf34:	000497b0 	.word	0x000497b0
   3bf38:	0004a2f8 	.word	0x0004a2f8

0003bf3c <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   3bf3c:	3801      	subs	r0, #1
{
   3bf3e:	b510      	push	{r4, lr}
   3bf40:	461c      	mov	r4, r3
	switch (caller_id) {
   3bf42:	2804      	cmp	r0, #4
   3bf44:	f200 8082 	bhi.w	3c04c <hal_ticker_instance0_sched+0x110>
   3bf48:	e8df f000 	tbb	[pc, r0]
   3bf4c:	3f302112 	.word	0x3f302112
   3bf50:	03          	.byte	0x03
   3bf51:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   3bf52:	2904      	cmp	r1, #4
   3bf54:	d04a      	beq.n	3bfec <hal_ticker_instance0_sched+0xb0>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   3bf56:	4a44      	ldr	r2, [pc, #272]	; (3c068 <hal_ticker_instance0_sched+0x12c>)
   3bf58:	4944      	ldr	r1, [pc, #272]	; (3c06c <hal_ticker_instance0_sched+0x130>)
   3bf5a:	4845      	ldr	r0, [pc, #276]	; (3c070 <hal_ticker_instance0_sched+0x134>)
   3bf5c:	23ba      	movs	r3, #186	; 0xba
   3bf5e:	f006 fb33 	bl	425c8 <assert_print>
   3bf62:	4040      	eors	r0, r0
   3bf64:	f380 8811 	msr	BASEPRI, r0
   3bf68:	f04f 0003 	mov.w	r0, #3
   3bf6c:	df02      	svc	2

	default:
		LL_ASSERT(0);
		break;
	}
}
   3bf6e:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   3bf70:	2904      	cmp	r1, #4
   3bf72:	d043      	beq.n	3bffc <hal_ticker_instance0_sched+0xc0>
			LL_ASSERT(0);
   3bf74:	4a3c      	ldr	r2, [pc, #240]	; (3c068 <hal_ticker_instance0_sched+0x12c>)
   3bf76:	493d      	ldr	r1, [pc, #244]	; (3c06c <hal_ticker_instance0_sched+0x130>)
   3bf78:	483d      	ldr	r0, [pc, #244]	; (3c070 <hal_ticker_instance0_sched+0x134>)
   3bf7a:	234e      	movs	r3, #78	; 0x4e
   3bf7c:	f006 fb24 	bl	425c8 <assert_print>
   3bf80:	4040      	eors	r0, r0
   3bf82:	f380 8811 	msr	BASEPRI, r0
   3bf86:	f04f 0003 	mov.w	r0, #3
   3bf8a:	df02      	svc	2
}
   3bf8c:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   3bf8e:	2903      	cmp	r1, #3
   3bf90:	d03c      	beq.n	3c00c <hal_ticker_instance0_sched+0xd0>
			LL_ASSERT(0);
   3bf92:	4a35      	ldr	r2, [pc, #212]	; (3c068 <hal_ticker_instance0_sched+0x12c>)
   3bf94:	4935      	ldr	r1, [pc, #212]	; (3c06c <hal_ticker_instance0_sched+0x130>)
   3bf96:	4836      	ldr	r0, [pc, #216]	; (3c070 <hal_ticker_instance0_sched+0x134>)
   3bf98:	2365      	movs	r3, #101	; 0x65
   3bf9a:	f006 fb15 	bl	425c8 <assert_print>
   3bf9e:	4040      	eors	r0, r0
   3bfa0:	f380 8811 	msr	BASEPRI, r0
   3bfa4:	f04f 0003 	mov.w	r0, #3
   3bfa8:	df02      	svc	2
}
   3bfaa:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   3bfac:	2904      	cmp	r1, #4
   3bfae:	d035      	beq.n	3c01c <hal_ticker_instance0_sched+0xe0>
			LL_ASSERT(0);
   3bfb0:	4a2d      	ldr	r2, [pc, #180]	; (3c068 <hal_ticker_instance0_sched+0x12c>)
   3bfb2:	492e      	ldr	r1, [pc, #184]	; (3c06c <hal_ticker_instance0_sched+0x130>)
   3bfb4:	482e      	ldr	r0, [pc, #184]	; (3c070 <hal_ticker_instance0_sched+0x134>)
   3bfb6:	237c      	movs	r3, #124	; 0x7c
   3bfb8:	f006 fb06 	bl	425c8 <assert_print>
   3bfbc:	4040      	eors	r0, r0
   3bfbe:	f380 8811 	msr	BASEPRI, r0
   3bfc2:	f04f 0003 	mov.w	r0, #3
   3bfc6:	df02      	svc	2
}
   3bfc8:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   3bfca:	2903      	cmp	r1, #3
   3bfcc:	d036      	beq.n	3c03c <hal_ticker_instance0_sched+0x100>
   3bfce:	2904      	cmp	r1, #4
   3bfd0:	d02c      	beq.n	3c02c <hal_ticker_instance0_sched+0xf0>
			LL_ASSERT(0);
   3bfd2:	4a25      	ldr	r2, [pc, #148]	; (3c068 <hal_ticker_instance0_sched+0x12c>)
   3bfd4:	4925      	ldr	r1, [pc, #148]	; (3c06c <hal_ticker_instance0_sched+0x130>)
   3bfd6:	4826      	ldr	r0, [pc, #152]	; (3c070 <hal_ticker_instance0_sched+0x134>)
   3bfd8:	23a2      	movs	r3, #162	; 0xa2
   3bfda:	f006 faf5 	bl	425c8 <assert_print>
   3bfde:	4040      	eors	r0, r0
   3bfe0:	f380 8811 	msr	BASEPRI, r0
   3bfe4:	f04f 0003 	mov.w	r0, #3
   3bfe8:	df02      	svc	2
}
   3bfea:	bd10      	pop	{r4, pc}
			m.param = instance;
   3bfec:	4b21      	ldr	r3, [pc, #132]	; (3c074 <hal_ticker_instance0_sched+0x138>)
   3bfee:	609c      	str	r4, [r3, #8]
}
   3bff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   3bff4:	2102      	movs	r1, #2
   3bff6:	2003      	movs	r0, #3
   3bff8:	f7f4 b8e6 	b.w	301c8 <mayfly_enqueue>
			m.param = instance;
   3bffc:	4b1e      	ldr	r3, [pc, #120]	; (3c078 <hal_ticker_instance0_sched+0x13c>)
   3bffe:	609c      	str	r4, [r3, #8]
}
   3c000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   3c004:	2102      	movs	r1, #2
   3c006:	2000      	movs	r0, #0
   3c008:	f7f4 b8de 	b.w	301c8 <mayfly_enqueue>
			m.param = instance;
   3c00c:	4b1b      	ldr	r3, [pc, #108]	; (3c07c <hal_ticker_instance0_sched+0x140>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   3c00e:	2101      	movs	r1, #1
			m.param = instance;
   3c010:	609c      	str	r4, [r3, #8]
}
   3c012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   3c016:	4608      	mov	r0, r1
   3c018:	f7f4 b8d6 	b.w	301c8 <mayfly_enqueue>
			m.param = instance;
   3c01c:	4b18      	ldr	r3, [pc, #96]	; (3c080 <hal_ticker_instance0_sched+0x144>)
   3c01e:	609c      	str	r4, [r3, #8]
}
   3c020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   3c024:	2102      	movs	r1, #2
   3c026:	2001      	movs	r0, #1
   3c028:	f7f4 b8ce 	b.w	301c8 <mayfly_enqueue>
			m.param = instance;
   3c02c:	4b15      	ldr	r3, [pc, #84]	; (3c084 <hal_ticker_instance0_sched+0x148>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   3c02e:	2102      	movs	r1, #2
			m.param = instance;
   3c030:	609c      	str	r4, [r3, #8]
}
   3c032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   3c036:	4608      	mov	r0, r1
   3c038:	f7f4 b8c6 	b.w	301c8 <mayfly_enqueue>
			m.param = instance;
   3c03c:	4b12      	ldr	r3, [pc, #72]	; (3c088 <hal_ticker_instance0_sched+0x14c>)
   3c03e:	609c      	str	r4, [r3, #8]
}
   3c040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   3c044:	2101      	movs	r1, #1
   3c046:	2002      	movs	r0, #2
   3c048:	f7f4 b8be 	b.w	301c8 <mayfly_enqueue>
		LL_ASSERT(0);
   3c04c:	4a06      	ldr	r2, [pc, #24]	; (3c068 <hal_ticker_instance0_sched+0x12c>)
   3c04e:	4907      	ldr	r1, [pc, #28]	; (3c06c <hal_ticker_instance0_sched+0x130>)
   3c050:	4807      	ldr	r0, [pc, #28]	; (3c070 <hal_ticker_instance0_sched+0x134>)
   3c052:	23c0      	movs	r3, #192	; 0xc0
   3c054:	f006 fab8 	bl	425c8 <assert_print>
   3c058:	4040      	eors	r0, r0
   3c05a:	f380 8811 	msr	BASEPRI, r0
   3c05e:	f04f 0003 	mov.w	r0, #3
   3c062:	df02      	svc	2
}
   3c064:	bd10      	pop	{r4, pc}
   3c066:	bf00      	nop
   3c068:	0004a288 	.word	0x0004a288
   3c06c:	00049810 	.word	0x00049810
   3c070:	000497b0 	.word	0x000497b0
   3c074:	2000083c 	.word	0x2000083c
   3c078:	2000088c 	.word	0x2000088c
   3c07c:	2000087c 	.word	0x2000087c
   3c080:	2000086c 	.word	0x2000086c
   3c084:	2000084c 	.word	0x2000084c
   3c088:	2000085c 	.word	0x2000085c

0003c08c <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   3c08c:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   3c08e:	2000      	movs	r0, #0
   3c090:	f7ff ba7a 	b.w	3b588 <cntr_cmp_set>

0003c094 <hci_vendor_read_static_addr>:

#include <soc.h>

uint8_t hci_vendor_read_static_addr(struct bt_hci_vs_static_addr addrs[],
				 uint8_t size)
{
   3c094:	b508      	push	{r3, lr}
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   3c096:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
   3c09a:	4684      	mov	ip, r0
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   3c09c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   3c0a0:	3201      	adds	r2, #1
   3c0a2:	d03e      	beq.n	3c122 <hci_vendor_read_static_addr+0x8e>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   3c0a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   3c0a8:	f8d2 00a0 	ldr.w	r0, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   3c0ac:	f010 0001 	ands.w	r0, r0, #1
   3c0b0:	d100      	bne.n	3c0b4 <hci_vendor_read_static_addr+0x20>

		return 1;
	}

	return 0;
}
   3c0b2:	bd08      	pop	{r3, pc}
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   3c0b4:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	dst[0] = val;
   3c0b8:	f8cc 3000 	str.w	r3, [ip]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   3c0bc:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
   3c0c0:	f88c 3004 	strb.w	r3, [ip, #4]
	dst[1] = val >> 8;
   3c0c4:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   3c0c8:	f063 033f 	orn	r3, r3, #63	; 0x3f
   3c0cc:	f88c 3005 	strb.w	r3, [ip, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   3c0d0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   3c0d4:	3301      	adds	r3, #1
   3c0d6:	d01c      	beq.n	3c112 <hci_vendor_read_static_addr+0x7e>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   3c0d8:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   3c0dc:	3301      	adds	r3, #1
   3c0de:	d018      	beq.n	3c112 <hci_vendor_read_static_addr+0x7e>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   3c0e0:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   3c0e4:	3301      	adds	r3, #1
   3c0e6:	d014      	beq.n	3c112 <hci_vendor_read_static_addr+0x7e>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   3c0e8:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   3c0ec:	3301      	adds	r3, #1
   3c0ee:	d010      	beq.n	3c112 <hci_vendor_read_static_addr+0x7e>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   3c0f0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   3c0f4:	f8cc 3006 	str.w	r3, [ip, #6]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   3c0f8:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   3c0fc:	f8cc 300a 	str.w	r3, [ip, #10]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   3c100:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   3c104:	f8cc 300e 	str.w	r3, [ip, #14]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   3c108:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   3c10c:	f8cc 3012 	str.w	r3, [ip, #18]
}
   3c110:	e005      	b.n	3c11e <hci_vendor_read_static_addr+0x8a>
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   3c112:	2210      	movs	r2, #16
   3c114:	2100      	movs	r1, #0
   3c116:	f10c 0006 	add.w	r0, ip, #6
   3c11a:	f008 f908 	bl	4432e <memset>
		return 1;
   3c11e:	2001      	movs	r0, #1
}
   3c120:	bd08      	pop	{r3, pc}
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   3c122:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   3c126:	f64f 72ff 	movw	r2, #65535	; 0xffff
   3c12a:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   3c12c:	4293      	cmp	r3, r2
   3c12e:	d1b9      	bne.n	3c0a4 <hci_vendor_read_static_addr+0x10>
	return 0;
   3c130:	2000      	movs	r0, #0
}
   3c132:	bd08      	pop	{r3, pc}

0003c134 <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   3c134:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   3c136:	2210      	movs	r2, #16
{
   3c138:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   3c13a:	2100      	movs	r1, #0
   3c13c:	f008 f8f7 	bl	4432e <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   3c140:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   3c144:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   3c148:	3201      	adds	r2, #1
   3c14a:	d018      	beq.n	3c17e <hci_vendor_read_key_hierarchy_roots+0x4a>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   3c14c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   3c150:	3201      	adds	r2, #1
   3c152:	d014      	beq.n	3c17e <hci_vendor_read_key_hierarchy_roots+0x4a>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   3c154:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   3c158:	3201      	adds	r2, #1
   3c15a:	d010      	beq.n	3c17e <hci_vendor_read_key_hierarchy_roots+0x4a>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   3c15c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   3c160:	3201      	adds	r2, #1
   3c162:	d00c      	beq.n	3c17e <hci_vendor_read_key_hierarchy_roots+0x4a>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   3c164:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	dst[0] = val;
   3c168:	6022      	str	r2, [r4, #0]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   3c16a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   3c16e:	6062      	str	r2, [r4, #4]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   3c170:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   3c174:	60a2      	str	r2, [r4, #8]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   3c176:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   3c17a:	60e3      	str	r3, [r4, #12]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   3c17c:	bd10      	pop	{r4, pc}
		(void)memset(er, 0x00, 16);
   3c17e:	4620      	mov	r0, r4
   3c180:	2210      	movs	r2, #16
}
   3c182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   3c186:	2100      	movs	r1, #0
   3c188:	f008 b8d1 	b.w	4432e <memset>

0003c18c <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   3c18c:	4b02      	ldr	r3, [pc, #8]	; (3c198 <net_buf_pool_get+0xc>)
   3c18e:	222c      	movs	r2, #44	; 0x2c
   3c190:	fb02 3000 	mla	r0, r2, r0, r3
   3c194:	4770      	bx	lr
   3c196:	bf00      	nop
   3c198:	20000d9c 	.word	0x20000d9c

0003c19c <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   3c19c:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   3c19e:	4b06      	ldr	r3, [pc, #24]	; (3c1b8 <net_buf_id+0x1c>)
   3c1a0:	212c      	movs	r1, #44	; 0x2c
   3c1a2:	fb01 3302 	mla	r3, r1, r2, r3
   3c1a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   3c1a8:	7f1b      	ldrb	r3, [r3, #28]
   3c1aa:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   3c1ac:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   3c1ae:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   3c1b2:	fbb0 f0f3 	udiv	r0, r0, r3
   3c1b6:	4770      	bx	lr
   3c1b8:	20000d9c 	.word	0x20000d9c

0003c1bc <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   3c1bc:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   3c1be:	4b0a      	ldr	r3, [pc, #40]	; (3c1e8 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   3c1c0:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   3c1c2:	242c      	movs	r4, #44	; 0x2c
   3c1c4:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   3c1c8:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   3c1ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   3c1cc:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   3c1ce:	681a      	ldr	r2, [r3, #0]
   3c1d0:	4294      	cmp	r4, r2
   3c1d2:	bf94      	ite	ls
   3c1d4:	600c      	strls	r4, [r1, #0]
   3c1d6:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   3c1d8:	e9d3 5400 	ldrd	r5, r4, [r3]
   3c1dc:	f7ff ffde 	bl	3c19c <net_buf_id>
}
   3c1e0:	fb05 4000 	mla	r0, r5, r0, r4
   3c1e4:	bd38      	pop	{r3, r4, r5, pc}
   3c1e6:	bf00      	nop
   3c1e8:	20000d9c 	.word	0x20000d9c

0003c1ec <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   3c1ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c1f0:	4605      	mov	r5, r0
   3c1f2:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   3c1f4:	4610      	mov	r0, r2
   3c1f6:	4619      	mov	r1, r3
{
   3c1f8:	4691      	mov	r9, r2
   3c1fa:	4698      	mov	r8, r3
   3c1fc:	4617      	mov	r7, r2
   3c1fe:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   3c200:	f00c f9fd 	bl	485fe <sys_clock_timeout_end_calc>
   3c204:	4682      	mov	sl, r0
   3c206:	468b      	mov	fp, r1
	__asm__ volatile(
   3c208:	f04f 0320 	mov.w	r3, #32
   3c20c:	f3ef 8111 	mrs	r1, BASEPRI
   3c210:	f383 8812 	msr	BASEPRI_MAX, r3
   3c214:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   3c218:	8b6b      	ldrh	r3, [r5, #26]
   3c21a:	2b00      	cmp	r3, #0
   3c21c:	d058      	beq.n	3c2d0 <net_buf_alloc_len+0xe4>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   3c21e:	8b2a      	ldrh	r2, [r5, #24]
   3c220:	429a      	cmp	r2, r3
   3c222:	d93c      	bls.n	3c29e <net_buf_alloc_len+0xb2>
   3c224:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   3c226:	2200      	movs	r2, #0
   3c228:	2300      	movs	r3, #0
   3c22a:	4628      	mov	r0, r5
   3c22c:	f004 fc68 	bl	40b00 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   3c230:	9900      	ldr	r1, [sp, #0]
   3c232:	4604      	mov	r4, r0
   3c234:	2800      	cmp	r0, #0
   3c236:	d032      	beq.n	3c29e <net_buf_alloc_len+0xb2>
	__asm__ volatile(
   3c238:	f381 8811 	msr	BASEPRI, r1
   3c23c:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   3c240:	9b01      	ldr	r3, [sp, #4]
   3c242:	2b00      	cmp	r3, #0
   3c244:	d055      	beq.n	3c2f2 <net_buf_alloc_len+0x106>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   3c246:	ea58 0309 	orrs.w	r3, r8, r9
   3c24a:	d00f      	beq.n	3c26c <net_buf_alloc_len+0x80>
   3c24c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   3c250:	bf08      	it	eq
   3c252:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
   3c256:	d009      	beq.n	3c26c <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   3c258:	f005 fb64 	bl	41924 <sys_clock_tick_get>
   3c25c:	ebba 0700 	subs.w	r7, sl, r0
   3c260:	eb6b 0601 	sbc.w	r6, fp, r1

			if (remaining <= 0) {
   3c264:	2e00      	cmp	r6, #0
   3c266:	bfbc      	itt	lt
   3c268:	2700      	movlt	r7, #0
   3c26a:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   3c26c:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   3c26e:	4d26      	ldr	r5, [pc, #152]	; (3c308 <net_buf_alloc_len+0x11c>)
   3c270:	f04f 082c 	mov.w	r8, #44	; 0x2c
   3c274:	fb08 5303 	mla	r3, r8, r3, r5
   3c278:	463a      	mov	r2, r7
   3c27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   3c27c:	681b      	ldr	r3, [r3, #0]
   3c27e:	a901      	add	r1, sp, #4
   3c280:	f8d3 9000 	ldr.w	r9, [r3]
   3c284:	4620      	mov	r0, r4
   3c286:	4633      	mov	r3, r6
   3c288:	47c8      	blx	r9
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   3c28a:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   3c28c:	2800      	cmp	r0, #0
   3c28e:	d131      	bne.n	3c2f4 <net_buf_alloc_len+0x108>
	k_lifo_put(&pool->free, buf);
   3c290:	79a0      	ldrb	r0, [r4, #6]
   3c292:	4621      	mov	r1, r4
   3c294:	fb00 5008 	mla	r0, r0, r8, r5
   3c298:	f00b feee 	bl	48078 <k_queue_prepend>
}
   3c29c:	e024      	b.n	3c2e8 <net_buf_alloc_len+0xfc>
		uninit_count = pool->uninit_count--;
   3c29e:	8b68      	ldrh	r0, [r5, #26]
   3c2a0:	1e43      	subs	r3, r0, #1
   3c2a2:	836b      	strh	r3, [r5, #26]
   3c2a4:	f381 8811 	msr	BASEPRI, r1
   3c2a8:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   3c2ac:	7f2b      	ldrb	r3, [r5, #28]
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   3c2ae:	8b2a      	ldrh	r2, [r5, #24]
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   3c2b0:	6aac      	ldr	r4, [r5, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   3c2b2:	3317      	adds	r3, #23
   3c2b4:	f023 0303 	bic.w	r3, r3, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   3c2b8:	1a12      	subs	r2, r2, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   3c2ba:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   3c2be:	4b12      	ldr	r3, [pc, #72]	; (3c308 <net_buf_alloc_len+0x11c>)
   3c2c0:	4a12      	ldr	r2, [pc, #72]	; (3c30c <net_buf_alloc_len+0x120>)
   3c2c2:	1aeb      	subs	r3, r5, r3
   3c2c4:	109b      	asrs	r3, r3, #2
   3c2c6:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   3c2c8:	71a3      	strb	r3, [r4, #6]
	buf->user_data_size = pool->user_data_size;
   3c2ca:	7f2b      	ldrb	r3, [r5, #28]
   3c2cc:	71e3      	strb	r3, [r4, #7]
		goto success;
   3c2ce:	e7b7      	b.n	3c240 <net_buf_alloc_len+0x54>
   3c2d0:	f381 8811 	msr	BASEPRI, r1
   3c2d4:	f3bf 8f6f 	isb	sy
   3c2d8:	464a      	mov	r2, r9
   3c2da:	4643      	mov	r3, r8
   3c2dc:	4628      	mov	r0, r5
   3c2de:	f004 fc0f 	bl	40b00 <z_impl_k_queue_get>
	if (!buf) {
   3c2e2:	4604      	mov	r4, r0
   3c2e4:	2800      	cmp	r0, #0
   3c2e6:	d1ab      	bne.n	3c240 <net_buf_alloc_len+0x54>
		return NULL;
   3c2e8:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   3c2ea:	4620      	mov	r0, r4
   3c2ec:	b003      	add	sp, #12
   3c2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   3c2f2:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   3c2f4:	2300      	movs	r3, #0
   3c2f6:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   3c2f8:	2201      	movs	r2, #1
   3c2fa:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   3c2fc:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   3c2fe:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   3c300:	6923      	ldr	r3, [r4, #16]
   3c302:	81e2      	strh	r2, [r4, #14]
   3c304:	60a3      	str	r3, [r4, #8]
	return buf;
   3c306:	e7f0      	b.n	3c2ea <net_buf_alloc_len+0xfe>
   3c308:	20000d9c 	.word	0x20000d9c
   3c30c:	ba2e8ba3 	.word	0xba2e8ba3

0003c310 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   3c310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3c314:	4d16      	ldr	r5, [pc, #88]	; (3c370 <net_buf_unref+0x60>)
   3c316:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   3c318:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   3c31a:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   3c31c:	b90c      	cbnz	r4, 3c322 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   3c31e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   3c322:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   3c324:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   3c328:	3b01      	subs	r3, #1
   3c32a:	b2db      	uxtb	r3, r3
   3c32c:	7123      	strb	r3, [r4, #4]
   3c32e:	2b00      	cmp	r3, #0
   3c330:	d1f5      	bne.n	3c31e <net_buf_unref+0xe>
		if (buf->__buf) {
   3c332:	6921      	ldr	r1, [r4, #16]
   3c334:	b159      	cbz	r1, 3c34e <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   3c336:	7963      	ldrb	r3, [r4, #5]
   3c338:	079b      	lsls	r3, r3, #30
   3c33a:	d407      	bmi.n	3c34c <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   3c33c:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   3c33e:	fb07 5303 	mla	r3, r7, r3, r5
   3c342:	4620      	mov	r0, r4
   3c344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   3c346:	681b      	ldr	r3, [r3, #0]
   3c348:	689b      	ldr	r3, [r3, #8]
   3c34a:	4798      	blx	r3
			buf->__buf = NULL;
   3c34c:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   3c34e:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   3c350:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   3c352:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   3c356:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   3c358:	6a1b      	ldr	r3, [r3, #32]
   3c35a:	b11b      	cbz	r3, 3c364 <net_buf_unref+0x54>
			pool->destroy(buf);
   3c35c:	4620      	mov	r0, r4
   3c35e:	4798      	blx	r3
{
   3c360:	4644      	mov	r4, r8
   3c362:	e7db      	b.n	3c31c <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   3c364:	4621      	mov	r1, r4
   3c366:	fb00 5007 	mla	r0, r0, r7, r5
   3c36a:	f00b fe85 	bl	48078 <k_queue_prepend>
}
   3c36e:	e7f7      	b.n	3c360 <net_buf_unref+0x50>
   3c370:	20000d9c 	.word	0x20000d9c

0003c374 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   3c374:	b508      	push	{r3, lr}
   3c376:	4804      	ldr	r0, [pc, #16]	; (3c388 <xoshiro128_initialize+0x14>)
   3c378:	f00b fcce 	bl	47d18 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
   3c37c:	2800      	cmp	r0, #0
}
   3c37e:	bf0c      	ite	eq
   3c380:	f06f 0012 	mvneq.w	r0, #18
   3c384:	2000      	movne	r0, #0
   3c386:	bd08      	pop	{r3, pc}
   3c388:	00048aa8 	.word	0x00048aa8

0003c38c <endpoint_ctx>:

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
   3c38c:	0602      	lsls	r2, r0, #24
	uint8_t ep_num = USB_EP_GET_IDX(ep);
   3c38e:	f000 037f 	and.w	r3, r0, #127	; 0x7f
	if (NRF_USBD_EPIN_CHECK(ep)) {
   3c392:	d512      	bpl.n	3c3ba <endpoint_ctx+0x2e>
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   3c394:	2b08      	cmp	r3, #8
   3c396:	d105      	bne.n	3c3a4 <endpoint_ctx+0x18>

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   3c398:	0701      	lsls	r1, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
   3c39a:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   3c39e:	d506      	bpl.n	3c3ae <endpoint_ctx+0x22>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
   3c3a0:	480e      	ldr	r0, [pc, #56]	; (3c3dc <endpoint_ctx+0x50>)
   3c3a2:	4770      	bx	lr
			if (ep_num >= CFG_EPIN_CNT) {
   3c3a4:	f010 0f78 	tst.w	r0, #120	; 0x78
   3c3a8:	d112      	bne.n	3c3d0 <endpoint_ctx+0x44>
	ep_num = NRF_USBD_EP_NR_GET(ep);
   3c3aa:	f000 030f 	and.w	r3, r0, #15
		} else {
			return &ctx->ep_ctx[ep_num];
   3c3ae:	204c      	movs	r0, #76	; 0x4c
   3c3b0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   3c3b4:	4b0a      	ldr	r3, [pc, #40]	; (3c3e0 <endpoint_ctx+0x54>)
   3c3b6:	4418      	add	r0, r3
   3c3b8:	4770      	bx	lr
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   3c3ba:	2b08      	cmp	r3, #8
   3c3bc:	d105      	bne.n	3c3ca <endpoint_ctx+0x3e>
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   3c3be:	0702      	lsls	r2, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
   3c3c0:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   3c3c4:	d506      	bpl.n	3c3d4 <endpoint_ctx+0x48>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
   3c3c6:	4807      	ldr	r0, [pc, #28]	; (3c3e4 <endpoint_ctx+0x58>)
   3c3c8:	4770      	bx	lr
			if (ep_num >= CFG_EPOUT_CNT) {
   3c3ca:	f010 0f78 	tst.w	r0, #120	; 0x78
   3c3ce:	d0f6      	beq.n	3c3be <endpoint_ctx+0x32>
		return NULL;
   3c3d0:	2000      	movs	r0, #0
					    ep_num];
		}
	}

	return NULL;
}
   3c3d2:	4770      	bx	lr
			return &ctx->ep_ctx[CFG_EPIN_CNT +
   3c3d4:	4804      	ldr	r0, [pc, #16]	; (3c3e8 <endpoint_ctx+0x5c>)
   3c3d6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   3c3da:	4770      	bx	lr
   3c3dc:	20002e10 	.word	0x20002e10
   3c3e0:	20002cc4 	.word	0x20002cc4
   3c3e4:	20002f30 	.word	0x20002f30
   3c3e8:	20002e30 	.word	0x20002e30

0003c3ec <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
   3c3ec:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
   3c3ee:	4801      	ldr	r0, [pc, #4]	; (3c3f4 <usbd_evt_put+0x8>)
   3c3f0:	f00b be37 	b.w	48062 <k_queue_append>
   3c3f4:	20000d84 	.word	0x20000d84

0003c3f8 <usbd_work_schedule>:
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   3c3f8:	4901      	ldr	r1, [pc, #4]	; (3c400 <usbd_work_schedule+0x8>)
   3c3fa:	4802      	ldr	r0, [pc, #8]	; (3c404 <usbd_work_schedule+0xc>)
   3c3fc:	f00b bf34 	b.w	48268 <k_work_submit_to_queue>
   3c400:	20002cec 	.word	0x20002cec
   3c404:	20001800 	.word	0x20001800

0003c408 <usb_init>:
	}
	return 0;
}

static int usb_init(const struct device *arg)
{
   3c408:	b513      	push	{r0, r1, r4, lr}
	};

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
   3c40a:	480b      	ldr	r0, [pc, #44]	; (3c438 <usb_init+0x30>)
   3c40c:	f002 fedc 	bl	3f1c8 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
   3c410:	2400      	movs	r4, #0
	nrfx_power_usbevt_init(&usbevt_config);
   3c412:	480a      	ldr	r0, [pc, #40]	; (3c43c <usb_init+0x34>)
   3c414:	f002 ff1e 	bl	3f254 <nrfx_power_usbevt_init>
	k_work_queue_start(&usbd_work_queue,
   3c418:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3c41c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   3c420:	4907      	ldr	r1, [pc, #28]	; (3c440 <usb_init+0x38>)
   3c422:	4808      	ldr	r0, [pc, #32]	; (3c444 <usb_init+0x3c>)
   3c424:	9400      	str	r4, [sp, #0]
   3c426:	f004 fd43 	bl	40eb0 <k_work_queue_start>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_work_init(&ctx->usb_work, usbd_work_handler);
   3c42a:	4907      	ldr	r1, [pc, #28]	; (3c448 <usb_init+0x40>)
   3c42c:	4807      	ldr	r0, [pc, #28]	; (3c44c <usb_init+0x44>)
   3c42e:	f00b feee 	bl	4820e <k_work_init>

	return 0;
}
   3c432:	4620      	mov	r0, r4
   3c434:	b002      	add	sp, #8
   3c436:	bd10      	pop	{r4, pc}
   3c438:	0004aa62 	.word	0x0004aa62
   3c43c:	0004a318 	.word	0x0004a318
   3c440:	20005410 	.word	0x20005410
   3c444:	20001800 	.word	0x20001800
   3c448:	0003c761 	.word	0x0003c761
   3c44c:	20002cec 	.word	0x20002cec

0003c450 <usbd_evt_get>:
   3c450:	4802      	ldr	r0, [pc, #8]	; (3c45c <usbd_evt_get+0xc>)
   3c452:	2200      	movs	r2, #0
   3c454:	2300      	movs	r3, #0
   3c456:	f004 bb53 	b.w	40b00 <z_impl_k_queue_get>
   3c45a:	bf00      	nop
   3c45c:	20000d84 	.word	0x20000d84

0003c460 <usbd_evt_flush>:
{
   3c460:	b510      	push	{r4, lr}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   3c462:	4c05      	ldr	r4, [pc, #20]	; (3c478 <usbd_evt_flush+0x18>)
		ev = usbd_evt_get();
   3c464:	f7ff fff4 	bl	3c450 <usbd_evt_get>
		if (ev) {
   3c468:	b120      	cbz	r0, 3c474 <usbd_evt_flush+0x14>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   3c46a:	1d01      	adds	r1, r0, #4
   3c46c:	4620      	mov	r0, r4
   3c46e:	f00b fd10 	bl	47e92 <k_mem_slab_free>
	} while (ev != NULL);
   3c472:	e7f7      	b.n	3c464 <usbd_evt_flush+0x4>
}
   3c474:	bd10      	pop	{r4, pc}
   3c476:	bf00      	nop
   3c478:	20000c68 	.word	0x20000c68

0003c47c <usbd_evt_alloc>:
{
   3c47c:	b507      	push	{r0, r1, r2, lr}
	if (k_mem_slab_alloc(&fifo_elem_slab,
   3c47e:	2300      	movs	r3, #0
   3c480:	480e      	ldr	r0, [pc, #56]	; (3c4bc <usbd_evt_alloc+0x40>)
   3c482:	2200      	movs	r2, #0
   3c484:	a901      	add	r1, sp, #4
   3c486:	f004 f8d3 	bl	40630 <k_mem_slab_alloc>
   3c48a:	b190      	cbz	r0, 3c4b2 <usbd_evt_alloc+0x36>
		usbd_evt_flush();
   3c48c:	f7ff ffe8 	bl	3c460 <usbd_evt_flush>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
   3c490:	480a      	ldr	r0, [pc, #40]	; (3c4bc <usbd_evt_alloc+0x40>)
   3c492:	2200      	movs	r2, #0
   3c494:	2300      	movs	r3, #0
   3c496:	a901      	add	r1, sp, #4
   3c498:	f004 f8ca 	bl	40630 <k_mem_slab_alloc>
   3c49c:	b938      	cbnz	r0, 3c4ae <usbd_evt_alloc+0x32>
		ev = (struct usbd_event *)block.data;
   3c49e:	9801      	ldr	r0, [sp, #4]
		ev->evt_type = USBD_EVT_REINIT;
   3c4a0:	2304      	movs	r3, #4
		ev->block = block;
   3c4a2:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
   3c4a4:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
   3c4a6:	f7ff ffa1 	bl	3c3ec <usbd_evt_put>
		usbd_work_schedule();
   3c4aa:	f7ff ffa5 	bl	3c3f8 <usbd_work_schedule>
		return NULL;
   3c4ae:	2000      	movs	r0, #0
   3c4b0:	e001      	b.n	3c4b6 <usbd_evt_alloc+0x3a>
	ev = (struct usbd_event *)block.data;
   3c4b2:	9801      	ldr	r0, [sp, #4]
	ev->block = block;
   3c4b4:	6040      	str	r0, [r0, #4]
}
   3c4b6:	b003      	add	sp, #12
   3c4b8:	f85d fb04 	ldr.w	pc, [sp], #4
   3c4bc:	20000c68 	.word	0x20000c68

0003c4c0 <usbd_event_transfer_data>:
{
   3c4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		endpoint_ctx(p_event->data.eptransfer.ep);
   3c4c2:	7887      	ldrb	r7, [r0, #2]
{
   3c4c4:	4606      	mov	r6, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
   3c4c6:	4638      	mov	r0, r7
   3c4c8:	f7ff ff60 	bl	3c38c <endpoint_ctx>
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   3c4cc:	063b      	lsls	r3, r7, #24
		switch (p_event->data.eptransfer.status) {
   3c4ce:	78f5      	ldrb	r5, [r6, #3]
		endpoint_ctx(p_event->data.eptransfer.ep);
   3c4d0:	4604      	mov	r4, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   3c4d2:	d512      	bpl.n	3c4fa <usbd_event_transfer_data+0x3a>
		switch (p_event->data.eptransfer.status) {
   3c4d4:	2d00      	cmp	r5, #0
   3c4d6:	d143      	bne.n	3c560 <usbd_event_transfer_data+0xa0>
			struct usbd_event *ev = usbd_evt_alloc();
   3c4d8:	f7ff ffd0 	bl	3c47c <usbd_evt_alloc>
			if (!ev) {
   3c4dc:	4603      	mov	r3, r0
   3c4de:	2800      	cmp	r0, #0
   3c4e0:	d03e      	beq.n	3c560 <usbd_event_transfer_data+0xa0>
			ev->evt_type = USBD_EVT_EP;
   3c4e2:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
   3c4e4:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
   3c4e6:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   3c4e8:	2203      	movs	r2, #3
   3c4ea:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   3c4ec:	609c      	str	r4, [r3, #8]
			usbd_evt_put(ev);
   3c4ee:	f7ff ff7d 	bl	3c3ec <usbd_evt_put>
}
   3c4f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			usbd_work_schedule();
   3c4f6:	f7ff bf7f 	b.w	3c3f8 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
   3c4fa:	b14d      	cbz	r5, 3c510 <usbd_event_transfer_data+0x50>
   3c4fc:	2d01      	cmp	r5, #1
   3c4fe:	d12f      	bne.n	3c560 <usbd_event_transfer_data+0xa0>
			struct usbd_event *ev = usbd_evt_alloc();
   3c500:	f7ff ffbc 	bl	3c47c <usbd_evt_alloc>
			if (!ev) {
   3c504:	4603      	mov	r3, r0
   3c506:	b358      	cbz	r0, 3c560 <usbd_event_transfer_data+0xa0>
			ep_ctx->read_pending = true;
   3c508:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
   3c50a:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   3c50c:	7305      	strb	r5, [r0, #12]
   3c50e:	e7ed      	b.n	3c4ec <usbd_event_transfer_data+0x2c>
			struct usbd_event *ev = usbd_evt_alloc();
   3c510:	f7ff ffb4 	bl	3c47c <usbd_evt_alloc>
			if (!ev) {
   3c514:	b320      	cbz	r0, 3c560 <usbd_event_transfer_data+0xa0>
				p_event->data.eptransfer.ep);
   3c516:	78b2      	ldrb	r2, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
   3c518:	4b12      	ldr	r3, [pc, #72]	; (3c564 <usbd_event_transfer_data+0xa4>)
   3c51a:	f012 0f80 	tst.w	r2, #128	; 0x80
   3c51e:	f002 0108 	and.w	r1, r2, #8
   3c522:	d011      	beq.n	3c548 <usbd_event_transfer_data+0x88>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   3c524:	b141      	cbz	r1, 3c538 <usbd_event_transfer_data+0x78>
        {
            ret = p_reg->ISOIN.AMOUNT;
   3c526:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
   3c52a:	60e3      	str	r3, [r4, #12]
			ev->evt_type = USBD_EVT_EP;
   3c52c:	2301      	movs	r3, #1
   3c52e:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   3c530:	2302      	movs	r3, #2
   3c532:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   3c534:	6084      	str	r4, [r0, #8]
   3c536:	e7da      	b.n	3c4ee <usbd_event_transfer_data+0x2e>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
   3c538:	f002 020f 	and.w	r2, r2, #15
   3c53c:	2114      	movs	r1, #20
   3c53e:	fb01 3302 	mla	r3, r1, r2, r3
   3c542:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
   3c546:	e7f0      	b.n	3c52a <usbd_event_transfer_data+0x6a>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   3c548:	b111      	cbz	r1, 3c550 <usbd_event_transfer_data+0x90>
        {
            ret = p_reg->ISOOUT.AMOUNT;
   3c54a:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
   3c54e:	e7ec      	b.n	3c52a <usbd_event_transfer_data+0x6a>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
   3c550:	f002 020f 	and.w	r2, r2, #15
   3c554:	2114      	movs	r1, #20
   3c556:	fb01 3302 	mla	r3, r1, r2, r3
   3c55a:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
   3c55e:	e7e4      	b.n	3c52a <usbd_event_transfer_data+0x6a>
}
   3c560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3c562:	bf00      	nop
   3c564:	40027000 	.word	0x40027000

0003c568 <usb_dc_power_event_handler>:
	switch (event) {
   3c568:	2802      	cmp	r0, #2
{
   3c56a:	b510      	push	{r4, lr}
   3c56c:	d811      	bhi.n	3c592 <usb_dc_power_event_handler+0x2a>
   3c56e:	4b09      	ldr	r3, [pc, #36]	; (3c594 <usb_dc_power_event_handler+0x2c>)
   3c570:	5c1c      	ldrb	r4, [r3, r0]
	struct usbd_event *ev = usbd_evt_alloc();
   3c572:	f7ff ff83 	bl	3c47c <usbd_evt_alloc>
	if (!ev) {
   3c576:	b160      	cbz	r0, 3c592 <usb_dc_power_event_handler+0x2a>
	ev->evt_type = USBD_EVT_POWER;
   3c578:	2200      	movs	r2, #0
   3c57a:	7402      	strb	r2, [r0, #16]
	ev->evt.pwr_evt.state = state;
   3c57c:	7204      	strb	r4, [r0, #8]
	usbd_evt_put(ev);
   3c57e:	f7ff ff35 	bl	3c3ec <usbd_evt_put>
	if (usbd_ctx.attached) {
   3c582:	4b05      	ldr	r3, [pc, #20]	; (3c598 <usb_dc_power_event_handler+0x30>)
   3c584:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   3c588:	b11b      	cbz	r3, 3c592 <usb_dc_power_event_handler+0x2a>
}
   3c58a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usbd_work_schedule();
   3c58e:	f7ff bf33 	b.w	3c3f8 <usbd_work_schedule>
}
   3c592:	bd10      	pop	{r4, pc}
   3c594:	0004aa5f 	.word	0x0004aa5f
   3c598:	20002cc4 	.word	0x20002cc4

0003c59c <hfxo_stop.constprop.0.isra.0>:
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
   3c59c:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   3c59e:	490e      	ldr	r1, [pc, #56]	; (3c5d8 <hfxo_stop.constprop.0.isra.0+0x3c>)
   3c5a0:	f3bf 8f5b 	dmb	ish
   3c5a4:	2300      	movs	r3, #0
   3c5a6:	e851 2f00 	ldrex	r2, [r1]
   3c5aa:	2a01      	cmp	r2, #1
   3c5ac:	d103      	bne.n	3c5b6 <hfxo_stop.constprop.0.isra.0+0x1a>
   3c5ae:	e841 3000 	strex	r0, r3, [r1]
   3c5b2:	2800      	cmp	r0, #0
   3c5b4:	d1f7      	bne.n	3c5a6 <hfxo_stop.constprop.0.isra.0+0xa>
   3c5b6:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
   3c5ba:	d10c      	bne.n	3c5d6 <hfxo_stop.constprop.0.isra.0+0x3a>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
   3c5bc:	f851 4c04 	ldr.w	r4, [r1, #-4]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
   3c5c0:	3914      	subs	r1, #20
   3c5c2:	4620      	mov	r0, r4
   3c5c4:	f005 fe15 	bl	421f2 <onoff_cancel>

	if (rv == -EALREADY) {
   3c5c8:	3078      	adds	r0, #120	; 0x78
   3c5ca:	d104      	bne.n	3c5d6 <hfxo_stop.constprop.0.isra.0+0x3a>
		rv = onoff_release(mgr);
   3c5cc:	4620      	mov	r0, r4
}
   3c5ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3c5d2:	f005 bde9 	b.w	421a8 <onoff_release>
   3c5d6:	bd10      	pop	{r4, pc}
   3c5d8:	20002ce4 	.word	0x20002ce4

0003c5dc <usbd_event_handler>:
{
   3c5dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   3c5de:	4606      	mov	r6, r0
   3c5e0:	b089      	sub	sp, #36	; 0x24
	struct usbd_event evt = {0};
   3c5e2:	2214      	movs	r2, #20
   3c5e4:	2100      	movs	r1, #0
   3c5e6:	a803      	add	r0, sp, #12
   3c5e8:	f007 fea1 	bl	4432e <memset>
	switch (p_event->type) {
   3c5ec:	7833      	ldrb	r3, [r6, #0]
   3c5ee:	3b01      	subs	r3, #1
   3c5f0:	2b05      	cmp	r3, #5
   3c5f2:	d821      	bhi.n	3c638 <usbd_event_handler+0x5c>
   3c5f4:	e8df f003 	tbb	[pc, r3]
   3c5f8:	1414037a 	.word	0x1414037a
   3c5fc:	166a      	.short	0x166a
   3c5fe:	2303      	movs	r3, #3
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
   3c600:	f88d 3014 	strb.w	r3, [sp, #20]
		evt.evt_type = USBD_EVT_POWER;
   3c604:	2400      	movs	r4, #0
		ev = usbd_evt_alloc();
   3c606:	f7ff ff39 	bl	3c47c <usbd_evt_alloc>
		if (!ev) {
   3c60a:	4603      	mov	r3, r0
   3c60c:	b1a0      	cbz	r0, 3c638 <usbd_event_handler+0x5c>
		ev->evt_type = evt.evt_type;
   3c60e:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
   3c610:	f100 0208 	add.w	r2, r0, #8
   3c614:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
   3c618:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
   3c61c:	4618      	mov	r0, r3
   3c61e:	e01d      	b.n	3c65c <usbd_event_handler+0x80>
	switch (p_event->type) {
   3c620:	2304      	movs	r3, #4
   3c622:	e7ed      	b.n	3c600 <usbd_event_handler+0x24>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
   3c624:	78b7      	ldrb	r7, [r6, #2]
   3c626:	4638      	mov	r0, r7
   3c628:	f7ff feb0 	bl	3c38c <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
   3c62c:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
   3c62e:	4604      	mov	r4, r0
		switch (ep_ctx->cfg.type) {
   3c630:	b123      	cbz	r3, 3c63c <usbd_event_handler+0x60>
   3c632:	3b01      	subs	r3, #1
   3c634:	2b02      	cmp	r3, #2
   3c636:	d943      	bls.n	3c6c0 <usbd_event_handler+0xe4>
}
   3c638:	b009      	add	sp, #36	; 0x24
   3c63a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   3c63c:	063b      	lsls	r3, r7, #24
		switch (p_event->data.eptransfer.status) {
   3c63e:	78f5      	ldrb	r5, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   3c640:	d513      	bpl.n	3c66a <usbd_event_handler+0x8e>
		switch (p_event->data.eptransfer.status) {
   3c642:	2d00      	cmp	r5, #0
   3c644:	d1f8      	bne.n	3c638 <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
   3c646:	f7ff ff19 	bl	3c47c <usbd_evt_alloc>
			if (!ev) {
   3c64a:	4603      	mov	r3, r0
   3c64c:	2800      	cmp	r0, #0
   3c64e:	d0f3      	beq.n	3c638 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
   3c650:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
   3c652:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
   3c654:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   3c656:	2203      	movs	r2, #3
   3c658:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   3c65a:	609c      	str	r4, [r3, #8]
		usbd_evt_put(ev);
   3c65c:	f7ff fec6 	bl	3c3ec <usbd_evt_put>
}
   3c660:	b009      	add	sp, #36	; 0x24
   3c662:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		usbd_work_schedule();
   3c666:	f7ff bec7 	b.w	3c3f8 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
   3c66a:	b155      	cbz	r5, 3c682 <usbd_event_handler+0xa6>
   3c66c:	2d01      	cmp	r5, #1
   3c66e:	d1e3      	bne.n	3c638 <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
   3c670:	f7ff ff04 	bl	3c47c <usbd_evt_alloc>
			if (!ev) {
   3c674:	4603      	mov	r3, r0
   3c676:	2800      	cmp	r0, #0
   3c678:	d0de      	beq.n	3c638 <usbd_event_handler+0x5c>
			ep_ctx->read_pending = true;
   3c67a:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
   3c67c:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   3c67e:	7305      	strb	r5, [r0, #12]
   3c680:	e7eb      	b.n	3c65a <usbd_event_handler+0x7e>
			struct usbd_event *ev = usbd_evt_alloc();
   3c682:	f7ff fefb 	bl	3c47c <usbd_evt_alloc>
			if (!ev) {
   3c686:	4607      	mov	r7, r0
   3c688:	2800      	cmp	r0, #0
   3c68a:	d0d5      	beq.n	3c638 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
   3c68c:	2301      	movs	r3, #1
   3c68e:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   3c690:	2302      	movs	r3, #2
   3c692:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   3c694:	6084      	str	r4, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
   3c696:	f104 010c 	add.w	r1, r4, #12
   3c69a:	78b0      	ldrb	r0, [r6, #2]
   3c69c:	f00b f90b 	bl	478b6 <nrfx_usbd_ep_status_get>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
   3c6a0:	4a13      	ldr	r2, [pc, #76]	; (3c6f0 <usbd_event_handler+0x114>)
   3c6a2:	68e1      	ldr	r1, [r4, #12]
   3c6a4:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
   3c6a8:	428b      	cmp	r3, r1
   3c6aa:	d906      	bls.n	3c6ba <usbd_event_handler+0xde>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
   3c6ac:	1a5b      	subs	r3, r3, r1
   3c6ae:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
   3c6b2:	f003 fb1f 	bl	3fcf4 <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
   3c6b6:	4638      	mov	r0, r7
   3c6b8:	e7d0      	b.n	3c65c <usbd_event_handler+0x80>
				ctx->ctrl_read_len = 0U;
   3c6ba:	f8a2 528c 	strh.w	r5, [r2, #652]	; 0x28c
   3c6be:	e7fa      	b.n	3c6b6 <usbd_event_handler+0xda>
			usbd_event_transfer_data(p_event);
   3c6c0:	4630      	mov	r0, r6
}
   3c6c2:	b009      	add	sp, #36	; 0x24
   3c6c4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			usbd_event_transfer_data(p_event);
   3c6c8:	f7ff befa 	b.w	3c4c0 <usbd_event_transfer_data>
		nrfx_usbd_setup_get(&drv_setup);
   3c6cc:	a801      	add	r0, sp, #4
   3c6ce:	f003 faeb 	bl	3fca8 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
   3c6d2:	f89d 3005 	ldrb.w	r3, [sp, #5]
   3c6d6:	2b05      	cmp	r3, #5
   3c6d8:	d104      	bne.n	3c6e4 <usbd_event_handler+0x108>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
   3c6da:	f89d 3004 	ldrb.w	r3, [sp, #4]
   3c6de:	f013 0f60 	tst.w	r3, #96	; 0x60
   3c6e2:	d0a9      	beq.n	3c638 <usbd_event_handler+0x5c>
			evt.evt.ep_evt.ep = ep_ctx;
   3c6e4:	4b03      	ldr	r3, [pc, #12]	; (3c6f4 <usbd_event_handler+0x118>)
   3c6e6:	9305      	str	r3, [sp, #20]
			evt.evt_type = USBD_EVT_EP;
   3c6e8:	2401      	movs	r4, #1
   3c6ea:	e78c      	b.n	3c606 <usbd_event_handler+0x2a>
	switch (p_event->type) {
   3c6ec:	2402      	movs	r4, #2
   3c6ee:	e78a      	b.n	3c606 <usbd_event_handler+0x2a>
   3c6f0:	20002cc4 	.word	0x20002cc4
   3c6f4:	20002e30 	.word	0x20002e30

0003c6f8 <eps_ctx_init>:
{
   3c6f8:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   3c6fa:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   3c6fc:	f064 007f 	orn	r0, r4, #127	; 0x7f
   3c700:	b2c0      	uxtb	r0, r0
   3c702:	f7ff fe43 	bl	3c38c <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   3c706:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
   3c708:	f00a fda4 	bl	47254 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   3c70c:	2c08      	cmp	r4, #8
   3c70e:	d1f5      	bne.n	3c6fc <eps_ctx_init+0x4>
   3c710:	4d0e      	ldr	r5, [pc, #56]	; (3c74c <eps_ctx_init+0x54>)
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   3c712:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   3c714:	b2e0      	uxtb	r0, r4
   3c716:	f7ff fe39 	bl	3c38c <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
   3c71a:	6903      	ldr	r3, [r0, #16]
   3c71c:	b903      	cbnz	r3, 3c720 <eps_ctx_init+0x28>
			ep_ctx->buf.block.data = ep_out_bufs[i];
   3c71e:	6105      	str	r5, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   3c720:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
   3c722:	f00a fd97 	bl	47254 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   3c726:	2c08      	cmp	r4, #8
   3c728:	f105 0540 	add.w	r5, r5, #64	; 0x40
   3c72c:	d1f2      	bne.n	3c714 <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
   3c72e:	4808      	ldr	r0, [pc, #32]	; (3c750 <eps_ctx_init+0x58>)
   3c730:	f00a fd90 	bl	47254 <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
   3c734:	4b07      	ldr	r3, [pc, #28]	; (3c754 <eps_ctx_init+0x5c>)
   3c736:	f8d3 227c 	ldr.w	r2, [r3, #636]	; 0x27c
   3c73a:	b912      	cbnz	r2, 3c742 <eps_ctx_init+0x4a>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
   3c73c:	4a06      	ldr	r2, [pc, #24]	; (3c758 <eps_ctx_init+0x60>)
   3c73e:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
   3c742:	4806      	ldr	r0, [pc, #24]	; (3c75c <eps_ctx_init+0x64>)
   3c744:	f00a fd86 	bl	47254 <ep_ctx_reset>
}
   3c748:	2000      	movs	r0, #0
   3c74a:	bd38      	pop	{r3, r4, r5, pc}
   3c74c:	20003354 	.word	0x20003354
   3c750:	20002e10 	.word	0x20002e10
   3c754:	20002cc4 	.word	0x20002cc4
   3c758:	20002f54 	.word	0x20002f54
   3c75c:	20002f30 	.word	0x20002f30

0003c760 <usbd_work_handler>:
{
   3c760:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->ready;
   3c764:	4ca7      	ldr	r4, [pc, #668]	; (3ca04 <usbd_work_handler+0x2a4>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   3c766:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 3ca08 <usbd_work_handler+0x2a8>
{
   3c76a:	b085      	sub	sp, #20
   3c76c:	4607      	mov	r7, r0
	while ((ev = usbd_evt_get()) != NULL) {
   3c76e:	f7ff fe6f 	bl	3c450 <usbd_evt_get>
   3c772:	b910      	cbnz	r0, 3c77a <usbd_work_handler+0x1a>
}
   3c774:	b005      	add	sp, #20
   3c776:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return get_usbd_ctx()->ready;
   3c77a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
   3c77e:	7c02      	ldrb	r2, [r0, #16]
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   3c780:	f100 0904 	add.w	r9, r0, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
   3c784:	b93b      	cbnz	r3, 3c796 <usbd_work_handler+0x36>
   3c786:	2a00      	cmp	r2, #0
   3c788:	f000 8088 	beq.w	3c89c <usbd_work_handler+0x13c>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   3c78c:	489e      	ldr	r0, [pc, #632]	; (3ca08 <usbd_work_handler+0x2a8>)
   3c78e:	4649      	mov	r1, r9
   3c790:	f00b fb7f 	bl	47e92 <k_mem_slab_free>
}
   3c794:	e7eb      	b.n	3c76e <usbd_work_handler+0xe>
		switch (ev->evt_type) {
   3c796:	2a04      	cmp	r2, #4
   3c798:	d844      	bhi.n	3c824 <usbd_work_handler+0xc4>
   3c79a:	e8df f012 	tbh	[pc, r2, lsl #1]
   3c79e:	007f      	.short	0x007f
   3c7a0:	01020005 	.word	0x01020005
   3c7a4:	01410118 	.word	0x01410118
	switch (ep_evt->evt_type) {
   3c7a8:	7b03      	ldrb	r3, [r0, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
   3c7aa:	6885      	ldr	r5, [r0, #8]
	switch (ep_evt->evt_type) {
   3c7ac:	2b03      	cmp	r3, #3
   3c7ae:	d839      	bhi.n	3c824 <usbd_work_handler+0xc4>
   3c7b0:	e8df f003 	tbb	[pc, r3]
   3c7b4:	615c3f02 	.word	0x615c3f02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
   3c7b8:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
   3c7ba:	2208      	movs	r2, #8
   3c7bc:	2100      	movs	r1, #0
   3c7be:	4630      	mov	r0, r6
   3c7c0:	f007 fdb5 	bl	4432e <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   3c7c4:	4b91      	ldr	r3, [pc, #580]	; (3ca0c <usbd_work_handler+0x2ac>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   3c7c6:	4892      	ldr	r0, [pc, #584]	; (3ca10 <usbd_work_handler+0x2b0>)
   3c7c8:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
   3c7cc:	7032      	strb	r2, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
   3c7ce:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
   3c7d2:	7072      	strb	r2, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
   3c7d4:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   3c7d8:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   3c7dc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
   3c7e0:	8072      	strh	r2, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
   3c7e2:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   3c7e6:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   3c7ea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
   3c7ee:	80b2      	strh	r2, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
   3c7f0:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   3c7f4:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   3c7f8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
   3c7fc:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
   3c7fe:	80f3      	strh	r3, [r6, #6]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   3c800:	4631      	mov	r1, r6
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
   3c802:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   3c804:	f007 fd88 	bl	44318 <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
   3c808:	682b      	ldr	r3, [r5, #0]
   3c80a:	7a68      	ldrb	r0, [r5, #9]
   3c80c:	2100      	movs	r1, #0
   3c80e:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
   3c810:	f996 3000 	ldrsb.w	r3, [r6]
   3c814:	2b00      	cmp	r3, #0
   3c816:	db08      	blt.n	3c82a <usbd_work_handler+0xca>
   3c818:	88f3      	ldrh	r3, [r6, #6]
   3c81a:	b133      	cbz	r3, 3c82a <usbd_work_handler+0xca>
		ctx->ctrl_read_len = usbd_setup->wLength;
   3c81c:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
   3c820:	f003 fa68 	bl	3fcf4 <nrfx_usbd_setup_data_clear>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   3c824:	4649      	mov	r1, r9
   3c826:	4640      	mov	r0, r8
   3c828:	e7b2      	b.n	3c790 <usbd_work_handler+0x30>
		ctx->ctrl_read_len = 0U;
   3c82a:	2300      	movs	r3, #0
   3c82c:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
   3c830:	e7f8      	b.n	3c824 <usbd_work_handler+0xc4>
	if (!ep_ctx->read_pending) {
   3c832:	7f6b      	ldrb	r3, [r5, #29]
   3c834:	2b00      	cmp	r3, #0
   3c836:	d0f5      	beq.n	3c824 <usbd_work_handler+0xc4>
	if (!ep_ctx->read_complete) {
   3c838:	7f2b      	ldrb	r3, [r5, #28]
   3c83a:	2b00      	cmp	r3, #0
   3c83c:	d0f2      	beq.n	3c824 <usbd_work_handler+0xc4>
	ep_ctx->read_pending = false;
   3c83e:	2600      	movs	r6, #0
   3c840:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   3c842:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3c846:	4873      	ldr	r0, [pc, #460]	; (3ca14 <usbd_work_handler+0x2b4>)
	ep_ctx->read_complete = false;
   3c848:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   3c84a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3c84e:	f00a fd14 	bl	4727a <k_mutex_lock.constprop.0.isra.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
   3c852:	696b      	ldr	r3, [r5, #20]
   3c854:	9301      	str	r3, [sp, #4]
   3c856:	686b      	ldr	r3, [r5, #4]
   3c858:	e9cd 3602 	strd	r3, r6, [sp, #8]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
   3c85c:	a901      	add	r1, sp, #4
   3c85e:	7a68      	ldrb	r0, [r5, #9]
   3c860:	f003 f84e 	bl	3f900 <nrfx_usbd_ep_transfer>
	k_mutex_unlock(&ctx->drv_lock);
   3c864:	486b      	ldr	r0, [pc, #428]	; (3ca14 <usbd_work_handler+0x2b4>)
   3c866:	f00a fd0a 	bl	4727e <k_mutex_unlock.isra.0>
   3c86a:	e7db      	b.n	3c824 <usbd_work_handler+0xc4>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   3c86c:	682b      	ldr	r3, [r5, #0]
   3c86e:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   3c870:	7a68      	ldrb	r0, [r5, #9]
   3c872:	4798      	blx	r3
		break;
   3c874:	e7d6      	b.n	3c824 <usbd_work_handler+0xc4>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
   3c876:	7aab      	ldrb	r3, [r5, #10]
   3c878:	b96b      	cbnz	r3, 3c896 <usbd_work_handler+0x136>
   3c87a:	7feb      	ldrb	r3, [r5, #31]
   3c87c:	b95b      	cbnz	r3, 3c896 <usbd_work_handler+0x136>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   3c87e:	4865      	ldr	r0, [pc, #404]	; (3ca14 <usbd_work_handler+0x2b4>)
   3c880:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3c884:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3c888:	f00a fcf7 	bl	4727a <k_mutex_lock.constprop.0.isra.0>
			nrfx_usbd_setup_clear();
   3c88c:	f003 fa62 	bl	3fd54 <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
   3c890:	4860      	ldr	r0, [pc, #384]	; (3ca14 <usbd_work_handler+0x2b4>)
   3c892:	f00a fcf4 	bl	4727e <k_mutex_unlock.isra.0>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   3c896:	682b      	ldr	r3, [r5, #0]
   3c898:	2102      	movs	r1, #2
   3c89a:	e7e9      	b.n	3c870 <usbd_work_handler+0x110>
	switch (pwr_evt->state) {
   3c89c:	7a02      	ldrb	r2, [r0, #8]
   3c89e:	2a04      	cmp	r2, #4
   3c8a0:	d8c0      	bhi.n	3c824 <usbd_work_handler+0xc4>
   3c8a2:	e8df f002 	tbb	[pc, r2]
   3c8a6:	0359      	.short	0x0359
   3c8a8:	6723      	.short	0x6723
   3c8aa:	73          	.byte	0x73
   3c8ab:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
   3c8ac:	f002 ffdc 	bl	3f868 <nrfx_usbd_is_enabled>
   3c8b0:	4605      	mov	r5, r0
   3c8b2:	2800      	cmp	r0, #0
   3c8b4:	d1b6      	bne.n	3c824 <usbd_work_handler+0xc4>
			nrfx_usbd_enable();
   3c8b6:	f002 ff13 	bl	3f6e0 <nrfx_usbd_enable>
   3c8ba:	f3bf 8f5b 	dmb	ish
   3c8be:	4956      	ldr	r1, [pc, #344]	; (3ca18 <usbd_work_handler+0x2b8>)
   3c8c0:	2301      	movs	r3, #1
   3c8c2:	e851 2f00 	ldrex	r2, [r1]
   3c8c6:	2a00      	cmp	r2, #0
   3c8c8:	d103      	bne.n	3c8d2 <usbd_work_handler+0x172>
   3c8ca:	e841 3000 	strex	r0, r3, [r1]
   3c8ce:	2800      	cmp	r0, #0
   3c8d0:	d1f7      	bne.n	3c8c2 <usbd_work_handler+0x162>
   3c8d2:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
   3c8d6:	d1a5      	bne.n	3c824 <usbd_work_handler+0xc4>
   3c8d8:	f841 5c08 	str.w	r5, [r1, #-8]
   3c8dc:	f841 5c10 	str.w	r5, [r1, #-16]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
   3c8e0:	69e0      	ldr	r0, [r4, #28]
   3c8e2:	6163      	str	r3, [r4, #20]
   3c8e4:	3914      	subs	r1, #20
   3c8e6:	f005 fc07 	bl	420f8 <onoff_request>
   3c8ea:	e79b      	b.n	3c824 <usbd_work_handler+0xc4>
	switch (pwr_evt->state) {
   3c8ec:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   3c8ee:	f065 007f 	orn	r0, r5, #127	; 0x7f
   3c8f2:	b2c0      	uxtb	r0, r0
   3c8f4:	f7ff fd4a 	bl	3c38c <endpoint_ctx>
		if (ep_ctx->cfg.en) {
   3c8f8:	7a03      	ldrb	r3, [r0, #8]
   3c8fa:	b113      	cbz	r3, 3c902 <usbd_work_handler+0x1a2>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   3c8fc:	7a40      	ldrb	r0, [r0, #9]
   3c8fe:	f003 fc0d 	bl	4011c <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   3c902:	3501      	adds	r5, #1
   3c904:	2d08      	cmp	r5, #8
   3c906:	d1f2      	bne.n	3c8ee <usbd_work_handler+0x18e>
		if (ep_ctx->cfg.en) {
   3c908:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
   3c90c:	b11b      	cbz	r3, 3c916 <usbd_work_handler+0x1b6>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   3c90e:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
   3c912:	f003 fc03 	bl	4011c <nrfx_usbd_ep_enable>
	switch (pwr_evt->state) {
   3c916:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   3c918:	b2e8      	uxtb	r0, r5
   3c91a:	f7ff fd37 	bl	3c38c <endpoint_ctx>
		if (ep_ctx->cfg.en) {
   3c91e:	7a03      	ldrb	r3, [r0, #8]
   3c920:	b113      	cbz	r3, 3c928 <usbd_work_handler+0x1c8>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   3c922:	7a40      	ldrb	r0, [r0, #9]
   3c924:	f003 fbfa 	bl	4011c <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
   3c928:	3501      	adds	r5, #1
   3c92a:	2d08      	cmp	r5, #8
   3c92c:	d1f4      	bne.n	3c918 <usbd_work_handler+0x1b8>
		if (ep_ctx->cfg.en) {
   3c92e:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
   3c932:	b11b      	cbz	r3, 3c93c <usbd_work_handler+0x1dc>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   3c934:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
   3c938:	f003 fbf0 	bl	4011c <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
   3c93c:	2001      	movs	r0, #1
   3c93e:	f002 ff75 	bl	3f82c <nrfx_usbd_start>
		ctx->ready = true;
   3c942:	2301      	movs	r3, #1
   3c944:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
   3c948:	6823      	ldr	r3, [r4, #0]
   3c94a:	2b00      	cmp	r3, #0
   3c94c:	f43f af6a 	beq.w	3c824 <usbd_work_handler+0xc4>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
   3c950:	2100      	movs	r1, #0
   3c952:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_SOF, NULL);
   3c954:	4798      	blx	r3
   3c956:	e765      	b.n	3c824 <usbd_work_handler+0xc4>
		ctx->ready = false;
   3c958:	2500      	movs	r5, #0
   3c95a:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
   3c95e:	f003 fb6b 	bl	40038 <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
   3c962:	f7ff fe1b 	bl	3c59c <hfxo_stop.constprop.0.isra.0>
		if (ctx->status_cb) {
   3c966:	6823      	ldr	r3, [r4, #0]
   3c968:	2b00      	cmp	r3, #0
   3c96a:	f43f af5b 	beq.w	3c824 <usbd_work_handler+0xc4>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
   3c96e:	4629      	mov	r1, r5
   3c970:	2004      	movs	r0, #4
   3c972:	e7ef      	b.n	3c954 <usbd_work_handler+0x1f4>
		if (dev_ready()) {
   3c974:	2b00      	cmp	r3, #0
   3c976:	f43f af55 	beq.w	3c824 <usbd_work_handler+0xc4>
			nrfx_usbd_suspend();
   3c97a:	f003 fb75 	bl	40068 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
   3c97e:	6823      	ldr	r3, [r4, #0]
   3c980:	2b00      	cmp	r3, #0
   3c982:	f43f af4f 	beq.w	3c824 <usbd_work_handler+0xc4>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
   3c986:	2100      	movs	r1, #0
   3c988:	2005      	movs	r0, #5
   3c98a:	e7e3      	b.n	3c954 <usbd_work_handler+0x1f4>
		if (ctx->status_cb && dev_ready()) {
   3c98c:	6822      	ldr	r2, [r4, #0]
   3c98e:	2a00      	cmp	r2, #0
   3c990:	f43f af48 	beq.w	3c824 <usbd_work_handler+0xc4>
   3c994:	2b00      	cmp	r3, #0
   3c996:	f43f af45 	beq.w	3c824 <usbd_work_handler+0xc4>
			ctx->status_cb(USB_DC_RESUME, NULL);
   3c99a:	2100      	movs	r1, #0
   3c99c:	2006      	movs	r0, #6
   3c99e:	4790      	blx	r2
   3c9a0:	e740      	b.n	3c824 <usbd_work_handler+0xc4>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   3c9a2:	f107 0510 	add.w	r5, r7, #16
   3c9a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3c9aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3c9ae:	4628      	mov	r0, r5
   3c9b0:	f00a fc63 	bl	4727a <k_mutex_lock.constprop.0.isra.0>
			eps_ctx_init();
   3c9b4:	f7ff fea0 	bl	3c6f8 <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
   3c9b8:	4628      	mov	r0, r5
   3c9ba:	f00a fc60 	bl	4727e <k_mutex_unlock.isra.0>
			if (ctx->status_cb) {
   3c9be:	f857 3c28 	ldr.w	r3, [r7, #-40]
   3c9c2:	2b00      	cmp	r3, #0
   3c9c4:	f43f af2e 	beq.w	3c824 <usbd_work_handler+0xc4>
				ctx->status_cb(USB_DC_RESET, NULL);
   3c9c8:	2100      	movs	r1, #0
   3c9ca:	2001      	movs	r0, #1
   3c9cc:	e7c2      	b.n	3c954 <usbd_work_handler+0x1f4>
	if (ep_ctx->cfg.en) {
   3c9ce:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
   3c9d2:	b17b      	cbz	r3, 3c9f4 <usbd_work_handler+0x294>
		ep_ctx->read_pending = true;
   3c9d4:	2501      	movs	r5, #1
   3c9d6:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
   3c9da:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
   3c9de:	f7ff fd4d 	bl	3c47c <usbd_evt_alloc>
		if (!ev) {
   3c9e2:	b138      	cbz	r0, 3c9f4 <usbd_work_handler+0x294>
		ev->evt.ep_evt.ep = ep_ctx;
   3c9e4:	4a0d      	ldr	r2, [pc, #52]	; (3ca1c <usbd_work_handler+0x2bc>)
		ev->evt_type = USBD_EVT_EP;
   3c9e6:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   3c9e8:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
   3c9ea:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
   3c9ec:	f7ff fcfe 	bl	3c3ec <usbd_evt_put>
		usbd_work_schedule();
   3c9f0:	f7ff fd02 	bl	3c3f8 <usbd_work_schedule>
			if (ctx->status_cb) {
   3c9f4:	f857 3c28 	ldr.w	r3, [r7, #-40]
   3c9f8:	2b00      	cmp	r3, #0
   3c9fa:	f43f af13 	beq.w	3c824 <usbd_work_handler+0xc4>
				ctx->status_cb(USB_DC_SOF, NULL);
   3c9fe:	2100      	movs	r1, #0
   3ca00:	200a      	movs	r0, #10
   3ca02:	e7a7      	b.n	3c954 <usbd_work_handler+0x1f4>
   3ca04:	20002cc4 	.word	0x20002cc4
   3ca08:	20000c68 	.word	0x20000c68
   3ca0c:	40027000 	.word	0x40027000
   3ca10:	20002cc8 	.word	0x20002cc8
   3ca14:	20002cfc 	.word	0x20002cfc
   3ca18:	20002ce4 	.word	0x20002ce4
   3ca1c:	20002f30 	.word	0x20002f30
	nrfx_power_usbevt_disable();
   3ca20:	f00a fec0 	bl	477a4 <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
   3ca24:	f003 fb08 	bl	40038 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
   3ca28:	f002 fe50 	bl	3f6cc <nrfx_usbd_uninit>
	usbd_evt_flush();
   3ca2c:	f7ff fd18 	bl	3c460 <usbd_evt_flush>
	ret = eps_ctx_init();
   3ca30:	f7ff fe62 	bl	3c6f8 <eps_ctx_init>
	nrfx_power_usbevt_enable();
   3ca34:	f00a feaf 	bl	47796 <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
   3ca38:	4801      	ldr	r0, [pc, #4]	; (3ca40 <usbd_work_handler+0x2e0>)
   3ca3a:	f002 ff1f 	bl	3f87c <nrfx_usbd_init>
}
   3ca3e:	e6f1      	b.n	3c824 <usbd_work_handler+0xc4>
   3ca40:	0003c5dd 	.word	0x0003c5dd

0003ca44 <usb_dc_attach>:
{
   3ca44:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
   3ca46:	4d1a      	ldr	r5, [pc, #104]	; (3cab0 <usb_dc_attach+0x6c>)
   3ca48:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
   3ca4c:	bb5c      	cbnz	r4, 3caa6 <usb_dc_attach+0x62>
	return z_impl_k_mutex_init(mutex);
   3ca4e:	f105 0038 	add.w	r0, r5, #56	; 0x38
   3ca52:	f00b fa61 	bl	47f18 <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
   3ca56:	4620      	mov	r0, r4
   3ca58:	f000 fd2c 	bl	3d4b4 <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   3ca5c:	4622      	mov	r2, r4
	ctx->hfxo_mgr =
   3ca5e:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   3ca60:	2101      	movs	r1, #1
   3ca62:	2027      	movs	r0, #39	; 0x27
   3ca64:	f7ed fc78 	bl	2a358 <z_arm_irq_priority_set>
	err = nrfx_usbd_init(usbd_event_handler);
   3ca68:	4812      	ldr	r0, [pc, #72]	; (3cab4 <usb_dc_attach+0x70>)
   3ca6a:	f002 ff07 	bl	3f87c <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
   3ca6e:	4b12      	ldr	r3, [pc, #72]	; (3cab8 <usb_dc_attach+0x74>)
   3ca70:	4298      	cmp	r0, r3
   3ca72:	d11a      	bne.n	3caaa <usb_dc_attach+0x66>
	nrfx_power_usbevt_enable();
   3ca74:	f00a fe8f 	bl	47796 <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
   3ca78:	f7ff fe3e 	bl	3c6f8 <eps_ctx_init>
	if (ret == 0) {
   3ca7c:	4604      	mov	r4, r0
   3ca7e:	b910      	cbnz	r0, 3ca86 <usb_dc_attach+0x42>
		ctx->attached = true;
   3ca80:	2301      	movs	r3, #1
   3ca82:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   3ca86:	4b0d      	ldr	r3, [pc, #52]	; (3cabc <usb_dc_attach+0x78>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
   3ca88:	681b      	ldr	r3, [r3, #0]
   3ca8a:	b10b      	cbz	r3, 3ca90 <usb_dc_attach+0x4c>
		usbd_work_schedule();
   3ca8c:	f7ff fcb4 	bl	3c3f8 <usbd_work_schedule>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
   3ca90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3ca94:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
   3ca98:	07db      	lsls	r3, r3, #31
   3ca9a:	d502      	bpl.n	3caa2 <usb_dc_attach+0x5e>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
   3ca9c:	2000      	movs	r0, #0
   3ca9e:	f7ff fd63 	bl	3c568 <usb_dc_power_event_handler>
}
   3caa2:	4620      	mov	r0, r4
   3caa4:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   3caa6:	2400      	movs	r4, #0
   3caa8:	e7fb      	b.n	3caa2 <usb_dc_attach+0x5e>
		return -EIO;
   3caaa:	f06f 0404 	mvn.w	r4, #4
   3caae:	e7f8      	b.n	3caa2 <usb_dc_attach+0x5e>
   3cab0:	20002cc4 	.word	0x20002cc4
   3cab4:	0003c5dd 	.word	0x0003c5dd
   3cab8:	0bad0000 	.word	0x0bad0000
   3cabc:	20000d84 	.word	0x20000d84

0003cac0 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
   3cac0:	4b07      	ldr	r3, [pc, #28]	; (3cae0 <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
   3cac2:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   3cac6:	b13a      	cbz	r2, 3cad8 <usb_dc_set_address+0x18>
   3cac8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		return -ENODEV;
   3cacc:	2b00      	cmp	r3, #0
   3cace:	bf14      	ite	ne
   3cad0:	2000      	movne	r0, #0
   3cad2:	f06f 0012 	mvneq.w	r0, #18
   3cad6:	4770      	bx	lr
   3cad8:	f06f 0012 	mvn.w	r0, #18
}
   3cadc:	4770      	bx	lr
   3cade:	bf00      	nop
   3cae0:	20002cc4 	.word	0x20002cc4

0003cae4 <usb_dc_ep_configure>:
{
   3cae4:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   3cae6:	4b10      	ldr	r3, [pc, #64]	; (3cb28 <usb_dc_ep_configure+0x44>)
	if (!dev_attached()) {
   3cae8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
   3caec:	4604      	mov	r4, r0
	if (!dev_attached()) {
   3caee:	b1c3      	cbz	r3, 3cb22 <usb_dc_ep_configure+0x3e>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
   3caf0:	7805      	ldrb	r5, [r0, #0]
   3caf2:	4628      	mov	r0, r5
   3caf4:	f7ff fc4a 	bl	3c38c <endpoint_ctx>
	if (!ep_ctx) {
   3caf8:	b910      	cbnz	r0, 3cb00 <usb_dc_ep_configure+0x1c>
		return -EINVAL;
   3cafa:	f06f 0015 	mvn.w	r0, #21
}
   3cafe:	bd38      	pop	{r3, r4, r5, pc}
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
   3cb00:	7245      	strb	r5, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
   3cb02:	7923      	ldrb	r3, [r4, #4]
   3cb04:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
   3cb06:	8863      	ldrh	r3, [r4, #2]
   3cb08:	6043      	str	r3, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
   3cb0a:	7820      	ldrb	r0, [r4, #0]
   3cb0c:	8861      	ldrh	r1, [r4, #2]
   3cb0e:	f010 0f08 	tst.w	r0, #8
   3cb12:	d102      	bne.n	3cb1a <usb_dc_ep_configure+0x36>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
   3cb14:	1e4b      	subs	r3, r1, #1
   3cb16:	420b      	tst	r3, r1
   3cb18:	d1ef      	bne.n	3cafa <usb_dc_ep_configure+0x16>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
   3cb1a:	f00a fec7 	bl	478ac <nrfx_usbd_ep_max_packet_size_set>
	return 0;
   3cb1e:	2000      	movs	r0, #0
   3cb20:	e7ed      	b.n	3cafe <usb_dc_ep_configure+0x1a>
		return -ENODEV;
   3cb22:	f06f 0012 	mvn.w	r0, #18
   3cb26:	e7ea      	b.n	3cafe <usb_dc_ep_configure+0x1a>
   3cb28:	20002cc4 	.word	0x20002cc4

0003cb2c <usb_dc_ep_set_stall>:
{
   3cb2c:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   3cb2e:	4b12      	ldr	r3, [pc, #72]	; (3cb78 <usb_dc_ep_set_stall+0x4c>)
	if (!dev_attached() || !dev_ready()) {
   3cb30:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   3cb34:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
   3cb36:	b1ca      	cbz	r2, 3cb6c <usb_dc_ep_set_stall+0x40>
   3cb38:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   3cb3c:	b1b3      	cbz	r3, 3cb6c <usb_dc_ep_set_stall+0x40>
	ep_ctx = endpoint_ctx(ep);
   3cb3e:	f7ff fc25 	bl	3c38c <endpoint_ctx>
	if (!ep_ctx) {
   3cb42:	4604      	mov	r4, r0
   3cb44:	b1a8      	cbz	r0, 3cb72 <usb_dc_ep_set_stall+0x46>
	switch (ep_ctx->cfg.type) {
   3cb46:	7a83      	ldrb	r3, [r0, #10]
   3cb48:	2b01      	cmp	r3, #1
   3cb4a:	d012      	beq.n	3cb72 <usb_dc_ep_set_stall+0x46>
   3cb4c:	d907      	bls.n	3cb5e <usb_dc_ep_set_stall+0x32>
   3cb4e:	3b02      	subs	r3, #2
   3cb50:	2b01      	cmp	r3, #1
   3cb52:	d907      	bls.n	3cb64 <usb_dc_ep_set_stall+0x38>
	ep_ctx->buf.curr = ep_ctx->buf.data;
   3cb54:	6963      	ldr	r3, [r4, #20]
   3cb56:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len = 0U;
   3cb58:	2000      	movs	r0, #0
   3cb5a:	60e0      	str	r0, [r4, #12]
}
   3cb5c:	bd38      	pop	{r3, r4, r5, pc}
		nrfx_usbd_setup_stall();
   3cb5e:	f003 f901 	bl	3fd64 <nrfx_usbd_setup_stall>
		break;
   3cb62:	e7f7      	b.n	3cb54 <usb_dc_ep_set_stall+0x28>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
   3cb64:	4628      	mov	r0, r5
   3cb66:	f003 f871 	bl	3fc4c <nrfx_usbd_ep_stall>
		break;
   3cb6a:	e7f3      	b.n	3cb54 <usb_dc_ep_set_stall+0x28>
		return -ENODEV;
   3cb6c:	f06f 0012 	mvn.w	r0, #18
   3cb70:	e7f4      	b.n	3cb5c <usb_dc_ep_set_stall+0x30>
	switch (ep_ctx->cfg.type) {
   3cb72:	f06f 0015 	mvn.w	r0, #21
   3cb76:	e7f1      	b.n	3cb5c <usb_dc_ep_set_stall+0x30>
   3cb78:	20002cc4 	.word	0x20002cc4

0003cb7c <usb_dc_ep_clear_stall>:
{
   3cb7c:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   3cb7e:	4b0e      	ldr	r3, [pc, #56]	; (3cbb8 <usb_dc_ep_clear_stall+0x3c>)
	if (!dev_attached() || !dev_ready()) {
   3cb80:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   3cb84:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
   3cb86:	b182      	cbz	r2, 3cbaa <usb_dc_ep_clear_stall+0x2e>
   3cb88:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   3cb8c:	b16b      	cbz	r3, 3cbaa <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
   3cb8e:	f7ff fbfd 	bl	3c38c <endpoint_ctx>
	if (!ep_ctx) {
   3cb92:	b168      	cbz	r0, 3cbb0 <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
   3cb94:	f015 0408 	ands.w	r4, r5, #8
   3cb98:	d10a      	bne.n	3cbb0 <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   3cb9a:	4628      	mov	r0, r5
   3cb9c:	f003 f878 	bl	3fc90 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   3cba0:	4628      	mov	r0, r5
   3cba2:	f003 fb0f 	bl	401c4 <nrfx_usbd_ep_stall_clear>
	return 0;
   3cba6:	4620      	mov	r0, r4
}
   3cba8:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   3cbaa:	f06f 0012 	mvn.w	r0, #18
   3cbae:	e7fb      	b.n	3cba8 <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
   3cbb0:	f06f 0015 	mvn.w	r0, #21
   3cbb4:	e7f8      	b.n	3cba8 <usb_dc_ep_clear_stall+0x2c>
   3cbb6:	bf00      	nop
   3cbb8:	20002cc4 	.word	0x20002cc4

0003cbbc <usb_dc_ep_is_stalled>:
{
   3cbbc:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   3cbbe:	4b0c      	ldr	r3, [pc, #48]	; (3cbf0 <usb_dc_ep_is_stalled+0x34>)
	if (!dev_attached() || !dev_ready()) {
   3cbc0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   3cbc4:	4605      	mov	r5, r0
   3cbc6:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
   3cbc8:	b162      	cbz	r2, 3cbe4 <usb_dc_ep_is_stalled+0x28>
   3cbca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   3cbce:	b14b      	cbz	r3, 3cbe4 <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
   3cbd0:	f7ff fbdc 	bl	3c38c <endpoint_ctx>
	if (!ep_ctx) {
   3cbd4:	b148      	cbz	r0, 3cbea <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
   3cbd6:	b144      	cbz	r4, 3cbea <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
   3cbd8:	4628      	mov	r0, r5
   3cbda:	f003 f83f 	bl	3fc5c <nrfx_usbd_ep_stall_check>
   3cbde:	7020      	strb	r0, [r4, #0]
	return 0;
   3cbe0:	2000      	movs	r0, #0
}
   3cbe2:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   3cbe4:	f06f 0012 	mvn.w	r0, #18
   3cbe8:	e7fb      	b.n	3cbe2 <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
   3cbea:	f06f 0015 	mvn.w	r0, #21
   3cbee:	e7f8      	b.n	3cbe2 <usb_dc_ep_is_stalled+0x26>
   3cbf0:	20002cc4 	.word	0x20002cc4

0003cbf4 <usb_dc_ep_enable>:
{
   3cbf4:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
   3cbf6:	4e13      	ldr	r6, [pc, #76]	; (3cc44 <usb_dc_ep_enable+0x50>)
	if (!dev_attached()) {
   3cbf8:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
{
   3cbfc:	4604      	mov	r4, r0
	if (!dev_attached()) {
   3cbfe:	b1c3      	cbz	r3, 3cc32 <usb_dc_ep_enable+0x3e>
	ep_ctx = endpoint_ctx(ep);
   3cc00:	f7ff fbc4 	bl	3c38c <endpoint_ctx>
	if (!ep_ctx) {
   3cc04:	4605      	mov	r5, r0
   3cc06:	b1b8      	cbz	r0, 3cc38 <usb_dc_ep_enable+0x44>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
   3cc08:	0723      	lsls	r3, r4, #28
   3cc0a:	d405      	bmi.n	3cc18 <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   3cc0c:	4620      	mov	r0, r4
   3cc0e:	f003 f83f 	bl	3fc90 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   3cc12:	4620      	mov	r0, r4
   3cc14:	f003 fad6 	bl	401c4 <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
   3cc18:	7a2b      	ldrb	r3, [r5, #8]
   3cc1a:	b983      	cbnz	r3, 3cc3e <usb_dc_ep_enable+0x4a>
	ep_ctx->cfg.en = true;
   3cc1c:	2301      	movs	r3, #1
   3cc1e:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
   3cc20:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
   3cc24:	b90b      	cbnz	r3, 3cc2a <usb_dc_ep_enable+0x36>
	return 0;
   3cc26:	2000      	movs	r0, #0
}
   3cc28:	bd70      	pop	{r4, r5, r6, pc}
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
   3cc2a:	4620      	mov	r0, r4
   3cc2c:	f003 fa76 	bl	4011c <nrfx_usbd_ep_enable>
   3cc30:	e7f9      	b.n	3cc26 <usb_dc_ep_enable+0x32>
		return -ENODEV;
   3cc32:	f06f 0012 	mvn.w	r0, #18
   3cc36:	e7f7      	b.n	3cc28 <usb_dc_ep_enable+0x34>
		return -EINVAL;
   3cc38:	f06f 0015 	mvn.w	r0, #21
   3cc3c:	e7f4      	b.n	3cc28 <usb_dc_ep_enable+0x34>
		return -EALREADY;
   3cc3e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   3cc42:	e7f1      	b.n	3cc28 <usb_dc_ep_enable+0x34>
   3cc44:	20002cc4 	.word	0x20002cc4

0003cc48 <usb_dc_ep_disable>:
{
   3cc48:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   3cc4a:	4b11      	ldr	r3, [pc, #68]	; (3cc90 <usb_dc_ep_disable+0x48>)
	if (!dev_attached() || !dev_ready()) {
   3cc4c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   3cc50:	4604      	mov	r4, r0
	if (!dev_attached() || !dev_ready()) {
   3cc52:	b19a      	cbz	r2, 3cc7c <usb_dc_ep_disable+0x34>
   3cc54:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   3cc58:	b183      	cbz	r3, 3cc7c <usb_dc_ep_disable+0x34>
	ep_ctx = endpoint_ctx(ep);
   3cc5a:	f7ff fb97 	bl	3c38c <endpoint_ctx>
	if (!ep_ctx) {
   3cc5e:	4605      	mov	r5, r0
   3cc60:	b178      	cbz	r0, 3cc82 <usb_dc_ep_disable+0x3a>
	if (!ep_ctx->cfg.en) {
   3cc62:	7a03      	ldrb	r3, [r0, #8]
   3cc64:	b183      	cbz	r3, 3cc88 <usb_dc_ep_disable+0x40>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
   3cc66:	4620      	mov	r0, r4
	ep_ctx->write_in_progress = false;
   3cc68:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
   3cc6a:	f003 fa2b 	bl	400c4 <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
   3cc6e:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
   3cc70:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
   3cc72:	f00a faef 	bl	47254 <ep_ctx_reset>
	ep_ctx->cfg.en = false;
   3cc76:	722c      	strb	r4, [r5, #8]
	return 0;
   3cc78:	4620      	mov	r0, r4
}
   3cc7a:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   3cc7c:	f06f 0012 	mvn.w	r0, #18
   3cc80:	e7fb      	b.n	3cc7a <usb_dc_ep_disable+0x32>
		return -EINVAL;
   3cc82:	f06f 0015 	mvn.w	r0, #21
   3cc86:	e7f8      	b.n	3cc7a <usb_dc_ep_disable+0x32>
		return -EALREADY;
   3cc88:	f06f 0077 	mvn.w	r0, #119	; 0x77
   3cc8c:	e7f5      	b.n	3cc7a <usb_dc_ep_disable+0x32>
   3cc8e:	bf00      	nop
   3cc90:	20002cc4 	.word	0x20002cc4

0003cc94 <usb_dc_ep_write>:
{
   3cc94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->attached;
   3cc98:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 3cd80 <usb_dc_ep_write+0xec>
{
   3cc9c:	461e      	mov	r6, r3
	if (!dev_attached() || !dev_ready()) {
   3cc9e:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
{
   3cca2:	b085      	sub	sp, #20
   3cca4:	4607      	mov	r7, r0
   3cca6:	4689      	mov	r9, r1
   3cca8:	4615      	mov	r5, r2
	if (!dev_attached() || !dev_ready()) {
   3ccaa:	2b00      	cmp	r3, #0
   3ccac:	d061      	beq.n	3cd72 <usb_dc_ep_write+0xde>
   3ccae:	f898 3025 	ldrb.w	r3, [r8, #37]	; 0x25
   3ccb2:	2b00      	cmp	r3, #0
   3ccb4:	d05d      	beq.n	3cd72 <usb_dc_ep_write+0xde>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
   3ccb6:	0603      	lsls	r3, r0, #24
   3ccb8:	d55e      	bpl.n	3cd78 <usb_dc_ep_write+0xe4>
	ep_ctx = endpoint_ctx(ep);
   3ccba:	f7ff fb67 	bl	3c38c <endpoint_ctx>
	if (!ep_ctx) {
   3ccbe:	4604      	mov	r4, r0
   3ccc0:	2800      	cmp	r0, #0
   3ccc2:	d059      	beq.n	3cd78 <usb_dc_ep_write+0xe4>
	if (!ep_ctx->cfg.en) {
   3ccc4:	7a03      	ldrb	r3, [r0, #8]
   3ccc6:	2b00      	cmp	r3, #0
   3ccc8:	d056      	beq.n	3cd78 <usb_dc_ep_write+0xe4>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   3ccca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3ccce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3ccd2:	f108 0038 	add.w	r0, r8, #56	; 0x38
   3ccd6:	f00a fad0 	bl	4727a <k_mutex_lock.constprop.0.isra.0>
	if (ep_ctx->write_in_progress) {
   3ccda:	7fa3      	ldrb	r3, [r4, #30]
   3ccdc:	b14b      	cbz	r3, 3ccf2 <usb_dc_ep_write+0x5e>
		k_mutex_unlock(&ctx->drv_lock);
   3ccde:	f108 0038 	add.w	r0, r8, #56	; 0x38
   3cce2:	f00a facc 	bl	4727e <k_mutex_unlock.isra.0>
		return -EAGAIN;
   3cce6:	f06f 040a 	mvn.w	r4, #10
}
   3ccea:	4620      	mov	r0, r4
   3ccec:	b005      	add	sp, #20
   3ccee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
   3ccf2:	7aa3      	ldrb	r3, [r4, #10]
	if (!data_len && ep_ctx->trans_zlp) {
   3ccf4:	b1c5      	cbz	r5, 3cd28 <usb_dc_ep_write+0x94>
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
   3ccf6:	b33b      	cbz	r3, 3cd48 <usb_dc_ep_write+0xb4>
	ep_ctx->write_in_progress = true;
   3ccf8:	2301      	movs	r3, #1
   3ccfa:	77a3      	strb	r3, [r4, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
   3ccfc:	f04f 0800 	mov.w	r8, #0
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   3cd00:	a901      	add	r1, sp, #4
   3cd02:	4638      	mov	r0, r7
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
   3cd04:	e9cd 9501 	strd	r9, r5, [sp, #4]
   3cd08:	f8cd 800c 	str.w	r8, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   3cd0c:	f002 fdf8 	bl	3f900 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
   3cd10:	4b1c      	ldr	r3, [pc, #112]	; (3cd84 <usb_dc_ep_write+0xf0>)
   3cd12:	4298      	cmp	r0, r3
   3cd14:	d029      	beq.n	3cd6a <usb_dc_ep_write+0xd6>
		ep_ctx->write_in_progress = false;
   3cd16:	f884 801e 	strb.w	r8, [r4, #30]
		if (ret_bytes) {
   3cd1a:	bb1e      	cbnz	r6, 3cd64 <usb_dc_ep_write+0xd0>
		result = -EIO;
   3cd1c:	f06f 0404 	mvn.w	r4, #4
	k_mutex_unlock(&ctx->drv_lock);
   3cd20:	4819      	ldr	r0, [pc, #100]	; (3cd88 <usb_dc_ep_write+0xf4>)
   3cd22:	f00a faac 	bl	4727e <k_mutex_unlock.isra.0>
	return result;
   3cd26:	e7e0      	b.n	3ccea <usb_dc_ep_write+0x56>
	if (!data_len && ep_ctx->trans_zlp) {
   3cd28:	7fe2      	ldrb	r2, [r4, #31]
   3cd2a:	b102      	cbz	r2, 3cd2e <usb_dc_ep_write+0x9a>
		ep_ctx->trans_zlp = false;
   3cd2c:	77e5      	strb	r5, [r4, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
   3cd2e:	2b00      	cmp	r3, #0
   3cd30:	d1e2      	bne.n	3ccf8 <usb_dc_ep_write+0x64>
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
   3cd32:	f003 f81f 	bl	3fd74 <nrfx_usbd_last_setup_dir_get>
   3cd36:	42b8      	cmp	r0, r7
   3cd38:	d0de      	beq.n	3ccf8 <usb_dc_ep_write+0x64>
		nrfx_usbd_setup_clear();
   3cd3a:	f003 f80b 	bl	3fd54 <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
   3cd3e:	4812      	ldr	r0, [pc, #72]	; (3cd88 <usb_dc_ep_write+0xf4>)
   3cd40:	f00a fa9d 	bl	4727e <k_mutex_unlock.isra.0>
		return 0;
   3cd44:	2400      	movs	r4, #0
   3cd46:	e7d0      	b.n	3ccea <usb_dc_ep_write+0x56>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   3cd48:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   3cd4c:	42ab      	cmp	r3, r5
   3cd4e:	d9f0      	bls.n	3cd32 <usb_dc_ep_write+0x9e>
		    !(data_len % ep_ctx->cfg.max_sz)) {
   3cd50:	6862      	ldr	r2, [r4, #4]
   3cd52:	fbb5 f3f2 	udiv	r3, r5, r2
   3cd56:	fb02 5313 	mls	r3, r2, r3, r5
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   3cd5a:	2b00      	cmp	r3, #0
   3cd5c:	d1e9      	bne.n	3cd32 <usb_dc_ep_write+0x9e>
			ep_ctx->trans_zlp = true;
   3cd5e:	2301      	movs	r3, #1
   3cd60:	77e3      	strb	r3, [r4, #31]
	if ((ep_ctx->cfg.type == USB_DC_EP_CONTROL)
   3cd62:	e7e6      	b.n	3cd32 <usb_dc_ep_write+0x9e>
			*ret_bytes = 0;
   3cd64:	f8c6 8000 	str.w	r8, [r6]
   3cd68:	e7d8      	b.n	3cd1c <usb_dc_ep_write+0x88>
		if (ret_bytes) {
   3cd6a:	b106      	cbz	r6, 3cd6e <usb_dc_ep_write+0xda>
			*ret_bytes = data_len;
   3cd6c:	6035      	str	r5, [r6, #0]
	int result = 0;
   3cd6e:	2400      	movs	r4, #0
   3cd70:	e7d6      	b.n	3cd20 <usb_dc_ep_write+0x8c>
		return -ENODEV;
   3cd72:	f06f 0412 	mvn.w	r4, #18
   3cd76:	e7b8      	b.n	3ccea <usb_dc_ep_write+0x56>
		return -EINVAL;
   3cd78:	f06f 0415 	mvn.w	r4, #21
   3cd7c:	e7b5      	b.n	3ccea <usb_dc_ep_write+0x56>
   3cd7e:	bf00      	nop
   3cd80:	20002cc4 	.word	0x20002cc4
   3cd84:	0bad0000 	.word	0x0bad0000
   3cd88:	20002cfc 	.word	0x20002cfc

0003cd8c <usb_dc_ep_read_wait>:
{
   3cd8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3cd90:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
   3cd92:	4b20      	ldr	r3, [pc, #128]	; (3ce14 <usb_dc_ep_read_wait+0x88>)
{
   3cd94:	4617      	mov	r7, r2
	if (!dev_attached() || !dev_ready()) {
   3cd96:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   3cd9a:	460e      	mov	r6, r1
	if (!dev_attached() || !dev_ready()) {
   3cd9c:	2a00      	cmp	r2, #0
   3cd9e:	d033      	beq.n	3ce08 <usb_dc_ep_read_wait+0x7c>
   3cda0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   3cda4:	b383      	cbz	r3, 3ce08 <usb_dc_ep_read_wait+0x7c>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   3cda6:	0603      	lsls	r3, r0, #24
   3cda8:	d431      	bmi.n	3ce0e <usb_dc_ep_read_wait+0x82>
	if (!data && max_data_len) {
   3cdaa:	b901      	cbnz	r1, 3cdae <usb_dc_ep_read_wait+0x22>
   3cdac:	bb7f      	cbnz	r7, 3ce0e <usb_dc_ep_read_wait+0x82>
	ep_ctx = endpoint_ctx(ep);
   3cdae:	f7ff faed 	bl	3c38c <endpoint_ctx>
	if (!ep_ctx) {
   3cdb2:	4604      	mov	r4, r0
   3cdb4:	b358      	cbz	r0, 3ce0e <usb_dc_ep_read_wait+0x82>
	if (!ep_ctx->cfg.en) {
   3cdb6:	7a03      	ldrb	r3, [r0, #8]
   3cdb8:	b34b      	cbz	r3, 3ce0e <usb_dc_ep_read_wait+0x82>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   3cdba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3cdbe:	4816      	ldr	r0, [pc, #88]	; (3ce18 <usb_dc_ep_read_wait+0x8c>)
   3cdc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3cdc4:	f00a fa59 	bl	4727a <k_mutex_lock.constprop.0.isra.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
   3cdc8:	68e3      	ldr	r3, [r4, #12]
   3cdca:	429f      	cmp	r7, r3
   3cdcc:	46b8      	mov	r8, r7
   3cdce:	bf28      	it	cs
   3cdd0:	4698      	movcs	r8, r3
	if (!data && !max_data_len) {
   3cdd2:	b946      	cbnz	r6, 3cde6 <usb_dc_ep_read_wait+0x5a>
   3cdd4:	b93f      	cbnz	r7, 3cde6 <usb_dc_ep_read_wait+0x5a>
		if (read_bytes) {
   3cdd6:	b105      	cbz	r5, 3cdda <usb_dc_ep_read_wait+0x4e>
			*read_bytes = ep_ctx->buf.len;
   3cdd8:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
   3cdda:	480f      	ldr	r0, [pc, #60]	; (3ce18 <usb_dc_ep_read_wait+0x8c>)
   3cddc:	f00a fa4f 	bl	4727e <k_mutex_unlock.isra.0>
		return 0;
   3cde0:	2000      	movs	r0, #0
}
   3cde2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
   3cde6:	69a1      	ldr	r1, [r4, #24]
   3cde8:	4642      	mov	r2, r8
   3cdea:	4630      	mov	r0, r6
   3cdec:	f007 fa94 	bl	44318 <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
   3cdf0:	69a3      	ldr	r3, [r4, #24]
   3cdf2:	4443      	add	r3, r8
   3cdf4:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
   3cdf6:	68e3      	ldr	r3, [r4, #12]
   3cdf8:	eba3 0308 	sub.w	r3, r3, r8
   3cdfc:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
   3cdfe:	2d00      	cmp	r5, #0
   3ce00:	d0eb      	beq.n	3cdda <usb_dc_ep_read_wait+0x4e>
		*read_bytes = bytes_to_copy;
   3ce02:	f8c5 8000 	str.w	r8, [r5]
   3ce06:	e7e8      	b.n	3cdda <usb_dc_ep_read_wait+0x4e>
		return -ENODEV;
   3ce08:	f06f 0012 	mvn.w	r0, #18
   3ce0c:	e7e9      	b.n	3cde2 <usb_dc_ep_read_wait+0x56>
		return -EINVAL;
   3ce0e:	f06f 0015 	mvn.w	r0, #21
   3ce12:	e7e6      	b.n	3cde2 <usb_dc_ep_read_wait+0x56>
   3ce14:	20002cc4 	.word	0x20002cc4
   3ce18:	20002cfc 	.word	0x20002cfc

0003ce1c <usb_dc_ep_read_continue>:
{
   3ce1c:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
   3ce1e:	4d1e      	ldr	r5, [pc, #120]	; (3ce98 <usb_dc_ep_read_continue+0x7c>)
	if (!dev_attached() || !dev_ready()) {
   3ce20:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
{
   3ce24:	4603      	mov	r3, r0
	if (!dev_attached() || !dev_ready()) {
   3ce26:	b382      	cbz	r2, 3ce8a <usb_dc_ep_read_continue+0x6e>
   3ce28:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
   3ce2c:	b36a      	cbz	r2, 3ce8a <usb_dc_ep_read_continue+0x6e>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   3ce2e:	061b      	lsls	r3, r3, #24
   3ce30:	d42e      	bmi.n	3ce90 <usb_dc_ep_read_continue+0x74>
	ep_ctx = endpoint_ctx(ep);
   3ce32:	f7ff faab 	bl	3c38c <endpoint_ctx>
	if (!ep_ctx) {
   3ce36:	4604      	mov	r4, r0
   3ce38:	b350      	cbz	r0, 3ce90 <usb_dc_ep_read_continue+0x74>
	if (!ep_ctx->cfg.en) {
   3ce3a:	7a03      	ldrb	r3, [r0, #8]
   3ce3c:	b343      	cbz	r3, 3ce90 <usb_dc_ep_read_continue+0x74>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   3ce3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3ce42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3ce46:	f105 0038 	add.w	r0, r5, #56	; 0x38
   3ce4a:	f00a fa16 	bl	4727a <k_mutex_lock.constprop.0.isra.0>
	if (!ep_ctx->buf.len) {
   3ce4e:	68e3      	ldr	r3, [r4, #12]
   3ce50:	b9b3      	cbnz	r3, 3ce80 <usb_dc_ep_read_continue+0x64>
		ep_ctx->read_complete = true;
   3ce52:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
   3ce54:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
   3ce56:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
   3ce58:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
   3ce5a:	7f63      	ldrb	r3, [r4, #29]
   3ce5c:	b183      	cbz	r3, 3ce80 <usb_dc_ep_read_continue+0x64>
			struct usbd_event *ev = usbd_evt_alloc();
   3ce5e:	f7ff fb0d 	bl	3c47c <usbd_evt_alloc>
			if (!ev) {
   3ce62:	b930      	cbnz	r0, 3ce72 <usb_dc_ep_read_continue+0x56>
				k_mutex_unlock(&ctx->drv_lock);
   3ce64:	f105 0038 	add.w	r0, r5, #56	; 0x38
   3ce68:	f00a fa09 	bl	4727e <k_mutex_unlock.isra.0>
				return -ENOMEM;
   3ce6c:	f06f 000b 	mvn.w	r0, #11
}
   3ce70:	bd70      	pop	{r4, r5, r6, pc}
			ev->evt_type = USBD_EVT_EP;
   3ce72:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
   3ce74:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   3ce76:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
   3ce78:	f7ff fab8 	bl	3c3ec <usbd_evt_put>
			usbd_work_schedule();
   3ce7c:	f7ff fabc 	bl	3c3f8 <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
   3ce80:	4806      	ldr	r0, [pc, #24]	; (3ce9c <usb_dc_ep_read_continue+0x80>)
   3ce82:	f00a f9fc 	bl	4727e <k_mutex_unlock.isra.0>
	return 0;
   3ce86:	2000      	movs	r0, #0
   3ce88:	e7f2      	b.n	3ce70 <usb_dc_ep_read_continue+0x54>
		return -ENODEV;
   3ce8a:	f06f 0012 	mvn.w	r0, #18
   3ce8e:	e7ef      	b.n	3ce70 <usb_dc_ep_read_continue+0x54>
		return -EINVAL;
   3ce90:	f06f 0015 	mvn.w	r0, #21
   3ce94:	e7ec      	b.n	3ce70 <usb_dc_ep_read_continue+0x54>
   3ce96:	bf00      	nop
   3ce98:	20002cc4 	.word	0x20002cc4
   3ce9c:	20002cfc 	.word	0x20002cfc

0003cea0 <usb_dc_ep_set_callback>:
{
   3cea0:	b510      	push	{r4, lr}
	return get_usbd_ctx()->attached;
   3cea2:	4b08      	ldr	r3, [pc, #32]	; (3cec4 <usb_dc_ep_set_callback+0x24>)
	if (!dev_attached()) {
   3cea4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
   3cea8:	460c      	mov	r4, r1
	if (!dev_attached()) {
   3ceaa:	b12b      	cbz	r3, 3ceb8 <usb_dc_ep_set_callback+0x18>
	ep_ctx = endpoint_ctx(ep);
   3ceac:	f7ff fa6e 	bl	3c38c <endpoint_ctx>
	if (!ep_ctx) {
   3ceb0:	b128      	cbz	r0, 3cebe <usb_dc_ep_set_callback+0x1e>
	ep_ctx->cfg.cb = cb;
   3ceb2:	6004      	str	r4, [r0, #0]
	return 0;
   3ceb4:	2000      	movs	r0, #0
}
   3ceb6:	bd10      	pop	{r4, pc}
		return -ENODEV;
   3ceb8:	f06f 0012 	mvn.w	r0, #18
   3cebc:	e7fb      	b.n	3ceb6 <usb_dc_ep_set_callback+0x16>
		return -EINVAL;
   3cebe:	f06f 0015 	mvn.w	r0, #21
   3cec2:	e7f8      	b.n	3ceb6 <usb_dc_ep_set_callback+0x16>
   3cec4:	20002cc4 	.word	0x20002cc4

0003cec8 <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
   3cec8:	4b01      	ldr	r3, [pc, #4]	; (3ced0 <usb_dc_set_status_callback+0x8>)
   3ceca:	6018      	str	r0, [r3, #0]
}
   3cecc:	4770      	bx	lr
   3cece:	bf00      	nop
   3ced0:	20002cc4 	.word	0x20002cc4

0003ced4 <usb_dc_ep_mps>:
{
   3ced4:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
   3ced6:	4b07      	ldr	r3, [pc, #28]	; (3cef4 <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
   3ced8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   3cedc:	b123      	cbz	r3, 3cee8 <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
   3cede:	f7ff fa55 	bl	3c38c <endpoint_ctx>
	if (!ep_ctx) {
   3cee2:	b120      	cbz	r0, 3ceee <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
   3cee4:	6840      	ldr	r0, [r0, #4]
}
   3cee6:	bd08      	pop	{r3, pc}
		return -ENODEV;
   3cee8:	f06f 0012 	mvn.w	r0, #18
   3ceec:	e7fb      	b.n	3cee6 <usb_dc_ep_mps+0x12>
		return -EINVAL;
   3ceee:	f06f 0015 	mvn.w	r0, #21
   3cef2:	e7f8      	b.n	3cee6 <usb_dc_ep_mps+0x12>
   3cef4:	20002cc4 	.word	0x20002cc4

0003cef8 <adc_gain_invert>:
		[ADC_GAIN_64] = {.mul = 1, .div = 64},
		[ADC_GAIN_128] = {.mul = 1, .div = 128},
	};
	int rv = -EINVAL;

	if ((uint8_t)gain < ARRAY_SIZE(gains)) {
   3cef8:	2813      	cmp	r0, #19
   3cefa:	d80e      	bhi.n	3cf1a <adc_gain_invert+0x22>
		const struct gain_desc *gdp = &gains[gain];

		if ((gdp->mul != 0) && (gdp->div != 0)) {
   3cefc:	4a08      	ldr	r2, [pc, #32]	; (3cf20 <adc_gain_invert+0x28>)
   3cefe:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
   3cf02:	b153      	cbz	r3, 3cf1a <adc_gain_invert+0x22>
   3cf04:	eb02 0240 	add.w	r2, r2, r0, lsl #1
   3cf08:	7852      	ldrb	r2, [r2, #1]
   3cf0a:	b132      	cbz	r2, 3cf1a <adc_gain_invert+0x22>
			*value = (gdp->mul * *value) / gdp->div;
   3cf0c:	6808      	ldr	r0, [r1, #0]
   3cf0e:	4343      	muls	r3, r0
			rv = 0;
   3cf10:	2000      	movs	r0, #0
			*value = (gdp->mul * *value) / gdp->div;
   3cf12:	fb93 f3f2 	sdiv	r3, r3, r2
   3cf16:	600b      	str	r3, [r1, #0]
			rv = 0;
   3cf18:	4770      	bx	lr
	int rv = -EINVAL;
   3cf1a:	f06f 0015 	mvn.w	r0, #21
		}
	}

	return rv;
}
   3cf1e:	4770      	bx	lr
   3cf20:	0004aa63 	.word	0x0004aa63

0003cf24 <adc_context_start_sampling>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   3cf24:	4b05      	ldr	r3, [pc, #20]	; (3cf3c <adc_context_start_sampling+0x18>)
   3cf26:	2201      	movs	r2, #1
   3cf28:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   3cf2c:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
   3cf30:	b109      	cbz	r1, 3cf36 <adc_context_start_sampling+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3cf32:	60da      	str	r2, [r3, #12]
}
   3cf34:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3cf36:	601a      	str	r2, [r3, #0]
   3cf38:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   3cf3a:	4770      	bx	lr
   3cf3c:	40007000 	.word	0x40007000

0003cf40 <adc_nrfx_channel_setup>:
	uint8_t channel_id = channel_cfg->channel_id;
   3cf40:	7908      	ldrb	r0, [r1, #4]
{
   3cf42:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
   3cf44:	f000 041f 	and.w	r4, r0, #31
	if (channel_id >= SAADC_CH_NUM) {
   3cf48:	2c07      	cmp	r4, #7
   3cf4a:	d820      	bhi.n	3cf8e <adc_nrfx_channel_setup+0x4e>
	switch (channel_cfg->gain) {
   3cf4c:	780b      	ldrb	r3, [r1, #0]
   3cf4e:	2b0b      	cmp	r3, #11
   3cf50:	d81d      	bhi.n	3cf8e <adc_nrfx_channel_setup+0x4e>
   3cf52:	e8df f003 	tbb	[pc, r3]
   3cf56:	0707      	.short	0x0707
   3cf58:	061c0707 	.word	0x061c0707
   3cf5c:	211f1c1c 	.word	0x211f1c1c
   3cf60:	231c      	.short	0x231c
		config.gain = NRF_SAADC_GAIN1_2;
   3cf62:	2304      	movs	r3, #4
	switch (channel_cfg->reference) {
   3cf64:	784a      	ldrb	r2, [r1, #1]
   3cf66:	2a03      	cmp	r2, #3
   3cf68:	d01a      	beq.n	3cfa0 <adc_nrfx_channel_setup+0x60>
   3cf6a:	2a04      	cmp	r2, #4
   3cf6c:	d10f      	bne.n	3cf8e <adc_nrfx_channel_setup+0x4e>
	nrf_saadc_channel_config_t config = {
   3cf6e:	2500      	movs	r5, #0
	switch (channel_cfg->acquisition_time) {
   3cf70:	884a      	ldrh	r2, [r1, #2]
   3cf72:	f244 060a 	movw	r6, #16394	; 0x400a
   3cf76:	42b2      	cmp	r2, r6
   3cf78:	d046      	beq.n	3d008 <adc_nrfx_channel_setup+0xc8>
   3cf7a:	d813      	bhi.n	3cfa4 <adc_nrfx_channel_setup+0x64>
   3cf7c:	f244 0603 	movw	r6, #16387	; 0x4003
   3cf80:	42b2      	cmp	r2, r6
   3cf82:	d03d      	beq.n	3d000 <adc_nrfx_channel_setup+0xc0>
   3cf84:	f244 0605 	movw	r6, #16389	; 0x4005
   3cf88:	42b2      	cmp	r2, r6
   3cf8a:	d03b      	beq.n	3d004 <adc_nrfx_channel_setup+0xc4>
   3cf8c:	b3e2      	cbz	r2, 3d008 <adc_nrfx_channel_setup+0xc8>
   3cf8e:	f06f 0015 	mvn.w	r0, #21
   3cf92:	e034      	b.n	3cffe <adc_nrfx_channel_setup+0xbe>
		config.gain = NRF_SAADC_GAIN1;
   3cf94:	2305      	movs	r3, #5
		break;
   3cf96:	e7e5      	b.n	3cf64 <adc_nrfx_channel_setup+0x24>
		config.gain = NRF_SAADC_GAIN2;
   3cf98:	2306      	movs	r3, #6
		break;
   3cf9a:	e7e3      	b.n	3cf64 <adc_nrfx_channel_setup+0x24>
		config.gain = NRF_SAADC_GAIN4;
   3cf9c:	2307      	movs	r3, #7
		break;
   3cf9e:	e7e1      	b.n	3cf64 <adc_nrfx_channel_setup+0x24>
	switch (channel_cfg->reference) {
   3cfa0:	2501      	movs	r5, #1
   3cfa2:	e7e5      	b.n	3cf70 <adc_nrfx_channel_setup+0x30>
	switch (channel_cfg->acquisition_time) {
   3cfa4:	f244 0614 	movw	r6, #16404	; 0x4014
   3cfa8:	42b2      	cmp	r2, r6
   3cfaa:	d02f      	beq.n	3d00c <adc_nrfx_channel_setup+0xcc>
   3cfac:	f244 0628 	movw	r6, #16424	; 0x4028
   3cfb0:	42b2      	cmp	r2, r6
   3cfb2:	d02d      	beq.n	3d010 <adc_nrfx_channel_setup+0xd0>
   3cfb4:	f244 060f 	movw	r6, #16399	; 0x400f
   3cfb8:	42b2      	cmp	r2, r6
   3cfba:	d1e8      	bne.n	3cf8e <adc_nrfx_channel_setup+0x4e>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   3cfbc:	2203      	movs	r2, #3
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   3cfbe:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   3cfc2:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   3cfc4:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
   3cfc8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   3cfcc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
   3cfd0:	0122      	lsls	r2, r4, #4
   3cfd2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   3cfd6:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
   3cfda:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
   3cfdc:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   3cfe0:	0123      	lsls	r3, r4, #4
   3cfe2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3cfe6:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
   3cfea:	798a      	ldrb	r2, [r1, #6]
   3cfec:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   3cff0:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   3cff4:	4b07      	ldr	r3, [pc, #28]	; (3d014 <adc_nrfx_channel_setup+0xd4>)
   3cff6:	794a      	ldrb	r2, [r1, #5]
   3cff8:	4423      	add	r3, r4
   3cffa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
}
   3cffe:	bd70      	pop	{r4, r5, r6, pc}
	nrf_saadc_channel_config_t config = {
   3d000:	2200      	movs	r2, #0
   3d002:	e7dc      	b.n	3cfbe <adc_nrfx_channel_setup+0x7e>
	switch (channel_cfg->acquisition_time) {
   3d004:	2201      	movs	r2, #1
   3d006:	e7da      	b.n	3cfbe <adc_nrfx_channel_setup+0x7e>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   3d008:	2202      	movs	r2, #2
   3d00a:	e7d8      	b.n	3cfbe <adc_nrfx_channel_setup+0x7e>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   3d00c:	2204      	movs	r2, #4
   3d00e:	e7d6      	b.n	3cfbe <adc_nrfx_channel_setup+0x7e>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   3d010:	2205      	movs	r2, #5
   3d012:	e7d4      	b.n	3cfbe <adc_nrfx_channel_setup+0x7e>
   3d014:	20000168 	.word	0x20000168

0003d018 <adc_nrfx_read>:
}

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
   3d018:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3d01a:	460c      	mov	r4, r1
	return z_impl_k_sem_take(sem, timeout);
   3d01c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3d020:	4856      	ldr	r0, [pc, #344]	; (3d17c <adc_nrfx_read+0x164>)
   3d022:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3d026:	f003 fdc5 	bl	40bb4 <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
   3d02a:	6866      	ldr	r6, [r4, #4]
	if (!selected_channels ||
   3d02c:	1e73      	subs	r3, r6, #1
   3d02e:	2bfe      	cmp	r3, #254	; 0xfe
   3d030:	d83c      	bhi.n	3d0ac <adc_nrfx_read+0x94>
   3d032:	2300      	movs	r3, #0
    p_reg->CH[channel].PSELP = pselp;
   3d034:	4852      	ldr	r0, [pc, #328]	; (3d180 <adc_nrfx_read+0x168>)
			if (m_data.positive_inputs[channel_id] == 0U) {
   3d036:	4f53      	ldr	r7, [pc, #332]	; (3d184 <adc_nrfx_read+0x16c>)
	active_channels = 0U;
   3d038:	461a      	mov	r2, r3
		if (selected_channels & BIT(channel_id)) {
   3d03a:	fa26 f103 	lsr.w	r1, r6, r3
   3d03e:	f011 0101 	ands.w	r1, r1, #1
   3d042:	d026      	beq.n	3d092 <adc_nrfx_read+0x7a>
			if (m_data.positive_inputs[channel_id] == 0U) {
   3d044:	f817 c003 	ldrb.w	ip, [r7, r3]
   3d048:	f1bc 0f00 	cmp.w	ip, #0
   3d04c:	d02e      	beq.n	3d0ac <adc_nrfx_read+0x94>

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   3d04e:	eb00 1e03 	add.w	lr, r0, r3, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   3d052:	7c65      	ldrb	r5, [r4, #17]
   3d054:	f8de 1518 	ldr.w	r1, [lr, #1304]	; 0x518
   3d058:	3d00      	subs	r5, #0
   3d05a:	bf18      	it	ne
   3d05c:	2501      	movne	r5, #1
   3d05e:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
   3d062:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
   3d066:	f8ce 1518 	str.w	r1, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   3d06a:	f103 0151 	add.w	r1, r3, #81	; 0x51
   3d06e:	0109      	lsls	r1, r1, #4
			++active_channels;
   3d070:	3201      	adds	r2, #1
   3d072:	f840 c001 	str.w	ip, [r0, r1]
   3d076:	b2d2      	uxtb	r2, r2
	} while (++channel_id < SAADC_CH_NUM);
   3d078:	3301      	adds	r3, #1
   3d07a:	2b08      	cmp	r3, #8
   3d07c:	d1dd      	bne.n	3d03a <adc_nrfx_read+0x22>
	switch (sequence->resolution) {
   3d07e:	7c23      	ldrb	r3, [r4, #16]
   3d080:	3b08      	subs	r3, #8
   3d082:	2b06      	cmp	r3, #6
   3d084:	d812      	bhi.n	3d0ac <adc_nrfx_read+0x94>
   3d086:	e8df f003 	tbb	[pc, r3]
   3d08a:	1109      	.short	0x1109
   3d08c:	1119111d 	.word	0x1119111d
   3d090:	1b          	.byte	0x1b
   3d091:	00          	.byte	0x00
   3d092:	f103 0551 	add.w	r5, r3, #81	; 0x51
   3d096:	012d      	lsls	r5, r5, #4
   3d098:	5141      	str	r1, [r0, r5]
}
   3d09a:	e7ed      	b.n	3d078 <adc_nrfx_read+0x60>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   3d09c:	2300      	movs	r3, #0
    p_reg->RESOLUTION = resolution;
   3d09e:	4938      	ldr	r1, [pc, #224]	; (3d180 <adc_nrfx_read+0x168>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   3d0a0:	2a01      	cmp	r2, #1
   3d0a2:	f8c1 35f0 	str.w	r3, [r1, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
   3d0a6:	7c63      	ldrb	r3, [r4, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   3d0a8:	d90e      	bls.n	3d0c8 <adc_nrfx_read+0xb0>
   3d0aa:	b17b      	cbz	r3, 3d0cc <adc_nrfx_read+0xb4>
		return -EINVAL;
   3d0ac:	f06f 0415 	mvn.w	r4, #21
	z_impl_k_sem_give(sem);
   3d0b0:	4832      	ldr	r0, [pc, #200]	; (3d17c <adc_nrfx_read+0x164>)
   3d0b2:	f003 fd59 	bl	40b68 <z_impl_k_sem_give>
	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
	adc_context_release(&m_data.ctx, error);

	return error;
}
   3d0b6:	4620      	mov	r0, r4
   3d0b8:	b003      	add	sp, #12
   3d0ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   3d0bc:	2302      	movs	r3, #2
		break;
   3d0be:	e7ee      	b.n	3d09e <adc_nrfx_read+0x86>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   3d0c0:	2303      	movs	r3, #3
		break;
   3d0c2:	e7ec      	b.n	3d09e <adc_nrfx_read+0x86>
	switch (sequence->resolution) {
   3d0c4:	2301      	movs	r3, #1
   3d0c6:	e7ea      	b.n	3d09e <adc_nrfx_read+0x86>
	switch (sequence->oversampling) {
   3d0c8:	2b08      	cmp	r3, #8
   3d0ca:	d8ef      	bhi.n	3d0ac <adc_nrfx_read+0x94>
    p_reg->OVERSAMPLE = oversample;
   3d0cc:	f8c1 35f4 	str.w	r3, [r1, #1524]	; 0x5f4
	if (sequence->options) {
   3d0d0:	6821      	ldr	r1, [r4, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   3d0d2:	0053      	lsls	r3, r2, #1
	if (sequence->options) {
   3d0d4:	b111      	cbz	r1, 3d0dc <adc_nrfx_read+0xc4>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   3d0d6:	8989      	ldrh	r1, [r1, #12]
   3d0d8:	fb01 3303 	mla	r3, r1, r3, r3
	if (sequence->buffer_size < needed_buffer_size) {
   3d0dc:	68e1      	ldr	r1, [r4, #12]
   3d0de:	4299      	cmp	r1, r3
   3d0e0:	d348      	bcc.n	3d174 <adc_nrfx_read+0x15c>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   3d0e2:	4b27      	ldr	r3, [pc, #156]	; (3d180 <adc_nrfx_read+0x168>)
   3d0e4:	68a1      	ldr	r1, [r4, #8]
   3d0e6:	f8c3 162c 	str.w	r1, [r3, #1580]	; 0x62c
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
   3d0ea:	4627      	mov	r7, r4
    p_reg->RESULT.MAXCNT = size;
   3d0ec:	f8c3 2630 	str.w	r2, [r3, #1584]	; 0x630
   3d0f0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   3d0f2:	4d25      	ldr	r5, [pc, #148]	; (3d188 <adc_nrfx_read+0x170>)
   3d0f4:	f105 0674 	add.w	r6, r5, #116	; 0x74
   3d0f8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   3d0fa:	683b      	ldr	r3, [r7, #0]
   3d0fc:	6033      	str	r3, [r6, #0]
	ctx->status = 0;
   3d0fe:	2600      	movs	r6, #0
   3d100:	672e      	str	r6, [r5, #112]	; 0x70

	if (sequence->options) {
   3d102:	6823      	ldr	r3, [r4, #0]
   3d104:	462f      	mov	r7, r5
   3d106:	b38b      	cbz	r3, 3d16c <adc_nrfx_read+0x154>
		ctx->options = *sequence->options;
   3d108:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   3d10a:	f105 0488 	add.w	r4, r5, #136	; 0x88
   3d10e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   3d112:	676c      	str	r4, [r5, #116]	; 0x74
		ctx->sampling_index = 0U;
   3d114:	f8a5 6098 	strh.w	r6, [r5, #152]	; 0x98

		if (ctx->options.interval_us != 0U) {
   3d118:	b340      	cbz	r0, 3d16c <adc_nrfx_read+0x154>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   3d11a:	f3bf 8f5b 	dmb	ish
   3d11e:	e857 3f00 	ldrex	r3, [r7]
   3d122:	e847 6200 	strex	r2, r6, [r7]
   3d126:	2a00      	cmp	r2, #0
   3d128:	d1f9      	bne.n	3d11e <adc_nrfx_read+0x106>
   3d12a:	f3bf 8f5b 	dmb	ish
   3d12e:	4917      	ldr	r1, [pc, #92]	; (3d18c <adc_nrfx_read+0x174>)
   3d130:	f8d5 4088 	ldr.w	r4, [r5, #136]	; 0x88
   3d134:	4a16      	ldr	r2, [pc, #88]	; (3d190 <adc_nrfx_read+0x178>)
   3d136:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   3d13a:	460f      	mov	r7, r1
   3d13c:	4631      	mov	r1, r6
   3d13e:	fbe4 7100 	umlal	r7, r1, r4, r0
   3d142:	2300      	movs	r3, #0
   3d144:	4638      	mov	r0, r7
   3d146:	f7e8 ffdb 	bl	26100 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   3d14a:	2200      	movs	r2, #0
   3d14c:	e9cd 0100 	strd	r0, r1, [sp]
   3d150:	2300      	movs	r3, #0
   3d152:	f105 0008 	add.w	r0, r5, #8
   3d156:	f004 fc69 	bl	41a2c <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
   3d15a:	480e      	ldr	r0, [pc, #56]	; (3d194 <adc_nrfx_read+0x17c>)
   3d15c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3d160:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3d164:	f003 fd26 	bl	40bb4 <z_impl_k_sem_take>
	return ctx->status;
   3d168:	6f2c      	ldr	r4, [r5, #112]	; 0x70
	return error;
   3d16a:	e7a1      	b.n	3d0b0 <adc_nrfx_read+0x98>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   3d16c:	4806      	ldr	r0, [pc, #24]	; (3d188 <adc_nrfx_read+0x170>)
   3d16e:	f7ff fed9 	bl	3cf24 <adc_context_start_sampling>
   3d172:	e7f2      	b.n	3d15a <adc_nrfx_read+0x142>
		return -ENOMEM;
   3d174:	f06f 040b 	mvn.w	r4, #11
   3d178:	e79a      	b.n	3d0b0 <adc_nrfx_read+0x98>
   3d17a:	bf00      	nop
   3d17c:	200001a8 	.word	0x200001a8
   3d180:	40007000 	.word	0x40007000
   3d184:	20000208 	.word	0x20000208
   3d188:	20000168 	.word	0x20000168
   3d18c:	000f423f 	.word	0x000f423f
   3d190:	000f4240 	.word	0x000f4240
   3d194:	200001c0 	.word	0x200001c0

0003d198 <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
   3d198:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3d19a:	4b0e      	ldr	r3, [pc, #56]	; (3d1d4 <init_saadc+0x3c>)
   3d19c:	2400      	movs	r4, #0
   3d19e:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   3d1a2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   3d1a6:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
   3d1aa:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
   3d1ae:	2212      	movs	r2, #18
   3d1b0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   3d1b4:	2007      	movs	r0, #7
   3d1b6:	f7ed f89f 	bl	2a2f8 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   3d1ba:	4622      	mov	r2, r4
   3d1bc:	2101      	movs	r1, #1
   3d1be:	2007      	movs	r0, #7
   3d1c0:	f7ed f8ca 	bl	2a358 <z_arm_irq_priority_set>
	return sem->count;
   3d1c4:	4804      	ldr	r0, [pc, #16]	; (3d1d8 <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
   3d1c6:	6c83      	ldr	r3, [r0, #72]	; 0x48
   3d1c8:	b913      	cbnz	r3, 3d1d0 <init_saadc+0x38>
	z_impl_k_sem_give(sem);
   3d1ca:	3040      	adds	r0, #64	; 0x40
   3d1cc:	f003 fccc 	bl	40b68 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   3d1d0:	2000      	movs	r0, #0
   3d1d2:	bd10      	pop	{r4, pc}
   3d1d4:	40007000 	.word	0x40007000
   3d1d8:	20000168 	.word	0x20000168

0003d1dc <saadc_irq_handler>:
{
   3d1dc:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3d1de:	4b2f      	ldr	r3, [pc, #188]	; (3d29c <saadc_irq_handler+0xc0>)
   3d1e0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   3d1e4:	2a00      	cmp	r2, #0
   3d1e6:	d04c      	beq.n	3d282 <saadc_irq_handler+0xa6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3d1e8:	2200      	movs	r2, #0
   3d1ea:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   3d1ee:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   3d1f2:	4c2b      	ldr	r4, [pc, #172]	; (3d2a0 <saadc_irq_handler+0xc4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3d1f4:	2101      	movs	r1, #1
   3d1f6:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   3d1f8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   3d1fc:	6f63      	ldr	r3, [r4, #116]	; 0x74
   3d1fe:	4625      	mov	r5, r4
   3d200:	b3d3      	cbz	r3, 3d278 <saadc_irq_handler+0x9c>
		adc_sequence_callback callback = ctx->options.callback;
   3d202:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
   3d206:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
		if (callback) {
   3d20a:	b133      	cbz	r3, 3d21a <saadc_irq_handler+0x3e>
			action = callback(dev,
   3d20c:	f104 0174 	add.w	r1, r4, #116	; 0x74
   3d210:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   3d212:	2801      	cmp	r0, #1
   3d214:	d014      	beq.n	3d240 <saadc_irq_handler+0x64>
   3d216:	2802      	cmp	r0, #2
   3d218:	d028      	beq.n	3d26c <saadc_irq_handler+0x90>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   3d21a:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
   3d21e:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
   3d222:	429a      	cmp	r2, r3
   3d224:	d922      	bls.n	3d26c <saadc_irq_handler+0x90>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   3d226:	3301      	adds	r3, #1
   3d228:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   3d22c:	4b1b      	ldr	r3, [pc, #108]	; (3d29c <saadc_irq_handler+0xc0>)
   3d22e:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
   3d232:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   3d236:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   3d238:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   3d23c:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   3d240:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   3d244:	b923      	cbnz	r3, 3d250 <saadc_irq_handler+0x74>
}
   3d246:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				adc_context_start_sampling(ctx);
   3d24a:	4815      	ldr	r0, [pc, #84]	; (3d2a0 <saadc_irq_handler+0xc4>)
   3d24c:	f7ff be6a 	b.w	3cf24 <adc_context_start_sampling>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   3d250:	f3bf 8f5b 	dmb	ish
   3d254:	e855 3f00 	ldrex	r3, [r5]
   3d258:	1e5a      	subs	r2, r3, #1
   3d25a:	e845 2100 	strex	r1, r2, [r5]
   3d25e:	2900      	cmp	r1, #0
   3d260:	d1f8      	bne.n	3d254 <saadc_irq_handler+0x78>
   3d262:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   3d266:	2b01      	cmp	r3, #1
   3d268:	dced      	bgt.n	3d246 <saadc_irq_handler+0x6a>
   3d26a:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   3d26c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   3d270:	b113      	cbz	r3, 3d278 <saadc_irq_handler+0x9c>
	z_impl_k_timer_stop(timer);
   3d272:	480c      	ldr	r0, [pc, #48]	; (3d2a4 <saadc_irq_handler+0xc8>)
   3d274:	f00b f9e5 	bl	48642 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   3d278:	480b      	ldr	r0, [pc, #44]	; (3d2a8 <saadc_irq_handler+0xcc>)
   3d27a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3d27e:	f003 bc73 	b.w	40b68 <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3d282:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
   3d286:	2900      	cmp	r1, #0
   3d288:	d0ef      	beq.n	3d26a <saadc_irq_handler+0x8e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3d28a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   3d28e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3d292:	2201      	movs	r2, #1
   3d294:	609a      	str	r2, [r3, #8]
   3d296:	601a      	str	r2, [r3, #0]
   3d298:	605a      	str	r2, [r3, #4]
}
   3d29a:	e7e6      	b.n	3d26a <saadc_irq_handler+0x8e>
   3d29c:	40007000 	.word	0x40007000
   3d2a0:	20000168 	.word	0x20000168
   3d2a4:	20000170 	.word	0x20000170
   3d2a8:	200001c0 	.word	0x200001c0

0003d2ac <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   3d2ac:	4b08      	ldr	r3, [pc, #32]	; (3d2d0 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   3d2ae:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   3d2b0:	1ac3      	subs	r3, r0, r3
{
   3d2b2:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   3d2b4:	4907      	ldr	r1, [pc, #28]	; (3d2d4 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   3d2b6:	109b      	asrs	r3, r3, #2
{
   3d2b8:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   3d2ba:	4359      	muls	r1, r3
   3d2bc:	4806      	ldr	r0, [pc, #24]	; (3d2d8 <onoff_stop+0x2c>)
   3d2be:	2240      	movs	r2, #64	; 0x40
   3d2c0:	f00a f839 	bl	47336 <stop>
	notify(mgr, res);
   3d2c4:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   3d2c6:	4601      	mov	r1, r0
	notify(mgr, res);
   3d2c8:	4620      	mov	r0, r4
}
   3d2ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   3d2ce:	4718      	bx	r3
   3d2d0:	20003568 	.word	0x20003568
   3d2d4:	b6db6db7 	.word	0xb6db6db7
   3d2d8:	00048a60 	.word	0x00048a60

0003d2dc <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   3d2dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   3d2de:	4c0c      	ldr	r4, [pc, #48]	; (3d310 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   3d2e0:	4a0c      	ldr	r2, [pc, #48]	; (3d314 <onoff_start+0x38>)
   3d2e2:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   3d2e4:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   3d2e6:	9300      	str	r3, [sp, #0]
{
   3d2e8:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   3d2ea:	460b      	mov	r3, r1
   3d2ec:	490a      	ldr	r1, [pc, #40]	; (3d318 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   3d2ee:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   3d2f0:	4361      	muls	r1, r4
{
   3d2f2:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   3d2f4:	4809      	ldr	r0, [pc, #36]	; (3d31c <onoff_start+0x40>)
   3d2f6:	f00a f84b 	bl	47390 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   3d2fa:	1e01      	subs	r1, r0, #0
   3d2fc:	da05      	bge.n	3d30a <onoff_start+0x2e>
		notify(mgr, err);
   3d2fe:	4630      	mov	r0, r6
   3d300:	462b      	mov	r3, r5
	}
}
   3d302:	b002      	add	sp, #8
   3d304:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   3d308:	4718      	bx	r3
}
   3d30a:	b002      	add	sp, #8
   3d30c:	bd70      	pop	{r4, r5, r6, pc}
   3d30e:	bf00      	nop
   3d310:	20003568 	.word	0x20003568
   3d314:	000473fd 	.word	0x000473fd
   3d318:	b6db6db7 	.word	0xb6db6db7
   3d31c:	00048a60 	.word	0x00048a60

0003d320 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   3d320:	2200      	movs	r2, #0
{
   3d322:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   3d324:	2101      	movs	r1, #1
{
   3d326:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   3d328:	4610      	mov	r0, r2
   3d32a:	f7ed f815 	bl	2a358 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   3d32e:	4811      	ldr	r0, [pc, #68]	; (3d374 <clk_init+0x54>)
   3d330:	f001 fb14 	bl	3e95c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   3d334:	4b10      	ldr	r3, [pc, #64]	; (3d378 <clk_init+0x58>)
   3d336:	4298      	cmp	r0, r3
   3d338:	d118      	bne.n	3d36c <clk_init+0x4c>
	hfclkaudio_init();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_DRIVER_CALIBRATION)) {
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
   3d33a:	6920      	ldr	r0, [r4, #16]
   3d33c:	f000 f9e2 	bl	3d704 <z_nrf_clock_calibration_init>
	}

	nrfx_clock_enable();
   3d340:	f001 fb1e 	bl	3e980 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   3d344:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   3d346:	490d      	ldr	r1, [pc, #52]	; (3d37c <clk_init+0x5c>)
   3d348:	4630      	mov	r0, r6
   3d34a:	f004 fec2 	bl	420d2 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   3d34e:	2800      	cmp	r0, #0
   3d350:	db0b      	blt.n	3d36a <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   3d352:	2501      	movs	r5, #1
   3d354:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
   3d356:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   3d358:	4908      	ldr	r1, [pc, #32]	; (3d37c <clk_init+0x5c>)
   3d35a:	f104 001c 	add.w	r0, r4, #28
   3d35e:	f004 feb8 	bl	420d2 <onoff_manager_init>
		if (err < 0) {
   3d362:	2800      	cmp	r0, #0
   3d364:	db01      	blt.n	3d36a <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   3d366:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   3d368:	2000      	movs	r0, #0
}
   3d36a:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   3d36c:	f06f 0004 	mvn.w	r0, #4
   3d370:	e7fb      	b.n	3d36a <clk_init+0x4a>
   3d372:	bf00      	nop
   3d374:	0003d3b5 	.word	0x0003d3b5
   3d378:	0bad0000 	.word	0x0bad0000
   3d37c:	0004a328 	.word	0x0004a328

0003d380 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   3d380:	b570      	push	{r4, r5, r6, lr}
   3d382:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   3d384:	230c      	movs	r3, #12
   3d386:	4809      	ldr	r0, [pc, #36]	; (3d3ac <clkstarted_handle.constprop.0+0x2c>)
   3d388:	434b      	muls	r3, r1
   3d38a:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   3d38c:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   3d390:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   3d392:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   3d394:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   3d396:	4418      	add	r0, r3
   3d398:	f009 ffba 	bl	47310 <set_on_state>
	if (callback) {
   3d39c:	b12d      	cbz	r5, 3d3aa <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   3d39e:	4632      	mov	r2, r6
   3d3a0:	462b      	mov	r3, r5
   3d3a2:	4803      	ldr	r0, [pc, #12]	; (3d3b0 <clkstarted_handle.constprop.0+0x30>)
}
   3d3a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   3d3a8:	4718      	bx	r3
}
   3d3aa:	bd70      	pop	{r4, r5, r6, pc}
   3d3ac:	20003568 	.word	0x20003568
   3d3b0:	00048a60 	.word	0x00048a60

0003d3b4 <clock_event_handler>:
	switch (event) {
   3d3b4:	2801      	cmp	r0, #1
{
   3d3b6:	b510      	push	{r4, lr}
   3d3b8:	4604      	mov	r4, r0
	switch (event) {
   3d3ba:	d00a      	beq.n	3d3d2 <clock_event_handler+0x1e>
   3d3bc:	2803      	cmp	r0, #3
   3d3be:	d00c      	beq.n	3d3da <clock_event_handler+0x26>
   3d3c0:	b978      	cbnz	r0, 3d3e2 <clock_event_handler+0x2e>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   3d3c2:	4b08      	ldr	r3, [pc, #32]	; (3d3e4 <clock_event_handler+0x30>)
   3d3c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   3d3c6:	075b      	lsls	r3, r3, #29
   3d3c8:	d10b      	bne.n	3d3e2 <clock_event_handler+0x2e>
}
   3d3ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   3d3ce:	f7ff bfd7 	b.w	3d380 <clkstarted_handle.constprop.0>
			z_nrf_clock_calibration_lfclk_started();
   3d3d2:	f000 f9a5 	bl	3d720 <z_nrf_clock_calibration_lfclk_started>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   3d3d6:	4620      	mov	r0, r4
   3d3d8:	e7f7      	b.n	3d3ca <clock_event_handler+0x16>
}
   3d3da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			z_nrf_clock_calibration_done_handler();
   3d3de:	f000 b9ad 	b.w	3d73c <z_nrf_clock_calibration_done_handler>
}
   3d3e2:	bd10      	pop	{r4, pc}
   3d3e4:	20003568 	.word	0x20003568

0003d3e8 <generic_hfclk_start>:
{
   3d3e8:	b508      	push	{r3, lr}
	__asm__ volatile(
   3d3ea:	f04f 0320 	mov.w	r3, #32
   3d3ee:	f3ef 8111 	mrs	r1, BASEPRI
   3d3f2:	f383 8812 	msr	BASEPRI_MAX, r3
   3d3f6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   3d3fa:	4a12      	ldr	r2, [pc, #72]	; (3d444 <generic_hfclk_start+0x5c>)
   3d3fc:	6813      	ldr	r3, [r2, #0]
   3d3fe:	f043 0002 	orr.w	r0, r3, #2
   3d402:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   3d404:	07da      	lsls	r2, r3, #31
   3d406:	d408      	bmi.n	3d41a <generic_hfclk_start+0x32>
	__asm__ volatile(
   3d408:	f381 8811 	msr	BASEPRI, r1
   3d40c:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   3d410:	2001      	movs	r0, #1
}
   3d412:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3d416:	f00a b912 	b.w	4763e <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   3d41a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3d41e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   3d422:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   3d426:	07d3      	lsls	r3, r2, #31
   3d428:	d5ee      	bpl.n	3d408 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   3d42a:	4807      	ldr	r0, [pc, #28]	; (3d448 <generic_hfclk_start+0x60>)
   3d42c:	f009 ff70 	bl	47310 <set_on_state>
   3d430:	f381 8811 	msr	BASEPRI, r1
   3d434:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
   3d438:	2000      	movs	r0, #0
}
   3d43a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   3d43e:	f7ff bf9f 	b.w	3d380 <clkstarted_handle.constprop.0>
   3d442:	bf00      	nop
   3d444:	200035b8 	.word	0x200035b8
   3d448:	200035a8 	.word	0x200035a8

0003d44c <api_blocking_start>:
{
   3d44c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   3d44e:	2200      	movs	r2, #0
   3d450:	2301      	movs	r3, #1
   3d452:	e9cd 2302 	strd	r2, r3, [sp, #8]
   3d456:	ab04      	add	r3, sp, #16
   3d458:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   3d45c:	4a09      	ldr	r2, [pc, #36]	; (3d484 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   3d45e:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   3d462:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   3d464:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   3d468:	f009 ffc1 	bl	473ee <api_start>
	if (err < 0) {
   3d46c:	2800      	cmp	r0, #0
   3d46e:	db05      	blt.n	3d47c <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   3d470:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   3d474:	2300      	movs	r3, #0
   3d476:	4668      	mov	r0, sp
   3d478:	f003 fb9c 	bl	40bb4 <z_impl_k_sem_take>
}
   3d47c:	b007      	add	sp, #28
   3d47e:	f85d fb04 	ldr.w	pc, [sp], #4
   3d482:	bf00      	nop
   3d484:	00047415 	.word	0x00047415

0003d488 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3d488:	4b09      	ldr	r3, [pc, #36]	; (3d4b0 <generic_hfclk_stop+0x28>)
   3d48a:	f3bf 8f5b 	dmb	ish
   3d48e:	e853 2f00 	ldrex	r2, [r3]
   3d492:	f022 0102 	bic.w	r1, r2, #2
   3d496:	e843 1000 	strex	r0, r1, [r3]
   3d49a:	2800      	cmp	r0, #0
   3d49c:	d1f7      	bne.n	3d48e <generic_hfclk_stop+0x6>
   3d49e:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   3d4a2:	07d3      	lsls	r3, r2, #31
   3d4a4:	d402      	bmi.n	3d4ac <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   3d4a6:	2001      	movs	r0, #1
   3d4a8:	f00a b901 	b.w	476ae <nrfx_clock_stop>
}
   3d4ac:	4770      	bx	lr
   3d4ae:	bf00      	nop
   3d4b0:	200035b8 	.word	0x200035b8

0003d4b4 <z_nrf_clock_control_get_onoff>:
}
   3d4b4:	4a02      	ldr	r2, [pc, #8]	; (3d4c0 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   3d4b6:	b2c3      	uxtb	r3, r0
}
   3d4b8:	201c      	movs	r0, #28
   3d4ba:	fb03 2000 	mla	r0, r3, r0, r2
   3d4be:	4770      	bx	lr
   3d4c0:	20003568 	.word	0x20003568

0003d4c4 <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   3d4c4:	4b09      	ldr	r3, [pc, #36]	; (3d4ec <z_nrf_clock_bt_ctlr_hf_request+0x28>)
   3d4c6:	f3bf 8f5b 	dmb	ish
   3d4ca:	e853 2f00 	ldrex	r2, [r3]
   3d4ce:	f042 0101 	orr.w	r1, r2, #1
   3d4d2:	e843 1000 	strex	r0, r1, [r3]
   3d4d6:	2800      	cmp	r0, #0
   3d4d8:	d1f7      	bne.n	3d4ca <z_nrf_clock_bt_ctlr_hf_request+0x6>
   3d4da:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
   3d4de:	0793      	lsls	r3, r2, #30
   3d4e0:	d402      	bmi.n	3d4e8 <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   3d4e2:	2001      	movs	r0, #1
   3d4e4:	f00a b8ab 	b.w	4763e <nrfx_clock_start>
}
   3d4e8:	4770      	bx	lr
   3d4ea:	bf00      	nop
   3d4ec:	200035b8 	.word	0x200035b8

0003d4f0 <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3d4f0:	4b09      	ldr	r3, [pc, #36]	; (3d518 <z_nrf_clock_bt_ctlr_hf_release+0x28>)
   3d4f2:	f3bf 8f5b 	dmb	ish
   3d4f6:	e853 2f00 	ldrex	r2, [r3]
   3d4fa:	f022 0101 	bic.w	r1, r2, #1
   3d4fe:	e843 1000 	strex	r0, r1, [r3]
   3d502:	2800      	cmp	r0, #0
   3d504:	d1f7      	bne.n	3d4f6 <z_nrf_clock_bt_ctlr_hf_release+0x6>
   3d506:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
   3d50a:	0793      	lsls	r3, r2, #30
   3d50c:	d402      	bmi.n	3d514 <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   3d50e:	2001      	movs	r0, #1
   3d510:	f00a b8cd 	b.w	476ae <nrfx_clock_stop>
}
   3d514:	4770      	bx	lr
   3d516:	bf00      	nop
   3d518:	200035b8 	.word	0x200035b8

0003d51c <z_nrf_clock_control_lf_on>:
{
   3d51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   3d51e:	4928      	ldr	r1, [pc, #160]	; (3d5c0 <z_nrf_clock_control_lf_on+0xa4>)
   3d520:	f3bf 8f5b 	dmb	ish
   3d524:	4606      	mov	r6, r0
   3d526:	2201      	movs	r2, #1
   3d528:	e851 3f00 	ldrex	r3, [r1]
   3d52c:	e841 2000 	strex	r0, r2, [r1]
   3d530:	2800      	cmp	r0, #0
   3d532:	d1f9      	bne.n	3d528 <z_nrf_clock_control_lf_on+0xc>
   3d534:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   3d538:	b933      	cbnz	r3, 3d548 <z_nrf_clock_control_lf_on+0x2c>
   3d53a:	4922      	ldr	r1, [pc, #136]	; (3d5c4 <z_nrf_clock_control_lf_on+0xa8>)
		err = onoff_request(mgr, &cli);
   3d53c:	4822      	ldr	r0, [pc, #136]	; (3d5c8 <z_nrf_clock_control_lf_on+0xac>)
   3d53e:	604b      	str	r3, [r1, #4]
   3d540:	60cb      	str	r3, [r1, #12]
   3d542:	608a      	str	r2, [r1, #8]
   3d544:	f004 fdd8 	bl	420f8 <onoff_request>
	switch (start_mode) {
   3d548:	1e73      	subs	r3, r6, #1
   3d54a:	2b01      	cmp	r3, #1
   3d54c:	d81d      	bhi.n	3d58a <z_nrf_clock_control_lf_on+0x6e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   3d54e:	f00a fcc9 	bl	47ee4 <k_is_in_isr>
   3d552:	4604      	mov	r4, r0
   3d554:	b9d0      	cbnz	r0, 3d58c <z_nrf_clock_control_lf_on+0x70>
	return !z_sys_post_kernel;
   3d556:	4b1d      	ldr	r3, [pc, #116]	; (3d5cc <z_nrf_clock_control_lf_on+0xb0>)
   3d558:	781b      	ldrb	r3, [r3, #0]
   3d55a:	b1bb      	cbz	r3, 3d58c <z_nrf_clock_control_lf_on+0x70>
    p_reg->INTENCLR = mask;
   3d55c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3d560:	2202      	movs	r2, #2
   3d562:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   3d566:	4605      	mov	r5, r0
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   3d568:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
   3d56c:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   3d570:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
   3d574:	03d2      	lsls	r2, r2, #15
   3d576:	d513      	bpl.n	3d5a0 <z_nrf_clock_control_lf_on+0x84>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   3d578:	079b      	lsls	r3, r3, #30
   3d57a:	d001      	beq.n	3d580 <z_nrf_clock_control_lf_on+0x64>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   3d57c:	2e01      	cmp	r6, #1
   3d57e:	d10f      	bne.n	3d5a0 <z_nrf_clock_control_lf_on+0x84>
	if (isr_mode) {
   3d580:	b1c4      	cbz	r4, 3d5b4 <z_nrf_clock_control_lf_on+0x98>
   3d582:	f385 8811 	msr	BASEPRI, r5
   3d586:	f3bf 8f6f 	isb	sy
}
   3d58a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
   3d58c:	f04f 0320 	mov.w	r3, #32
   3d590:	f3ef 8511 	mrs	r5, BASEPRI
   3d594:	f383 8812 	msr	BASEPRI_MAX, r3
   3d598:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   3d59c:	2401      	movs	r4, #1
   3d59e:	e7e3      	b.n	3d568 <z_nrf_clock_control_lf_on+0x4c>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   3d5a0:	b11c      	cbz	r4, 3d5aa <z_nrf_clock_control_lf_on+0x8e>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   3d5a2:	4628      	mov	r0, r5
   3d5a4:	f7ec fe9e 	bl	2a2e4 <arch_cpu_atomic_idle>
}
   3d5a8:	e7e0      	b.n	3d56c <z_nrf_clock_control_lf_on+0x50>
	return z_impl_k_sleep(timeout);
   3d5aa:	2100      	movs	r1, #0
   3d5ac:	2021      	movs	r0, #33	; 0x21
   3d5ae:	f003 ffe7 	bl	41580 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   3d5b2:	e7db      	b.n	3d56c <z_nrf_clock_control_lf_on+0x50>
    p_reg->INTENSET = mask;
   3d5b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3d5b8:	2202      	movs	r2, #2
   3d5ba:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   3d5be:	e7e4      	b.n	3d58a <z_nrf_clock_control_lf_on+0x6e>
   3d5c0:	20003564 	.word	0x20003564
   3d5c4:	20003554 	.word	0x20003554
   3d5c8:	20003584 	.word	0x20003584
   3d5cc:	20003b25 	.word	0x20003b25

0003d5d0 <start_cal_process>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   3d5d0:	4b0d      	ldr	r3, [pc, #52]	; (3d608 <start_cal_process+0x38>)
   3d5d2:	f3bf 8f5b 	dmb	ish
   3d5d6:	2201      	movs	r2, #1
   3d5d8:	e853 1f00 	ldrex	r1, [r3]
   3d5dc:	2900      	cmp	r1, #0
   3d5de:	d103      	bne.n	3d5e8 <start_cal_process+0x18>
   3d5e0:	e843 2000 	strex	r0, r2, [r3]
   3d5e4:	2800      	cmp	r0, #0
   3d5e6:	d1f7      	bne.n	3d5d8 <start_cal_process+0x8>
   3d5e8:	f3bf 8f5b 	dmb	ish
	cal_process_in_progress = 0;
}

static void start_cal_process(void)
{
	if (atomic_cas(&cal_process_in_progress, 0, 1) == false) {
   3d5ec:	d10a      	bne.n	3d604 <start_cal_process+0x34>
	*notify = (struct sys_notify){
   3d5ee:	4907      	ldr	r1, [pc, #28]	; (3d60c <start_cal_process+0x3c>)
   3d5f0:	2300      	movs	r3, #0
   3d5f2:	60cb      	str	r3, [r1, #12]
   3d5f4:	4b06      	ldr	r3, [pc, #24]	; (3d610 <start_cal_process+0x40>)
   3d5f6:	604b      	str	r3, [r1, #4]
   3d5f8:	2303      	movs	r3, #3
   3d5fa:	608b      	str	r3, [r1, #8]
	err = onoff_request(mgr, cli);
   3d5fc:	4b05      	ldr	r3, [pc, #20]	; (3d614 <start_cal_process+0x44>)
   3d5fe:	6818      	ldr	r0, [r3, #0]
   3d600:	f004 bd7a 	b.w	420f8 <onoff_request>
		 * will be released at the end of calibration process and
		 * stopped in consequence.
		 */
		lf_request();
	}
}
   3d604:	4770      	bx	lr
   3d606:	bf00      	nop
   3d608:	200035d8 	.word	0x200035d8
   3d60c:	200035c0 	.word	0x200035c0
   3d610:	0003d6d9 	.word	0x0003d6d9
   3d614:	200035bc 	.word	0x200035bc

0003d618 <start_cycle>:
{
   3d618:	b507      	push	{r0, r1, r2, lr}
	z_impl_k_timer_start(timer, duration, period);
   3d61a:	2200      	movs	r2, #0
   3d61c:	2300      	movs	r3, #0
   3d61e:	e9cd 2300 	strd	r2, r3, [sp]
   3d622:	4808      	ldr	r0, [pc, #32]	; (3d644 <start_cycle+0x2c>)
   3d624:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   3d628:	2300      	movs	r3, #0
   3d62a:	f004 f9ff 	bl	41a2c <z_impl_k_timer_start>
	clk_release(&mgrs[CLOCK_CONTROL_NRF_TYPE_HFCLK]);
   3d62e:	4b06      	ldr	r3, [pc, #24]	; (3d648 <start_cycle+0x30>)
	err = onoff_release(mgr);
   3d630:	6818      	ldr	r0, [r3, #0]
   3d632:	f004 fdb9 	bl	421a8 <onoff_release>
	cal_process_in_progress = 0;
   3d636:	4b05      	ldr	r3, [pc, #20]	; (3d64c <start_cycle+0x34>)
   3d638:	2200      	movs	r2, #0
   3d63a:	601a      	str	r2, [r3, #0]
}
   3d63c:	b003      	add	sp, #12
   3d63e:	f85d fb04 	ldr.w	pc, [sp], #4
   3d642:	bf00      	nop
   3d644:	20000bc0 	.word	0x20000bc0
   3d648:	200035bc 	.word	0x200035bc
   3d64c:	200035d8 	.word	0x200035d8

0003d650 <measure_temperature>:
/* Function determines if calibration should be performed based on temperature
 * measurement. Function is called from system work queue context. It is
 * reading temperature from TEMP sensor and compares with last measurement.
 */
static void measure_temperature(struct k_work *work)
{
   3d650:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
   3d652:	4e1c      	ldr	r6, [pc, #112]	; (3d6c4 <measure_temperature+0x74>)
   3d654:	4c1c      	ldr	r4, [pc, #112]	; (3d6c8 <measure_temperature+0x78>)
   3d656:	68b7      	ldr	r7, [r6, #8]
   3d658:	4d1c      	ldr	r5, [pc, #112]	; (3d6cc <measure_temperature+0x7c>)
   3d65a:	68fb      	ldr	r3, [r7, #12]
   3d65c:	2139      	movs	r1, #57	; 0x39
   3d65e:	4630      	mov	r0, r6
   3d660:	4798      	blx	r3
	if (rc == 0) {
   3d662:	b140      	cbz	r0, 3d676 <measure_temperature+0x26>

	rc = get_temperature(&temperature);

	if (rc != 0) {
		/* Temperature read failed, force calibration. */
		calib_skip_cnt = 0;
   3d664:	2300      	movs	r3, #0
   3d666:	7023      	strb	r3, [r4, #0]
		diff = abs(temperature - prev_temperature);
	}

	if ((calib_skip_cnt == 0) ||
		(diff >= CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_TEMP_DIFF)) {
		prev_temperature = temperature;
   3d668:	802b      	strh	r3, [r5, #0]
	nrfx_clock_calibration_start();
   3d66a:	f001 f99b 	bl	3e9a4 <nrfx_clock_calibration_start>
	calib_skip_cnt = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP;
   3d66e:	2301      	movs	r3, #1
   3d670:	7023      	strb	r3, [r4, #0]
		start_cycle();
	}

	LOG_DBG("Calibration %s. Temperature diff: %d (in 0.25'C units).",
			started ? "started" : "skipped", diff);
}
   3d672:	b003      	add	sp, #12
   3d674:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return api->channel_get(dev, chan, val);
   3d676:	210c      	movs	r1, #12
   3d678:	693b      	ldr	r3, [r7, #16]
   3d67a:	466a      	mov	r2, sp
   3d67c:	4630      	mov	r0, r6
   3d67e:	4798      	blx	r3
	if (rc == 0) {
   3d680:	2800      	cmp	r0, #0
   3d682:	d1ef      	bne.n	3d664 <measure_temperature+0x14>
	return (int16_t)(4 * val->val1 + val->val2 / 250000);
   3d684:	4a12      	ldr	r2, [pc, #72]	; (3d6d0 <measure_temperature+0x80>)
   3d686:	9b01      	ldr	r3, [sp, #4]
   3d688:	fb93 f3f2 	sdiv	r3, r3, r2
   3d68c:	9a00      	ldr	r2, [sp, #0]
	if ((calib_skip_cnt == 0) ||
   3d68e:	7821      	ldrb	r1, [r4, #0]
	return (int16_t)(4 * val->val1 + val->val2 / 250000);
   3d690:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   3d694:	b21b      	sxth	r3, r3
		diff = abs(temperature - prev_temperature);
   3d696:	f9b5 2000 	ldrsh.w	r2, [r5]
	if ((calib_skip_cnt == 0) ||
   3d69a:	2900      	cmp	r1, #0
   3d69c:	d0e4      	beq.n	3d668 <measure_temperature+0x18>
		diff = abs(temperature - prev_temperature);
   3d69e:	1a9a      	subs	r2, r3, r2
void srand(unsigned int seed);
#endif /* CONFIG_MINIMAL_LIBC_RAND */

static inline int abs(int __n)
{
	return (__n < 0) ? -__n : __n;
   3d6a0:	2a00      	cmp	r2, #0
   3d6a2:	bfb8      	it	lt
   3d6a4:	4252      	neglt	r2, r2
	if ((calib_skip_cnt == 0) ||
   3d6a6:	b212      	sxth	r2, r2
   3d6a8:	2a01      	cmp	r2, #1
   3d6aa:	dcdd      	bgt.n	3d668 <measure_temperature+0x18>
		total_skips_cnt++;
   3d6ac:	4a09      	ldr	r2, [pc, #36]	; (3d6d4 <measure_temperature+0x84>)
   3d6ae:	6813      	ldr	r3, [r2, #0]
		calib_skip_cnt--;
   3d6b0:	3901      	subs	r1, #1
		total_skips_cnt++;
   3d6b2:	3301      	adds	r3, #1
		calib_skip_cnt--;
   3d6b4:	7021      	strb	r1, [r4, #0]
		total_skips_cnt++;
   3d6b6:	6013      	str	r3, [r2, #0]
}
   3d6b8:	b003      	add	sp, #12
   3d6ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		start_cycle();
   3d6be:	f7ff bfab 	b.w	3d618 <start_cycle>
   3d6c2:	bf00      	nop
   3d6c4:	00048b20 	.word	0x00048b20
   3d6c8:	20003b1d 	.word	0x20003b1d
   3d6cc:	200039dc 	.word	0x200039dc
   3d6d0:	0003d090 	.word	0x0003d090
   3d6d4:	200035d0 	.word	0x200035d0

0003d6d8 <cal_hf_callback>:
{
   3d6d8:	b508      	push	{r3, lr}
   3d6da:	4807      	ldr	r0, [pc, #28]	; (3d6f8 <cal_hf_callback+0x20>)
   3d6dc:	f00a fb1c 	bl	47d18 <z_device_is_ready>
	if (!device_is_ready(temp_sensor)) {
   3d6e0:	b928      	cbnz	r0, 3d6ee <cal_hf_callback+0x16>
	nrfx_clock_calibration_start();
   3d6e2:	f001 f95f 	bl	3e9a4 <nrfx_clock_calibration_start>
	calib_skip_cnt = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP;
   3d6e6:	4b05      	ldr	r3, [pc, #20]	; (3d6fc <cal_hf_callback+0x24>)
   3d6e8:	2201      	movs	r2, #1
   3d6ea:	701a      	strb	r2, [r3, #0]
}
   3d6ec:	bd08      	pop	{r3, pc}
   3d6ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_work_submit(&temp_measure_work);
   3d6f2:	4803      	ldr	r0, [pc, #12]	; (3d700 <cal_hf_callback+0x28>)
   3d6f4:	f003 bbd6 	b.w	40ea4 <k_work_submit>
   3d6f8:	00048b20 	.word	0x00048b20
   3d6fc:	20003b1d 	.word	0x20003b1d
   3d700:	2000089c 	.word	0x2000089c

0003d704 <z_nrf_clock_calibration_init>:
#endif /* USE_TEMP_SENSOR */

void z_nrf_clock_calibration_init(struct onoff_manager *onoff_mgrs)
{
	mgrs = onoff_mgrs;
   3d704:	4b03      	ldr	r3, [pc, #12]	; (3d714 <z_nrf_clock_calibration_init+0x10>)
	total_cnt = 0;
   3d706:	4a04      	ldr	r2, [pc, #16]	; (3d718 <z_nrf_clock_calibration_init+0x14>)
	mgrs = onoff_mgrs;
   3d708:	6018      	str	r0, [r3, #0]
	total_cnt = 0;
   3d70a:	2300      	movs	r3, #0
   3d70c:	6013      	str	r3, [r2, #0]
	total_skips_cnt = 0;
   3d70e:	4a03      	ldr	r2, [pc, #12]	; (3d71c <z_nrf_clock_calibration_init+0x18>)
   3d710:	6013      	str	r3, [r2, #0]
}
   3d712:	4770      	bx	lr
   3d714:	200035bc 	.word	0x200035bc
   3d718:	200035d4 	.word	0x200035d4
   3d71c:	200035d0 	.word	0x200035d0

0003d720 <z_nrf_clock_calibration_lfclk_started>:

static void start_unconditional_cal_process(void)
{
	calib_skip_cnt = 0;
   3d720:	4b02      	ldr	r3, [pc, #8]	; (3d72c <z_nrf_clock_calibration_lfclk_started+0xc>)
   3d722:	2200      	movs	r2, #0
   3d724:	701a      	strb	r2, [r3, #0]
	start_cal_process();
   3d726:	f7ff bf53 	b.w	3d5d0 <start_cal_process>
   3d72a:	bf00      	nop
   3d72c:	20003b1d 	.word	0x20003b1d

0003d730 <z_nrf_clock_calibration_lfclk_stopped>:
	z_impl_k_timer_stop(timer);
   3d730:	4801      	ldr	r0, [pc, #4]	; (3d738 <z_nrf_clock_calibration_lfclk_stopped+0x8>)
   3d732:	f00a bf86 	b.w	48642 <z_impl_k_timer_stop>
   3d736:	bf00      	nop
   3d738:	20000bc0 	.word	0x20000bc0

0003d73c <z_nrf_clock_calibration_done_handler>:
	LOG_DBG("Calibration stopped");
}

void z_nrf_clock_calibration_done_handler(void)
{
	total_cnt++;
   3d73c:	4a02      	ldr	r2, [pc, #8]	; (3d748 <z_nrf_clock_calibration_done_handler+0xc>)
   3d73e:	6813      	ldr	r3, [r2, #0]
   3d740:	3301      	adds	r3, #1
   3d742:	6013      	str	r3, [r2, #0]
	LOG_DBG("Calibration done.");

	start_cycle();
   3d744:	f7ff bf68 	b.w	3d618 <start_cycle>
   3d748:	200035d4 	.word	0x200035d4

0003d74c <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   3d74c:	b530      	push	{r4, r5, lr}
	return port->config;
   3d74e:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   3d750:	7b05      	ldrb	r5, [r0, #12]
   3d752:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
   3d756:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   3d75a:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   3d75c:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   3d760:	d105      	bne.n	3d76e <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   3d762:	4620      	mov	r0, r4
   3d764:	f001 fbcc 	bl	3ef00 <nrfx_gpiote_trigger_disable>

		return 0;
   3d768:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
   3d76a:	b005      	add	sp, #20
   3d76c:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   3d76e:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   3d770:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   3d774:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   3d778:	d114      	bne.n	3d7a4 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   3d77a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   3d77e:	bf0c      	ite	eq
   3d780:	2304      	moveq	r3, #4
   3d782:	2305      	movne	r3, #5
   3d784:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   3d788:	2300      	movs	r3, #0
   3d78a:	4619      	mov	r1, r3
   3d78c:	aa02      	add	r2, sp, #8
   3d78e:	4620      	mov	r0, r4
   3d790:	f001 f9f4 	bl	3eb7c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   3d794:	4b1f      	ldr	r3, [pc, #124]	; (3d814 <gpio_nrfx_pin_interrupt_configure+0xc8>)
   3d796:	4298      	cmp	r0, r3
   3d798:	d139      	bne.n	3d80e <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   3d79a:	2101      	movs	r1, #1
   3d79c:	4620      	mov	r0, r4
   3d79e:	f001 fb67 	bl	3ee70 <nrfx_gpiote_trigger_enable>
	return 0;
   3d7a2:	e7e1      	b.n	3d768 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   3d7a4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   3d7a8:	d026      	beq.n	3d7f8 <gpio_nrfx_pin_interrupt_configure+0xac>
   3d7aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   3d7ae:	bf14      	ite	ne
   3d7b0:	2301      	movne	r3, #1
   3d7b2:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   3d7b4:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   3d7b8:	6883      	ldr	r3, [r0, #8]
   3d7ba:	40cb      	lsrs	r3, r1
   3d7bc:	07d9      	lsls	r1, r3, #31
   3d7be:	d4e3      	bmi.n	3d788 <gpio_nrfx_pin_interrupt_configure+0x3c>
   3d7c0:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   3d7c4:	d1e0      	bne.n	3d788 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   3d7c6:	0962      	lsrs	r2, r4, #5
        case 1: return NRF_P1;
   3d7c8:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   3d7ca:	f004 031f 	and.w	r3, r4, #31
        case 1: return NRF_P1;
   3d7ce:	4a12      	ldr	r2, [pc, #72]	; (3d818 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   3d7d0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   3d7d4:	bf18      	it	ne
   3d7d6:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   3d7da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   3d7de:	07db      	lsls	r3, r3, #31
   3d7e0:	d4d2      	bmi.n	3d788 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   3d7e2:	f10d 0507 	add.w	r5, sp, #7
   3d7e6:	4629      	mov	r1, r5
   3d7e8:	4620      	mov	r0, r4
   3d7ea:	f001 faed 	bl	3edc8 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   3d7ee:	4b0b      	ldr	r3, [pc, #44]	; (3d81c <gpio_nrfx_pin_interrupt_configure+0xd0>)
   3d7f0:	4298      	cmp	r0, r3
   3d7f2:	d003      	beq.n	3d7fc <gpio_nrfx_pin_interrupt_configure+0xb0>
		trigger_config.p_in_channel = &ch;
   3d7f4:	9503      	str	r5, [sp, #12]
   3d7f6:	e7c7      	b.n	3d788 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   3d7f8:	2303      	movs	r3, #3
   3d7fa:	e7db      	b.n	3d7b4 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
   3d7fc:	4628      	mov	r0, r5
   3d7fe:	f001 fb31 	bl	3ee64 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   3d802:	4b04      	ldr	r3, [pc, #16]	; (3d814 <gpio_nrfx_pin_interrupt_configure+0xc8>)
   3d804:	4298      	cmp	r0, r3
   3d806:	d0f5      	beq.n	3d7f4 <gpio_nrfx_pin_interrupt_configure+0xa8>
				return -ENOMEM;
   3d808:	f06f 000b 	mvn.w	r0, #11
   3d80c:	e7ad      	b.n	3d76a <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   3d80e:	f06f 0015 	mvn.w	r0, #21
   3d812:	e7aa      	b.n	3d76a <gpio_nrfx_pin_interrupt_configure+0x1e>
   3d814:	0bad0000 	.word	0x0bad0000
   3d818:	50000300 	.word	0x50000300
   3d81c:	0bad0004 	.word	0x0bad0004

0003d820 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   3d820:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   3d822:	f001 fb0f 	bl	3ee44 <nrfx_gpiote_is_init>
   3d826:	4604      	mov	r4, r0
   3d828:	b968      	cbnz	r0, 3d846 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   3d82a:	f001 fae3 	bl	3edf4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   3d82e:	4b08      	ldr	r3, [pc, #32]	; (3d850 <gpio_nrfx_init+0x30>)
   3d830:	4298      	cmp	r0, r3
   3d832:	d10a      	bne.n	3d84a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   3d834:	4807      	ldr	r0, [pc, #28]	; (3d854 <gpio_nrfx_init+0x34>)
   3d836:	4621      	mov	r1, r4
   3d838:	f001 fac0 	bl	3edbc <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   3d83c:	4622      	mov	r2, r4
   3d83e:	2105      	movs	r1, #5
   3d840:	2006      	movs	r0, #6
   3d842:	f7ec fd89 	bl	2a358 <z_arm_irq_priority_set>
		return 0;
   3d846:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   3d848:	bd10      	pop	{r4, pc}
		return -EIO;
   3d84a:	f06f 0004 	mvn.w	r0, #4
   3d84e:	e7fb      	b.n	3d848 <gpio_nrfx_init+0x28>
   3d850:	0bad0000 	.word	0x0bad0000
   3d854:	0003d859 	.word	0x0003d859

0003d858 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   3d858:	0942      	lsrs	r2, r0, #5
{
   3d85a:	b570      	push	{r4, r5, r6, lr}
   3d85c:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   3d85e:	d002      	beq.n	3d866 <nrfx_gpio_handler+0xe>
   3d860:	2a01      	cmp	r2, #1
   3d862:	d017      	beq.n	3d894 <nrfx_gpio_handler+0x3c>
}
   3d864:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   3d866:	4e0d      	ldr	r6, [pc, #52]	; (3d89c <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
   3d868:	6932      	ldr	r2, [r6, #16]
   3d86a:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   3d86c:	2900      	cmp	r1, #0
   3d86e:	d0f9      	beq.n	3d864 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
   3d870:	f003 031f 	and.w	r3, r3, #31
   3d874:	2501      	movs	r5, #1
   3d876:	680c      	ldr	r4, [r1, #0]
   3d878:	409d      	lsls	r5, r3
   3d87a:	2900      	cmp	r1, #0
   3d87c:	d0f2      	beq.n	3d864 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   3d87e:	688a      	ldr	r2, [r1, #8]
   3d880:	402a      	ands	r2, r5
   3d882:	d002      	beq.n	3d88a <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   3d884:	684b      	ldr	r3, [r1, #4]
   3d886:	4630      	mov	r0, r6
   3d888:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   3d88a:	b12c      	cbz	r4, 3d898 <nrfx_gpio_handler+0x40>
   3d88c:	6823      	ldr	r3, [r4, #0]
   3d88e:	4621      	mov	r1, r4
   3d890:	461c      	mov	r4, r3
   3d892:	e7f2      	b.n	3d87a <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   3d894:	4e02      	ldr	r6, [pc, #8]	; (3d8a0 <nrfx_gpio_handler+0x48>)
   3d896:	e7e7      	b.n	3d868 <nrfx_gpio_handler+0x10>
   3d898:	4623      	mov	r3, r4
   3d89a:	e7f8      	b.n	3d88e <nrfx_gpio_handler+0x36>
   3d89c:	00048a90 	.word	0x00048a90
   3d8a0:	00048a78 	.word	0x00048a78

0003d8a4 <gpio_nrfx_pin_configure>:
{
   3d8a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   3d8a8:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   3d8aa:	7b3b      	ldrb	r3, [r7, #12]
   3d8ac:	f001 051f 	and.w	r5, r1, #31
   3d8b0:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   3d8b4:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   3d8b6:	4628      	mov	r0, r5
   3d8b8:	f10d 0103 	add.w	r1, sp, #3
{
   3d8bc:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   3d8be:	f001 fa83 	bl	3edc8 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   3d8c2:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   3d8c6:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   3d8c8:	d10b      	bne.n	3d8e2 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   3d8ca:	4628      	mov	r0, r5
   3d8cc:	f001 fb40 	bl	3ef50 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   3d8d0:	4b3d      	ldr	r3, [pc, #244]	; (3d9c8 <gpio_nrfx_pin_configure+0x124>)
   3d8d2:	4598      	cmp	r8, r3
   3d8d4:	d103      	bne.n	3d8de <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
   3d8d6:	f89d 0003 	ldrb.w	r0, [sp, #3]
   3d8da:	f001 fabd 	bl	3ee58 <nrfx_gpiote_channel_free>
		return 0;
   3d8de:	2000      	movs	r0, #0
   3d8e0:	e00c      	b.n	3d8fc <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
   3d8e2:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   3d8e4:	4619      	mov	r1, r3
   3d8e6:	aa02      	add	r2, sp, #8
   3d8e8:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
   3d8ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   3d8ee:	f001 f945 	bl	3eb7c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   3d8f2:	4b35      	ldr	r3, [pc, #212]	; (3d9c8 <gpio_nrfx_pin_configure+0x124>)
   3d8f4:	4298      	cmp	r0, r3
   3d8f6:	d004      	beq.n	3d902 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
   3d8f8:	f06f 0015 	mvn.w	r0, #21
}
   3d8fc:	b004      	add	sp, #16
   3d8fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   3d902:	4580      	cmp	r8, r0
   3d904:	d103      	bne.n	3d90e <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
   3d906:	f89d 0003 	ldrb.w	r0, [sp, #3]
   3d90a:	f001 faa5 	bl	3ee58 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   3d90e:	03a3      	lsls	r3, r4, #14
   3d910:	d54b      	bpl.n	3d9aa <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   3d912:	f240 3306 	movw	r3, #774	; 0x306
   3d916:	4023      	ands	r3, r4
   3d918:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   3d91c:	d019      	beq.n	3d952 <gpio_nrfx_pin_configure+0xae>
   3d91e:	d80c      	bhi.n	3d93a <gpio_nrfx_pin_configure+0x96>
   3d920:	2b06      	cmp	r3, #6
   3d922:	d017      	beq.n	3d954 <gpio_nrfx_pin_configure+0xb0>
   3d924:	d804      	bhi.n	3d930 <gpio_nrfx_pin_configure+0x8c>
   3d926:	b1ab      	cbz	r3, 3d954 <gpio_nrfx_pin_configure+0xb0>
   3d928:	2b02      	cmp	r3, #2
   3d92a:	d1e5      	bne.n	3d8f8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
   3d92c:	2304      	movs	r3, #4
   3d92e:	e011      	b.n	3d954 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   3d930:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   3d934:	d1e0      	bne.n	3d8f8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
   3d936:	2301      	movs	r3, #1
   3d938:	e00c      	b.n	3d954 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   3d93a:	f240 2202 	movw	r2, #514	; 0x202
   3d93e:	4293      	cmp	r3, r2
   3d940:	d027      	beq.n	3d992 <gpio_nrfx_pin_configure+0xee>
   3d942:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   3d946:	d026      	beq.n	3d996 <gpio_nrfx_pin_configure+0xf2>
   3d948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   3d94c:	d1d4      	bne.n	3d8f8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
   3d94e:	2302      	movs	r3, #2
   3d950:	e000      	b.n	3d954 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
   3d952:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   3d954:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   3d958:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   3d95c:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   3d960:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   3d962:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
   3d966:	bf54      	ite	pl
   3d968:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   3d96c:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   3d96e:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   3d970:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   3d974:	d511      	bpl.n	3d99a <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   3d976:	687a      	ldr	r2, [r7, #4]
   3d978:	2301      	movs	r3, #1
   3d97a:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   3d97c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   3d980:	2200      	movs	r2, #0
   3d982:	a901      	add	r1, sp, #4
   3d984:	4628      	mov	r0, r5
   3d986:	f001 f9a7 	bl	3ecd8 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   3d98a:	4b0f      	ldr	r3, [pc, #60]	; (3d9c8 <gpio_nrfx_pin_configure+0x124>)
   3d98c:	4298      	cmp	r0, r3
   3d98e:	d0a6      	beq.n	3d8de <gpio_nrfx_pin_configure+0x3a>
   3d990:	e7b2      	b.n	3d8f8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
   3d992:	2305      	movs	r3, #5
   3d994:	e7de      	b.n	3d954 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   3d996:	2303      	movs	r3, #3
   3d998:	e7dc      	b.n	3d954 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   3d99a:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   3d99c:	bf41      	itttt	mi
   3d99e:	2301      	movmi	r3, #1
   3d9a0:	687a      	ldrmi	r2, [r7, #4]
   3d9a2:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
   3d9a4:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
   3d9a8:	e7ea      	b.n	3d980 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
   3d9aa:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   3d9ac:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
   3d9b0:	bf54      	ite	pl
   3d9b2:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   3d9b6:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   3d9b8:	461a      	mov	r2, r3
   3d9ba:	a901      	add	r1, sp, #4
   3d9bc:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   3d9be:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   3d9c2:	f001 f8db 	bl	3eb7c <nrfx_gpiote_input_configure>
   3d9c6:	e7e0      	b.n	3d98a <gpio_nrfx_pin_configure+0xe6>
   3d9c8:	0bad0000 	.word	0x0bad0000

0003d9cc <hfclk_on_callback>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_temp_task_trigger(NRF_TEMP_Type * p_reg, nrf_temp_task_t task)
{
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
   3d9cc:	4b01      	ldr	r3, [pc, #4]	; (3d9d4 <hfclk_on_callback+0x8>)
   3d9ce:	2201      	movs	r2, #1
   3d9d0:	601a      	str	r2, [r3, #0]
			      struct onoff_client *cli,
			      uint32_t state,
			      int res)
{
	nrf_temp_task_trigger(NRF_TEMP, NRF_TEMP_TASK_START);
}
   3d9d2:	4770      	bx	lr
   3d9d4:	4000c000 	.word	0x4000c000

0003d9d8 <temp_nrf5_channel_get>:
{
	struct temp_nrf5_data *data = dev->data;
	int32_t uval;


	if (chan != SENSOR_CHAN_DIE_TEMP) {
   3d9d8:	290c      	cmp	r1, #12
	struct temp_nrf5_data *data = dev->data;
   3d9da:	6903      	ldr	r3, [r0, #16]
	if (chan != SENSOR_CHAN_DIE_TEMP) {
   3d9dc:	d10b      	bne.n	3d9f6 <temp_nrf5_channel_get+0x1e>
		return -ENOTSUP;
	}

	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
   3d9de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   3d9e0:	4906      	ldr	r1, [pc, #24]	; (3d9fc <temp_nrf5_channel_get+0x24>)
	val->val1 = uval / 1000000;
   3d9e2:	4807      	ldr	r0, [pc, #28]	; (3da00 <temp_nrf5_channel_get+0x28>)
	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
   3d9e4:	434b      	muls	r3, r1
	val->val1 = uval / 1000000;
   3d9e6:	fb93 f1f0 	sdiv	r1, r3, r0
	val->val2 = uval % 1000000;
   3d9ea:	fb00 3311 	mls	r3, r0, r1, r3
	val->val1 = uval / 1000000;
   3d9ee:	6011      	str	r1, [r2, #0]
	val->val2 = uval % 1000000;
   3d9f0:	6053      	str	r3, [r2, #4]

	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);

	return 0;
   3d9f2:	2000      	movs	r0, #0
   3d9f4:	4770      	bx	lr
		return -ENOTSUP;
   3d9f6:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   3d9fa:	4770      	bx	lr
   3d9fc:	0003d090 	.word	0x0003d090
   3da00:	000f4240 	.word	0x000f4240

0003da04 <temp_nrf5_isr>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_temp_event_clear(NRF_TEMP_Type * p_reg, nrf_temp_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   3da04:	4b04      	ldr	r3, [pc, #16]	; (3da18 <temp_nrf5_isr+0x14>)

static void temp_nrf5_isr(void *arg)
{
	const struct device *dev = (const struct device *)arg;
	struct temp_nrf5_data *data = dev->data;
   3da06:	6900      	ldr	r0, [r0, #16]
   3da08:	2200      	movs	r2, #0
   3da0a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   3da0e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
	z_impl_k_sem_give(sem);
   3da12:	f003 b8a9 	b.w	40b68 <z_impl_k_sem_give>
   3da16:	bf00      	nop
   3da18:	4000c000 	.word	0x4000c000

0003da1c <temp_nrf5_sample_fetch>:
{
   3da1c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct temp_nrf5_data *data = dev->data;
   3da1e:	6905      	ldr	r5, [r0, #16]
	if (data->clk_mgr == NULL) {
   3da20:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   3da22:	b363      	cbz	r3, 3da7e <temp_nrf5_sample_fetch+0x62>
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
   3da24:	2939      	cmp	r1, #57	; 0x39
   3da26:	d001      	beq.n	3da2c <temp_nrf5_sample_fetch+0x10>
   3da28:	290c      	cmp	r1, #12
   3da2a:	d12b      	bne.n	3da84 <temp_nrf5_sample_fetch+0x68>
	k_mutex_lock(&data->mutex, K_FOREVER);
   3da2c:	f105 0618 	add.w	r6, r5, #24
	return z_impl_k_mutex_lock(mutex, timeout);
   3da30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3da34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3da38:	4630      	mov	r0, r6
   3da3a:	f002 ffab 	bl	40994 <z_impl_k_mutex_lock>
   3da3e:	4b13      	ldr	r3, [pc, #76]	; (3da8c <temp_nrf5_sample_fetch+0x70>)
   3da40:	9301      	str	r3, [sp, #4]
	r = onoff_request(data->clk_mgr, &cli);
   3da42:	6b28      	ldr	r0, [r5, #48]	; 0x30
   3da44:	2303      	movs	r3, #3
   3da46:	2400      	movs	r4, #0
   3da48:	4669      	mov	r1, sp
   3da4a:	9403      	str	r4, [sp, #12]
   3da4c:	9302      	str	r3, [sp, #8]
   3da4e:	f004 fb53 	bl	420f8 <onoff_request>
	return z_impl_k_sem_take(sem, timeout);
   3da52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3da56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3da5a:	4628      	mov	r0, r5
   3da5c:	f003 f8aa 	bl	40bb4 <z_impl_k_sem_take>
	r = onoff_release(data->clk_mgr);
   3da60:	6b28      	ldr	r0, [r5, #48]	; 0x30
   3da62:	f004 fba1 	bl	421a8 <onoff_release>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
}

NRF_STATIC_INLINE int32_t nrf_temp_result_get(NRF_TEMP_Type const * p_reg)
{
    int32_t raw_measurement = p_reg->TEMP;
   3da66:	4b0a      	ldr	r3, [pc, #40]	; (3da90 <temp_nrf5_sample_fetch+0x74>)
   3da68:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
	data->sample = nrf_temp_result_get(NRF_TEMP);
   3da6c:	62ea      	str	r2, [r5, #44]	; 0x2c
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
   3da6e:	2201      	movs	r2, #1
   3da70:	605a      	str	r2, [r3, #4]
	return z_impl_k_mutex_unlock(mutex);
   3da72:	4630      	mov	r0, r6
   3da74:	f003 f808 	bl	40a88 <z_impl_k_mutex_unlock>
	return 0;
   3da78:	4620      	mov	r0, r4
}
   3da7a:	b004      	add	sp, #16
   3da7c:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   3da7e:	f06f 000a 	mvn.w	r0, #10
   3da82:	e7fa      	b.n	3da7a <temp_nrf5_sample_fetch+0x5e>
		return -ENOTSUP;
   3da84:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3da88:	e7f7      	b.n	3da7a <temp_nrf5_sample_fetch+0x5e>
   3da8a:	bf00      	nop
   3da8c:	0003d9cd 	.word	0x0003d9cd
   3da90:	4000c000 	.word	0x4000c000

0003da94 <temp_nrf5_init>:
	.sample_fetch = temp_nrf5_sample_fetch,
	.channel_get = temp_nrf5_channel_get,
};

static int temp_nrf5_init(const struct device *dev)
{
   3da94:	b510      	push	{r4, lr}
	struct temp_nrf5_data *data = dev->data;
   3da96:	6904      	ldr	r4, [r0, #16]

	/* A null clk_mgr indicates sensor has not been initialized */
	data->clk_mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
   3da98:	2000      	movs	r0, #0
   3da9a:	f7ff fd0b 	bl	3d4b4 <z_nrf_clock_control_get_onoff>
	data->clk_mgr =
   3da9e:	6320      	str	r0, [r4, #48]	; 0x30
	return z_impl_k_sem_init(sem, initial_count, limit);
   3daa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3daa4:	2100      	movs	r1, #0
   3daa6:	4620      	mov	r0, r4
   3daa8:	f00a fb2f 	bl	4810a <z_impl_k_sem_init>
	return z_impl_k_mutex_init(mutex);
   3daac:	f104 0018 	add.w	r0, r4, #24
   3dab0:	f00a fa32 	bl	47f18 <z_impl_k_mutex_init>
	__ASSERT_NO_MSG(data->clk_mgr);

	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	k_mutex_init(&data->mutex);

	IRQ_CONNECT(
   3dab4:	2200      	movs	r2, #0
   3dab6:	2101      	movs	r1, #1
   3dab8:	200c      	movs	r0, #12
   3daba:	f7ec fc4d 	bl	2a358 <z_arm_irq_priority_set>
		DT_INST_IRQN(0),
		DT_INST_IRQ(0, priority),
		temp_nrf5_isr,
		DEVICE_DT_INST_GET(0),
		0);
	irq_enable(DT_INST_IRQN(0));
   3dabe:	200c      	movs	r0, #12
   3dac0:	f7ec fc1a 	bl	2a2f8 <arch_irq_enable>
    p_reg->INTENSET = mask;
   3dac4:	4b02      	ldr	r3, [pc, #8]	; (3dad0 <temp_nrf5_init+0x3c>)
   3dac6:	2201      	movs	r2, #1
   3dac8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_temp_int_enable(NRF_TEMP, NRF_TEMP_INT_DATARDY_MASK);

	return 0;
}
   3dacc:	2000      	movs	r0, #0
   3dace:	bd10      	pop	{r4, pc}
   3dad0:	4000c000 	.word	0x4000c000

0003dad4 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   3dad4:	4b02      	ldr	r3, [pc, #8]	; (3dae0 <flash_nrf_pages_layout+0xc>)
   3dad6:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   3dad8:	2301      	movs	r3, #1
   3dada:	6013      	str	r3, [r2, #0]
}
   3dadc:	4770      	bx	lr
   3dade:	bf00      	nop
   3dae0:	20003628 	.word	0x20003628

0003dae4 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   3dae4:	4800      	ldr	r0, [pc, #0]	; (3dae8 <flash_nrf_get_parameters+0x4>)
   3dae6:	4770      	bx	lr
   3dae8:	0004a3cc 	.word	0x0004a3cc

0003daec <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   3daec:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   3daee:	2201      	movs	r2, #1
   3daf0:	4611      	mov	r1, r2
   3daf2:	4807      	ldr	r0, [pc, #28]	; (3db10 <nrf_flash_init+0x24>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   3daf4:	4c07      	ldr	r4, [pc, #28]	; (3db14 <nrf_flash_init+0x28>)
   3daf6:	f00a fb08 	bl	4810a <z_impl_k_sem_init>
	nrf_flash_sync_init();
   3dafa:	f000 f9d9 	bl	3deb0 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   3dafe:	f009 fe3a 	bl	47776 <nrfx_nvmc_flash_page_count_get>
   3db02:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   3db04:	f009 fe33 	bl	4776e <nrfx_nvmc_flash_page_size_get>
   3db08:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   3db0a:	2000      	movs	r0, #0
   3db0c:	bd10      	pop	{r4, pc}
   3db0e:	bf00      	nop
   3db10:	20003630 	.word	0x20003630
   3db14:	20003628 	.word	0x20003628

0003db18 <restore_pofwarn.part.0>:
    uint32_t pofcon = p_reg->POFCON;
   3db18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   3db1c:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    uint32_t pofcon = p_reg->POFCON;
   3db20:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   3db24:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   3db28:	f023 031f 	bic.w	r3, r3, #31
   3db2c:	430b      	orrs	r3, r1
    pofcon |=
   3db2e:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   3db32:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

	if (pofcon_enabled) {
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
		pofcon_enabled = false;
   3db36:	4b02      	ldr	r3, [pc, #8]	; (3db40 <restore_pofwarn.part.0+0x28>)
   3db38:	2200      	movs	r2, #0
   3db3a:	701a      	strb	r2, [r3, #0]
	}
}
   3db3c:	4770      	bx	lr
   3db3e:	bf00      	nop
   3db40:	20003b1e 	.word	0x20003b1e

0003db44 <suspend_pofwarn>:
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   3db44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   3db48:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   3db4c:	2b08      	cmp	r3, #8
   3db4e:	d120      	bne.n	3db92 <suspend_pofwarn+0x4e>
    uint32_t pofcon = p_reg->POFCON;
   3db50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   3db54:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
	if (enabled) {
   3db58:	07cb      	lsls	r3, r1, #31
   3db5a:	d51a      	bpl.n	3db92 <suspend_pofwarn+0x4e>
    uint32_t pofcon = p_reg->POFCON;
   3db5c:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   3db60:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   3db64:	f023 031f 	bic.w	r3, r3, #31
    pofcon |=
   3db68:	430b      	orrs	r3, r1
    p_reg->POFCON = pofcon;
   3db6a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3db6e:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
   3db72:	b15b      	cbz	r3, 3db8c <suspend_pofwarn+0x48>
    uint32_t pofcon = p_reg->POFCON;
   3db74:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   3db78:	f023 031f 	bic.w	r3, r3, #31
   3db7c:	430b      	orrs	r3, r1
    pofcon |=
   3db7e:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   3db82:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			return -ECANCELED;
   3db86:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   3db8a:	4770      	bx	lr
		pofcon_enabled = enabled;
   3db8c:	4b02      	ldr	r3, [pc, #8]	; (3db98 <suspend_pofwarn+0x54>)
   3db8e:	2201      	movs	r2, #1
   3db90:	701a      	strb	r2, [r3, #0]
		return 0;
   3db92:	2000      	movs	r0, #0
}
   3db94:	4770      	bx	lr
   3db96:	bf00      	nop
   3db98:	20003b1e 	.word	0x20003b1e

0003db9c <erase_op>:
{
   3db9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3db9e:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   3dba0:	f009 fde5 	bl	4776e <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   3dba4:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   3dba6:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   3dba8:	b10b      	cbz	r3, 3dbae <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   3dbaa:	f000 f993 	bl	3ded4 <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   3dbae:	4f13      	ldr	r7, [pc, #76]	; (3dbfc <erase_op+0x60>)
{
   3dbb0:	2600      	movs	r6, #0
		if (SUSPEND_POFWARN()) {
   3dbb2:	f7ff ffc7 	bl	3db44 <suspend_pofwarn>
   3dbb6:	b9e8      	cbnz	r0, 3dbf4 <erase_op+0x58>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   3dbb8:	6860      	ldr	r0, [r4, #4]
   3dbba:	f001 fad7 	bl	3f16c <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   3dbbe:	68a3      	ldr	r3, [r4, #8]
   3dbc0:	1b5b      	subs	r3, r3, r5
   3dbc2:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   3dbc4:	6863      	ldr	r3, [r4, #4]
   3dbc6:	442b      	add	r3, r5
   3dbc8:	6063      	str	r3, [r4, #4]
	if (pofcon_enabled) {
   3dbca:	783b      	ldrb	r3, [r7, #0]
   3dbcc:	b10b      	cbz	r3, 3dbd2 <erase_op+0x36>
   3dbce:	f7ff ffa3 	bl	3db18 <restore_pofwarn.part.0>
		if (e_ctx->enable_time_limit) {
   3dbd2:	7b23      	ldrb	r3, [r4, #12]
		i++;
   3dbd4:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   3dbd6:	b93b      	cbnz	r3, 3dbe8 <erase_op+0x4c>
	} while (e_ctx->len > 0);
   3dbd8:	68a3      	ldr	r3, [r4, #8]
   3dbda:	2b00      	cmp	r3, #0
   3dbdc:	d1e9      	bne.n	3dbb2 <erase_op+0x16>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   3dbde:	68a0      	ldr	r0, [r4, #8]
   3dbe0:	3800      	subs	r0, #0
   3dbe2:	bf18      	it	ne
   3dbe4:	2001      	movne	r0, #1
}
   3dbe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   3dbe8:	4630      	mov	r0, r6
   3dbea:	f7e9 fdc9 	bl	27780 <nrf_flash_sync_check_time_limit>
   3dbee:	2800      	cmp	r0, #0
   3dbf0:	d0f2      	beq.n	3dbd8 <erase_op+0x3c>
   3dbf2:	e7f4      	b.n	3dbde <erase_op+0x42>
			return -ECANCELED;
   3dbf4:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   3dbf8:	e7f5      	b.n	3dbe6 <erase_op+0x4a>
   3dbfa:	bf00      	nop
   3dbfc:	20003b1e 	.word	0x20003b1e

0003dc00 <flash_nrf_erase>:
{
   3dc00:	b5f0      	push	{r4, r5, r6, r7, lr}
   3dc02:	b087      	sub	sp, #28
   3dc04:	460e      	mov	r6, r1
   3dc06:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   3dc08:	f009 fdb1 	bl	4776e <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   3dc0c:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   3dc0e:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   3dc10:	4630      	mov	r0, r6
   3dc12:	f009 fc76 	bl	47502 <is_regular_addr_valid>
   3dc16:	b3c8      	cbz	r0, 3dc8c <flash_nrf_erase+0x8c>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   3dc18:	fbb6 f3f7 	udiv	r3, r6, r7
   3dc1c:	fb07 6313 	mls	r3, r7, r3, r6
   3dc20:	bba3      	cbnz	r3, 3dc8c <flash_nrf_erase+0x8c>
   3dc22:	fbb5 f4f7 	udiv	r4, r5, r7
   3dc26:	fb07 5414 	mls	r4, r7, r4, r5
   3dc2a:	bb7c      	cbnz	r4, 3dc8c <flash_nrf_erase+0x8c>
		if (!n_pages) {
   3dc2c:	42bd      	cmp	r5, r7
   3dc2e:	d322      	bcc.n	3dc76 <flash_nrf_erase+0x76>
	return z_impl_k_sem_take(sem, timeout);
   3dc30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3dc34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3dc38:	4816      	ldr	r0, [pc, #88]	; (3dc94 <flash_nrf_erase+0x94>)
   3dc3a:	f002 ffbb 	bl	40bb4 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   3dc3e:	f009 fc85 	bl	4754c <nrf_flash_sync_is_required>
   3dc42:	ab02      	add	r3, sp, #8
   3dc44:	4601      	mov	r1, r0
	struct flash_context context = {
   3dc46:	2210      	movs	r2, #16
	if (nrf_flash_sync_is_required()) {
   3dc48:	b1c0      	cbz	r0, 3dc7c <flash_nrf_erase+0x7c>
	struct flash_context context = {
   3dc4a:	4621      	mov	r1, r4
   3dc4c:	4618      	mov	r0, r3
   3dc4e:	f006 fb6e 	bl	4432e <memset>
   3dc52:	2201      	movs	r2, #1
   3dc54:	f88d 2014 	strb.w	r2, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   3dc58:	4a0f      	ldr	r2, [pc, #60]	; (3dc98 <flash_nrf_erase+0x98>)
   3dc5a:	e9cd 2000 	strd	r2, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   3dc5e:	480f      	ldr	r0, [pc, #60]	; (3dc9c <flash_nrf_erase+0x9c>)
	struct flash_context context = {
   3dc60:	e9cd 6503 	strd	r6, r5, [sp, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   3dc64:	f000 f92e 	bl	3dec4 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   3dc68:	4668      	mov	r0, sp
   3dc6a:	f7e9 fd0d 	bl	27688 <nrf_flash_sync_exe>
	return	erase_op(&context);
   3dc6e:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   3dc70:	4808      	ldr	r0, [pc, #32]	; (3dc94 <flash_nrf_erase+0x94>)
   3dc72:	f002 ff79 	bl	40b68 <z_impl_k_sem_give>
}
   3dc76:	4620      	mov	r0, r4
   3dc78:	b007      	add	sp, #28
   3dc7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct flash_context context = {
   3dc7c:	4618      	mov	r0, r3
   3dc7e:	f006 fb56 	bl	4432e <memset>
   3dc82:	e9cd 6503 	strd	r6, r5, [sp, #12]
	return	erase_op(&context);
   3dc86:	f7ff ff89 	bl	3db9c <erase_op>
   3dc8a:	e7f0      	b.n	3dc6e <flash_nrf_erase+0x6e>
			return -EINVAL;
   3dc8c:	f06f 0415 	mvn.w	r4, #21
   3dc90:	e7f1      	b.n	3dc76 <flash_nrf_erase+0x76>
   3dc92:	bf00      	nop
   3dc94:	20003630 	.word	0x20003630
   3dc98:	0003db9d 	.word	0x0003db9d
   3dc9c:	00015e64 	.word	0x00015e64

0003dca0 <write_op>:
{
   3dca0:	b570      	push	{r4, r5, r6, lr}
	if (w_ctx->enable_time_limit) {
   3dca2:	7b03      	ldrb	r3, [r0, #12]
{
   3dca4:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   3dca6:	b10b      	cbz	r3, 3dcac <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   3dca8:	f000 f914 	bl	3ded4 <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   3dcac:	4e19      	ldr	r6, [pc, #100]	; (3dd14 <write_op+0x74>)
{
   3dcae:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   3dcb0:	68a3      	ldr	r3, [r4, #8]
   3dcb2:	2b03      	cmp	r3, #3
   3dcb4:	d806      	bhi.n	3dcc4 <write_op+0x24>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   3dcb6:	4a18      	ldr	r2, [pc, #96]	; (3dd18 <write_op+0x78>)
   3dcb8:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   3dcbc:	07db      	lsls	r3, r3, #31
   3dcbe:	d5fb      	bpl.n	3dcb8 <write_op+0x18>
	return FLASH_OP_DONE;
   3dcc0:	2000      	movs	r0, #0
}
   3dcc2:	bd70      	pop	{r4, r5, r6, pc}
		if (SUSPEND_POFWARN()) {
   3dcc4:	f7ff ff3e 	bl	3db44 <suspend_pofwarn>
   3dcc8:	bb08      	cbnz	r0, 3dd0e <write_op+0x6e>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   3dcca:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   3dccc:	6860      	ldr	r0, [r4, #4]
   3dcce:	6819      	ldr	r1, [r3, #0]
   3dcd0:	f001 fa6c 	bl	3f1ac <nrfx_nvmc_word_write>
	if (pofcon_enabled) {
   3dcd4:	7833      	ldrb	r3, [r6, #0]
   3dcd6:	b10b      	cbz	r3, 3dcdc <write_op+0x3c>
   3dcd8:	f7ff ff1e 	bl	3db18 <restore_pofwarn.part.0>
	w_ctx->flash_addr += shift;
   3dcdc:	6863      	ldr	r3, [r4, #4]
   3dcde:	3304      	adds	r3, #4
   3dce0:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   3dce2:	6823      	ldr	r3, [r4, #0]
   3dce4:	3304      	adds	r3, #4
   3dce6:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   3dce8:	68a3      	ldr	r3, [r4, #8]
   3dcea:	3b04      	subs	r3, #4
   3dcec:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   3dcee:	7b23      	ldrb	r3, [r4, #12]
		i++;
   3dcf0:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   3dcf2:	2b00      	cmp	r3, #0
   3dcf4:	d0dc      	beq.n	3dcb0 <write_op+0x10>
			if (nrf_flash_sync_check_time_limit(i)) {
   3dcf6:	4628      	mov	r0, r5
   3dcf8:	f7e9 fd42 	bl	27780 <nrf_flash_sync_check_time_limit>
   3dcfc:	2800      	cmp	r0, #0
   3dcfe:	d0d7      	beq.n	3dcb0 <write_op+0x10>
   3dd00:	4a05      	ldr	r2, [pc, #20]	; (3dd18 <write_op+0x78>)
   3dd02:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   3dd06:	07d9      	lsls	r1, r3, #31
   3dd08:	d5fb      	bpl.n	3dd02 <write_op+0x62>
				return FLASH_OP_ONGOING;
   3dd0a:	2001      	movs	r0, #1
   3dd0c:	e7d9      	b.n	3dcc2 <write_op+0x22>
			return -ECANCELED;
   3dd0e:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   3dd12:	e7d6      	b.n	3dcc2 <write_op+0x22>
   3dd14:	20003b1e 	.word	0x20003b1e
   3dd18:	4001e000 	.word	0x4001e000

0003dd1c <flash_nrf_write>:
{
   3dd1c:	b570      	push	{r4, r5, r6, lr}
   3dd1e:	460d      	mov	r5, r1
   3dd20:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   3dd22:	4619      	mov	r1, r3
   3dd24:	4628      	mov	r0, r5
{
   3dd26:	4616      	mov	r6, r2
   3dd28:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   3dd2a:	f009 fbea 	bl	47502 <is_regular_addr_valid>
   3dd2e:	b360      	cbz	r0, 3dd8a <flash_nrf_write+0x6e>
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   3dd30:	ea45 0304 	orr.w	r3, r5, r4
   3dd34:	079b      	lsls	r3, r3, #30
   3dd36:	d128      	bne.n	3dd8a <flash_nrf_write+0x6e>
	if (!len) {
   3dd38:	b1fc      	cbz	r4, 3dd7a <flash_nrf_write+0x5e>
	return z_impl_k_sem_take(sem, timeout);
   3dd3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3dd3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3dd42:	4813      	ldr	r0, [pc, #76]	; (3dd90 <flash_nrf_write+0x74>)
   3dd44:	f002 ff36 	bl	40bb4 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   3dd48:	f009 fc00 	bl	4754c <nrf_flash_sync_is_required>
   3dd4c:	4603      	mov	r3, r0
	struct flash_context context = {
   3dd4e:	e9cd 6502 	strd	r6, r5, [sp, #8]
   3dd52:	a802      	add	r0, sp, #8
   3dd54:	9404      	str	r4, [sp, #16]
	if (nrf_flash_sync_is_required()) {
   3dd56:	b19b      	cbz	r3, 3dd80 <flash_nrf_write+0x64>
	struct flash_context context = {
   3dd58:	2301      	movs	r3, #1
   3dd5a:	f88d 3014 	strb.w	r3, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   3dd5e:	4b0d      	ldr	r3, [pc, #52]	; (3dd94 <flash_nrf_write+0x78>)
   3dd60:	e9cd 3000 	strd	r3, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   3dd64:	f641 504c 	movw	r0, #7500	; 0x1d4c
   3dd68:	f000 f8ac 	bl	3dec4 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   3dd6c:	4668      	mov	r0, sp
   3dd6e:	f7e9 fc8b 	bl	27688 <nrf_flash_sync_exe>
	return write_op(&context);
   3dd72:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   3dd74:	4806      	ldr	r0, [pc, #24]	; (3dd90 <flash_nrf_write+0x74>)
   3dd76:	f002 fef7 	bl	40b68 <z_impl_k_sem_give>
}
   3dd7a:	4620      	mov	r0, r4
   3dd7c:	b006      	add	sp, #24
   3dd7e:	bd70      	pop	{r4, r5, r6, pc}
	struct flash_context context = {
   3dd80:	f88d 3014 	strb.w	r3, [sp, #20]
	return write_op(&context);
   3dd84:	f7ff ff8c 	bl	3dca0 <write_op>
   3dd88:	e7f3      	b.n	3dd72 <flash_nrf_write+0x56>
		return -EINVAL;
   3dd8a:	f06f 0415 	mvn.w	r4, #21
   3dd8e:	e7f4      	b.n	3dd7a <flash_nrf_write+0x5e>
   3dd90:	20003630 	.word	0x20003630
   3dd94:	0003dca1 	.word	0x0003dca1

0003dd98 <time_slot_callback_work>:
{
   3dd98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   3dd9a:	9b07      	ldr	r3, [sp, #28]
	rc = op_desc->handler(op_desc->context);
   3dd9c:	e9d3 2000 	ldrd	r2, r0, [r3]
   3dda0:	4790      	blx	r2
	if (rc != FLASH_OP_ONGOING) {
   3dda2:	2801      	cmp	r0, #1
	rc = op_desc->handler(op_desc->context);
   3dda4:	4604      	mov	r4, r0
	if (rc != FLASH_OP_ONGOING) {
   3dda6:	d011      	beq.n	3ddcc <time_slot_callback_work+0x34>
		ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   3dda8:	f10d 010f 	add.w	r1, sp, #15
   3ddac:	f10d 000e 	add.w	r0, sp, #14
   3ddb0:	f7f5 fb5c 	bl	3346c <ll_timeslice_ticker_id_get>
		ret = ticker_stop(instance_index, 1U, ticker_id,
   3ddb4:	2300      	movs	r3, #0
   3ddb6:	9300      	str	r3, [sp, #0]
   3ddb8:	f89d 200f 	ldrb.w	r2, [sp, #15]
   3ddbc:	4b04      	ldr	r3, [pc, #16]	; (3ddd0 <time_slot_callback_work+0x38>)
   3ddbe:	f89d 000e 	ldrb.w	r0, [sp, #14]
   3ddc2:	2101      	movs	r1, #1
   3ddc4:	f7f3 fb80 	bl	314c8 <ticker_stop>
		_ticker_sync_context.result = (rc == FLASH_OP_DONE) ? 0 : rc;
   3ddc8:	4b02      	ldr	r3, [pc, #8]	; (3ddd4 <time_slot_callback_work+0x3c>)
   3ddca:	60dc      	str	r4, [r3, #12]
}
   3ddcc:	b004      	add	sp, #16
   3ddce:	bd10      	pop	{r4, pc}
   3ddd0:	0003ddd9 	.word	0x0003ddd9
   3ddd4:	20003660 	.word	0x20003660

0003ddd8 <ticker_stop_prepare_cb>:
{
   3ddd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   3ddda:	f10d 010f 	add.w	r1, sp, #15
   3ddde:	f10d 000e 	add.w	r0, sp, #14
   3dde2:	f7f5 fb43 	bl	3346c <ll_timeslice_ticker_id_get>
	ret = ticker_stop(instance_index, 2U, (ticker_id + 1U),
   3dde6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   3ddea:	f89d 000e 	ldrb.w	r0, [sp, #14]
   3ddee:	2300      	movs	r3, #0
   3ddf0:	3201      	adds	r2, #1
   3ddf2:	9300      	str	r3, [sp, #0]
   3ddf4:	b2d2      	uxtb	r2, r2
   3ddf6:	4b03      	ldr	r3, [pc, #12]	; (3de04 <ticker_stop_prepare_cb+0x2c>)
   3ddf8:	2102      	movs	r1, #2
   3ddfa:	f7f3 fb65 	bl	314c8 <ticker_stop>
}
   3ddfe:	b005      	add	sp, #20
   3de00:	f85d fb04 	ldr.w	pc, [sp], #4
   3de04:	0003dea5 	.word	0x0003dea5

0003de08 <time_slot_delay>:
{
   3de08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3de0c:	b08d      	sub	sp, #52	; 0x34
   3de0e:	4606      	mov	r6, r0
   3de10:	460f      	mov	r7, r1
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   3de12:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   3de16:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
{
   3de1a:	4690      	mov	r8, r2
   3de1c:	4699      	mov	r9, r3
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   3de1e:	f7f5 fb25 	bl	3346c <ll_timeslice_ticker_id_get>
	ret = ticker_start(instance_index, /* Radio instance ticker */
   3de22:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   3de26:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   3de2a:	9700      	str	r7, [sp, #0]
   3de2c:	2400      	movs	r4, #0
   3de2e:	3501      	adds	r5, #1
   3de30:	4633      	mov	r3, r6
   3de32:	e9cd 4407 	strd	r4, r4, [sp, #28]
   3de36:	e9cd 8905 	strd	r8, r9, [sp, #20]
   3de3a:	e9cd 4403 	strd	r4, r4, [sp, #12]
   3de3e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   3de42:	b2ea      	uxtb	r2, r5
   3de44:	2101      	movs	r1, #1
   3de46:	f7f3 fab3 	bl	313b0 <ticker_start>
	if (ret != TICKER_STATUS_SUCCESS && ret != TICKER_STATUS_BUSY) {
   3de4a:	f030 0302 	bics.w	r3, r0, #2
   3de4e:	d00a      	beq.n	3de66 <time_slot_delay+0x5e>
		_ticker_sync_context.result = 0;
   3de50:	4b06      	ldr	r3, [pc, #24]	; (3de6c <time_slot_delay+0x64>)
		ret = ticker_stop(instance_index, 1U, ticker_id,
   3de52:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
		_ticker_sync_context.result = 0;
   3de56:	60dc      	str	r4, [r3, #12]
		ret = ticker_stop(instance_index, 1U, ticker_id,
   3de58:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   3de5c:	4b04      	ldr	r3, [pc, #16]	; (3de70 <time_slot_delay+0x68>)
   3de5e:	9400      	str	r4, [sp, #0]
   3de60:	2101      	movs	r1, #1
   3de62:	f7f3 fb31 	bl	314c8 <ticker_stop>
}
   3de66:	b00d      	add	sp, #52	; 0x34
   3de68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3de6c:	20003660 	.word	0x20003660
   3de70:	0003ddd9 	.word	0x0003ddd9

0003de74 <time_slot_callback_prepare>:
	time_slot_delay(ticks_at_expire,
   3de74:	9b01      	ldr	r3, [sp, #4]
   3de76:	4a02      	ldr	r2, [pc, #8]	; (3de80 <time_slot_callback_prepare+0xc>)
   3de78:	2131      	movs	r1, #49	; 0x31
   3de7a:	f7ff bfc5 	b.w	3de08 <time_slot_delay>
   3de7e:	bf00      	nop
   3de80:	0003de85 	.word	0x0003de85

0003de84 <time_slot_callback_abort>:
{
   3de84:	b570      	push	{r4, r5, r6, lr}
   3de86:	9d05      	ldr	r5, [sp, #20]
   3de88:	4604      	mov	r4, r0
	ll_radio_state_abort();
   3de8a:	f7f5 faf5 	bl	33478 <ll_radio_state_abort>
	time_slot_delay(ticks_at_expire,
   3de8e:	462b      	mov	r3, r5
   3de90:	4620      	mov	r0, r4
   3de92:	4a03      	ldr	r2, [pc, #12]	; (3dea0 <time_slot_callback_abort+0x1c>)
}
   3de94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	time_slot_delay(ticks_at_expire,
   3de98:	2106      	movs	r1, #6
   3de9a:	f7ff bfb5 	b.w	3de08 <time_slot_delay>
   3de9e:	bf00      	nop
   3dea0:	0003dd99 	.word	0x0003dd99

0003dea4 <ticker_stop_work_cb>:
   3dea4:	4801      	ldr	r0, [pc, #4]	; (3deac <ticker_stop_work_cb+0x8>)
   3dea6:	f002 be5f 	b.w	40b68 <z_impl_k_sem_give>
   3deaa:	bf00      	nop
   3deac:	20003648 	.word	0x20003648

0003deb0 <nrf_flash_sync_init>:
{
   3deb0:	b508      	push	{r3, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   3deb2:	2201      	movs	r2, #1
   3deb4:	2100      	movs	r1, #0
   3deb6:	4802      	ldr	r0, [pc, #8]	; (3dec0 <nrf_flash_sync_init+0x10>)
   3deb8:	f00a f927 	bl	4810a <z_impl_k_sem_init>
}
   3debc:	2000      	movs	r0, #0
   3debe:	bd08      	pop	{r3, pc}
   3dec0:	20003648 	.word	0x20003648

0003dec4 <nrf_flash_sync_set_context>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
   3dec4:	4b02      	ldr	r3, [pc, #8]	; (3ded0 <nrf_flash_sync_set_context+0xc>)
   3dec6:	f2a0 62a4 	subw	r2, r0, #1700	; 0x6a4
	_ticker_sync_context.slot = duration;
   3deca:	e9c3 2000 	strd	r2, r0, [r3]
}
   3dece:	4770      	bx	lr
   3ded0:	20003660 	.word	0x20003660

0003ded4 <nrf_flash_sync_get_timestamp_begin>:
{
   3ded4:	b508      	push	{r3, lr}
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
   3ded6:	f7f3 fb39 	bl	3154c <ticker_ticks_now_get>
   3deda:	4b01      	ldr	r3, [pc, #4]	; (3dee0 <nrf_flash_sync_get_timestamp_begin+0xc>)
   3dedc:	6098      	str	r0, [r3, #8]
}
   3dede:	bd08      	pop	{r3, pc}
   3dee0:	20003660 	.word	0x20003660

0003dee4 <random_byte_get>:
   3dee4:	f04f 0320 	mov.w	r3, #32
   3dee8:	f3ef 8211 	mrs	r2, BASEPRI
   3deec:	f383 8812 	msr	BASEPRI_MAX, r3
   3def0:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   3def4:	4b09      	ldr	r3, [pc, #36]	; (3df1c <random_byte_get+0x38>)
   3def6:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   3defa:	b161      	cbz	r1, 3df16 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   3defc:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   3defe:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   3df02:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   3df06:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   3df0a:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   3df0c:	f382 8811 	msr	BASEPRI, r2
   3df10:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   3df14:	4770      	bx	lr
	int retval = -EAGAIN;
   3df16:	f06f 000a 	mvn.w	r0, #10
   3df1a:	e7f7      	b.n	3df0c <random_byte_get+0x28>
   3df1c:	4000d000 	.word	0x4000d000

0003df20 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   3df20:	b5f0      	push	{r4, r5, r6, r7, lr}
   3df22:	4603      	mov	r3, r0
   3df24:	4610      	mov	r0, r2
	uint32_t last  = rngp->last;
   3df26:	789c      	ldrb	r4, [r3, #2]
	uint32_t mask  = rngp->mask;
   3df28:	f893 c003 	ldrb.w	ip, [r3, #3]
	__asm__ volatile(
   3df2c:	f04f 0520 	mov.w	r5, #32
   3df30:	f3ef 8211 	mrs	r2, BASEPRI
   3df34:	f385 8812 	msr	BASEPRI_MAX, r5
   3df38:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   3df3c:	781f      	ldrb	r7, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   3df3e:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   3df42:	1be4      	subs	r4, r4, r7
   3df44:	ea04 040c 	and.w	r4, r4, ip
	if (available < len) {
   3df48:	42a0      	cmp	r0, r4
		len = available;
   3df4a:	bf88      	it	hi
   3df4c:	b2a0      	uxthhi	r0, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   3df4e:	183e      	adds	r6, r7, r0
   3df50:	ea0c 0606 	and.w	r6, ip, r6
	first = rngp->first_alloc;
   3df54:	463d      	mov	r5, r7
	rngp->first_alloc = (first + len) & mask;
   3df56:	701e      	strb	r6, [r3, #0]
	__asm__ volatile(
   3df58:	f382 8811 	msr	BASEPRI, r2
   3df5c:	f3bf 8f6f 	isb	sy
   3df60:	180a      	adds	r2, r1, r0
	irq_unlock(key);

	while (likely(len--)) {
   3df62:	428a      	cmp	r2, r1
   3df64:	d117      	bne.n	3df96 <rng_pool_get+0x76>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   3df66:	4577      	cmp	r7, lr
   3df68:	d10d      	bne.n	3df86 <rng_pool_get+0x66>
	__asm__ volatile(
   3df6a:	f04f 0120 	mov.w	r1, #32
   3df6e:	f3ef 8211 	mrs	r2, BASEPRI
   3df72:	f381 8812 	msr	BASEPRI_MAX, r1
   3df76:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   3df7a:	7819      	ldrb	r1, [r3, #0]
   3df7c:	7059      	strb	r1, [r3, #1]
	__asm__ volatile(
   3df7e:	f382 8811 	msr	BASEPRI, r2
   3df82:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
	if (available <= rngp->threshold) {
   3df86:	791b      	ldrb	r3, [r3, #4]
	available = available - len;
   3df88:	1a24      	subs	r4, r4, r0
	if (available <= rngp->threshold) {
   3df8a:	42a3      	cmp	r3, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   3df8c:	bf22      	ittt	cs
   3df8e:	4b06      	ldrcs	r3, [pc, #24]	; (3dfa8 <rng_pool_get+0x88>)
   3df90:	2201      	movcs	r2, #1
   3df92:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   3df94:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   3df96:	195e      	adds	r6, r3, r5
		first = (first + 1) & mask;
   3df98:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   3df9a:	7976      	ldrb	r6, [r6, #5]
   3df9c:	f801 6b01 	strb.w	r6, [r1], #1
		first = (first + 1) & mask;
   3dfa0:	ea05 050c 	and.w	r5, r5, ip
   3dfa4:	e7dd      	b.n	3df62 <rng_pool_get+0x42>
   3dfa6:	bf00      	nop
   3dfa8:	4000d000 	.word	0x4000d000

0003dfac <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   3dfac:	43db      	mvns	r3, r3
{
   3dfae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   3dfb2:	f013 0501 	ands.w	r5, r3, #1
{
   3dfb6:	460e      	mov	r6, r1
   3dfb8:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   3dfba:	d004      	beq.n	3dfc6 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   3dfbc:	4821      	ldr	r0, [pc, #132]	; (3e044 <entropy_nrf5_get_entropy_isr+0x98>)
   3dfbe:	f7ff ffaf 	bl	3df20 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   3dfc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   3dfc6:	b3a2      	cbz	r2, 3e032 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   3dfc8:	f04f 0320 	mov.w	r3, #32
   3dfcc:	f3ef 8811 	mrs	r8, BASEPRI
   3dfd0:	f383 8812 	msr	BASEPRI_MAX, r3
   3dfd4:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   3dfd8:	200d      	movs	r0, #13
   3dfda:	f7ec f9af 	bl	2a33c <arch_irq_is_enabled>
   3dfde:	4607      	mov	r7, r0
		irq_disable(IRQN);
   3dfe0:	200d      	movs	r0, #13
   3dfe2:	f7ec f997 	bl	2a314 <arch_irq_disable>
	__asm__ volatile(
   3dfe6:	f388 8811 	msr	BASEPRI, r8
   3dfea:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   3dfee:	f8df 8058 	ldr.w	r8, [pc, #88]	; 3e048 <entropy_nrf5_get_entropy_isr+0x9c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   3dff2:	f8df 9058 	ldr.w	r9, [pc, #88]	; 3e04c <entropy_nrf5_get_entropy_isr+0xa0>
   3dff6:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   3dffa:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   3dffe:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   3e002:	2301      	movs	r3, #1
   3e004:	f8c8 3000 	str.w	r3, [r8]
   3e008:	4625      	mov	r5, r4
   3e00a:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   3e00e:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   3e012:	b183      	cbz	r3, 3e036 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   3e014:	f7ff ff66 	bl	3dee4 <random_byte_get>
			if (byte < 0) {
   3e018:	1e03      	subs	r3, r0, #0
   3e01a:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   3e01e:	dbf6      	blt.n	3e00e <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   3e020:	3d01      	subs	r5, #1
   3e022:	b2ad      	uxth	r5, r5
   3e024:	5573      	strb	r3, [r6, r5]
		} while (len);
   3e026:	2d00      	cmp	r5, #0
   3e028:	d1f1      	bne.n	3e00e <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   3e02a:	b117      	cbz	r7, 3e032 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   3e02c:	200d      	movs	r0, #13
   3e02e:	f7ec f963 	bl	2a2f8 <arch_irq_enable>
	return cnt;
   3e032:	4620      	mov	r0, r4
   3e034:	e7c5      	b.n	3dfc2 <entropy_nrf5_get_entropy_isr+0x16>
   3e036:	f3bf 8f4f 	dsb	sy
				__WFE();
   3e03a:	bf20      	wfe
				__SEV();
   3e03c:	bf40      	sev
				__WFE();
   3e03e:	bf20      	wfe
   3e040:	e7e5      	b.n	3e00e <entropy_nrf5_get_entropy_isr+0x62>
   3e042:	bf00      	nop
   3e044:	200036a0 	.word	0x200036a0
   3e048:	4000d000 	.word	0x4000d000
   3e04c:	e000e100 	.word	0xe000e100

0003e050 <entropy_nrf5_get_entropy>:
{
   3e050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   3e054:	4f12      	ldr	r7, [pc, #72]	; (3e0a0 <entropy_nrf5_get_entropy+0x50>)
   3e056:	460d      	mov	r5, r1
   3e058:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   3e05a:	f107 0845 	add.w	r8, r7, #69	; 0x45
	while (len) {
   3e05e:	b914      	cbnz	r4, 3e066 <entropy_nrf5_get_entropy+0x16>
}
   3e060:	4620      	mov	r0, r4
   3e062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3e066:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3e06a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3e06e:	4638      	mov	r0, r7
   3e070:	f002 fda0 	bl	40bb4 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   3e074:	4622      	mov	r2, r4
   3e076:	4629      	mov	r1, r5
   3e078:	4640      	mov	r0, r8
   3e07a:	f7ff ff51 	bl	3df20 <rng_pool_get>
   3e07e:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   3e080:	4638      	mov	r0, r7
   3e082:	f002 fd71 	bl	40b68 <z_impl_k_sem_give>
		if (bytes == 0U) {
   3e086:	b93e      	cbnz	r6, 3e098 <entropy_nrf5_get_entropy+0x48>
	return z_impl_k_sem_take(sem, timeout);
   3e088:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3e08c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3e090:	4804      	ldr	r0, [pc, #16]	; (3e0a4 <entropy_nrf5_get_entropy+0x54>)
   3e092:	f002 fd8f 	bl	40bb4 <z_impl_k_sem_take>
	while (len) {
   3e096:	e7e6      	b.n	3e066 <entropy_nrf5_get_entropy+0x16>
		len -= bytes;
   3e098:	1ba4      	subs	r4, r4, r6
   3e09a:	b2a4      	uxth	r4, r4
		buf += bytes;
   3e09c:	4435      	add	r5, r6
   3e09e:	e7de      	b.n	3e05e <entropy_nrf5_get_entropy+0xe>
   3e0a0:	20003670 	.word	0x20003670
   3e0a4:	20003688 	.word	0x20003688

0003e0a8 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   3e0a8:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   3e0aa:	4c19      	ldr	r4, [pc, #100]	; (3e110 <entropy_nrf5_init+0x68>)
   3e0ac:	2201      	movs	r2, #1
   3e0ae:	4611      	mov	r1, r2
   3e0b0:	4620      	mov	r0, r4
   3e0b2:	f00a f82a 	bl	4810a <z_impl_k_sem_init>
   3e0b6:	2201      	movs	r2, #1
   3e0b8:	2100      	movs	r1, #0
   3e0ba:	f104 0018 	add.w	r0, r4, #24
   3e0be:	f00a f824 	bl	4810a <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   3e0c2:	f240 4307 	movw	r3, #1031	; 0x407
   3e0c6:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   3e0ca:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   3e0ce:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   3e0d0:	230c      	movs	r3, #12
   3e0d2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   3e0d6:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   3e0d8:	4b0e      	ldr	r3, [pc, #56]	; (3e114 <entropy_nrf5_init+0x6c>)
   3e0da:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   3e0de:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   3e0e2:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   3e0e6:	f042 0201 	orr.w	r2, r2, #1
   3e0ea:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   3e0ee:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   3e0f0:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   3e0f4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   3e0f8:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   3e0fc:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   3e0fe:	6019      	str	r1, [r3, #0]
   3e100:	200d      	movs	r0, #13
   3e102:	f7ec f929 	bl	2a358 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   3e106:	200d      	movs	r0, #13
   3e108:	f7ec f8f6 	bl	2a2f8 <arch_irq_enable>

	return 0;
}
   3e10c:	4628      	mov	r0, r5
   3e10e:	bd38      	pop	{r3, r4, r5, pc}
   3e110:	20003670 	.word	0x20003670
   3e114:	4000d000 	.word	0x4000d000

0003e118 <isr>:
{
   3e118:	b510      	push	{r4, lr}
	byte = random_byte_get();
   3e11a:	f7ff fee3 	bl	3dee4 <random_byte_get>
	if (byte < 0) {
   3e11e:	2800      	cmp	r0, #0
   3e120:	db20      	blt.n	3e164 <isr+0x4c>
	uint8_t last  = rngp->last;
   3e122:	4b17      	ldr	r3, [pc, #92]	; (3e180 <isr+0x68>)
   3e124:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   3e128:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   3e12c:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   3e130:	1b14      	subs	r4, r2, r4
   3e132:	ea31 0404 	bics.w	r4, r1, r4
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   3e136:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   3e138:	d10d      	bne.n	3e156 <isr+0x3e>
	uint8_t last  = rngp->last;
   3e13a:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   3e13e:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   3e142:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   3e146:	1b14      	subs	r4, r2, r4
   3e148:	ea31 0404 	bics.w	r4, r1, r4
   3e14c:	d10b      	bne.n	3e166 <isr+0x4e>
   3e14e:	4b0d      	ldr	r3, [pc, #52]	; (3e184 <isr+0x6c>)
   3e150:	2201      	movs	r2, #1
   3e152:	605a      	str	r2, [r3, #4]
}
   3e154:	e00e      	b.n	3e174 <isr+0x5c>
	rngp->buffer[last] = byte;
   3e156:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   3e158:	3201      	adds	r2, #1
   3e15a:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   3e15c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   3e160:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
}
   3e164:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   3e166:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   3e168:	3201      	adds	r2, #1
   3e16a:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   3e16c:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   3e170:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   3e174:	4804      	ldr	r0, [pc, #16]	; (3e188 <isr+0x70>)
}
   3e176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3e17a:	f002 bcf5 	b.w	40b68 <z_impl_k_sem_give>
   3e17e:	bf00      	nop
   3e180:	20003670 	.word	0x20003670
   3e184:	4000d000 	.word	0x4000d000
   3e188:	20003688 	.word	0x20003688

0003e18c <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   3e18c:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   3e18e:	2301      	movs	r3, #1
   3e190:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3e192:	4a0e      	ldr	r2, [pc, #56]	; (3e1cc <compare_int_lock+0x40>)
   3e194:	f3bf 8f5b 	dmb	ish
   3e198:	43dc      	mvns	r4, r3
   3e19a:	e852 1f00 	ldrex	r1, [r2]
   3e19e:	ea01 0504 	and.w	r5, r1, r4
   3e1a2:	e842 5600 	strex	r6, r5, [r2]
   3e1a6:	2e00      	cmp	r6, #0
   3e1a8:	d1f7      	bne.n	3e19a <compare_int_lock+0xe>
   3e1aa:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   3e1ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   3e1b2:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   3e1b4:	4806      	ldr	r0, [pc, #24]	; (3e1d0 <compare_int_lock+0x44>)
   3e1b6:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   3e1ba:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   3e1be:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   3e1c2:	420b      	tst	r3, r1
}
   3e1c4:	bf14      	ite	ne
   3e1c6:	2001      	movne	r0, #1
   3e1c8:	2000      	moveq	r0, #0
   3e1ca:	bd70      	pop	{r4, r5, r6, pc}
   3e1cc:	200036c8 	.word	0x200036c8
   3e1d0:	40011000 	.word	0x40011000

0003e1d4 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   3e1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   3e1d6:	491b      	ldr	r1, [pc, #108]	; (3e244 <sys_clock_timeout_handler+0x70>)
{
   3e1d8:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   3e1da:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   3e1de:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   3e1e0:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   3e1e4:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   3e1e8:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   3e1ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   3e1ee:	d30f      	bcc.n	3e210 <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   3e1f0:	f003 fb3e 	bl	41870 <sys_clock_announce>
    return p_reg->CC[ch];
   3e1f4:	00a3      	lsls	r3, r4, #2
   3e1f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3e1fa:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   3e1fe:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   3e202:	4295      	cmp	r5, r2
   3e204:	d11d      	bne.n	3e242 <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
   3e206:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   3e20a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
   3e20e:	e012      	b.n	3e236 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   3e210:	4b0d      	ldr	r3, [pc, #52]	; (3e248 <sys_clock_timeout_handler+0x74>)
   3e212:	681b      	ldr	r3, [r3, #0]
   3e214:	0a1a      	lsrs	r2, r3, #8
   3e216:	061b      	lsls	r3, r3, #24
   3e218:	195e      	adds	r6, r3, r5
   3e21a:	4b0c      	ldr	r3, [pc, #48]	; (3e24c <sys_clock_timeout_handler+0x78>)
   3e21c:	f142 0700 	adc.w	r7, r2, #0
   3e220:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   3e224:	f003 fb24 	bl	41870 <sys_clock_announce>
    return p_reg->CC[ch];
   3e228:	4a09      	ldr	r2, [pc, #36]	; (3e250 <sys_clock_timeout_handler+0x7c>)
   3e22a:	f504 73a8 	add.w	r3, r4, #336	; 0x150
   3e22e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
   3e232:	429d      	cmp	r5, r3
   3e234:	d105      	bne.n	3e242 <sys_clock_timeout_handler+0x6e>
    p_reg->EVTENSET = mask;
   3e236:	4a06      	ldr	r2, [pc, #24]	; (3e250 <sys_clock_timeout_handler+0x7c>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   3e238:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   3e23c:	40a3      	lsls	r3, r4
   3e23e:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   3e242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3e244:	200018b0 	.word	0x200018b0
   3e248:	200036cc 	.word	0x200036cc
   3e24c:	200018b8 	.word	0x200018b8
   3e250:	40011000 	.word	0x40011000

0003e254 <compare_int_unlock>:
	if (key) {
   3e254:	b311      	cbz	r1, 3e29c <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   3e256:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   3e25a:	2301      	movs	r3, #1
   3e25c:	4a10      	ldr	r2, [pc, #64]	; (3e2a0 <compare_int_unlock+0x4c>)
   3e25e:	4083      	lsls	r3, r0
   3e260:	e852 cf00 	ldrex	ip, [r2]
   3e264:	ea4c 0c03 	orr.w	ip, ip, r3
   3e268:	e842 c100 	strex	r1, ip, [r2]
   3e26c:	2900      	cmp	r1, #0
   3e26e:	d1f7      	bne.n	3e260 <compare_int_unlock+0xc>
   3e270:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   3e274:	4a0b      	ldr	r2, [pc, #44]	; (3e2a4 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   3e276:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   3e27a:	4083      	lsls	r3, r0
   3e27c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3e280:	4b09      	ldr	r3, [pc, #36]	; (3e2a8 <compare_int_unlock+0x54>)
   3e282:	f3bf 8f5b 	dmb	ish
   3e286:	681b      	ldr	r3, [r3, #0]
   3e288:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   3e28c:	40c3      	lsrs	r3, r0
   3e28e:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   3e290:	bf42      	ittt	mi
   3e292:	4b06      	ldrmi	r3, [pc, #24]	; (3e2ac <compare_int_unlock+0x58>)
   3e294:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   3e298:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   3e29c:	4770      	bx	lr
   3e29e:	bf00      	nop
   3e2a0:	200036c8 	.word	0x200036c8
   3e2a4:	40011000 	.word	0x40011000
   3e2a8:	200036c4 	.word	0x200036c4
   3e2ac:	e000e100 	.word	0xe000e100

0003e2b0 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   3e2b0:	4b0d      	ldr	r3, [pc, #52]	; (3e2e8 <z_nrf_rtc_timer_read+0x38>)
   3e2b2:	6818      	ldr	r0, [r3, #0]
   3e2b4:	0a01      	lsrs	r1, r0, #8
   3e2b6:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   3e2b8:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   3e2bc:	4b0b      	ldr	r3, [pc, #44]	; (3e2ec <z_nrf_rtc_timer_read+0x3c>)
   3e2be:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   3e2c2:	1818      	adds	r0, r3, r0
   3e2c4:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   3e2c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   3e2cc:	d20a      	bcs.n	3e2e4 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   3e2ce:	4b08      	ldr	r3, [pc, #32]	; (3e2f0 <z_nrf_rtc_timer_read+0x40>)
   3e2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   3e2d4:	4290      	cmp	r0, r2
   3e2d6:	eb71 0303 	sbcs.w	r3, r1, r3
   3e2da:	d203      	bcs.n	3e2e4 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   3e2dc:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   3e2e0:	f141 0100 	adc.w	r1, r1, #0
}
   3e2e4:	4770      	bx	lr
   3e2e6:	bf00      	nop
   3e2e8:	200036cc 	.word	0x200036cc
   3e2ec:	40011000 	.word	0x40011000
   3e2f0:	200018b8 	.word	0x200018b8

0003e2f4 <compare_set>:
{
   3e2f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e2f8:	4614      	mov	r4, r2
   3e2fa:	461d      	mov	r5, r3
   3e2fc:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
   3e2fe:	f7ff ff45 	bl	3e18c <compare_int_lock>
   3e302:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   3e304:	f7ff ffd4 	bl	3e2b0 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   3e308:	42a0      	cmp	r0, r4
   3e30a:	eb71 0305 	sbcs.w	r3, r1, r5
   3e30e:	d27a      	bcs.n	3e406 <compare_set+0x112>
		if (target_time - curr_time > COUNTER_SPAN) {
   3e310:	4b46      	ldr	r3, [pc, #280]	; (3e42c <compare_set+0x138>)
   3e312:	1a20      	subs	r0, r4, r0
   3e314:	eb65 0101 	sbc.w	r1, r5, r1
   3e318:	4298      	cmp	r0, r3
   3e31a:	f171 0100 	sbcs.w	r1, r1, #0
   3e31e:	f080 8081 	bcs.w	3e424 <compare_set+0x130>
		if (target_time != cc_data[chan].target_time) {
   3e322:	4b43      	ldr	r3, [pc, #268]	; (3e430 <compare_set+0x13c>)
   3e324:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   3e328:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   3e32c:	429d      	cmp	r5, r3
   3e32e:	bf08      	it	eq
   3e330:	4294      	cmpeq	r4, r2
   3e332:	d053      	beq.n	3e3dc <compare_set+0xe8>
   3e334:	ea4f 0a87 	mov.w	sl, r7, lsl #2
   3e338:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   3e33c:	f107 0950 	add.w	r9, r7, #80	; 0x50
   3e340:	f50a 3a88 	add.w	sl, sl, #69632	; 0x11000
   3e344:	ea4f 0989 	mov.w	r9, r9, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   3e348:	fa1f f989 	uxth.w	r9, r9
	return absolute_time & COUNTER_MAX;
   3e34c:	f024 487f 	bic.w	r8, r4, #4278190080	; 0xff000000
   3e350:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   3e354:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    return p_reg->CC[ch];
   3e358:	f8da 0540 	ldr.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
   3e35c:	4a35      	ldr	r2, [pc, #212]	; (3e434 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   3e35e:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
   3e362:	40bb      	lsls	r3, r7
	uint32_t cc_val = abs_val & COUNTER_MAX;
   3e364:	4646      	mov	r6, r8
     return p_reg->COUNTER;
   3e366:	f8d2 b504 	ldr.w	fp, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   3e36a:	eba0 000b 	sub.w	r0, r0, fp
   3e36e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   3e372:	f02b 417f 	bic.w	r1, fp, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   3e376:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   3e378:	f8ca 1540 	str.w	r1, [sl, #1344]	; 0x540
   3e37c:	d105      	bne.n	3e38a <compare_set+0x96>
   3e37e:	9301      	str	r3, [sp, #4]
	z_impl_k_busy_wait(usec_to_wait);
   3e380:	2013      	movs	r0, #19
   3e382:	f00a f938 	bl	485f6 <z_impl_k_busy_wait>
   3e386:	4a2b      	ldr	r2, [pc, #172]	; (3e434 <compare_set+0x140>)
   3e388:	9b01      	ldr	r3, [sp, #4]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   3e38a:	f10b 0c02 	add.w	ip, fp, #2
	return (a - b) & COUNTER_MAX;
   3e38e:	eba6 000c 	sub.w	r0, r6, ip
   3e392:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   3e396:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   3e39a:	bf88      	it	hi
   3e39c:	4666      	movhi	r6, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   3e39e:	2000      	movs	r0, #0
   3e3a0:	f8c9 0000 	str.w	r0, [r9]
   3e3a4:	f8d9 0000 	ldr.w	r0, [r9]
    p_reg->EVTENSET = mask;
   3e3a8:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   3e3ac:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   3e3b0:	f8ca 0540 	str.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
   3e3b4:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	} while ((now2 != now) &&
   3e3b8:	4583      	cmp	fp, r0
   3e3ba:	d006      	beq.n	3e3ca <compare_set+0xd6>
	return (a - b) & COUNTER_MAX;
   3e3bc:	1a30      	subs	r0, r6, r0
   3e3be:	3802      	subs	r0, #2
   3e3c0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   3e3c4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   3e3c8:	d81b      	bhi.n	3e402 <compare_set+0x10e>
	return (a - b) & COUNTER_MAX;
   3e3ca:	eba6 0608 	sub.w	r6, r6, r8
   3e3ce:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   3e3d2:	1936      	adds	r6, r6, r4
   3e3d4:	f145 0300 	adc.w	r3, r5, #0
   3e3d8:	4634      	mov	r4, r6
   3e3da:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
   3e3dc:	4914      	ldr	r1, [pc, #80]	; (3e430 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
   3e3de:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
   3e3e0:	013b      	lsls	r3, r7, #4
   3e3e2:	eb01 1207 	add.w	r2, r1, r7, lsl #4
	cc_data[chan].callback = handler;
   3e3e6:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   3e3e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   3e3ea:	6053      	str	r3, [r2, #4]
	cc_data[chan].target_time = target_time;
   3e3ec:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
   3e3f0:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
   3e3f2:	4638      	mov	r0, r7
   3e3f4:	9900      	ldr	r1, [sp, #0]
   3e3f6:	f7ff ff2d 	bl	3e254 <compare_int_unlock>
}
   3e3fa:	4620      	mov	r0, r4
   3e3fc:	b003      	add	sp, #12
   3e3fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e402:	4630      	mov	r0, r6
   3e404:	e7af      	b.n	3e366 <compare_set+0x72>
		atomic_or(&force_isr_mask, BIT(chan));
   3e406:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   3e408:	4a0b      	ldr	r2, [pc, #44]	; (3e438 <compare_set+0x144>)
   3e40a:	f3bf 8f5b 	dmb	ish
   3e40e:	40bb      	lsls	r3, r7
   3e410:	e852 0f00 	ldrex	r0, [r2]
   3e414:	4318      	orrs	r0, r3
   3e416:	e842 0100 	strex	r1, r0, [r2]
   3e41a:	2900      	cmp	r1, #0
   3e41c:	d1f8      	bne.n	3e410 <compare_set+0x11c>
   3e41e:	f3bf 8f5b 	dmb	ish
   3e422:	e7db      	b.n	3e3dc <compare_set+0xe8>
			return -EINVAL;
   3e424:	f06f 0415 	mvn.w	r4, #21
   3e428:	e7e3      	b.n	3e3f2 <compare_set+0xfe>
   3e42a:	bf00      	nop
   3e42c:	01000001 	.word	0x01000001
   3e430:	200018a0 	.word	0x200018a0
   3e434:	40011000 	.word	0x40011000
   3e438:	200036c4 	.word	0x200036c4

0003e43c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   3e43c:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   3e43e:	4b19      	ldr	r3, [pc, #100]	; (3e4a4 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   3e440:	4d19      	ldr	r5, [pc, #100]	; (3e4a8 <sys_clock_driver_init+0x6c>)
   3e442:	2400      	movs	r4, #0
   3e444:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3e448:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   3e44c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   3e450:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   3e454:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   3e458:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   3e45c:	4b13      	ldr	r3, [pc, #76]	; (3e4ac <sys_clock_driver_init+0x70>)
   3e45e:	2602      	movs	r6, #2
   3e460:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   3e464:	2101      	movs	r1, #1
   3e466:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   3e46a:	2011      	movs	r0, #17
   3e46c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   3e470:	4622      	mov	r2, r4
   3e472:	f7eb ff71 	bl	2a358 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   3e476:	2011      	movs	r0, #17
   3e478:	f7eb ff3e 	bl	2a2f8 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   3e47c:	4a0c      	ldr	r2, [pc, #48]	; (3e4b0 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   3e47e:	2301      	movs	r3, #1
   3e480:	60ab      	str	r3, [r5, #8]
   3e482:	602b      	str	r3, [r5, #0]
   3e484:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   3e486:	4b0b      	ldr	r3, [pc, #44]	; (3e4b4 <sys_clock_driver_init+0x78>)
   3e488:	4a0b      	ldr	r2, [pc, #44]	; (3e4b8 <sys_clock_driver_init+0x7c>)
   3e48a:	9300      	str	r3, [sp, #0]
   3e48c:	9401      	str	r4, [sp, #4]
   3e48e:	2300      	movs	r3, #0
   3e490:	4620      	mov	r0, r4
   3e492:	f7ff ff2f 	bl	3e2f4 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   3e496:	4630      	mov	r0, r6
   3e498:	f7ff f840 	bl	3d51c <z_nrf_clock_control_lf_on>

	return 0;
}
   3e49c:	4620      	mov	r0, r4
   3e49e:	b002      	add	sp, #8
   3e4a0:	bd70      	pop	{r4, r5, r6, pc}
   3e4a2:	bf00      	nop
   3e4a4:	200018a0 	.word	0x200018a0
   3e4a8:	40011000 	.word	0x40011000
   3e4ac:	e000e100 	.word	0xe000e100
   3e4b0:	200036c8 	.word	0x200036c8
   3e4b4:	0003e1d5 	.word	0x0003e1d5
   3e4b8:	007fffff 	.word	0x007fffff

0003e4bc <rtc_nrf_isr>:
{
   3e4bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   3e4c0:	4c33      	ldr	r4, [pc, #204]	; (3e590 <rtc_nrf_isr+0xd4>)
   3e4c2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   3e4c6:	079a      	lsls	r2, r3, #30
   3e4c8:	d50b      	bpl.n	3e4e2 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3e4ca:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   3e4ce:	b143      	cbz	r3, 3e4e2 <rtc_nrf_isr+0x26>
		overflow_cnt++;
   3e4d0:	4a30      	ldr	r2, [pc, #192]	; (3e594 <rtc_nrf_isr+0xd8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   3e4d2:	2300      	movs	r3, #0
   3e4d4:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   3e4d8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   3e4dc:	6813      	ldr	r3, [r2, #0]
   3e4de:	3301      	adds	r3, #1
   3e4e0:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   3e4e2:	f04f 0320 	mov.w	r3, #32
   3e4e6:	f3ef 8211 	mrs	r2, BASEPRI
   3e4ea:	f383 8812 	msr	BASEPRI_MAX, r3
   3e4ee:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
   3e4f2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   3e4f6:	03db      	lsls	r3, r3, #15
   3e4f8:	d529      	bpl.n	3e54e <rtc_nrf_isr+0x92>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3e4fa:	f3bf 8f5b 	dmb	ish
   3e4fe:	4b26      	ldr	r3, [pc, #152]	; (3e598 <rtc_nrf_isr+0xdc>)
   3e500:	e853 1f00 	ldrex	r1, [r3]
   3e504:	f021 0001 	bic.w	r0, r1, #1
   3e508:	e843 0500 	strex	r5, r0, [r3]
   3e50c:	2d00      	cmp	r5, #0
   3e50e:	d1f7      	bne.n	3e500 <rtc_nrf_isr+0x44>
   3e510:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   3e514:	b911      	cbnz	r1, 3e51c <rtc_nrf_isr+0x60>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3e516:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   3e51a:	b1c3      	cbz	r3, 3e54e <rtc_nrf_isr+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   3e51c:	2500      	movs	r5, #0
   3e51e:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   3e522:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
	__asm__ volatile(
   3e526:	f382 8811 	msr	BASEPRI, r2
   3e52a:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
   3e52e:	f7ff febf 	bl	3e2b0 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   3e532:	f04f 0320 	mov.w	r3, #32
   3e536:	f3ef 8211 	mrs	r2, BASEPRI
   3e53a:	f383 8812 	msr	BASEPRI_MAX, r3
   3e53e:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   3e542:	4b16      	ldr	r3, [pc, #88]	; (3e59c <rtc_nrf_isr+0xe0>)
   3e544:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   3e548:	42b0      	cmp	r0, r6
   3e54a:	41b9      	sbcs	r1, r7
   3e54c:	d206      	bcs.n	3e55c <rtc_nrf_isr+0xa0>
	__asm__ volatile(
   3e54e:	f382 8811 	msr	BASEPRI, r2
   3e552:	f3bf 8f6f 	isb	sy
}
   3e556:	b003      	add	sp, #12
   3e558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   3e55c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   3e560:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
   3e564:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   3e568:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
   3e56c:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
   3e56e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   3e572:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
   3e576:	f382 8811 	msr	BASEPRI, r2
   3e57a:	f3bf 8f6f 	isb	sy
		if (handler) {
   3e57e:	2900      	cmp	r1, #0
   3e580:	d0e9      	beq.n	3e556 <rtc_nrf_isr+0x9a>
			handler(chan, expire_time, user_context);
   3e582:	9000      	str	r0, [sp, #0]
   3e584:	4632      	mov	r2, r6
   3e586:	463b      	mov	r3, r7
   3e588:	4628      	mov	r0, r5
   3e58a:	4788      	blx	r1
}
   3e58c:	e7e3      	b.n	3e556 <rtc_nrf_isr+0x9a>
   3e58e:	bf00      	nop
   3e590:	40011000 	.word	0x40011000
   3e594:	200036cc 	.word	0x200036cc
   3e598:	200036c4 	.word	0x200036c4
   3e59c:	200018a0 	.word	0x200018a0

0003e5a0 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   3e5a0:	1c43      	adds	r3, r0, #1
{
   3e5a2:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   3e5a4:	d021      	beq.n	3e5ea <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   3e5a6:	2801      	cmp	r0, #1
   3e5a8:	dd21      	ble.n	3e5ee <sys_clock_set_timeout+0x4e>
   3e5aa:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   3e5ae:	da20      	bge.n	3e5f2 <sys_clock_set_timeout+0x52>
   3e5b0:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   3e5b2:	f7ff fe7d 	bl	3e2b0 <z_nrf_rtc_timer_read>
   3e5b6:	4b10      	ldr	r3, [pc, #64]	; (3e5f8 <sys_clock_set_timeout+0x58>)
   3e5b8:	e9d3 1300 	ldrd	r1, r3, [r3]
   3e5bc:	1a42      	subs	r2, r0, r1
		ticks = 0;
   3e5be:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
	if (cyc > MAX_CYCLES) {
   3e5c2:	480e      	ldr	r0, [pc, #56]	; (3e5fc <sys_clock_set_timeout+0x5c>)
		ticks = 0;
   3e5c4:	bf28      	it	cs
   3e5c6:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   3e5c8:	3201      	adds	r2, #1
   3e5ca:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
   3e5cc:	4282      	cmp	r2, r0
   3e5ce:	bf28      	it	cs
   3e5d0:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
   3e5d2:	1852      	adds	r2, r2, r1
   3e5d4:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   3e5d8:	4909      	ldr	r1, [pc, #36]	; (3e600 <sys_clock_set_timeout+0x60>)
   3e5da:	9001      	str	r0, [sp, #4]
   3e5dc:	9100      	str	r1, [sp, #0]
   3e5de:	f143 0300 	adc.w	r3, r3, #0
   3e5e2:	f7ff fe87 	bl	3e2f4 <compare_set>
}
   3e5e6:	b002      	add	sp, #8
   3e5e8:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   3e5ea:	4804      	ldr	r0, [pc, #16]	; (3e5fc <sys_clock_set_timeout+0x5c>)
   3e5ec:	e7e0      	b.n	3e5b0 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   3e5ee:	2400      	movs	r4, #0
   3e5f0:	e7df      	b.n	3e5b2 <sys_clock_set_timeout+0x12>
   3e5f2:	4c02      	ldr	r4, [pc, #8]	; (3e5fc <sys_clock_set_timeout+0x5c>)
   3e5f4:	e7dd      	b.n	3e5b2 <sys_clock_set_timeout+0x12>
   3e5f6:	bf00      	nop
   3e5f8:	200018b0 	.word	0x200018b0
   3e5fc:	007fffff 	.word	0x007fffff
   3e600:	0003e1d5 	.word	0x0003e1d5

0003e604 <sys_clock_elapsed>:
{
   3e604:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   3e606:	f7ff fe53 	bl	3e2b0 <z_nrf_rtc_timer_read>
   3e60a:	4b02      	ldr	r3, [pc, #8]	; (3e614 <sys_clock_elapsed+0x10>)
   3e60c:	681b      	ldr	r3, [r3, #0]
}
   3e60e:	1ac0      	subs	r0, r0, r3
   3e610:	bd08      	pop	{r3, pc}
   3e612:	bf00      	nop
   3e614:	200018b0 	.word	0x200018b0

0003e618 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   3e618:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   3e61c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   3e620:	2a08      	cmp	r2, #8
   3e622:	d106      	bne.n	3e632 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   3e624:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   3e628:	2b05      	cmp	r3, #5
   3e62a:	d802      	bhi.n	3e632 <nrf52_errata_103+0x1a>
   3e62c:	4a02      	ldr	r2, [pc, #8]	; (3e638 <nrf52_errata_103+0x20>)
   3e62e:	5cd0      	ldrb	r0, [r2, r3]
   3e630:	4770      	bx	lr
                        return false;
   3e632:	2000      	movs	r0, #0
}
   3e634:	4770      	bx	lr
   3e636:	bf00      	nop
   3e638:	0004ab10 	.word	0x0004ab10

0003e63c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   3e63c:	4a02      	ldr	r2, [pc, #8]	; (3e648 <nvmc_wait+0xc>)
   3e63e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   3e642:	2b00      	cmp	r3, #0
   3e644:	d0fb      	beq.n	3e63e <nvmc_wait+0x2>
}
   3e646:	4770      	bx	lr
   3e648:	4001e000 	.word	0x4001e000

0003e64c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   3e64c:	b510      	push	{r4, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   3e64e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   3e652:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   3e656:	2a08      	cmp	r2, #8
   3e658:	d14e      	bne.n	3e6f8 <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
   3e65a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   3e65e:	2100      	movs	r1, #0
   3e660:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   3e664:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   3e668:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   3e66c:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
   3e670:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
   3e674:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   3e678:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
   3e67c:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   3e680:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
   3e684:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   3e688:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
   3e68c:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   3e690:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
   3e694:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   3e698:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   3e69c:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   3e6a0:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
   3e6a4:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   3e6a8:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
   3e6ac:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   3e6b0:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
   3e6b4:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   3e6b8:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
   3e6bc:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   3e6c0:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
   3e6c4:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   3e6c8:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
   3e6cc:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   3e6d0:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
   3e6d4:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   3e6d8:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
   3e6dc:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   3e6e0:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
   3e6e4:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   3e6e8:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
   3e6ec:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   3e6f0:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
   3e6f4:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   3e6f8:	f7ff ff8e 	bl	3e618 <nrf52_errata_103>
   3e6fc:	b118      	cbz	r0, 3e706 <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   3e6fe:	4b3b      	ldr	r3, [pc, #236]	; (3e7ec <SystemInit+0x1a0>)
   3e700:	4a3b      	ldr	r2, [pc, #236]	; (3e7f0 <SystemInit+0x1a4>)
   3e702:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   3e706:	f7ff ff87 	bl	3e618 <nrf52_errata_103>
   3e70a:	b118      	cbz	r0, 3e714 <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   3e70c:	4b39      	ldr	r3, [pc, #228]	; (3e7f4 <SystemInit+0x1a8>)
   3e70e:	22fb      	movs	r2, #251	; 0xfb
   3e710:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   3e714:	f7ff ff80 	bl	3e618 <nrf52_errata_103>
   3e718:	b170      	cbz	r0, 3e738 <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   3e71a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   3e71e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   3e722:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   3e726:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   3e72a:	f022 020f 	bic.w	r2, r2, #15
   3e72e:	f003 030f 	and.w	r3, r3, #15
   3e732:	4313      	orrs	r3, r2
   3e734:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   3e738:	f7ff ff6e 	bl	3e618 <nrf52_errata_103>
   3e73c:	b120      	cbz	r0, 3e748 <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   3e73e:	4b2e      	ldr	r3, [pc, #184]	; (3e7f8 <SystemInit+0x1ac>)
   3e740:	f44f 7200 	mov.w	r2, #512	; 0x200
   3e744:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   3e748:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   3e74c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   3e750:	2b08      	cmp	r3, #8
   3e752:	d11a      	bne.n	3e78a <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   3e754:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3e758:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   3e75c:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   3e75e:	bf44      	itt	mi
   3e760:	f06f 0201 	mvnmi.w	r2, #1
   3e764:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   3e768:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   3e76c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
   3e770:	2b05      	cmp	r3, #5
   3e772:	d802      	bhi.n	3e77a <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   3e774:	4a21      	ldr	r2, [pc, #132]	; (3e7fc <SystemInit+0x1b0>)
   3e776:	5cd3      	ldrb	r3, [r2, r3]
   3e778:	b13b      	cbz	r3, 3e78a <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   3e77a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   3e77e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   3e782:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3e786:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   3e78a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   3e78e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   3e792:	2a00      	cmp	r2, #0
   3e794:	db03      	blt.n	3e79e <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   3e796:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   3e79a:	2b00      	cmp	r3, #0
   3e79c:	da22      	bge.n	3e7e4 <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   3e79e:	4918      	ldr	r1, [pc, #96]	; (3e800 <SystemInit+0x1b4>)
   3e7a0:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   3e7a2:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   3e7a6:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   3e7aa:	2412      	movs	r4, #18
    nvmc_wait();
   3e7ac:	f7ff ff46 	bl	3e63c <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   3e7b0:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   3e7b4:	f7ff ff42 	bl	3e63c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   3e7b8:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   3e7bc:	f7ff ff3e 	bl	3e63c <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   3e7c0:	2300      	movs	r3, #0
   3e7c2:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   3e7c6:	f7ff ff39 	bl	3e63c <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   3e7ca:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   3e7ce:	490d      	ldr	r1, [pc, #52]	; (3e804 <SystemInit+0x1b8>)
   3e7d0:	4b0d      	ldr	r3, [pc, #52]	; (3e808 <SystemInit+0x1bc>)
   3e7d2:	68ca      	ldr	r2, [r1, #12]
   3e7d4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   3e7d8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   3e7da:	60cb      	str	r3, [r1, #12]
   3e7dc:	f3bf 8f4f 	dsb	sy
    __NOP();
   3e7e0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   3e7e2:	e7fd      	b.n	3e7e0 <SystemInit+0x194>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   3e7e4:	4b09      	ldr	r3, [pc, #36]	; (3e80c <SystemInit+0x1c0>)
   3e7e6:	4a0a      	ldr	r2, [pc, #40]	; (3e810 <SystemInit+0x1c4>)
   3e7e8:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   3e7ea:	bd10      	pop	{r4, pc}
   3e7ec:	40005000 	.word	0x40005000
   3e7f0:	00038148 	.word	0x00038148
   3e7f4:	4000f000 	.word	0x4000f000
   3e7f8:	40029000 	.word	0x40029000
   3e7fc:	0004ab0a 	.word	0x0004ab0a
   3e800:	4001e000 	.word	0x4001e000
   3e804:	e000ed00 	.word	0xe000ed00
   3e808:	05fa0004 	.word	0x05fa0004
   3e80c:	200008ac 	.word	0x200008ac
   3e810:	03d09000 	.word	0x03d09000

0003e814 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   3e814:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   3e816:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   3e818:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   3e81a:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
   3e81e:	fab2 f382 	clz	r3, r2
   3e822:	f1c3 031f 	rsb	r3, r3, #31
   3e826:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   3e828:	fa05 f403 	lsl.w	r4, r5, r3
   3e82c:	ea22 0404 	bic.w	r4, r2, r4
   3e830:	e850 6f00 	ldrex	r6, [r0]
   3e834:	4296      	cmp	r6, r2
   3e836:	d104      	bne.n	3e842 <nrfx_flag32_alloc+0x2e>
   3e838:	e840 4c00 	strex	ip, r4, [r0]
   3e83c:	f1bc 0f00 	cmp.w	ip, #0
   3e840:	d1f6      	bne.n	3e830 <nrfx_flag32_alloc+0x1c>
   3e842:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   3e846:	d1e7      	bne.n	3e818 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   3e848:	4801      	ldr	r0, [pc, #4]	; (3e850 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
   3e84a:	700b      	strb	r3, [r1, #0]
}
   3e84c:	bd70      	pop	{r4, r5, r6, pc}
   3e84e:	bf00      	nop
   3e850:	0bad0000 	.word	0x0bad0000

0003e854 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   3e854:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   3e856:	6803      	ldr	r3, [r0, #0]
   3e858:	40cb      	lsrs	r3, r1
   3e85a:	07db      	lsls	r3, r3, #31
   3e85c:	d414      	bmi.n	3e888 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   3e85e:	2301      	movs	r3, #1
   3e860:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   3e862:	6802      	ldr	r2, [r0, #0]
   3e864:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   3e868:	ea43 0102 	orr.w	r1, r3, r2
   3e86c:	e850 4f00 	ldrex	r4, [r0]
   3e870:	4294      	cmp	r4, r2
   3e872:	d104      	bne.n	3e87e <nrfx_flag32_free+0x2a>
   3e874:	e840 1c00 	strex	ip, r1, [r0]
   3e878:	f1bc 0f00 	cmp.w	ip, #0
   3e87c:	d1f6      	bne.n	3e86c <nrfx_flag32_free+0x18>
   3e87e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   3e882:	d1ee      	bne.n	3e862 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   3e884:	4801      	ldr	r0, [pc, #4]	; (3e88c <nrfx_flag32_free+0x38>)
}
   3e886:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   3e888:	4801      	ldr	r0, [pc, #4]	; (3e890 <nrfx_flag32_free+0x3c>)
   3e88a:	e7fc      	b.n	3e886 <nrfx_flag32_free+0x32>
   3e88c:	0bad0000 	.word	0x0bad0000
   3e890:	0bad0004 	.word	0x0bad0004

0003e894 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   3e894:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
   3e896:	4604      	mov	r4, r0
   3e898:	b118      	cbz	r0, 3e8a2 <clock_stop+0xe>
   3e89a:	2801      	cmp	r0, #1
   3e89c:	d022      	beq.n	3e8e4 <clock_stop+0x50>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   3e89e:	b003      	add	sp, #12
   3e8a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
   3e8a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3e8a6:	2202      	movs	r2, #2
   3e8a8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3e8ac:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   3e8b0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3e8b4:	2201      	movs	r2, #1
   3e8b6:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   3e8b8:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   3e8ba:	2301      	movs	r3, #1
   3e8bc:	f88d 3007 	strb.w	r3, [sp, #7]
   3e8c0:	f242 7510 	movw	r5, #10000	; 0x2710
   3e8c4:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
   3e8c8:	b1cc      	cbz	r4, 3e8fe <clock_stop+0x6a>
   3e8ca:	2c01      	cmp	r4, #1
   3e8cc:	d1e7      	bne.n	3e89e <clock_stop+0xa>
            if (p_clk_src != NULL)
   3e8ce:	b3c7      	cbz	r7, 3e942 <clock_stop+0xae>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   3e8d0:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   3e8d4:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   3e8d8:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   3e8da:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   3e8de:	03da      	lsls	r2, r3, #15
   3e8e0:	d521      	bpl.n	3e926 <clock_stop+0x92>
   3e8e2:	e016      	b.n	3e912 <clock_stop+0x7e>
    p_reg->INTENCLR = mask;
   3e8e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3e8e8:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   3e8ea:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3e8ee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   3e8f2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3e8f6:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   3e8f8:	f10d 0707 	add.w	r7, sp, #7
   3e8fc:	e7dd      	b.n	3e8ba <clock_stop+0x26>
            if (p_clk_src != NULL)
   3e8fe:	b1b7      	cbz	r7, 3e92e <clock_stop+0x9a>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   3e900:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   3e904:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   3e908:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   3e90a:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   3e90e:	03d8      	lsls	r0, r3, #15
   3e910:	d5c5      	bpl.n	3e89e <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   3e912:	f89d 0007 	ldrb.w	r0, [sp, #7]
   3e916:	2801      	cmp	r0, #1
   3e918:	d103      	bne.n	3e922 <clock_stop+0x8e>
   3e91a:	f008 fe8e 	bl	4763a <nrfx_busy_wait>
   3e91e:	3d01      	subs	r5, #1
   3e920:	d1d2      	bne.n	3e8c8 <clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
   3e922:	2c01      	cmp	r4, #1
   3e924:	d1bb      	bne.n	3e89e <clock_stop+0xa>
            m_clock_cb.hfclk_started = false;
   3e926:	4b0c      	ldr	r3, [pc, #48]	; (3e958 <clock_stop+0xc4>)
   3e928:	2200      	movs	r2, #0
   3e92a:	715a      	strb	r2, [r3, #5]
   3e92c:	e7b7      	b.n	3e89e <clock_stop+0xa>
   3e92e:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   3e932:	03d9      	lsls	r1, r3, #15
   3e934:	d5b3      	bpl.n	3e89e <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   3e936:	2001      	movs	r0, #1
   3e938:	f008 fe7f 	bl	4763a <nrfx_busy_wait>
   3e93c:	3d01      	subs	r5, #1
   3e93e:	d1f6      	bne.n	3e92e <clock_stop+0x9a>
   3e940:	e7ad      	b.n	3e89e <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   3e942:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   3e946:	03db      	lsls	r3, r3, #15
   3e948:	d5ed      	bpl.n	3e926 <clock_stop+0x92>
   3e94a:	2001      	movs	r0, #1
   3e94c:	f008 fe75 	bl	4763a <nrfx_busy_wait>
   3e950:	3d01      	subs	r5, #1
   3e952:	d1f6      	bne.n	3e942 <clock_stop+0xae>
   3e954:	e7e7      	b.n	3e926 <clock_stop+0x92>
   3e956:	bf00      	nop
   3e958:	200036d0 	.word	0x200036d0

0003e95c <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   3e95c:	4b05      	ldr	r3, [pc, #20]	; (3e974 <nrfx_clock_init+0x18>)
   3e95e:	791a      	ldrb	r2, [r3, #4]
   3e960:	b92a      	cbnz	r2, 3e96e <nrfx_clock_init+0x12>
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    }
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
   3e962:	719a      	strb	r2, [r3, #6]
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   3e964:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   3e966:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   3e968:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   3e96a:	4803      	ldr	r0, [pc, #12]	; (3e978 <nrfx_clock_init+0x1c>)
   3e96c:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   3e96e:	4803      	ldr	r0, [pc, #12]	; (3e97c <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   3e970:	4770      	bx	lr
   3e972:	bf00      	nop
   3e974:	200036d0 	.word	0x200036d0
   3e978:	0bad0000 	.word	0x0bad0000
   3e97c:	0bad000c 	.word	0x0bad000c

0003e980 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   3e980:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   3e982:	2000      	movs	r0, #0
   3e984:	f7eb fcda 	bl	2a33c <arch_irq_is_enabled>
   3e988:	b908      	cbnz	r0, 3e98e <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   3e98a:	f7eb fcb5 	bl	2a2f8 <arch_irq_enable>
#pragma GCC diagnostic pop
#endif

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
   3e98e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3e992:	2200      	movs	r2, #0
   3e994:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
   3e998:	4b01      	ldr	r3, [pc, #4]	; (3e9a0 <nrfx_clock_enable+0x20>)
   3e99a:	2201      	movs	r2, #1
   3e99c:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   3e99e:	bd08      	pop	{r3, pc}
   3e9a0:	20003b1f 	.word	0x20003b1f

0003e9a4 <nrfx_clock_calibration_start>:
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   3e9a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3e9a8:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   3e9ac:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
   3e9b0:	03c8      	lsls	r0, r1, #15
   3e9b2:	d519      	bpl.n	3e9e8 <nrfx_clock_calibration_start+0x44>
    if (!nrfx_clock_is_running(NRF_CLOCK_DOMAIN_HFCLK, &clk_src))
    {
        return NRFX_ERROR_INVALID_STATE;
    }

    if (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)
   3e9b4:	07d1      	lsls	r1, r2, #31
   3e9b6:	d517      	bpl.n	3e9e8 <nrfx_clock_calibration_start+0x44>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   3e9b8:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
   3e9bc:	03d2      	lsls	r2, r2, #15
   3e9be:	d513      	bpl.n	3e9e8 <nrfx_clock_calibration_start+0x44>
    if (!nrfx_clock_is_running(NRF_CLOCK_DOMAIN_LFCLK, NULL))
    {
        return NRFX_ERROR_INVALID_STATE;
    }

    if (m_clock_cb.cal_state == CAL_STATE_IDLE)
   3e9c0:	490b      	ldr	r1, [pc, #44]	; (3e9f0 <nrfx_clock_calibration_start+0x4c>)
   3e9c2:	798a      	ldrb	r2, [r1, #6]
   3e9c4:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   3e9c8:	b982      	cbnz	r2, 3e9ec <nrfx_clock_calibration_start+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3e9ca:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
   3e9ce:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    nrfx_err_t err_code = NRFX_SUCCESS;
   3e9d2:	4808      	ldr	r0, [pc, #32]	; (3e9f4 <nrfx_clock_calibration_start+0x50>)
    p_reg->INTENSET = mask;
   3e9d4:	2208      	movs	r2, #8
   3e9d6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_DONE);
        nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_DONE_MASK);
        m_clock_cb.cal_state = CAL_STATE_CAL;
   3e9da:	2201      	movs	r2, #1
   3e9dc:	718a      	strb	r2, [r1, #6]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_192)
        *(volatile uint32_t *)0x40000C34 = 0x00000002;
   3e9de:	2102      	movs	r1, #2
   3e9e0:	f8c3 1c34 	str.w	r1, [r3, #3124]	; 0xc34
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3e9e4:	611a      	str	r2, [r3, #16]
}
   3e9e6:	4770      	bx	lr
        return NRFX_ERROR_INVALID_STATE;
   3e9e8:	4803      	ldr	r0, [pc, #12]	; (3e9f8 <nrfx_clock_calibration_start+0x54>)
   3e9ea:	4770      	bx	lr
#endif
        nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_CAL);
    }
    else
    {
        err_code = NRFX_ERROR_BUSY;
   3e9ec:	4803      	ldr	r0, [pc, #12]	; (3e9fc <nrfx_clock_calibration_start+0x58>)

    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   3e9ee:	4770      	bx	lr
   3e9f0:	200036d0 	.word	0x200036d0
   3e9f4:	0bad0000 	.word	0x0bad0000
   3e9f8:	0bad0005 	.word	0x0bad0005
   3e9fc:	0bad000b 	.word	0x0bad000b

0003ea00 <nrfx_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   3ea00:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   3ea02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3ea06:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   3ea0a:	b16a      	cbz	r2, 3ea28 <nrfx_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3ea0c:	2200      	movs	r2, #0
   3ea0e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   3ea12:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   3ea16:	2201      	movs	r2, #1
   3ea18:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   3ea1c:	4b18      	ldr	r3, [pc, #96]	; (3ea80 <nrfx_clock_irq_handler+0x80>)
   3ea1e:	7958      	ldrb	r0, [r3, #5]
   3ea20:	b910      	cbnz	r0, 3ea28 <nrfx_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   3ea22:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   3ea24:	681b      	ldr	r3, [r3, #0]
   3ea26:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   3ea28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3ea2c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   3ea30:	b15a      	cbz	r2, 3ea4a <nrfx_clock_irq_handler+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3ea32:	2200      	movs	r2, #0
   3ea34:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   3ea38:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENCLR = mask;
   3ea3c:	2202      	movs	r2, #2
   3ea3e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   3ea42:	4b0f      	ldr	r3, [pc, #60]	; (3ea80 <nrfx_clock_irq_handler+0x80>)
   3ea44:	2001      	movs	r0, #1
   3ea46:	681b      	ldr	r3, [r3, #0]
   3ea48:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   3ea4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3ea4e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CTTO);
    }
#endif // NRF_CLOCK_HAS_CALIBRATION_TIMER && NRFX_CHECK(NRFX_CLOCK_CONFIG_CT_ENABLED)

    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_DONE) &&
   3ea52:	b1a2      	cbz	r2, 3ea7e <nrfx_clock_irq_handler+0x7e>
    return p_reg->INTENSET & mask;
   3ea54:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
   3ea58:	0712      	lsls	r2, r2, #28
   3ea5a:	d510      	bpl.n	3ea7e <nrfx_clock_irq_handler+0x7e>
        nrf_clock_int_enable_check(NRF_CLOCK, NRF_CLOCK_INT_DONE_MASK))
    {
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_192)
        *(volatile uint32_t *)0x40000C34 = 0x00000000;
   3ea5c:	2200      	movs	r2, #0
   3ea5e:	f8c3 2c34 	str.w	r2, [r3, #3124]	; 0xc34
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3ea62:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
   3ea66:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
    p_reg->INTENCLR = mask;
   3ea6a:	2108      	movs	r1, #8
   3ea6c:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
#endif
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_DONE);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_DONE");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_DONE_MASK);
        m_clock_cb.cal_state = CAL_STATE_IDLE;
   3ea70:	4b03      	ldr	r3, [pc, #12]	; (3ea80 <nrfx_clock_irq_handler+0x80>)
   3ea72:	719a      	strb	r2, [r3, #6]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   3ea74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
   3ea78:	681b      	ldr	r3, [r3, #0]
   3ea7a:	2003      	movs	r0, #3
   3ea7c:	4718      	bx	r3
}
   3ea7e:	bd10      	pop	{r4, pc}
   3ea80:	200036d0 	.word	0x200036d0

0003ea84 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   3ea84:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   3ea86:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   3ea8a:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
   3ea8c:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   3ea8e:	6002      	str	r2, [r0, #0]
}
   3ea90:	4802      	ldr	r0, [pc, #8]	; (3ea9c <nrf_gpio_pin_port_decode+0x18>)
   3ea92:	bf18      	it	ne
   3ea94:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   3ea98:	4770      	bx	lr
   3ea9a:	bf00      	nop
   3ea9c:	50000300 	.word	0x50000300

0003eaa0 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   3eaa0:	4b03      	ldr	r3, [pc, #12]	; (3eab0 <pin_in_use_by_te+0x10>)
   3eaa2:	3008      	adds	r0, #8
   3eaa4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   3eaa8:	f3c0 1040 	ubfx	r0, r0, #5, #1
   3eaac:	4770      	bx	lr
   3eaae:	bf00      	nop
   3eab0:	200008b0 	.word	0x200008b0

0003eab4 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   3eab4:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   3eab6:	f100 0308 	add.w	r3, r0, #8
   3eaba:	4c0c      	ldr	r4, [pc, #48]	; (3eaec <call_handler+0x38>)
   3eabc:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   3eac0:	05da      	lsls	r2, r3, #23
{
   3eac2:	4605      	mov	r5, r0
   3eac4:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   3eac6:	d507      	bpl.n	3ead8 <call_handler+0x24>
   3eac8:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   3eacc:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   3ead0:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   3ead4:	6852      	ldr	r2, [r2, #4]
   3ead6:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   3ead8:	68a3      	ldr	r3, [r4, #8]
   3eada:	b12b      	cbz	r3, 3eae8 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   3eadc:	68e2      	ldr	r2, [r4, #12]
   3eade:	4631      	mov	r1, r6
   3eae0:	4628      	mov	r0, r5
    }
}
   3eae2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   3eae6:	4718      	bx	r3
}
   3eae8:	bd70      	pop	{r4, r5, r6, pc}
   3eaea:	bf00      	nop
   3eaec:	200008b0 	.word	0x200008b0

0003eaf0 <release_handler>:
{
   3eaf0:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   3eaf2:	4a12      	ldr	r2, [pc, #72]	; (3eb3c <release_handler+0x4c>)
   3eaf4:	3008      	adds	r0, #8
   3eaf6:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   3eafa:	05d9      	lsls	r1, r3, #23
   3eafc:	d51b      	bpl.n	3eb36 <release_handler+0x46>
   3eafe:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   3eb02:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   3eb06:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   3eb0a:	f102 040e 	add.w	r4, r2, #14
   3eb0e:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   3eb10:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   3eb14:	f413 7f80 	tst.w	r3, #256	; 0x100
   3eb18:	d003      	beq.n	3eb22 <release_handler+0x32>
   3eb1a:	f3c3 2343 	ubfx	r3, r3, #9, #4
   3eb1e:	4299      	cmp	r1, r3
   3eb20:	d009      	beq.n	3eb36 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   3eb22:	3001      	adds	r0, #1
   3eb24:	2830      	cmp	r0, #48	; 0x30
   3eb26:	d1f3      	bne.n	3eb10 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   3eb28:	2300      	movs	r3, #0
   3eb2a:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   3eb2e:	4804      	ldr	r0, [pc, #16]	; (3eb40 <release_handler+0x50>)
}
   3eb30:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   3eb32:	f7ff be8f 	b.w	3e854 <nrfx_flag32_free>
}
   3eb36:	bc10      	pop	{r4}
   3eb38:	4770      	bx	lr
   3eb3a:	bf00      	nop
   3eb3c:	200008b0 	.word	0x200008b0
   3eb40:	20000924 	.word	0x20000924

0003eb44 <pin_handler_trigger_uninit>:
{
   3eb44:	b538      	push	{r3, r4, r5, lr}
   3eb46:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   3eb48:	f7ff ffaa 	bl	3eaa0 <pin_in_use_by_te>
   3eb4c:	4c09      	ldr	r4, [pc, #36]	; (3eb74 <pin_handler_trigger_uninit+0x30>)
   3eb4e:	f102 0508 	add.w	r5, r2, #8
   3eb52:	b140      	cbz	r0, 3eb66 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   3eb54:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   3eb58:	4907      	ldr	r1, [pc, #28]	; (3eb78 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   3eb5a:	0b5b      	lsrs	r3, r3, #13
   3eb5c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   3eb60:	2000      	movs	r0, #0
   3eb62:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   3eb66:	4610      	mov	r0, r2
   3eb68:	f7ff ffc2 	bl	3eaf0 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   3eb6c:	2300      	movs	r3, #0
   3eb6e:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   3eb72:	bd38      	pop	{r3, r4, r5, pc}
   3eb74:	200008b0 	.word	0x200008b0
   3eb78:	40006000 	.word	0x40006000

0003eb7c <nrfx_gpiote_input_configure>:
{
   3eb7c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   3eb80:	4604      	mov	r4, r0
   3eb82:	4616      	mov	r6, r2
   3eb84:	461d      	mov	r5, r3
    if (p_input_config)
   3eb86:	b301      	cbz	r1, 3ebca <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   3eb88:	4f4e      	ldr	r7, [pc, #312]	; (3ecc4 <nrfx_gpiote_input_configure+0x148>)
   3eb8a:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   3eb8e:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
   3eb92:	079b      	lsls	r3, r3, #30
   3eb94:	d502      	bpl.n	3eb9c <nrfx_gpiote_input_configure+0x20>
   3eb96:	f7ff ff83 	bl	3eaa0 <pin_in_use_by_te>
   3eb9a:	bb10      	cbnz	r0, 3ebe2 <nrfx_gpiote_input_configure+0x66>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   3eb9c:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   3eb9e:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   3eba2:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   3eba6:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   3ebaa:	f10d 020f 	add.w	r2, sp, #15
   3ebae:	460b      	mov	r3, r1
   3ebb0:	4620      	mov	r0, r4
   3ebb2:	f10d 010e 	add.w	r1, sp, #14
   3ebb6:	f008 fd7c 	bl	476b2 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   3ebba:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
   3ebbe:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   3ebc2:	f043 0301 	orr.w	r3, r3, #1
   3ebc6:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
   3ebca:	b346      	cbz	r6, 3ec1e <nrfx_gpiote_input_configure+0xa2>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   3ebcc:	4b3d      	ldr	r3, [pc, #244]	; (3ecc4 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   3ebce:	f896 c000 	ldrb.w	ip, [r6]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   3ebd2:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   3ebd4:	f104 0708 	add.w	r7, r4, #8
   3ebd8:	f833 1017 	ldrh.w	r1, [r3, r7, lsl #1]
        if (pin_is_output(pin))
   3ebdc:	0788      	lsls	r0, r1, #30
   3ebde:	d502      	bpl.n	3ebe6 <nrfx_gpiote_input_configure+0x6a>
            if (use_evt)
   3ebe0:	b1aa      	cbz	r2, 3ec0e <nrfx_gpiote_input_configure+0x92>
            return NRFX_ERROR_INVALID_PARAM;
   3ebe2:	4839      	ldr	r0, [pc, #228]	; (3ecc8 <nrfx_gpiote_input_configure+0x14c>)
   3ebe4:	e01d      	b.n	3ec22 <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   3ebe6:	f021 0120 	bic.w	r1, r1, #32
   3ebea:	04c9      	lsls	r1, r1, #19
   3ebec:	0cc9      	lsrs	r1, r1, #19
   3ebee:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
            if (use_evt)
   3ebf2:	b162      	cbz	r2, 3ec0e <nrfx_gpiote_input_configure+0x92>
                if (!edge)
   3ebf4:	f1bc 0f03 	cmp.w	ip, #3
   3ebf8:	d8f3      	bhi.n	3ebe2 <nrfx_gpiote_input_configure+0x66>
                uint8_t ch = *p_trigger_config->p_in_channel;
   3ebfa:	6872      	ldr	r2, [r6, #4]
   3ebfc:	7816      	ldrb	r6, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   3ebfe:	f1bc 0f00 	cmp.w	ip, #0
   3ec02:	d111      	bne.n	3ec28 <nrfx_gpiote_input_configure+0xac>
   3ec04:	4a31      	ldr	r2, [pc, #196]	; (3eccc <nrfx_gpiote_input_configure+0x150>)
   3ec06:	f506 76a2 	add.w	r6, r6, #324	; 0x144
   3ec0a:	f842 c026 	str.w	ip, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   3ec0e:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
   3ec12:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   3ec16:	ea42 028c 	orr.w	r2, r2, ip, lsl #2
   3ec1a:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
    if (p_handler_config)
   3ec1e:	bb45      	cbnz	r5, 3ec72 <nrfx_gpiote_input_configure+0xf6>
        err = NRFX_SUCCESS;
   3ec20:	482b      	ldr	r0, [pc, #172]	; (3ecd0 <nrfx_gpiote_input_configure+0x154>)
}
   3ec22:	b004      	add	sp, #16
   3ec24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   3ec28:	00b2      	lsls	r2, r6, #2
   3ec2a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   3ec2e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   3ec32:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
   3ec36:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   3ec3a:	f020 0003 	bic.w	r0, r0, #3
   3ec3e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   3ec42:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   3ec46:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
   3ec4a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   3ec4e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   3ec52:	0220      	lsls	r0, r4, #8
   3ec54:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   3ec58:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
   3ec5c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   3ec60:	ea40 000e 	orr.w	r0, r0, lr
   3ec64:	f041 0120 	orr.w	r1, r1, #32
   3ec68:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
   3ec6c:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   3ec70:	e7cd      	b.n	3ec0e <nrfx_gpiote_input_configure+0x92>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   3ec72:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   3ec76:	4620      	mov	r0, r4
   3ec78:	f7ff ff3a 	bl	3eaf0 <release_handler>
    if (!handler)
   3ec7c:	2e00      	cmp	r6, #0
   3ec7e:	d0cf      	beq.n	3ec20 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   3ec80:	4d10      	ldr	r5, [pc, #64]	; (3ecc4 <nrfx_gpiote_input_configure+0x148>)
   3ec82:	e9d5 2300 	ldrd	r2, r3, [r5]
   3ec86:	4296      	cmp	r6, r2
   3ec88:	d101      	bne.n	3ec8e <nrfx_gpiote_input_configure+0x112>
   3ec8a:	429f      	cmp	r7, r3
   3ec8c:	d018      	beq.n	3ecc0 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   3ec8e:	4811      	ldr	r0, [pc, #68]	; (3ecd4 <nrfx_gpiote_input_configure+0x158>)
   3ec90:	f10d 010f 	add.w	r1, sp, #15
   3ec94:	f7ff fdbe 	bl	3e814 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   3ec98:	4b0d      	ldr	r3, [pc, #52]	; (3ecd0 <nrfx_gpiote_input_configure+0x154>)
   3ec9a:	4298      	cmp	r0, r3
   3ec9c:	d1c1      	bne.n	3ec22 <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
   3ec9e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   3eca2:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   3eca6:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   3ecaa:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   3ecac:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   3ecae:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   3ecb2:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   3ecb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   3ecba:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   3ecbe:	e7af      	b.n	3ec20 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   3ecc0:	2200      	movs	r2, #0
   3ecc2:	e7ee      	b.n	3eca2 <nrfx_gpiote_input_configure+0x126>
   3ecc4:	200008b0 	.word	0x200008b0
   3ecc8:	0bad0004 	.word	0x0bad0004
   3eccc:	40006000 	.word	0x40006000
   3ecd0:	0bad0000 	.word	0x0bad0000
   3ecd4:	20000924 	.word	0x20000924

0003ecd8 <nrfx_gpiote_output_configure>:
{
   3ecd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   3ecda:	4604      	mov	r4, r0
   3ecdc:	b085      	sub	sp, #20
   3ecde:	4615      	mov	r5, r2
    if (p_config)
   3ece0:	b319      	cbz	r1, 3ed2a <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   3ece2:	4e33      	ldr	r6, [pc, #204]	; (3edb0 <nrfx_gpiote_output_configure+0xd8>)
   3ece4:	f100 0708 	add.w	r7, r0, #8
   3ece8:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   3ecec:	0793      	lsls	r3, r2, #30
   3ecee:	d403      	bmi.n	3ecf8 <nrfx_gpiote_output_configure+0x20>
   3ecf0:	f7ff fed6 	bl	3eaa0 <pin_in_use_by_te>
   3ecf4:	2800      	cmp	r0, #0
   3ecf6:	d158      	bne.n	3edaa <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   3ecf8:	f012 0f1c 	tst.w	r2, #28
   3ecfc:	d002      	beq.n	3ed04 <nrfx_gpiote_output_configure+0x2c>
   3ecfe:	784b      	ldrb	r3, [r1, #1]
   3ed00:	2b01      	cmp	r3, #1
   3ed02:	d052      	beq.n	3edaa <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   3ed04:	2301      	movs	r3, #1
   3ed06:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   3ed0a:	2300      	movs	r3, #0
   3ed0c:	e9cd 1300 	strd	r1, r3, [sp]
   3ed10:	1c4a      	adds	r2, r1, #1
   3ed12:	1c8b      	adds	r3, r1, #2
   3ed14:	4620      	mov	r0, r4
   3ed16:	f10d 010f 	add.w	r1, sp, #15
   3ed1a:	f008 fcca 	bl	476b2 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   3ed1e:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   3ed22:	f043 0303 	orr.w	r3, r3, #3
   3ed26:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   3ed2a:	b915      	cbnz	r5, 3ed32 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   3ed2c:	4821      	ldr	r0, [pc, #132]	; (3edb4 <nrfx_gpiote_output_configure+0xdc>)
}
   3ed2e:	b005      	add	sp, #20
   3ed30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   3ed32:	4e1f      	ldr	r6, [pc, #124]	; (3edb0 <nrfx_gpiote_output_configure+0xd8>)
   3ed34:	f104 0708 	add.w	r7, r4, #8
   3ed38:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   3ed3c:	0783      	lsls	r3, r0, #30
   3ed3e:	d534      	bpl.n	3edaa <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
   3ed40:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   3ed44:	4661      	mov	r1, ip
   3ed46:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   3ed48:	f020 0020 	bic.w	r0, r0, #32
   3ed4c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   3ed50:	04c0      	lsls	r0, r0, #19
   3ed52:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   3ed56:	0cc0      	lsrs	r0, r0, #19
   3ed58:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   3ed5c:	2300      	movs	r3, #0
   3ed5e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   3ed62:	786a      	ldrb	r2, [r5, #1]
   3ed64:	2a00      	cmp	r2, #0
   3ed66:	d0e1      	beq.n	3ed2c <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   3ed68:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   3ed6c:	78ad      	ldrb	r5, [r5, #2]
   3ed6e:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   3ed72:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   3ed76:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   3ed7a:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   3ed7e:	0223      	lsls	r3, r4, #8
   3ed80:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   3ed84:	0412      	lsls	r2, r2, #16
   3ed86:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   3ed8a:	ea43 030e 	orr.w	r3, r3, lr
   3ed8e:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   3ed90:	052a      	lsls	r2, r5, #20
   3ed92:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   3ed96:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   3ed9a:	4313      	orrs	r3, r2
   3ed9c:	f040 0020 	orr.w	r0, r0, #32
   3eda0:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   3eda4:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   3eda8:	e7c0      	b.n	3ed2c <nrfx_gpiote_output_configure+0x54>
{
   3edaa:	4803      	ldr	r0, [pc, #12]	; (3edb8 <nrfx_gpiote_output_configure+0xe0>)
   3edac:	e7bf      	b.n	3ed2e <nrfx_gpiote_output_configure+0x56>
   3edae:	bf00      	nop
   3edb0:	200008b0 	.word	0x200008b0
   3edb4:	0bad0000 	.word	0x0bad0000
   3edb8:	0bad0004 	.word	0x0bad0004

0003edbc <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   3edbc:	4b01      	ldr	r3, [pc, #4]	; (3edc4 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   3edbe:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   3edc2:	4770      	bx	lr
   3edc4:	200008b0 	.word	0x200008b0

0003edc8 <nrfx_gpiote_channel_get>:
{
   3edc8:	b508      	push	{r3, lr}
   3edca:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   3edcc:	f7ff fe68 	bl	3eaa0 <pin_in_use_by_te>
   3edd0:	b138      	cbz	r0, 3ede2 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   3edd2:	4b05      	ldr	r3, [pc, #20]	; (3ede8 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   3edd4:	4805      	ldr	r0, [pc, #20]	; (3edec <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   3edd6:	3208      	adds	r2, #8
   3edd8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   3eddc:	0b5b      	lsrs	r3, r3, #13
   3edde:	700b      	strb	r3, [r1, #0]
}
   3ede0:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   3ede2:	4803      	ldr	r0, [pc, #12]	; (3edf0 <nrfx_gpiote_channel_get+0x28>)
   3ede4:	e7fc      	b.n	3ede0 <nrfx_gpiote_channel_get+0x18>
   3ede6:	bf00      	nop
   3ede8:	200008b0 	.word	0x200008b0
   3edec:	0bad0000 	.word	0x0bad0000
   3edf0:	0bad0004 	.word	0x0bad0004

0003edf4 <nrfx_gpiote_init>:
{
   3edf4:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   3edf6:	4c0f      	ldr	r4, [pc, #60]	; (3ee34 <nrfx_gpiote_init+0x40>)
   3edf8:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   3edfc:	b9bd      	cbnz	r5, 3ee2e <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   3edfe:	2260      	movs	r2, #96	; 0x60
   3ee00:	4629      	mov	r1, r5
   3ee02:	f104 0010 	add.w	r0, r4, #16
   3ee06:	f005 fa92 	bl	4432e <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   3ee0a:	2006      	movs	r0, #6
   3ee0c:	f7eb fa74 	bl	2a2f8 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   3ee10:	4b09      	ldr	r3, [pc, #36]	; (3ee38 <nrfx_gpiote_init+0x44>)
    return err_code;
   3ee12:	480a      	ldr	r0, [pc, #40]	; (3ee3c <nrfx_gpiote_init+0x48>)
   3ee14:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   3ee18:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   3ee1c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   3ee20:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   3ee24:	2301      	movs	r3, #1
   3ee26:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   3ee2a:	6763      	str	r3, [r4, #116]	; 0x74
}
   3ee2c:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   3ee2e:	4804      	ldr	r0, [pc, #16]	; (3ee40 <nrfx_gpiote_init+0x4c>)
   3ee30:	e7fc      	b.n	3ee2c <nrfx_gpiote_init+0x38>
   3ee32:	bf00      	nop
   3ee34:	200008b0 	.word	0x200008b0
   3ee38:	40006000 	.word	0x40006000
   3ee3c:	0bad0000 	.word	0x0bad0000
   3ee40:	0bad0005 	.word	0x0bad0005

0003ee44 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   3ee44:	4b03      	ldr	r3, [pc, #12]	; (3ee54 <nrfx_gpiote_is_init+0x10>)
   3ee46:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   3ee4a:	3800      	subs	r0, #0
   3ee4c:	bf18      	it	ne
   3ee4e:	2001      	movne	r0, #1
   3ee50:	4770      	bx	lr
   3ee52:	bf00      	nop
   3ee54:	200008b0 	.word	0x200008b0

0003ee58 <nrfx_gpiote_channel_free>:
{
   3ee58:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   3ee5a:	4801      	ldr	r0, [pc, #4]	; (3ee60 <nrfx_gpiote_channel_free+0x8>)
   3ee5c:	f7ff bcfa 	b.w	3e854 <nrfx_flag32_free>
   3ee60:	20000920 	.word	0x20000920

0003ee64 <nrfx_gpiote_channel_alloc>:
{
   3ee64:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   3ee66:	4801      	ldr	r0, [pc, #4]	; (3ee6c <nrfx_gpiote_channel_alloc+0x8>)
   3ee68:	f7ff bcd4 	b.w	3e814 <nrfx_flag32_alloc>
   3ee6c:	20000920 	.word	0x20000920

0003ee70 <nrfx_gpiote_trigger_enable>:
{
   3ee70:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3ee72:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   3ee74:	f7ff fe14 	bl	3eaa0 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   3ee78:	f104 0208 	add.w	r2, r4, #8
   3ee7c:	4b1e      	ldr	r3, [pc, #120]	; (3eef8 <nrfx_gpiote_trigger_enable+0x88>)
   3ee7e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   3ee82:	b1e8      	cbz	r0, 3eec0 <nrfx_gpiote_trigger_enable+0x50>
   3ee84:	f013 0502 	ands.w	r5, r3, #2
   3ee88:	d11a      	bne.n	3eec0 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   3ee8a:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   3ee8c:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   3ee8e:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   3ee92:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   3ee96:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   3ee9a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   3ee9e:	6005      	str	r5, [r0, #0]
   3eea0:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   3eea2:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   3eea6:	f040 0001 	orr.w	r0, r0, #1
   3eeaa:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   3eeae:	b129      	cbz	r1, 3eebc <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   3eeb0:	2201      	movs	r2, #1
   3eeb2:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   3eeb6:	4a11      	ldr	r2, [pc, #68]	; (3eefc <nrfx_gpiote_trigger_enable+0x8c>)
   3eeb8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   3eebc:	b003      	add	sp, #12
   3eebe:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   3eec0:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   3eec4:	2b04      	cmp	r3, #4
   3eec6:	d012      	beq.n	3eeee <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   3eec8:	2b05      	cmp	r3, #5
   3eeca:	d012      	beq.n	3eef2 <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3eecc:	a801      	add	r0, sp, #4
   3eece:	9401      	str	r4, [sp, #4]
   3eed0:	f7ff fdd8 	bl	3ea84 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   3eed4:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   3eed6:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   3eeda:	40d9      	lsrs	r1, r3
   3eedc:	f001 0101 	and.w	r1, r1, #1
   3eee0:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   3eee2:	4620      	mov	r0, r4
}
   3eee4:	b003      	add	sp, #12
   3eee6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   3eeea:	f008 bc2b 	b.w	47744 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   3eeee:	2103      	movs	r1, #3
   3eef0:	e7f7      	b.n	3eee2 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   3eef2:	2102      	movs	r1, #2
   3eef4:	e7f5      	b.n	3eee2 <nrfx_gpiote_trigger_enable+0x72>
   3eef6:	bf00      	nop
   3eef8:	200008b0 	.word	0x200008b0
   3eefc:	40006000 	.word	0x40006000

0003ef00 <nrfx_gpiote_trigger_disable>:
{
   3ef00:	b508      	push	{r3, lr}
   3ef02:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   3ef04:	f7ff fdcc 	bl	3eaa0 <pin_in_use_by_te>
   3ef08:	b1c0      	cbz	r0, 3ef3c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   3ef0a:	f102 0108 	add.w	r1, r2, #8
   3ef0e:	4b0e      	ldr	r3, [pc, #56]	; (3ef48 <nrfx_gpiote_trigger_disable+0x48>)
   3ef10:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   3ef14:	0799      	lsls	r1, r3, #30
   3ef16:	d411      	bmi.n	3ef3c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   3ef18:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   3ef1a:	2201      	movs	r2, #1
   3ef1c:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   3ef1e:	009b      	lsls	r3, r3, #2
   3ef20:	490a      	ldr	r1, [pc, #40]	; (3ef4c <nrfx_gpiote_trigger_disable+0x4c>)
   3ef22:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3ef26:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   3ef2a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   3ef2e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   3ef32:	f022 0203 	bic.w	r2, r2, #3
   3ef36:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   3ef3a:	bd08      	pop	{r3, pc}
   3ef3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   3ef40:	2100      	movs	r1, #0
   3ef42:	4610      	mov	r0, r2
   3ef44:	f008 bbfe 	b.w	47744 <nrf_gpio_cfg_sense_set>
   3ef48:	200008b0 	.word	0x200008b0
   3ef4c:	40006000 	.word	0x40006000

0003ef50 <nrfx_gpiote_pin_uninit>:
{
   3ef50:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   3ef52:	4b0e      	ldr	r3, [pc, #56]	; (3ef8c <nrfx_gpiote_pin_uninit+0x3c>)
   3ef54:	f100 0208 	add.w	r2, r0, #8
{
   3ef58:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   3ef5a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   3ef5e:	07db      	lsls	r3, r3, #31
   3ef60:	d511      	bpl.n	3ef86 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   3ef62:	f7ff ffcd 	bl	3ef00 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   3ef66:	4620      	mov	r0, r4
   3ef68:	f7ff fdec 	bl	3eb44 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3ef6c:	a801      	add	r0, sp, #4
   3ef6e:	9401      	str	r4, [sp, #4]
   3ef70:	f7ff fd88 	bl	3ea84 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   3ef74:	9b01      	ldr	r3, [sp, #4]
   3ef76:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   3ef7a:	2202      	movs	r2, #2
   3ef7c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   3ef80:	4803      	ldr	r0, [pc, #12]	; (3ef90 <nrfx_gpiote_pin_uninit+0x40>)
}
   3ef82:	b002      	add	sp, #8
   3ef84:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   3ef86:	4803      	ldr	r0, [pc, #12]	; (3ef94 <nrfx_gpiote_pin_uninit+0x44>)
   3ef88:	e7fb      	b.n	3ef82 <nrfx_gpiote_pin_uninit+0x32>
   3ef8a:	bf00      	nop
   3ef8c:	200008b0 	.word	0x200008b0
   3ef90:	0bad0000 	.word	0x0bad0000
   3ef94:	0bad0004 	.word	0x0bad0004

0003ef98 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   3ef98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ef9c:	4b68      	ldr	r3, [pc, #416]	; (3f140 <__kernel_ram_size+0x48>)
    return p_reg->INTENSET & mask;
   3ef9e:	4869      	ldr	r0, [pc, #420]	; (3f144 <__kernel_ram_size+0x4c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   3efa0:	4969      	ldr	r1, [pc, #420]	; (3f148 <__kernel_ram_size+0x50>)
    uint32_t status = 0;
   3efa2:	2600      	movs	r6, #0
{
   3efa4:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   3efa6:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   3efa8:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3efaa:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   3efac:	b135      	cbz	r5, 3efbc <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   3efae:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   3efb2:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   3efb4:	bf1e      	ittt	ne
   3efb6:	601c      	strne	r4, [r3, #0]
   3efb8:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   3efba:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   3efbc:	3304      	adds	r3, #4
   3efbe:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   3efc0:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   3efc4:	d1f1      	bne.n	3efaa <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3efc6:	f8df 917c 	ldr.w	r9, [pc, #380]	; 3f144 <__kernel_ram_size+0x4c>
   3efca:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   3efce:	2b00      	cmp	r3, #0
   3efd0:	f000 8099 	beq.w	3f106 <__kernel_ram_size+0xe>
        *p_masks = gpio_regs[i]->LATCH;
   3efd4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   3efd8:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   3efdc:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   3efde:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   3efe2:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   3efe6:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   3efe8:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   3efec:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
   3eff0:	f10d 0a10 	add.w	sl, sp, #16
   3eff4:	ea4f 1348 	mov.w	r3, r8, lsl #5
   3eff8:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   3effa:	f04f 0b01 	mov.w	fp, #1
   3effe:	e049      	b.n	3f094 <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
   3f000:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   3f002:	4a52      	ldr	r2, [pc, #328]	; (3f14c <__kernel_ram_size+0x54>)
                uint32_t pin = NRF_CTZ(latch[i]);
   3f004:	fa94 f4a4 	rbit	r4, r4
   3f008:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   3f00c:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   3f00e:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   3f010:	f104 0308 	add.w	r3, r4, #8
   3f014:	9403      	str	r4, [sp, #12]
   3f016:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
   3f01a:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
   3f01e:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   3f022:	fa0b f202 	lsl.w	r2, fp, r2
   3f026:	ea23 0302 	bic.w	r3, r3, r2
   3f02a:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3f02e:	a803      	add	r0, sp, #12
   3f030:	f7ff fd28 	bl	3ea84 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   3f034:	9b03      	ldr	r3, [sp, #12]
   3f036:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   3f03a:	08b9      	lsrs	r1, r7, #2
   3f03c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   3f040:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   3f044:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   3f046:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   3f048:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   3f04c:	d52c      	bpl.n	3f0a8 <nrfx_gpiote_irq_handler+0x110>
        call_handler(pin, trigger);
   3f04e:	4620      	mov	r0, r4
   3f050:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   3f052:	b2dd      	uxtb	r5, r3
   3f054:	f7ff fd2e 	bl	3eab4 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3f058:	a803      	add	r0, sp, #12
   3f05a:	9403      	str	r4, [sp, #12]
   3f05c:	f7ff fd12 	bl	3ea84 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   3f060:	9b03      	ldr	r3, [sp, #12]
   3f062:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   3f066:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   3f06a:	f3c3 4301 	ubfx	r3, r3, #16, #2
   3f06e:	429d      	cmp	r5, r3
   3f070:	d107      	bne.n	3f082 <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   3f072:	2100      	movs	r1, #0
   3f074:	4620      	mov	r0, r4
   3f076:	f008 fb65 	bl	47744 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   3f07a:	4629      	mov	r1, r5
   3f07c:	4620      	mov	r0, r4
   3f07e:	f008 fb61 	bl	47744 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3f082:	a803      	add	r0, sp, #12
   3f084:	9403      	str	r4, [sp, #12]
   3f086:	f7ff fcfd 	bl	3ea84 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   3f08a:	9b03      	ldr	r3, [sp, #12]
   3f08c:	fa0b f303 	lsl.w	r3, fp, r3
   3f090:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   3f094:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
   3f098:	2c00      	cmp	r4, #0
   3f09a:	d1b1      	bne.n	3f000 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   3f09c:	f1b8 0f00 	cmp.w	r8, #0
   3f0a0:	d11d      	bne.n	3f0de <nrfx_gpiote_irq_handler+0x146>
   3f0a2:	f04f 0801 	mov.w	r8, #1
   3f0a6:	e7a5      	b.n	3eff4 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   3f0a8:	2b02      	cmp	r3, #2
   3f0aa:	d10c      	bne.n	3f0c6 <nrfx_gpiote_irq_handler+0x12e>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   3f0ac:	2103      	movs	r1, #3
   3f0ae:	4620      	mov	r0, r4
   3f0b0:	f008 fb48 	bl	47744 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   3f0b4:	f005 0305 	and.w	r3, r5, #5
   3f0b8:	2b01      	cmp	r3, #1
   3f0ba:	d1e2      	bne.n	3f082 <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
   3f0bc:	4639      	mov	r1, r7
   3f0be:	4620      	mov	r0, r4
   3f0c0:	f7ff fcf8 	bl	3eab4 <call_handler>
   3f0c4:	e7dd      	b.n	3f082 <nrfx_gpiote_irq_handler+0xea>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   3f0c6:	2102      	movs	r1, #2
   3f0c8:	4620      	mov	r0, r4
   3f0ca:	9301      	str	r3, [sp, #4]
   3f0cc:	f008 fb3a 	bl	47744 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   3f0d0:	2d03      	cmp	r5, #3
   3f0d2:	d0f3      	beq.n	3f0bc <nrfx_gpiote_irq_handler+0x124>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   3f0d4:	9b01      	ldr	r3, [sp, #4]
   3f0d6:	2b03      	cmp	r3, #3
   3f0d8:	d1d3      	bne.n	3f082 <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   3f0da:	2d02      	cmp	r5, #2
   3f0dc:	e7ed      	b.n	3f0ba <nrfx_gpiote_irq_handler+0x122>
        *p_masks = gpio_regs[i]->LATCH;
   3f0de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   3f0e2:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
   3f0e6:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
   3f0ea:	4919      	ldr	r1, [pc, #100]	; (3f150 <__kernel_ram_size+0x58>)
   3f0ec:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
   3f0f0:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   3f0f2:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   3f0f6:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
   3f0fa:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
   3f0fc:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
   3f0fe:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
   3f102:	f47f af73 	bne.w	3efec <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   3f106:	2401      	movs	r4, #1
    while (mask)
   3f108:	b916      	cbnz	r6, 3f110 <__kernel_ram_size+0x18>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   3f10a:	b007      	add	sp, #28
   3f10c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   3f110:	fa96 f3a6 	rbit	r3, r6
   3f114:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   3f118:	fa04 f203 	lsl.w	r2, r4, r3
   3f11c:	009b      	lsls	r3, r3, #2
   3f11e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3f122:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   3f126:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   3f12a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   3f12e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   3f132:	f3c0 2005 	ubfx	r0, r0, #8, #6
   3f136:	f3c1 4101 	ubfx	r1, r1, #16, #2
   3f13a:	f7ff fcbb 	bl	3eab4 <call_handler>
   3f13e:	e7e3      	b.n	3f108 <__kernel_ram_size+0x10>
   3f140:	40006100 	.word	0x40006100
   3f144:	40006000 	.word	0x40006000
   3f148:	40006120 	.word	0x40006120
   3f14c:	200008b0 	.word	0x200008b0
   3f150:	50000300 	.word	0x50000300

0003f154 <nvmc_word_write>:
   3f154:	4a04      	ldr	r2, [pc, #16]	; (3f168 <nvmc_word_write+0x14>)
   3f156:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   3f15a:	07db      	lsls	r3, r3, #31
   3f15c:	d5fb      	bpl.n	3f156 <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   3f15e:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   3f160:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   3f164:	4770      	bx	lr
   3f166:	bf00      	nop
   3f168:	4001e000 	.word	0x4001e000

0003f16c <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   3f16c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   3f170:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   3f172:	fbb0 f3f2 	udiv	r3, r0, r2
   3f176:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   3f17a:	b973      	cbnz	r3, 3f19a <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   3f17c:	4b08      	ldr	r3, [pc, #32]	; (3f1a0 <nrfx_nvmc_page_erase+0x34>)
   3f17e:	2202      	movs	r2, #2
   3f180:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   3f184:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   3f188:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   3f18c:	07d2      	lsls	r2, r2, #31
   3f18e:	d5fb      	bpl.n	3f188 <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
   3f190:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   3f192:	4804      	ldr	r0, [pc, #16]	; (3f1a4 <nrfx_nvmc_page_erase+0x38>)
   3f194:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   3f198:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   3f19a:	4803      	ldr	r0, [pc, #12]	; (3f1a8 <nrfx_nvmc_page_erase+0x3c>)
}
   3f19c:	4770      	bx	lr
   3f19e:	bf00      	nop
   3f1a0:	4001e000 	.word	0x4001e000
   3f1a4:	0bad0000 	.word	0x0bad0000
   3f1a8:	0bad000a 	.word	0x0bad000a

0003f1ac <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   3f1ac:	b510      	push	{r4, lr}
   3f1ae:	4c05      	ldr	r4, [pc, #20]	; (3f1c4 <nrfx_nvmc_word_write+0x18>)
   3f1b0:	2301      	movs	r3, #1
   3f1b2:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   3f1b6:	f7ff ffcd 	bl	3f154 <nvmc_word_write>
   3f1ba:	2300      	movs	r3, #0
   3f1bc:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   3f1c0:	bd10      	pop	{r4, pc}
   3f1c2:	bf00      	nop
   3f1c4:	4001e000 	.word	0x4001e000

0003f1c8 <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
   3f1c8:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
   3f1ca:	4c18      	ldr	r4, [pc, #96]	; (3f22c <nrfx_power_init+0x64>)
   3f1cc:	7823      	ldrb	r3, [r4, #0]
   3f1ce:	bb53      	cbnz	r3, 3f226 <nrfx_power_init+0x5e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
   3f1d0:	7802      	ldrb	r2, [r0, #0]
    if (enable && nrf52_errata_197())
   3f1d2:	f3c2 0340 	ubfx	r3, r2, #1, #1
   3f1d6:	0792      	lsls	r2, r2, #30
   3f1d8:	d512      	bpl.n	3f200 <nrfx_power_init+0x38>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   3f1da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   3f1de:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   3f1e2:	2a08      	cmp	r2, #8
   3f1e4:	d10b      	bne.n	3f1fe <nrfx_power_init+0x36>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   3f1e6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   3f1ea:	2b05      	cmp	r3, #5
   3f1ec:	d807      	bhi.n	3f1fe <nrfx_power_init+0x36>
   3f1ee:	4a10      	ldr	r2, [pc, #64]	; (3f230 <nrfx_power_init+0x68>)
   3f1f0:	5cd3      	ldrb	r3, [r2, r3]
   3f1f2:	b123      	cbz	r3, 3f1fe <nrfx_power_init+0x36>
        *(volatile uint32_t *)0x40000638ul = 1ul;
   3f1f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3f1f8:	2201      	movs	r2, #1
   3f1fa:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   3f1fe:	2301      	movs	r3, #1
   3f200:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   3f204:	f8c2 3580 	str.w	r3, [r2, #1408]	; 0x580
#elif NRF_REGULATORS_HAS_DCDCEN_VDDH
    nrf_regulators_dcdcen_vddh_set(NRF_REGULATORS, p_config->dcdcenhv);
#endif

#if NRF_POWER_HAS_DCDCEN
    nrf_power_dcdcen_set(NRF_POWER, p_config->dcdcen);
   3f208:	7803      	ldrb	r3, [r0, #0]
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   3f20a:	f003 0301 	and.w	r3, r3, #1
   3f20e:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   3f212:	2000      	movs	r0, #0
   3f214:	f7eb f892 	bl	2a33c <arch_irq_is_enabled>
   3f218:	b908      	cbnz	r0, 3f21e <nrfx_power_init+0x56>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   3f21a:	f7eb f86d 	bl	2a2f8 <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
   3f21e:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
   3f220:	4804      	ldr	r0, [pc, #16]	; (3f234 <nrfx_power_init+0x6c>)
    m_initialized = true;
   3f222:	7023      	strb	r3, [r4, #0]
}
   3f224:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   3f226:	4804      	ldr	r0, [pc, #16]	; (3f238 <nrfx_power_init+0x70>)
   3f228:	e7fc      	b.n	3f224 <nrfx_power_init+0x5c>
   3f22a:	bf00      	nop
   3f22c:	20003b20 	.word	0x20003b20
   3f230:	0004ab16 	.word	0x0004ab16
   3f234:	0bad0000 	.word	0x0bad0000
   3f238:	0bad000c 	.word	0x0bad000c

0003f23c <nrfx_power_usbevt_uninit>:
    p_reg->INTENCLR = mask;
   3f23c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3f240:	f44f 7260 	mov.w	r2, #896	; 0x380
   3f244:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}

void nrfx_power_usbevt_uninit(void)
{
    nrfx_power_usbevt_disable();
    m_usbevt_handler = NULL;
   3f248:	4b01      	ldr	r3, [pc, #4]	; (3f250 <nrfx_power_usbevt_uninit+0x14>)
   3f24a:	2200      	movs	r2, #0
   3f24c:	601a      	str	r2, [r3, #0]
}
   3f24e:	4770      	bx	lr
   3f250:	200036d8 	.word	0x200036d8

0003f254 <nrfx_power_usbevt_init>:
{
   3f254:	b508      	push	{r3, lr}
    nrfx_power_usbevt_uninit();
   3f256:	f7ff fff1 	bl	3f23c <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
   3f25a:	6803      	ldr	r3, [r0, #0]
   3f25c:	b10b      	cbz	r3, 3f262 <nrfx_power_usbevt_init+0xe>
        m_usbevt_handler = p_config->handler;
   3f25e:	4a01      	ldr	r2, [pc, #4]	; (3f264 <nrfx_power_usbevt_init+0x10>)
   3f260:	6013      	str	r3, [r2, #0]
}
   3f262:	bd08      	pop	{r3, pc}
   3f264:	200036d8 	.word	0x200036d8

0003f268 <nrfx_power_irq_handler>:

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
   3f268:	b510      	push	{r4, lr}
    return p_reg->INTENSET;
   3f26a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3f26e:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   3f272:	0762      	lsls	r2, r4, #29
   3f274:	d507      	bpl.n	3f286 <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
   3f276:	f44f 7084 	mov.w	r0, #264	; 0x108
   3f27a:	f008 fa80 	bl	4777e <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   3f27e:	b110      	cbz	r0, 3f286 <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
   3f280:	4b1e      	ldr	r3, [pc, #120]	; (3f2fc <nrfx_power_irq_handler+0x94>)
   3f282:	681b      	ldr	r3, [r3, #0]
   3f284:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   3f286:	06a3      	lsls	r3, r4, #26
   3f288:	d508      	bpl.n	3f29c <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
   3f28a:	f44f 708a 	mov.w	r0, #276	; 0x114
   3f28e:	f008 fa76 	bl	4777e <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   3f292:	b118      	cbz	r0, 3f29c <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
   3f294:	4b1a      	ldr	r3, [pc, #104]	; (3f300 <nrfx_power_irq_handler+0x98>)
   3f296:	2000      	movs	r0, #0
   3f298:	681b      	ldr	r3, [r3, #0]
   3f29a:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   3f29c:	0660      	lsls	r0, r4, #25
   3f29e:	d508      	bpl.n	3f2b2 <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
   3f2a0:	f44f 708c 	mov.w	r0, #280	; 0x118
   3f2a4:	f008 fa6b 	bl	4777e <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   3f2a8:	b118      	cbz	r0, 3f2b2 <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
   3f2aa:	4b15      	ldr	r3, [pc, #84]	; (3f300 <nrfx_power_irq_handler+0x98>)
   3f2ac:	2001      	movs	r0, #1
   3f2ae:	681b      	ldr	r3, [r3, #0]
   3f2b0:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   3f2b2:	0621      	lsls	r1, r4, #24
   3f2b4:	d508      	bpl.n	3f2c8 <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
   3f2b6:	f44f 708e 	mov.w	r0, #284	; 0x11c
   3f2ba:	f008 fa60 	bl	4777e <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   3f2be:	b118      	cbz	r0, 3f2c8 <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
   3f2c0:	4b10      	ldr	r3, [pc, #64]	; (3f304 <nrfx_power_irq_handler+0x9c>)
   3f2c2:	2000      	movs	r0, #0
   3f2c4:	681b      	ldr	r3, [r3, #0]
   3f2c6:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   3f2c8:	05e2      	lsls	r2, r4, #23
   3f2ca:	d508      	bpl.n	3f2de <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
   3f2cc:	f44f 7090 	mov.w	r0, #288	; 0x120
   3f2d0:	f008 fa55 	bl	4777e <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   3f2d4:	b118      	cbz	r0, 3f2de <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
   3f2d6:	4b0b      	ldr	r3, [pc, #44]	; (3f304 <nrfx_power_irq_handler+0x9c>)
   3f2d8:	2001      	movs	r0, #1
   3f2da:	681b      	ldr	r3, [r3, #0]
   3f2dc:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   3f2de:	05a3      	lsls	r3, r4, #22
   3f2e0:	d50a      	bpl.n	3f2f8 <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
   3f2e2:	f44f 7092 	mov.w	r0, #292	; 0x124
   3f2e6:	f008 fa4a 	bl	4777e <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   3f2ea:	b128      	cbz	r0, 3f2f8 <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   3f2ec:	4b05      	ldr	r3, [pc, #20]	; (3f304 <nrfx_power_irq_handler+0x9c>)
    }
#endif
}
   3f2ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   3f2f2:	681b      	ldr	r3, [r3, #0]
   3f2f4:	2002      	movs	r0, #2
   3f2f6:	4718      	bx	r3
}
   3f2f8:	bd10      	pop	{r4, pc}
   3f2fa:	bf00      	nop
   3f2fc:	200036e0 	.word	0x200036e0
   3f300:	200036dc 	.word	0x200036dc
   3f304:	200036d8 	.word	0x200036d8

0003f308 <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   3f308:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   3f30c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   3f310:	2a08      	cmp	r2, #8
   3f312:	d106      	bne.n	3f322 <nrf52_errata_187+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   3f314:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   3f318:	2b05      	cmp	r3, #5
   3f31a:	d804      	bhi.n	3f326 <nrf52_errata_187+0x1e>
   3f31c:	4a03      	ldr	r2, [pc, #12]	; (3f32c <nrf52_errata_187+0x24>)
   3f31e:	5cd0      	ldrb	r0, [r2, r3]
   3f320:	4770      	bx	lr
                        return false;
   3f322:	2000      	movs	r0, #0
   3f324:	4770      	bx	lr
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   3f326:	2001      	movs	r0, #1
}
   3f328:	4770      	bx	lr
   3f32a:	bf00      	nop
   3f32c:	0004ab1c 	.word	0x0004ab1c

0003f330 <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   3f330:	4b05      	ldr	r3, [pc, #20]	; (3f348 <ep_state_access+0x18>)
   3f332:	f010 0f80 	tst.w	r0, #128	; 0x80
   3f336:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
   3f33a:	bf08      	it	eq
   3f33c:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
   3f33e:	f000 000f 	and.w	r0, r0, #15
}
   3f342:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   3f346:	4770      	bx	lr
   3f348:	2000388c 	.word	0x2000388c

0003f34c <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
   3f34c:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
   3f34e:	4a07      	ldr	r2, [pc, #28]	; (3f36c <ev_usbreset_handler+0x20>)
   3f350:	2300      	movs	r3, #0
   3f352:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   3f354:	4a06      	ldr	r2, [pc, #24]	; (3f370 <ev_usbreset_handler+0x24>)
   3f356:	7013      	strb	r3, [r2, #0]

    const nrfx_usbd_evt_t evt = {
   3f358:	2301      	movs	r3, #1
   3f35a:	9301      	str	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
   3f35c:	4b05      	ldr	r3, [pc, #20]	; (3f374 <ev_usbreset_handler+0x28>)
   3f35e:	a801      	add	r0, sp, #4
   3f360:	681b      	ldr	r3, [r3, #0]
   3f362:	4798      	blx	r3
}
   3f364:	b003      	add	sp, #12
   3f366:	f85d fb04 	ldr.w	pc, [sp], #4
   3f36a:	bf00      	nop
   3f36c:	20003b23 	.word	0x20003b23
   3f370:	20003b22 	.word	0x20003b22
   3f374:	20003924 	.word	0x20003924

0003f378 <ev_usbevent_handler>:
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
   3f378:	b513      	push	{r0, r1, r4, lr}
    return p_reg->EVENTCAUSE;
   3f37a:	4b19      	ldr	r3, [pc, #100]	; (3f3e0 <ev_usbevent_handler+0x68>)
   3f37c:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
   3f380:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
   3f384:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
   3f386:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   3f38a:	d508      	bpl.n	3f39e <ev_usbevent_handler+0x26>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
   3f38c:	4b15      	ldr	r3, [pc, #84]	; (3f3e4 <ev_usbevent_handler+0x6c>)
   3f38e:	2201      	movs	r2, #1
   3f390:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
   3f392:	2302      	movs	r3, #2
   3f394:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
   3f396:	4b14      	ldr	r3, [pc, #80]	; (3f3e8 <ev_usbevent_handler+0x70>)
   3f398:	a801      	add	r0, sp, #4
   3f39a:	681b      	ldr	r3, [r3, #0]
   3f39c:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   3f39e:	05a2      	lsls	r2, r4, #22
   3f3a0:	d508      	bpl.n	3f3b4 <ev_usbevent_handler+0x3c>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
   3f3a2:	4b10      	ldr	r3, [pc, #64]	; (3f3e4 <ev_usbevent_handler+0x6c>)
   3f3a4:	2200      	movs	r2, #0
   3f3a6:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
   3f3a8:	2303      	movs	r3, #3
   3f3aa:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
   3f3ac:	4b0e      	ldr	r3, [pc, #56]	; (3f3e8 <ev_usbevent_handler+0x70>)
   3f3ae:	a801      	add	r0, sp, #4
   3f3b0:	681b      	ldr	r3, [r3, #0]
   3f3b2:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
   3f3b4:	0563      	lsls	r3, r4, #21
   3f3b6:	d510      	bpl.n	3f3da <ev_usbevent_handler+0x62>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
   3f3b8:	4b0a      	ldr	r3, [pc, #40]	; (3f3e4 <ev_usbevent_handler+0x6c>)
   3f3ba:	781a      	ldrb	r2, [r3, #0]
   3f3bc:	b16a      	cbz	r2, 3f3da <ev_usbevent_handler+0x62>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
   3f3be:	2200      	movs	r2, #0
   3f3c0:	701a      	strb	r2, [r3, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
   3f3c2:	4b07      	ldr	r3, [pc, #28]	; (3f3e0 <ev_usbevent_handler+0x68>)
   3f3c4:	2201      	movs	r2, #1
   3f3c6:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   3f3ca:	659a      	str	r2, [r3, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   3f3cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
   3f3ce:	2304      	movs	r3, #4
   3f3d0:	9301      	str	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
   3f3d2:	4b05      	ldr	r3, [pc, #20]	; (3f3e8 <ev_usbevent_handler+0x70>)
   3f3d4:	a801      	add	r0, sp, #4
   3f3d6:	681b      	ldr	r3, [r3, #0]
   3f3d8:	4798      	blx	r3
        }
    }
}
   3f3da:	b002      	add	sp, #8
   3f3dc:	bd10      	pop	{r4, pc}
   3f3de:	bf00      	nop
   3f3e0:	40027000 	.word	0x40027000
   3f3e4:	20003b23 	.word	0x20003b23
   3f3e8:	20003924 	.word	0x20003924

0003f3ec <usbd_errata_187_211_begin>:
	__asm__ volatile(
   3f3ec:	f04f 0320 	mov.w	r3, #32
   3f3f0:	f3ef 8011 	mrs	r0, BASEPRI
   3f3f4:	f383 8812 	msr	BASEPRI_MAX, r3
   3f3f8:	f3bf 8f6f 	isb	sy
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   3f3fc:	4b0a      	ldr	r3, [pc, #40]	; (3f428 <usbd_errata_187_211_begin+0x3c>)
   3f3fe:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   3f402:	2203      	movs	r2, #3
   3f404:	b961      	cbnz	r1, 3f420 <usbd_errata_187_211_begin+0x34>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   3f406:	f249 3175 	movw	r1, #37749	; 0x9375
   3f40a:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   3f40e:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   3f412:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
   3f416:	f380 8811 	msr	BASEPRI, r0
   3f41a:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   3f41e:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   3f420:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
   3f424:	e7f7      	b.n	3f416 <usbd_errata_187_211_begin+0x2a>
   3f426:	bf00      	nop
   3f428:	4006e000 	.word	0x4006e000

0003f42c <usbd_errata_187_211_end>:
	__asm__ volatile(
   3f42c:	f04f 0320 	mov.w	r3, #32
   3f430:	f3ef 8011 	mrs	r0, BASEPRI
   3f434:	f383 8812 	msr	BASEPRI_MAX, r3
   3f438:	f3bf 8f6f 	isb	sy
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   3f43c:	4b0a      	ldr	r3, [pc, #40]	; (3f468 <usbd_errata_187_211_end+0x3c>)
   3f43e:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   3f442:	b961      	cbnz	r1, 3f45e <usbd_errata_187_211_end+0x32>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   3f444:	f249 3275 	movw	r2, #37749	; 0x9375
   3f448:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   3f44c:	f8c3 1d14 	str.w	r1, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   3f450:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
   3f454:	f380 8811 	msr	BASEPRI, r0
   3f458:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   3f45c:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   3f45e:	2200      	movs	r2, #0
   3f460:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
   3f464:	e7f6      	b.n	3f454 <usbd_errata_187_211_end+0x28>
   3f466:	bf00      	nop
   3f468:	4006e000 	.word	0x4006e000

0003f46c <nrfx_usbd_feeder_flash>:
{
   3f46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3f46e:	684b      	ldr	r3, [r1, #4]
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   3f470:	4f0b      	ldr	r7, [pc, #44]	; (3f4a0 <nrfx_usbd_feeder_flash+0x34>)
   3f472:	429a      	cmp	r2, r3
   3f474:	bf28      	it	cs
   3f476:	461a      	movcs	r2, r3
{
   3f478:	460c      	mov	r4, r1
   3f47a:	4615      	mov	r5, r2
   3f47c:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   3f47e:	6809      	ldr	r1, [r1, #0]
   3f480:	4638      	mov	r0, r7
   3f482:	f004 ff49 	bl	44318 <memcpy>
    p_next->size = tx_size;
   3f486:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->size -= tx_size;
   3f48a:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
   3f48c:	6823      	ldr	r3, [r4, #0]
    p_transfer->size -= tx_size;
   3f48e:	1b40      	subs	r0, r0, r5
    p_transfer->p_data.addr += tx_size;
   3f490:	442b      	add	r3, r5
    p_transfer->size -= tx_size;
   3f492:	6060      	str	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
   3f494:	6023      	str	r3, [r4, #0]
}
   3f496:	3800      	subs	r0, #0
   3f498:	bf18      	it	ne
   3f49a:	2001      	movne	r0, #1
   3f49c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3f49e:	bf00      	nop
   3f4a0:	200036e4 	.word	0x200036e4

0003f4a4 <nrfx_usbd_feeder_flash_zlp>:
{
   3f4a4:	b570      	push	{r4, r5, r6, lr}
   3f4a6:	684b      	ldr	r3, [r1, #4]
   3f4a8:	429a      	cmp	r2, r3
   3f4aa:	bf28      	it	cs
   3f4ac:	461a      	movcs	r2, r3
   3f4ae:	4606      	mov	r6, r0
   3f4b0:	460d      	mov	r5, r1
   3f4b2:	4614      	mov	r4, r2
    if (tx_size != 0)
   3f4b4:	b182      	cbz	r2, 3f4d8 <nrfx_usbd_feeder_flash_zlp+0x34>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   3f4b6:	6809      	ldr	r1, [r1, #0]
   3f4b8:	4808      	ldr	r0, [pc, #32]	; (3f4dc <nrfx_usbd_feeder_flash_zlp+0x38>)
   3f4ba:	f004 ff2d 	bl	44318 <memcpy>
        p_next->p_data.tx = p_buffer;
   3f4be:	4b07      	ldr	r3, [pc, #28]	; (3f4dc <nrfx_usbd_feeder_flash_zlp+0x38>)
    p_next->size = tx_size;
   3f4c0:	e9c6 3400 	strd	r3, r4, [r6]
    p_transfer->size -= tx_size;
   3f4c4:	686b      	ldr	r3, [r5, #4]
   3f4c6:	1b1b      	subs	r3, r3, r4
   3f4c8:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
   3f4ca:	682b      	ldr	r3, [r5, #0]
   3f4cc:	4423      	add	r3, r4
}
   3f4ce:	1e20      	subs	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
   3f4d0:	602b      	str	r3, [r5, #0]
}
   3f4d2:	bf18      	it	ne
   3f4d4:	2001      	movne	r0, #1
   3f4d6:	bd70      	pop	{r4, r5, r6, pc}
   3f4d8:	4613      	mov	r3, r2
   3f4da:	e7f1      	b.n	3f4c0 <nrfx_usbd_feeder_flash_zlp+0x1c>
   3f4dc:	200036e4 	.word	0x200036e4

0003f4e0 <ev_sof_handler>:
{
   3f4e0:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
   3f4e2:	2300      	movs	r3, #0
   3f4e4:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
   3f4e8:	4b0b      	ldr	r3, [pc, #44]	; (3f518 <ev_sof_handler+0x38>)
   3f4ea:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
   3f4ee:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
   3f4f2:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
   3f4f6:	4a09      	ldr	r2, [pc, #36]	; (3f51c <ev_sof_handler+0x3c>)
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
   3f4f8:	2b00      	cmp	r3, #0
    m_ep_ready |= iso_ready_mask;
   3f4fa:	6813      	ldr	r3, [r2, #0]
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
   3f4fc:	bf14      	ite	ne
   3f4fe:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
   3f502:	f44f 7180 	moveq.w	r1, #256	; 0x100
    m_ep_ready |= iso_ready_mask;
   3f506:	430b      	orrs	r3, r1
   3f508:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
   3f50a:	4b05      	ldr	r3, [pc, #20]	; (3f520 <ev_sof_handler+0x40>)
   3f50c:	a801      	add	r0, sp, #4
   3f50e:	681b      	ldr	r3, [r3, #0]
   3f510:	4798      	blx	r3
}
   3f512:	b003      	add	sp, #12
   3f514:	f85d fb04 	ldr.w	pc, [sp], #4
   3f518:	40027000 	.word	0x40027000
   3f51c:	20003920 	.word	0x20003920
   3f520:	20003924 	.word	0x20003924

0003f524 <atomic_and.constprop.0.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3f524:	4b06      	ldr	r3, [pc, #24]	; (3f540 <atomic_and.constprop.0.isra.0+0x1c>)
   3f526:	f3bf 8f5b 	dmb	ish
   3f52a:	e853 1f00 	ldrex	r1, [r3]
   3f52e:	4001      	ands	r1, r0
   3f530:	e843 1200 	strex	r2, r1, [r3]
   3f534:	2a00      	cmp	r2, #0
   3f536:	d1f8      	bne.n	3f52a <atomic_and.constprop.0.isra.0+0x6>
   3f538:	f3bf 8f5b 	dmb	ish
}
   3f53c:	4770      	bx	lr
   3f53e:	bf00      	nop
   3f540:	2000391c 	.word	0x2000391c

0003f544 <usbd_dma_pending_clear>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   3f544:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   3f548:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   3f54c:	2b08      	cmp	r3, #8
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   3f54e:	bf02      	ittt	eq
   3f550:	4b03      	ldreq	r3, [pc, #12]	; (3f560 <usbd_dma_pending_clear+0x1c>)
   3f552:	2200      	moveq	r2, #0
   3f554:	f8c3 2c1c 	streq.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = false;
   3f558:	4b02      	ldr	r3, [pc, #8]	; (3f564 <usbd_dma_pending_clear+0x20>)
   3f55a:	2200      	movs	r2, #0
   3f55c:	701a      	strb	r2, [r3, #0]
}
   3f55e:	4770      	bx	lr
   3f560:	40027000 	.word	0x40027000
   3f564:	20003b21 	.word	0x20003b21

0003f568 <nrf_usbd_ep0in_dma_handler>:
{
   3f568:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
   3f56a:	f7ff ffeb 	bl	3f544 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   3f56e:	4b08      	ldr	r3, [pc, #32]	; (3f590 <nrf_usbd_ep0in_dma_handler+0x28>)
   3f570:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
   3f574:	2a03      	cmp	r2, #3
   3f576:	d105      	bne.n	3f584 <nrf_usbd_ep0in_dma_handler+0x1c>
}
   3f578:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   3f57c:	f06f 0001 	mvn.w	r0, #1
   3f580:	f7ff bfd0 	b.w	3f524 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   3f584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   3f588:	2b00      	cmp	r3, #0
   3f58a:	d0f5      	beq.n	3f578 <nrf_usbd_ep0in_dma_handler+0x10>
}
   3f58c:	bd08      	pop	{r3, pc}
   3f58e:	bf00      	nop
   3f590:	200037fc 	.word	0x200037fc

0003f594 <usbd_ep_data_handler>:
{
   3f594:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
   3f596:	2201      	movs	r2, #1
   3f598:	fa02 f501 	lsl.w	r5, r2, r1
   3f59c:	491c      	ldr	r1, [pc, #112]	; (3f610 <usbd_ep_data_handler+0x7c>)
   3f59e:	4e1d      	ldr	r6, [pc, #116]	; (3f614 <usbd_ep_data_handler+0x80>)
   3f5a0:	680b      	ldr	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
   3f5a2:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
   3f5a6:	ea43 0305 	orr.w	r3, r3, r5
{
   3f5aa:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
   3f5ac:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
   3f5ae:	d024      	beq.n	3f5fa <usbd_ep_data_handler+0x66>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   3f5b0:	f000 020f 	and.w	r2, r0, #15
   3f5b4:	4b18      	ldr	r3, [pc, #96]	; (3f618 <usbd_ep_data_handler+0x84>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   3f5b6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   3f5ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3f5be:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   3f5c2:	681a      	ldr	r2, [r3, #0]
    if (ret)
   3f5c4:	b132      	cbz	r2, 3f5d4 <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   3f5c6:	2200      	movs	r2, #0
   3f5c8:	601a      	str	r2, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
   3f5ca:	2880      	cmp	r0, #128	; 0x80
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   3f5cc:	681b      	ldr	r3, [r3, #0]
   3f5ce:	d011      	beq.n	3f5f4 <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
   3f5d0:	f008 f93d 	bl	4784e <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   3f5d4:	6833      	ldr	r3, [r6, #0]
   3f5d6:	402b      	ands	r3, r5
   3f5d8:	d10a      	bne.n	3f5f0 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   3f5da:	2206      	movs	r2, #6
   3f5dc:	f88d 2004 	strb.w	r2, [sp, #4]
   3f5e0:	f88d 4006 	strb.w	r4, [sp, #6]
   3f5e4:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   3f5e8:	4b0c      	ldr	r3, [pc, #48]	; (3f61c <usbd_ep_data_handler+0x88>)
   3f5ea:	a801      	add	r0, sp, #4
   3f5ec:	681b      	ldr	r3, [r3, #0]
   3f5ee:	4798      	blx	r3
}
   3f5f0:	b002      	add	sp, #8
   3f5f2:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
   3f5f4:	f7ff ffb8 	bl	3f568 <nrf_usbd_ep0in_dma_handler>
   3f5f8:	e7ec      	b.n	3f5d4 <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   3f5fa:	6833      	ldr	r3, [r6, #0]
   3f5fc:	421d      	tst	r5, r3
   3f5fe:	d1f7      	bne.n	3f5f0 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
   3f600:	2306      	movs	r3, #6
   3f602:	f88d 3004 	strb.w	r3, [sp, #4]
   3f606:	f88d 0006 	strb.w	r0, [sp, #6]
   3f60a:	f88d 2007 	strb.w	r2, [sp, #7]
   3f60e:	e7eb      	b.n	3f5e8 <usbd_ep_data_handler+0x54>
   3f610:	20003920 	.word	0x20003920
   3f614:	2000391c 	.word	0x2000391c
   3f618:	0004a4a6 	.word	0x0004a4a6
   3f61c:	20003924 	.word	0x20003924

0003f620 <ev_setup_data_handler>:
{
   3f620:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   3f622:	4b05      	ldr	r3, [pc, #20]	; (3f638 <ev_setup_data_handler+0x18>)
   3f624:	781a      	ldrb	r2, [r3, #0]
   3f626:	4610      	mov	r0, r2
   3f628:	f008 f908 	bl	4783c <ep2bit>
}
   3f62c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   3f630:	4601      	mov	r1, r0
   3f632:	4610      	mov	r0, r2
   3f634:	f7ff bfae 	b.w	3f594 <usbd_ep_data_handler>
   3f638:	20003b22 	.word	0x20003b22

0003f63c <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   3f63c:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
   3f63e:	f7ff ff81 	bl	3f544 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   3f642:	4b0c      	ldr	r3, [pc, #48]	; (3f674 <ev_dma_epout8_handler+0x38>)
   3f644:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
   3f648:	2a03      	cmp	r2, #3
   3f64a:	d010      	beq.n	3f66e <ev_dma_epout8_handler+0x32>
    else if (p_state->handler.consumer == NULL)
   3f64c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   3f650:	b96b      	cbnz	r3, 3f66e <ev_dma_epout8_handler+0x32>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   3f652:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
   3f656:	f7ff ff65 	bl	3f524 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   3f65a:	2306      	movs	r3, #6
   3f65c:	f88d 3004 	strb.w	r3, [sp, #4]
   3f660:	2308      	movs	r3, #8
   3f662:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
   3f666:	4b04      	ldr	r3, [pc, #16]	; (3f678 <ev_dma_epout8_handler+0x3c>)
   3f668:	a801      	add	r0, sp, #4
   3f66a:	681b      	ldr	r3, [r3, #0]
   3f66c:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   3f66e:	b003      	add	sp, #12
   3f670:	f85d fb04 	ldr.w	pc, [sp], #4
   3f674:	200037fc 	.word	0x200037fc
   3f678:	20003924 	.word	0x20003924

0003f67c <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   3f67c:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
   3f67e:	f7ff ff61 	bl	3f544 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   3f682:	4b10      	ldr	r3, [pc, #64]	; (3f6c4 <ev_dma_epin8_handler+0x48>)
   3f684:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
   3f688:	2a03      	cmp	r2, #3
   3f68a:	d106      	bne.n	3f69a <ev_dma_epin8_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   3f68c:	f46f 7080 	mvn.w	r0, #256	; 0x100
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   3f690:	b003      	add	sp, #12
   3f692:	f85d eb04 	ldr.w	lr, [sp], #4
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   3f696:	f7ff bf45 	b.w	3f524 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   3f69a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   3f69e:	b96b      	cbnz	r3, 3f6bc <ev_dma_epin8_handler+0x40>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   3f6a0:	f46f 7080 	mvn.w	r0, #256	; 0x100
   3f6a4:	f7ff ff3e 	bl	3f524 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   3f6a8:	2306      	movs	r3, #6
   3f6aa:	f88d 3004 	strb.w	r3, [sp, #4]
   3f6ae:	2388      	movs	r3, #136	; 0x88
   3f6b0:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
   3f6b4:	4b04      	ldr	r3, [pc, #16]	; (3f6c8 <ev_dma_epin8_handler+0x4c>)
   3f6b6:	a801      	add	r0, sp, #4
   3f6b8:	681b      	ldr	r3, [r3, #0]
   3f6ba:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   3f6bc:	b003      	add	sp, #12
   3f6be:	f85d fb04 	ldr.w	pc, [sp], #4
   3f6c2:	bf00      	nop
   3f6c4:	200037fc 	.word	0x200037fc
   3f6c8:	20003924 	.word	0x20003924

0003f6cc <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
   3f6cc:	4a02      	ldr	r2, [pc, #8]	; (3f6d8 <nrfx_usbd_uninit+0xc>)
   3f6ce:	2300      	movs	r3, #0
   3f6d0:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
   3f6d2:	4a02      	ldr	r2, [pc, #8]	; (3f6dc <nrfx_usbd_uninit+0x10>)
   3f6d4:	7013      	strb	r3, [r2, #0]
    return;
}
   3f6d6:	4770      	bx	lr
   3f6d8:	20003924 	.word	0x20003924
   3f6dc:	20003b24 	.word	0x20003b24

0003f6e0 <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
   3f6e0:	b508      	push	{r3, lr}
    p_reg->EVENTCAUSE = flags;
   3f6e2:	4b4c      	ldr	r3, [pc, #304]	; (3f814 <nrfx_usbd_enable+0x134>)
   3f6e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
   3f6e8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   3f6ec:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
}

/* Errata: USB cannot be enabled. **/
static inline bool nrfx_usbd_errata_187(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   3f6f0:	f7ff fe0a 	bl	3f308 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   3f6f4:	b108      	cbz	r0, 3f6fa <nrfx_usbd_enable+0x1a>
        usbd_errata_187_211_begin();
   3f6f6:	f7ff fe79 	bl	3f3ec <usbd_errata_187_211_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   3f6fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   3f6fe:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   3f702:	2b08      	cmp	r3, #8
   3f704:	d119      	bne.n	3f73a <nrfx_usbd_enable+0x5a>
	__asm__ volatile(
   3f706:	f04f 0320 	mov.w	r3, #32
   3f70a:	f3ef 8011 	mrs	r0, BASEPRI
   3f70e:	f383 8812 	msr	BASEPRI_MAX, r3
   3f712:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   3f716:	4b40      	ldr	r3, [pc, #256]	; (3f818 <nrfx_usbd_enable+0x138>)
   3f718:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   3f71c:	22c0      	movs	r2, #192	; 0xc0
   3f71e:	2900      	cmp	r1, #0
   3f720:	d170      	bne.n	3f804 <nrfx_usbd_enable+0x124>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   3f722:	f249 3175 	movw	r1, #37749	; 0x9375
   3f726:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   3f72a:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   3f72e:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
   3f732:	f380 8811 	msr	BASEPRI, r0
   3f736:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
   3f73a:	4b36      	ldr	r3, [pc, #216]	; (3f814 <nrfx_usbd_enable+0x134>)
   3f73c:	2201      	movs	r2, #1
   3f73e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   3f742:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
   3f746:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
   3f74a:	0512      	lsls	r2, r2, #20
   3f74c:	d5fb      	bpl.n	3f746 <nrfx_usbd_enable+0x66>
    p_reg->EVENTCAUSE = flags;
   3f74e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   3f752:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   3f756:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   3f75a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   3f75e:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   3f762:	2b08      	cmp	r3, #8
   3f764:	d118      	bne.n	3f798 <nrfx_usbd_enable+0xb8>
	__asm__ volatile(
   3f766:	f04f 0320 	mov.w	r3, #32
   3f76a:	f3ef 8011 	mrs	r0, BASEPRI
   3f76e:	f383 8812 	msr	BASEPRI_MAX, r3
   3f772:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   3f776:	4b28      	ldr	r3, [pc, #160]	; (3f818 <nrfx_usbd_enable+0x138>)
   3f778:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   3f77c:	2900      	cmp	r1, #0
   3f77e:	d144      	bne.n	3f80a <nrfx_usbd_enable+0x12a>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   3f780:	f249 3275 	movw	r2, #37749	; 0x9375
   3f784:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   3f788:	f8c3 1c14 	str.w	r1, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   3f78c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
   3f790:	f380 8811 	msr	BASEPRI, r0
   3f794:	f3bf 8f6f 	isb	sy
   3f798:	f7ff fdb6 	bl	3f308 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   3f79c:	b130      	cbz	r0, 3f7ac <nrfx_usbd_enable+0xcc>
        usbd_errata_187_211_end();
   3f79e:	f7ff fe45 	bl	3f42c <usbd_errata_187_211_end>
   3f7a2:	f7ff fdb1 	bl	3f308 <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   3f7a6:	b108      	cbz	r0, 3f7ac <nrfx_usbd_enable+0xcc>
#endif
    {
        usbd_errata_187_211_begin();
   3f7a8:	f7ff fe20 	bl	3f3ec <usbd_errata_187_211_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   3f7ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   3f7b0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   3f7b4:	2b08      	cmp	r3, #8
   3f7b6:	4b17      	ldr	r3, [pc, #92]	; (3f814 <nrfx_usbd_enable+0x134>)
   3f7b8:	d10a      	bne.n	3f7d0 <nrfx_usbd_enable+0xf0>
    }

    if (nrfx_usbd_errata_166())
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
   3f7ba:	f240 72e3 	movw	r2, #2019	; 0x7e3
   3f7be:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
   3f7c2:	2240      	movs	r2, #64	; 0x40
   3f7c4:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  __ASM volatile ("isb 0xF":::"memory");
   3f7c8:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
   3f7cc:	f3bf 8f4f 	dsb	sy
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   3f7d0:	2100      	movs	r1, #0
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
   3f7d2:	2280      	movs	r2, #128	; 0x80
   3f7d4:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   3f7d8:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   3f7dc:	4b0f      	ldr	r3, [pc, #60]	; (3f81c <nrfx_usbd_enable+0x13c>)
   3f7de:	f240 12ff 	movw	r2, #511	; 0x1ff
   3f7e2:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
   3f7e4:	4b0e      	ldr	r3, [pc, #56]	; (3f820 <nrfx_usbd_enable+0x140>)
   3f7e6:	6019      	str	r1, [r3, #0]
    usbd_dma_pending_clear();
   3f7e8:	f7ff feac 	bl	3f544 <usbd_dma_pending_clear>
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   3f7ec:	4b0d      	ldr	r3, [pc, #52]	; (3f824 <nrfx_usbd_enable+0x144>)
   3f7ee:	7019      	strb	r1, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
   3f7f0:	4b0d      	ldr	r3, [pc, #52]	; (3f828 <nrfx_usbd_enable+0x148>)
   3f7f2:	2202      	movs	r2, #2
   3f7f4:	701a      	strb	r2, [r3, #0]
   3f7f6:	f7ff fd87 	bl	3f308 <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   3f7fa:	b150      	cbz	r0, 3f812 <nrfx_usbd_enable+0x132>
#endif
    {
        usbd_errata_187_211_end();
    }
}
   3f7fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usbd_errata_187_211_end();
   3f800:	f7ff be14 	b.w	3f42c <usbd_errata_187_211_end>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   3f804:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
   3f808:	e793      	b.n	3f732 <nrfx_usbd_enable+0x52>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   3f80a:	2200      	movs	r2, #0
   3f80c:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
   3f810:	e7be      	b.n	3f790 <nrfx_usbd_enable+0xb0>
}
   3f812:	bd08      	pop	{r3, pc}
   3f814:	40027000 	.word	0x40027000
   3f818:	4006e000 	.word	0x4006e000
   3f81c:	20003920 	.word	0x20003920
   3f820:	2000391c 	.word	0x2000391c
   3f824:	20003b22 	.word	0x20003b22
   3f828:	20003b24 	.word	0x20003b24

0003f82c <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
   3f82c:	4b0a      	ldr	r3, [pc, #40]	; (3f858 <nrfx_usbd_start+0x2c>)
   3f82e:	2200      	movs	r2, #0
{
   3f830:	b510      	push	{r4, lr}
    m_bus_suspend = false;
   3f832:	701a      	strb	r2, [r3, #0]

    uint32_t ints_to_enable =
   3f834:	4a09      	ldr	r2, [pc, #36]	; (3f85c <nrfx_usbd_start+0x30>)
   3f836:	4b0a      	ldr	r3, [pc, #40]	; (3f860 <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
   3f838:	4c0a      	ldr	r4, [pc, #40]	; (3f864 <nrfx_usbd_start+0x38>)
   3f83a:	2800      	cmp	r0, #0
   3f83c:	bf08      	it	eq
   3f83e:	4613      	moveq	r3, r2
   3f840:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
   3f844:	2027      	movs	r0, #39	; 0x27
   3f846:	f7ea fd57 	bl	2a2f8 <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
   3f84a:	2301      	movs	r3, #1
   3f84c:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
   3f850:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
   3f854:	bd10      	pop	{r4, pc}
   3f856:	bf00      	nop
   3f858:	20003b23 	.word	0x20003b23
   3f85c:	01c01407 	.word	0x01c01407
   3f860:	01e01407 	.word	0x01e01407
   3f864:	40027000 	.word	0x40027000

0003f868 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
   3f868:	4b03      	ldr	r3, [pc, #12]	; (3f878 <nrfx_usbd_is_enabled+0x10>)
   3f86a:	7818      	ldrb	r0, [r3, #0]
}
   3f86c:	2801      	cmp	r0, #1
   3f86e:	bf94      	ite	ls
   3f870:	2000      	movls	r0, #0
   3f872:	2001      	movhi	r0, #1
   3f874:	4770      	bx	lr
   3f876:	bf00      	nop
   3f878:	20003b24 	.word	0x20003b24

0003f87c <nrfx_usbd_init>:
{
   3f87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
   3f87e:	4b1c      	ldr	r3, [pc, #112]	; (3f8f0 <nrfx_usbd_init+0x74>)
   3f880:	781c      	ldrb	r4, [r3, #0]
   3f882:	bb94      	cbnz	r4, 3f8ea <nrfx_usbd_init+0x6e>
    m_event_handler = event_handler;
   3f884:	4a1b      	ldr	r2, [pc, #108]	; (3f8f4 <nrfx_usbd_init+0x78>)
   3f886:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   3f888:	2201      	movs	r2, #1
   3f88a:	701a      	strb	r2, [r3, #0]
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   3f88c:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
   3f890:	4626      	mov	r6, r4
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
   3f892:	f064 057f 	orn	r5, r4, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   3f896:	f014 0f08 	tst.w	r4, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
   3f89a:	b2ed      	uxtb	r5, r5
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   3f89c:	bf14      	ite	ne
   3f89e:	4639      	movne	r1, r7
   3f8a0:	2140      	moveq	r1, #64	; 0x40
   3f8a2:	4628      	mov	r0, r5
   3f8a4:	f008 f802 	bl	478ac <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
   3f8a8:	4628      	mov	r0, r5
   3f8aa:	f7ff fd41 	bl	3f330 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   3f8ae:	3401      	adds	r4, #1
   3f8b0:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
   3f8b2:	7386      	strb	r6, [r0, #14]
        p_state->handler.feeder = NULL;
   3f8b4:	6006      	str	r6, [r0, #0]
        p_state->transfer_cnt = 0;
   3f8b6:	6086      	str	r6, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   3f8b8:	d1eb      	bne.n	3f892 <nrfx_usbd_init+0x16>
   3f8ba:	2400      	movs	r4, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   3f8bc:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
   3f8c0:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   3f8c2:	f014 0f08 	tst.w	r4, #8
   3f8c6:	b2e6      	uxtb	r6, r4
   3f8c8:	bf14      	ite	ne
   3f8ca:	4639      	movne	r1, r7
   3f8cc:	2140      	moveq	r1, #64	; 0x40
   3f8ce:	4630      	mov	r0, r6
   3f8d0:	f007 ffec 	bl	478ac <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
   3f8d4:	4630      	mov	r0, r6
   3f8d6:	f7ff fd2b 	bl	3f330 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   3f8da:	3401      	adds	r4, #1
   3f8dc:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
   3f8de:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
   3f8e0:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
   3f8e2:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   3f8e4:	d1ed      	bne.n	3f8c2 <nrfx_usbd_init+0x46>
    return NRFX_SUCCESS;
   3f8e6:	4804      	ldr	r0, [pc, #16]	; (3f8f8 <nrfx_usbd_init+0x7c>)
}
   3f8e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NRFX_ERROR_INVALID_STATE;
   3f8ea:	4804      	ldr	r0, [pc, #16]	; (3f8fc <nrfx_usbd_init+0x80>)
   3f8ec:	e7fc      	b.n	3f8e8 <nrfx_usbd_init+0x6c>
   3f8ee:	bf00      	nop
   3f8f0:	20003b24 	.word	0x20003b24
   3f8f4:	20003924 	.word	0x20003924
   3f8f8:	0bad0000 	.word	0x0bad0000
   3f8fc:	0bad0005 	.word	0x0bad0005

0003f900 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
   3f900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3f904:	4604      	mov	r4, r0
	__asm__ volatile(
   3f906:	f04f 0320 	mov.w	r3, #32
   3f90a:	f3ef 8611 	mrs	r6, BASEPRI
   3f90e:	f383 8812 	msr	BASEPRI_MAX, r3
   3f912:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
   3f916:	f010 090f 	ands.w	r9, r0, #15
   3f91a:	d103      	bne.n	3f924 <nrfx_usbd_ep_transfer+0x24>
   3f91c:	4b27      	ldr	r3, [pc, #156]	; (3f9bc <nrfx_usbd_ep_transfer+0xbc>)
   3f91e:	781b      	ldrb	r3, [r3, #0]
   3f920:	4283      	cmp	r3, r0
   3f922:	d147      	bne.n	3f9b4 <nrfx_usbd_ep_transfer+0xb4>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   3f924:	4b26      	ldr	r3, [pc, #152]	; (3f9c0 <nrfx_usbd_ep_transfer+0xc0>)
   3f926:	4f27      	ldr	r7, [pc, #156]	; (3f9c4 <nrfx_usbd_ep_transfer+0xc4>)
   3f928:	681a      	ldr	r2, [r3, #0]
   3f92a:	683b      	ldr	r3, [r7, #0]
   3f92c:	43d2      	mvns	r2, r2
   3f92e:	b292      	uxth	r2, r2
    const uint8_t ep_bitpos = ep2bit(ep);
   3f930:	4620      	mov	r0, r4
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   3f932:	431a      	orrs	r2, r3
    const uint8_t ep_bitpos = ep2bit(ep);
   3f934:	f007 ff82 	bl	4783c <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   3f938:	f04f 0801 	mov.w	r8, #1
   3f93c:	fa08 f800 	lsl.w	r8, r8, r0
   3f940:	ea12 0f08 	tst.w	r2, r8
   3f944:	d138      	bne.n	3f9b8 <nrfx_usbd_ep_transfer+0xb8>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
   3f946:	4620      	mov	r0, r4
   3f948:	f7ff fcf2 	bl	3f330 <ep_state_access>
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   3f94c:	230c      	movs	r3, #12
        if (NRF_USBD_EPIN_CHECK(ep))
   3f94e:	0622      	lsls	r2, r4, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
   3f950:	4605      	mov	r5, r0
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   3f952:	fb03 f309 	mul.w	r3, r3, r9
        if (NRF_USBD_EPIN_CHECK(ep))
   3f956:	d529      	bpl.n	3f9ac <nrfx_usbd_ep_transfer+0xac>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   3f958:	680a      	ldr	r2, [r1, #0]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   3f95a:	6888      	ldr	r0, [r1, #8]
   3f95c:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
   3f960:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   3f964:	f000 0001 	and.w	r0, r0, #1
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
   3f968:	d11d      	bne.n	3f9a6 <nrfx_usbd_ep_transfer+0xa6>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   3f96a:	4a17      	ldr	r2, [pc, #92]	; (3f9c8 <nrfx_usbd_ep_transfer+0xc8>)
   3f96c:	4c17      	ldr	r4, [pc, #92]	; (3f9cc <nrfx_usbd_ep_transfer+0xcc>)
   3f96e:	2800      	cmp	r0, #0
   3f970:	bf08      	it	eq
   3f972:	4622      	moveq	r2, r4
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   3f974:	4816      	ldr	r0, [pc, #88]	; (3f9d0 <nrfx_usbd_ep_transfer+0xd0>)
   3f976:	4403      	add	r3, r0
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
   3f978:	602a      	str	r2, [r5, #0]
        }
        *p_context = *p_transfer;
   3f97a:	c907      	ldmia	r1, {r0, r1, r2}
   3f97c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        p_state->p_context = p_context;
   3f980:	606b      	str	r3, [r5, #4]

        p_state->transfer_cnt = 0;
   3f982:	2300      	movs	r3, #0
   3f984:	60ab      	str	r3, [r5, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
   3f986:	73ab      	strb	r3, [r5, #14]
        m_ep_dma_waiting   |= 1U << ep_bitpos;
   3f988:	683b      	ldr	r3, [r7, #0]
        ret = NRFX_SUCCESS;
   3f98a:	4812      	ldr	r0, [pc, #72]	; (3f9d4 <nrfx_usbd_ep_transfer+0xd4>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
   3f98c:	ea43 0308 	orr.w	r3, r3, r8
   3f990:	603b      	str	r3, [r7, #0]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   3f992:	4b11      	ldr	r3, [pc, #68]	; (3f9d8 <nrfx_usbd_ep_transfer+0xd8>)
   3f994:	2280      	movs	r2, #128	; 0x80
   3f996:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
   3f99a:	f386 8811 	msr	BASEPRI, r6
   3f99e:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
   3f9a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   3f9a6:	4a0d      	ldr	r2, [pc, #52]	; (3f9dc <nrfx_usbd_ep_transfer+0xdc>)
   3f9a8:	4c0d      	ldr	r4, [pc, #52]	; (3f9e0 <nrfx_usbd_ep_transfer+0xe0>)
   3f9aa:	e7e0      	b.n	3f96e <nrfx_usbd_ep_transfer+0x6e>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
   3f9ac:	4a0d      	ldr	r2, [pc, #52]	; (3f9e4 <nrfx_usbd_ep_transfer+0xe4>)
   3f9ae:	4413      	add	r3, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
   3f9b0:	4a0d      	ldr	r2, [pc, #52]	; (3f9e8 <nrfx_usbd_ep_transfer+0xe8>)
   3f9b2:	e7e1      	b.n	3f978 <nrfx_usbd_ep_transfer+0x78>
        ret = NRFX_ERROR_INVALID_ADDR;
   3f9b4:	480d      	ldr	r0, [pc, #52]	; (3f9ec <nrfx_usbd_ep_transfer+0xec>)
   3f9b6:	e7f0      	b.n	3f99a <nrfx_usbd_ep_transfer+0x9a>
        ret = NRFX_ERROR_BUSY;
   3f9b8:	480d      	ldr	r0, [pc, #52]	; (3f9f0 <nrfx_usbd_ep_transfer+0xf0>)
   3f9ba:	e7ee      	b.n	3f99a <nrfx_usbd_ep_transfer+0x9a>
   3f9bc:	20003b22 	.word	0x20003b22
   3f9c0:	20003920 	.word	0x20003920
   3f9c4:	2000391c 	.word	0x2000391c
   3f9c8:	00047815 	.word	0x00047815
   3f9cc:	000477f3 	.word	0x000477f3
   3f9d0:	20003790 	.word	0x20003790
   3f9d4:	0bad0000 	.word	0x0bad0000
   3f9d8:	e000e100 	.word	0xe000e100
   3f9dc:	0003f4a5 	.word	0x0003f4a5
   3f9e0:	0003f46d 	.word	0x0003f46d
   3f9e4:	20003724 	.word	0x20003724
   3f9e8:	000477c1 	.word	0x000477c1
   3f9ec:	0bad000a 	.word	0x0bad000a
   3f9f0:	0bad000b 	.word	0x0bad000b

0003f9f4 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
   3f9f4:	f010 0f08 	tst.w	r0, #8
   3f9f8:	4b07      	ldr	r3, [pc, #28]	; (3fa18 <nrfx_usbd_epout_size_get+0x24>)
   3f9fa:	d006      	beq.n	3fa0a <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
   3f9fc:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
            size_isoout = 0;
   3fa00:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   3fa04:	bf18      	it	ne
   3fa06:	2000      	movne	r0, #0
   3fa08:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   3fa0a:	f000 000f 	and.w	r0, r0, #15
   3fa0e:	f500 7094 	add.w	r0, r0, #296	; 0x128
   3fa12:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
   3fa16:	4770      	bx	lr
   3fa18:	40027000 	.word	0x40027000

0003fa1c <usbd_dmareq_process>:
{
   3fa1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
   3fa20:	4e59      	ldr	r6, [pc, #356]	; (3fb88 <usbd_dmareq_process+0x16c>)
   3fa22:	7833      	ldrb	r3, [r6, #0]
{
   3fa24:	b085      	sub	sp, #20
    if (!m_dma_pending)
   3fa26:	2b00      	cmp	r3, #0
   3fa28:	d173      	bne.n	3fb12 <usbd_dmareq_process+0xf6>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
   3fa2a:	f8df 8160 	ldr.w	r8, [pc, #352]	; 3fb8c <usbd_dmareq_process+0x170>
   3fa2e:	4d58      	ldr	r5, [pc, #352]	; (3fb90 <usbd_dmareq_process+0x174>)
   3fa30:	f8d8 4000 	ldr.w	r4, [r8]
   3fa34:	682b      	ldr	r3, [r5, #0]
   3fa36:	401c      	ands	r4, r3
   3fa38:	d06b      	beq.n	3fb12 <usbd_dmareq_process+0xf6>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
   3fa3a:	f014 2301 	ands.w	r3, r4, #16777472	; 0x1000100
    return NRF_CTZ(req);
   3fa3e:	bf14      	ite	ne
   3fa40:	fa93 f4a3 	rbitne	r4, r3
   3fa44:	fa94 f4a4 	rbiteq	r4, r4
   3fa48:	fab4 f484 	clz	r4, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   3fa4c:	f04f 0901 	mov.w	r9, #1
   3fa50:	fa09 f904 	lsl.w	r9, r9, r4
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   3fa54:	2c0f      	cmp	r4, #15
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   3fa56:	ea6f 0909 	mvn.w	r9, r9
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   3fa5a:	d95d      	bls.n	3fb18 <usbd_dmareq_process+0xfc>
   3fa5c:	3c10      	subs	r4, #16
   3fa5e:	b2e4      	uxtb	r4, r4
            usbd_ep_state_t * p_state = ep_state_access(ep);
   3fa60:	4620      	mov	r0, r4
   3fa62:	f7ff fc65 	bl	3f330 <ep_state_access>
   3fa66:	4682      	mov	sl, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   3fa68:	4620      	mov	r0, r4
   3fa6a:	f7ff ffc3 	bl	3f9f4 <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
   3fa6e:	f8da 7000 	ldr.w	r7, [sl]
   3fa72:	f8ba 200c 	ldrh.w	r2, [sl, #12]
   3fa76:	f8da 1004 	ldr.w	r1, [sl, #4]
   3fa7a:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   3fa7c:	4683      	mov	fp, r0
                continue_transfer = p_state->handler.consumer(
   3fa7e:	a802      	add	r0, sp, #8
   3fa80:	47b8      	blx	r7
                if (transfer.p_data.rx == NULL)
   3fa82:	9b02      	ldr	r3, [sp, #8]
   3fa84:	2b00      	cmp	r3, #0
   3fa86:	d153      	bne.n	3fb30 <usbd_dmareq_process+0x114>
                if (!continue_transfer)
   3fa88:	b908      	cbnz	r0, 3fa8e <usbd_dmareq_process+0x72>
                    p_state->handler.consumer = NULL;
   3fa8a:	f8ca 0000 	str.w	r0, [sl]
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   3fa8e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (NRF_USBD_EPIN_CHECK(ep))
   3fa92:	b261      	sxtb	r1, r4
            if (var1 == 0x08)
   3fa94:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   3fa98:	2b08      	cmp	r3, #8
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
   3fa9a:	bf02      	ittt	eq
   3fa9c:	4b3d      	ldreq	r3, [pc, #244]	; (3fb94 <usbd_dmareq_process+0x178>)
   3fa9e:	2282      	moveq	r2, #130	; 0x82
   3faa0:	f8c3 2c1c 	streq.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = true;
   3faa4:	2301      	movs	r3, #1
   3faa6:	7033      	strb	r3, [r6, #0]
            m_ep_ready &= ~(1U << pos);
   3faa8:	682b      	ldr	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
   3faaa:	9a03      	ldr	r2, [sp, #12]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
   3faac:	9802      	ldr	r0, [sp, #8]
            m_ep_ready &= ~(1U << pos);
   3faae:	ea03 0309 	and.w	r3, r3, r9
   3fab2:	602b      	str	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
   3fab4:	f8da 3008 	ldr.w	r3, [sl, #8]
    if (NRF_USBD_EPIN_CHECK(ep))
   3fab8:	2900      	cmp	r1, #0
   3faba:	4413      	add	r3, r2
   3fabc:	f8ca 3008 	str.w	r3, [sl, #8]
   3fac0:	f004 0508 	and.w	r5, r4, #8
   3fac4:	4b33      	ldr	r3, [pc, #204]	; (3fb94 <usbd_dmareq_process+0x178>)
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   3fac6:	f004 040f 	and.w	r4, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   3faca:	da4e      	bge.n	3fb6a <usbd_dmareq_process+0x14e>
        if (NRF_USBD_EPISO_CHECK(ep))
   3facc:	2d00      	cmp	r5, #0
   3face:	d044      	beq.n	3fb5a <usbd_dmareq_process+0x13e>
            p_reg->ISOIN.PTR    = ptr;
   3fad0:	f8c3 06a0 	str.w	r0, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
   3fad4:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
   3fad8:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   3fada:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   3fade:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3fae2:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   3fae6:	2201      	movs	r2, #1
   3fae8:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   3faea:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   3faec:	4a2a      	ldr	r2, [pc, #168]	; (3fb98 <usbd_dmareq_process+0x17c>)
   3faee:	4b2b      	ldr	r3, [pc, #172]	; (3fb9c <usbd_dmareq_process+0x180>)
   3faf0:	ea13 0321 	ands.w	r3, r3, r1, asr #32
   3faf4:	bf38      	it	cc
   3faf6:	4613      	movcc	r3, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   3faf8:	4926      	ldr	r1, [pc, #152]	; (3fb94 <usbd_dmareq_process+0x178>)
   3fafa:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   3fafe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3fb02:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   3fb06:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
   3fb08:	b91a      	cbnz	r2, 3fb12 <usbd_dmareq_process+0xf6>
   3fb0a:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
   3fb0e:	2a00      	cmp	r2, #0
   3fb10:	d0f9      	beq.n	3fb06 <usbd_dmareq_process+0xea>
}
   3fb12:	b005      	add	sp, #20
   3fb14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   3fb18:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            usbd_ep_state_t * p_state = ep_state_access(ep);
   3fb1c:	4620      	mov	r0, r4
   3fb1e:	f7ff fc07 	bl	3f330 <ep_state_access>
                continue_transfer = p_state->handler.feeder(
   3fb22:	6803      	ldr	r3, [r0, #0]
   3fb24:	8982      	ldrh	r2, [r0, #12]
   3fb26:	6841      	ldr	r1, [r0, #4]
            usbd_ep_state_t * p_state = ep_state_access(ep);
   3fb28:	4682      	mov	sl, r0
                continue_transfer = p_state->handler.feeder(
   3fb2a:	a802      	add	r0, sp, #8
   3fb2c:	4798      	blx	r3
   3fb2e:	e7ab      	b.n	3fa88 <usbd_dmareq_process+0x6c>
                else if (transfer.size < rx_size)
   3fb30:	9b03      	ldr	r3, [sp, #12]
   3fb32:	459b      	cmp	fp, r3
   3fb34:	d9a8      	bls.n	3fa88 <usbd_dmareq_process+0x6c>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
   3fb36:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   3fb38:	4648      	mov	r0, r9
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
   3fb3a:	f88a 700e 	strb.w	r7, [sl, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   3fb3e:	f7ff fcf1 	bl	3f524 <atomic_and.constprop.0.isra.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   3fb42:	2306      	movs	r3, #6
   3fb44:	f88d 3004 	strb.w	r3, [sp, #4]
                    m_event_handler(&evt);
   3fb48:	4b15      	ldr	r3, [pc, #84]	; (3fba0 <usbd_dmareq_process+0x184>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   3fb4a:	f88d 4006 	strb.w	r4, [sp, #6]
                    m_event_handler(&evt);
   3fb4e:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   3fb50:	f88d 7007 	strb.w	r7, [sp, #7]
                    m_event_handler(&evt);
   3fb54:	a801      	add	r0, sp, #4
   3fb56:	4798      	blx	r3
                    continue;
   3fb58:	e76a      	b.n	3fa30 <usbd_dmareq_process+0x14>
            p_reg->EPIN[epnr].PTR    = ptr;
   3fb5a:	2514      	movs	r5, #20
   3fb5c:	fb05 3304 	mla	r3, r5, r4, r3
   3fb60:	f8c3 0600 	str.w	r0, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
   3fb64:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
    return (nrf_usbd_task_t)(
   3fb68:	e7b6      	b.n	3fad8 <usbd_dmareq_process+0xbc>
        if (NRF_USBD_EPISO_CHECK(ep))
   3fb6a:	b12d      	cbz	r5, 3fb78 <usbd_dmareq_process+0x15c>
            p_reg->ISOOUT.PTR    = ptr;
   3fb6c:	f8c3 07a0 	str.w	r0, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
   3fb70:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
   3fb74:	2328      	movs	r3, #40	; 0x28
   3fb76:	e7b0      	b.n	3fada <usbd_dmareq_process+0xbe>
            p_reg->EPOUT[epnr].PTR    = ptr;
   3fb78:	2514      	movs	r5, #20
   3fb7a:	fb05 3304 	mla	r3, r5, r4, r3
   3fb7e:	f8c3 0700 	str.w	r0, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
   3fb82:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
   3fb86:	e7f5      	b.n	3fb74 <usbd_dmareq_process+0x158>
   3fb88:	20003b21 	.word	0x20003b21
   3fb8c:	2000391c 	.word	0x2000391c
   3fb90:	20003920 	.word	0x20003920
   3fb94:	40027000 	.word	0x40027000
   3fb98:	0004a494 	.word	0x0004a494
   3fb9c:	0004a4a6 	.word	0x0004a4a6
   3fba0:	20003924 	.word	0x20003924

0003fba4 <ev_epdata_handler>:
{
   3fba4:	b538      	push	{r3, r4, r5, lr}
    return p_reg->EPDATASTATUS;
   3fba6:	4b0f      	ldr	r3, [pc, #60]	; (3fbe4 <ev_epdata_handler+0x40>)
   3fba8:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
   3fbac:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
        dataepstatus &= ~(1UL << bitpos);
   3fbb0:	2501      	movs	r5, #1
    while (dataepstatus)
   3fbb2:	b91c      	cbnz	r4, 3fbbc <ev_epdata_handler+0x18>
}
   3fbb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
   3fbb8:	f7ff bf30 	b.w	3fa1c <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
   3fbbc:	fa94 f3a4 	rbit	r3, r4
   3fbc0:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   3fbc4:	2b0f      	cmp	r3, #15
   3fbc6:	bfc8      	it	gt
   3fbc8:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
   3fbcc:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   3fbce:	bfd4      	ite	le
   3fbd0:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
   3fbd4:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
   3fbd6:	fa05 f303 	lsl.w	r3, r5, r3
   3fbda:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
   3fbde:	f7ff fcd9 	bl	3f594 <usbd_ep_data_handler>
   3fbe2:	e7e6      	b.n	3fbb2 <ev_epdata_handler+0xe>
   3fbe4:	40027000 	.word	0x40027000

0003fbe8 <nrf_usbd_epout_dma_handler>:
{
   3fbe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    usbd_dma_pending_clear();
   3fbea:	f7ff fcab 	bl	3f544 <usbd_dma_pending_clear>
{
   3fbee:	4604      	mov	r4, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
   3fbf0:	f7ff fb9e 	bl	3f330 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   3fbf4:	7b83      	ldrb	r3, [r0, #14]
   3fbf6:	2b03      	cmp	r3, #3
   3fbf8:	d10d      	bne.n	3fc16 <nrf_usbd_epout_dma_handler+0x2e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   3fbfa:	4620      	mov	r0, r4
   3fbfc:	f007 fe1e 	bl	4783c <ep2bit>
   3fc00:	2301      	movs	r3, #1
   3fc02:	fa03 f000 	lsl.w	r0, r3, r0
   3fc06:	43c0      	mvns	r0, r0
   3fc08:	f7ff fc8c 	bl	3f524 <atomic_and.constprop.0.isra.0>
}
   3fc0c:	b003      	add	sp, #12
   3fc0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_dmareq_process();
   3fc12:	f7ff bf03 	b.w	3fa1c <usbd_dmareq_process>
    else if (p_state->handler.consumer == NULL)
   3fc16:	6805      	ldr	r5, [r0, #0]
   3fc18:	2d00      	cmp	r5, #0
   3fc1a:	d1f7      	bne.n	3fc0c <nrf_usbd_epout_dma_handler+0x24>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   3fc1c:	4620      	mov	r0, r4
   3fc1e:	f007 fe0d 	bl	4783c <ep2bit>
   3fc22:	2301      	movs	r3, #1
   3fc24:	fa03 f000 	lsl.w	r0, r3, r0
   3fc28:	43c0      	mvns	r0, r0
   3fc2a:	f7ff fc7b 	bl	3f524 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   3fc2e:	2306      	movs	r3, #6
   3fc30:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   3fc34:	4b04      	ldr	r3, [pc, #16]	; (3fc48 <nrf_usbd_epout_dma_handler+0x60>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   3fc36:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
   3fc3a:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   3fc3c:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
   3fc40:	a801      	add	r0, sp, #4
   3fc42:	4798      	blx	r3
   3fc44:	e7e2      	b.n	3fc0c <nrf_usbd_epout_dma_handler+0x24>
   3fc46:	bf00      	nop
   3fc48:	20003924 	.word	0x20003924

0003fc4c <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
   3fc4c:	4b02      	ldr	r3, [pc, #8]	; (3fc58 <nrfx_usbd_ep_stall+0xc>)
   3fc4e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   3fc52:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
   3fc56:	4770      	bx	lr
   3fc58:	40027000 	.word	0x40027000

0003fc5c <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
   3fc5c:	0702      	lsls	r2, r0, #28
   3fc5e:	d413      	bmi.n	3fc88 <nrfx_usbd_ep_stall_check+0x2c>
        return p_reg->HALTED.EPIN[epnr];
   3fc60:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   3fc64:	f010 0f80 	tst.w	r0, #128	; 0x80
   3fc68:	4a08      	ldr	r2, [pc, #32]	; (3fc8c <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
   3fc6a:	bf0b      	itete	eq
   3fc6c:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
   3fc70:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
   3fc74:	eb02 0283 	addeq.w	r2, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
   3fc78:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
   3fc7c:	bf08      	it	eq
   3fc7e:	6850      	ldreq	r0, [r2, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
   3fc80:	1e43      	subs	r3, r0, #1
   3fc82:	4258      	negs	r0, r3
   3fc84:	4158      	adcs	r0, r3
   3fc86:	4770      	bx	lr
        return false;
   3fc88:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
   3fc8a:	4770      	bx	lr
   3fc8c:	40027000 	.word	0x40027000

0003fc90 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
   3fc90:	4b04      	ldr	r3, [pc, #16]	; (3fca4 <nrfx_usbd_ep_dtoggle_clear+0x14>)
   3fc92:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
   3fc96:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   3fc9a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
   3fc9e:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
   3fca2:	4770      	bx	lr
   3fca4:	40027000 	.word	0x40027000

0003fca8 <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
   3fca8:	b510      	push	{r4, lr}
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   3fcaa:	2208      	movs	r2, #8
   3fcac:	2100      	movs	r1, #0
{
   3fcae:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   3fcb0:	f004 fb3d 	bl	4432e <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   3fcb4:	4b0e      	ldr	r3, [pc, #56]	; (3fcf0 <nrfx_usbd_setup_get+0x48>)
   3fcb6:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
   3fcba:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
   3fcbc:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
   3fcc0:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
   3fcc2:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   3fcc6:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   3fcca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
   3fcce:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
   3fcd0:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   3fcd4:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   3fcd8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
   3fcdc:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
   3fcde:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   3fce2:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   3fce6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
   3fcea:	80e3      	strh	r3, [r4, #6]
}
   3fcec:	bd10      	pop	{r4, pc}
   3fcee:	bf00      	nop
   3fcf0:	40027000 	.word	0x40027000

0003fcf4 <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   3fcf4:	4b02      	ldr	r3, [pc, #8]	; (3fd00 <nrfx_usbd_setup_data_clear+0xc>)
   3fcf6:	2201      	movs	r2, #1
   3fcf8:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   3fcfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
   3fcfc:	4770      	bx	lr
   3fcfe:	bf00      	nop
   3fd00:	40027000 	.word	0x40027000

0003fd04 <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   3fd04:	b513      	push	{r0, r1, r4, lr}
    usbd_dma_pending_clear();
   3fd06:	f7ff fc1d 	bl	3f544 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   3fd0a:	4b10      	ldr	r3, [pc, #64]	; (3fd4c <ev_dma_epout0_handler+0x48>)
   3fd0c:	7b9a      	ldrb	r2, [r3, #14]
   3fd0e:	2a03      	cmp	r2, #3
   3fd10:	d106      	bne.n	3fd20 <ev_dma_epout0_handler+0x1c>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   3fd12:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   3fd16:	b002      	add	sp, #8
   3fd18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   3fd1c:	f7ff bc02 	b.w	3f524 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.consumer == NULL)
   3fd20:	681c      	ldr	r4, [r3, #0]
   3fd22:	b974      	cbnz	r4, 3fd42 <ev_dma_epout0_handler+0x3e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   3fd24:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
   3fd28:	f7ff fbfc 	bl	3f524 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   3fd2c:	2306      	movs	r3, #6
   3fd2e:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   3fd32:	4b07      	ldr	r3, [pc, #28]	; (3fd50 <ev_dma_epout0_handler+0x4c>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   3fd34:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
   3fd38:	681b      	ldr	r3, [r3, #0]
   3fd3a:	a801      	add	r0, sp, #4
   3fd3c:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   3fd3e:	b002      	add	sp, #8
   3fd40:	bd10      	pop	{r4, pc}
   3fd42:	b002      	add	sp, #8
   3fd44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_usbd_setup_data_clear();
   3fd48:	f7ff bfd4 	b.w	3fcf4 <nrfx_usbd_setup_data_clear>
   3fd4c:	200037fc 	.word	0x200037fc
   3fd50:	20003924 	.word	0x20003924

0003fd54 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   3fd54:	4b02      	ldr	r3, [pc, #8]	; (3fd60 <nrfx_usbd_setup_clear+0xc>)
   3fd56:	2201      	movs	r2, #1
   3fd58:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   3fd5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
   3fd5c:	4770      	bx	lr
   3fd5e:	bf00      	nop
   3fd60:	40027000 	.word	0x40027000

0003fd64 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   3fd64:	4b02      	ldr	r3, [pc, #8]	; (3fd70 <nrfx_usbd_setup_stall+0xc>)
   3fd66:	2201      	movs	r2, #1
   3fd68:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   3fd6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
   3fd6c:	4770      	bx	lr
   3fd6e:	bf00      	nop
   3fd70:	40027000 	.word	0x40027000

0003fd74 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
   3fd74:	4b01      	ldr	r3, [pc, #4]	; (3fd7c <nrfx_usbd_last_setup_dir_get+0x8>)
   3fd76:	7818      	ldrb	r0, [r3, #0]
   3fd78:	4770      	bx	lr
   3fd7a:	bf00      	nop
   3fd7c:	20003b22 	.word	0x20003b22

0003fd80 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
   3fd80:	b510      	push	{r4, lr}
   3fd82:	4602      	mov	r2, r0
	__asm__ volatile(
   3fd84:	f04f 0320 	mov.w	r3, #32
   3fd88:	f3ef 8411 	mrs	r4, BASEPRI
   3fd8c:	f383 8812 	msr	BASEPRI_MAX, r3
   3fd90:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
   3fd94:	f007 fd52 	bl	4783c <ep2bit>
   3fd98:	490d      	ldr	r1, [pc, #52]	; (3fdd0 <nrfx_usbd_transfer_out_drop+0x50>)
   3fd9a:	2301      	movs	r3, #1
   3fd9c:	fa03 f000 	lsl.w	r0, r3, r0
   3fda0:	680b      	ldr	r3, [r1, #0]
   3fda2:	ea23 0300 	bic.w	r3, r3, r0
   3fda6:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
   3fda8:	f012 0108 	ands.w	r1, r2, #8
   3fdac:	d10a      	bne.n	3fdc4 <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
   3fdae:	f002 030f 	and.w	r3, r2, #15
   3fdb2:	009b      	lsls	r3, r3, #2
   3fdb4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3fdb8:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
   3fdbc:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   3fdc0:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
   3fdc4:	f384 8811 	msr	BASEPRI, r4
   3fdc8:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   3fdcc:	bd10      	pop	{r4, pc}
   3fdce:	bf00      	nop
   3fdd0:	20003920 	.word	0x20003920

0003fdd4 <usbd_ep_abort>:
{
   3fdd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3fdd6:	4601      	mov	r1, r0
	__asm__ volatile(
   3fdd8:	f04f 0320 	mov.w	r3, #32
   3fddc:	f3ef 8511 	mrs	r5, BASEPRI
   3fde0:	f383 8812 	msr	BASEPRI_MAX, r3
   3fde4:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
   3fde8:	f7ff faa2 	bl	3f330 <ep_state_access>
   3fdec:	4606      	mov	r6, r0
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   3fdee:	4608      	mov	r0, r1
   3fdf0:	f007 fd24 	bl	4783c <ep2bit>
   3fdf4:	2201      	movs	r2, #1
    if (NRF_USBD_EPOUT_CHECK(ep))
   3fdf6:	f011 0f80 	tst.w	r1, #128	; 0x80
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   3fdfa:	fa02 f200 	lsl.w	r2, r2, r0
   3fdfe:	482e      	ldr	r0, [pc, #184]	; (3feb8 <usbd_ep_abort+0xe4>)
    if (NRF_USBD_EPOUT_CHECK(ep))
   3fe00:	d119      	bne.n	3fe36 <usbd_ep_abort+0x62>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   3fe02:	6803      	ldr	r3, [r0, #0]
   3fe04:	ea32 0303 	bics.w	r3, r2, r3
   3fe08:	d00a      	beq.n	3fe20 <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
   3fe0a:	4608      	mov	r0, r1
   3fe0c:	f7ff ffb8 	bl	3fd80 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
   3fe10:	2303      	movs	r3, #3
   3fe12:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
   3fe14:	f385 8811 	msr	BASEPRI, r5
   3fe18:	f3bf 8f6f 	isb	sy
}
   3fe1c:	b003      	add	sp, #12
   3fe1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            p_state->handler.consumer = NULL;
   3fe20:	6033      	str	r3, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   3fe22:	6803      	ldr	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
   3fe24:	4925      	ldr	r1, [pc, #148]	; (3febc <usbd_ep_abort+0xe8>)
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   3fe26:	ea23 0302 	bic.w	r3, r3, r2
   3fe2a:	6003      	str	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
   3fe2c:	680b      	ldr	r3, [r1, #0]
   3fe2e:	ea23 0302 	bic.w	r3, r3, r2
   3fe32:	600b      	str	r3, [r1, #0]
   3fe34:	e7ec      	b.n	3fe10 <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
   3fe36:	070b      	lsls	r3, r1, #28
   3fe38:	d415      	bmi.n	3fe66 <usbd_ep_abort+0x92>
            if(ep != NRFX_USBD_EPIN0)
   3fe3a:	2980      	cmp	r1, #128	; 0x80
   3fe3c:	4b20      	ldr	r3, [pc, #128]	; (3fec0 <usbd_ep_abort+0xec>)
   3fe3e:	d02f      	beq.n	3fea0 <usbd_ep_abort+0xcc>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
   3fe40:	f001 040f 	and.w	r4, r1, #15
   3fe44:	f204 34da 	addw	r4, r4, #986	; 0x3da
   3fe48:	0064      	lsls	r4, r4, #1
   3fe4a:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   3fe4e:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   3fe52:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   3fe56:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   3fe58:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   3fe5c:	433c      	orrs	r4, r7
   3fe5e:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
   3fe62:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
   3fe66:	4f15      	ldr	r7, [pc, #84]	; (3febc <usbd_ep_abort+0xe8>)
   3fe68:	6804      	ldr	r4, [r0, #0]
   3fe6a:	683b      	ldr	r3, [r7, #0]
   3fe6c:	ea64 0c03 	orn	ip, r4, r3
   3fe70:	ea1c 0f02 	tst.w	ip, r2
   3fe74:	d0ce      	beq.n	3fe14 <usbd_ep_abort+0x40>
            m_ep_ready       |=   1U << ep2bit(ep) ;
   3fe76:	4313      	orrs	r3, r2
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   3fe78:	ea24 0402 	bic.w	r4, r4, r2
            m_ep_ready       |=   1U << ep2bit(ep) ;
   3fe7c:	603b      	str	r3, [r7, #0]
            p_state->handler.feeder = NULL;
   3fe7e:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   3fe80:	6004      	str	r4, [r0, #0]
            p_state->handler.feeder = NULL;
   3fe82:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
   3fe84:	2303      	movs	r3, #3
   3fe86:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   3fe88:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   3fe8c:	4b0d      	ldr	r3, [pc, #52]	; (3fec4 <usbd_ep_abort+0xf0>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   3fe8e:	f88d 1006 	strb.w	r1, [sp, #6]
   3fe92:	2206      	movs	r2, #6
            m_event_handler(&evt);
   3fe94:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   3fe96:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
   3fe9a:	a801      	add	r0, sp, #4
   3fe9c:	4798      	blx	r3
   3fe9e:	e7b9      	b.n	3fe14 <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
   3fea0:	f240 74b4 	movw	r4, #1972	; 0x7b4
   3fea4:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   3fea8:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   3feac:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   3feb0:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   3feb2:	f044 0404 	orr.w	r4, r4, #4
   3feb6:	e7d1      	b.n	3fe5c <usbd_ep_abort+0x88>
   3feb8:	2000391c 	.word	0x2000391c
   3febc:	20003920 	.word	0x20003920
   3fec0:	40027000 	.word	0x40027000
   3fec4:	20003924 	.word	0x20003924

0003fec8 <ev_setup_handler>:
{
   3fec8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   3feca:	4b14      	ldr	r3, [pc, #80]	; (3ff1c <ev_setup_handler+0x54>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   3fecc:	4c14      	ldr	r4, [pc, #80]	; (3ff20 <ev_setup_handler+0x58>)
   3fece:	f8d3 5480 	ldr.w	r5, [r3, #1152]	; 0x480
   3fed2:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
   3fed4:	4e13      	ldr	r6, [pc, #76]	; (3ff24 <ev_setup_handler+0x5c>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   3fed6:	43da      	mvns	r2, r3
   3fed8:	4b13      	ldr	r3, [pc, #76]	; (3ff28 <ev_setup_handler+0x60>)
        & (1U <<ep2bit(m_last_setup_dir)))
   3feda:	7831      	ldrb	r1, [r6, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   3fedc:	681b      	ldr	r3, [r3, #0]
   3fede:	b292      	uxth	r2, r2
        & (1U <<ep2bit(m_last_setup_dir)))
   3fee0:	4608      	mov	r0, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   3fee2:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
   3fee4:	f007 fcaa 	bl	4783c <ep2bit>
   3fee8:	2301      	movs	r3, #1
   3feea:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   3feec:	4213      	tst	r3, r2
   3feee:	d002      	beq.n	3fef6 <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
   3fef0:	4608      	mov	r0, r1
   3fef2:	f7ff ff6f 	bl	3fdd4 <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
   3fef6:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
    (void)(NRFX_ATOMIC_FETCH_AND(
   3fefa:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
   3fefe:	7035      	strb	r5, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
   3ff00:	f7ff fb10 	bl	3f524 <atomic_and.constprop.0.isra.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
   3ff04:	6823      	ldr	r3, [r4, #0]
   3ff06:	f043 0301 	orr.w	r3, r3, #1
   3ff0a:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
   3ff0c:	2305      	movs	r3, #5
   3ff0e:	9301      	str	r3, [sp, #4]
    m_event_handler(&evt);
   3ff10:	4b06      	ldr	r3, [pc, #24]	; (3ff2c <ev_setup_handler+0x64>)
   3ff12:	a801      	add	r0, sp, #4
   3ff14:	681b      	ldr	r3, [r3, #0]
   3ff16:	4798      	blx	r3
}
   3ff18:	b002      	add	sp, #8
   3ff1a:	bd70      	pop	{r4, r5, r6, pc}
   3ff1c:	40027000 	.word	0x40027000
   3ff20:	20003920 	.word	0x20003920
   3ff24:	20003b22 	.word	0x20003b22
   3ff28:	2000391c 	.word	0x2000391c
   3ff2c:	20003924 	.word	0x20003924

0003ff30 <nrfx_usbd_irq_handler>:
{
   3ff30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return p_reg->INTENSET;
   3ff34:	4b1a      	ldr	r3, [pc, #104]	; (3ffa0 <nrfx_usbd_irq_handler+0x70>)
   3ff36:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
   3ff3a:	2300      	movs	r3, #0
            active |= 1UL << event_nr;
   3ff3c:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   3ff3e:	461d      	mov	r5, r3
    while (to_process)
   3ff40:	b970      	cbnz	r0, 3ff60 <nrfx_usbd_irq_handler+0x30>
        m_isr[event_nr]();
   3ff42:	4f18      	ldr	r7, [pc, #96]	; (3ffa4 <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
   3ff44:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
   3ff48:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
   3ff4c:	f04f 0801 	mov.w	r8, #1
    while (active)
   3ff50:	b9bc      	cbnz	r4, 3ff82 <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
   3ff52:	f7ff fd63 	bl	3fa1c <usbd_dmareq_process>
    if (setup_active)
   3ff56:	b306      	cbz	r6, 3ff9a <nrfx_usbd_irq_handler+0x6a>
}
   3ff58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
   3ff5c:	f7ff bfb4 	b.w	3fec8 <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
   3ff60:	fa90 f2a0 	rbit	r2, r0
   3ff64:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   3ff68:	490f      	ldr	r1, [pc, #60]	; (3ffa8 <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
   3ff6a:	0096      	lsls	r6, r2, #2
   3ff6c:	4431      	add	r1, r6
            active |= 1UL << event_nr;
   3ff6e:	fa04 f202 	lsl.w	r2, r4, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   3ff72:	680e      	ldr	r6, [r1, #0]
    if (ret)
   3ff74:	b116      	cbz	r6, 3ff7c <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   3ff76:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   3ff78:	6809      	ldr	r1, [r1, #0]
   3ff7a:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
   3ff7c:	ea20 0002 	bic.w	r0, r0, r2
   3ff80:	e7de      	b.n	3ff40 <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
   3ff82:	fa94 f5a4 	rbit	r5, r4
   3ff86:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
   3ff8a:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
   3ff8e:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
   3ff92:	4798      	blx	r3
        active &= ~(1UL << event_nr);
   3ff94:	ea24 0405 	bic.w	r4, r4, r5
   3ff98:	e7da      	b.n	3ff50 <nrfx_usbd_irq_handler+0x20>
}
   3ff9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3ff9e:	bf00      	nop
   3ffa0:	40027000 	.word	0x40027000
   3ffa4:	0004a3e4 	.word	0x0004a3e4
   3ffa8:	40027100 	.word	0x40027100

0003ffac <usbd_ep_abort_all>:
{
   3ffac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
   3ffae:	4e11      	ldr	r6, [pc, #68]	; (3fff4 <usbd_ep_abort_all+0x48>)
   3ffb0:	4b11      	ldr	r3, [pc, #68]	; (3fff8 <usbd_ep_abort_all+0x4c>)
   3ffb2:	6834      	ldr	r4, [r6, #0]
   3ffb4:	681b      	ldr	r3, [r3, #0]
   3ffb6:	0c24      	lsrs	r4, r4, #16
   3ffb8:	0424      	lsls	r4, r4, #16
   3ffba:	431c      	orrs	r4, r3
        ep_waiting &= ~(1U << bitpos);
   3ffbc:	2701      	movs	r7, #1
    while (0 != ep_waiting)
   3ffbe:	b91c      	cbnz	r4, 3ffc8 <usbd_ep_abort_all+0x1c>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   3ffc0:	f240 13ff 	movw	r3, #511	; 0x1ff
   3ffc4:	6033      	str	r3, [r6, #0]
}
   3ffc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
   3ffc8:	fa94 f5a4 	rbit	r5, r4
   3ffcc:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   3ffd0:	2d0f      	cmp	r5, #15
        uint8_t bitpos = NRF_CTZ(ep_waiting);
   3ffd2:	4628      	mov	r0, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   3ffd4:	bfc6      	itte	gt
   3ffd6:	f1a5 0010 	subgt.w	r0, r5, #16
   3ffda:	b2c0      	uxtbgt	r0, r0
   3ffdc:	f040 0080 	orrle.w	r0, r0, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
   3ffe0:	0703      	lsls	r3, r0, #28
   3ffe2:	d401      	bmi.n	3ffe8 <usbd_ep_abort_all+0x3c>
            usbd_ep_abort(bit2ep(bitpos));
   3ffe4:	f7ff fef6 	bl	3fdd4 <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
   3ffe8:	fa07 f505 	lsl.w	r5, r7, r5
   3ffec:	ea24 0405 	bic.w	r4, r4, r5
   3fff0:	e7e5      	b.n	3ffbe <usbd_ep_abort_all+0x12>
   3fff2:	bf00      	nop
   3fff4:	20003920 	.word	0x20003920
   3fff8:	2000391c 	.word	0x2000391c

0003fffc <nrfx_usbd_stop>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   3fffc:	4b0c      	ldr	r3, [pc, #48]	; (40030 <nrfx_usbd_stop+0x34>)
   3fffe:	2280      	movs	r2, #128	; 0x80
{
   40000:	b510      	push	{r4, lr}
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
   40002:	2027      	movs	r0, #39	; 0x27
   40004:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   40008:	f7ea f998 	bl	2a33c <arch_irq_is_enabled>
   4000c:	b170      	cbz	r0, 4002c <nrfx_usbd_stop+0x30>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
   4000e:	4c09      	ldr	r4, [pc, #36]	; (40034 <nrfx_usbd_stop+0x38>)
        usbd_ep_abort_all();
   40010:	f7ff ffcc 	bl	3ffac <usbd_ep_abort_all>
   40014:	2300      	movs	r3, #0
   40016:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
        NRFX_IRQ_DISABLE(USBD_IRQn);
   4001a:	2027      	movs	r0, #39	; 0x27
    (void) p_reg->USBPULLUP;
   4001c:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
   40020:	f7ea f978 	bl	2a314 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   40024:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   40028:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
   4002c:	bd10      	pop	{r4, pc}
   4002e:	bf00      	nop
   40030:	e000e100 	.word	0xe000e100
   40034:	40027000 	.word	0x40027000

00040038 <nrfx_usbd_disable>:
{
   40038:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
   4003a:	f7ff ffdf 	bl	3fffc <nrfx_usbd_stop>
    return p_reg->INTENSET;
   4003e:	4b08      	ldr	r3, [pc, #32]	; (40060 <nrfx_usbd_disable+0x28>)
   40040:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
   40044:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
   40048:	2200      	movs	r2, #0
   4004a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   4004e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    usbd_dma_pending_clear();
   40052:	f7ff fa77 	bl	3f544 <usbd_dma_pending_clear>
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   40056:	4b03      	ldr	r3, [pc, #12]	; (40064 <nrfx_usbd_disable+0x2c>)
   40058:	2201      	movs	r2, #1
   4005a:	701a      	strb	r2, [r3, #0]
}
   4005c:	bd08      	pop	{r3, pc}
   4005e:	bf00      	nop
   40060:	40027000 	.word	0x40027000
   40064:	20003b24 	.word	0x20003b24

00040068 <nrfx_usbd_suspend>:
{
   40068:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   4006a:	f04f 0320 	mov.w	r3, #32
   4006e:	f3ef 8511 	mrs	r5, BASEPRI
   40072:	f383 8812 	msr	BASEPRI_MAX, r3
   40076:	f3bf 8f6f 	isb	sy
    if (m_bus_suspend)
   4007a:	4b10      	ldr	r3, [pc, #64]	; (400bc <nrfx_usbd_suspend+0x54>)
   4007c:	781b      	ldrb	r3, [r3, #0]
   4007e:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   40082:	b1a3      	cbz	r3, 400ae <nrfx_usbd_suspend+0x46>
        usbd_ep_abort_all();
   40084:	f7ff ff92 	bl	3ffac <usbd_ep_abort_all>
    return p_reg->EVENTCAUSE;
   40088:	4b0d      	ldr	r3, [pc, #52]	; (400c0 <nrfx_usbd_suspend+0x58>)
   4008a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
   4008e:	f412 7200 	ands.w	r2, r2, #512	; 0x200
   40092:	d10c      	bne.n	400ae <nrfx_usbd_suspend+0x46>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
   40094:	2101      	movs	r1, #1
   40096:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   4009a:	f8d3 152c 	ldr.w	r1, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
   4009e:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   400a2:	0589      	lsls	r1, r1, #22
   400a4:	d504      	bpl.n	400b0 <nrfx_usbd_suspend+0x48>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
   400a6:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   400aa:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
   400ae:	2400      	movs	r4, #0
	__asm__ volatile(
   400b0:	f385 8811 	msr	BASEPRI, r5
   400b4:	f3bf 8f6f 	isb	sy
}
   400b8:	4620      	mov	r0, r4
   400ba:	bd38      	pop	{r3, r4, r5, pc}
   400bc:	20003b23 	.word	0x20003b23
   400c0:	40027000 	.word	0x40027000

000400c4 <nrfx_usbd_ep_disable>:
{
   400c4:	b510      	push	{r4, lr}
   400c6:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
   400c8:	f7ff fe84 	bl	3fdd4 <usbd_ep_abort>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   400cc:	4a10      	ldr	r2, [pc, #64]	; (40110 <nrfx_usbd_ep_disable+0x4c>)
    if (NRF_USBD_EPIN_CHECK(ep))
   400ce:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   400d2:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
   400d6:	f04f 0301 	mov.w	r3, #1
   400da:	bf14      	ite	ne
   400dc:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
   400e0:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
        p_reg->EPINEN &= ~(1UL << epnr);
   400e4:	fa03 f300 	lsl.w	r3, r3, r0
   400e8:	ea6f 0303 	mvn.w	r3, r3
   400ec:	bf15      	itete	ne
   400ee:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
   400f0:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
   400f2:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
   400f6:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   400fa:	bf14      	ite	ne
   400fc:	4b05      	ldrne	r3, [pc, #20]	; (40114 <nrfx_usbd_ep_disable+0x50>)
   400fe:	4b06      	ldreq	r3, [pc, #24]	; (40118 <nrfx_usbd_ep_disable+0x54>)
   40100:	5c1a      	ldrb	r2, [r3, r0]
   40102:	2301      	movs	r3, #1
   40104:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
   40106:	4a02      	ldr	r2, [pc, #8]	; (40110 <nrfx_usbd_ep_disable+0x4c>)
   40108:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   4010c:	bd10      	pop	{r4, pc}
   4010e:	bf00      	nop
   40110:	40027000 	.word	0x40027000
   40114:	0004ab2b 	.word	0x0004ab2b
   40118:	0004ab22 	.word	0x0004ab22

0004011c <nrfx_usbd_ep_enable>:
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   4011c:	f010 0f80 	tst.w	r0, #128	; 0x80
{
   40120:	b570      	push	{r4, r5, r6, lr}
   40122:	4924      	ldr	r1, [pc, #144]	; (401b4 <nrfx_usbd_ep_enable+0x98>)
   40124:	4604      	mov	r4, r0
   40126:	f000 030f 	and.w	r3, r0, #15
   4012a:	f04f 0501 	mov.w	r5, #1
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   4012e:	d012      	beq.n	40156 <nrfx_usbd_ep_enable+0x3a>
   40130:	4a21      	ldr	r2, [pc, #132]	; (401b8 <nrfx_usbd_ep_enable+0x9c>)
   40132:	5cd2      	ldrb	r2, [r2, r3]
   40134:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
   40138:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPINEN & (1UL << epnr));
   4013c:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
   40140:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   40142:	07d0      	lsls	r0, r2, #31
   40144:	d406      	bmi.n	40154 <nrfx_usbd_ep_enable+0x38>
        p_reg->EPINEN |= 1UL << epnr;
   40146:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
   4014a:	fa05 f303 	lsl.w	r3, r5, r3
   4014e:	4313      	orrs	r3, r2
   40150:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
}
   40154:	bd70      	pop	{r4, r5, r6, pc}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   40156:	4a19      	ldr	r2, [pc, #100]	; (401bc <nrfx_usbd_ep_enable+0xa0>)
   40158:	5cd2      	ldrb	r2, [r2, r3]
   4015a:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
   4015e:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
   40162:	f8d1 2514 	ldr.w	r2, [r1, #1300]	; 0x514
   40166:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   40168:	07d2      	lsls	r2, r2, #31
   4016a:	d4f3      	bmi.n	40154 <nrfx_usbd_ep_enable+0x38>
        p_reg->EPOUTEN |= 1UL << epnr;
   4016c:	f8d1 6514 	ldr.w	r6, [r1, #1300]	; 0x514
   40170:	fa05 f203 	lsl.w	r2, r5, r3
   40174:	4332      	orrs	r2, r6
   40176:	f8c1 2514 	str.w	r2, [r1, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
   4017a:	2b00      	cmp	r3, #0
   4017c:	d0ea      	beq.n	40154 <nrfx_usbd_ep_enable+0x38>
        NRF_USBD_EPOUT_CHECK(ep) &&
   4017e:	0703      	lsls	r3, r0, #28
   40180:	d4e8      	bmi.n	40154 <nrfx_usbd_ep_enable+0x38>
	__asm__ volatile(
   40182:	f04f 0320 	mov.w	r3, #32
   40186:	f3ef 8611 	mrs	r6, BASEPRI
   4018a:	f383 8812 	msr	BASEPRI_MAX, r3
   4018e:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
   40192:	f7ff fdf5 	bl	3fd80 <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   40196:	4620      	mov	r0, r4
   40198:	f007 fb50 	bl	4783c <ep2bit>
   4019c:	4a08      	ldr	r2, [pc, #32]	; (401c0 <nrfx_usbd_ep_enable+0xa4>)
   4019e:	6813      	ldr	r3, [r2, #0]
   401a0:	fa05 f000 	lsl.w	r0, r5, r0
   401a4:	ea23 0300 	bic.w	r3, r3, r0
   401a8:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   401aa:	f386 8811 	msr	BASEPRI, r6
   401ae:	f3bf 8f6f 	isb	sy
}
   401b2:	e7cf      	b.n	40154 <nrfx_usbd_ep_enable+0x38>
   401b4:	40027000 	.word	0x40027000
   401b8:	0004ab2b 	.word	0x0004ab2b
   401bc:	0004ab22 	.word	0x0004ab22
   401c0:	2000391c 	.word	0x2000391c

000401c4 <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   401c4:	0603      	lsls	r3, r0, #24
{
   401c6:	b510      	push	{r4, lr}
   401c8:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   401ca:	d405      	bmi.n	401d8 <nrfx_usbd_ep_stall_clear+0x14>
   401cc:	f7ff fd46 	bl	3fc5c <nrfx_usbd_ep_stall_check>
   401d0:	b110      	cbz	r0, 401d8 <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
   401d2:	4620      	mov	r0, r4
   401d4:	f7ff fdd4 	bl	3fd80 <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
   401d8:	4b01      	ldr	r3, [pc, #4]	; (401e0 <nrfx_usbd_ep_stall_clear+0x1c>)
   401da:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
   401de:	bd10      	pop	{r4, pc}
   401e0:	40027000 	.word	0x40027000

000401e4 <compare_ports>:

static int compare_ports(const void *a, const void *b) {
    const struct kscan_gpio *gpio_a = a;
    const struct kscan_gpio *gpio_b = b;

    return gpio_a->spec.port - gpio_b->spec.port;
   401e4:	680b      	ldr	r3, [r1, #0]
   401e6:	6800      	ldr	r0, [r0, #0]
   401e8:	1ac0      	subs	r0, r0, r3
}
   401ea:	4b02      	ldr	r3, [pc, #8]	; (401f4 <compare_ports+0x10>)
    return gpio_a->spec.port - gpio_b->spec.port;
   401ec:	10c0      	asrs	r0, r0, #3
}
   401ee:	4358      	muls	r0, r3
   401f0:	4770      	bx	lr
   401f2:	bf00      	nop
   401f4:	aaaaaaab 	.word	0xaaaaaaab

000401f8 <kscan_gpio_list_sort_by_port>:

void kscan_gpio_list_sort_by_port(struct kscan_gpio_list *list) {
    qsort(list->gpios, list->len, sizeof(list->gpios[0]), compare_ports);
   401f8:	e9d0 0100 	ldrd	r0, r1, [r0]
   401fc:	4b01      	ldr	r3, [pc, #4]	; (40204 <kscan_gpio_list_sort_by_port+0xc>)
   401fe:	220c      	movs	r2, #12
   40200:	f004 b83e 	b.w	44280 <qsort>
   40204:	000401e5 	.word	0x000401e5

00040208 <kscan_matrix_init>:
    }

    return 0;
}

static int kscan_matrix_init(const struct device *dev) {
   40208:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    struct kscan_matrix_data *data = dev->data;
   4020c:	6907      	ldr	r7, [r0, #16]
static int kscan_matrix_init(const struct device *dev) {
   4020e:	4604      	mov	r4, r0

    data->dev = dev;
   40210:	4638      	mov	r0, r7
    for (int i = 0; i < data->inputs.len; i++) {
   40212:	2500      	movs	r5, #0
    data->dev = dev;
   40214:	f840 4b04 	str.w	r4, [r0], #4

    // Sort inputs by port so we can read each port just once per scan.
    kscan_gpio_list_sort_by_port(&data->inputs);
   40218:	f7ff ffee 	bl	401f8 <kscan_gpio_list_sort_by_port>
    const struct kscan_matrix_data *data = dev->data;
   4021c:	f8d4 8010 	ldr.w	r8, [r4, #16]
        const struct kscan_gpio *gpio = &data->inputs.gpios[i];
   40220:	f04f 090c 	mov.w	r9, #12
    for (int i = 0; i < data->inputs.len; i++) {
   40224:	f8d8 3008 	ldr.w	r3, [r8, #8]
   40228:	42ab      	cmp	r3, r5
   4022a:	d90a      	bls.n	40242 <kscan_matrix_init+0x3a>
        const struct kscan_gpio *gpio = &data->inputs.gpios[i];
   4022c:	f8d8 b004 	ldr.w	fp, [r8, #4]
   40230:	fb09 f605 	mul.w	r6, r9, r5
   40234:	eb0b 0a06 	add.w	sl, fp, r6
    if (!device_is_ready(gpio->spec.port)) {
   40238:	f85b 0006 	ldr.w	r0, [fp, r6]
   4023c:	f007 fd6c 	bl	47d18 <z_device_is_ready>
   40240:	b990      	cbnz	r0, 40268 <kscan_matrix_init+0x60>

    kscan_matrix_init_inputs(dev);
    kscan_matrix_init_outputs(dev);
   40242:	6866      	ldr	r6, [r4, #4]
    for (int i = 0; i < config->outputs.len; i++) {
   40244:	2500      	movs	r5, #0
        const struct gpio_dt_spec *gpio = &config->outputs.gpios[i].spec;
   40246:	f04f 080c 	mov.w	r8, #12
    for (int i = 0; i < config->outputs.len; i++) {
   4024a:	6873      	ldr	r3, [r6, #4]
   4024c:	42ab      	cmp	r3, r5
   4024e:	d82f      	bhi.n	402b0 <kscan_matrix_init+0xa8>
    kscan_matrix_set_all_outputs(dev, 0);
   40250:	6860      	ldr	r0, [r4, #4]
   40252:	2100      	movs	r1, #0
   40254:	f007 fc10 	bl	47a78 <kscan_matrix_set_all_outputs.isra.0>

    k_work_init_delayable(&data->work, kscan_matrix_work_handler);
   40258:	f107 0010 	add.w	r0, r7, #16
   4025c:	491e      	ldr	r1, [pc, #120]	; (402d8 <kscan_matrix_init+0xd0>)
   4025e:	f008 f81a 	bl	48296 <k_work_init_delayable>

    return 0;
}
   40262:	2000      	movs	r0, #0
   40264:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int err = gpio_pin_configure_dt(&gpio->spec, GPIO_INPUT);
   40268:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   4026c:	4650      	mov	r0, sl
   4026e:	f007 fba4 	bl	479ba <gpio_pin_configure_dt>
    if (err) {
   40272:	2800      	cmp	r0, #0
   40274:	d1e5      	bne.n	40242 <kscan_matrix_init+0x3a>
    struct kscan_matrix_irq_callback *irq = &data->irqs[gpio->index];
   40276:	f8da 3008 	ldr.w	r3, [sl, #8]
   4027a:	6921      	ldr	r1, [r4, #16]
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   4027c:	f8df c05c 	ldr.w	ip, [pc, #92]	; 402dc <kscan_matrix_init+0xd4>
   40280:	6c09      	ldr	r1, [r1, #64]	; 0x40
   40282:	0118      	lsls	r0, r3, #4
    gpio_init_callback(&irq->callback, kscan_matrix_irq_callback_handler, BIT(gpio->spec.pin));
   40284:	2201      	movs	r2, #1
    irq->dev = dev;
   40286:	500c      	str	r4, [r1, r0]
    gpio_init_callback(&irq->callback, kscan_matrix_irq_callback_handler, BIT(gpio->spec.pin));
   40288:	f89a 0004 	ldrb.w	r0, [sl, #4]
    struct kscan_matrix_irq_callback *irq = &data->irqs[gpio->index];
   4028c:	eb01 1303 	add.w	r3, r1, r3, lsl #4
    gpio_init_callback(&irq->callback, kscan_matrix_irq_callback_handler, BIT(gpio->spec.pin));
   40290:	fa02 f000 	lsl.w	r0, r2, r0
	callback->pin_mask = pin_mask;
   40294:	e9c3 c002 	strd	ip, r0, [r3, #8]
    err = gpio_add_callback(gpio->spec.port, &irq->callback);
   40298:	f85b 0006 	ldr.w	r0, [fp, r6]
    gpio_init_callback(&irq->callback, kscan_matrix_irq_callback_handler, BIT(gpio->spec.pin));
   4029c:	1d19      	adds	r1, r3, #4
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   4029e:	6883      	ldr	r3, [r0, #8]
   402a0:	69db      	ldr	r3, [r3, #28]
   402a2:	2b00      	cmp	r3, #0
   402a4:	d0cd      	beq.n	40242 <kscan_matrix_init+0x3a>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   402a6:	4798      	blx	r3
        if (err) {
   402a8:	2800      	cmp	r0, #0
   402aa:	d1ca      	bne.n	40242 <kscan_matrix_init+0x3a>
    for (int i = 0; i < data->inputs.len; i++) {
   402ac:	3501      	adds	r5, #1
   402ae:	e7b9      	b.n	40224 <kscan_matrix_init+0x1c>
        const struct gpio_dt_spec *gpio = &config->outputs.gpios[i].spec;
   402b0:	6832      	ldr	r2, [r6, #0]
   402b2:	fb08 f305 	mul.w	r3, r8, r5
   402b6:	eb02 0903 	add.w	r9, r2, r3
    if (!device_is_ready(gpio->port)) {
   402ba:	58d0      	ldr	r0, [r2, r3]
   402bc:	f007 fd2c 	bl	47d18 <z_device_is_ready>
   402c0:	2800      	cmp	r0, #0
   402c2:	d0c5      	beq.n	40250 <kscan_matrix_init+0x48>
    int err = gpio_pin_configure_dt(gpio, GPIO_OUTPUT);
   402c4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   402c8:	4648      	mov	r0, r9
   402ca:	f007 fb76 	bl	479ba <gpio_pin_configure_dt>
        if (err) {
   402ce:	2800      	cmp	r0, #0
   402d0:	d1be      	bne.n	40250 <kscan_matrix_init+0x48>
    for (int i = 0; i < config->outputs.len; i++) {
   402d2:	3501      	adds	r5, #1
   402d4:	e7b9      	b.n	4024a <kscan_matrix_init+0x42>
   402d6:	bf00      	nop
   402d8:	00047c11 	.word	0x00047c11
   402dc:	00047c37 	.word	0x00047c37

000402e0 <bvd_init>:
static const struct sensor_driver_api bvd_api = {
    .sample_fetch = bvd_sample_fetch,
    .channel_get = bvd_channel_get,
};

static int bvd_init(const struct device *dev) {
   402e0:	b570      	push	{r4, r5, r6, lr}
    struct bvd_data *drv_data = dev->data;
   402e2:	6904      	ldr	r4, [r0, #16]
    const struct bvd_config *drv_cfg = dev->config;
   402e4:	6846      	ldr	r6, [r0, #4]

    if (drv_data->adc == NULL) {
   402e6:	6825      	ldr	r5, [r4, #0]
   402e8:	b1fd      	cbz	r5, 4032a <bvd_init+0x4a>
        LOG_ERR("Failed to control feed %u: %d", drv_cfg->power.pin, rc);
        return rc;
    }
#endif // DT_INST_NODE_HAS_PROP(0, power_gpios)

    drv_data->as = (struct adc_sequence){
   402ea:	2214      	movs	r2, #20
   402ec:	2100      	movs	r1, #0
   402ee:	f104 000c 	add.w	r0, r4, #12
   402f2:	f004 f81c 	bl	4432e <memset>
        .channels = BIT(0),
        .buffer = &drv_data->value.adc_raw,
   402f6:	f104 0220 	add.w	r2, r4, #32
    drv_data->as = (struct adc_sequence){
   402fa:	6162      	str	r2, [r4, #20]
   402fc:	2202      	movs	r2, #2
   402fe:	2301      	movs	r3, #1
   40300:	61a2      	str	r2, [r4, #24]
   40302:	2204      	movs	r2, #4
   40304:	7762      	strb	r2, [r4, #29]
   40306:	6123      	str	r3, [r4, #16]
   40308:	77a3      	strb	r3, [r4, #30]
#ifdef CONFIG_ADC_NRFX_SAADC
    drv_data->acc = (struct adc_channel_cfg){
        .gain = ADC_GAIN_1_6,
        .reference = ADC_REF_INTERNAL,
        .acquisition_time = ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 40),
        .input_positive = SAADC_CH_PSELP_PSELP_AnalogInput0 + drv_cfg->io_channel.channel,
   4030a:	7833      	ldrb	r3, [r6, #0]
    drv_data->acc = (struct adc_channel_cfg){
   4030c:	4908      	ldr	r1, [pc, #32]	; (40330 <bvd_init+0x50>)
        .input_positive = SAADC_CH_PSELP_PSELP_AnalogInput0 + drv_cfg->io_channel.channel,
   4030e:	3301      	adds	r3, #1
    drv_data->acc = (struct adc_channel_cfg){
   40310:	2200      	movs	r2, #0
   40312:	e9c4 1201 	strd	r1, r2, [r4, #4]
   40316:	7263      	strb	r3, [r4, #9]
    };

    drv_data->as.resolution = 12;
   40318:	230c      	movs	r3, #12
   4031a:	7723      	strb	r3, [r4, #28]
					   const struct adc_channel_cfg *channel_cfg)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->channel_setup(dev, channel_cfg);
   4031c:	68ab      	ldr	r3, [r5, #8]
   4031e:	1d21      	adds	r1, r4, #4
   40320:	4628      	mov	r0, r5
   40322:	681b      	ldr	r3, [r3, #0]

    rc = adc_channel_setup(drv_data->adc, &drv_data->acc);
    LOG_DBG("AIN%u setup returned %d", drv_cfg->io_channel.channel, rc);

    return rc;
}
   40324:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   40328:	4718      	bx	r3
   4032a:	f06f 0012 	mvn.w	r0, #18
   4032e:	bd70      	pop	{r4, r5, r6, pc}
   40330:	40280400 	.word	0x40280400

00040334 <bvd_sample_fetch>:
static int bvd_sample_fetch(const struct device *dev, enum sensor_channel chan) {
   40334:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   40338:	460a      	mov	r2, r1
    if (chan != SENSOR_CHAN_GAUGE_VOLTAGE && chan != SENSOR_CHAN_GAUGE_STATE_OF_CHARGE &&
   4033a:	3a27      	subs	r2, #39	; 0x27
    struct bvd_data *drv_data = dev->data;
   4033c:	6904      	ldr	r4, [r0, #16]
    const struct bvd_config *drv_cfg = dev->config;
   4033e:	6847      	ldr	r7, [r0, #4]
    if (chan != SENSOR_CHAN_GAUGE_VOLTAGE && chan != SENSOR_CHAN_GAUGE_STATE_OF_CHARGE &&
   40340:	b292      	uxth	r2, r2
   40342:	2a12      	cmp	r2, #18
    struct adc_sequence *as = &drv_data->as;
   40344:	f104 010c 	add.w	r1, r4, #12
    if (chan != SENSOR_CHAN_GAUGE_VOLTAGE && chan != SENSOR_CHAN_GAUGE_STATE_OF_CHARGE &&
   40348:	d831      	bhi.n	403ae <bvd_sample_fetch+0x7a>
   4034a:	4b1a      	ldr	r3, [pc, #104]	; (403b4 <bvd_sample_fetch+0x80>)
   4034c:	4113      	asrs	r3, r2
   4034e:	f013 0501 	ands.w	r5, r3, #1
   40352:	d12c      	bne.n	403ae <bvd_sample_fetch+0x7a>
    rc = adc_read(drv_data->adc, as);
   40354:	6820      	ldr	r0, [r4, #0]
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
   40356:	6883      	ldr	r3, [r0, #8]
   40358:	685b      	ldr	r3, [r3, #4]
   4035a:	4798      	blx	r3
    as->calibrate = false;
   4035c:	77a5      	strb	r5, [r4, #30]
    if (rc == 0) {
   4035e:	4606      	mov	r6, r0
   40360:	bb08      	cbnz	r0, 403a6 <bvd_sample_fetch+0x72>
 * @return a positive value is the reference voltage value.  Returns
 * zero if reference voltage information is not available.
 */
static inline uint16_t adc_ref_internal(const struct device *dev)
{
	const struct adc_driver_api *api =
   40362:	6823      	ldr	r3, [r4, #0]
        int32_t val = drv_data->value.adc_raw;
   40364:	8c25      	ldrh	r5, [r4, #32]
				(const struct adc_driver_api *)dev->api;

	return api->ref_internal;
   40366:	689b      	ldr	r3, [r3, #8]
					enum adc_gain gain,
					uint8_t resolution,
					int32_t *valp)
{
	int32_t adc_mv = *valp * ref_mv;
	int ret = adc_gain_invert(gain, &adc_mv);
   40368:	7920      	ldrb	r0, [r4, #4]
        adc_raw_to_millivolts(adc_ref_internal(drv_data->adc), drv_data->acc.gain, as->resolution,
   4036a:	891b      	ldrh	r3, [r3, #8]
   4036c:	f894 801c 	ldrb.w	r8, [r4, #28]
	int32_t adc_mv = *valp * ref_mv;
   40370:	436b      	muls	r3, r5
	int ret = adc_gain_invert(gain, &adc_mv);
   40372:	a901      	add	r1, sp, #4
	int32_t adc_mv = *valp * ref_mv;
   40374:	9301      	str	r3, [sp, #4]
	int ret = adc_gain_invert(gain, &adc_mv);
   40376:	f7fc fdbf 	bl	3cef8 <adc_gain_invert>

	if (ret == 0) {
   4037a:	b910      	cbnz	r0, 40382 <bvd_sample_fetch+0x4e>
		*valp = (adc_mv >> resolution);
   4037c:	9d01      	ldr	r5, [sp, #4]
   4037e:	fa45 f508 	asr.w	r5, r5, r8
        uint16_t millivolts = val * (uint64_t)drv_cfg->full_ohm / drv_cfg->output_ohm;
   40382:	6939      	ldr	r1, [r7, #16]
   40384:	68fa      	ldr	r2, [r7, #12]
   40386:	ea4f 7ce5 	mov.w	ip, r5, asr #31
   4038a:	fba1 0505 	umull	r0, r5, r1, r5
   4038e:	fb01 510c 	mla	r1, r1, ip, r5
   40392:	2300      	movs	r3, #0
   40394:	f7e5 feb4 	bl	26100 <__aeabi_uldivmod>
   40398:	4605      	mov	r5, r0
        uint8_t percent = lithium_ion_mv_to_pct(millivolts);
   4039a:	b200      	sxth	r0, r0
   4039c:	f007 fca4 	bl	47ce8 <lithium_ion_mv_to_pct>
        uint16_t millivolts = val * (uint64_t)drv_cfg->full_ohm / drv_cfg->output_ohm;
   403a0:	8465      	strh	r5, [r4, #34]	; 0x22
        drv_data->value.state_of_charge = percent;
   403a2:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
   403a6:	4630      	mov	r0, r6
   403a8:	b002      	add	sp, #8
   403aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -ENOTSUP;
   403ae:	f06f 0685 	mvn.w	r6, #133	; 0x85
   403b2:	e7f8      	b.n	403a6 <bvd_sample_fetch+0x72>
   403b4:	fffbffde 	.word	0xfffbffde

000403b8 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   403b8:	4b0f      	ldr	r3, [pc, #60]	; (403f8 <z_sys_init_run_level+0x40>)
{
   403ba:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   403bc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   403c0:	3001      	adds	r0, #1
   403c2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   403c6:	42a6      	cmp	r6, r4
   403c8:	d800      	bhi.n	403cc <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   403ca:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   403cc:	e9d4 3500 	ldrd	r3, r5, [r4]
   403d0:	4628      	mov	r0, r5
   403d2:	4798      	blx	r3
		if (dev != NULL) {
   403d4:	b16d      	cbz	r5, 403f2 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   403d6:	b138      	cbz	r0, 403e8 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   403d8:	2800      	cmp	r0, #0
   403da:	bfb8      	it	lt
   403dc:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   403de:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
   403e0:	28ff      	cmp	r0, #255	; 0xff
   403e2:	bfa8      	it	ge
   403e4:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   403e6:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   403e8:	68ea      	ldr	r2, [r5, #12]
   403ea:	7853      	ldrb	r3, [r2, #1]
   403ec:	f043 0301 	orr.w	r3, r3, #1
   403f0:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   403f2:	3408      	adds	r4, #8
   403f4:	e7e7      	b.n	403c6 <z_sys_init_run_level+0xe>
   403f6:	bf00      	nop
   403f8:	0004a47c 	.word	0x0004a47c

000403fc <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   403fc:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   403fe:	4605      	mov	r5, r0
   40400:	b910      	cbnz	r0, 40408 <z_impl_device_get_binding+0xc>
		return NULL;
   40402:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   40404:	4620      	mov	r0, r4
   40406:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   40408:	7803      	ldrb	r3, [r0, #0]
   4040a:	2b00      	cmp	r3, #0
   4040c:	d0f9      	beq.n	40402 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   4040e:	4c0e      	ldr	r4, [pc, #56]	; (40448 <z_impl_device_get_binding+0x4c>)
   40410:	4e0e      	ldr	r6, [pc, #56]	; (4044c <z_impl_device_get_binding+0x50>)
   40412:	42b4      	cmp	r4, r6
   40414:	d108      	bne.n	40428 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   40416:	4c0c      	ldr	r4, [pc, #48]	; (40448 <z_impl_device_get_binding+0x4c>)
   40418:	42b4      	cmp	r4, r6
   4041a:	d0f2      	beq.n	40402 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   4041c:	4620      	mov	r0, r4
   4041e:	f007 fc7b 	bl	47d18 <z_device_is_ready>
   40422:	b950      	cbnz	r0, 4043a <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   40424:	3418      	adds	r4, #24
   40426:	e7f7      	b.n	40418 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   40428:	4620      	mov	r0, r4
   4042a:	f007 fc75 	bl	47d18 <z_device_is_ready>
   4042e:	b110      	cbz	r0, 40436 <z_impl_device_get_binding+0x3a>
   40430:	6823      	ldr	r3, [r4, #0]
   40432:	42ab      	cmp	r3, r5
   40434:	d0e6      	beq.n	40404 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   40436:	3418      	adds	r4, #24
   40438:	e7eb      	b.n	40412 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   4043a:	6821      	ldr	r1, [r4, #0]
   4043c:	4628      	mov	r0, r5
   4043e:	f003 ff3b 	bl	442b8 <strcmp>
   40442:	2800      	cmp	r0, #0
   40444:	d1ee      	bne.n	40424 <z_impl_device_get_binding+0x28>
   40446:	e7dd      	b.n	40404 <z_impl_device_get_binding+0x8>
   40448:	00048a60 	.word	0x00048a60
   4044c:	00048bb0 	.word	0x00048bb0

00040450 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   40450:	4b01      	ldr	r3, [pc, #4]	; (40458 <z_impl_z_errno+0x8>)
   40452:	6898      	ldr	r0, [r3, #8]
}
   40454:	3064      	adds	r0, #100	; 0x64
   40456:	4770      	bx	lr
   40458:	20003978 	.word	0x20003978

0004045c <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   4045c:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   4045e:	4b0a      	ldr	r3, [pc, #40]	; (40488 <bg_thread_main+0x2c>)
   40460:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   40462:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   40464:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   40466:	f7ff ffa7 	bl	403b8 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   4046a:	f001 fbd5 	bl	41c18 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   4046e:	2003      	movs	r0, #3
   40470:	f7ff ffa2 	bl	403b8 <z_sys_init_run_level>

	z_init_static_threads();
   40474:	f000 f966 	bl	40744 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
   40478:	f7e7 fe0e 	bl	28098 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   4047c:	4a03      	ldr	r2, [pc, #12]	; (4048c <bg_thread_main+0x30>)
   4047e:	7b13      	ldrb	r3, [r2, #12]
   40480:	f023 0301 	bic.w	r3, r3, #1
   40484:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   40486:	bd08      	pop	{r3, pc}
   40488:	20003b25 	.word	0x20003b25
   4048c:	20001940 	.word	0x20001940

00040490 <z_bss_zero>:
{
   40490:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   40492:	4803      	ldr	r0, [pc, #12]	; (404a0 <z_bss_zero+0x10>)
   40494:	4a03      	ldr	r2, [pc, #12]	; (404a4 <z_bss_zero+0x14>)
   40496:	2100      	movs	r1, #0
   40498:	1a12      	subs	r2, r2, r0
   4049a:	f007 fc6e 	bl	47d7a <z_early_memset>
}
   4049e:	bd08      	pop	{r3, pc}
   404a0:	20000f08 	.word	0x20000f08
   404a4:	20003b28 	.word	0x20003b28

000404a8 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   404a8:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   404aa:	2300      	movs	r3, #0
{
   404ac:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   404ae:	2201      	movs	r2, #1
   404b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   404b4:	4e11      	ldr	r6, [pc, #68]	; (404fc <z_init_cpu+0x54>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   404b6:	4d12      	ldr	r5, [pc, #72]	; (40500 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
   404b8:	9301      	str	r3, [sp, #4]
   404ba:	220f      	movs	r2, #15
   404bc:	e9cd 3202 	strd	r3, r2, [sp, #8]
   404c0:	4910      	ldr	r1, [pc, #64]	; (40504 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   404c2:	2318      	movs	r3, #24
   404c4:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   404c8:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
	z_setup_new_thread(thread, stack,
   404cc:	f44f 72a0 	mov.w	r2, #320	; 0x140
{
   404d0:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   404d2:	fb02 1100 	mla	r1, r2, r0, r1
   404d6:	4b0c      	ldr	r3, [pc, #48]	; (40508 <z_init_cpu+0x60>)
   404d8:	9500      	str	r5, [sp, #0]
   404da:	4630      	mov	r0, r6
   404dc:	f000 f8d6 	bl	4068c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   404e0:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
   404e2:	752c      	strb	r4, [r5, #20]
   404e4:	f023 0304 	bic.w	r3, r3, #4
   404e8:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   404ea:	4b08      	ldr	r3, [pc, #32]	; (4050c <z_init_cpu+0x64>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   404ec:	60ee      	str	r6, [r5, #12]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   404ee:	3401      	adds	r4, #1
   404f0:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].irq_stack =
   404f4:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   404f6:	b006      	add	sp, #24
   404f8:	bd70      	pop	{r4, r5, r6, pc}
   404fa:	bf00      	nop
   404fc:	200018c0 	.word	0x200018c0
   40500:	20003978 	.word	0x20003978
   40504:	20006010 	.word	0x20006010
   40508:	000407fd 	.word	0x000407fd
   4050c:	20005810 	.word	0x20005810

00040510 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   40510:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   40512:	4b2e      	ldr	r3, [pc, #184]	; (405cc <z_cstart+0xbc>)
   40514:	b0a6      	sub	sp, #152	; 0x98
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   40516:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   4051a:	4d2d      	ldr	r5, [pc, #180]	; (405d0 <z_cstart+0xc0>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   4051c:	4e2d      	ldr	r6, [pc, #180]	; (405d4 <z_cstart+0xc4>)
   4051e:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   40520:	4f2d      	ldr	r7, [pc, #180]	; (405d8 <z_cstart+0xc8>)
   40522:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   40526:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   40528:	2400      	movs	r4, #0
   4052a:	23e0      	movs	r3, #224	; 0xe0
   4052c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   40530:	77ec      	strb	r4, [r5, #31]
   40532:	762c      	strb	r4, [r5, #24]
   40534:	766c      	strb	r4, [r5, #25]
   40536:	76ac      	strb	r4, [r5, #26]
   40538:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   4053c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   4053e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   40542:	626b      	str	r3, [r5, #36]	; 0x24
   40544:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   40548:	f7ea f8d8 	bl	2a6fc <z_arm_fault_init>
	z_arm_cpu_idle_init();
   4054c:	f7e9 feb6 	bl	2a2bc <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   40550:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   40554:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   40556:	62eb      	str	r3, [r5, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
   40558:	ad06      	add	r5, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   4055a:	f7ea f98b 	bl	2a874 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   4055e:	f7ea f919 	bl	2a794 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   40562:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   40566:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   40568:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   4056c:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   40570:	f001 fb34 	bl	41bdc <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   40574:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   40576:	f007 fbce 	bl	47d16 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   4057a:	4620      	mov	r0, r4
   4057c:	f7ff ff1c 	bl	403b8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   40580:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   40582:	4d16      	ldr	r5, [pc, #88]	; (405dc <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   40584:	f7ff ff18 	bl	403b8 <z_sys_init_run_level>
	z_sched_init();
   40588:	f000 ff6c 	bl	41464 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   4058c:	4b14      	ldr	r3, [pc, #80]	; (405e0 <z_cstart+0xd0>)
	_kernel.ready_q.cache = &z_main_thread;
   4058e:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   40590:	9305      	str	r3, [sp, #20]
   40592:	2301      	movs	r3, #1
   40594:	4913      	ldr	r1, [pc, #76]	; (405e4 <z_cstart+0xd4>)
   40596:	9400      	str	r4, [sp, #0]
   40598:	e9cd 4303 	strd	r4, r3, [sp, #12]
   4059c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   405a0:	463b      	mov	r3, r7
   405a2:	e9cd 4401 	strd	r4, r4, [sp, #4]
   405a6:	4628      	mov	r0, r5
   405a8:	f000 f870 	bl	4068c <z_setup_new_thread>
   405ac:	7b6a      	ldrb	r2, [r5, #13]
   405ae:	4606      	mov	r6, r0
   405b0:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   405b4:	4628      	mov	r0, r5
   405b6:	736a      	strb	r2, [r5, #13]
   405b8:	f007 ff25 	bl	48406 <z_ready_thread>
	z_init_cpu(0);
   405bc:	4620      	mov	r0, r4
   405be:	f7ff ff73 	bl	404a8 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   405c2:	463a      	mov	r2, r7
   405c4:	4631      	mov	r1, r6
   405c6:	4628      	mov	r0, r5
   405c8:	f7e9 ff7e 	bl	2a4c8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   405cc:	20006010 	.word	0x20006010
   405d0:	e000ed00 	.word	0xe000ed00
   405d4:	20003978 	.word	0x20003978
   405d8:	0004045d 	.word	0x0004045d
   405dc:	20001940 	.word	0x20001940
   405e0:	0004ab42 	.word	0x0004ab42
   405e4:	20006150 	.word	0x20006150

000405e8 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   405e8:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   405ea:	4c06      	ldr	r4, [pc, #24]	; (40604 <statics_init+0x1c>)
   405ec:	4d06      	ldr	r5, [pc, #24]	; (40608 <statics_init+0x20>)
   405ee:	42ac      	cmp	r4, r5
   405f0:	d301      	bcc.n	405f6 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   405f2:	2000      	movs	r0, #0
   405f4:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   405f6:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   405fa:	4620      	mov	r0, r4
   405fc:	f007 fbc1 	bl	47d82 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   40600:	3414      	adds	r4, #20
   40602:	e7f4      	b.n	405ee <statics_init+0x6>
   40604:	20000ca0 	.word	0x20000ca0
   40608:	20000cb4 	.word	0x20000cb4

0004060c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   4060c:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   4060e:	4c06      	ldr	r4, [pc, #24]	; (40628 <init_mem_slab_module+0x1c>)
   40610:	4d06      	ldr	r5, [pc, #24]	; (4062c <init_mem_slab_module+0x20>)
	int rc = 0;
   40612:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   40614:	42ac      	cmp	r4, r5
   40616:	d300      	bcc.n	4061a <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
   40618:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
   4061a:	4620      	mov	r0, r4
   4061c:	f007 fc23 	bl	47e66 <create_free_list>
		if (rc < 0) {
   40620:	2800      	cmp	r0, #0
   40622:	dbf9      	blt.n	40618 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   40624:	341c      	adds	r4, #28
   40626:	e7f5      	b.n	40614 <init_mem_slab_module+0x8>
   40628:	20000c30 	.word	0x20000c30
   4062c:	20000ca0 	.word	0x20000ca0

00040630 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   40630:	b573      	push	{r0, r1, r4, r5, r6, lr}
   40632:	460c      	mov	r4, r1
	__asm__ volatile(
   40634:	f04f 0520 	mov.w	r5, #32
   40638:	f3ef 8111 	mrs	r1, BASEPRI
   4063c:	f385 8812 	msr	BASEPRI_MAX, r5
   40640:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   40644:	6945      	ldr	r5, [r0, #20]
   40646:	b15d      	cbz	r5, 40660 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   40648:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   4064a:	682b      	ldr	r3, [r5, #0]
   4064c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   4064e:	6983      	ldr	r3, [r0, #24]
   40650:	3301      	adds	r3, #1
   40652:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   40654:	2000      	movs	r0, #0
	__asm__ volatile(
   40656:	f381 8811 	msr	BASEPRI, r1
   4065a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   4065e:	e011      	b.n	40684 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   40660:	ea52 0603 	orrs.w	r6, r2, r3
   40664:	d103      	bne.n	4066e <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   40666:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   40668:	f06f 000b 	mvn.w	r0, #11
   4066c:	e7f3      	b.n	40656 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   4066e:	e9cd 2300 	strd	r2, r3, [sp]
   40672:	4602      	mov	r2, r0
   40674:	3008      	adds	r0, #8
   40676:	f000 fe09 	bl	4128c <z_pend_curr>
		if (result == 0) {
   4067a:	b918      	cbnz	r0, 40684 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   4067c:	4b02      	ldr	r3, [pc, #8]	; (40688 <k_mem_slab_alloc+0x58>)
   4067e:	689b      	ldr	r3, [r3, #8]
   40680:	695b      	ldr	r3, [r3, #20]
   40682:	6023      	str	r3, [r4, #0]
}
   40684:	b002      	add	sp, #8
   40686:	bd70      	pop	{r4, r5, r6, pc}
   40688:	20003978 	.word	0x20003978

0004068c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   4068c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   40690:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   40692:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   40694:	2604      	movs	r6, #4
   40696:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   40698:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   4069a:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   4069c:	f100 0558 	add.w	r5, r0, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   406a0:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   406a2:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   406a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   406a8:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   406aa:	f026 0607 	bic.w	r6, r6, #7
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   406ae:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   406b2:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   406b6:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   406b8:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   406ba:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   406bc:	9202      	str	r2, [sp, #8]
   406be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   406c0:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   406c2:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   406c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   406c8:	9200      	str	r2, [sp, #0]
   406ca:	4642      	mov	r2, r8
{
   406cc:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   406ce:	f7e9 fedf 	bl	2a490 <arch_new_thread>
	if (!_current) {
   406d2:	4b05      	ldr	r3, [pc, #20]	; (406e8 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
   406d4:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   406d6:	689b      	ldr	r3, [r3, #8]
   406d8:	b103      	cbz	r3, 406dc <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   406da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   406dc:	6763      	str	r3, [r4, #116]	; 0x74
}
   406de:	4640      	mov	r0, r8
   406e0:	b004      	add	sp, #16
   406e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   406e6:	bf00      	nop
   406e8:	20003978 	.word	0x20003978

000406ec <z_impl_k_thread_create>:
{
   406ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   406ee:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   406f0:	2500      	movs	r5, #0
   406f2:	9505      	str	r5, [sp, #20]
   406f4:	9d10      	ldr	r5, [sp, #64]	; 0x40
   406f6:	9504      	str	r5, [sp, #16]
   406f8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   406fa:	9503      	str	r5, [sp, #12]
   406fc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   406fe:	9502      	str	r5, [sp, #8]
{
   40700:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   40704:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   40706:	9501      	str	r5, [sp, #4]
   40708:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   4070a:	9500      	str	r5, [sp, #0]
{
   4070c:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   4070e:	f7ff ffbd 	bl	4068c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   40712:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
   40716:	bf08      	it	eq
   40718:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
   4071c:	d005      	beq.n	4072a <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   4071e:	ea56 0307 	orrs.w	r3, r6, r7
   40722:	d105      	bne.n	40730 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   40724:	4620      	mov	r0, r4
   40726:	f000 fe1d 	bl	41364 <z_sched_start>
}
   4072a:	4620      	mov	r0, r4
   4072c:	b007      	add	sp, #28
   4072e:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   40730:	4903      	ldr	r1, [pc, #12]	; (40740 <z_impl_k_thread_create+0x54>)
   40732:	463a      	mov	r2, r7
   40734:	4633      	mov	r3, r6
   40736:	f104 0018 	add.w	r0, r4, #24
   4073a:	f001 f81b 	bl	41774 <z_add_timeout>
   4073e:	e7f4      	b.n	4072a <z_impl_k_thread_create+0x3e>
   40740:	00048373 	.word	0x00048373

00040744 <z_init_static_threads>:
{
   40744:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   40748:	4c29      	ldr	r4, [pc, #164]	; (407f0 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   4074a:	4d2a      	ldr	r5, [pc, #168]	; (407f4 <z_init_static_threads+0xb0>)
{
   4074c:	b087      	sub	sp, #28
   4074e:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   40750:	42ae      	cmp	r6, r5
   40752:	f104 0430 	add.w	r4, r4, #48	; 0x30
   40756:	d30f      	bcc.n	40778 <z_init_static_threads+0x34>
	k_sched_lock();
   40758:	f000 fe54 	bl	41404 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   4075c:	4c24      	ldr	r4, [pc, #144]	; (407f0 <z_init_static_threads+0xac>)
   4075e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 407f8 <z_init_static_threads+0xb4>
   40762:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   40766:	f240 37e7 	movw	r7, #999	; 0x3e7
   4076a:	42ac      	cmp	r4, r5
   4076c:	d320      	bcc.n	407b0 <z_init_static_threads+0x6c>
}
   4076e:	b007      	add	sp, #28
   40770:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   40774:	f000 be5a 	b.w	4142c <k_sched_unlock>
		z_setup_new_thread(
   40778:	f854 3c04 	ldr.w	r3, [r4, #-4]
   4077c:	9305      	str	r3, [sp, #20]
   4077e:	f854 3c10 	ldr.w	r3, [r4, #-16]
   40782:	9304      	str	r3, [sp, #16]
   40784:	f854 3c14 	ldr.w	r3, [r4, #-20]
   40788:	9303      	str	r3, [sp, #12]
   4078a:	f854 3c18 	ldr.w	r3, [r4, #-24]
   4078e:	9302      	str	r3, [sp, #8]
   40790:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   40794:	9301      	str	r3, [sp, #4]
   40796:	f854 3c20 	ldr.w	r3, [r4, #-32]
   4079a:	9300      	str	r3, [sp, #0]
   4079c:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   407a0:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   407a4:	f7ff ff72 	bl	4068c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   407a8:	f854 3c30 	ldr.w	r3, [r4, #-48]
   407ac:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   407ae:	e7ce      	b.n	4074e <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   407b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   407b2:	1c5a      	adds	r2, r3, #1
   407b4:	d00d      	beq.n	407d2 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   407b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   407ba:	2100      	movs	r1, #0
   407bc:	4638      	mov	r0, r7
   407be:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   407c2:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   407c6:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   407ca:	d104      	bne.n	407d6 <z_init_static_threads+0x92>
	z_sched_start(thread);
   407cc:	4640      	mov	r0, r8
   407ce:	f000 fdc9 	bl	41364 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   407d2:	3430      	adds	r4, #48	; 0x30
   407d4:	e7c9      	b.n	4076a <z_init_static_threads+0x26>
   407d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   407da:	2300      	movs	r3, #0
   407dc:	f7e5 fc90 	bl	26100 <__aeabi_uldivmod>
   407e0:	4602      	mov	r2, r0
   407e2:	460b      	mov	r3, r1
   407e4:	f108 0018 	add.w	r0, r8, #24
   407e8:	4649      	mov	r1, r9
   407ea:	f000 ffc3 	bl	41774 <z_add_timeout>
   407ee:	e7f0      	b.n	407d2 <z_init_static_threads+0x8e>
   407f0:	20000b84 	.word	0x20000b84
   407f4:	20000b84 	.word	0x20000b84
   407f8:	00048373 	.word	0x00048373

000407fc <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   407fc:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   407fe:	4c0b      	ldr	r4, [pc, #44]	; (4082c <idle+0x30>)
	return !z_sys_post_kernel;
   40800:	4d0b      	ldr	r5, [pc, #44]	; (40830 <idle+0x34>)
	__asm__ volatile(
   40802:	f04f 0220 	mov.w	r2, #32
   40806:	f3ef 8311 	mrs	r3, BASEPRI
   4080a:	f382 8812 	msr	BASEPRI_MAX, r2
   4080e:	f3bf 8f6f 	isb	sy
   40812:	f007 febe 	bl	48592 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   40816:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   40818:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   4081a:	b913      	cbnz	r3, 40822 <idle+0x26>
	arch_cpu_idle();
   4081c:	f7e9 fd54 	bl	2a2c8 <arch_cpu_idle>
}
   40820:	e7ef      	b.n	40802 <idle+0x6>
   40822:	f7e9 fb57 	bl	29ed4 <pm_system_suspend>
   40826:	2800      	cmp	r0, #0
   40828:	d1eb      	bne.n	40802 <idle+0x6>
   4082a:	e7f7      	b.n	4081c <idle+0x20>
   4082c:	20003978 	.word	0x20003978
   40830:	20003b25 	.word	0x20003b25

00040834 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   40834:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   40838:	4604      	mov	r4, r0
   4083a:	460e      	mov	r6, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   4083c:	f100 0808 	add.w	r8, r0, #8
   40840:	f04f 0120 	mov.w	r1, #32
   40844:	f3ef 8711 	mrs	r7, BASEPRI
   40848:	f381 8812 	msr	BASEPRI_MAX, r1
   4084c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
   40850:	6a05      	ldr	r5, [r0, #32]
   40852:	68c1      	ldr	r1, [r0, #12]
   40854:	428d      	cmp	r5, r1
   40856:	d22f      	bcs.n	408b8 <z_impl_k_msgq_put+0x84>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   40858:	f007 fe0c 	bl	48474 <z_unpend_first_thread>
		if (pending_thread != NULL) {
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, 0);

			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
   4085c:	68a2      	ldr	r2, [r4, #8]
		if (pending_thread != NULL) {
   4085e:	4605      	mov	r5, r0
			(void)memcpy(pending_thread->base.swap_data, data,
   40860:	4631      	mov	r1, r6
		if (pending_thread != NULL) {
   40862:	b178      	cbz	r0, 40884 <z_impl_k_msgq_put+0x50>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   40864:	2400      	movs	r4, #0
			(void)memcpy(pending_thread->base.swap_data, data,
   40866:	6940      	ldr	r0, [r0, #20]
   40868:	f003 fd56 	bl	44318 <memcpy>
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   4086c:	4628      	mov	r0, r5
   4086e:	67ec      	str	r4, [r5, #124]	; 0x7c
   40870:	f007 fdc9 	bl	48406 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   40874:	4640      	mov	r0, r8
   40876:	4639      	mov	r1, r7
   40878:	f000 fd62 	bl	41340 <z_reschedule>
			return 0;
   4087c:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   4087e:	b002      	add	sp, #8
   40880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
   40884:	69e0      	ldr	r0, [r4, #28]
   40886:	f003 fd47 	bl	44318 <memcpy>
			msgq->write_ptr += msgq->msg_size;
   4088a:	69e3      	ldr	r3, [r4, #28]
   4088c:	68a2      	ldr	r2, [r4, #8]
   4088e:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   40890:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   40892:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   40894:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   40896:	bf04      	itt	eq
   40898:	6923      	ldreq	r3, [r4, #16]
   4089a:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   4089c:	6a23      	ldr	r3, [r4, #32]
   4089e:	3301      	adds	r3, #1
	z_handle_obj_poll_events(&msgq->poll_events, state);
   408a0:	f104 0024 	add.w	r0, r4, #36	; 0x24
			msgq->used_msgs++;
   408a4:	6223      	str	r3, [r4, #32]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   408a6:	2110      	movs	r1, #16
   408a8:	f008 f828 	bl	488fc <z_handle_obj_poll_events>
		result = 0;
   408ac:	2000      	movs	r0, #0
	__asm__ volatile(
   408ae:	f387 8811 	msr	BASEPRI, r7
   408b2:	f3bf 8f6f 	isb	sy
	return result;
   408b6:	e7e2      	b.n	4087e <z_impl_k_msgq_put+0x4a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   408b8:	ea52 0103 	orrs.w	r1, r2, r3
   408bc:	d00a      	beq.n	408d4 <z_impl_k_msgq_put+0xa0>
		_current->base.swap_data = (void *) data;
   408be:	4907      	ldr	r1, [pc, #28]	; (408dc <z_impl_k_msgq_put+0xa8>)
   408c0:	6889      	ldr	r1, [r1, #8]
   408c2:	614e      	str	r6, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   408c4:	e9cd 2300 	strd	r2, r3, [sp]
   408c8:	4639      	mov	r1, r7
   408ca:	4602      	mov	r2, r0
   408cc:	4640      	mov	r0, r8
   408ce:	f000 fcdd 	bl	4128c <z_pend_curr>
		return result;
   408d2:	e7d4      	b.n	4087e <z_impl_k_msgq_put+0x4a>
		result = -ENOMSG;
   408d4:	f06f 0022 	mvn.w	r0, #34	; 0x22
   408d8:	e7e9      	b.n	408ae <z_impl_k_msgq_put+0x7a>
   408da:	bf00      	nop
   408dc:	20003978 	.word	0x20003978

000408e0 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   408e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   408e2:	4604      	mov	r4, r0

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   408e4:	f104 0708 	add.w	r7, r4, #8
{
   408e8:	4608      	mov	r0, r1
	__asm__ volatile(
   408ea:	f04f 0120 	mov.w	r1, #32
   408ee:	f3ef 8611 	mrs	r6, BASEPRI
   408f2:	f381 8812 	msr	BASEPRI_MAX, r1
   408f6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
   408fa:	6a21      	ldr	r1, [r4, #32]
   408fc:	2900      	cmp	r1, #0
   408fe:	d031      	beq.n	40964 <z_impl_k_msgq_get+0x84>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
   40900:	68a2      	ldr	r2, [r4, #8]
   40902:	69a1      	ldr	r1, [r4, #24]
   40904:	f003 fd08 	bl	44318 <memcpy>
		msgq->read_ptr += msgq->msg_size;
   40908:	69a3      	ldr	r3, [r4, #24]
   4090a:	68a2      	ldr	r2, [r4, #8]
   4090c:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   4090e:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   40910:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   40912:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   40914:	bf04      	itt	eq
   40916:	6923      	ldreq	r3, [r4, #16]
   40918:	61a3      	streq	r3, [r4, #24]
		}
		msgq->used_msgs--;
   4091a:	6a23      	ldr	r3, [r4, #32]
   4091c:	3b01      	subs	r3, #1
   4091e:	6223      	str	r3, [r4, #32]

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   40920:	4620      	mov	r0, r4
   40922:	f007 fda7 	bl	48474 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   40926:	4605      	mov	r5, r0
   40928:	b360      	cbz	r0, 40984 <z_impl_k_msgq_get+0xa4>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
   4092a:	6941      	ldr	r1, [r0, #20]
   4092c:	68a2      	ldr	r2, [r4, #8]
   4092e:	69e0      	ldr	r0, [r4, #28]
   40930:	f003 fcf2 	bl	44318 <memcpy>
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   40934:	69e3      	ldr	r3, [r4, #28]
   40936:	68a2      	ldr	r2, [r4, #8]
   40938:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   4093a:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   4093c:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   4093e:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   40940:	bf04      	itt	eq
   40942:	6923      	ldreq	r3, [r4, #16]
   40944:	61e3      	streq	r3, [r4, #28]
			}
			msgq->used_msgs++;
   40946:	6a23      	ldr	r3, [r4, #32]
   40948:	3301      	adds	r3, #1
   4094a:	6223      	str	r3, [r4, #32]
   4094c:	2400      	movs	r4, #0

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   4094e:	4628      	mov	r0, r5
   40950:	67ec      	str	r4, [r5, #124]	; 0x7c
   40952:	f007 fd58 	bl	48406 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   40956:	4638      	mov	r0, r7
   40958:	4631      	mov	r1, r6
   4095a:	f000 fcf1 	bl	41340 <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
   4095e:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   40960:	b003      	add	sp, #12
   40962:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   40964:	ea52 0103 	orrs.w	r1, r2, r3
   40968:	d00a      	beq.n	40980 <z_impl_k_msgq_get+0xa0>
		_current->base.swap_data = data;
   4096a:	4909      	ldr	r1, [pc, #36]	; (40990 <z_impl_k_msgq_get+0xb0>)
   4096c:	6889      	ldr	r1, [r1, #8]
   4096e:	6148      	str	r0, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   40970:	e9cd 2300 	strd	r2, r3, [sp]
   40974:	4631      	mov	r1, r6
   40976:	4622      	mov	r2, r4
   40978:	4638      	mov	r0, r7
   4097a:	f000 fc87 	bl	4128c <z_pend_curr>
		return result;
   4097e:	e7ef      	b.n	40960 <z_impl_k_msgq_get+0x80>
		result = -ENOMSG;
   40980:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
   40984:	f386 8811 	msr	BASEPRI, r6
   40988:	f3bf 8f6f 	isb	sy
	return result;
   4098c:	e7e8      	b.n	40960 <z_impl_k_msgq_get+0x80>
   4098e:	bf00      	nop
   40990:	20003978 	.word	0x20003978

00040994 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   40994:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   40998:	4604      	mov	r4, r0
   4099a:	4617      	mov	r7, r2
   4099c:	461e      	mov	r6, r3
	__asm__ volatile(
   4099e:	f04f 0320 	mov.w	r3, #32
   409a2:	f3ef 8811 	mrs	r8, BASEPRI
   409a6:	f383 8812 	msr	BASEPRI_MAX, r3
   409aa:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   409ae:	68c3      	ldr	r3, [r0, #12]
   409b0:	4a33      	ldr	r2, [pc, #204]	; (40a80 <z_impl_k_mutex_lock+0xec>)
   409b2:	b17b      	cbz	r3, 409d4 <z_impl_k_mutex_lock+0x40>
   409b4:	6880      	ldr	r0, [r0, #8]
   409b6:	6891      	ldr	r1, [r2, #8]
   409b8:	4288      	cmp	r0, r1
   409ba:	d019      	beq.n	409f0 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   409bc:	ea57 0306 	orrs.w	r3, r7, r6
   409c0:	d118      	bne.n	409f4 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   409c2:	f388 8811 	msr	BASEPRI, r8
   409c6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   409ca:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   409ce:	b002      	add	sp, #8
   409d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   409d4:	6891      	ldr	r1, [r2, #8]
   409d6:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   409da:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   409dc:	3301      	adds	r3, #1
   409de:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   409e0:	6893      	ldr	r3, [r2, #8]
   409e2:	60a3      	str	r3, [r4, #8]
   409e4:	f388 8811 	msr	BASEPRI, r8
   409e8:	f3bf 8f6f 	isb	sy
		return 0;
   409ec:	2000      	movs	r0, #0
   409ee:	e7ee      	b.n	409ce <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   409f0:	6921      	ldr	r1, [r4, #16]
   409f2:	e7f2      	b.n	409da <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   409f4:	f991 100e 	ldrsb.w	r1, [r1, #14]
   409f8:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   409fc:	4299      	cmp	r1, r3
   409fe:	bfa8      	it	ge
   40a00:	4619      	movge	r1, r3
   40a02:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   40a06:	4291      	cmp	r1, r2
   40a08:	bfb8      	it	lt
   40a0a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   40a0c:	428b      	cmp	r3, r1
   40a0e:	dd2e      	ble.n	40a6e <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   40a10:	f007 fa7a 	bl	47f08 <adjust_owner_prio.isra.0>
   40a14:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   40a16:	e9cd 7600 	strd	r7, r6, [sp]
   40a1a:	481a      	ldr	r0, [pc, #104]	; (40a84 <z_impl_k_mutex_lock+0xf0>)
   40a1c:	4622      	mov	r2, r4
   40a1e:	4641      	mov	r1, r8
   40a20:	f000 fc34 	bl	4128c <z_pend_curr>
	if (got_mutex == 0) {
   40a24:	2800      	cmp	r0, #0
   40a26:	d0e1      	beq.n	409ec <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   40a28:	f04f 0320 	mov.w	r3, #32
   40a2c:	f3ef 8611 	mrs	r6, BASEPRI
   40a30:	f383 8812 	msr	BASEPRI_MAX, r3
   40a34:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
   40a38:	68a0      	ldr	r0, [r4, #8]
   40a3a:	b1d0      	cbz	r0, 40a72 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   40a3c:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   40a3e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   40a40:	429c      	cmp	r4, r3
   40a42:	d00a      	beq.n	40a5a <z_impl_k_mutex_lock+0xc6>
   40a44:	b14b      	cbz	r3, 40a5a <z_impl_k_mutex_lock+0xc6>
   40a46:	f993 300e 	ldrsb.w	r3, [r3, #14]
   40a4a:	4299      	cmp	r1, r3
   40a4c:	bfa8      	it	ge
   40a4e:	4619      	movge	r1, r3
   40a50:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   40a54:	4299      	cmp	r1, r3
   40a56:	bfb8      	it	lt
   40a58:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   40a5a:	f007 fa55 	bl	47f08 <adjust_owner_prio.isra.0>
   40a5e:	b140      	cbz	r0, 40a72 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   40a60:	4808      	ldr	r0, [pc, #32]	; (40a84 <z_impl_k_mutex_lock+0xf0>)
   40a62:	4631      	mov	r1, r6
   40a64:	f000 fc6c 	bl	41340 <z_reschedule>
	return -EAGAIN;
   40a68:	f06f 000a 	mvn.w	r0, #10
   40a6c:	e7af      	b.n	409ce <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   40a6e:	2500      	movs	r5, #0
   40a70:	e7d1      	b.n	40a16 <z_impl_k_mutex_lock+0x82>
	if (resched) {
   40a72:	2d00      	cmp	r5, #0
   40a74:	d1f4      	bne.n	40a60 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   40a76:	f386 8811 	msr	BASEPRI, r6
   40a7a:	f3bf 8f6f 	isb	sy
   40a7e:	e7f3      	b.n	40a68 <z_impl_k_mutex_lock+0xd4>
   40a80:	20003978 	.word	0x20003978
   40a84:	20003b26 	.word	0x20003b26

00040a88 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   40a88:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   40a8a:	6883      	ldr	r3, [r0, #8]
{
   40a8c:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   40a8e:	b36b      	cbz	r3, 40aec <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   40a90:	4a19      	ldr	r2, [pc, #100]	; (40af8 <z_impl_k_mutex_unlock+0x70>)
   40a92:	6892      	ldr	r2, [r2, #8]
   40a94:	4293      	cmp	r3, r2
   40a96:	d12c      	bne.n	40af2 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   40a98:	68c3      	ldr	r3, [r0, #12]
   40a9a:	2b01      	cmp	r3, #1
   40a9c:	d903      	bls.n	40aa6 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   40a9e:	3b01      	subs	r3, #1
   40aa0:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   40aa2:	2000      	movs	r0, #0
}
   40aa4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   40aa6:	f04f 0320 	mov.w	r3, #32
   40aaa:	f3ef 8511 	mrs	r5, BASEPRI
   40aae:	f383 8812 	msr	BASEPRI_MAX, r3
   40ab2:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   40ab6:	6901      	ldr	r1, [r0, #16]
   40ab8:	6880      	ldr	r0, [r0, #8]
   40aba:	f007 fa25 	bl	47f08 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   40abe:	4620      	mov	r0, r4
   40ac0:	f007 fcd8 	bl	48474 <z_unpend_first_thread>
	mutex->owner = new_owner;
   40ac4:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   40ac6:	b158      	cbz	r0, 40ae0 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   40ac8:	f990 200e 	ldrsb.w	r2, [r0, #14]
   40acc:	6122      	str	r2, [r4, #16]
   40ace:	2200      	movs	r2, #0
   40ad0:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   40ad2:	f007 fc98 	bl	48406 <z_ready_thread>
		z_reschedule(&lock, key);
   40ad6:	4809      	ldr	r0, [pc, #36]	; (40afc <z_impl_k_mutex_unlock+0x74>)
   40ad8:	4629      	mov	r1, r5
   40ada:	f000 fc31 	bl	41340 <z_reschedule>
   40ade:	e7e0      	b.n	40aa2 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   40ae0:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   40ae2:	f385 8811 	msr	BASEPRI, r5
   40ae6:	f3bf 8f6f 	isb	sy
   40aea:	e7da      	b.n	40aa2 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   40aec:	f06f 0015 	mvn.w	r0, #21
   40af0:	e7d8      	b.n	40aa4 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   40af2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   40af6:	e7d5      	b.n	40aa4 <z_impl_k_mutex_unlock+0x1c>
   40af8:	20003978 	.word	0x20003978
   40afc:	20003b26 	.word	0x20003b26

00040b00 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   40b00:	b537      	push	{r0, r1, r2, r4, r5, lr}
   40b02:	4611      	mov	r1, r2
	__asm__ volatile(
   40b04:	f04f 0220 	mov.w	r2, #32
   40b08:	f3ef 8511 	mrs	r5, BASEPRI
   40b0c:	f382 8812 	msr	BASEPRI_MAX, r2
   40b10:	f3bf 8f6f 	isb	sy
   40b14:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   40b16:	b19c      	cbz	r4, 40b40 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   40b18:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   40b1a:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   40b1c:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   40b20:	4294      	cmp	r4, r2
	list->head = node;
   40b22:	6003      	str	r3, [r0, #0]
	list->tail = node;
   40b24:	bf08      	it	eq
   40b26:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   40b28:	2101      	movs	r1, #1
   40b2a:	4620      	mov	r0, r4
   40b2c:	f007 fa61 	bl	47ff2 <z_queue_node_peek>
   40b30:	4604      	mov	r4, r0
	__asm__ volatile(
   40b32:	f385 8811 	msr	BASEPRI, r5
   40b36:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   40b3a:	4620      	mov	r0, r4
   40b3c:	b003      	add	sp, #12
   40b3e:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   40b40:	ea51 0203 	orrs.w	r2, r1, r3
   40b44:	d0f5      	beq.n	40b32 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   40b46:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   40b4a:	e9cd 1300 	strd	r1, r3, [sp]
   40b4e:	4610      	mov	r0, r2
   40b50:	4629      	mov	r1, r5
   40b52:	f000 fb9b 	bl	4128c <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   40b56:	2800      	cmp	r0, #0
   40b58:	d1ef      	bne.n	40b3a <z_impl_k_queue_get+0x3a>
   40b5a:	4b02      	ldr	r3, [pc, #8]	; (40b64 <z_impl_k_queue_get+0x64>)
   40b5c:	689b      	ldr	r3, [r3, #8]
   40b5e:	695c      	ldr	r4, [r3, #20]
   40b60:	e7eb      	b.n	40b3a <z_impl_k_queue_get+0x3a>
   40b62:	bf00      	nop
   40b64:	20003978 	.word	0x20003978

00040b68 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   40b68:	b538      	push	{r3, r4, r5, lr}
   40b6a:	4604      	mov	r4, r0
	__asm__ volatile(
   40b6c:	f04f 0320 	mov.w	r3, #32
   40b70:	f3ef 8511 	mrs	r5, BASEPRI
   40b74:	f383 8812 	msr	BASEPRI_MAX, r3
   40b78:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   40b7c:	f007 fc7a 	bl	48474 <z_unpend_first_thread>

	if (thread != NULL) {
   40b80:	b148      	cbz	r0, 40b96 <z_impl_k_sem_give+0x2e>
   40b82:	2200      	movs	r2, #0
   40b84:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   40b86:	f007 fc3e 	bl	48406 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   40b8a:	4629      	mov	r1, r5
   40b8c:	4808      	ldr	r0, [pc, #32]	; (40bb0 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   40b8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   40b92:	f000 bbd5 	b.w	41340 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   40b96:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   40b9a:	429a      	cmp	r2, r3
   40b9c:	bf18      	it	ne
   40b9e:	3301      	addne	r3, #1
   40ba0:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   40ba2:	2102      	movs	r1, #2
   40ba4:	f104 0010 	add.w	r0, r4, #16
   40ba8:	f007 fea8 	bl	488fc <z_handle_obj_poll_events>
}
   40bac:	e7ed      	b.n	40b8a <z_impl_k_sem_give+0x22>
   40bae:	bf00      	nop
   40bb0:	20003b26 	.word	0x20003b26

00040bb4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   40bb4:	b513      	push	{r0, r1, r4, lr}
   40bb6:	f04f 0420 	mov.w	r4, #32
   40bba:	f3ef 8111 	mrs	r1, BASEPRI
   40bbe:	f384 8812 	msr	BASEPRI_MAX, r4
   40bc2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   40bc6:	6884      	ldr	r4, [r0, #8]
   40bc8:	b144      	cbz	r4, 40bdc <z_impl_k_sem_take+0x28>
		sem->count--;
   40bca:	3c01      	subs	r4, #1
   40bcc:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   40bce:	f381 8811 	msr	BASEPRI, r1
   40bd2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   40bd6:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   40bd8:	b002      	add	sp, #8
   40bda:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   40bdc:	ea52 0403 	orrs.w	r4, r2, r3
   40be0:	d106      	bne.n	40bf0 <z_impl_k_sem_take+0x3c>
   40be2:	f381 8811 	msr	BASEPRI, r1
   40be6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   40bea:	f06f 000f 	mvn.w	r0, #15
   40bee:	e7f3      	b.n	40bd8 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   40bf0:	e9cd 2300 	strd	r2, r3, [sp]
   40bf4:	4602      	mov	r2, r0
   40bf6:	4802      	ldr	r0, [pc, #8]	; (40c00 <z_impl_k_sem_take+0x4c>)
   40bf8:	f000 fb48 	bl	4128c <z_pend_curr>
	return ret;
   40bfc:	e7ec      	b.n	40bd8 <z_impl_k_sem_take+0x24>
   40bfe:	bf00      	nop
   40c00:	20003b26 	.word	0x20003b26

00040c04 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   40c04:	b570      	push	{r4, r5, r6, lr}
   40c06:	4604      	mov	r4, r0
	__asm__ volatile(
   40c08:	f04f 0320 	mov.w	r3, #32
   40c0c:	f3ef 8511 	mrs	r5, BASEPRI
   40c10:	f383 8812 	msr	BASEPRI_MAX, r3
   40c14:	f3bf 8f6f 	isb	sy
   40c18:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   40c1c:	4620      	mov	r0, r4
   40c1e:	f007 fc29 	bl	48474 <z_unpend_first_thread>
		if (thread == NULL) {
   40c22:	b118      	cbz	r0, 40c2c <z_impl_k_sem_reset+0x28>
   40c24:	67c6      	str	r6, [r0, #124]	; 0x7c
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   40c26:	f007 fbee 	bl	48406 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   40c2a:	e7f7      	b.n	40c1c <z_impl_k_sem_reset+0x18>
	}
	sem->count = 0;
   40c2c:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   40c2e:	2102      	movs	r1, #2
   40c30:	f104 0010 	add.w	r0, r4, #16
   40c34:	f007 fe62 	bl	488fc <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   40c38:	4629      	mov	r1, r5
   40c3a:	4802      	ldr	r0, [pc, #8]	; (40c44 <z_impl_k_sem_reset+0x40>)
}
   40c3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   40c40:	f000 bb7e 	b.w	41340 <z_reschedule>
   40c44:	20003b26 	.word	0x20003b26

00040c48 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   40c48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   40c4a:	4b09      	ldr	r3, [pc, #36]	; (40c70 <k_sys_work_q_init+0x28>)
   40c4c:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   40c4e:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   40c50:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   40c52:	9300      	str	r3, [sp, #0]
   40c54:	4907      	ldr	r1, [pc, #28]	; (40c74 <k_sys_work_q_init+0x2c>)
   40c56:	4808      	ldr	r0, [pc, #32]	; (40c78 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   40c58:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   40c5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   40c60:	f44f 6200 	mov.w	r2, #2048	; 0x800
   40c64:	f000 f924 	bl	40eb0 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   40c68:	4620      	mov	r0, r4
   40c6a:	b004      	add	sp, #16
   40c6c:	bd10      	pop	{r4, pc}
   40c6e:	bf00      	nop
   40c70:	0004ab47 	.word	0x0004ab47
   40c74:	20006550 	.word	0x20006550
   40c78:	200019c0 	.word	0x200019c0

00040c7c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   40c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   40c80:	4e4a      	ldr	r6, [pc, #296]	; (40dac <work_queue_main+0x130>)
   40c82:	b085      	sub	sp, #20
   40c84:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   40c86:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   40c8a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   40c8e:	f04f 0320 	mov.w	r3, #32
   40c92:	f3ef 8711 	mrs	r7, BASEPRI
   40c96:	f383 8812 	msr	BASEPRI_MAX, r3
   40c9a:	f3bf 8f6f 	isb	sy
   40c9e:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   40ca2:	b98d      	cbnz	r5, 40cc8 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   40ca4:	2102      	movs	r1, #2
   40ca6:	f104 0098 	add.w	r0, r4, #152	; 0x98
   40caa:	f007 fa3e 	bl	4812a <flag_test_and_clear>
   40cae:	2800      	cmp	r0, #0
   40cb0:	d143      	bne.n	40d3a <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   40cb2:	2300      	movs	r3, #0
   40cb4:	e9cd 8900 	strd	r8, r9, [sp]
   40cb8:	9302      	str	r3, [sp, #8]
   40cba:	f104 0288 	add.w	r2, r4, #136	; 0x88
   40cbe:	4639      	mov	r1, r7
   40cc0:	483b      	ldr	r0, [pc, #236]	; (40db0 <work_queue_main+0x134>)
   40cc2:	f000 fcdd 	bl	41680 <z_sched_wait>
			continue;
   40cc6:	e7e2      	b.n	40c8e <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   40cc8:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   40ccc:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   40cce:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   40cd2:	4295      	cmp	r5, r2
	list->tail = node;
   40cd4:	bf08      	it	eq
   40cd6:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   40cda:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   40cde:	f043 0302 	orr.w	r3, r3, #2
   40ce2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   40ce6:	68eb      	ldr	r3, [r5, #12]
   40ce8:	f023 0304 	bic.w	r3, r3, #4
   40cec:	f043 0301 	orr.w	r3, r3, #1
   40cf0:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   40cf2:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   40cf4:	f387 8811 	msr	BASEPRI, r7
   40cf8:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   40cfc:	4628      	mov	r0, r5
   40cfe:	4798      	blx	r3
	__asm__ volatile(
   40d00:	f04f 0320 	mov.w	r3, #32
   40d04:	f3ef 8b11 	mrs	fp, BASEPRI
   40d08:	f383 8812 	msr	BASEPRI_MAX, r3
   40d0c:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   40d10:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   40d12:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   40d14:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   40d18:	d419      	bmi.n	40d4e <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
   40d1a:	60ea      	str	r2, [r5, #12]
   40d1c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   40d20:	f023 0302 	bic.w	r3, r3, #2
   40d24:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   40d28:	f38b 8811 	msr	BASEPRI, fp
   40d2c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   40d30:	05db      	lsls	r3, r3, #23
   40d32:	d4ac      	bmi.n	40c8e <work_queue_main+0x12>
	z_impl_k_yield();
   40d34:	f000 fba2 	bl	4147c <z_impl_k_yield>
}
   40d38:	e7a9      	b.n	40c8e <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   40d3a:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   40d3e:	2200      	movs	r2, #0
   40d40:	2101      	movs	r1, #1
   40d42:	4628      	mov	r0, r5
   40d44:	f007 fbec 	bl	48520 <z_sched_wake>
   40d48:	2800      	cmp	r0, #0
   40d4a:	d1f8      	bne.n	40d3e <work_queue_main+0xc2>
   40d4c:	e7b1      	b.n	40cb2 <work_queue_main+0x36>
	return list->head;
   40d4e:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   40d50:	f023 0303 	bic.w	r3, r3, #3
   40d54:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   40d56:	2800      	cmp	r0, #0
   40d58:	d0e0      	beq.n	40d1c <work_queue_main+0xa0>
	return node->next;
   40d5a:	2700      	movs	r7, #0
   40d5c:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   40d60:	463b      	mov	r3, r7
   40d62:	2800      	cmp	r0, #0
   40d64:	d0da      	beq.n	40d1c <work_queue_main+0xa0>
		if (wc->work == work) {
   40d66:	6842      	ldr	r2, [r0, #4]
   40d68:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   40d6a:	4601      	mov	r1, r0
		if (wc->work == work) {
   40d6c:	d10c      	bne.n	40d88 <work_queue_main+0x10c>
	return node->next;
   40d6e:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   40d70:	b99f      	cbnz	r7, 40d9a <work_queue_main+0x11e>
   40d72:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   40d74:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   40d76:	4282      	cmp	r2, r0
   40d78:	d100      	bne.n	40d7c <work_queue_main+0x100>
	list->tail = node;
   40d7a:	6071      	str	r1, [r6, #4]
	parent->next = child;
   40d7c:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   40d80:	f7ff fef2 	bl	40b68 <z_impl_k_sem_give>
}
   40d84:	4639      	mov	r1, r7
   40d86:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   40d88:	f1ba 0f00 	cmp.w	sl, #0
   40d8c:	d00b      	beq.n	40da6 <work_queue_main+0x12a>
	return node->next;
   40d8e:	f8da 2000 	ldr.w	r2, [sl]
   40d92:	4650      	mov	r0, sl
   40d94:	460f      	mov	r7, r1
   40d96:	4692      	mov	sl, r2
   40d98:	e7e3      	b.n	40d62 <work_queue_main+0xe6>
	parent->next = child;
   40d9a:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   40d9c:	6872      	ldr	r2, [r6, #4]
   40d9e:	4282      	cmp	r2, r0
	list->tail = node;
   40da0:	bf08      	it	eq
   40da2:	6077      	streq	r7, [r6, #4]
}
   40da4:	e7ea      	b.n	40d7c <work_queue_main+0x100>
   40da6:	4652      	mov	r2, sl
   40da8:	e7f3      	b.n	40d92 <work_queue_main+0x116>
   40daa:	bf00      	nop
   40dac:	200039a0 	.word	0x200039a0
   40db0:	20003b26 	.word	0x20003b26

00040db4 <cancel_sync_locked>:
{
   40db4:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   40db6:	68c3      	ldr	r3, [r0, #12]
   40db8:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   40dbc:	079b      	lsls	r3, r3, #30
{
   40dbe:	4605      	mov	r5, r0
   40dc0:	460c      	mov	r4, r1
	if (ret) {
   40dc2:	d50d      	bpl.n	40de0 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   40dc4:	2201      	movs	r2, #1
   40dc6:	2100      	movs	r1, #0
   40dc8:	f104 0008 	add.w	r0, r4, #8
   40dcc:	f007 f99d 	bl	4810a <z_impl_k_sem_init>
	parent->next = child;
   40dd0:	2300      	movs	r3, #0
   40dd2:	6023      	str	r3, [r4, #0]
	return list->tail;
   40dd4:	4b05      	ldr	r3, [pc, #20]	; (40dec <cancel_sync_locked+0x38>)
	canceler->work = work;
   40dd6:	6065      	str	r5, [r4, #4]
   40dd8:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   40dda:	b91a      	cbnz	r2, 40de4 <cancel_sync_locked+0x30>
	list->head = node;
   40ddc:	e9c3 4400 	strd	r4, r4, [r3]
}
   40de0:	4630      	mov	r0, r6
   40de2:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   40de4:	6014      	str	r4, [r2, #0]
	list->tail = node;
   40de6:	605c      	str	r4, [r3, #4]
}
   40de8:	e7fa      	b.n	40de0 <cancel_sync_locked+0x2c>
   40dea:	bf00      	nop
   40dec:	200039a0 	.word	0x200039a0

00040df0 <submit_to_queue_locked>:
{
   40df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   40df2:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   40df4:	079a      	lsls	r2, r3, #30
{
   40df6:	4604      	mov	r4, r0
   40df8:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   40dfa:	f3c3 0640 	ubfx	r6, r3, #1, #1
   40dfe:	d42c      	bmi.n	40e5a <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   40e00:	075b      	lsls	r3, r3, #29
   40e02:	d41a      	bmi.n	40e3a <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
   40e04:	680b      	ldr	r3, [r1, #0]
   40e06:	b90b      	cbnz	r3, 40e0c <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   40e08:	6883      	ldr	r3, [r0, #8]
   40e0a:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   40e0c:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   40e0e:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   40e10:	bf44      	itt	mi
   40e12:	68a3      	ldrmi	r3, [r4, #8]
   40e14:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   40e16:	683d      	ldr	r5, [r7, #0]
			ret = 2;
   40e18:	bf4c      	ite	mi
   40e1a:	2602      	movmi	r6, #2
		ret = 1;
   40e1c:	2601      	movpl	r6, #1
	if (queue == NULL) {
   40e1e:	2d00      	cmp	r5, #0
   40e20:	d03a      	beq.n	40e98 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   40e22:	4b1f      	ldr	r3, [pc, #124]	; (40ea0 <submit_to_queue_locked+0xb0>)
   40e24:	689b      	ldr	r3, [r3, #8]
   40e26:	42ab      	cmp	r3, r5
   40e28:	d00a      	beq.n	40e40 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
   40e2a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   40e2e:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   40e30:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   40e34:	d414      	bmi.n	40e60 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   40e36:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   40e3a:	2300      	movs	r3, #0
   40e3c:	603b      	str	r3, [r7, #0]
	return ret;
   40e3e:	e025      	b.n	40e8c <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   40e40:	f007 f850 	bl	47ee4 <k_is_in_isr>
   40e44:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   40e48:	2800      	cmp	r0, #0
   40e4a:	d1f0      	bne.n	40e2e <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   40e4c:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   40e4e:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   40e52:	d5f0      	bpl.n	40e36 <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
   40e54:	b152      	cbz	r2, 40e6c <submit_to_queue_locked+0x7c>
   40e56:	075b      	lsls	r3, r3, #29
   40e58:	d408      	bmi.n	40e6c <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   40e5a:	f06f 060f 	mvn.w	r6, #15
   40e5e:	e7ec      	b.n	40e3a <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
   40e60:	2a00      	cmp	r2, #0
   40e62:	d1fa      	bne.n	40e5a <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   40e64:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   40e68:	2b00      	cmp	r3, #0
   40e6a:	d1f6      	bne.n	40e5a <submit_to_queue_locked+0x6a>
	parent->next = child;
   40e6c:	2300      	movs	r3, #0
   40e6e:	6023      	str	r3, [r4, #0]
	return list->tail;
   40e70:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   40e74:	b963      	cbnz	r3, 40e90 <submit_to_queue_locked+0xa0>
	list->head = node;
   40e76:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
   40e7a:	4628      	mov	r0, r5
   40e7c:	f007 f96e 	bl	4815c <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   40e80:	68e3      	ldr	r3, [r4, #12]
   40e82:	f043 0304 	orr.w	r3, r3, #4
   40e86:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   40e88:	683b      	ldr	r3, [r7, #0]
   40e8a:	60a3      	str	r3, [r4, #8]
}
   40e8c:	4630      	mov	r0, r6
   40e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   40e90:	601c      	str	r4, [r3, #0]
	list->tail = node;
   40e92:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
   40e96:	e7f0      	b.n	40e7a <submit_to_queue_locked+0x8a>
		return -EINVAL;
   40e98:	f06f 0615 	mvn.w	r6, #21
   40e9c:	e7cd      	b.n	40e3a <submit_to_queue_locked+0x4a>
   40e9e:	bf00      	nop
   40ea0:	20003978 	.word	0x20003978

00040ea4 <k_work_submit>:
{
   40ea4:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   40ea6:	4801      	ldr	r0, [pc, #4]	; (40eac <k_work_submit+0x8>)
   40ea8:	f007 b9de 	b.w	48268 <k_work_submit_to_queue>
   40eac:	200019c0 	.word	0x200019c0

00040eb0 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   40eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   40eb2:	b089      	sub	sp, #36	; 0x24
   40eb4:	4604      	mov	r4, r0
	list->head = NULL;
   40eb6:	2000      	movs	r0, #0
	list->tail = NULL;
   40eb8:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   40ebc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   40ebe:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   40ec2:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   40ec6:	f104 0090 	add.w	r0, r4, #144	; 0x90
   40eca:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   40ece:	b31d      	cbz	r5, 40f18 <k_work_queue_start+0x68>
   40ed0:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   40ed2:	2800      	cmp	r0, #0
   40ed4:	f240 1001 	movw	r0, #257	; 0x101
   40ed8:	bf08      	it	eq
   40eda:	2001      	moveq	r0, #1
	*flagp = flags;
   40edc:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   40ee0:	2000      	movs	r0, #0
   40ee2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   40ee6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   40eea:	e9cd 3003 	strd	r3, r0, [sp, #12]
   40eee:	e9cd 0001 	strd	r0, r0, [sp, #4]
   40ef2:	e9cd 6706 	strd	r6, r7, [sp, #24]
   40ef6:	4b09      	ldr	r3, [pc, #36]	; (40f1c <k_work_queue_start+0x6c>)
   40ef8:	9400      	str	r4, [sp, #0]
   40efa:	4620      	mov	r0, r4
   40efc:	f7ff fbf6 	bl	406ec <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   40f00:	b125      	cbz	r5, 40f0c <k_work_queue_start+0x5c>
   40f02:	6829      	ldr	r1, [r5, #0]
   40f04:	b111      	cbz	r1, 40f0c <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   40f06:	4620      	mov	r0, r4
   40f08:	f006 fff2 	bl	47ef0 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   40f0c:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   40f0e:	b009      	add	sp, #36	; 0x24
   40f10:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   40f14:	f006 bfef 	b.w	47ef6 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   40f18:	2001      	movs	r0, #1
   40f1a:	e7df      	b.n	40edc <k_work_queue_start+0x2c>
   40f1c:	00040c7d 	.word	0x00040c7d

00040f20 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   40f20:	b537      	push	{r0, r1, r2, r4, r5, lr}
   40f22:	9001      	str	r0, [sp, #4]
   40f24:	4608      	mov	r0, r1
	__asm__ volatile(
   40f26:	f04f 0120 	mov.w	r1, #32
   40f2a:	f3ef 8411 	mrs	r4, BASEPRI
   40f2e:	f381 8812 	msr	BASEPRI_MAX, r1
   40f32:	f3bf 8f6f 	isb	sy
	return *flagp;
   40f36:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   40f38:	f011 0f0e 	tst.w	r1, #14
   40f3c:	d116      	bne.n	40f6c <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   40f3e:	ea53 0502 	orrs.w	r5, r3, r2
   40f42:	d108      	bne.n	40f56 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   40f44:	a901      	add	r1, sp, #4
   40f46:	f7ff ff53 	bl	40df0 <submit_to_queue_locked>
	__asm__ volatile(
   40f4a:	f384 8811 	msr	BASEPRI, r4
   40f4e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   40f52:	b003      	add	sp, #12
   40f54:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
   40f56:	f041 0108 	orr.w	r1, r1, #8
   40f5a:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   40f5c:	9901      	ldr	r1, [sp, #4]
   40f5e:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   40f60:	3010      	adds	r0, #16
   40f62:	4903      	ldr	r1, [pc, #12]	; (40f70 <k_work_schedule_for_queue+0x50>)
   40f64:	f000 fc06 	bl	41774 <z_add_timeout>
	return ret;
   40f68:	2001      	movs	r0, #1
   40f6a:	e7ee      	b.n	40f4a <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   40f6c:	2000      	movs	r0, #0
   40f6e:	e7ec      	b.n	40f4a <k_work_schedule_for_queue+0x2a>
   40f70:	000481d1 	.word	0x000481d1

00040f74 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   40f74:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   40f76:	4801      	ldr	r0, [pc, #4]	; (40f7c <k_work_schedule+0x8>)
   40f78:	f7ff bfd2 	b.w	40f20 <k_work_schedule_for_queue>
   40f7c:	200019c0 	.word	0x200019c0

00040f80 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   40f80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   40f82:	460c      	mov	r4, r1
   40f84:	9001      	str	r0, [sp, #4]
   40f86:	4616      	mov	r6, r2
   40f88:	461d      	mov	r5, r3
	__asm__ volatile(
   40f8a:	f04f 0320 	mov.w	r3, #32
   40f8e:	f3ef 8711 	mrs	r7, BASEPRI
   40f92:	f383 8812 	msr	BASEPRI_MAX, r3
   40f96:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   40f9a:	4608      	mov	r0, r1
   40f9c:	f007 f8d0 	bl	48140 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   40fa0:	ea55 0306 	orrs.w	r3, r5, r6
   40fa4:	d109      	bne.n	40fba <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   40fa6:	a901      	add	r1, sp, #4
   40fa8:	4620      	mov	r0, r4
   40faa:	f7ff ff21 	bl	40df0 <submit_to_queue_locked>
	__asm__ volatile(
   40fae:	f387 8811 	msr	BASEPRI, r7
   40fb2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   40fb6:	b003      	add	sp, #12
   40fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   40fba:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   40fbc:	4906      	ldr	r1, [pc, #24]	; (40fd8 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   40fbe:	f043 0308 	orr.w	r3, r3, #8
   40fc2:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   40fc4:	9b01      	ldr	r3, [sp, #4]
   40fc6:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   40fc8:	f104 0010 	add.w	r0, r4, #16
   40fcc:	4632      	mov	r2, r6
   40fce:	462b      	mov	r3, r5
   40fd0:	f000 fbd0 	bl	41774 <z_add_timeout>
	return ret;
   40fd4:	2001      	movs	r0, #1
   40fd6:	e7ea      	b.n	40fae <k_work_reschedule_for_queue+0x2e>
   40fd8:	000481d1 	.word	0x000481d1

00040fdc <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   40fdc:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   40fde:	4801      	ldr	r0, [pc, #4]	; (40fe4 <k_work_reschedule+0x8>)
   40fe0:	f7ff bfce 	b.w	40f80 <k_work_reschedule_for_queue>
   40fe4:	200019c0 	.word	0x200019c0

00040fe8 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   40fe8:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   40fea:	4d07      	ldr	r5, [pc, #28]	; (41008 <z_reset_time_slice+0x20>)
   40fec:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   40fee:	b154      	cbz	r4, 41006 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   40ff0:	f7fd fb08 	bl	3e604 <sys_clock_elapsed>
   40ff4:	4b05      	ldr	r3, [pc, #20]	; (4100c <z_reset_time_slice+0x24>)
   40ff6:	4404      	add	r4, r0
   40ff8:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   40ffa:	6828      	ldr	r0, [r5, #0]
   40ffc:	2100      	movs	r1, #0
	}
}
   40ffe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   41002:	f007 bad6 	b.w	485b2 <z_set_timeout_expiry>
}
   41006:	bd38      	pop	{r3, r4, r5, pc}
   41008:	200039b0 	.word	0x200039b0
   4100c:	20003978 	.word	0x20003978

00041010 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   41010:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   41012:	4d0d      	ldr	r5, [pc, #52]	; (41048 <update_cache+0x38>)
   41014:	462b      	mov	r3, r5
   41016:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   4101a:	429c      	cmp	r4, r3
   4101c:	d000      	beq.n	41020 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   4101e:	b904      	cbnz	r4, 41022 <update_cache+0x12>
   41020:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   41022:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   41024:	b938      	cbnz	r0, 41036 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   41026:	7b5a      	ldrb	r2, [r3, #13]
   41028:	06d2      	lsls	r2, r2, #27
   4102a:	d104      	bne.n	41036 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   4102c:	69a2      	ldr	r2, [r4, #24]
   4102e:	b912      	cbnz	r2, 41036 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   41030:	89da      	ldrh	r2, [r3, #14]
   41032:	2a7f      	cmp	r2, #127	; 0x7f
   41034:	d805      	bhi.n	41042 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   41036:	429c      	cmp	r4, r3
   41038:	d002      	beq.n	41040 <update_cache+0x30>
			z_reset_time_slice(thread);
   4103a:	4620      	mov	r0, r4
   4103c:	f7ff ffd4 	bl	40fe8 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   41040:	4623      	mov	r3, r4
   41042:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   41044:	bd38      	pop	{r3, r4, r5, pc}
   41046:	bf00      	nop
   41048:	20003978 	.word	0x20003978

0004104c <move_thread_to_end_of_prio_q>:
{
   4104c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   4104e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   41052:	7b43      	ldrb	r3, [r0, #13]
   41054:	2a00      	cmp	r2, #0
{
   41056:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   41058:	da04      	bge.n	41064 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   4105a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   4105e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   41060:	f007 f96c 	bl	4833c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   41064:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   41066:	4a15      	ldr	r2, [pc, #84]	; (410bc <move_thread_to_end_of_prio_q+0x70>)
   41068:	f063 037f 	orn	r3, r3, #127	; 0x7f
   4106c:	4610      	mov	r0, r2
   4106e:	734b      	strb	r3, [r1, #13]
   41070:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   41074:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   41076:	4283      	cmp	r3, r0
   41078:	bf08      	it	eq
   4107a:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   4107c:	b923      	cbnz	r3, 41088 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   4107e:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   41082:	6021      	str	r1, [r4, #0]
	list->tail = node;
   41084:	6251      	str	r1, [r2, #36]	; 0x24
}
   41086:	e00c      	b.n	410a2 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   41088:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   4108c:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   41090:	42b5      	cmp	r5, r6
   41092:	d00e      	beq.n	410b2 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   41094:	42ae      	cmp	r6, r5
   41096:	dd0c      	ble.n	410b2 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   41098:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   4109a:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   4109e:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   410a0:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   410a2:	6890      	ldr	r0, [r2, #8]
   410a4:	1a43      	subs	r3, r0, r1
   410a6:	4258      	negs	r0, r3
}
   410a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   410ac:	4158      	adcs	r0, r3
   410ae:	f7ff bfaf 	b.w	41010 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   410b2:	429c      	cmp	r4, r3
   410b4:	d0e3      	beq.n	4107e <move_thread_to_end_of_prio_q+0x32>
   410b6:	681b      	ldr	r3, [r3, #0]
   410b8:	e7e0      	b.n	4107c <move_thread_to_end_of_prio_q+0x30>
   410ba:	bf00      	nop
   410bc:	20003978 	.word	0x20003978

000410c0 <ready_thread>:
{
   410c0:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   410c2:	f990 300d 	ldrsb.w	r3, [r0, #13]
   410c6:	7b42      	ldrb	r2, [r0, #13]
   410c8:	2b00      	cmp	r3, #0
   410ca:	db29      	blt.n	41120 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   410cc:	06d3      	lsls	r3, r2, #27
   410ce:	d127      	bne.n	41120 <ready_thread+0x60>
	return node->next != NULL;
   410d0:	6983      	ldr	r3, [r0, #24]
   410d2:	bb2b      	cbnz	r3, 41120 <ready_thread+0x60>
	return list->head == list;
   410d4:	4913      	ldr	r1, [pc, #76]	; (41124 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   410d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
   410da:	7342      	strb	r2, [r0, #13]
   410dc:	460a      	mov	r2, r1
   410de:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   410e2:	4294      	cmp	r4, r2
   410e4:	bf18      	it	ne
   410e6:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   410e8:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   410ea:	b923      	cbnz	r3, 410f6 <ready_thread+0x36>
	node->prev = tail;
   410ec:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   410f0:	6020      	str	r0, [r4, #0]
	list->tail = node;
   410f2:	6248      	str	r0, [r1, #36]	; 0x24
}
   410f4:	e00c      	b.n	41110 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   410f6:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   410fa:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   410fe:	42b5      	cmp	r5, r6
   41100:	d00a      	beq.n	41118 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   41102:	42ae      	cmp	r6, r5
   41104:	dd08      	ble.n	41118 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   41106:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   41108:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   4110c:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   4110e:	6058      	str	r0, [r3, #4]
}
   41110:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   41112:	2000      	movs	r0, #0
   41114:	f7ff bf7c 	b.w	41010 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   41118:	42a3      	cmp	r3, r4
   4111a:	d0e7      	beq.n	410ec <ready_thread+0x2c>
   4111c:	681b      	ldr	r3, [r3, #0]
   4111e:	e7e4      	b.n	410ea <ready_thread+0x2a>
}
   41120:	bc70      	pop	{r4, r5, r6}
   41122:	4770      	bx	lr
   41124:	20003978 	.word	0x20003978

00041128 <unready_thread>:
{
   41128:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   4112a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   4112e:	7b43      	ldrb	r3, [r0, #13]
   41130:	2a00      	cmp	r2, #0
{
   41132:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   41134:	da04      	bge.n	41140 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   41136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   4113a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   4113c:	f007 f8fe 	bl	4833c <sys_dlist_remove>
	update_cache(thread == _current);
   41140:	4b04      	ldr	r3, [pc, #16]	; (41154 <unready_thread+0x2c>)
   41142:	6898      	ldr	r0, [r3, #8]
   41144:	1a43      	subs	r3, r0, r1
   41146:	4258      	negs	r0, r3
   41148:	4158      	adcs	r0, r3
}
   4114a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   4114e:	f7ff bf5f 	b.w	41010 <update_cache>
   41152:	bf00      	nop
   41154:	20003978 	.word	0x20003978

00041158 <pend>:
{
   41158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4115c:	4606      	mov	r6, r0
   4115e:	4615      	mov	r5, r2
   41160:	461c      	mov	r4, r3
	__asm__ volatile(
   41162:	f04f 0320 	mov.w	r3, #32
   41166:	f3ef 8711 	mrs	r7, BASEPRI
   4116a:	f383 8812 	msr	BASEPRI_MAX, r3
   4116e:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   41172:	f007 f920 	bl	483b6 <add_to_waitq_locked>
	__asm__ volatile(
   41176:	f387 8811 	msr	BASEPRI, r7
   4117a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   4117e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   41182:	bf08      	it	eq
   41184:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   41188:	d008      	beq.n	4119c <pend+0x44>
   4118a:	462a      	mov	r2, r5
   4118c:	4623      	mov	r3, r4
   4118e:	f106 0018 	add.w	r0, r6, #24
   41192:	4903      	ldr	r1, [pc, #12]	; (411a0 <pend+0x48>)
}
   41194:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   41198:	f000 baec 	b.w	41774 <z_add_timeout>
   4119c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   411a0:	00048373 	.word	0x00048373

000411a4 <k_sched_time_slice_set>:
{
   411a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   411a6:	4604      	mov	r4, r0
   411a8:	460d      	mov	r5, r1
	__asm__ volatile(
   411aa:	f04f 0320 	mov.w	r3, #32
   411ae:	f3ef 8711 	mrs	r7, BASEPRI
   411b2:	f383 8812 	msr	BASEPRI_MAX, r3
   411b6:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
   411ba:	2600      	movs	r6, #0
   411bc:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   411c0:	f240 30e7 	movw	r0, #999	; 0x3e7
   411c4:	4631      	mov	r1, r6
   411c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   411ca:	2300      	movs	r3, #0
   411cc:	fbe4 010c 	umlal	r0, r1, r4, ip
   411d0:	f7e4 ff96 	bl	26100 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   411d4:	42b4      	cmp	r4, r6
   411d6:	dd02      	ble.n	411de <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
   411d8:	2802      	cmp	r0, #2
   411da:	bfb8      	it	lt
   411dc:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   411de:	4a07      	ldr	r2, [pc, #28]	; (411fc <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
   411e0:	4b07      	ldr	r3, [pc, #28]	; (41200 <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   411e2:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   411e4:	4a07      	ldr	r2, [pc, #28]	; (41204 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
   411e6:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   411e8:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   411ea:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   411ec:	f7ff fefc 	bl	40fe8 <z_reset_time_slice>
	__asm__ volatile(
   411f0:	f387 8811 	msr	BASEPRI, r7
   411f4:	f3bf 8f6f 	isb	sy
}
   411f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   411fa:	bf00      	nop
   411fc:	200039b0 	.word	0x200039b0
   41200:	20003978 	.word	0x20003978
   41204:	200039ac 	.word	0x200039ac

00041208 <z_time_slice>:
{
   41208:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   4120a:	f04f 0320 	mov.w	r3, #32
   4120e:	f3ef 8511 	mrs	r5, BASEPRI
   41212:	f383 8812 	msr	BASEPRI_MAX, r3
   41216:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   4121a:	4b17      	ldr	r3, [pc, #92]	; (41278 <z_time_slice+0x70>)
   4121c:	4a17      	ldr	r2, [pc, #92]	; (4127c <z_time_slice+0x74>)
   4121e:	689c      	ldr	r4, [r3, #8]
   41220:	6811      	ldr	r1, [r2, #0]
   41222:	428c      	cmp	r4, r1
   41224:	d107      	bne.n	41236 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
   41226:	4620      	mov	r0, r4
   41228:	f7ff fede 	bl	40fe8 <z_reset_time_slice>
	__asm__ volatile(
   4122c:	f385 8811 	msr	BASEPRI, r5
   41230:	f3bf 8f6f 	isb	sy
}
   41234:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   41236:	2100      	movs	r1, #0
   41238:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   4123a:	4a11      	ldr	r2, [pc, #68]	; (41280 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
   4123c:	6812      	ldr	r2, [r2, #0]
   4123e:	b1c2      	cbz	r2, 41272 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   41240:	89e2      	ldrh	r2, [r4, #14]
   41242:	2a7f      	cmp	r2, #127	; 0x7f
   41244:	d815      	bhi.n	41272 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   41246:	7b62      	ldrb	r2, [r4, #13]
   41248:	06d2      	lsls	r2, r2, #27
   4124a:	d112      	bne.n	41272 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   4124c:	4a0d      	ldr	r2, [pc, #52]	; (41284 <z_time_slice+0x7c>)
   4124e:	f994 100e 	ldrsb.w	r1, [r4, #14]
   41252:	6812      	ldr	r2, [r2, #0]
   41254:	4291      	cmp	r1, r2
   41256:	db0c      	blt.n	41272 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   41258:	4a0b      	ldr	r2, [pc, #44]	; (41288 <z_time_slice+0x80>)
   4125a:	4294      	cmp	r4, r2
   4125c:	d009      	beq.n	41272 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   4125e:	691a      	ldr	r2, [r3, #16]
   41260:	4282      	cmp	r2, r0
   41262:	dc03      	bgt.n	4126c <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
   41264:	4620      	mov	r0, r4
   41266:	f7ff fef1 	bl	4104c <move_thread_to_end_of_prio_q>
   4126a:	e7dc      	b.n	41226 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
   4126c:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
   4126e:	611a      	str	r2, [r3, #16]
   41270:	e7dc      	b.n	4122c <z_time_slice+0x24>
   41272:	2200      	movs	r2, #0
   41274:	e7fb      	b.n	4126e <z_time_slice+0x66>
   41276:	bf00      	nop
   41278:	20003978 	.word	0x20003978
   4127c:	200039a8 	.word	0x200039a8
   41280:	200039b0 	.word	0x200039b0
   41284:	200039ac 	.word	0x200039ac
   41288:	200018c0 	.word	0x200018c0

0004128c <z_pend_curr>:
{
   4128c:	b510      	push	{r4, lr}
	pending_current = _current;
   4128e:	4b07      	ldr	r3, [pc, #28]	; (412ac <z_pend_curr+0x20>)
   41290:	6898      	ldr	r0, [r3, #8]
   41292:	4b07      	ldr	r3, [pc, #28]	; (412b0 <z_pend_curr+0x24>)
{
   41294:	460c      	mov	r4, r1
	pending_current = _current;
   41296:	6018      	str	r0, [r3, #0]
{
   41298:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   4129a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   4129e:	f7ff ff5b 	bl	41158 <pend>
	ret = arch_swap(key);
   412a2:	4620      	mov	r0, r4
}
   412a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   412a8:	f7e9 b8a4 	b.w	2a3f4 <arch_swap>
   412ac:	20003978 	.word	0x20003978
   412b0:	200039a8 	.word	0x200039a8

000412b4 <z_set_prio>:
{
   412b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   412b6:	4604      	mov	r4, r0
	__asm__ volatile(
   412b8:	f04f 0320 	mov.w	r3, #32
   412bc:	f3ef 8611 	mrs	r6, BASEPRI
   412c0:	f383 8812 	msr	BASEPRI_MAX, r3
   412c4:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   412c8:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   412ca:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   412cc:	b249      	sxtb	r1, r1
   412ce:	d119      	bne.n	41304 <z_set_prio+0x50>
	return node->next != NULL;
   412d0:	6985      	ldr	r5, [r0, #24]
   412d2:	b9bd      	cbnz	r5, 41304 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   412d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   412d8:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   412da:	f007 f82f 	bl	4833c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   412de:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   412e0:	4a16      	ldr	r2, [pc, #88]	; (4133c <z_set_prio+0x88>)
				thread->base.prio = prio;
   412e2:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   412e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   412e8:	7343      	strb	r3, [r0, #13]
   412ea:	4613      	mov	r3, r2
   412ec:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   412f0:	4298      	cmp	r0, r3
   412f2:	bf18      	it	ne
   412f4:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   412f6:	6a50      	ldr	r0, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   412f8:	b95d      	cbnz	r5, 41312 <z_set_prio+0x5e>
	node->prev = tail;
   412fa:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   412fe:	6004      	str	r4, [r0, #0]
	list->tail = node;
   41300:	6254      	str	r4, [r2, #36]	; 0x24
}
   41302:	e011      	b.n	41328 <z_set_prio+0x74>
			thread->base.prio = prio;
   41304:	73a1      	strb	r1, [r4, #14]
   41306:	2000      	movs	r0, #0
	__asm__ volatile(
   41308:	f386 8811 	msr	BASEPRI, r6
   4130c:	f3bf 8f6f 	isb	sy
}
   41310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   41312:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   41316:	42b9      	cmp	r1, r7
   41318:	d00b      	beq.n	41332 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   4131a:	428f      	cmp	r7, r1
   4131c:	dd09      	ble.n	41332 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   4131e:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   41320:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   41324:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   41326:	606c      	str	r4, [r5, #4]
			update_cache(1);
   41328:	2001      	movs	r0, #1
   4132a:	f7ff fe71 	bl	41010 <update_cache>
   4132e:	2001      	movs	r0, #1
   41330:	e7ea      	b.n	41308 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   41332:	42a8      	cmp	r0, r5
   41334:	d0e1      	beq.n	412fa <z_set_prio+0x46>
   41336:	682d      	ldr	r5, [r5, #0]
   41338:	e7de      	b.n	412f8 <z_set_prio+0x44>
   4133a:	bf00      	nop
   4133c:	20003978 	.word	0x20003978

00041340 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   41340:	b949      	cbnz	r1, 41356 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   41342:	f3ef 8005 	mrs	r0, IPSR
   41346:	b930      	cbnz	r0, 41356 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   41348:	4b05      	ldr	r3, [pc, #20]	; (41360 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   4134a:	69da      	ldr	r2, [r3, #28]
   4134c:	689b      	ldr	r3, [r3, #8]
   4134e:	429a      	cmp	r2, r3
   41350:	d001      	beq.n	41356 <z_reschedule+0x16>
   41352:	f7e9 b84f 	b.w	2a3f4 <arch_swap>
   41356:	f381 8811 	msr	BASEPRI, r1
   4135a:	f3bf 8f6f 	isb	sy
}
   4135e:	4770      	bx	lr
   41360:	20003978 	.word	0x20003978

00041364 <z_sched_start>:
{
   41364:	b510      	push	{r4, lr}
	__asm__ volatile(
   41366:	f04f 0220 	mov.w	r2, #32
   4136a:	f3ef 8411 	mrs	r4, BASEPRI
   4136e:	f382 8812 	msr	BASEPRI_MAX, r2
   41372:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   41376:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   41378:	0751      	lsls	r1, r2, #29
   4137a:	d404      	bmi.n	41386 <z_sched_start+0x22>
	__asm__ volatile(
   4137c:	f384 8811 	msr	BASEPRI, r4
   41380:	f3bf 8f6f 	isb	sy
}
   41384:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   41386:	f022 0204 	bic.w	r2, r2, #4
   4138a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   4138c:	f7ff fe98 	bl	410c0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   41390:	4621      	mov	r1, r4
   41392:	4802      	ldr	r0, [pc, #8]	; (4139c <z_sched_start+0x38>)
}
   41394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   41398:	f7ff bfd2 	b.w	41340 <z_reschedule>
   4139c:	20003b26 	.word	0x20003b26

000413a0 <z_impl_k_thread_suspend>:
{
   413a0:	b570      	push	{r4, r5, r6, lr}
   413a2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   413a4:	3018      	adds	r0, #24
   413a6:	f007 f8de 	bl	48566 <z_abort_timeout>
	__asm__ volatile(
   413aa:	f04f 0320 	mov.w	r3, #32
   413ae:	f3ef 8611 	mrs	r6, BASEPRI
   413b2:	f383 8812 	msr	BASEPRI_MAX, r3
   413b6:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   413ba:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   413be:	7b63      	ldrb	r3, [r4, #13]
   413c0:	2a00      	cmp	r2, #0
   413c2:	da05      	bge.n	413d0 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   413c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   413c8:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   413ca:	4620      	mov	r0, r4
   413cc:	f006 ffb6 	bl	4833c <sys_dlist_remove>
		update_cache(thread == _current);
   413d0:	4d0b      	ldr	r5, [pc, #44]	; (41400 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   413d2:	7b63      	ldrb	r3, [r4, #13]
   413d4:	68a8      	ldr	r0, [r5, #8]
   413d6:	f043 0310 	orr.w	r3, r3, #16
   413da:	7363      	strb	r3, [r4, #13]
   413dc:	1b03      	subs	r3, r0, r4
   413de:	4258      	negs	r0, r3
   413e0:	4158      	adcs	r0, r3
   413e2:	f7ff fe15 	bl	41010 <update_cache>
	__asm__ volatile(
   413e6:	f386 8811 	msr	BASEPRI, r6
   413ea:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   413ee:	68ab      	ldr	r3, [r5, #8]
   413f0:	42a3      	cmp	r3, r4
   413f2:	d103      	bne.n	413fc <z_impl_k_thread_suspend+0x5c>
}
   413f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   413f8:	f007 b878 	b.w	484ec <z_reschedule_unlocked>
}
   413fc:	bd70      	pop	{r4, r5, r6, pc}
   413fe:	bf00      	nop
   41400:	20003978 	.word	0x20003978

00041404 <k_sched_lock>:
	__asm__ volatile(
   41404:	f04f 0320 	mov.w	r3, #32
   41408:	f3ef 8111 	mrs	r1, BASEPRI
   4140c:	f383 8812 	msr	BASEPRI_MAX, r3
   41410:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   41414:	4b04      	ldr	r3, [pc, #16]	; (41428 <k_sched_lock+0x24>)
   41416:	689a      	ldr	r2, [r3, #8]
   41418:	7bd3      	ldrb	r3, [r2, #15]
   4141a:	3b01      	subs	r3, #1
   4141c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   4141e:	f381 8811 	msr	BASEPRI, r1
   41422:	f3bf 8f6f 	isb	sy
}
   41426:	4770      	bx	lr
   41428:	20003978 	.word	0x20003978

0004142c <k_sched_unlock>:
{
   4142c:	b510      	push	{r4, lr}
	__asm__ volatile(
   4142e:	f04f 0320 	mov.w	r3, #32
   41432:	f3ef 8411 	mrs	r4, BASEPRI
   41436:	f383 8812 	msr	BASEPRI_MAX, r3
   4143a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   4143e:	4b08      	ldr	r3, [pc, #32]	; (41460 <k_sched_unlock+0x34>)
   41440:	689a      	ldr	r2, [r3, #8]
   41442:	7bd3      	ldrb	r3, [r2, #15]
   41444:	3301      	adds	r3, #1
   41446:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   41448:	2000      	movs	r0, #0
   4144a:	f7ff fde1 	bl	41010 <update_cache>
	__asm__ volatile(
   4144e:	f384 8811 	msr	BASEPRI, r4
   41452:	f3bf 8f6f 	isb	sy
}
   41456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   4145a:	f007 b847 	b.w	484ec <z_reschedule_unlocked>
   4145e:	bf00      	nop
   41460:	20003978 	.word	0x20003978

00041464 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   41464:	4b04      	ldr	r3, [pc, #16]	; (41478 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   41466:	2100      	movs	r1, #0
   41468:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   4146c:	e9c3 2208 	strd	r2, r2, [r3, #32]
   41470:	4608      	mov	r0, r1
   41472:	f7ff be97 	b.w	411a4 <k_sched_time_slice_set>
   41476:	bf00      	nop
   41478:	20003978 	.word	0x20003978

0004147c <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   4147c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   4147e:	f04f 0320 	mov.w	r3, #32
   41482:	f3ef 8511 	mrs	r5, BASEPRI
   41486:	f383 8812 	msr	BASEPRI_MAX, r3
   4148a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   4148e:	4919      	ldr	r1, [pc, #100]	; (414f4 <z_impl_k_yield+0x78>)
   41490:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   41492:	7b43      	ldrb	r3, [r0, #13]
   41494:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   41498:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   4149a:	f006 ff4f 	bl	4833c <sys_dlist_remove>
	}
	queue_thread(_current);
   4149e:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   414a0:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   414a2:	4608      	mov	r0, r1
   414a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
   414a8:	735a      	strb	r2, [r3, #13]
   414aa:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return (node == list->tail) ? NULL : node->next;
   414ae:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   414b0:	4282      	cmp	r2, r0
   414b2:	bf08      	it	eq
   414b4:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   414b6:	b922      	cbnz	r2, 414c2 <z_impl_k_yield+0x46>
	node->prev = tail;
   414b8:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   414bc:	6023      	str	r3, [r4, #0]
	list->tail = node;
   414be:	624b      	str	r3, [r1, #36]	; 0x24
}
   414c0:	e00c      	b.n	414dc <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   414c2:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   414c6:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   414ca:	42be      	cmp	r6, r7
   414cc:	d00e      	beq.n	414ec <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   414ce:	42b7      	cmp	r7, r6
   414d0:	dd0c      	ble.n	414ec <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   414d2:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   414d4:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   414d8:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   414da:	6053      	str	r3, [r2, #4]
	update_cache(1);
   414dc:	2001      	movs	r0, #1
   414de:	f7ff fd97 	bl	41010 <update_cache>
   414e2:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   414e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   414e8:	f7e8 bf84 	b.w	2a3f4 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   414ec:	42a2      	cmp	r2, r4
   414ee:	d0e3      	beq.n	414b8 <z_impl_k_yield+0x3c>
   414f0:	6812      	ldr	r2, [r2, #0]
   414f2:	e7e0      	b.n	414b6 <z_impl_k_yield+0x3a>
   414f4:	20003978 	.word	0x20003978

000414f8 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   414f8:	ea50 0301 	orrs.w	r3, r0, r1
{
   414fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   41500:	4605      	mov	r5, r0
   41502:	460e      	mov	r6, r1
	if (ticks == 0) {
   41504:	d103      	bne.n	4150e <z_tick_sleep+0x16>
	z_impl_k_yield();
   41506:	f7ff ffb9 	bl	4147c <z_impl_k_yield>
		k_yield();
		return 0;
   4150a:	2000      	movs	r0, #0
   4150c:	e02c      	b.n	41568 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   4150e:	1c83      	adds	r3, r0, #2
   41510:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
   41514:	db2a      	blt.n	4156c <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   41516:	f007 f868 	bl	485ea <sys_clock_tick_get_32>
   4151a:	1944      	adds	r4, r0, r5
   4151c:	f04f 0320 	mov.w	r3, #32
   41520:	f3ef 8811 	mrs	r8, BASEPRI
   41524:	f383 8812 	msr	BASEPRI_MAX, r3
   41528:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   4152c:	4f11      	ldr	r7, [pc, #68]	; (41574 <z_tick_sleep+0x7c>)
   4152e:	4b12      	ldr	r3, [pc, #72]	; (41578 <z_tick_sleep+0x80>)
   41530:	68b8      	ldr	r0, [r7, #8]
   41532:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   41534:	f7ff fdf8 	bl	41128 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   41538:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   4153a:	4910      	ldr	r1, [pc, #64]	; (4157c <z_tick_sleep+0x84>)
   4153c:	462a      	mov	r2, r5
   4153e:	4633      	mov	r3, r6
   41540:	3018      	adds	r0, #24
   41542:	f000 f917 	bl	41774 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   41546:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   41548:	7b53      	ldrb	r3, [r2, #13]
   4154a:	f043 0310 	orr.w	r3, r3, #16
   4154e:	7353      	strb	r3, [r2, #13]
   41550:	4640      	mov	r0, r8
   41552:	f7e8 ff4f 	bl	2a3f4 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   41556:	f007 f848 	bl	485ea <sys_clock_tick_get_32>
   4155a:	1a20      	subs	r0, r4, r0
   4155c:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   41560:	2801      	cmp	r0, #1
   41562:	f173 0300 	sbcs.w	r3, r3, #0
   41566:	dbd0      	blt.n	4150a <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   41568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   4156c:	f06f 0401 	mvn.w	r4, #1
   41570:	1a24      	subs	r4, r4, r0
   41572:	e7d3      	b.n	4151c <z_tick_sleep+0x24>
   41574:	20003978 	.word	0x20003978
   41578:	200039a8 	.word	0x200039a8
   4157c:	00048373 	.word	0x00048373

00041580 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   41580:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   41584:	bf08      	it	eq
   41586:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   4158a:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   4158c:	d106      	bne.n	4159c <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   4158e:	4b08      	ldr	r3, [pc, #32]	; (415b0 <z_impl_k_sleep+0x30>)
   41590:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   41592:	f7ff ff05 	bl	413a0 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   41596:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   4159a:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   4159c:	f7ff ffac 	bl	414f8 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   415a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   415a4:	fb80 0303 	smull	r0, r3, r0, r3
   415a8:	0bc0      	lsrs	r0, r0, #15
   415aa:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   415ae:	e7f4      	b.n	4159a <z_impl_k_sleep+0x1a>
   415b0:	20003978 	.word	0x20003978

000415b4 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   415b4:	4b01      	ldr	r3, [pc, #4]	; (415bc <z_impl_z_current_get+0x8>)
   415b6:	6898      	ldr	r0, [r3, #8]
   415b8:	4770      	bx	lr
   415ba:	bf00      	nop
   415bc:	20003978 	.word	0x20003978

000415c0 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   415c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   415c4:	4604      	mov	r4, r0
   415c6:	f04f 0320 	mov.w	r3, #32
   415ca:	f3ef 8611 	mrs	r6, BASEPRI
   415ce:	f383 8812 	msr	BASEPRI_MAX, r3
   415d2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   415d6:	7b03      	ldrb	r3, [r0, #12]
   415d8:	07d9      	lsls	r1, r3, #31
   415da:	d50b      	bpl.n	415f4 <z_thread_abort+0x34>
	__asm__ volatile(
   415dc:	f386 8811 	msr	BASEPRI, r6
   415e0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   415e4:	4040      	eors	r0, r0
   415e6:	f380 8811 	msr	BASEPRI, r0
   415ea:	f04f 0004 	mov.w	r0, #4
   415ee:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   415f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   415f4:	7b43      	ldrb	r3, [r0, #13]
   415f6:	071a      	lsls	r2, r3, #28
   415f8:	d504      	bpl.n	41604 <z_thread_abort+0x44>
   415fa:	f386 8811 	msr	BASEPRI, r6
   415fe:	f3bf 8f6f 	isb	sy
   41602:	e7f5      	b.n	415f0 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   41604:	f023 0220 	bic.w	r2, r3, #32
   41608:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   4160c:	09d2      	lsrs	r2, r2, #7
   4160e:	d120      	bne.n	41652 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   41610:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   41612:	68a3      	ldr	r3, [r4, #8]
   41614:	b113      	cbz	r3, 4161c <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   41616:	4620      	mov	r0, r4
   41618:	f006 fe98 	bl	4834c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   4161c:	f104 0018 	add.w	r0, r4, #24
   41620:	f006 ffa1 	bl	48566 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   41624:	f104 0758 	add.w	r7, r4, #88	; 0x58
   41628:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   4162c:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   4162e:	42bd      	cmp	r5, r7
   41630:	d000      	beq.n	41634 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   41632:	b9b5      	cbnz	r5, 41662 <z_thread_abort+0xa2>
		update_cache(1);
   41634:	2001      	movs	r0, #1
   41636:	f7ff fceb 	bl	41010 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   4163a:	4b10      	ldr	r3, [pc, #64]	; (4167c <z_thread_abort+0xbc>)
   4163c:	689b      	ldr	r3, [r3, #8]
   4163e:	42a3      	cmp	r3, r4
   41640:	d1db      	bne.n	415fa <z_thread_abort+0x3a>
   41642:	f3ef 8305 	mrs	r3, IPSR
   41646:	2b00      	cmp	r3, #0
   41648:	d1d7      	bne.n	415fa <z_thread_abort+0x3a>
   4164a:	4630      	mov	r0, r6
   4164c:	f7e8 fed2 	bl	2a3f4 <arch_swap>
	return ret;
   41650:	e7d3      	b.n	415fa <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   41652:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   41656:	f043 0308 	orr.w	r3, r3, #8
   4165a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   4165c:	f006 fe6e 	bl	4833c <sys_dlist_remove>
}
   41660:	e7d7      	b.n	41612 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   41662:	4628      	mov	r0, r5
   41664:	f006 fe72 	bl	4834c <unpend_thread_no_timeout>
   41668:	f105 0018 	add.w	r0, r5, #24
   4166c:	f006 ff7b 	bl	48566 <z_abort_timeout>
   41670:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   41674:	4628      	mov	r0, r5
   41676:	f7ff fd23 	bl	410c0 <ready_thread>
   4167a:	e7d7      	b.n	4162c <z_thread_abort+0x6c>
   4167c:	20003978 	.word	0x20003978

00041680 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   41680:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   41682:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   41686:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   41688:	e9cd 6700 	strd	r6, r7, [sp]
   4168c:	f7ff fdfe 	bl	4128c <z_pend_curr>

	if (data != NULL) {
   41690:	b11c      	cbz	r4, 4169a <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   41692:	4b03      	ldr	r3, [pc, #12]	; (416a0 <z_sched_wait+0x20>)
   41694:	689b      	ldr	r3, [r3, #8]
   41696:	695b      	ldr	r3, [r3, #20]
   41698:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   4169a:	b002      	add	sp, #8
   4169c:	bdd0      	pop	{r4, r6, r7, pc}
   4169e:	bf00      	nop
   416a0:	20003978 	.word	0x20003978

000416a4 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   416a4:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   416a6:	4806      	ldr	r0, [pc, #24]	; (416c0 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   416a8:	4a06      	ldr	r2, [pc, #24]	; (416c4 <z_data_copy+0x20>)
   416aa:	4907      	ldr	r1, [pc, #28]	; (416c8 <z_data_copy+0x24>)
   416ac:	1a12      	subs	r2, r2, r0
   416ae:	f006 fb66 	bl	47d7e <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   416b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   416b6:	4a05      	ldr	r2, [pc, #20]	; (416cc <z_data_copy+0x28>)
   416b8:	4905      	ldr	r1, [pc, #20]	; (416d0 <z_data_copy+0x2c>)
   416ba:	4806      	ldr	r0, [pc, #24]	; (416d4 <z_data_copy+0x30>)
   416bc:	f006 bb5f 	b.w	47d7e <z_early_memcpy>
   416c0:	20000000 	.word	0x20000000
   416c4:	20000f01 	.word	0x20000f01
   416c8:	0004abb4 	.word	0x0004abb4
   416cc:	00000000 	.word	0x00000000
   416d0:	0004abb4 	.word	0x0004abb4
   416d4:	20000000 	.word	0x20000000

000416d8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   416d8:	4b03      	ldr	r3, [pc, #12]	; (416e8 <elapsed+0x10>)
   416da:	681b      	ldr	r3, [r3, #0]
   416dc:	b90b      	cbnz	r3, 416e2 <elapsed+0xa>
   416de:	f7fc bf91 	b.w	3e604 <sys_clock_elapsed>
}
   416e2:	2000      	movs	r0, #0
   416e4:	4770      	bx	lr
   416e6:	bf00      	nop
   416e8:	200039b4 	.word	0x200039b4

000416ec <next_timeout>:

static int32_t next_timeout(void)
{
   416ec:	b510      	push	{r4, lr}
	return list->head == list;
   416ee:	4b11      	ldr	r3, [pc, #68]	; (41734 <next_timeout+0x48>)
   416f0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   416f2:	429c      	cmp	r4, r3
   416f4:	d10a      	bne.n	4170c <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   416f6:	f7ff ffef 	bl	416d8 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   416fa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   416fe:	4b0e      	ldr	r3, [pc, #56]	; (41738 <next_timeout+0x4c>)
   41700:	691b      	ldr	r3, [r3, #16]
   41702:	b113      	cbz	r3, 4170a <next_timeout+0x1e>
   41704:	4298      	cmp	r0, r3
   41706:	bfa8      	it	ge
   41708:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   4170a:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   4170c:	f7ff ffe4 	bl	416d8 <elapsed>
	if ((to == NULL) ||
   41710:	2c00      	cmp	r4, #0
   41712:	d0f2      	beq.n	416fa <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   41714:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   41718:	1a1b      	subs	r3, r3, r0
   4171a:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   4171e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   41722:	f172 0100 	sbcs.w	r1, r2, #0
   41726:	dae8      	bge.n	416fa <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   41728:	2a00      	cmp	r2, #0
   4172a:	bfac      	ite	ge
   4172c:	4618      	movge	r0, r3
   4172e:	2000      	movlt	r0, #0
   41730:	e7e5      	b.n	416fe <next_timeout+0x12>
   41732:	bf00      	nop
   41734:	20000a14 	.word	0x20000a14
   41738:	20003978 	.word	0x20003978

0004173c <remove_timeout>:
{
   4173c:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   4173e:	b170      	cbz	r0, 4175e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   41740:	4b0b      	ldr	r3, [pc, #44]	; (41770 <remove_timeout+0x34>)
   41742:	685b      	ldr	r3, [r3, #4]
   41744:	4298      	cmp	r0, r3
   41746:	d00a      	beq.n	4175e <remove_timeout+0x22>
   41748:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   4174a:	b143      	cbz	r3, 4175e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   4174c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   41750:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   41754:	1912      	adds	r2, r2, r4
   41756:	eb41 0105 	adc.w	r1, r1, r5
   4175a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   4175e:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   41762:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   41764:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   41766:	2300      	movs	r3, #0
	node->prev = NULL;
   41768:	e9c0 3300 	strd	r3, r3, [r0]
}
   4176c:	bd30      	pop	{r4, r5, pc}
   4176e:	bf00      	nop
   41770:	20000a14 	.word	0x20000a14

00041774 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   41774:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   41778:	bf08      	it	eq
   4177a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   4177e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   41780:	4604      	mov	r4, r0
   41782:	461d      	mov	r5, r3
   41784:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   41786:	d061      	beq.n	4184c <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   41788:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   4178a:	f04f 0320 	mov.w	r3, #32
   4178e:	f3ef 8711 	mrs	r7, BASEPRI
   41792:	f383 8812 	msr	BASEPRI_MAX, r3
   41796:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   4179a:	3201      	adds	r2, #1
   4179c:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
   417a0:	da24      	bge.n	417ec <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   417a2:	4930      	ldr	r1, [pc, #192]	; (41864 <z_add_timeout+0xf0>)
   417a4:	e9d1 2000 	ldrd	r2, r0, [r1]
   417a8:	f06f 0301 	mvn.w	r3, #1
   417ac:	1a9b      	subs	r3, r3, r2
   417ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   417b2:	eb62 0000 	sbc.w	r0, r2, r0
   417b6:	1b9e      	subs	r6, r3, r6
   417b8:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   417bc:	2e01      	cmp	r6, #1
   417be:	f170 0300 	sbcs.w	r3, r0, #0
   417c2:	da01      	bge.n	417c8 <z_add_timeout+0x54>
   417c4:	2601      	movs	r6, #1
   417c6:	2000      	movs	r0, #0
   417c8:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   417cc:	4e26      	ldr	r6, [pc, #152]	; (41868 <z_add_timeout+0xf4>)
   417ce:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   417d2:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   417d4:	45b4      	cmp	ip, r6
   417d6:	bf08      	it	eq
   417d8:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   417dc:	f1bc 0f00 	cmp.w	ip, #0
   417e0:	d10d      	bne.n	417fe <z_add_timeout+0x8a>
	node->prev = tail;
   417e2:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   417e6:	602c      	str	r4, [r5, #0]
	list->tail = node;
   417e8:	6074      	str	r4, [r6, #4]
}
   417ea:	e01c      	b.n	41826 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   417ec:	f7ff ff74 	bl	416d8 <elapsed>
   417f0:	3601      	adds	r6, #1
   417f2:	f145 0500 	adc.w	r5, r5, #0
   417f6:	1836      	adds	r6, r6, r0
   417f8:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   417fc:	e7e4      	b.n	417c8 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   417fe:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   41802:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   41806:	4293      	cmp	r3, r2
   41808:	eb71 0e00 	sbcs.w	lr, r1, r0
   4180c:	da1f      	bge.n	4184e <z_add_timeout+0xda>
				t->dticks -= to->dticks;
   4180e:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   41810:	f8dc 3004 	ldr.w	r3, [ip, #4]
   41814:	eb60 0001 	sbc.w	r0, r0, r1
   41818:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   4181c:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   41820:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   41822:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   41826:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   41828:	42b3      	cmp	r3, r6
   4182a:	d00b      	beq.n	41844 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   4182c:	429c      	cmp	r4, r3
   4182e:	d109      	bne.n	41844 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   41830:	f7ff ff5c 	bl	416ec <next_timeout>

			if (next_time == 0 ||
   41834:	b118      	cbz	r0, 4183e <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
   41836:	4b0d      	ldr	r3, [pc, #52]	; (4186c <z_add_timeout+0xf8>)
			if (next_time == 0 ||
   41838:	691b      	ldr	r3, [r3, #16]
   4183a:	4283      	cmp	r3, r0
   4183c:	d002      	beq.n	41844 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
   4183e:	2100      	movs	r1, #0
   41840:	f7fc feae 	bl	3e5a0 <sys_clock_set_timeout>
	__asm__ volatile(
   41844:	f387 8811 	msr	BASEPRI, r7
   41848:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   4184c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   4184e:	1a9b      	subs	r3, r3, r2
   41850:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   41854:	45ac      	cmp	ip, r5
   41856:	e9c4 3104 	strd	r3, r1, [r4, #16]
   4185a:	d0c2      	beq.n	417e2 <z_add_timeout+0x6e>
   4185c:	f8dc c000 	ldr.w	ip, [ip]
   41860:	e7bc      	b.n	417dc <z_add_timeout+0x68>
   41862:	bf00      	nop
   41864:	20001a60 	.word	0x20001a60
   41868:	20000a14 	.word	0x20000a14
   4186c:	20003978 	.word	0x20003978

00041870 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   41870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   41874:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   41876:	f7ff fcc7 	bl	41208 <z_time_slice>
	__asm__ volatile(
   4187a:	f04f 0320 	mov.w	r3, #32
   4187e:	f3ef 8611 	mrs	r6, BASEPRI
   41882:	f383 8812 	msr	BASEPRI_MAX, r3
   41886:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   4188a:	4f23      	ldr	r7, [pc, #140]	; (41918 <sys_clock_announce+0xa8>)
	return list->head == list;
   4188c:	f8df 808c 	ldr.w	r8, [pc, #140]	; 4191c <sys_clock_announce+0xac>
   41890:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   41894:	4a22      	ldr	r2, [pc, #136]	; (41920 <sys_clock_announce+0xb0>)
	announce_remaining = ticks;
   41896:	603c      	str	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   41898:	4540      	cmp	r0, r8
		curr_tick += dt;
   4189a:	e9d2 3e00 	ldrd	r3, lr, [r2]
   4189e:	ea4f 71e4 	mov.w	r1, r4, asr #31
   418a2:	d00b      	beq.n	418bc <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   418a4:	b150      	cbz	r0, 418bc <sys_clock_announce+0x4c>
   418a6:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
   418aa:	42ac      	cmp	r4, r5
   418ac:	eb71 090c 	sbcs.w	r9, r1, ip
   418b0:	da16      	bge.n	418e0 <sys_clock_announce+0x70>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   418b2:	1b2d      	subs	r5, r5, r4
   418b4:	eb6c 0c01 	sbc.w	ip, ip, r1
   418b8:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   418bc:	18e3      	adds	r3, r4, r3
   418be:	eb4e 0101 	adc.w	r1, lr, r1
	announce_remaining = 0;
   418c2:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   418c4:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   418c8:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
   418ca:	f7ff ff0f 	bl	416ec <next_timeout>
   418ce:	4621      	mov	r1, r4
   418d0:	f7fc fe66 	bl	3e5a0 <sys_clock_set_timeout>
	__asm__ volatile(
   418d4:	f386 8811 	msr	BASEPRI, r6
   418d8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   418dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   418e0:	18eb      	adds	r3, r5, r3
   418e2:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
   418e6:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   418ea:	2200      	movs	r2, #0
   418ec:	2300      	movs	r3, #0
   418ee:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
   418f2:	f7ff ff23 	bl	4173c <remove_timeout>
   418f6:	f386 8811 	msr	BASEPRI, r6
   418fa:	f3bf 8f6f 	isb	sy
		t->fn(t);
   418fe:	6883      	ldr	r3, [r0, #8]
   41900:	4798      	blx	r3
	__asm__ volatile(
   41902:	f04f 0320 	mov.w	r3, #32
   41906:	f3ef 8611 	mrs	r6, BASEPRI
   4190a:	f383 8812 	msr	BASEPRI_MAX, r3
   4190e:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   41912:	683c      	ldr	r4, [r7, #0]
   41914:	1b64      	subs	r4, r4, r5
   41916:	e7bb      	b.n	41890 <sys_clock_announce+0x20>
   41918:	200039b4 	.word	0x200039b4
   4191c:	20000a14 	.word	0x20000a14
   41920:	20001a60 	.word	0x20001a60

00041924 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   41924:	b510      	push	{r4, lr}
   41926:	f04f 0320 	mov.w	r3, #32
   4192a:	f3ef 8411 	mrs	r4, BASEPRI
   4192e:	f383 8812 	msr	BASEPRI_MAX, r3
   41932:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   41936:	f7ff fecf 	bl	416d8 <elapsed>
   4193a:	4a06      	ldr	r2, [pc, #24]	; (41954 <sys_clock_tick_get+0x30>)
   4193c:	4603      	mov	r3, r0
   4193e:	e9d2 0100 	ldrd	r0, r1, [r2]
   41942:	1818      	adds	r0, r3, r0
   41944:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   41948:	f384 8811 	msr	BASEPRI, r4
   4194c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   41950:	bd10      	pop	{r4, pc}
   41952:	bf00      	nop
   41954:	20001a60 	.word	0x20001a60

00041958 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   41958:	b570      	push	{r4, r5, r6, lr}
   4195a:	4604      	mov	r4, r0
	__asm__ volatile(
   4195c:	f04f 0320 	mov.w	r3, #32
   41960:	f3ef 8511 	mrs	r5, BASEPRI
   41964:	f383 8812 	msr	BASEPRI_MAX, r3
   41968:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   4196c:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   41970:	3301      	adds	r3, #1
   41972:	f142 0200 	adc.w	r2, r2, #0
   41976:	2b02      	cmp	r3, #2
   41978:	f172 0200 	sbcs.w	r2, r2, #0
   4197c:	d322      	bcc.n	419c4 <z_timer_expiration_handler+0x6c>
	return z_impl_k_uptime_ticks();
   4197e:	f006 fe38 	bl	485f2 <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   41982:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   41986:	3001      	adds	r0, #1
   41988:	f141 0100 	adc.w	r1, r1, #0
   4198c:	18c0      	adds	r0, r0, r3
   4198e:	eb41 0102 	adc.w	r1, r1, r2
   41992:	2801      	cmp	r0, #1
   41994:	f171 0100 	sbcs.w	r1, r1, #0
   41998:	db32      	blt.n	41a00 <z_timer_expiration_handler+0xa8>
   4199a:	f006 fe2a 	bl	485f2 <z_impl_k_uptime_ticks>
   4199e:	3001      	adds	r0, #1
   419a0:	f141 0300 	adc.w	r3, r1, #0
   419a4:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   419a8:	1880      	adds	r0, r0, r2
   419aa:	f06f 0201 	mvn.w	r2, #1
   419ae:	eb43 0301 	adc.w	r3, r3, r1
   419b2:	1a12      	subs	r2, r2, r0
   419b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   419b8:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   419bc:	491a      	ldr	r1, [pc, #104]	; (41a28 <z_timer_expiration_handler+0xd0>)
   419be:	4620      	mov	r0, r4
   419c0:	f7ff fed8 	bl	41774 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   419c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   419c6:	3301      	adds	r3, #1
   419c8:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   419ca:	6a23      	ldr	r3, [r4, #32]
   419cc:	b173      	cbz	r3, 419ec <z_timer_expiration_handler+0x94>
	__asm__ volatile(
   419ce:	f385 8811 	msr	BASEPRI, r5
   419d2:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   419d6:	6a23      	ldr	r3, [r4, #32]
   419d8:	4620      	mov	r0, r4
   419da:	4798      	blx	r3
	__asm__ volatile(
   419dc:	f04f 0320 	mov.w	r3, #32
   419e0:	f3ef 8511 	mrs	r5, BASEPRI
   419e4:	f383 8812 	msr	BASEPRI_MAX, r3
   419e8:	f3bf 8f6f 	isb	sy
	return list->head == list;
   419ec:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   419f0:	42a6      	cmp	r6, r4
   419f2:	d000      	beq.n	419f6 <z_timer_expiration_handler+0x9e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   419f4:	b94e      	cbnz	r6, 41a0a <z_timer_expiration_handler+0xb2>
	__asm__ volatile(
   419f6:	f385 8811 	msr	BASEPRI, r5
   419fa:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   419fe:	bd70      	pop	{r4, r5, r6, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   41a00:	f06f 0201 	mvn.w	r2, #1
   41a04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   41a08:	e7d8      	b.n	419bc <z_timer_expiration_handler+0x64>
	z_unpend_thread_no_timeout(thread);
   41a0a:	4630      	mov	r0, r6
   41a0c:	f006 fd0b 	bl	48426 <z_unpend_thread_no_timeout>
   41a10:	2300      	movs	r3, #0
   41a12:	67f3      	str	r3, [r6, #124]	; 0x7c
   41a14:	f385 8811 	msr	BASEPRI, r5
   41a18:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   41a1c:	4630      	mov	r0, r6
}
   41a1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   41a22:	f006 bcf0 	b.w	48406 <z_ready_thread>
   41a26:	bf00      	nop
   41a28:	00041959 	.word	0x00041959

00041a2c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   41a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   41a30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   41a34:	bf08      	it	eq
   41a36:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   41a3a:	4605      	mov	r5, r0
   41a3c:	4614      	mov	r4, r2
   41a3e:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   41a42:	4619      	mov	r1, r3
   41a44:	4691      	mov	r9, r2
   41a46:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   41a48:	d037      	beq.n	41aba <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   41a4a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   41a4e:	bf08      	it	eq
   41a50:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   41a54:	4637      	mov	r7, r6
   41a56:	4682      	mov	sl, r0
   41a58:	d011      	beq.n	41a7e <z_impl_k_timer_start+0x52>
   41a5a:	ea50 0306 	orrs.w	r3, r0, r6
   41a5e:	d00e      	beq.n	41a7e <z_impl_k_timer_start+0x52>
   41a60:	1c72      	adds	r2, r6, #1
   41a62:	f170 33ff 	sbcs.w	r3, r0, #4294967295	; 0xffffffff
   41a66:	db0a      	blt.n	41a7e <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   41a68:	2e02      	cmp	r6, #2
   41a6a:	4684      	mov	ip, r0
   41a6c:	f170 0000 	sbcs.w	r0, r0, #0
   41a70:	bfbc      	itt	lt
   41a72:	2702      	movlt	r7, #2
   41a74:	f04f 0c00 	movlt.w	ip, #0
   41a78:	3f01      	subs	r7, #1
   41a7a:	f14c 3aff 	adc.w	sl, ip, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   41a7e:	1c63      	adds	r3, r4, #1
   41a80:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
   41a84:	db0a      	blt.n	41a9c <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   41a86:	2c01      	cmp	r4, #1
   41a88:	f171 0300 	sbcs.w	r3, r1, #0
   41a8c:	4622      	mov	r2, r4
   41a8e:	bfbc      	itt	lt
   41a90:	2201      	movlt	r2, #1
   41a92:	2100      	movlt	r1, #0
   41a94:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
   41a98:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
   41a9c:	4628      	mov	r0, r5
   41a9e:	f006 fd62 	bl	48566 <z_abort_timeout>
	timer->period = period;
   41aa2:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
   41aa6:	2300      	movs	r3, #0
   41aa8:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   41aaa:	464a      	mov	r2, r9
   41aac:	4643      	mov	r3, r8
   41aae:	4628      	mov	r0, r5
   41ab0:	4903      	ldr	r1, [pc, #12]	; (41ac0 <z_impl_k_timer_start+0x94>)
		     duration);
}
   41ab2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   41ab6:	f7ff be5d 	b.w	41774 <z_add_timeout>
}
   41aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   41abe:	bf00      	nop
   41ac0:	00041959 	.word	0x00041959

00041ac4 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   41ac4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   41ac8:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   41aca:	4b29      	ldr	r3, [pc, #164]	; (41b70 <z_impl_k_poll+0xac>)
   41acc:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   41ace:	2301      	movs	r3, #1
   41ad0:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   41ad4:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   41ad8:	ea52 0305 	orrs.w	r3, r2, r5
{
   41adc:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   41ade:	bf0c      	ite	eq
   41ae0:	2301      	moveq	r3, #1
   41ae2:	2300      	movne	r3, #0
   41ae4:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   41ae8:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   41aea:	f006 fdf8 	bl	486de <register_events>
   41aee:	4681      	mov	r9, r0
	__asm__ volatile(
   41af0:	f04f 0320 	mov.w	r3, #32
   41af4:	f3ef 8a11 	mrs	sl, BASEPRI
   41af8:	f383 8812 	msr	BASEPRI_MAX, r3
   41afc:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   41b00:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   41b04:	b964      	cbnz	r4, 41b20 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   41b06:	4601      	mov	r1, r0
   41b08:	4652      	mov	r2, sl
   41b0a:	4640      	mov	r0, r8
   41b0c:	f006 feb8 	bl	48880 <clear_event_registrations>
	__asm__ volatile(
   41b10:	f38a 8811 	msr	BASEPRI, sl
   41b14:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   41b18:	4620      	mov	r0, r4
   41b1a:	b002      	add	sp, #8
   41b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   41b20:	2300      	movs	r3, #0
   41b22:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   41b26:	ea56 0305 	orrs.w	r3, r6, r5
   41b2a:	d106      	bne.n	41b3a <z_impl_k_poll+0x76>
   41b2c:	f38a 8811 	msr	BASEPRI, sl
   41b30:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   41b34:	f06f 040a 	mvn.w	r4, #10
   41b38:	e7ee      	b.n	41b18 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   41b3a:	e9cd 6500 	strd	r6, r5, [sp]
   41b3e:	4a0d      	ldr	r2, [pc, #52]	; (41b74 <z_impl_k_poll+0xb0>)
   41b40:	480d      	ldr	r0, [pc, #52]	; (41b78 <z_impl_k_poll+0xb4>)
   41b42:	4651      	mov	r1, sl
   41b44:	f7ff fba2 	bl	4128c <z_pend_curr>
   41b48:	4604      	mov	r4, r0
	__asm__ volatile(
   41b4a:	f04f 0320 	mov.w	r3, #32
   41b4e:	f3ef 8511 	mrs	r5, BASEPRI
   41b52:	f383 8812 	msr	BASEPRI_MAX, r3
   41b56:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   41b5a:	462a      	mov	r2, r5
   41b5c:	4649      	mov	r1, r9
   41b5e:	4640      	mov	r0, r8
   41b60:	f006 fe8e 	bl	48880 <clear_event_registrations>
	__asm__ volatile(
   41b64:	f385 8811 	msr	BASEPRI, r5
   41b68:	f3bf 8f6f 	isb	sy
	return swap_rc;
   41b6c:	e7d4      	b.n	41b18 <z_impl_k_poll+0x54>
   41b6e:	bf00      	nop
   41b70:	20003978 	.word	0x20003978
   41b74:	20000a1c 	.word	0x20000a1c
   41b78:	20003b26 	.word	0x20003b26

00041b7c <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   41b7c:	b538      	push	{r3, r4, r5, lr}
   41b7e:	4603      	mov	r3, r0
	__asm__ volatile(
   41b80:	f04f 0220 	mov.w	r2, #32
   41b84:	f3ef 8511 	mrs	r5, BASEPRI
   41b88:	f382 8812 	msr	BASEPRI_MAX, r2
   41b8c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   41b90:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   41b92:	2101      	movs	r1, #1
   41b94:	6081      	str	r1, [r0, #8]
	return list->head == list;
   41b96:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   41b98:	4283      	cmp	r3, r0
   41b9a:	d106      	bne.n	41baa <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   41b9c:	f385 8811 	msr	BASEPRI, r5
   41ba0:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   41ba4:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   41ba6:	4620      	mov	r0, r4
   41ba8:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   41baa:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   41bae:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   41bb0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   41bb2:	2300      	movs	r3, #0
	node->prev = NULL;
   41bb4:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   41bb8:	f006 fe08 	bl	487cc <signal_poll_event>
	z_reschedule(&lock, key);
   41bbc:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   41bbe:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   41bc0:	4801      	ldr	r0, [pc, #4]	; (41bc8 <z_impl_k_poll_signal_raise+0x4c>)
   41bc2:	f7ff fbbd 	bl	41340 <z_reschedule>
	return rc;
   41bc6:	e7ee      	b.n	41ba6 <z_impl_k_poll_signal_raise+0x2a>
   41bc8:	20003b26 	.word	0x20003b26

00041bcc <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
   41bcc:	460a      	mov	r2, r1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   41bce:	4601      	mov	r1, r0
   41bd0:	4801      	ldr	r0, [pc, #4]	; (41bd8 <k_aligned_alloc+0xc>)
   41bd2:	f006 bea6 	b.w	48922 <z_heap_aligned_alloc>
   41bd6:	bf00      	nop
   41bd8:	20000ca0 	.word	0x20000ca0

00041bdc <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   41bdc:	4b01      	ldr	r3, [pc, #4]	; (41be4 <k_thread_system_pool_assign+0x8>)
   41bde:	6743      	str	r3, [r0, #116]	; 0x74
}
   41be0:	4770      	bx	lr
   41be2:	bf00      	nop
   41be4:	20000ca0 	.word	0x20000ca0

00041be8 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   41be8:	b538      	push	{r3, r4, r5, lr}
   41bea:	4604      	mov	r4, r0
   41bec:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   41bee:	f006 f979 	bl	47ee4 <k_is_in_isr>
   41bf2:	b920      	cbnz	r0, 41bfe <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   41bf4:	4b06      	ldr	r3, [pc, #24]	; (41c10 <z_thread_aligned_alloc+0x28>)
   41bf6:	689b      	ldr	r3, [r3, #8]
   41bf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   41bfa:	b90b      	cbnz	r3, 41c00 <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   41bfc:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   41bfe:	4b05      	ldr	r3, [pc, #20]	; (41c14 <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   41c00:	462a      	mov	r2, r5
   41c02:	4621      	mov	r1, r4
   41c04:	4618      	mov	r0, r3
}
   41c06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   41c0a:	f006 be8a 	b.w	48922 <z_heap_aligned_alloc>
   41c0e:	bf00      	nop
   41c10:	20003978 	.word	0x20003978
   41c14:	20000ca0 	.word	0x20000ca0

00041c18 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   41c18:	4a02      	ldr	r2, [pc, #8]	; (41c24 <boot_banner+0xc>)
   41c1a:	4903      	ldr	r1, [pc, #12]	; (41c28 <boot_banner+0x10>)
   41c1c:	4803      	ldr	r0, [pc, #12]	; (41c2c <boot_banner+0x14>)
   41c1e:	f000 b9d3 	b.w	41fc8 <printk>
   41c22:	bf00      	nop
   41c24:	0004ab83 	.word	0x0004ab83
   41c28:	0004ab50 	.word	0x0004ab50
   41c2c:	0004ab5d 	.word	0x0004ab5d

00041c30 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   41c30:	4770      	bx	lr

00041c32 <zmk_event_manager_raise>:

int zmk_event_manager_raise(zmk_event_t *event) { return zmk_event_manager_handle_from(event, 0); }
   41c32:	2100      	movs	r1, #0
   41c34:	f7e5 beae 	b.w	27994 <zmk_event_manager_handle_from>

00041c38 <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   41c38:	2301      	movs	r3, #1
   41c3a:	fa03 f101 	lsl.w	r1, r3, r1
   41c3e:	6903      	ldr	r3, [r0, #16]
   41c40:	681b      	ldr	r3, [r3, #0]
   41c42:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   41c44:	bf18      	it	ne
   41c46:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   41c4a:	b112      	cbz	r2, 41c52 <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
   41c4c:	6883      	ldr	r3, [r0, #8]
   41c4e:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   41c50:	4718      	bx	r3
   41c52:	6883      	ldr	r3, [r0, #8]
   41c54:	691b      	ldr	r3, [r3, #16]
   41c56:	e7fb      	b.n	41c50 <gpio_pin_set+0x18>

00041c58 <ext_power_generic_get>:
    return data->status;
   41c58:	6903      	ldr	r3, [r0, #16]
}
   41c5a:	7818      	ldrb	r0, [r3, #0]
   41c5c:	4770      	bx	lr

00041c5e <ext_power_generic_enable>:
static int ext_power_generic_enable(const struct device *dev) {
   41c5e:	b510      	push	{r4, lr}
    const struct ext_power_generic_config *config = dev->config;
   41c60:	6843      	ldr	r3, [r0, #4]
    struct ext_power_generic_data *data = dev->data;
   41c62:	6904      	ldr	r4, [r0, #16]
	return gpio_pin_set(spec->port, spec->pin, value);
   41c64:	7919      	ldrb	r1, [r3, #4]
   41c66:	6818      	ldr	r0, [r3, #0]
   41c68:	2201      	movs	r2, #1
   41c6a:	f7ff ffe5 	bl	41c38 <gpio_pin_set>
    if (gpio_pin_set_dt(&config->control, 1)) {
   41c6e:	b928      	cbnz	r0, 41c7c <ext_power_generic_enable+0x1e>
    data->status = true;
   41c70:	2301      	movs	r3, #1
   41c72:	7023      	strb	r3, [r4, #0]
}
   41c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return ext_power_save_state();
   41c78:	f7e5 bf2e 	b.w	27ad8 <ext_power_save_state>
}
   41c7c:	f06f 0004 	mvn.w	r0, #4
   41c80:	bd10      	pop	{r4, pc}

00041c82 <ext_power_generic_disable>:
static int ext_power_generic_disable(const struct device *dev) {
   41c82:	b510      	push	{r4, lr}
    const struct ext_power_generic_config *config = dev->config;
   41c84:	6843      	ldr	r3, [r0, #4]
    struct ext_power_generic_data *data = dev->data;
   41c86:	6904      	ldr	r4, [r0, #16]
   41c88:	7919      	ldrb	r1, [r3, #4]
   41c8a:	6818      	ldr	r0, [r3, #0]
   41c8c:	2200      	movs	r2, #0
   41c8e:	f7ff ffd3 	bl	41c38 <gpio_pin_set>
    if (gpio_pin_set_dt(&config->control, 0)) {
   41c92:	b920      	cbnz	r0, 41c9e <ext_power_generic_disable+0x1c>
    data->status = false;
   41c94:	7020      	strb	r0, [r4, #0]
}
   41c96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return ext_power_save_state();
   41c9a:	f7e5 bf1d 	b.w	27ad8 <ext_power_save_state>
}
   41c9e:	f06f 0004 	mvn.w	r0, #4
   41ca2:	bd10      	pop	{r4, pc}

00041ca4 <behavior_reset_init>:
#if DT_HAS_COMPAT_STATUS_OKAY(DT_DRV_COMPAT)
struct behavior_reset_config {
    int type;
};

static int behavior_reset_init(const struct device *dev) { return 0; };
   41ca4:	2000      	movs	r0, #0
   41ca6:	4770      	bx	lr

00041ca8 <on_keymap_binding_pressed>:

static int on_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                     struct zmk_behavior_binding_event event) {
   41ca8:	b082      	sub	sp, #8
   41caa:	b508      	push	{r3, lr}
   41cac:	a902      	add	r1, sp, #8
   41cae:	e881 000c 	stmia.w	r1, {r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
   41cb2:	6800      	ldr	r0, [r0, #0]
   41cb4:	f7fe fba2 	bl	403fc <z_impl_device_get_binding>
    const struct behavior_reset_config *cfg = dev->config;

    // TODO: Correct magic code for going into DFU?
    // See
    // https://github.com/adafruit/Adafruit_nRF52_Bootloader/blob/d6b28e66053eea467166f44875e3c7ec741cb471/src/main.c#L107
    sys_reboot(cfg->type);
   41cb8:	6843      	ldr	r3, [r0, #4]
   41cba:	6818      	ldr	r0, [r3, #0]
   41cbc:	f7e6 fd64 	bl	28788 <sys_reboot>

00041cc0 <ext_power_enable>:
    if (api->enable == NULL) {
   41cc0:	6883      	ldr	r3, [r0, #8]
   41cc2:	681b      	ldr	r3, [r3, #0]
   41cc4:	b103      	cbz	r3, 41cc8 <ext_power_enable+0x8>
    return api->enable(dev);
   41cc6:	4718      	bx	r3
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_EXT_POWER_ENABLE);
	}
#endif
	compiler_barrier();
	return z_impl_ext_power_enable(dev);
}
   41cc8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   41ccc:	4770      	bx	lr

00041cce <ext_power_disable>:
__syscall int ext_power_disable(const struct device *dev);

static inline int z_impl_ext_power_disable(const struct device *dev) {
    const struct ext_power_api *api = (const struct ext_power_api *)dev->api;

    if (api->disable == NULL) {
   41cce:	6883      	ldr	r3, [r0, #8]
   41cd0:	685b      	ldr	r3, [r3, #4]
   41cd2:	b103      	cbz	r3, 41cd6 <ext_power_disable+0x8>
        return -ENOTSUP;
    }

    return api->disable(dev);
   41cd4:	4718      	bx	r3
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_EXT_POWER_DISABLE);
	}
#endif
	compiler_barrier();
	return z_impl_ext_power_disable(dev);
}
   41cd6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   41cda:	4770      	bx	lr

00041cdc <ext_power_get>:
__syscall int ext_power_get(const struct device *dev);

static inline int z_impl_ext_power_get(const struct device *dev) {
    const struct ext_power_api *api = (const struct ext_power_api *)dev->api;

    if (api->get == NULL) {
   41cdc:	6883      	ldr	r3, [r0, #8]
   41cde:	689b      	ldr	r3, [r3, #8]
   41ce0:	b103      	cbz	r3, 41ce4 <ext_power_get+0x8>
        return -ENOTSUP;
    }

    return api->get(dev);
   41ce2:	4718      	bx	r3
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_EXT_POWER_GET);
	}
#endif
	compiler_barrier();
	return z_impl_ext_power_get(dev);
}
   41ce4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   41ce8:	4770      	bx	lr

00041cea <on_keymap_binding_released>:

static int on_keymap_binding_released(struct zmk_behavior_binding *binding,
                                      struct zmk_behavior_binding_event event) {
   41cea:	b082      	sub	sp, #8
   41cec:	e88d 000c 	stmia.w	sp, {r2, r3}
    return ZMK_BEHAVIOR_OPAQUE;
}
   41cf0:	2000      	movs	r0, #0
   41cf2:	b002      	add	sp, #8
   41cf4:	4770      	bx	lr

00041cf6 <behavior_ext_power_init>:

static int behavior_ext_power_init(const struct device *dev) { return 0; };
   41cf6:	2000      	movs	r0, #0
   41cf8:	4770      	bx	lr

00041cfa <split_listener>:
#include <zmk/events/sensor_event.h>
#include <zmk/hid.h>
#include <zmk/sensors.h>
#include <zmk/endpoints.h>

int split_listener(const zmk_event_t *eh) {
   41cfa:	b508      	push	{r3, lr}
    LOG_DBG("");
    const struct zmk_position_state_changed *pos_ev;
    if ((pos_ev = as_zmk_position_state_changed(eh)) != NULL) {
   41cfc:	f7e5 ff4c 	bl	27b98 <as_zmk_position_state_changed>
   41d00:	4603      	mov	r3, r0
   41d02:	b150      	cbz	r0, 41d1a <split_listener+0x20>
        if (pos_ev->state) {
   41d04:	7a1b      	ldrb	r3, [r3, #8]
            return zmk_split_bt_position_pressed(pos_ev->position);
   41d06:	7900      	ldrb	r0, [r0, #4]
        if (pos_ev->state) {
   41d08:	b11b      	cbz	r3, 41d12 <split_listener+0x18>
        return zmk_split_bt_sensor_triggered(sensor_ev->sensor_index, sensor_ev->channel_data,
                                             sensor_ev->channel_data_size);
    }
#endif /* ZMK_KEYMAP_HAS_SENSORS */
    return ZMK_EV_EVENT_BUBBLE;
}
   41d0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return zmk_split_bt_position_pressed(pos_ev->position);
   41d0e:	f7e6 b871 	b.w	27df4 <zmk_split_bt_position_pressed>
}
   41d12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return zmk_split_bt_position_released(pos_ev->position);
   41d16:	f7e6 b87b 	b.w	27e10 <zmk_split_bt_position_released>
}
   41d1a:	bd08      	pop	{r3, pc}

00041d1c <split_svc_pos_state_ccc>:
}
   41d1c:	4770      	bx	lr

00041d1e <split_svc_num_of_positions>:
                                          void *buf, uint16_t len, uint16_t offset) {
   41d1e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return bt_gatt_attr_read(conn, attrs, buf, len, offset, attrs->user_data, sizeof(uint8_t));
   41d20:	2401      	movs	r4, #1
   41d22:	9402      	str	r4, [sp, #8]
   41d24:	68cc      	ldr	r4, [r1, #12]
   41d26:	9401      	str	r4, [sp, #4]
   41d28:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   41d2c:	9400      	str	r4, [sp, #0]
   41d2e:	f004 fb91 	bl	46454 <bt_gatt_attr_read>
}
   41d32:	b004      	add	sp, #16
   41d34:	bd10      	pop	{r4, pc}

00041d36 <split_svc_run_behavior>:
                                      uint8_t flags) {
   41d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   41d3a:	b092      	sub	sp, #72	; 0x48
   41d3c:	461f      	mov	r7, r3
   41d3e:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    uint16_t end_addr = offset + len;
   41d42:	19dd      	adds	r5, r3, r7
                                      uint8_t flags) {
   41d44:	460c      	mov	r4, r1
    uint16_t end_addr = offset + len;
   41d46:	b2ad      	uxth	r5, r5
    if (end_addr > sizeof(struct zmk_split_run_behavior_payload)) {
   41d48:	2d13      	cmp	r5, #19
    struct zmk_split_run_behavior_payload *payload = attrs->user_data;
   41d4a:	68e4      	ldr	r4, [r4, #12]
                                      uint8_t flags) {
   41d4c:	4611      	mov	r1, r2
    if (end_addr > sizeof(struct zmk_split_run_behavior_payload)) {
   41d4e:	d860      	bhi.n	41e12 <split_svc_run_behavior+0xdc>
    memcpy(payload + offset, buf, len);
   41d50:	2013      	movs	r0, #19
   41d52:	463a      	mov	r2, r7
   41d54:	fb00 4003 	mla	r0, r0, r3, r4
   41d58:	f002 fade 	bl	44318 <memcpy>
    if ((end_addr > sizeof(struct zmk_split_run_behavior_data)) &&
   41d5c:	2d0a      	cmp	r5, #10
   41d5e:	d941      	bls.n	41de4 <split_svc_run_behavior+0xae>
        payload->behavior_dev[end_addr - behavior_dev_offset - 1] == '\0') {
   41d60:	4425      	add	r5, r4
    if ((end_addr > sizeof(struct zmk_split_run_behavior_data)) &&
   41d62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   41d66:	2b00      	cmp	r3, #0
   41d68:	d13c      	bne.n	41de4 <split_svc_run_behavior+0xae>
            .behavior_dev = payload->behavior_dev,
   41d6a:	f104 020a 	add.w	r2, r4, #10
        struct zmk_behavior_binding binding = {
   41d6e:	9203      	str	r2, [sp, #12]
            .param1 = payload->data.param1,
   41d70:	f8d4 2002 	ldr.w	r2, [r4, #2]
        struct zmk_behavior_binding binding = {
   41d74:	9204      	str	r2, [sp, #16]
            .param2 = payload->data.param2,
   41d76:	f8d4 2006 	ldr.w	r2, [r4, #6]
        struct zmk_behavior_binding_event event = {.position = payload->data.position,
   41d7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
   41d7e:	f894 8000 	ldrb.w	r8, [r4]
   41d82:	f006 fc36 	bl	485f2 <z_impl_k_uptime_ticks>
   41d86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   41d8a:	fba0 5c03 	umull	r5, ip, r0, r3
   41d8e:	fb03 cc01 	mla	ip, r3, r1, ip
        if (payload->data.state > 0) {
   41d92:	7862      	ldrb	r2, [r4, #1]
   41d94:	0bed      	lsrs	r5, r5, #15
   41d96:	ea45 454c 	orr.w	r5, r5, ip, lsl #17
   41d9a:	ea4f 3cdc 	mov.w	ip, ip, lsr #15
   41d9e:	e9cd 8507 	strd	r8, r5, [sp, #28]
   41da2:	ac0a      	add	r4, sp, #40	; 0x28
   41da4:	ab06      	add	r3, sp, #24
   41da6:	ae0e      	add	r6, sp, #56	; 0x38
   41da8:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   41dac:	b1f2      	cbz	r2, 41dec <split_svc_run_behavior+0xb6>
            err = behavior_keymap_binding_pressed(&binding, event);
   41dae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   41db0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		union { uintptr_t x; struct zmk_behavior_binding_event val; } parm1 = { .val = event };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_BEHAVIOR_KEYMAP_BINDING_PRESSED);
	}
#endif
	compiler_barrier();
	return z_impl_behavior_keymap_binding_pressed(binding, event);
   41db4:	e9cd 850b 	strd	r8, r5, [sp, #44]	; 0x2c
   41db8:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
   41dbc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   41dc0:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
__syscall int behavior_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                              struct zmk_behavior_binding_event event);

static inline int z_impl_behavior_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                                         struct zmk_behavior_binding_event event) {
    const struct device *dev = device_get_binding(binding->behavior_dev);
   41dc4:	9803      	ldr	r0, [sp, #12]
   41dc6:	f7fe fb19 	bl	403fc <z_impl_device_get_binding>

    if (dev == NULL) {
   41dca:	b158      	cbz	r0, 41de4 <split_svc_run_behavior+0xae>
        return -EINVAL;
    }

    const struct behavior_driver_api *api = (const struct behavior_driver_api *)dev->api;

    if (api->binding_pressed == NULL) {
   41dcc:	6883      	ldr	r3, [r0, #8]
   41dce:	689c      	ldr	r4, [r3, #8]
        return -EINVAL;
    }

    const struct behavior_driver_api *api = (const struct behavior_driver_api *)dev->api;

    if (api->binding_released == NULL) {
   41dd0:	b144      	cbz	r4, 41de4 <split_svc_run_behavior+0xae>
        return -ENOTSUP;
    }

    return api->binding_released(binding, event);
   41dd2:	ab12      	add	r3, sp, #72	; 0x48
   41dd4:	e913 0003 	ldmdb	r3, {r0, r1}
   41dd8:	e88d 0003 	stmia.w	sp, {r0, r1}
   41ddc:	a803      	add	r0, sp, #12
   41dde:	e896 000c 	ldmia.w	r6, {r2, r3}
   41de2:	47a0      	blx	r4
    return len;
   41de4:	4638      	mov	r0, r7
}
   41de6:	b012      	add	sp, #72	; 0x48
   41de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            err = behavior_keymap_binding_released(&binding, event);
   41dec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   41dee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		union { uintptr_t x; struct zmk_behavior_binding_event val; } parm1 = { .val = event };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_BEHAVIOR_KEYMAP_BINDING_RELEASED);
	}
#endif
	compiler_barrier();
	return z_impl_behavior_keymap_binding_released(binding, event);
   41df2:	e9cd 850b 	strd	r8, r5, [sp, #44]	; 0x2c
   41df6:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
   41dfa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   41dfe:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
   41e02:	9803      	ldr	r0, [sp, #12]
   41e04:	f7fe fafa 	bl	403fc <z_impl_device_get_binding>
    if (dev == NULL) {
   41e08:	2800      	cmp	r0, #0
   41e0a:	d0eb      	beq.n	41de4 <split_svc_run_behavior+0xae>
    if (api->binding_released == NULL) {
   41e0c:	6883      	ldr	r3, [r0, #8]
   41e0e:	68dc      	ldr	r4, [r3, #12]
   41e10:	e7de      	b.n	41dd0 <split_svc_run_behavior+0x9a>
        return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   41e12:	f06f 0006 	mvn.w	r0, #6
   41e16:	e7e6      	b.n	41de6 <split_svc_run_behavior+0xb0>

00041e18 <security_changed>:
static void security_changed(struct bt_conn *conn, bt_security_t level, enum bt_security_err err) {
   41e18:	b500      	push	{lr}
   41e1a:	b089      	sub	sp, #36	; 0x24
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   41e1c:	f003 fa78 	bl	45310 <bt_conn_get_dst>
   41e20:	4669      	mov	r1, sp
   41e22:	f7e6 f843 	bl	27eac <bt_addr_le_to_str.constprop.0.isra.0>
}
   41e26:	b009      	add	sp, #36	; 0x24
   41e28:	f85d fb04 	ldr.w	pc, [sp], #4

00041e2c <le_param_updated>:
                             uint16_t timeout) {
   41e2c:	b500      	push	{lr}
   41e2e:	b089      	sub	sp, #36	; 0x24
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   41e30:	f003 fa6e 	bl	45310 <bt_conn_get_dst>
   41e34:	4669      	mov	r1, sp
   41e36:	f7e6 f839 	bl	27eac <bt_addr_le_to_str.constprop.0.isra.0>
}
   41e3a:	b009      	add	sp, #36	; 0x24
   41e3c:	f85d fb04 	ldr.w	pc, [sp], #4

00041e40 <raise_usb_status_changed_event>:
static void raise_usb_status_changed_event(struct k_work *_work) {
   41e40:	b508      	push	{r3, lr}
    ZMK_EVENT_RAISE(new_zmk_usb_conn_state_changed(
   41e42:	f7e6 f8fd 	bl	28040 <zmk_usb_get_conn_state>
   41e46:	f7e5 feb1 	bl	27bac <new_zmk_usb_conn_state_changed>
}
   41e4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ZMK_EVENT_RAISE(new_zmk_usb_conn_state_changed(
   41e4e:	f7ff bef0 	b.w	41c32 <zmk_event_manager_raise>

00041e52 <u8_to_dec>:
 */

#include <zephyr/sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   41e52:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   41e54:	2364      	movs	r3, #100	; 0x64
{
   41e56:	4605      	mov	r5, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   41e58:	2604      	movs	r6, #4
	uint8_t num_digits = 0;
   41e5a:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   41e5c:	270a      	movs	r7, #10
	while (buflen > 0 && divisor > 0) {
   41e5e:	b969      	cbnz	r1, 41e7c <u8_to_dec+0x2a>
	if (buflen) {
		*buf = '\0';
	}

	return num_digits;
}
   41e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   41e62:	429a      	cmp	r2, r3
   41e64:	fbb2 f4f3 	udiv	r4, r2, r3
   41e68:	d20c      	bcs.n	41e84 <u8_to_dec+0x32>
   41e6a:	2b01      	cmp	r3, #1
   41e6c:	d00a      	beq.n	41e84 <u8_to_dec+0x32>
   41e6e:	b948      	cbnz	r0, 41e84 <u8_to_dec+0x32>
		value -= digit * divisor;
   41e70:	fb03 2214 	mls	r2, r3, r4, r2
   41e74:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   41e76:	240a      	movs	r4, #10
   41e78:	fbb3 f3f4 	udiv	r3, r3, r4
	while (buflen > 0 && divisor > 0) {
   41e7c:	3e01      	subs	r6, #1
   41e7e:	d1f0      	bne.n	41e62 <u8_to_dec+0x10>
		*buf = '\0';
   41e80:	702e      	strb	r6, [r5, #0]
	return num_digits;
   41e82:	e7ed      	b.n	41e60 <u8_to_dec+0xe>
			*buf = (char)digit + '0';
   41e84:	3430      	adds	r4, #48	; 0x30
   41e86:	f805 4b01 	strb.w	r4, [r5], #1
			buflen--;
   41e8a:	fbb2 f4f3 	udiv	r4, r2, r3
   41e8e:	3901      	subs	r1, #1
   41e90:	fb03 2214 	mls	r2, r3, r4, r2
			num_digits++;
   41e94:	3001      	adds	r0, #1
		divisor /= 10;
   41e96:	fbb3 f3f7 	udiv	r3, r3, r7
			buflen--;
   41e9a:	b2c9      	uxtb	r1, r1
			num_digits++;
   41e9c:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   41e9e:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   41ea0:	b2db      	uxtb	r3, r3
   41ea2:	e7dc      	b.n	41e5e <u8_to_dec+0xc>

00041ea4 <char2hex>:
#include <errno.h>
#include <zephyr/sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   41ea4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   41ea8:	b2db      	uxtb	r3, r3
   41eaa:	2b09      	cmp	r3, #9
   41eac:	d802      	bhi.n	41eb4 <char2hex+0x10>
		*x = c - '0';
   41eae:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   41eb0:	2000      	movs	r0, #0
   41eb2:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   41eb4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   41eb8:	2b05      	cmp	r3, #5
   41eba:	d802      	bhi.n	41ec2 <char2hex+0x1e>
		*x = c - 'a' + 10;
   41ebc:	3857      	subs	r0, #87	; 0x57
		*x = c - 'A' + 10;
   41ebe:	b2c3      	uxtb	r3, r0
   41ec0:	e7f5      	b.n	41eae <char2hex+0xa>
	} else if (c >= 'A' && c <= 'F') {
   41ec2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   41ec6:	2b05      	cmp	r3, #5
   41ec8:	d801      	bhi.n	41ece <char2hex+0x2a>
		*x = c - 'A' + 10;
   41eca:	3837      	subs	r0, #55	; 0x37
   41ecc:	e7f7      	b.n	41ebe <char2hex+0x1a>
		return -EINVAL;
   41ece:	f06f 0015 	mvn.w	r0, #21
}
   41ed2:	4770      	bx	lr

00041ed4 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   41ed4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   41ed6:	4605      	mov	r5, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   41ed8:	f001 0001 	and.w	r0, r1, #1
   41edc:	eb00 0651 	add.w	r6, r0, r1, lsr #1
   41ee0:	429e      	cmp	r6, r3
   41ee2:	ea4f 0751 	mov.w	r7, r1, lsr #1
   41ee6:	d903      	bls.n	41ef0 <hex2bin+0x1c>
		return 0;
   41ee8:	2600      	movs	r6, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   41eea:	4630      	mov	r0, r6
   41eec:	b003      	add	sp, #12
   41eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   41ef0:	b158      	cbz	r0, 41f0a <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   41ef2:	7828      	ldrb	r0, [r5, #0]
   41ef4:	f10d 0107 	add.w	r1, sp, #7
   41ef8:	f7ff ffd4 	bl	41ea4 <char2hex>
   41efc:	2800      	cmp	r0, #0
   41efe:	dbf3      	blt.n	41ee8 <hex2bin+0x14>
		buf[0] = dec;
   41f00:	f89d 3007 	ldrb.w	r3, [sp, #7]
   41f04:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   41f08:	3501      	adds	r5, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   41f0a:	3501      	adds	r5, #1
   41f0c:	4417      	add	r7, r2
   41f0e:	42ba      	cmp	r2, r7
   41f10:	d0eb      	beq.n	41eea <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   41f12:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   41f16:	f10d 0107 	add.w	r1, sp, #7
   41f1a:	f7ff ffc3 	bl	41ea4 <char2hex>
   41f1e:	2800      	cmp	r0, #0
   41f20:	dbe2      	blt.n	41ee8 <hex2bin+0x14>
		buf[i] = dec << 4;
   41f22:	f89d 4007 	ldrb.w	r4, [sp, #7]
   41f26:	0124      	lsls	r4, r4, #4
   41f28:	b2e4      	uxtb	r4, r4
   41f2a:	7014      	strb	r4, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   41f2c:	f815 0b02 	ldrb.w	r0, [r5], #2
   41f30:	f7ff ffb8 	bl	41ea4 <char2hex>
   41f34:	2800      	cmp	r0, #0
   41f36:	dbd7      	blt.n	41ee8 <hex2bin+0x14>
		buf[i] += dec;
   41f38:	f89d 3007 	ldrb.w	r3, [sp, #7]
   41f3c:	441c      	add	r4, r3
   41f3e:	f802 4b01 	strb.w	r4, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   41f42:	e7e4      	b.n	41f0e <hex2bin+0x3a>

00041f44 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   41f44:	4603      	mov	r3, r0
   41f46:	b140      	cbz	r0, 41f5a <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   41f48:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   41f4a:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   41f4e:	2a02      	cmp	r2, #2
   41f50:	d006      	beq.n	41f60 <sys_notify_validate+0x1c>
   41f52:	2a03      	cmp	r2, #3
   41f54:	d004      	beq.n	41f60 <sys_notify_validate+0x1c>
   41f56:	2a01      	cmp	r2, #1
   41f58:	d005      	beq.n	41f66 <sys_notify_validate+0x22>
   41f5a:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   41f5e:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   41f60:	681a      	ldr	r2, [r3, #0]
   41f62:	2a00      	cmp	r2, #0
   41f64:	d0f9      	beq.n	41f5a <sys_notify_validate+0x16>
		notify->result = 0;
   41f66:	2000      	movs	r0, #0
   41f68:	6098      	str	r0, [r3, #8]
   41f6a:	4770      	bx	lr

00041f6c <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   41f6c:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   41f6e:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   41f70:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
   41f72:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
   41f76:	2a02      	cmp	r2, #2
{
   41f78:	4603      	mov	r3, r0
	switch (method) {
   41f7a:	f04f 0400 	mov.w	r4, #0
   41f7e:	d007      	beq.n	41f90 <sys_notify_finalize+0x24>
   41f80:	2a03      	cmp	r2, #3
   41f82:	d002      	beq.n	41f8a <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   41f84:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   41f86:	2000      	movs	r0, #0
   41f88:	e001      	b.n	41f8e <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   41f8a:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   41f8c:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   41f8e:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   41f90:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   41f92:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   41f94:	2800      	cmp	r0, #0
   41f96:	d0f6      	beq.n	41f86 <sys_notify_finalize+0x1a>
	return z_impl_k_poll_signal_raise(sig, result);
   41f98:	f7ff fdf0 	bl	41b7c <z_impl_k_poll_signal_raise>
   41f9c:	e7f3      	b.n	41f86 <sys_notify_finalize+0x1a>

00041f9e <arch_printk_char_out>:
}
   41f9e:	2000      	movs	r0, #0
   41fa0:	4770      	bx	lr

00041fa2 <str_out>:
{
   41fa2:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   41fa4:	688a      	ldr	r2, [r1, #8]
   41fa6:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   41fa8:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   41faa:	b114      	cbz	r4, 41fb2 <str_out+0x10>
   41fac:	684b      	ldr	r3, [r1, #4]
   41fae:	4293      	cmp	r3, r2
   41fb0:	dc01      	bgt.n	41fb6 <str_out+0x14>
		ctx->count++;
   41fb2:	608d      	str	r5, [r1, #8]
}
   41fb4:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   41fb6:	3b01      	subs	r3, #1
   41fb8:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   41fba:	bf08      	it	eq
   41fbc:	2200      	moveq	r2, #0
   41fbe:	608d      	str	r5, [r1, #8]
   41fc0:	bf0c      	ite	eq
   41fc2:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   41fc4:	54a0      	strbne	r0, [r4, r2]
   41fc6:	e7f5      	b.n	41fb4 <str_out+0x12>

00041fc8 <printk>:
{
   41fc8:	b40f      	push	{r0, r1, r2, r3}
   41fca:	b507      	push	{r0, r1, r2, lr}
   41fcc:	a904      	add	r1, sp, #16
   41fce:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   41fd2:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   41fd4:	f7e6 f882 	bl	280dc <vprintk>
}
   41fd8:	b003      	add	sp, #12
   41fda:	f85d eb04 	ldr.w	lr, [sp], #4
   41fde:	b004      	add	sp, #16
   41fe0:	4770      	bx	lr

00041fe2 <snprintk>:
{
   41fe2:	b40c      	push	{r2, r3}
   41fe4:	b507      	push	{r0, r1, r2, lr}
   41fe6:	ab04      	add	r3, sp, #16
   41fe8:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   41fec:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   41fee:	f7e6 f883 	bl	280f8 <vsnprintk>
}
   41ff2:	b003      	add	sp, #12
   41ff4:	f85d eb04 	ldr.w	lr, [sp], #4
   41ff8:	b002      	add	sp, #8
   41ffa:	4770      	bx	lr

00041ffc <sys_slist_find_and_remove>:
	return list->head;
   41ffc:	6803      	ldr	r3, [r0, #0]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   41ffe:	2200      	movs	r2, #0
   42000:	b90b      	cbnz	r3, 42006 <sys_slist_find_and_remove+0xa>
   42002:	4618      	mov	r0, r3
   42004:	4770      	bx	lr
   42006:	428b      	cmp	r3, r1
   42008:	d110      	bne.n	4202c <sys_slist_find_and_remove+0x30>
	return node->next;
   4200a:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   4200c:	b942      	cbnz	r2, 42020 <sys_slist_find_and_remove+0x24>
   4200e:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   42010:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   42012:	4291      	cmp	r1, r2
   42014:	d100      	bne.n	42018 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   42016:	6043      	str	r3, [r0, #4]
	parent->next = child;
   42018:	2300      	movs	r3, #0
   4201a:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4201c:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   4201e:	4770      	bx	lr
	parent->next = child;
   42020:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   42022:	6843      	ldr	r3, [r0, #4]
   42024:	4299      	cmp	r1, r3
	list->tail = node;
   42026:	bf08      	it	eq
   42028:	6042      	streq	r2, [r0, #4]
}
   4202a:	e7f5      	b.n	42018 <sys_slist_find_and_remove+0x1c>
	return node->next;
   4202c:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4202e:	681b      	ldr	r3, [r3, #0]
   42030:	e7e6      	b.n	42000 <sys_slist_find_and_remove+0x4>

00042032 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   42032:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   42034:	f013 0307 	ands.w	r3, r3, #7
   42038:	d105      	bne.n	42046 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   4203a:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   4203c:	2b00      	cmp	r3, #0
   4203e:	bf0c      	ite	eq
   42040:	2000      	moveq	r0, #0
   42042:	2003      	movne	r0, #3
   42044:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   42046:	2b02      	cmp	r3, #2
   42048:	d105      	bne.n	42056 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   4204a:	8b40      	ldrh	r0, [r0, #26]
   4204c:	fab0 f080 	clz	r0, r0
   42050:	0940      	lsrs	r0, r0, #5
   42052:	0080      	lsls	r0, r0, #2
   42054:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   42056:	2b01      	cmp	r3, #1
   42058:	d105      	bne.n	42066 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   4205a:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   4205c:	2b00      	cmp	r3, #0
   4205e:	bf0c      	ite	eq
   42060:	2000      	moveq	r0, #0
   42062:	2005      	movne	r0, #5
   42064:	4770      	bx	lr
	int evt = EVT_NOP;
   42066:	2000      	movs	r0, #0
}
   42068:	4770      	bx	lr

0004206a <validate_args>:
{
   4206a:	b510      	push	{r4, lr}
   4206c:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   4206e:	b100      	cbz	r0, 42072 <validate_args+0x8>
   42070:	b911      	cbnz	r1, 42078 <validate_args+0xe>
		return -EINVAL;
   42072:	f06f 0015 	mvn.w	r0, #21
}
   42076:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   42078:	1d08      	adds	r0, r1, #4
   4207a:	f7ff ff63 	bl	41f44 <sys_notify_validate>
	if ((rv == 0)
   4207e:	2800      	cmp	r0, #0
   42080:	d1f9      	bne.n	42076 <validate_args+0xc>
	    && ((cli->notify.flags
   42082:	68a3      	ldr	r3, [r4, #8]
   42084:	2b03      	cmp	r3, #3
   42086:	d9f6      	bls.n	42076 <validate_args+0xc>
   42088:	e7f3      	b.n	42072 <validate_args+0x8>

0004208a <notify_one>:
{
   4208a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4208e:	460d      	mov	r5, r1
   42090:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   42092:	4619      	mov	r1, r3
   42094:	1d28      	adds	r0, r5, #4
{
   42096:	4690      	mov	r8, r2
   42098:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   4209a:	f7ff ff67 	bl	41f6c <sys_notify_finalize>
	if (cb) {
   4209e:	4604      	mov	r4, r0
   420a0:	b138      	cbz	r0, 420b2 <notify_one+0x28>
		cb(mgr, cli, state, res);
   420a2:	4633      	mov	r3, r6
   420a4:	4642      	mov	r2, r8
   420a6:	4629      	mov	r1, r5
   420a8:	4638      	mov	r0, r7
   420aa:	46a4      	mov	ip, r4
}
   420ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   420b0:	4760      	bx	ip
}
   420b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000420b6 <transition_complete>:
{
   420b6:	b410      	push	{r4}
	__asm__ volatile(
   420b8:	f04f 0420 	mov.w	r4, #32
   420bc:	f3ef 8211 	mrs	r2, BASEPRI
   420c0:	f384 8812 	msr	BASEPRI_MAX, r4
   420c4:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   420c8:	6141      	str	r1, [r0, #20]
}
   420ca:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   420cc:	2101      	movs	r1, #1
   420ce:	f7e6 b829 	b.w	28124 <process_event>

000420d2 <onoff_manager_init>:
{
   420d2:	b538      	push	{r3, r4, r5, lr}
   420d4:	460c      	mov	r4, r1
	if ((mgr == NULL)
   420d6:	4605      	mov	r5, r0
   420d8:	b158      	cbz	r0, 420f2 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   420da:	b151      	cbz	r1, 420f2 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   420dc:	680b      	ldr	r3, [r1, #0]
   420de:	b143      	cbz	r3, 420f2 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   420e0:	684b      	ldr	r3, [r1, #4]
   420e2:	b133      	cbz	r3, 420f2 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   420e4:	221c      	movs	r2, #28
   420e6:	2100      	movs	r1, #0
   420e8:	f002 f921 	bl	4432e <memset>
   420ec:	612c      	str	r4, [r5, #16]
	return 0;
   420ee:	2000      	movs	r0, #0
}
   420f0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   420f2:	f06f 0015 	mvn.w	r0, #21
   420f6:	e7fb      	b.n	420f0 <onoff_manager_init+0x1e>

000420f8 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   420f8:	b570      	push	{r4, r5, r6, lr}
   420fa:	4605      	mov	r5, r0
   420fc:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   420fe:	f7ff ffb4 	bl	4206a <validate_args>

	if (rv < 0) {
   42102:	1e04      	subs	r4, r0, #0
   42104:	db15      	blt.n	42132 <onoff_request+0x3a>
   42106:	f04f 0320 	mov.w	r3, #32
   4210a:	f3ef 8211 	mrs	r2, BASEPRI
   4210e:	f383 8812 	msr	BASEPRI_MAX, r3
   42112:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   42116:	8b6b      	ldrh	r3, [r5, #26]
   42118:	8b2c      	ldrh	r4, [r5, #24]
   4211a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   4211e:	428b      	cmp	r3, r1
   42120:	f004 0407 	and.w	r4, r4, #7
   42124:	d107      	bne.n	42136 <onoff_request+0x3e>
	__asm__ volatile(
   42126:	f382 8811 	msr	BASEPRI, r2
   4212a:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   4212e:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   42132:	4620      	mov	r0, r4
   42134:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   42136:	2c02      	cmp	r4, #2
   42138:	d10c      	bne.n	42154 <onoff_request+0x5c>
		mgr->refs += 1U;
   4213a:	3301      	adds	r3, #1
   4213c:	836b      	strh	r3, [r5, #26]
   4213e:	f382 8811 	msr	BASEPRI, r2
   42142:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   42146:	2300      	movs	r3, #0
   42148:	4622      	mov	r2, r4
   4214a:	4631      	mov	r1, r6
   4214c:	4628      	mov	r0, r5
   4214e:	f7ff ff9c 	bl	4208a <notify_one>
   42152:	e7ee      	b.n	42132 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   42154:	2c06      	cmp	r4, #6
   42156:	d814      	bhi.n	42182 <onoff_request+0x8a>
   42158:	e8df f004 	tbb	[pc, r4]
   4215c:	13131304 	.word	0x13131304
   42160:	1a04      	.short	0x1a04
   42162:	04          	.byte	0x04
   42163:	00          	.byte	0x00
	parent->next = child;
   42164:	2300      	movs	r3, #0
   42166:	6033      	str	r3, [r6, #0]
	return list->tail;
   42168:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   4216a:	b93b      	cbnz	r3, 4217c <onoff_request+0x84>
	list->head = node;
   4216c:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   42170:	b9ac      	cbnz	r4, 4219e <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   42172:	2102      	movs	r1, #2
   42174:	4628      	mov	r0, r5
   42176:	f7e5 ffd5 	bl	28124 <process_event>
   4217a:	e7da      	b.n	42132 <onoff_request+0x3a>
	parent->next = child;
   4217c:	601e      	str	r6, [r3, #0]
	list->tail = node;
   4217e:	606e      	str	r6, [r5, #4]
}
   42180:	e7f6      	b.n	42170 <onoff_request+0x78>
   42182:	f382 8811 	msr	BASEPRI, r2
   42186:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   4218a:	f06f 0404 	mvn.w	r4, #4
   4218e:	e7d0      	b.n	42132 <onoff_request+0x3a>
   42190:	f382 8811 	msr	BASEPRI, r2
   42194:	f3bf 8f6f 	isb	sy
   42198:	f06f 0485 	mvn.w	r4, #133	; 0x85
   4219c:	e7c9      	b.n	42132 <onoff_request+0x3a>
   4219e:	f382 8811 	msr	BASEPRI, r2
   421a2:	f3bf 8f6f 	isb	sy
		if (notify) {
   421a6:	e7c4      	b.n	42132 <onoff_request+0x3a>

000421a8 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   421a8:	b510      	push	{r4, lr}
	__asm__ volatile(
   421aa:	f04f 0320 	mov.w	r3, #32
   421ae:	f3ef 8211 	mrs	r2, BASEPRI
   421b2:	f383 8812 	msr	BASEPRI_MAX, r3
   421b6:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   421ba:	8b04      	ldrh	r4, [r0, #24]
   421bc:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   421c0:	2c02      	cmp	r4, #2
   421c2:	d00a      	beq.n	421da <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   421c4:	2c01      	cmp	r4, #1
   421c6:	bf0c      	ite	eq
   421c8:	f06f 0004 	mvneq.w	r0, #4
   421cc:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   421d0:	f382 8811 	msr	BASEPRI, r2
   421d4:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   421d8:	e008      	b.n	421ec <onoff_release+0x44>
	mgr->refs -= 1U;
   421da:	8b43      	ldrh	r3, [r0, #26]
   421dc:	3b01      	subs	r3, #1
   421de:	b29b      	uxth	r3, r3
   421e0:	8343      	strh	r3, [r0, #26]
	if (stop) {
   421e2:	b923      	cbnz	r3, 421ee <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   421e4:	4621      	mov	r1, r4
   421e6:	f7e5 ff9d 	bl	28124 <process_event>
	int rv = state;
   421ea:	4620      	mov	r0, r4
}
   421ec:	bd10      	pop	{r4, pc}
	int rv = state;
   421ee:	4620      	mov	r0, r4
   421f0:	e7ee      	b.n	421d0 <onoff_release+0x28>

000421f2 <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
   421f2:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
   421f4:	b1b0      	cbz	r0, 42224 <onoff_cancel+0x32>
   421f6:	b1a9      	cbz	r1, 42224 <onoff_cancel+0x32>
	__asm__ volatile(
   421f8:	f04f 0220 	mov.w	r2, #32
   421fc:	f3ef 8511 	mrs	r5, BASEPRI
   42200:	f382 8812 	msr	BASEPRI_MAX, r2
   42204:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   42208:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
   4220a:	f7ff fef7 	bl	41ffc <sys_slist_find_and_remove>
   4220e:	b130      	cbz	r0, 4221e <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
   42210:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
   42214:	f385 8811 	msr	BASEPRI, r5
   42218:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
   4221c:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
   4221e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   42222:	e7f7      	b.n	42214 <onoff_cancel+0x22>
		return -EINVAL;
   42224:	f06f 0015 	mvn.w	r0, #21
   42228:	e7f8      	b.n	4221c <onoff_cancel+0x2a>

0004222a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   4222a:	4604      	mov	r4, r0
   4222c:	b508      	push	{r3, lr}
   4222e:	4608      	mov	r0, r1
   42230:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   42232:	461a      	mov	r2, r3
   42234:	47a0      	blx	r4
	return z_impl_z_current_get();
   42236:	f7ff f9bd 	bl	415b4 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   4223a:	f7e8 fa95 	bl	2a768 <z_impl_k_thread_abort>

0004223e <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   4223e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   42242:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   42244:	0840      	lsrs	r0, r0, #1
   42246:	4770      	bx	lr

00042248 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   42248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4224a:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   4224c:	f7ff fff7 	bl	4223e <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   42250:	fab0 f080 	clz	r0, r0
   42254:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   42258:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   4225c:	00ca      	lsls	r2, r1, #3
   4225e:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   42262:	1d17      	adds	r7, r2, #4
{
   42264:	460c      	mov	r4, r1
   42266:	3206      	adds	r2, #6
   42268:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   4226a:	b956      	cbnz	r6, 42282 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   4226c:	2101      	movs	r1, #1
   4226e:	fa01 f000 	lsl.w	r0, r1, r0
   42272:	68d9      	ldr	r1, [r3, #12]
   42274:	4301      	orrs	r1, r0
   42276:	60d9      	str	r1, [r3, #12]
		b->next = c;
   42278:	f8cc 4010 	str.w	r4, [ip, #16]
   4227c:	53dd      	strh	r5, [r3, r7]
   4227e:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   42280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   42282:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   42284:	3104      	adds	r1, #4
   42286:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   42288:	53d8      	strh	r0, [r3, r7]
   4228a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   4228e:	529e      	strh	r6, [r3, r2]
   42290:	80c5      	strh	r5, [r0, #6]
   42292:	525d      	strh	r5, [r3, r1]
   42294:	e7f4      	b.n	42280 <free_list_add+0x38>

00042296 <free_list_remove_bidx>:
{
   42296:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   42298:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   4229c:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   4229e:	4299      	cmp	r1, r3
   422a0:	f102 0104 	add.w	r1, r2, #4
   422a4:	d10a      	bne.n	422bc <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   422a6:	2301      	movs	r3, #1
   422a8:	fa03 f202 	lsl.w	r2, r3, r2
   422ac:	68c3      	ldr	r3, [r0, #12]
   422ae:	ea23 0302 	bic.w	r3, r3, r2
   422b2:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   422b4:	2300      	movs	r3, #0
   422b6:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   422ba:	bd10      	pop	{r4, pc}
   422bc:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   422be:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   422c2:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   422c6:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   422ca:	80cb      	strh	r3, [r1, #6]
   422cc:	8082      	strh	r2, [r0, #4]
}
   422ce:	e7f4      	b.n	422ba <free_list_remove_bidx+0x24>

000422d0 <free_list_remove>:
{
   422d0:	b508      	push	{r3, lr}
   422d2:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   422d4:	f7ff ffb3 	bl	4223e <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   422d8:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   422dc:	f1c2 021f 	rsb	r2, r2, #31
   422e0:	4618      	mov	r0, r3
}
   422e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   422e6:	f7ff bfd6 	b.w	42296 <free_list_remove_bidx>

000422ea <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   422ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   422ee:	fab1 f581 	clz	r5, r1
   422f2:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   422f6:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
   422fa:	4603      	mov	r3, r0
	if (b->next) {
   422fc:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   42300:	460e      	mov	r6, r1
	if (b->next) {
   42302:	b1c2      	cbz	r2, 42336 <alloc_chunk+0x4c>
   42304:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   42306:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   4230a:	4618      	mov	r0, r3
   4230c:	4621      	mov	r1, r4
   4230e:	f7ff ff96 	bl	4223e <chunk_size>
   42312:	42b0      	cmp	r0, r6
   42314:	d306      	bcc.n	42324 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   42316:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   42318:	4618      	mov	r0, r3
   4231a:	f7ff ffbc 	bl	42296 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   4231e:	4620      	mov	r0, r4
   42320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   42324:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   42328:	3f01      	subs	r7, #1
   4232a:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
   4232c:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   42330:	d001      	beq.n	42336 <alloc_chunk+0x4c>
   42332:	4282      	cmp	r2, r0
   42334:	d1e7      	bne.n	42306 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   42336:	f1c5 0220 	rsb	r2, r5, #32
   4233a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   4233e:	4094      	lsls	r4, r2
   42340:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   42342:	4014      	ands	r4, r2
   42344:	d0eb      	beq.n	4231e <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   42346:	fa94 f2a4 	rbit	r2, r4
   4234a:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   4234e:	1d11      	adds	r1, r2, #4
   42350:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   42354:	4621      	mov	r1, r4
   42356:	e7df      	b.n	42318 <alloc_chunk+0x2e>

00042358 <merge_chunks>:
{
   42358:	b538      	push	{r3, r4, r5, lr}
   4235a:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   4235c:	f7ff ff6f 	bl	4223e <chunk_size>
{
   42360:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   42362:	4604      	mov	r4, r0
   42364:	4611      	mov	r1, r2
   42366:	4618      	mov	r0, r3
   42368:	f7ff ff69 	bl	4223e <chunk_size>
		((uint16_t *)cmem)[f] = val;
   4236c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   42370:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   42372:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   42374:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   42376:	4618      	mov	r0, r3
   42378:	f7ff ff61 	bl	4223e <chunk_size>
	void *cmem = &buf[c];
   4237c:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   4237e:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   42382:	bd38      	pop	{r3, r4, r5, pc}

00042384 <split_chunks>:
{
   42384:	b538      	push	{r3, r4, r5, lr}
   42386:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   42388:	f7ff ff59 	bl	4223e <chunk_size>
{
   4238c:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   4238e:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   42390:	1a51      	subs	r1, r2, r1
   42392:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   42396:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   42398:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   4239a:	8060      	strh	r0, [r4, #2]
   4239c:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   423a0:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   423a2:	8044      	strh	r4, [r0, #2]
   423a4:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   423a8:	4618      	mov	r0, r3
   423aa:	4611      	mov	r1, r2
   423ac:	f7ff ff47 	bl	4223e <chunk_size>
	void *cmem = &buf[c];
   423b0:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   423b2:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   423b6:	bd38      	pop	{r3, r4, r5, pc}

000423b8 <free_chunk>:
{
   423b8:	b538      	push	{r3, r4, r5, lr}
   423ba:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   423bc:	f7ff ff3f 	bl	4223e <chunk_size>
   423c0:	460c      	mov	r4, r1
   423c2:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   423c4:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   423c8:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   423ca:	07da      	lsls	r2, r3, #31
   423cc:	d40a      	bmi.n	423e4 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   423ce:	4628      	mov	r0, r5
   423d0:	f7ff ff7e 	bl	422d0 <free_list_remove>
	return c + chunk_size(h, c);
   423d4:	4621      	mov	r1, r4
   423d6:	4628      	mov	r0, r5
   423d8:	f7ff ff31 	bl	4223e <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   423dc:	1822      	adds	r2, r4, r0
   423de:	4628      	mov	r0, r5
   423e0:	f7ff ffba 	bl	42358 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   423e4:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   423e8:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   423ea:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   423ee:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   423f0:	07db      	lsls	r3, r3, #31
   423f2:	d40c      	bmi.n	4240e <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   423f4:	4628      	mov	r0, r5
   423f6:	f7ff ff6b 	bl	422d0 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   423fa:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   423fe:	4622      	mov	r2, r4
   42400:	1a61      	subs	r1, r4, r1
   42402:	4628      	mov	r0, r5
   42404:	f7ff ffa8 	bl	42358 <merge_chunks>
   42408:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   4240c:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   4240e:	4621      	mov	r1, r4
   42410:	4628      	mov	r0, r5
}
   42412:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   42416:	f7ff bf17 	b.w	42248 <free_list_add>

0004241a <sys_heap_free>:
	if (mem == NULL) {
   4241a:	b161      	cbz	r1, 42436 <sys_heap_free+0x1c>
   4241c:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   4241e:	3904      	subs	r1, #4
   42420:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   42422:	f021 0307 	bic.w	r3, r1, #7
   42426:	4403      	add	r3, r0
	free_chunk(h, c);
   42428:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   4242a:	885a      	ldrh	r2, [r3, #2]
   4242c:	f022 0201 	bic.w	r2, r2, #1
   42430:	805a      	strh	r2, [r3, #2]
   42432:	f7ff bfc1 	b.w	423b8 <free_chunk>
}
   42436:	4770      	bx	lr

00042438 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   42438:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   4243a:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   4243c:	b909      	cbnz	r1, 42442 <sys_heap_alloc+0xa>
		return NULL;
   4243e:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   42440:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   42442:	68ab      	ldr	r3, [r5, #8]
   42444:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   42448:	d9f9      	bls.n	4243e <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   4244a:	310b      	adds	r1, #11
   4244c:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   4244e:	4621      	mov	r1, r4
   42450:	4628      	mov	r0, r5
   42452:	f7ff ff4a 	bl	422ea <alloc_chunk>
	if (c == 0U) {
   42456:	4606      	mov	r6, r0
   42458:	2800      	cmp	r0, #0
   4245a:	d0f0      	beq.n	4243e <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   4245c:	4601      	mov	r1, r0
   4245e:	4628      	mov	r0, r5
   42460:	f7ff feed 	bl	4223e <chunk_size>
   42464:	42a0      	cmp	r0, r4
   42466:	d907      	bls.n	42478 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   42468:	1932      	adds	r2, r6, r4
   4246a:	4628      	mov	r0, r5
   4246c:	f7ff ff8a 	bl	42384 <split_chunks>
		free_list_add(h, c + chunk_sz);
   42470:	4611      	mov	r1, r2
   42472:	4628      	mov	r0, r5
   42474:	f7ff fee8 	bl	42248 <free_list_add>
	void *cmem = &buf[c];
   42478:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   4247c:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   4247e:	8853      	ldrh	r3, [r2, #2]
   42480:	f043 0301 	orr.w	r3, r3, #1
   42484:	8053      	strh	r3, [r2, #2]
   42486:	3004      	adds	r0, #4
	return mem;
   42488:	e7da      	b.n	42440 <sys_heap_alloc+0x8>

0004248a <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   4248a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   4248e:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   42492:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
   42496:	6806      	ldr	r6, [r0, #0]
{
   42498:	460f      	mov	r7, r1
   4249a:	4614      	mov	r4, r2
	if (align != rew) {
   4249c:	d00c      	beq.n	424b8 <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   4249e:	424b      	negs	r3, r1
   424a0:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   424a2:	2b04      	cmp	r3, #4
   424a4:	461a      	mov	r2, r3
   424a6:	464f      	mov	r7, r9
   424a8:	bf28      	it	cs
   424aa:	2204      	movcs	r2, #4
	rew = align & -align;
   424ac:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   424ae:	b964      	cbnz	r4, 424ca <sys_heap_aligned_alloc+0x40>
		return NULL;
   424b0:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   424b2:	4628      	mov	r0, r5
   424b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   424b8:	2904      	cmp	r1, #4
   424ba:	d804      	bhi.n	424c6 <sys_heap_aligned_alloc+0x3c>
}
   424bc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   424c0:	4611      	mov	r1, r2
   424c2:	f7ff bfb9 	b.w	42438 <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   424c6:	2204      	movs	r2, #4
   424c8:	e7f1      	b.n	424ae <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   424ca:	68b3      	ldr	r3, [r6, #8]
   424cc:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   424d0:	d9ee      	bls.n	424b0 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   424d2:	f104 010b 	add.w	r1, r4, #11
   424d6:	4439      	add	r1, r7
   424d8:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   424da:	08c9      	lsrs	r1, r1, #3
   424dc:	4630      	mov	r0, r6
   424de:	f7ff ff04 	bl	422ea <alloc_chunk>
	if (c0 == 0) {
   424e2:	4680      	mov	r8, r0
   424e4:	2800      	cmp	r0, #0
   424e6:	d0e3      	beq.n	424b0 <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   424e8:	f109 0504 	add.w	r5, r9, #4
   424ec:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   424f0:	1e7b      	subs	r3, r7, #1
   424f2:	4435      	add	r5, r6
   424f4:	441d      	add	r5, r3
   424f6:	427f      	negs	r7, r7
   424f8:	403d      	ands	r5, r7
   424fa:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   424fe:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   42500:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   42502:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   42504:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   42506:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   4250a:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   4250c:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   42510:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   42514:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   42518:	d208      	bcs.n	4252c <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   4251a:	4601      	mov	r1, r0
   4251c:	463a      	mov	r2, r7
   4251e:	4630      	mov	r0, r6
   42520:	f7ff ff30 	bl	42384 <split_chunks>
		free_list_add(h, c0);
   42524:	4641      	mov	r1, r8
   42526:	4630      	mov	r0, r6
   42528:	f7ff fe8e 	bl	42248 <free_list_add>
	return c + chunk_size(h, c);
   4252c:	4639      	mov	r1, r7
   4252e:	4630      	mov	r0, r6
   42530:	f7ff fe85 	bl	4223e <chunk_size>
   42534:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   42536:	4284      	cmp	r4, r0
   42538:	d207      	bcs.n	4254a <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   4253a:	4630      	mov	r0, r6
   4253c:	4622      	mov	r2, r4
   4253e:	f7ff ff21 	bl	42384 <split_chunks>
		free_list_add(h, c_end);
   42542:	4621      	mov	r1, r4
   42544:	4630      	mov	r0, r6
   42546:	f7ff fe7f 	bl	42248 <free_list_add>
	void *cmem = &buf[c];
   4254a:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   4254e:	8873      	ldrh	r3, [r6, #2]
   42550:	f043 0301 	orr.w	r3, r3, #1
   42554:	8073      	strh	r3, [r6, #2]
   42556:	e7ac      	b.n	424b2 <sys_heap_aligned_alloc+0x28>

00042558 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   42558:	3a04      	subs	r2, #4
{
   4255a:	b4f0      	push	{r4, r5, r6, r7}
   4255c:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   4255e:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   42560:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   42562:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   42566:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   4256a:	1a0e      	subs	r6, r1, r0
   4256c:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   4256e:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
   42570:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   42574:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   42576:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
   4257a:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
   4257c:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   4257e:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
   42580:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   42584:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   42586:	f1c2 0220 	rsb	r2, r2, #32
   4258a:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   4258c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   42590:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   42594:	4294      	cmp	r4, r2
   42596:	d1fb      	bne.n	42590 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   42598:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   4259a:	f042 0201 	orr.w	r2, r2, #1
   4259e:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
   425a0:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   425a4:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   425a6:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   425a8:	8007      	strh	r7, [r0, #0]
   425aa:	8065      	strh	r5, [r4, #2]
   425ac:	1984      	adds	r4, r0, r6
   425ae:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   425b2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   425b6:	8067      	strh	r7, [r4, #2]
   425b8:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   425ba:	885a      	ldrh	r2, [r3, #2]
   425bc:	f042 0201 	orr.w	r2, r2, #1
   425c0:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   425c2:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   425c4:	f7ff be40 	b.w	42248 <free_list_add>

000425c8 <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   425c8:	b40f      	push	{r0, r1, r2, r3}
   425ca:	b507      	push	{r0, r1, r2, lr}
   425cc:	a904      	add	r1, sp, #16
   425ce:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   425d2:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   425d4:	f7e5 fd82 	bl	280dc <vprintk>

	va_end(ap);
}
   425d8:	b003      	add	sp, #12
   425da:	f85d eb04 	ldr.w	lr, [sp], #4
   425de:	b004      	add	sp, #16
   425e0:	4770      	bx	lr

000425e2 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   425e2:	4770      	bx	lr

000425e4 <read_str>:
{
   425e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   425e8:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   425ec:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   425ee:	4640      	mov	r0, r8
{
   425f0:	461f      	mov	r7, r3
   425f2:	460c      	mov	r4, r1
   425f4:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   425f6:	f001 fe58 	bl	442aa <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   425fa:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   425fe:	9300      	str	r3, [sp, #0]
   42600:	b280      	uxth	r0, r0
   42602:	e9cd 8001 	strd	r8, r0, [sp, #4]
   42606:	463b      	mov	r3, r7
   42608:	4632      	mov	r2, r6
   4260a:	4621      	mov	r1, r4
   4260c:	4628      	mov	r0, r5
   4260e:	f003 ff21 	bl	46454 <bt_gatt_attr_read>
}
   42612:	b004      	add	sp, #16
   42614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00042618 <blvl_ccc_cfg_changed>:
}
   42618:	4770      	bx	lr

0004261a <bas_init>:
}
   4261a:	2000      	movs	r0, #0
   4261c:	4770      	bx	lr

0004261e <nvs_flash_rd>:
{
   4261e:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   42620:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   42622:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   42624:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   42626:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   42628:	fa16 f181 	uxtah	r1, r6, r1
   4262c:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   42630:	6884      	ldr	r4, [r0, #8]
   42632:	6824      	ldr	r4, [r4, #0]
   42634:	46a4      	mov	ip, r4
}
   42636:	bc70      	pop	{r4, r5, r6}
   42638:	4760      	bx	ip

0004263a <nvs_sector_advance>:
	*addr += (1 << ADDR_SECT_SHIFT);
   4263a:	680b      	ldr	r3, [r1, #0]
   4263c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   42640:	600b      	str	r3, [r1, #0]
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   42642:	89c0      	ldrh	r0, [r0, #14]
   42644:	0c1a      	lsrs	r2, r3, #16
   42646:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   4264a:	bf04      	itt	eq
   4264c:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   42650:	600b      	streq	r3, [r1, #0]
}
   42652:	4770      	bx	lr

00042654 <nvs_flash_block_cmp>:
{
   42654:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   42658:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   4265a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   4265c:	681d      	ldr	r5, [r3, #0]
   4265e:	426d      	negs	r5, r5
{
   42660:	b089      	sub	sp, #36	; 0x24
   42662:	4681      	mov	r9, r0
   42664:	460e      	mov	r6, r1
   42666:	4617      	mov	r7, r2
	block_size =
   42668:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   4266c:	b91c      	cbnz	r4, 42676 <nvs_flash_block_cmp+0x22>
	return 0;
   4266e:	4620      	mov	r0, r4
}
   42670:	b009      	add	sp, #36	; 0x24
   42672:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   42676:	42ac      	cmp	r4, r5
   42678:	46a0      	mov	r8, r4
   4267a:	bf28      	it	cs
   4267c:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   4267e:	4643      	mov	r3, r8
   42680:	466a      	mov	r2, sp
   42682:	4631      	mov	r1, r6
   42684:	4648      	mov	r0, r9
   42686:	f7ff ffca 	bl	4261e <nvs_flash_rd>
		if (rc) {
   4268a:	2800      	cmp	r0, #0
   4268c:	d1f0      	bne.n	42670 <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   4268e:	4642      	mov	r2, r8
   42690:	4669      	mov	r1, sp
   42692:	4638      	mov	r0, r7
   42694:	f001 fe30 	bl	442f8 <memcmp>
		if (rc) {
   42698:	b920      	cbnz	r0, 426a4 <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   4269a:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   4269e:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   426a0:	4447      	add	r7, r8
   426a2:	e7e3      	b.n	4266c <nvs_flash_block_cmp+0x18>
			return 1;
   426a4:	2001      	movs	r0, #1
   426a6:	e7e3      	b.n	42670 <nvs_flash_block_cmp+0x1c>

000426a8 <nvs_flash_cmp_const>:
{
   426a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   426ac:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   426ae:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   426b0:	681d      	ldr	r5, [r3, #0]
   426b2:	426d      	negs	r5, r5
{
   426b4:	b088      	sub	sp, #32
	block_size =
   426b6:	f005 0520 	and.w	r5, r5, #32
{
   426ba:	4607      	mov	r7, r0
   426bc:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   426be:	4668      	mov	r0, sp
{
   426c0:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   426c2:	462a      	mov	r2, r5
   426c4:	f001 fe33 	bl	4432e <memset>
	while (len) {
   426c8:	b91c      	cbnz	r4, 426d2 <nvs_flash_cmp_const+0x2a>
	return 0;
   426ca:	4620      	mov	r0, r4
}
   426cc:	b008      	add	sp, #32
   426ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   426d2:	42ac      	cmp	r4, r5
   426d4:	46a0      	mov	r8, r4
   426d6:	bf28      	it	cs
   426d8:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   426da:	4643      	mov	r3, r8
   426dc:	466a      	mov	r2, sp
   426de:	4631      	mov	r1, r6
   426e0:	4638      	mov	r0, r7
   426e2:	f7ff ffb7 	bl	42654 <nvs_flash_block_cmp>
		if (rc) {
   426e6:	2800      	cmp	r0, #0
   426e8:	d1f0      	bne.n	426cc <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   426ea:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   426ee:	4446      	add	r6, r8
   426f0:	e7ea      	b.n	426c8 <nvs_flash_cmp_const+0x20>

000426f2 <nvs_flash_erase_sector>:
{
   426f2:	b538      	push	{r3, r4, r5, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   426f4:	8982      	ldrh	r2, [r0, #12]
   426f6:	6803      	ldr	r3, [r0, #0]
	addr &= ADDR_SECT_MASK;
   426f8:	0c0d      	lsrs	r5, r1, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   426fa:	0c09      	lsrs	r1, r1, #16
{
   426fc:	4604      	mov	r4, r0
	addr &= ADDR_SECT_MASK;
   426fe:	042d      	lsls	r5, r5, #16
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   42700:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   42702:	fb02 3101 	mla	r1, r2, r1, r3
	rc = api->erase(dev, offset, size);
   42706:	6883      	ldr	r3, [r0, #8]
   42708:	689b      	ldr	r3, [r3, #8]
   4270a:	4798      	blx	r3
	if (rc) {
   4270c:	b950      	cbnz	r0, 42724 <nvs_flash_erase_sector+0x32>
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   4270e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   42710:	89a3      	ldrh	r3, [r4, #12]
   42712:	7912      	ldrb	r2, [r2, #4]
   42714:	4629      	mov	r1, r5
   42716:	4620      	mov	r0, r4
   42718:	f7ff ffc6 	bl	426a8 <nvs_flash_cmp_const>
		rc = -ENXIO;
   4271c:	2800      	cmp	r0, #0
   4271e:	bf18      	it	ne
   42720:	f06f 0005 	mvnne.w	r0, #5
}
   42724:	bd38      	pop	{r3, r4, r5, pc}

00042726 <nvs_ate_crc8_update>:
{
   42726:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   42728:	4601      	mov	r1, r0
{
   4272a:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   4272c:	2207      	movs	r2, #7
   4272e:	20ff      	movs	r0, #255	; 0xff
   42730:	f7e5 fcb8 	bl	280a4 <crc8_ccitt>
	entry->crc8 = crc8;
   42734:	71e0      	strb	r0, [r4, #7]
}
   42736:	bd10      	pop	{r4, pc}

00042738 <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   42738:	7803      	ldrb	r3, [r0, #0]
   4273a:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   4273c:	bf81      	itttt	hi
   4273e:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
   42742:	18c9      	addhi	r1, r1, r3
   42744:	425b      	neghi	r3, r3
   42746:	4019      	andhi	r1, r3
}
   42748:	4608      	mov	r0, r1
   4274a:	4770      	bx	lr

0004274c <nvs_ate_valid>:
{
   4274c:	b570      	push	{r4, r5, r6, lr}
   4274e:	460c      	mov	r4, r1
   42750:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   42752:	2108      	movs	r1, #8
   42754:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   42756:	f7ff ffef 	bl	42738 <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   4275a:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   4275c:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   4275e:	4621      	mov	r1, r4
   42760:	20ff      	movs	r0, #255	; 0xff
   42762:	f7e5 fc9f 	bl	280a4 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   42766:	79e3      	ldrb	r3, [r4, #7]
   42768:	4283      	cmp	r3, r0
   4276a:	d107      	bne.n	4277c <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   4276c:	89aa      	ldrh	r2, [r5, #12]
   4276e:	8863      	ldrh	r3, [r4, #2]
   42770:	1b90      	subs	r0, r2, r6
	if ((nvs_ate_crc8_check(entry)) ||
   42772:	4283      	cmp	r3, r0
   42774:	bf2c      	ite	cs
   42776:	2000      	movcs	r0, #0
   42778:	2001      	movcc	r0, #1
}
   4277a:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   4277c:	2000      	movs	r0, #0
   4277e:	e7fc      	b.n	4277a <nvs_ate_valid+0x2e>

00042780 <nvs_close_ate_valid>:
{
   42780:	b538      	push	{r3, r4, r5, lr}
   42782:	4605      	mov	r5, r0
   42784:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   42786:	f7ff ffe1 	bl	4274c <nvs_ate_valid>
   4278a:	b1a0      	cbz	r0, 427b6 <nvs_close_ate_valid+0x36>
   4278c:	88a0      	ldrh	r0, [r4, #4]
   4278e:	b998      	cbnz	r0, 427b8 <nvs_close_ate_valid+0x38>
   42790:	8822      	ldrh	r2, [r4, #0]
   42792:	f64f 73ff 	movw	r3, #65535	; 0xffff
   42796:	429a      	cmp	r2, r3
   42798:	d10d      	bne.n	427b6 <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   4279a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   4279c:	2108      	movs	r1, #8
   4279e:	f7ff ffcb 	bl	42738 <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   427a2:	8862      	ldrh	r2, [r4, #2]
   427a4:	89ab      	ldrh	r3, [r5, #12]
   427a6:	1a9b      	subs	r3, r3, r2
   427a8:	fbb3 f2f0 	udiv	r2, r3, r0
   427ac:	fb02 3010 	mls	r0, r2, r0, r3
   427b0:	fab0 f080 	clz	r0, r0
   427b4:	0940      	lsrs	r0, r0, #5
}
   427b6:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   427b8:	2000      	movs	r0, #0
   427ba:	e7fc      	b.n	427b6 <nvs_close_ate_valid+0x36>

000427bc <nvs_prev_ate>:
{
   427bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   427be:	4604      	mov	r4, r0
   427c0:	460d      	mov	r5, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   427c2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   427c4:	2108      	movs	r1, #8
   427c6:	f7ff ffb7 	bl	42738 <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   427ca:	6829      	ldr	r1, [r5, #0]
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   427cc:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   427ce:	2308      	movs	r3, #8
   427d0:	4620      	mov	r0, r4
   427d2:	f7ff ff24 	bl	4261e <nvs_flash_rd>
	if (rc) {
   427d6:	4606      	mov	r6, r0
   427d8:	2800      	cmp	r0, #0
   427da:	d136      	bne.n	4284a <nvs_prev_ate+0x8e>
	*addr += ate_size;
   427dc:	682b      	ldr	r3, [r5, #0]
   427de:	443b      	add	r3, r7
   427e0:	602b      	str	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   427e2:	89a2      	ldrh	r2, [r4, #12]
   427e4:	b299      	uxth	r1, r3
   427e6:	1bd2      	subs	r2, r2, r7
   427e8:	4291      	cmp	r1, r2
   427ea:	d12e      	bne.n	4284a <nvs_prev_ate+0x8e>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   427ec:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   427ee:	bf03      	ittte	eq
   427f0:	89e2      	ldrheq	r2, [r4, #14]
   427f2:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
   427f6:	eb03 4102 	addeq.w	r1, r3, r2, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   427fa:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
   427fe:	6029      	str	r1, [r5, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   42800:	2308      	movs	r3, #8
   42802:	466a      	mov	r2, sp
   42804:	4620      	mov	r0, r4
   42806:	f7ff ff0a 	bl	4261e <nvs_flash_rd>
	if (rc) {
   4280a:	b9e8      	cbnz	r0, 42848 <nvs_prev_ate+0x8c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   4280c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   4280e:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   42810:	466b      	mov	r3, sp
		if (data8[i] != value) {
   42812:	f813 1b01 	ldrb.w	r1, [r3], #1
   42816:	428a      	cmp	r2, r1
   42818:	d10c      	bne.n	42834 <nvs_prev_ate+0x78>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   4281a:	3001      	adds	r0, #1
   4281c:	2808      	cmp	r0, #8
   4281e:	d1f8      	bne.n	42812 <nvs_prev_ate+0x56>
		*addr = fs->ate_wra;
   42820:	6863      	ldr	r3, [r4, #4]
   42822:	e005      	b.n	42830 <nvs_prev_ate+0x74>
		(*addr) &= ADDR_SECT_MASK;
   42824:	682b      	ldr	r3, [r5, #0]
		(*addr) += close_ate.offset;
   42826:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   4282a:	0c1b      	lsrs	r3, r3, #16
   4282c:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   4282e:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   42830:	602b      	str	r3, [r5, #0]
		return 0;
   42832:	e00a      	b.n	4284a <nvs_prev_ate+0x8e>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   42834:	4669      	mov	r1, sp
   42836:	4620      	mov	r0, r4
   42838:	f7ff ffa2 	bl	42780 <nvs_close_ate_valid>
   4283c:	2800      	cmp	r0, #0
   4283e:	d1f1      	bne.n	42824 <nvs_prev_ate+0x68>
	return nvs_recover_last_ate(fs, addr);
   42840:	4629      	mov	r1, r5
   42842:	4620      	mov	r0, r4
   42844:	f7e6 f800 	bl	28848 <nvs_recover_last_ate>
   42848:	4606      	mov	r6, r0
}
   4284a:	4630      	mov	r0, r6
   4284c:	b003      	add	sp, #12
   4284e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00042850 <nvs_flash_al_wrt>:
{
   42850:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   42854:	4607      	mov	r7, r0
   42856:	b089      	sub	sp, #36	; 0x24
   42858:	4690      	mov	r8, r2
	if (!len) {
   4285a:	461e      	mov	r6, r3
   4285c:	b91b      	cbnz	r3, 42866 <nvs_flash_al_wrt+0x16>
		return 0;
   4285e:	2000      	movs	r0, #0
}
   42860:	b009      	add	sp, #36	; 0x24
   42862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	offset += addr & ADDR_OFFS_MASK;
   42866:	683c      	ldr	r4, [r7, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   42868:	8983      	ldrh	r3, [r0, #12]
   4286a:	0c08      	lsrs	r0, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   4286c:	fa14 f181 	uxtah	r1, r4, r1
   42870:	fb00 1403 	mla	r4, r0, r3, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   42874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   42876:	681d      	ldr	r5, [r3, #0]
   42878:	426d      	negs	r5, r5
	if (blen > 0) {
   4287a:	4035      	ands	r5, r6
   4287c:	d00c      	beq.n	42898 <nvs_flash_al_wrt+0x48>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   4287e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	rc = api->write(dev, offset, data, len);
   42880:	6883      	ldr	r3, [r0, #8]
   42882:	4621      	mov	r1, r4
   42884:	f8d3 9004 	ldr.w	r9, [r3, #4]
   42888:	462b      	mov	r3, r5
   4288a:	47c8      	blx	r9
		if (rc) {
   4288c:	2800      	cmp	r0, #0
   4288e:	d1e7      	bne.n	42860 <nvs_flash_al_wrt+0x10>
	if (len) {
   42890:	1b76      	subs	r6, r6, r5
   42892:	d0e4      	beq.n	4285e <nvs_flash_al_wrt+0xe>
		offset += blen;
   42894:	442c      	add	r4, r5
		data8 += blen;
   42896:	44a8      	add	r8, r5
		memcpy(buf, data8, len);
   42898:	4632      	mov	r2, r6
   4289a:	4641      	mov	r1, r8
   4289c:	4668      	mov	r0, sp
   4289e:	f001 fd3b 	bl	44318 <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   428a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   428a4:	681a      	ldr	r2, [r3, #0]
   428a6:	7919      	ldrb	r1, [r3, #4]
   428a8:	1b92      	subs	r2, r2, r6
   428aa:	eb0d 0006 	add.w	r0, sp, r6
   428ae:	f001 fd3e 	bl	4432e <memset>
				 fs->flash_parameters->write_block_size);
   428b2:	e9d7 030a 	ldrd	r0, r3, [r7, #40]	; 0x28
   428b6:	681b      	ldr	r3, [r3, #0]
   428b8:	6882      	ldr	r2, [r0, #8]
   428ba:	4621      	mov	r1, r4
   428bc:	6855      	ldr	r5, [r2, #4]
   428be:	466a      	mov	r2, sp
   428c0:	47a8      	blx	r5
	return rc;
   428c2:	e7cd      	b.n	42860 <nvs_flash_al_wrt+0x10>

000428c4 <nvs_flash_ate_wrt>:
{
   428c4:	b510      	push	{r4, lr}
   428c6:	460a      	mov	r2, r1
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   428c8:	2308      	movs	r3, #8
   428ca:	6841      	ldr	r1, [r0, #4]
{
   428cc:	4604      	mov	r4, r0
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   428ce:	f7ff ffbf 	bl	42850 <nvs_flash_al_wrt>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   428d2:	2108      	movs	r1, #8
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   428d4:	4602      	mov	r2, r0
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   428d6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   428d8:	f7ff ff2e 	bl	42738 <nvs_al_size.isra.0>
   428dc:	6863      	ldr	r3, [r4, #4]
   428de:	1a1b      	subs	r3, r3, r0
   428e0:	6063      	str	r3, [r4, #4]
}
   428e2:	4610      	mov	r0, r2
   428e4:	bd10      	pop	{r4, pc}

000428e6 <nvs_add_gc_done_ate>:
{
   428e6:	b513      	push	{r0, r1, r4, lr}
	gc_done_ate.id = 0xffff;
   428e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   428ec:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   428f0:	2300      	movs	r3, #0
{
   428f2:	4604      	mov	r4, r0
	gc_done_ate.len = 0U;
   428f4:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   428f8:	6883      	ldr	r3, [r0, #8]
   428fa:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   428fe:	4668      	mov	r0, sp
   42900:	f7ff ff11 	bl	42726 <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   42904:	4669      	mov	r1, sp
   42906:	4620      	mov	r0, r4
   42908:	f7ff ffdc 	bl	428c4 <nvs_flash_ate_wrt>
}
   4290c:	b002      	add	sp, #8
   4290e:	bd10      	pop	{r4, pc}

00042910 <nvs_gc>:
{
   42910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   42914:	4604      	mov	r4, r0
   42916:	b095      	sub	sp, #84	; 0x54
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   42918:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   4291a:	2108      	movs	r1, #8
   4291c:	f7ff ff0c 	bl	42738 <nvs_al_size.isra.0>
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   42920:	6863      	ldr	r3, [r4, #4]
   42922:	0c1b      	lsrs	r3, r3, #16
   42924:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   42926:	4605      	mov	r5, r0
	nvs_sector_advance(fs, &sec_addr);
   42928:	a903      	add	r1, sp, #12
   4292a:	4620      	mov	r0, r4
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   4292c:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
   4292e:	f7ff fe84 	bl	4263a <nvs_sector_advance>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   42932:	f8dd b00c 	ldr.w	fp, [sp, #12]
   42936:	89a6      	ldrh	r6, [r4, #12]
   42938:	445e      	add	r6, fp
   4293a:	1b76      	subs	r6, r6, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   4293c:	aa06      	add	r2, sp, #24
   4293e:	2308      	movs	r3, #8
   42940:	4631      	mov	r1, r6
   42942:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
   42944:	9604      	str	r6, [sp, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   42946:	f7ff fe6a 	bl	4261e <nvs_flash_rd>
	if (rc < 0) {
   4294a:	1e02      	subs	r2, r0, #0
   4294c:	f2c0 80a9 	blt.w	42aa2 <nvs_gc+0x192>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   42950:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   42952:	aa06      	add	r2, sp, #24
   42954:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   42956:	2300      	movs	r3, #0
		if (data8[i] != value) {
   42958:	f812 0b01 	ldrb.w	r0, [r2], #1
   4295c:	4281      	cmp	r1, r0
   4295e:	f040 808f 	bne.w	42a80 <nvs_gc+0x170>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   42962:	3301      	adds	r3, #1
   42964:	2b08      	cmp	r3, #8
   42966:	d1f7      	bne.n	42958 <nvs_gc+0x48>
	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   42968:	68a3      	ldr	r3, [r4, #8]
   4296a:	6862      	ldr	r2, [r4, #4]
   4296c:	442b      	add	r3, r5
   4296e:	429a      	cmp	r2, r3
   42970:	d27e      	bcs.n	42a70 <nvs_gc+0x160>
	rc = nvs_flash_erase_sector(fs, sec_addr);
   42972:	4659      	mov	r1, fp
   42974:	4620      	mov	r0, r4
   42976:	f7ff febc 	bl	426f2 <nvs_flash_erase_sector>
   4297a:	4602      	mov	r2, r0
	if (rc) {
   4297c:	e091      	b.n	42aa2 <nvs_gc+0x192>
		gc_addr += close_ate.offset;
   4297e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
		gc_addr &= ADDR_SECT_MASK;
   42982:	0c36      	lsrs	r6, r6, #16
   42984:	0436      	lsls	r6, r6, #16
		gc_addr += close_ate.offset;
   42986:	441e      	add	r6, r3
   42988:	9604      	str	r6, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   4298a:	aa08      	add	r2, sp, #32
   4298c:	a904      	add	r1, sp, #16
   4298e:	4620      	mov	r0, r4
		gc_prev_addr = gc_addr;
   42990:	f8dd a010 	ldr.w	sl, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   42994:	f7ff ff12 	bl	427bc <nvs_prev_ate>
		if (rc) {
   42998:	4602      	mov	r2, r0
   4299a:	2800      	cmp	r0, #0
   4299c:	f040 8081 	bne.w	42aa2 <nvs_gc+0x192>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   429a0:	a908      	add	r1, sp, #32
   429a2:	4620      	mov	r0, r4
   429a4:	f7ff fed2 	bl	4274c <nvs_ate_valid>
   429a8:	b918      	cbnz	r0, 429b2 <nvs_gc+0xa2>
	} while (gc_prev_addr != stop_addr);
   429aa:	9b01      	ldr	r3, [sp, #4]
   429ac:	459a      	cmp	sl, r3
   429ae:	d1ec      	bne.n	4298a <nvs_gc+0x7a>
   429b0:	e7da      	b.n	42968 <nvs_gc+0x58>
		wlk_addr = fs->ate_wra;
   429b2:	6863      	ldr	r3, [r4, #4]
   429b4:	9305      	str	r3, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   429b6:	aa0a      	add	r2, sp, #40	; 0x28
   429b8:	a905      	add	r1, sp, #20
   429ba:	4620      	mov	r0, r4
			wlk_prev_addr = wlk_addr;
   429bc:	9e05      	ldr	r6, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   429be:	f7ff fefd 	bl	427bc <nvs_prev_ate>
			if (rc) {
   429c2:	4602      	mov	r2, r0
   429c4:	2800      	cmp	r0, #0
   429c6:	d16c      	bne.n	42aa2 <nvs_gc+0x192>
			if ((wlk_ate.id == gc_ate.id) &&
   429c8:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   429cc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   429d0:	429a      	cmp	r2, r3
   429d2:	d027      	beq.n	42a24 <nvs_gc+0x114>
		} while (wlk_addr != fs->ate_wra);
   429d4:	6862      	ldr	r2, [r4, #4]
   429d6:	9b05      	ldr	r3, [sp, #20]
   429d8:	429a      	cmp	r2, r3
   429da:	d1ec      	bne.n	429b6 <nvs_gc+0xa6>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   429dc:	4556      	cmp	r6, sl
   429de:	d1e4      	bne.n	429aa <nvs_gc+0x9a>
   429e0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   429e4:	2b00      	cmp	r3, #0
   429e6:	d0e0      	beq.n	429aa <nvs_gc+0x9a>
			data_addr += gc_ate.offset;
   429e8:	f8bd 7022 	ldrh.w	r7, [sp, #34]	; 0x22
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   429ec:	ea4f 431a 	mov.w	r3, sl, lsr #16
   429f0:	041b      	lsls	r3, r3, #16
			data_addr += gc_ate.offset;
   429f2:	441f      	add	r7, r3
			nvs_ate_crc8_update(&gc_ate);
   429f4:	a808      	add	r0, sp, #32
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   429f6:	68a3      	ldr	r3, [r4, #8]
   429f8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			nvs_ate_crc8_update(&gc_ate);
   429fc:	f7ff fe93 	bl	42726 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   42a00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   42a02:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   42a06:	681e      	ldr	r6, [r3, #0]
   42a08:	4276      	negs	r6, r6
	block_size =
   42a0a:	f006 0620 	and.w	r6, r6, #32
	while (len) {
   42a0e:	f1b9 0f00 	cmp.w	r9, #0
   42a12:	d10e      	bne.n	42a32 <nvs_gc+0x122>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   42a14:	a908      	add	r1, sp, #32
   42a16:	4620      	mov	r0, r4
   42a18:	f7ff ff54 	bl	428c4 <nvs_flash_ate_wrt>
			if (rc) {
   42a1c:	4602      	mov	r2, r0
   42a1e:	2800      	cmp	r0, #0
   42a20:	d0c3      	beq.n	429aa <nvs_gc+0x9a>
   42a22:	e03e      	b.n	42aa2 <nvs_gc+0x192>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   42a24:	a90a      	add	r1, sp, #40	; 0x28
   42a26:	4620      	mov	r0, r4
   42a28:	f7ff fe90 	bl	4274c <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   42a2c:	2800      	cmp	r0, #0
   42a2e:	d0d1      	beq.n	429d4 <nvs_gc+0xc4>
   42a30:	e7d4      	b.n	429dc <nvs_gc+0xcc>
		bytes_to_copy = MIN(block_size, len);
   42a32:	454e      	cmp	r6, r9
   42a34:	46b0      	mov	r8, r6
   42a36:	bf28      	it	cs
   42a38:	46c8      	movcs	r8, r9
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   42a3a:	aa0c      	add	r2, sp, #48	; 0x30
   42a3c:	4643      	mov	r3, r8
   42a3e:	4639      	mov	r1, r7
   42a40:	4620      	mov	r0, r4
   42a42:	f7ff fdec 	bl	4261e <nvs_flash_rd>
		if (rc) {
   42a46:	4602      	mov	r2, r0
   42a48:	bb58      	cbnz	r0, 42aa2 <nvs_gc+0x192>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   42a4a:	4643      	mov	r3, r8
   42a4c:	68a1      	ldr	r1, [r4, #8]
   42a4e:	aa0c      	add	r2, sp, #48	; 0x30
   42a50:	4620      	mov	r0, r4
   42a52:	f7ff fefd 	bl	42850 <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
   42a56:	4641      	mov	r1, r8
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   42a58:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   42a5a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   42a5c:	f7ff fe6c 	bl	42738 <nvs_al_size.isra.0>
   42a60:	68a3      	ldr	r3, [r4, #8]
   42a62:	4403      	add	r3, r0
   42a64:	60a3      	str	r3, [r4, #8]
		if (rc) {
   42a66:	b9e2      	cbnz	r2, 42aa2 <nvs_gc+0x192>
		len -= bytes_to_copy;
   42a68:	eba9 0908 	sub.w	r9, r9, r8
		addr += bytes_to_copy;
   42a6c:	4447      	add	r7, r8
   42a6e:	e7ce      	b.n	42a0e <nvs_gc+0xfe>
		rc = nvs_add_gc_done_ate(fs);
   42a70:	4620      	mov	r0, r4
   42a72:	f7ff ff38 	bl	428e6 <nvs_add_gc_done_ate>
		if (rc) {
   42a76:	4602      	mov	r2, r0
   42a78:	2800      	cmp	r0, #0
   42a7a:	f43f af7a 	beq.w	42972 <nvs_gc+0x62>
   42a7e:	e010      	b.n	42aa2 <nvs_gc+0x192>
	stop_addr = gc_addr - ate_size;
   42a80:	1b73      	subs	r3, r6, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
   42a82:	a906      	add	r1, sp, #24
   42a84:	4620      	mov	r0, r4
	stop_addr = gc_addr - ate_size;
   42a86:	9301      	str	r3, [sp, #4]
	if (nvs_close_ate_valid(fs, &close_ate)) {
   42a88:	f7ff fe7a 	bl	42780 <nvs_close_ate_valid>
   42a8c:	2800      	cmp	r0, #0
   42a8e:	f47f af76 	bne.w	4297e <nvs_gc+0x6e>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   42a92:	a904      	add	r1, sp, #16
   42a94:	4620      	mov	r0, r4
   42a96:	f7e5 fed7 	bl	28848 <nvs_recover_last_ate>
		if (rc) {
   42a9a:	4602      	mov	r2, r0
   42a9c:	2800      	cmp	r0, #0
   42a9e:	f43f af74 	beq.w	4298a <nvs_gc+0x7a>
}
   42aa2:	4610      	mov	r0, r2
   42aa4:	b015      	add	sp, #84	; 0x54
   42aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00042aaa <nvs_delete>:

int nvs_delete(struct nvs_fs *fs, uint16_t id)
{
	return nvs_write(fs, id, NULL, 0);
   42aaa:	2300      	movs	r3, #0
   42aac:	461a      	mov	r2, r3
   42aae:	f7e6 b85d 	b.w	28b6c <nvs_write>

00042ab2 <nvs_read_hist>:
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   42ab2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   42ab6:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   42ab8:	7c03      	ldrb	r3, [r0, #16]
{
   42aba:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
   42abe:	4604      	mov	r4, r0
   42ac0:	460f      	mov	r7, r1
   42ac2:	4690      	mov	r8, r2
	if (!fs->ready) {
   42ac4:	2b00      	cmp	r3, #0
   42ac6:	d04e      	beq.n	42b66 <nvs_read_hist+0xb4>
		LOG_ERR("NVS not initialized");
		return -EACCES;
	}

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   42ac8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   42aca:	2108      	movs	r1, #8
   42acc:	f7ff fe34 	bl	42738 <nvs_al_size.isra.0>

	if (len > (fs->sector_size - 2 * ate_size)) {
   42ad0:	89a3      	ldrh	r3, [r4, #12]
   42ad2:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
   42ad6:	429e      	cmp	r6, r3
   42ad8:	d848      	bhi.n	42b6c <nvs_read_hist+0xba>
	if (wlk_addr == NVS_LOOKUP_CACHE_NO_ADDR) {
		rc = -ENOENT;
		goto err;
	}
#else
	wlk_addr = fs->ate_wra;
   42ada:	f8d4 a004 	ldr.w	sl, [r4, #4]
   42ade:	f8cd a004 	str.w	sl, [sp, #4]
	cnt_his = 0U;
   42ae2:	2500      	movs	r5, #0
#endif
	rd_addr = wlk_addr;

	while (cnt_his <= cnt) {
   42ae4:	45a9      	cmp	r9, r5
   42ae6:	4651      	mov	r1, sl
		rd_addr = wlk_addr;
   42ae8:	f8dd a004 	ldr.w	sl, [sp, #4]
	while (cnt_his <= cnt) {
   42aec:	d20b      	bcs.n	42b06 <nvs_read_hist+0x54>
		if (wlk_addr == fs->ate_wra) {
			break;
		}
	}

	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   42aee:	6863      	ldr	r3, [r4, #4]
   42af0:	4553      	cmp	r3, sl
   42af2:	d120      	bne.n	42b36 <nvs_read_hist+0x84>
   42af4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   42af8:	42bb      	cmp	r3, r7
   42afa:	d01c      	beq.n	42b36 <nvs_read_hist+0x84>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
		return -ENOENT;
   42afc:	f06f 0001 	mvn.w	r0, #1

	return wlk_ate.len;

err:
	return rc;
}
   42b00:	b004      	add	sp, #16
   42b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   42b06:	aa02      	add	r2, sp, #8
   42b08:	a901      	add	r1, sp, #4
   42b0a:	4620      	mov	r0, r4
   42b0c:	f7ff fe56 	bl	427bc <nvs_prev_ate>
		if (rc) {
   42b10:	2800      	cmp	r0, #0
   42b12:	d1f5      	bne.n	42b00 <nvs_read_hist+0x4e>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   42b14:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   42b18:	42bb      	cmp	r3, r7
   42b1a:	d106      	bne.n	42b2a <nvs_read_hist+0x78>
   42b1c:	a902      	add	r1, sp, #8
   42b1e:	4620      	mov	r0, r4
   42b20:	f7ff fe14 	bl	4274c <nvs_ate_valid>
   42b24:	b108      	cbz	r0, 42b2a <nvs_read_hist+0x78>
			cnt_his++;
   42b26:	3501      	adds	r5, #1
   42b28:	b2ad      	uxth	r5, r5
		if (wlk_addr == fs->ate_wra) {
   42b2a:	6862      	ldr	r2, [r4, #4]
   42b2c:	9b01      	ldr	r3, [sp, #4]
   42b2e:	429a      	cmp	r2, r3
   42b30:	d1d8      	bne.n	42ae4 <nvs_read_hist+0x32>
		rd_addr = wlk_addr;
   42b32:	4651      	mov	r1, sl
   42b34:	e7de      	b.n	42af4 <nvs_read_hist+0x42>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   42b36:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   42b3a:	2b00      	cmp	r3, #0
   42b3c:	d0de      	beq.n	42afc <nvs_read_hist+0x4a>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   42b3e:	45a9      	cmp	r9, r5
   42b40:	d8dc      	bhi.n	42afc <nvs_read_hist+0x4a>
	rd_addr += wlk_ate.offset;
   42b42:	f8bd 000a 	ldrh.w	r0, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
   42b46:	0c09      	lsrs	r1, r1, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   42b48:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
   42b4a:	ea4f 4101 	mov.w	r1, r1, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   42b4e:	bf28      	it	cs
   42b50:	4633      	movcs	r3, r6
   42b52:	4401      	add	r1, r0
   42b54:	4642      	mov	r2, r8
   42b56:	4620      	mov	r0, r4
   42b58:	f7ff fd61 	bl	4261e <nvs_flash_rd>
	if (rc) {
   42b5c:	2800      	cmp	r0, #0
   42b5e:	d1cf      	bne.n	42b00 <nvs_read_hist+0x4e>
	return wlk_ate.len;
   42b60:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   42b64:	e7cc      	b.n	42b00 <nvs_read_hist+0x4e>
		return -EACCES;
   42b66:	f06f 000c 	mvn.w	r0, #12
   42b6a:	e7c9      	b.n	42b00 <nvs_read_hist+0x4e>
		return -EINVAL;
   42b6c:	f06f 0015 	mvn.w	r0, #21
   42b70:	e7c6      	b.n	42b00 <nvs_read_hist+0x4e>

00042b72 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   42b72:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   42b74:	2400      	movs	r4, #0
   42b76:	9400      	str	r4, [sp, #0]
   42b78:	f7ff ff9b 	bl	42ab2 <nvs_read_hist>
	return rc;
}
   42b7c:	b002      	add	sp, #8
   42b7e:	bd10      	pop	{r4, pc}

00042b80 <usb_write>:
{
   42b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   42b84:	4606      	mov	r6, r0
   42b86:	460f      	mov	r7, r1
   42b88:	4690      	mov	r8, r2
   42b8a:	4699      	mov	r9, r3
   42b8c:	2504      	movs	r5, #4
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
   42b8e:	464b      	mov	r3, r9
   42b90:	4642      	mov	r2, r8
   42b92:	4639      	mov	r1, r7
   42b94:	4630      	mov	r0, r6
   42b96:	f7fa f87d 	bl	3cc94 <usb_dc_ep_write>
		if (ret == -EAGAIN) {
   42b9a:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
   42b9e:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
   42ba0:	d103      	bne.n	42baa <usb_write+0x2a>
	z_impl_k_yield();
   42ba2:	f7fe fc6b 	bl	4147c <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
   42ba6:	3d01      	subs	r5, #1
   42ba8:	d1f1      	bne.n	42b8e <usb_write+0xe>
}
   42baa:	4620      	mov	r0, r4
   42bac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00042bb0 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   42bb0:	4770      	bx	lr

00042bb2 <get_sectors_cb>:
{
   42bb2:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   42bb4:	684c      	ldr	r4, [r1, #4]
   42bb6:	6803      	ldr	r3, [r0, #0]
   42bb8:	42a3      	cmp	r3, r4
   42bba:	d201      	bcs.n	42bc0 <get_sectors_cb+0xe>
		*bail_value = true;
   42bbc:	2001      	movs	r0, #1
}
   42bbe:	bd70      	pop	{r4, r5, r6, pc}
	} else if (info->start_offset >= data->area_off + data->area_len) {
   42bc0:	688a      	ldr	r2, [r1, #8]
   42bc2:	4422      	add	r2, r4
   42bc4:	4293      	cmp	r3, r2
   42bc6:	d301      	bcc.n	42bcc <get_sectors_cb+0x1a>
		*bail_value = false;
   42bc8:	2000      	movs	r0, #0
   42bca:	e7f8      	b.n	42bbe <get_sectors_cb+0xc>
	} else if (data->ret_idx >= data->ret_len) {
   42bcc:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
   42bd0:	694e      	ldr	r6, [r1, #20]
   42bd2:	42b5      	cmp	r5, r6
   42bd4:	d303      	bcc.n	42bde <get_sectors_cb+0x2c>
		data->status = -ENOMEM;
   42bd6:	f06f 030b 	mvn.w	r3, #11
   42bda:	618b      	str	r3, [r1, #24]
		return true;
   42bdc:	e7f4      	b.n	42bc8 <get_sectors_cb+0x16>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   42bde:	1b1b      	subs	r3, r3, r4
   42be0:	f842 3035 	str.w	r3, [r2, r5, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   42be4:	6843      	ldr	r3, [r0, #4]
   42be6:	6908      	ldr	r0, [r1, #16]
   42be8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   42bec:	6053      	str	r3, [r2, #4]
	data->ret_idx++;
   42bee:	690b      	ldr	r3, [r1, #16]
   42bf0:	3301      	adds	r3, #1
   42bf2:	610b      	str	r3, [r1, #16]
	return true;
   42bf4:	e7e2      	b.n	42bbc <get_sectors_cb+0xa>

00042bf6 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   42bf6:	2200      	movs	r2, #0
   42bf8:	4611      	mov	r1, r2
   42bfa:	f7e6 bef1 	b.w	299e0 <settings_save_one>

00042bfe <settings_name_steq>:
{
   42bfe:	4603      	mov	r3, r0
   42c00:	b510      	push	{r4, lr}
   42c02:	4608      	mov	r0, r1
	if (next) {
   42c04:	b10a      	cbz	r2, 42c0a <settings_name_steq+0xc>
		*next = NULL;
   42c06:	2100      	movs	r1, #0
   42c08:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   42c0a:	b153      	cbz	r3, 42c22 <settings_name_steq+0x24>
   42c0c:	b1d0      	cbz	r0, 42c44 <settings_name_steq+0x46>
   42c0e:	1e41      	subs	r1, r0, #1
	while ((*key != '\0') && (*key == *name) &&
   42c10:	f811 0f01 	ldrb.w	r0, [r1, #1]!
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   42c14:	b180      	cbz	r0, 42c38 <settings_name_steq+0x3a>
	while ((*key != '\0') && (*key == *name) &&
   42c16:	f813 4b01 	ldrb.w	r4, [r3], #1
   42c1a:	42a0      	cmp	r0, r4
   42c1c:	d101      	bne.n	42c22 <settings_name_steq+0x24>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   42c1e:	283d      	cmp	r0, #61	; 0x3d
   42c20:	d1f6      	bne.n	42c10 <settings_name_steq+0x12>
		return 0;
   42c22:	2000      	movs	r0, #0
   42c24:	e00e      	b.n	42c44 <settings_name_steq+0x46>
			*next = name + 1;
   42c26:	3301      	adds	r3, #1
   42c28:	6013      	str	r3, [r2, #0]
   42c2a:	e00a      	b.n	42c42 <settings_name_steq+0x44>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   42c2c:	283d      	cmp	r0, #61	; 0x3d
   42c2e:	d008      	beq.n	42c42 <settings_name_steq+0x44>
   42c30:	fab0 f080 	clz	r0, r0
   42c34:	0940      	lsrs	r0, r0, #5
   42c36:	e005      	b.n	42c44 <settings_name_steq+0x46>
	if (*name == SETTINGS_NAME_SEPARATOR) {
   42c38:	7818      	ldrb	r0, [r3, #0]
   42c3a:	282f      	cmp	r0, #47	; 0x2f
   42c3c:	d1f6      	bne.n	42c2c <settings_name_steq+0x2e>
		if (next) {
   42c3e:	2a00      	cmp	r2, #0
   42c40:	d1f1      	bne.n	42c26 <settings_name_steq+0x28>
		return 1;
   42c42:	2001      	movs	r0, #1
}
   42c44:	bd10      	pop	{r4, pc}

00042c46 <settings_name_next>:
{
   42c46:	b510      	push	{r4, lr}
	if (next) {
   42c48:	b109      	cbz	r1, 42c4e <settings_name_next+0x8>
		*next = NULL;
   42c4a:	2300      	movs	r3, #0
   42c4c:	600b      	str	r3, [r1, #0]
	if (!name) {
   42c4e:	b158      	cbz	r0, 42c68 <settings_name_next+0x22>
   42c50:	4603      	mov	r3, r0
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   42c52:	781a      	ldrb	r2, [r3, #0]
   42c54:	461c      	mov	r4, r3
   42c56:	3301      	adds	r3, #1
   42c58:	b12a      	cbz	r2, 42c66 <settings_name_next+0x20>
   42c5a:	2a3d      	cmp	r2, #61	; 0x3d
   42c5c:	d003      	beq.n	42c66 <settings_name_next+0x20>
   42c5e:	2a2f      	cmp	r2, #47	; 0x2f
   42c60:	d1f7      	bne.n	42c52 <settings_name_next+0xc>
		if (next) {
   42c62:	b101      	cbz	r1, 42c66 <settings_name_next+0x20>
			*next = name + 1;
   42c64:	600b      	str	r3, [r1, #0]
   42c66:	1a20      	subs	r0, r4, r0
}
   42c68:	bd10      	pop	{r4, pc}

00042c6a <settings_call_set_handler>:
{
   42c6a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   42c6e:	f8dd 8020 	ldr.w	r8, [sp, #32]
	const char *name_key = name;
   42c72:	9001      	str	r0, [sp, #4]
{
   42c74:	4607      	mov	r7, r0
   42c76:	460c      	mov	r4, r1
   42c78:	4615      	mov	r5, r2
   42c7a:	461e      	mov	r6, r3
	if (load_arg && load_arg->subtree &&
   42c7c:	f1b8 0f00 	cmp.w	r8, #0
   42c80:	d007      	beq.n	42c92 <settings_call_set_handler+0x28>
   42c82:	f8d8 1000 	ldr.w	r1, [r8]
   42c86:	b981      	cbnz	r1, 42caa <settings_call_set_handler+0x40>
	if (load_arg && load_arg->cb) {
   42c88:	f8d8 e004 	ldr.w	lr, [r8, #4]
   42c8c:	f1be 0f00 	cmp.w	lr, #0
   42c90:	d114      	bne.n	42cbc <settings_call_set_handler+0x52>
		ch = settings_parse_and_lookup(name, &name_key);
   42c92:	a901      	add	r1, sp, #4
   42c94:	4638      	mov	r0, r7
   42c96:	f7e6 ff73 	bl	29b80 <settings_parse_and_lookup>
		if (!ch) {
   42c9a:	b158      	cbz	r0, 42cb4 <settings_call_set_handler+0x4a>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   42c9c:	6887      	ldr	r7, [r0, #8]
   42c9e:	9801      	ldr	r0, [sp, #4]
   42ca0:	4633      	mov	r3, r6
   42ca2:	462a      	mov	r2, r5
   42ca4:	4621      	mov	r1, r4
   42ca6:	47b8      	blx	r7
		if (rc != 0) {
   42ca8:	e004      	b.n	42cb4 <settings_call_set_handler+0x4a>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   42caa:	aa01      	add	r2, sp, #4
   42cac:	f7ff ffa7 	bl	42bfe <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   42cb0:	2800      	cmp	r0, #0
   42cb2:	d1e9      	bne.n	42c88 <settings_call_set_handler+0x1e>
}
   42cb4:	2000      	movs	r0, #0
   42cb6:	b002      	add	sp, #8
   42cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   42cbc:	f8d8 3008 	ldr.w	r3, [r8, #8]
   42cc0:	9801      	ldr	r0, [sp, #4]
   42cc2:	9308      	str	r3, [sp, #32]
   42cc4:	462a      	mov	r2, r5
   42cc6:	4633      	mov	r3, r6
   42cc8:	4621      	mov	r1, r4
   42cca:	46f4      	mov	ip, lr
}
   42ccc:	b002      	add	sp, #8
   42cce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   42cd2:	4760      	bx	ip

00042cd4 <settings_nvs_storage_get>:
static void *settings_nvs_storage_get(struct settings_store *cs)
{
	struct settings_nvs *cf = (struct settings_nvs *)cs;

	return &cf->cf_nvs;
}
   42cd4:	3008      	adds	r0, #8
   42cd6:	4770      	bx	lr

00042cd8 <settings_nvs_read_fn>:
{
   42cd8:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   42cda:	4613      	mov	r3, r2
{
   42cdc:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   42cde:	460a      	mov	r2, r1
   42ce0:	8881      	ldrh	r1, [r0, #4]
   42ce2:	6800      	ldr	r0, [r0, #0]
   42ce4:	f7ff ff45 	bl	42b72 <nvs_read>
}
   42ce8:	42a0      	cmp	r0, r4
   42cea:	bfa8      	it	ge
   42cec:	4620      	movge	r0, r4
   42cee:	bd10      	pop	{r4, pc}

00042cf0 <settings_nvs_save>:
{
   42cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   42cf4:	b097      	sub	sp, #92	; 0x5c
   42cf6:	4604      	mov	r4, r0
   42cf8:	9201      	str	r2, [sp, #4]
   42cfa:	469a      	mov	sl, r3
	if (!name) {
   42cfc:	4689      	mov	r9, r1
   42cfe:	2900      	cmp	r1, #0
   42d00:	d07e      	beq.n	42e00 <settings_nvs_save+0x110>
	delete = ((value == NULL) || (val_len == 0));
   42d02:	b1da      	cbz	r2, 42d3c <settings_nvs_save+0x4c>
   42d04:	faba f78a 	clz	r7, sl
   42d08:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   42d0a:	8f25      	ldrh	r5, [r4, #56]	; 0x38
   42d0c:	3501      	adds	r5, #1
   42d0e:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   42d10:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   42d12:	f104 0b08 	add.w	fp, r4, #8
		name_id--;
   42d16:	1e6e      	subs	r6, r5, #1
   42d18:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   42d1a:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   42d1e:	d040      	beq.n	42da2 <settings_nvs_save+0xb2>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   42d20:	234a      	movs	r3, #74	; 0x4a
   42d22:	aa03      	add	r2, sp, #12
   42d24:	4631      	mov	r1, r6
   42d26:	4658      	mov	r0, fp
   42d28:	f7ff ff23 	bl	42b72 <nvs_read>
		if (rc < 0) {
   42d2c:	2800      	cmp	r0, #0
   42d2e:	da07      	bge.n	42d40 <settings_nvs_save+0x50>
		name_id--;
   42d30:	f110 0f02 	cmn.w	r0, #2
   42d34:	bf08      	it	eq
   42d36:	46b0      	moveq	r8, r6
   42d38:	4635      	mov	r5, r6
   42d3a:	e7ec      	b.n	42d16 <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   42d3c:	2701      	movs	r7, #1
   42d3e:	e7e4      	b.n	42d0a <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   42d40:	f100 0358 	add.w	r3, r0, #88	; 0x58
   42d44:	eb0d 0003 	add.w	r0, sp, r3
   42d48:	2300      	movs	r3, #0
   42d4a:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   42d4e:	a903      	add	r1, sp, #12
   42d50:	4648      	mov	r0, r9
   42d52:	f001 fab1 	bl	442b8 <strcmp>
   42d56:	2800      	cmp	r0, #0
   42d58:	d1ee      	bne.n	42d38 <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   42d5a:	b32f      	cbz	r7, 42da8 <settings_nvs_save+0xb8>
   42d5c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   42d5e:	42b3      	cmp	r3, r6
   42d60:	d008      	beq.n	42d74 <settings_nvs_save+0x84>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   42d62:	4631      	mov	r1, r6
   42d64:	4658      	mov	r0, fp
   42d66:	f7ff fea0 	bl	42aaa <nvs_delete>
			if (rc >= 0) {
   42d6a:	2800      	cmp	r0, #0
   42d6c:	da0f      	bge.n	42d8e <settings_nvs_save+0x9e>
}
   42d6e:	b017      	add	sp, #92	; 0x5c
   42d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cf->last_name_id--;
   42d74:	4622      	mov	r2, r4
   42d76:	1e73      	subs	r3, r6, #1
   42d78:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   42d7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   42d80:	2302      	movs	r3, #2
   42d82:	4658      	mov	r0, fp
   42d84:	f7e5 fef2 	bl	28b6c <nvs_write>
			if (rc < 0) {
   42d88:	2800      	cmp	r0, #0
   42d8a:	daea      	bge.n	42d62 <settings_nvs_save+0x72>
   42d8c:	e7ef      	b.n	42d6e <settings_nvs_save+0x7e>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   42d8e:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   42d92:	313f      	adds	r1, #63	; 0x3f
   42d94:	b289      	uxth	r1, r1
   42d96:	4658      	mov	r0, fp
   42d98:	f7ff fe87 	bl	42aaa <nvs_delete>
	if (rc < 0) {
   42d9c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   42da0:	e7e5      	b.n	42d6e <settings_nvs_save+0x7e>
	if (delete) {
   42da2:	b1ff      	cbz	r7, 42de4 <settings_nvs_save+0xf4>
			return 0;
   42da4:	2000      	movs	r0, #0
   42da6:	e7e2      	b.n	42d6e <settings_nvs_save+0x7e>
		name_id--;
   42da8:	46b0      	mov	r8, r6
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   42daa:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   42dae:	d02a      	beq.n	42e06 <settings_nvs_save+0x116>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   42db0:	f104 0508 	add.w	r5, r4, #8
   42db4:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   42db8:	9a01      	ldr	r2, [sp, #4]
   42dba:	4653      	mov	r3, sl
   42dbc:	b289      	uxth	r1, r1
   42dbe:	4628      	mov	r0, r5
   42dc0:	f7e5 fed4 	bl	28b6c <nvs_write>
	if (rc < 0) {
   42dc4:	2800      	cmp	r0, #0
   42dc6:	dbd2      	blt.n	42d6e <settings_nvs_save+0x7e>
	if (write_name) {
   42dc8:	b977      	cbnz	r7, 42de8 <settings_nvs_save+0xf8>
	if (write_name_id > cf->last_name_id) {
   42dca:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   42dcc:	4543      	cmp	r3, r8
   42dce:	d2e9      	bcs.n	42da4 <settings_nvs_save+0xb4>
		cf->last_name_id = write_name_id;
   42dd0:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   42dd2:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   42dd4:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   42dd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   42ddc:	4628      	mov	r0, r5
   42dde:	f7e5 fec5 	bl	28b6c <nvs_write>
   42de2:	e7db      	b.n	42d9c <settings_nvs_save+0xac>
	write_name = true;
   42de4:	2701      	movs	r7, #1
   42de6:	e7e0      	b.n	42daa <settings_nvs_save+0xba>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   42de8:	4648      	mov	r0, r9
   42dea:	f001 fa5e 	bl	442aa <strlen>
   42dee:	464a      	mov	r2, r9
   42df0:	4603      	mov	r3, r0
   42df2:	4641      	mov	r1, r8
   42df4:	4628      	mov	r0, r5
   42df6:	f7e5 feb9 	bl	28b6c <nvs_write>
		if (rc < 0) {
   42dfa:	2800      	cmp	r0, #0
   42dfc:	dae5      	bge.n	42dca <settings_nvs_save+0xda>
   42dfe:	e7b6      	b.n	42d6e <settings_nvs_save+0x7e>
		return -EINVAL;
   42e00:	f06f 0015 	mvn.w	r0, #21
   42e04:	e7b3      	b.n	42d6e <settings_nvs_save+0x7e>
		return -ENOMEM;
   42e06:	f06f 000b 	mvn.w	r0, #11
   42e0a:	e7b0      	b.n	42d6e <settings_nvs_save+0x7e>

00042e0c <settings_nvs_backend_init>:
{
   42e0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	cf->cf_nvs.flash_device = cf->flash_dev;
   42e0e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   42e10:	6303      	str	r3, [r0, #48]	; 0x30
{
   42e12:	4604      	mov	r4, r0
	if (cf->cf_nvs.flash_device == NULL) {
   42e14:	b1c3      	cbz	r3, 42e48 <settings_nvs_backend_init+0x3c>
	rc = nvs_mount(&cf->cf_nvs);
   42e16:	f100 0608 	add.w	r6, r0, #8
   42e1a:	4630      	mov	r0, r6
   42e1c:	f7e5 fd46 	bl	288ac <nvs_mount>
	if (rc) {
   42e20:	4605      	mov	r5, r0
   42e22:	b970      	cbnz	r0, 42e42 <settings_nvs_backend_init+0x36>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   42e24:	2302      	movs	r3, #2
   42e26:	f10d 0206 	add.w	r2, sp, #6
   42e2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   42e2e:	4630      	mov	r0, r6
   42e30:	f7ff fe9f 	bl	42b72 <nvs_read>
	if (rc < 0) {
   42e34:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   42e36:	bfac      	ite	ge
   42e38:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
   42e3c:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
   42e40:	8723      	strh	r3, [r4, #56]	; 0x38
}
   42e42:	4628      	mov	r0, r5
   42e44:	b002      	add	sp, #8
   42e46:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   42e48:	f06f 0512 	mvn.w	r5, #18
   42e4c:	e7f9      	b.n	42e42 <settings_nvs_backend_init+0x36>

00042e4e <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   42e4e:	b538      	push	{r3, r4, r5, lr}
   42e50:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   42e52:	42ab      	cmp	r3, r5
{
   42e54:	4611      	mov	r1, r2
   42e56:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   42e58:	d804      	bhi.n	42e64 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   42e5a:	461a      	mov	r2, r3
   42e5c:	f001 fa5c 	bl	44318 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   42e60:	4620      	mov	r0, r4
   42e62:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   42e64:	2400      	movs	r4, #0
   42e66:	e7fb      	b.n	42e60 <_copy+0x12>

00042e68 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   42e68:	f001 ba61 	b.w	4432e <memset>

00042e6c <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   42e6c:	09c3      	lsrs	r3, r0, #7
   42e6e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   42e72:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   42e76:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   42e7a:	b2c0      	uxtb	r0, r0
   42e7c:	4770      	bx	lr

00042e7e <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   42e7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   42e82:	4606      	mov	r6, r0
   42e84:	b0a9      	sub	sp, #164	; 0xa4
   42e86:	4688      	mov	r8, r1
   42e88:	4614      	mov	r4, r2
   42e8a:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   42e8c:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   42e90:	f7e7 f8ee 	bl	2a070 <uECC_get_rng>
		if (!rng_function ||
   42e94:	4603      	mov	r3, r0
   42e96:	2800      	cmp	r0, #0
   42e98:	d03e      	beq.n	42f18 <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   42e9a:	2140      	movs	r1, #64	; 0x40
   42e9c:	a808      	add	r0, sp, #32
   42e9e:	4798      	blx	r3
		if (!rng_function ||
   42ea0:	b3d0      	cbz	r0, 42f18 <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   42ea2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   42ea6:	f112 031f 	adds.w	r3, r2, #31
   42eaa:	bf48      	it	mi
   42eac:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   42eb0:	466d      	mov	r5, sp
   42eb2:	464a      	mov	r2, r9
   42eb4:	a908      	add	r1, sp, #32
   42eb6:	4628      	mov	r0, r5
   42eb8:	f343 1347 	sbfx	r3, r3, #5, #8
   42ebc:	f000 f9f6 	bl	432ac <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   42ec0:	4622      	mov	r2, r4
   42ec2:	4629      	mov	r1, r5
   42ec4:	a818      	add	r0, sp, #96	; 0x60
   42ec6:	f000 fe09 	bl	43adc <EccPoint_compute_public_key>
   42eca:	b318      	cbz	r0, 42f14 <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   42ecc:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   42ed0:	1dd9      	adds	r1, r3, #7
   42ed2:	bf48      	it	mi
   42ed4:	f103 010e 	addmi.w	r1, r3, #14
   42ed8:	462a      	mov	r2, r5
   42eda:	4640      	mov	r0, r8
   42edc:	10c9      	asrs	r1, r1, #3
   42ede:	f000 fe25 	bl	43b2c <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   42ee2:	f994 1001 	ldrsb.w	r1, [r4, #1]
   42ee6:	aa18      	add	r2, sp, #96	; 0x60
   42ee8:	4630      	mov	r0, r6
   42eea:	f000 fe1f 	bl	43b2c <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   42eee:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   42ef2:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   42ef6:	ab18      	add	r3, sp, #96	; 0x60
   42ef8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   42efc:	1870      	adds	r0, r6, r1
   42efe:	f000 fe15 	bl	43b2c <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   42f02:	2220      	movs	r2, #32
   42f04:	2100      	movs	r1, #0
   42f06:	4628      	mov	r0, r5
   42f08:	f001 fa11 	bl	4432e <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   42f0c:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   42f0e:	b029      	add	sp, #164	; 0xa4
   42f10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   42f14:	3f01      	subs	r7, #1
   42f16:	d1bb      	bne.n	42e90 <uECC_make_key+0x12>
        		return 0;
   42f18:	2000      	movs	r0, #0
   42f1a:	e7f8      	b.n	42f0e <uECC_make_key+0x90>

00042f1c <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   42f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   42f20:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   42f22:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   42f26:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   42f2a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   42f2e:	b0a4      	sub	sp, #144	; 0x90
   42f30:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   42f32:	1dda      	adds	r2, r3, #7
   42f34:	bf48      	it	mi
   42f36:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   42f3a:	ad04      	add	r5, sp, #16
{
   42f3c:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   42f3e:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   42f40:	4628      	mov	r0, r5
   42f42:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   42f44:	9502      	str	r5, [sp, #8]
   42f46:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   42f48:	f000 fe04 	bl	43b54 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   42f4c:	463a      	mov	r2, r7
   42f4e:	4649      	mov	r1, r9
   42f50:	a814      	add	r0, sp, #80	; 0x50
   42f52:	f000 fdff 	bl	43b54 <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   42f56:	ab14      	add	r3, sp, #80	; 0x50
   42f58:	eb09 0107 	add.w	r1, r9, r7
   42f5c:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   42f60:	463a      	mov	r2, r7
   42f62:	f000 fdf7 	bl	43b54 <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   42f66:	4623      	mov	r3, r4
   42f68:	4632      	mov	r2, r6
   42f6a:	4629      	mov	r1, r5
   42f6c:	4628      	mov	r0, r5
   42f6e:	f000 fd89 	bl	43a84 <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   42f72:	fab0 f380 	clz	r3, r0
   42f76:	9401      	str	r4, [sp, #4]
   42f78:	aa24      	add	r2, sp, #144	; 0x90
   42f7a:	095b      	lsrs	r3, r3, #5
   42f7c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   42f80:	8863      	ldrh	r3, [r4, #2]
   42f82:	3301      	adds	r3, #1
   42f84:	b21b      	sxth	r3, r3
   42f86:	9300      	str	r3, [sp, #0]
   42f88:	f851 2c88 	ldr.w	r2, [r1, #-136]
   42f8c:	a914      	add	r1, sp, #80	; 0x50
   42f8e:	2300      	movs	r3, #0
   42f90:	4608      	mov	r0, r1
   42f92:	f000 fcaf 	bl	438f4 <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   42f96:	aa14      	add	r2, sp, #80	; 0x50
   42f98:	4639      	mov	r1, r7
   42f9a:	4640      	mov	r0, r8
   42f9c:	f000 fdc6 	bl	43b2c <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   42fa0:	4621      	mov	r1, r4
   42fa2:	a814      	add	r0, sp, #80	; 0x50
   42fa4:	f000 fc1b 	bl	437de <EccPoint_isZero>
   42fa8:	af02      	add	r7, sp, #8
   42faa:	4604      	mov	r4, r0
   42fac:	2208      	movs	r2, #8
   42fae:	2100      	movs	r1, #0
   42fb0:	4638      	mov	r0, r7
   42fb2:	f001 f9bc 	bl	4432e <memset>
   42fb6:	2220      	movs	r2, #32
   42fb8:	2100      	movs	r1, #0
   42fba:	4630      	mov	r0, r6
   42fbc:	f001 f9b7 	bl	4432e <memset>
   42fc0:	2220      	movs	r2, #32
   42fc2:	2100      	movs	r1, #0
   42fc4:	4628      	mov	r0, r5
   42fc6:	f001 f9b2 	bl	4432e <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   42fca:	fab4 f084 	clz	r0, r4
   42fce:	0940      	lsrs	r0, r0, #5
   42fd0:	b024      	add	sp, #144	; 0x90
   42fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00042fd6 <uECC_vli_add>:
{
   42fd6:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   42fd8:	2400      	movs	r4, #0
{
   42fda:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   42fdc:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   42fde:	b265      	sxtb	r5, r4
   42fe0:	42ab      	cmp	r3, r5
   42fe2:	dc00      	bgt.n	42fe6 <uECC_vli_add+0x10>
}
   42fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   42fe6:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   42fea:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   42fee:	443d      	add	r5, r7
   42ff0:	4405      	add	r5, r0
	return (p_true*(cond)) | (p_false*(!cond));
   42ff2:	42af      	cmp	r7, r5
   42ff4:	f000 0001 	and.w	r0, r0, #1
   42ff8:	bf18      	it	ne
   42ffa:	2000      	movne	r0, #0
		result[i] = sum;
   42ffc:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   43000:	bf88      	it	hi
   43002:	f040 0001 	orrhi.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   43006:	3401      	adds	r4, #1
   43008:	e7e9      	b.n	42fde <uECC_vli_add+0x8>

0004300a <uECC_vli_rshift1>:
	vli += num_words;
   4300a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   4300e:	2300      	movs	r3, #0
	while (vli-- > end) {
   43010:	4288      	cmp	r0, r1
   43012:	d300      	bcc.n	43016 <uECC_vli_rshift1+0xc>
}
   43014:	4770      	bx	lr
		uECC_word_t temp = *vli;
   43016:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   4301a:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   4301e:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   43020:	07d3      	lsls	r3, r2, #31
   43022:	e7f5      	b.n	43010 <uECC_vli_rshift1+0x6>

00043024 <vli_modInv_update>:
{
   43024:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   43026:	6803      	ldr	r3, [r0, #0]
   43028:	07db      	lsls	r3, r3, #31
{
   4302a:	4605      	mov	r5, r0
   4302c:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   4302e:	d404      	bmi.n	4303a <vli_modInv_update+0x16>
}
   43030:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	uECC_vli_rshift1(uv, num_words);
   43034:	4611      	mov	r1, r2
   43036:	f7ff bfe8 	b.w	4300a <uECC_vli_rshift1>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   4303a:	4613      	mov	r3, r2
   4303c:	460a      	mov	r2, r1
   4303e:	4601      	mov	r1, r0
   43040:	f7ff ffc9 	bl	42fd6 <uECC_vli_add>
	uECC_vli_rshift1(uv, num_words);
   43044:	4621      	mov	r1, r4
		carry = uECC_vli_add(uv, uv, mod, num_words);
   43046:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   43048:	4628      	mov	r0, r5
   4304a:	f7ff ffde 	bl	4300a <uECC_vli_rshift1>
	if (carry) {
   4304e:	b146      	cbz	r6, 43062 <vli_modInv_update+0x3e>
		uv[num_words - 1] |= HIGH_BIT_SET;
   43050:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   43054:	3c01      	subs	r4, #1
   43056:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   4305a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   4305e:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
}
   43062:	bd70      	pop	{r4, r5, r6, pc}

00043064 <uECC_vli_mult>:
	for (k = 0; k < num_words; ++k) {
   43064:	f04f 0c00 	mov.w	ip, #0
{
   43068:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uECC_word_t r1 = 0;
   4306c:	4665      	mov	r5, ip
	uECC_word_t r0 = 0;
   4306e:	4664      	mov	r4, ip
	for (k = 0; k < num_words; ++k) {
   43070:	fa4f f98c 	sxtb.w	r9, ip
   43074:	454b      	cmp	r3, r9
   43076:	dc16      	bgt.n	430a6 <uECC_vli_mult+0x42>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   43078:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   4307c:	eb06 0643 	add.w	r6, r6, r3, lsl #1
   43080:	9601      	str	r6, [sp, #4]
   43082:	f04f 0800 	mov.w	r8, #0
   43086:	9f01      	ldr	r7, [sp, #4]
   43088:	fa53 fe88 	uxtab	lr, r3, r8
   4308c:	fa4f fe8e 	sxtb.w	lr, lr
   43090:	45be      	cmp	lr, r7
   43092:	fa5f f688 	uxtb.w	r6, r8
   43096:	db28      	blt.n	430ea <uECC_vli_mult+0x86>
	result[num_words * 2 - 1] = r0;
   43098:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   4309c:	f840 4c04 	str.w	r4, [r0, #-4]
}
   430a0:	b003      	add	sp, #12
   430a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (k = 0; k < num_words; ++k) {
   430a6:	f04f 0e00 	mov.w	lr, #0
   430aa:	eb02 0a8c 	add.w	sl, r2, ip, lsl #2
   430ae:	46f0      	mov	r8, lr
	uECC_dword_t p = (uECC_dword_t)a * b;
   430b0:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   430b4:	f85a 6904 	ldr.w	r6, [sl], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   430b8:	fba6 6707 	umull	r6, r7, r6, r7
   430bc:	1936      	adds	r6, r6, r4
		for (i = 0; i <= k; ++i) {
   430be:	f10e 0e01 	add.w	lr, lr, #1
   430c2:	416f      	adcs	r7, r5
	*r0 = (uECC_word_t)r01;
   430c4:	4634      	mov	r4, r6
		for (i = 0; i <= k; ++i) {
   430c6:	fa4f f68e 	sxtb.w	r6, lr
   430ca:	f04f 0b00 	mov.w	fp, #0
   430ce:	bf28      	it	cs
   430d0:	f04f 0b01 	movcs.w	fp, #1
   430d4:	454e      	cmp	r6, r9
	*r2 += (r01 < p);
   430d6:	44d8      	add	r8, fp
	*r1 = r01 >> uECC_WORD_BITS;
   430d8:	463d      	mov	r5, r7
		for (i = 0; i <= k; ++i) {
   430da:	dde9      	ble.n	430b0 <uECC_vli_mult+0x4c>
		result[k] = r0;
   430dc:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	*r2 += (r01 < p);
   430e0:	4645      	mov	r5, r8
   430e2:	f10c 0c01 	add.w	ip, ip, #1
	*r1 = r01 >> uECC_WORD_BITS;
   430e6:	463c      	mov	r4, r7
   430e8:	e7c2      	b.n	43070 <uECC_vli_mult+0xc>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   430ea:	3601      	adds	r6, #1
   430ec:	46a9      	mov	r9, r5
   430ee:	b276      	sxtb	r6, r6
   430f0:	eb02 0a8e 	add.w	sl, r2, lr, lsl #2
   430f4:	2500      	movs	r5, #0
   430f6:	b277      	sxtb	r7, r6
   430f8:	42bb      	cmp	r3, r7
   430fa:	dc05      	bgt.n	43108 <uECC_vli_mult+0xa4>
		result[k] = r0;
   430fc:	f840 402e 	str.w	r4, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   43100:	f108 0801 	add.w	r8, r8, #1
		result[k] = r0;
   43104:	464c      	mov	r4, r9
   43106:	e7be      	b.n	43086 <uECC_vli_mult+0x22>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   43108:	f06f 0703 	mvn.w	r7, #3
   4310c:	4377      	muls	r7, r6
	uECC_dword_t p = (uECC_dword_t)a * b;
   4310e:	f851 c026 	ldr.w	ip, [r1, r6, lsl #2]
   43112:	f85a 7007 	ldr.w	r7, [sl, r7]
   43116:	fba7 7c0c 	umull	r7, ip, r7, ip
   4311a:	193f      	adds	r7, r7, r4
   4311c:	eb5c 0c09 	adcs.w	ip, ip, r9
   43120:	f04f 0b00 	mov.w	fp, #0
   43124:	bf28      	it	cs
   43126:	f04f 0b01 	movcs.w	fp, #1
	*r2 += (r01 < p);
   4312a:	445d      	add	r5, fp
	*r1 = r01 >> uECC_WORD_BITS;
   4312c:	46e1      	mov	r9, ip
	*r0 = (uECC_word_t)r01;
   4312e:	463c      	mov	r4, r7
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   43130:	3601      	adds	r6, #1
   43132:	e7e0      	b.n	430f6 <uECC_vli_mult+0x92>

00043134 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   43134:	2300      	movs	r3, #0
{
   43136:	b510      	push	{r4, lr}
		 vli[i] = 0;
   43138:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   4313a:	b25a      	sxtb	r2, r3
   4313c:	4291      	cmp	r1, r2
   4313e:	dc00      	bgt.n	43142 <uECC_vli_clear+0xe>
}
   43140:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   43142:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   43146:	3301      	adds	r3, #1
   43148:	e7f7      	b.n	4313a <uECC_vli_clear+0x6>

0004314a <uECC_vli_isZero>:
{
   4314a:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   4314c:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   4314e:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   43150:	b25c      	sxtb	r4, r3
   43152:	42a1      	cmp	r1, r4
   43154:	dc03      	bgt.n	4315e <uECC_vli_isZero+0x14>
}
   43156:	fab2 f082 	clz	r0, r2
   4315a:	0940      	lsrs	r0, r0, #5
   4315c:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   4315e:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   43162:	3301      	adds	r3, #1
   43164:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   43166:	e7f3      	b.n	43150 <uECC_vli_isZero+0x6>

00043168 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   43168:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   4316a:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   4316c:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   43170:	f001 011f 	and.w	r1, r1, #31
   43174:	408b      	lsls	r3, r1
}
   43176:	4018      	ands	r0, r3
   43178:	4770      	bx	lr

0004317a <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   4317a:	1e4b      	subs	r3, r1, #1
{
   4317c:	b510      	push	{r4, lr}
   4317e:	b25b      	sxtb	r3, r3
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   43180:	1d04      	adds	r4, r0, #4
   43182:	061a      	lsls	r2, r3, #24
   43184:	d403      	bmi.n	4318e <uECC_vli_numBits+0x14>
   43186:	1e5a      	subs	r2, r3, #1
   43188:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
   4318c:	b171      	cbz	r1, 431ac <uECC_vli_numBits+0x32>
	return (i + 1);
   4318e:	3301      	adds	r3, #1
   43190:	b25b      	sxtb	r3, r3
	if (num_digits == 0) {
   43192:	b183      	cbz	r3, 431b6 <uECC_vli_numBits+0x3c>
	digit = vli[num_digits - 1];
   43194:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   43198:	3a01      	subs	r2, #1
   4319a:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
	for (i = 0; digit; ++i) {
   4319e:	2200      	movs	r2, #0
   431a0:	b931      	cbnz	r1, 431b0 <uECC_vli_numBits+0x36>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   431a2:	3b01      	subs	r3, #1
   431a4:	eb02 1243 	add.w	r2, r2, r3, lsl #5
   431a8:	b210      	sxth	r0, r2
}
   431aa:	bd10      	pop	{r4, pc}
   431ac:	4613      	mov	r3, r2
   431ae:	e7e8      	b.n	43182 <uECC_vli_numBits+0x8>
		digit >>= 1;
   431b0:	0849      	lsrs	r1, r1, #1
	for (i = 0; digit; ++i) {
   431b2:	3201      	adds	r2, #1
   431b4:	e7f4      	b.n	431a0 <uECC_vli_numBits+0x26>
		return 0;
   431b6:	4618      	mov	r0, r3
   431b8:	e7f7      	b.n	431aa <uECC_vli_numBits+0x30>

000431ba <uECC_vli_set>:
{
   431ba:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   431bc:	2300      	movs	r3, #0
   431be:	b25c      	sxtb	r4, r3
   431c0:	42a2      	cmp	r2, r4
   431c2:	dc00      	bgt.n	431c6 <uECC_vli_set+0xc>
}
   431c4:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   431c6:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   431ca:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   431ce:	3301      	adds	r3, #1
   431d0:	e7f5      	b.n	431be <uECC_vli_set+0x4>

000431d2 <uECC_vli_cmp_unsafe>:
{
   431d2:	b510      	push	{r4, lr}
	for (i = num_words - 1; i >= 0; --i) {
   431d4:	3a01      	subs	r2, #1
   431d6:	b252      	sxtb	r2, r2
   431d8:	0613      	lsls	r3, r2, #24
   431da:	d501      	bpl.n	431e0 <uECC_vli_cmp_unsafe+0xe>
	return 0;
   431dc:	2000      	movs	r0, #0
}
   431de:	bd10      	pop	{r4, pc}
		if (left[i] > right[i]) {
   431e0:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   431e4:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
   431e8:	429c      	cmp	r4, r3
   431ea:	d805      	bhi.n	431f8 <uECC_vli_cmp_unsafe+0x26>
		} else if (left[i] < right[i]) {
   431ec:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
   431f0:	d2f2      	bcs.n	431d8 <uECC_vli_cmp_unsafe+0x6>
			return -1;
   431f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   431f6:	e7f2      	b.n	431de <uECC_vli_cmp_unsafe+0xc>
			return 1;
   431f8:	2001      	movs	r0, #1
   431fa:	e7f0      	b.n	431de <uECC_vli_cmp_unsafe+0xc>

000431fc <uECC_vli_equal>:
{
   431fc:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   431fe:	3a01      	subs	r2, #1
   43200:	b252      	sxtb	r2, r2
	uECC_word_t diff = 0;
   43202:	2300      	movs	r3, #0
	for (i = num_words - 1; i >= 0; --i) {
   43204:	0614      	lsls	r4, r2, #24
   43206:	d503      	bpl.n	43210 <uECC_vli_equal+0x14>
}
   43208:	1e18      	subs	r0, r3, #0
   4320a:	bf18      	it	ne
   4320c:	2001      	movne	r0, #1
   4320e:	bd30      	pop	{r4, r5, pc}
		diff |= (left[i] ^ right[i]);
   43210:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   43214:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   43218:	406c      	eors	r4, r5
   4321a:	4323      	orrs	r3, r4
	for (i = num_words - 1; i >= 0; --i) {
   4321c:	3a01      	subs	r2, #1
   4321e:	e7f1      	b.n	43204 <uECC_vli_equal+0x8>

00043220 <uECC_vli_sub>:
{
   43220:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   43222:	2400      	movs	r4, #0
{
   43224:	4606      	mov	r6, r0
   43226:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   43228:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   4322a:	b265      	sxtb	r5, r4
   4322c:	4565      	cmp	r5, ip
   4322e:	db00      	blt.n	43232 <uECC_vli_sub+0x12>
}
   43230:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   43232:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   43236:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   4323a:	1a3d      	subs	r5, r7, r0
   4323c:	1aed      	subs	r5, r5, r3
	return (p_true*(cond)) | (p_false*(!cond));
   4323e:	42af      	cmp	r7, r5
   43240:	f000 0001 	and.w	r0, r0, #1
   43244:	bf18      	it	ne
   43246:	2000      	movne	r0, #0
		result[i] = diff;
   43248:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   4324c:	bf38      	it	cc
   4324e:	f040 0001 	orrcc.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   43252:	3401      	adds	r4, #1
   43254:	e7e9      	b.n	4322a <uECC_vli_sub+0xa>

00043256 <uECC_vli_modAdd>:
{
   43256:	b570      	push	{r4, r5, r6, lr}
   43258:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   4325c:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   4325e:	4633      	mov	r3, r6
{
   43260:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   43262:	f7ff feb8 	bl	42fd6 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   43266:	b930      	cbnz	r0, 43276 <uECC_vli_modAdd+0x20>
   43268:	4632      	mov	r2, r6
   4326a:	4621      	mov	r1, r4
   4326c:	4628      	mov	r0, r5
   4326e:	f7ff ffb0 	bl	431d2 <uECC_vli_cmp_unsafe>
   43272:	2801      	cmp	r0, #1
   43274:	d007      	beq.n	43286 <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   43276:	4633      	mov	r3, r6
   43278:	462a      	mov	r2, r5
   4327a:	4621      	mov	r1, r4
   4327c:	4620      	mov	r0, r4
}
   4327e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   43282:	f7ff bfcd 	b.w	43220 <uECC_vli_sub>
}
   43286:	bd70      	pop	{r4, r5, r6, pc}

00043288 <uECC_vli_modSub>:
{
   43288:	b570      	push	{r4, r5, r6, lr}
   4328a:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   4328e:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   43290:	4633      	mov	r3, r6
{
   43292:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   43294:	f7ff ffc4 	bl	43220 <uECC_vli_sub>
	if (l_borrow) {
   43298:	b138      	cbz	r0, 432aa <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   4329a:	4633      	mov	r3, r6
   4329c:	462a      	mov	r2, r5
   4329e:	4621      	mov	r1, r4
   432a0:	4620      	mov	r0, r4
}
   432a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   432a6:	f7ff be96 	b.w	42fd6 <uECC_vli_add>
}
   432aa:	bd70      	pop	{r4, r5, r6, pc}

000432ac <uECC_vli_mmod>:
{
   432ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   432b0:	b0a5      	sub	sp, #148	; 0x94
   432b2:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   432b4:	ab14      	add	r3, sp, #80	; 0x50
   432b6:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   432ba:	9001      	str	r0, [sp, #4]
			   uECC_vli_numBits(mod, num_words);
   432bc:	4629      	mov	r1, r5
   432be:	4610      	mov	r0, r2
{
   432c0:	4617      	mov	r7, r2
			   uECC_vli_numBits(mod, num_words);
   432c2:	f7ff ff5a 	bl	4317a <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   432c6:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   432ca:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   432cc:	2c00      	cmp	r4, #0
   432ce:	4621      	mov	r1, r4
   432d0:	bfb8      	it	lt
   432d2:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   432d6:	4263      	negs	r3, r4
   432d8:	f003 031f 	and.w	r3, r3, #31
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   432dc:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   432e0:	f004 061f 	and.w	r6, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
   432e4:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   432e6:	bf58      	it	pl
   432e8:	425e      	negpl	r6, r3
	uECC_vli_clear(mod_multiple, word_shift);
   432ea:	f7ff ff23 	bl	43134 <uECC_vli_clear>
	if (bit_shift > 0) {
   432ee:	2e00      	cmp	r6, #0
   432f0:	ea4f 0081 	mov.w	r0, r1, lsl #2
   432f4:	dd2d      	ble.n	43352 <uECC_vli_mmod+0xa6>
   432f6:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   432f8:	2200      	movs	r2, #0
   432fa:	4418      	add	r0, r3
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   432fc:	f1c6 0e20 	rsb	lr, r6, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   43300:	4613      	mov	r3, r2
   43302:	429d      	cmp	r5, r3
   43304:	d81a      	bhi.n	4333c <uECC_vli_mmod+0x90>
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   43306:	ab04      	add	r3, sp, #16
   43308:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   4330c:	9300      	str	r3, [sp, #0]
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   4330e:	1e6f      	subs	r7, r5, #1
   43310:	ab24      	add	r3, sp, #144	; 0x90
		for (i = 0; i < num_words * 2; ++i) {
   43312:	ea4f 0845 	mov.w	r8, r5, lsl #1
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   43316:	ea4f 0985 	mov.w	r9, r5, lsl #2
   4331a:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   4331c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   43320:	2c00      	cmp	r4, #0
   43322:	da53      	bge.n	433cc <uECC_vli_mmod+0x120>
	uECC_vli_set(result, v[index], num_words);
   43324:	ab24      	add	r3, sp, #144	; 0x90
   43326:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   4332a:	9801      	ldr	r0, [sp, #4]
   4332c:	f856 1c88 	ldr.w	r1, [r6, #-136]
   43330:	462a      	mov	r2, r5
   43332:	f7ff ff42 	bl	431ba <uECC_vli_set>
}
   43336:	b025      	add	sp, #148	; 0x94
   43338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   4333c:	f857 c023 	ldr.w	ip, [r7, r3, lsl #2]
   43340:	fa0c f106 	lsl.w	r1, ip, r6
   43344:	430a      	orrs	r2, r1
   43346:	f840 2b04 	str.w	r2, [r0], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   4334a:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   4334c:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   43350:	e7d7      	b.n	43302 <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   43352:	ab04      	add	r3, sp, #16
   43354:	462a      	mov	r2, r5
   43356:	4639      	mov	r1, r7
   43358:	4418      	add	r0, r3
   4335a:	f7ff ff2e 	bl	431ba <uECC_vli_set>
   4335e:	e7d2      	b.n	43306 <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   43360:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   43364:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   43368:	ab24      	add	r3, sp, #144	; 0x90
   4336a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   4336e:	f10c 0c01 	add.w	ip, ip, #1
   43372:	f853 3c80 	ldr.w	r3, [r3, #-128]
   43376:	440b      	add	r3, r1
   43378:	1ad3      	subs	r3, r2, r3
   4337a:	bf34      	ite	cc
   4337c:	f04f 0b01 	movcc.w	fp, #1
   43380:	f04f 0b00 	movcs.w	fp, #0
			if (diff != v[index][i]) {
   43384:	429a      	cmp	r2, r3
			v[1 - index][i] = diff;
   43386:	f85e 2c88 	ldr.w	r2, [lr, #-136]
   4338a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
				borrow = (diff > v[index][i]);
   4338e:	bf18      	it	ne
   43390:	4659      	movne	r1, fp
		for (i = 0; i < num_words * 2; ++i) {
   43392:	fa4f f08c 	sxtb.w	r0, ip
   43396:	4540      	cmp	r0, r8
   43398:	dbe2      	blt.n	43360 <uECC_vli_mmod+0xb4>
		index = !(index ^ borrow);
   4339a:	1a73      	subs	r3, r6, r1
   4339c:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   4339e:	4629      	mov	r1, r5
   433a0:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   433a2:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   433a4:	f7ff fe31 	bl	4300a <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   433a8:	f109 0390 	add.w	r3, r9, #144	; 0x90
   433ac:	446b      	add	r3, sp
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   433ae:	9800      	ldr	r0, [sp, #0]
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   433b0:	f853 2c80 	ldr.w	r2, [r3, #-128]
   433b4:	f857 3c80 	ldr.w	r3, [r7, #-128]
   433b8:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
   433bc:	f847 3c80 	str.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   433c0:	4629      	mov	r1, r5
   433c2:	3c01      	subs	r4, #1
   433c4:	f7ff fe21 	bl	4300a <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   433c8:	b224      	sxth	r4, r4
   433ca:	e7a9      	b.n	43320 <uECC_vli_mmod+0x74>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   433cc:	ab24      	add	r3, sp, #144	; 0x90
   433ce:	f04f 0c00 	mov.w	ip, #0
			v[1 - index][i] = diff;
   433d2:	f1c6 0e01 	rsb	lr, r6, #1
		uECC_word_t borrow = 0;
   433d6:	4661      	mov	r1, ip
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   433d8:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   433dc:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
   433e0:	e7d7      	b.n	43392 <uECC_vli_mmod+0xe6>

000433e2 <uECC_vli_modMult_fast>:
{
   433e2:	b530      	push	{r4, r5, lr}
   433e4:	461c      	mov	r4, r3
   433e6:	b091      	sub	sp, #68	; 0x44
   433e8:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   433ea:	f993 3000 	ldrsb.w	r3, [r3]
   433ee:	4668      	mov	r0, sp
   433f0:	f7ff fe38 	bl	43064 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   433f4:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   433f8:	4669      	mov	r1, sp
   433fa:	4628      	mov	r0, r5
   433fc:	4798      	blx	r3
}
   433fe:	b011      	add	sp, #68	; 0x44
   43400:	bd30      	pop	{r4, r5, pc}

00043402 <uECC_vli_modSquare_fast>:
{
   43402:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   43404:	460a      	mov	r2, r1
   43406:	f7ff bfec 	b.w	433e2 <uECC_vli_modMult_fast>

0004340a <double_jacobian_default>:
{
   4340a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   4340e:	f993 6000 	ldrsb.w	r6, [r3]
{
   43412:	b092      	sub	sp, #72	; 0x48
   43414:	4604      	mov	r4, r0
   43416:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   43418:	4610      	mov	r0, r2
   4341a:	4631      	mov	r1, r6
{
   4341c:	4615      	mov	r5, r2
   4341e:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   43420:	f7ff fe93 	bl	4314a <uECC_vli_isZero>
   43424:	2800      	cmp	r0, #0
   43426:	f040 8091 	bne.w	4354c <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   4342a:	463a      	mov	r2, r7
   4342c:	4649      	mov	r1, r9
   4342e:	a802      	add	r0, sp, #8
   43430:	f7ff ffe7 	bl	43402 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   43434:	463b      	mov	r3, r7
   43436:	aa02      	add	r2, sp, #8
   43438:	4621      	mov	r1, r4
   4343a:	a80a      	add	r0, sp, #40	; 0x28
   4343c:	f7ff ffd1 	bl	433e2 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   43440:	a902      	add	r1, sp, #8
   43442:	4608      	mov	r0, r1
   43444:	463a      	mov	r2, r7
   43446:	f7ff ffdc 	bl	43402 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   4344a:	463b      	mov	r3, r7
   4344c:	462a      	mov	r2, r5
   4344e:	4649      	mov	r1, r9
   43450:	4648      	mov	r0, r9
   43452:	f7ff ffc6 	bl	433e2 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   43456:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   4345a:	463a      	mov	r2, r7
   4345c:	4629      	mov	r1, r5
   4345e:	4628      	mov	r0, r5
   43460:	f7ff ffcf 	bl	43402 <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   43464:	4643      	mov	r3, r8
   43466:	462a      	mov	r2, r5
   43468:	4621      	mov	r1, r4
   4346a:	4620      	mov	r0, r4
   4346c:	9600      	str	r6, [sp, #0]
   4346e:	f7ff fef2 	bl	43256 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   43472:	4643      	mov	r3, r8
   43474:	462a      	mov	r2, r5
   43476:	4629      	mov	r1, r5
   43478:	4628      	mov	r0, r5
   4347a:	9600      	str	r6, [sp, #0]
   4347c:	f7ff feeb 	bl	43256 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   43480:	4643      	mov	r3, r8
   43482:	462a      	mov	r2, r5
   43484:	4621      	mov	r1, r4
   43486:	4628      	mov	r0, r5
   43488:	9600      	str	r6, [sp, #0]
   4348a:	f7ff fefd 	bl	43288 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   4348e:	463b      	mov	r3, r7
   43490:	462a      	mov	r2, r5
   43492:	4621      	mov	r1, r4
   43494:	4620      	mov	r0, r4
   43496:	f7ff ffa4 	bl	433e2 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   4349a:	4643      	mov	r3, r8
   4349c:	4622      	mov	r2, r4
   4349e:	4621      	mov	r1, r4
   434a0:	4628      	mov	r0, r5
   434a2:	9600      	str	r6, [sp, #0]
   434a4:	f7ff fed7 	bl	43256 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   434a8:	4643      	mov	r3, r8
   434aa:	9600      	str	r6, [sp, #0]
   434ac:	462a      	mov	r2, r5
   434ae:	4621      	mov	r1, r4
   434b0:	4620      	mov	r0, r4
   434b2:	f7ff fed0 	bl	43256 <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   434b6:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   434b8:	07db      	lsls	r3, r3, #31
   434ba:	d54a      	bpl.n	43552 <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   434bc:	4633      	mov	r3, r6
   434be:	4642      	mov	r2, r8
   434c0:	4621      	mov	r1, r4
   434c2:	4620      	mov	r0, r4
   434c4:	f7ff fd87 	bl	42fd6 <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   434c8:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   434ca:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   434cc:	4620      	mov	r0, r4
   434ce:	f7ff fd9c 	bl	4300a <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   434d2:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   434d6:	3b01      	subs	r3, #1
   434d8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   434dc:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   434e0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   434e4:	463a      	mov	r2, r7
   434e6:	4621      	mov	r1, r4
   434e8:	4628      	mov	r0, r5
   434ea:	f7ff ff8a 	bl	43402 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   434ee:	4643      	mov	r3, r8
   434f0:	aa0a      	add	r2, sp, #40	; 0x28
   434f2:	4629      	mov	r1, r5
   434f4:	4628      	mov	r0, r5
   434f6:	9600      	str	r6, [sp, #0]
   434f8:	f7ff fec6 	bl	43288 <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   434fc:	4643      	mov	r3, r8
   434fe:	aa0a      	add	r2, sp, #40	; 0x28
   43500:	4629      	mov	r1, r5
   43502:	4628      	mov	r0, r5
   43504:	9600      	str	r6, [sp, #0]
   43506:	f7ff febf 	bl	43288 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   4350a:	a90a      	add	r1, sp, #40	; 0x28
   4350c:	4608      	mov	r0, r1
   4350e:	4643      	mov	r3, r8
   43510:	462a      	mov	r2, r5
   43512:	9600      	str	r6, [sp, #0]
   43514:	f7ff feb8 	bl	43288 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   43518:	463b      	mov	r3, r7
   4351a:	aa0a      	add	r2, sp, #40	; 0x28
   4351c:	4621      	mov	r1, r4
   4351e:	4620      	mov	r0, r4
   43520:	f7ff ff5f 	bl	433e2 <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   43524:	aa02      	add	r2, sp, #8
   43526:	4643      	mov	r3, r8
   43528:	4610      	mov	r0, r2
   4352a:	4621      	mov	r1, r4
   4352c:	9600      	str	r6, [sp, #0]
   4352e:	f7ff feab 	bl	43288 <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   43532:	4632      	mov	r2, r6
   43534:	4629      	mov	r1, r5
   43536:	4620      	mov	r0, r4
   43538:	f7ff fe3f 	bl	431ba <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   4353c:	4649      	mov	r1, r9
   4353e:	4628      	mov	r0, r5
   43540:	f7ff fe3b 	bl	431ba <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   43544:	a902      	add	r1, sp, #8
   43546:	4648      	mov	r0, r9
   43548:	f7ff fe37 	bl	431ba <uECC_vli_set>
}
   4354c:	b012      	add	sp, #72	; 0x48
   4354e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   43552:	4631      	mov	r1, r6
   43554:	4620      	mov	r0, r4
   43556:	f7ff fd58 	bl	4300a <uECC_vli_rshift1>
   4355a:	e7c3      	b.n	434e4 <double_jacobian_default+0xda>

0004355c <x_side_default>:
{
   4355c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   43560:	4615      	mov	r5, r2
   43562:	b08a      	sub	sp, #40	; 0x28
   43564:	4604      	mov	r4, r0
   43566:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   43568:	221c      	movs	r2, #28
   4356a:	2100      	movs	r1, #0
   4356c:	a803      	add	r0, sp, #12
   4356e:	f000 fede 	bl	4432e <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   43572:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   43574:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   43578:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   4357a:	462a      	mov	r2, r5
   4357c:	4631      	mov	r1, r6
   4357e:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   43580:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   43582:	f7ff ff3e 	bl	43402 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   43586:	463b      	mov	r3, r7
   43588:	aa02      	add	r2, sp, #8
   4358a:	4621      	mov	r1, r4
   4358c:	4620      	mov	r0, r4
   4358e:	f8cd 8000 	str.w	r8, [sp]
   43592:	f7ff fe79 	bl	43288 <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   43596:	462b      	mov	r3, r5
   43598:	4632      	mov	r2, r6
   4359a:	4621      	mov	r1, r4
   4359c:	4620      	mov	r0, r4
   4359e:	f7ff ff20 	bl	433e2 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   435a2:	f8cd 8000 	str.w	r8, [sp]
   435a6:	463b      	mov	r3, r7
   435a8:	f105 0284 	add.w	r2, r5, #132	; 0x84
   435ac:	4621      	mov	r1, r4
   435ae:	4620      	mov	r0, r4
   435b0:	f7ff fe51 	bl	43256 <uECC_vli_modAdd>
}
   435b4:	b00a      	add	sp, #40	; 0x28
   435b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000435ba <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   435ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   435be:	b09a      	sub	sp, #104	; 0x68
   435c0:	4616      	mov	r6, r2
   435c2:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   435c6:	4644      	mov	r4, r8
{
   435c8:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   435ca:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   435ce:	9500      	str	r5, [sp, #0]
{
   435d0:	4607      	mov	r7, r0
   435d2:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   435d4:	4623      	mov	r3, r4
   435d6:	4602      	mov	r2, r0
   435d8:	4631      	mov	r1, r6
   435da:	a802      	add	r0, sp, #8
   435dc:	f7ff fe54 	bl	43288 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   435e0:	a902      	add	r1, sp, #8
   435e2:	4642      	mov	r2, r8
   435e4:	4608      	mov	r0, r1
   435e6:	f7ff ff0c 	bl	43402 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   435ea:	4643      	mov	r3, r8
   435ec:	aa02      	add	r2, sp, #8
   435ee:	4639      	mov	r1, r7
   435f0:	4638      	mov	r0, r7
   435f2:	f7ff fef6 	bl	433e2 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   435f6:	4643      	mov	r3, r8
   435f8:	aa02      	add	r2, sp, #8
   435fa:	4631      	mov	r1, r6
   435fc:	4630      	mov	r0, r6
   435fe:	f7ff fef0 	bl	433e2 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   43602:	4623      	mov	r3, r4
   43604:	4652      	mov	r2, sl
   43606:	4649      	mov	r1, r9
   43608:	a802      	add	r0, sp, #8
   4360a:	9500      	str	r5, [sp, #0]
   4360c:	f7ff fe23 	bl	43256 <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   43610:	4623      	mov	r3, r4
   43612:	4652      	mov	r2, sl
   43614:	4649      	mov	r1, r9
   43616:	4648      	mov	r0, r9
   43618:	9500      	str	r5, [sp, #0]
   4361a:	f7ff fe35 	bl	43288 <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   4361e:	4623      	mov	r3, r4
   43620:	463a      	mov	r2, r7
   43622:	4631      	mov	r1, r6
   43624:	a80a      	add	r0, sp, #40	; 0x28
   43626:	9500      	str	r5, [sp, #0]
   43628:	f7ff fe2e 	bl	43288 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   4362c:	4643      	mov	r3, r8
   4362e:	aa0a      	add	r2, sp, #40	; 0x28
   43630:	4651      	mov	r1, sl
   43632:	4650      	mov	r0, sl
   43634:	f7ff fed5 	bl	433e2 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   43638:	4623      	mov	r3, r4
   4363a:	4632      	mov	r2, r6
   4363c:	4639      	mov	r1, r7
   4363e:	a80a      	add	r0, sp, #40	; 0x28
   43640:	9500      	str	r5, [sp, #0]
   43642:	f7ff fe08 	bl	43256 <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   43646:	4642      	mov	r2, r8
   43648:	4649      	mov	r1, r9
   4364a:	4630      	mov	r0, r6
   4364c:	f7ff fed9 	bl	43402 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   43650:	4623      	mov	r3, r4
   43652:	aa0a      	add	r2, sp, #40	; 0x28
   43654:	4631      	mov	r1, r6
   43656:	4630      	mov	r0, r6
   43658:	9500      	str	r5, [sp, #0]
   4365a:	f7ff fe15 	bl	43288 <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   4365e:	4623      	mov	r3, r4
   43660:	4632      	mov	r2, r6
   43662:	4639      	mov	r1, r7
   43664:	a812      	add	r0, sp, #72	; 0x48
   43666:	9500      	str	r5, [sp, #0]
   43668:	f7ff fe0e 	bl	43288 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   4366c:	4643      	mov	r3, r8
   4366e:	aa12      	add	r2, sp, #72	; 0x48
   43670:	4649      	mov	r1, r9
   43672:	4648      	mov	r0, r9
   43674:	f7ff feb5 	bl	433e2 <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   43678:	4623      	mov	r3, r4
   4367a:	4652      	mov	r2, sl
   4367c:	4649      	mov	r1, r9
   4367e:	4648      	mov	r0, r9
   43680:	9500      	str	r5, [sp, #0]
   43682:	f7ff fe01 	bl	43288 <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   43686:	4642      	mov	r2, r8
   43688:	a902      	add	r1, sp, #8
   4368a:	a812      	add	r0, sp, #72	; 0x48
   4368c:	f7ff feb9 	bl	43402 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   43690:	a912      	add	r1, sp, #72	; 0x48
   43692:	4623      	mov	r3, r4
   43694:	aa0a      	add	r2, sp, #40	; 0x28
   43696:	4608      	mov	r0, r1
   43698:	9500      	str	r5, [sp, #0]
   4369a:	f7ff fdf5 	bl	43288 <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   4369e:	4623      	mov	r3, r4
   436a0:	463a      	mov	r2, r7
   436a2:	a912      	add	r1, sp, #72	; 0x48
   436a4:	a80a      	add	r0, sp, #40	; 0x28
   436a6:	9500      	str	r5, [sp, #0]
   436a8:	f7ff fdee 	bl	43288 <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   436ac:	a90a      	add	r1, sp, #40	; 0x28
   436ae:	4643      	mov	r3, r8
   436b0:	aa02      	add	r2, sp, #8
   436b2:	4608      	mov	r0, r1
   436b4:	f7ff fe95 	bl	433e2 <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   436b8:	4623      	mov	r3, r4
   436ba:	4652      	mov	r2, sl
   436bc:	a90a      	add	r1, sp, #40	; 0x28
   436be:	4650      	mov	r0, sl
   436c0:	9500      	str	r5, [sp, #0]
   436c2:	f7ff fde1 	bl	43288 <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   436c6:	462a      	mov	r2, r5
   436c8:	a912      	add	r1, sp, #72	; 0x48
   436ca:	4638      	mov	r0, r7
   436cc:	f7ff fd75 	bl	431ba <uECC_vli_set>
}
   436d0:	b01a      	add	sp, #104	; 0x68
   436d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000436d6 <uECC_vli_modInv>:
{
   436d6:	b5f0      	push	{r4, r5, r6, r7, lr}
   436d8:	460f      	mov	r7, r1
   436da:	b0a1      	sub	sp, #132	; 0x84
   436dc:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   436de:	4619      	mov	r1, r3
   436e0:	4638      	mov	r0, r7
{
   436e2:	4615      	mov	r5, r2
   436e4:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   436e6:	f7ff fd30 	bl	4314a <uECC_vli_isZero>
   436ea:	b128      	cbz	r0, 436f8 <uECC_vli_modInv+0x22>
		uECC_vli_clear(result, num_words);
   436ec:	4630      	mov	r0, r6
}
   436ee:	b021      	add	sp, #132	; 0x84
   436f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		uECC_vli_clear(result, num_words);
   436f4:	f7ff bd1e 	b.w	43134 <uECC_vli_clear>
	uECC_vli_set(a, input, num_words);
   436f8:	4622      	mov	r2, r4
   436fa:	4639      	mov	r1, r7
   436fc:	4668      	mov	r0, sp
   436fe:	f7ff fd5c 	bl	431ba <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   43702:	4629      	mov	r1, r5
   43704:	a808      	add	r0, sp, #32
   43706:	f7ff fd58 	bl	431ba <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   4370a:	a810      	add	r0, sp, #64	; 0x40
   4370c:	4621      	mov	r1, r4
   4370e:	f7ff fd11 	bl	43134 <uECC_vli_clear>
	u[0] = 1;
   43712:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   43714:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   43716:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   43718:	f7ff fd0c 	bl	43134 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   4371c:	4622      	mov	r2, r4
   4371e:	a908      	add	r1, sp, #32
   43720:	4668      	mov	r0, sp
   43722:	f7ff fd56 	bl	431d2 <uECC_vli_cmp_unsafe>
   43726:	b930      	cbnz	r0, 43736 <uECC_vli_modInv+0x60>
  	uECC_vli_set(result, u, num_words);
   43728:	4622      	mov	r2, r4
   4372a:	a910      	add	r1, sp, #64	; 0x40
   4372c:	4630      	mov	r0, r6
   4372e:	f7ff fd44 	bl	431ba <uECC_vli_set>
}
   43732:	b021      	add	sp, #132	; 0x84
   43734:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (EVEN(a)) {
   43736:	9b00      	ldr	r3, [sp, #0]
   43738:	07da      	lsls	r2, r3, #31
   4373a:	d409      	bmi.n	43750 <uECC_vli_modInv+0x7a>
			uECC_vli_rshift1(a, num_words);
   4373c:	4621      	mov	r1, r4
   4373e:	4668      	mov	r0, sp
   43740:	f7ff fc63 	bl	4300a <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   43744:	4622      	mov	r2, r4
   43746:	4629      	mov	r1, r5
   43748:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   4374a:	f7ff fc6b 	bl	43024 <vli_modInv_update>
   4374e:	e7e5      	b.n	4371c <uECC_vli_modInv+0x46>
    		} else if (EVEN(b)) {
   43750:	9b08      	ldr	r3, [sp, #32]
   43752:	07db      	lsls	r3, r3, #31
   43754:	d407      	bmi.n	43766 <uECC_vli_modInv+0x90>
			uECC_vli_rshift1(b, num_words);
   43756:	4621      	mov	r1, r4
   43758:	a808      	add	r0, sp, #32
   4375a:	f7ff fc56 	bl	4300a <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   4375e:	4622      	mov	r2, r4
   43760:	4629      	mov	r1, r5
   43762:	a818      	add	r0, sp, #96	; 0x60
   43764:	e7f1      	b.n	4374a <uECC_vli_modInv+0x74>
		} else if (cmpResult > 0) {
   43766:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   43768:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   4376a:	dd1c      	ble.n	437a6 <uECC_vli_modInv+0xd0>
			uECC_vli_sub(a, a, b, num_words);
   4376c:	aa08      	add	r2, sp, #32
   4376e:	4669      	mov	r1, sp
   43770:	4668      	mov	r0, sp
   43772:	f7ff fd55 	bl	43220 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   43776:	4621      	mov	r1, r4
   43778:	4668      	mov	r0, sp
   4377a:	f7ff fc46 	bl	4300a <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   4377e:	4622      	mov	r2, r4
   43780:	a918      	add	r1, sp, #96	; 0x60
   43782:	a810      	add	r0, sp, #64	; 0x40
   43784:	f7ff fd25 	bl	431d2 <uECC_vli_cmp_unsafe>
   43788:	2800      	cmp	r0, #0
   4378a:	da05      	bge.n	43798 <uECC_vli_modInv+0xc2>
        			uECC_vli_add(u, u, mod, num_words);
   4378c:	a910      	add	r1, sp, #64	; 0x40
   4378e:	4623      	mov	r3, r4
   43790:	462a      	mov	r2, r5
   43792:	4608      	mov	r0, r1
   43794:	f7ff fc1f 	bl	42fd6 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   43798:	a910      	add	r1, sp, #64	; 0x40
   4379a:	4623      	mov	r3, r4
   4379c:	aa18      	add	r2, sp, #96	; 0x60
   4379e:	4608      	mov	r0, r1
   437a0:	f7ff fd3e 	bl	43220 <uECC_vli_sub>
   437a4:	e7ce      	b.n	43744 <uECC_vli_modInv+0x6e>
      			uECC_vli_sub(b, b, a, num_words);
   437a6:	466a      	mov	r2, sp
   437a8:	a808      	add	r0, sp, #32
   437aa:	f7ff fd39 	bl	43220 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   437ae:	4621      	mov	r1, r4
   437b0:	a808      	add	r0, sp, #32
   437b2:	f7ff fc2a 	bl	4300a <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   437b6:	4622      	mov	r2, r4
   437b8:	a910      	add	r1, sp, #64	; 0x40
   437ba:	a818      	add	r0, sp, #96	; 0x60
   437bc:	f7ff fd09 	bl	431d2 <uECC_vli_cmp_unsafe>
   437c0:	2800      	cmp	r0, #0
   437c2:	da05      	bge.n	437d0 <uECC_vli_modInv+0xfa>
        			uECC_vli_add(v, v, mod, num_words);
   437c4:	a918      	add	r1, sp, #96	; 0x60
   437c6:	4623      	mov	r3, r4
   437c8:	462a      	mov	r2, r5
   437ca:	4608      	mov	r0, r1
   437cc:	f7ff fc03 	bl	42fd6 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   437d0:	a918      	add	r1, sp, #96	; 0x60
   437d2:	4623      	mov	r3, r4
   437d4:	aa10      	add	r2, sp, #64	; 0x40
   437d6:	4608      	mov	r0, r1
   437d8:	f7ff fd22 	bl	43220 <uECC_vli_sub>
   437dc:	e7bf      	b.n	4375e <uECC_vli_modInv+0x88>

000437de <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   437de:	7809      	ldrb	r1, [r1, #0]
   437e0:	0049      	lsls	r1, r1, #1
   437e2:	b249      	sxtb	r1, r1
   437e4:	f7ff bcb1 	b.w	4314a <uECC_vli_isZero>

000437e8 <apply_z>:
{
   437e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   437ea:	4615      	mov	r5, r2
   437ec:	b089      	sub	sp, #36	; 0x24
   437ee:	461c      	mov	r4, r3
   437f0:	4607      	mov	r7, r0
   437f2:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   437f4:	461a      	mov	r2, r3
   437f6:	4629      	mov	r1, r5
   437f8:	4668      	mov	r0, sp
   437fa:	f7ff fe02 	bl	43402 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   437fe:	4623      	mov	r3, r4
   43800:	466a      	mov	r2, sp
   43802:	4639      	mov	r1, r7
   43804:	4638      	mov	r0, r7
   43806:	f7ff fdec 	bl	433e2 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   4380a:	4623      	mov	r3, r4
   4380c:	462a      	mov	r2, r5
   4380e:	4669      	mov	r1, sp
   43810:	4668      	mov	r0, sp
   43812:	f7ff fde6 	bl	433e2 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   43816:	4623      	mov	r3, r4
   43818:	466a      	mov	r2, sp
   4381a:	4631      	mov	r1, r6
   4381c:	4630      	mov	r0, r6
   4381e:	f7ff fde0 	bl	433e2 <uECC_vli_modMult_fast>
}
   43822:	b009      	add	sp, #36	; 0x24
   43824:	bdf0      	pop	{r4, r5, r6, r7, pc}

00043826 <XYcZ_add>:
{
   43826:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4382a:	b08a      	sub	sp, #40	; 0x28
   4382c:	4614      	mov	r4, r2
   4382e:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   43832:	4655      	mov	r5, sl
{
   43834:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   43836:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   4383a:	9600      	str	r6, [sp, #0]
{
   4383c:	4680      	mov	r8, r0
   4383e:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   43840:	462b      	mov	r3, r5
   43842:	4602      	mov	r2, r0
   43844:	4621      	mov	r1, r4
   43846:	a802      	add	r0, sp, #8
   43848:	f7ff fd1e 	bl	43288 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   4384c:	a902      	add	r1, sp, #8
   4384e:	4652      	mov	r2, sl
   43850:	4608      	mov	r0, r1
   43852:	f7ff fdd6 	bl	43402 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   43856:	4653      	mov	r3, sl
   43858:	aa02      	add	r2, sp, #8
   4385a:	4641      	mov	r1, r8
   4385c:	4640      	mov	r0, r8
   4385e:	f7ff fdc0 	bl	433e2 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   43862:	4653      	mov	r3, sl
   43864:	aa02      	add	r2, sp, #8
   43866:	4621      	mov	r1, r4
   43868:	4620      	mov	r0, r4
   4386a:	f7ff fdba 	bl	433e2 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   4386e:	462b      	mov	r3, r5
   43870:	464a      	mov	r2, r9
   43872:	4639      	mov	r1, r7
   43874:	4638      	mov	r0, r7
   43876:	9600      	str	r6, [sp, #0]
   43878:	f7ff fd06 	bl	43288 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   4387c:	4652      	mov	r2, sl
   4387e:	4639      	mov	r1, r7
   43880:	a802      	add	r0, sp, #8
   43882:	f7ff fdbe 	bl	43402 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   43886:	a902      	add	r1, sp, #8
   43888:	462b      	mov	r3, r5
   4388a:	4642      	mov	r2, r8
   4388c:	4608      	mov	r0, r1
   4388e:	9600      	str	r6, [sp, #0]
   43890:	f7ff fcfa 	bl	43288 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   43894:	a902      	add	r1, sp, #8
   43896:	462b      	mov	r3, r5
   43898:	4622      	mov	r2, r4
   4389a:	4608      	mov	r0, r1
   4389c:	9600      	str	r6, [sp, #0]
   4389e:	f7ff fcf3 	bl	43288 <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   438a2:	462b      	mov	r3, r5
   438a4:	4642      	mov	r2, r8
   438a6:	4621      	mov	r1, r4
   438a8:	4620      	mov	r0, r4
   438aa:	9600      	str	r6, [sp, #0]
   438ac:	f7ff fcec 	bl	43288 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   438b0:	4653      	mov	r3, sl
   438b2:	4622      	mov	r2, r4
   438b4:	4649      	mov	r1, r9
   438b6:	4648      	mov	r0, r9
   438b8:	f7ff fd93 	bl	433e2 <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   438bc:	462b      	mov	r3, r5
   438be:	aa02      	add	r2, sp, #8
   438c0:	4641      	mov	r1, r8
   438c2:	4620      	mov	r0, r4
   438c4:	9600      	str	r6, [sp, #0]
   438c6:	f7ff fcdf 	bl	43288 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   438ca:	4653      	mov	r3, sl
   438cc:	4622      	mov	r2, r4
   438ce:	4639      	mov	r1, r7
   438d0:	4638      	mov	r0, r7
   438d2:	f7ff fd86 	bl	433e2 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   438d6:	462b      	mov	r3, r5
   438d8:	464a      	mov	r2, r9
   438da:	4639      	mov	r1, r7
   438dc:	4638      	mov	r0, r7
   438de:	9600      	str	r6, [sp, #0]
   438e0:	f7ff fcd2 	bl	43288 <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   438e4:	4632      	mov	r2, r6
   438e6:	a902      	add	r1, sp, #8
   438e8:	4620      	mov	r0, r4
   438ea:	f7ff fc66 	bl	431ba <uECC_vli_set>
}
   438ee:	b00a      	add	sp, #40	; 0x28
   438f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000438f4 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   438f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   438f8:	b0af      	sub	sp, #188	; 0xbc
   438fa:	4691      	mov	r9, r2
   438fc:	9c39      	ldr	r4, [sp, #228]	; 0xe4
   438fe:	9002      	str	r0, [sp, #8]
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   43900:	f994 6000 	ldrsb.w	r6, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   43904:	a816      	add	r0, sp, #88	; 0x58
   43906:	4632      	mov	r2, r6
{
   43908:	461d      	mov	r5, r3
	uECC_vli_set(Rx[1], point, num_words);
   4390a:	f7ff fc56 	bl	431ba <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   4390e:	00b3      	lsls	r3, r6, #2
   43910:	9303      	str	r3, [sp, #12]
   43912:	eb01 0386 	add.w	r3, r1, r6, lsl #2
{
   43916:	4688      	mov	r8, r1
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   43918:	a826      	add	r0, sp, #152	; 0x98
   4391a:	4619      	mov	r1, r3
   4391c:	9304      	str	r3, [sp, #16]
   4391e:	f7ff fc4c 	bl	431ba <uECC_vli_set>
	if (initial_Z) {
   43922:	2d00      	cmp	r5, #0
   43924:	f000 8081 	beq.w	43a2a <EccPoint_mult+0x136>
		uECC_vli_set(z, initial_Z, num_words);
   43928:	4629      	mov	r1, r5
   4392a:	a806      	add	r0, sp, #24
   4392c:	f7ff fc45 	bl	431ba <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   43930:	4632      	mov	r2, r6
   43932:	a916      	add	r1, sp, #88	; 0x58
   43934:	a80e      	add	r0, sp, #56	; 0x38
   43936:	f7ff fc40 	bl	431ba <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   4393a:	a926      	add	r1, sp, #152	; 0x98
   4393c:	a81e      	add	r0, sp, #120	; 0x78
   4393e:	f7ff fc3c 	bl	431ba <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   43942:	4623      	mov	r3, r4
   43944:	aa06      	add	r2, sp, #24
   43946:	a816      	add	r0, sp, #88	; 0x58
   43948:	f7ff ff4e 	bl	437e8 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   4394c:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   43950:	4623      	mov	r3, r4
   43952:	aa06      	add	r2, sp, #24
   43954:	a926      	add	r1, sp, #152	; 0x98
   43956:	a816      	add	r0, sp, #88	; 0x58
   43958:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   4395a:	4623      	mov	r3, r4
   4395c:	aa06      	add	r2, sp, #24
   4395e:	a91e      	add	r1, sp, #120	; 0x78
   43960:	a80e      	add	r0, sp, #56	; 0x38
   43962:	f7ff ff41 	bl	437e8 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   43966:	f9bd 50e0 	ldrsh.w	r5, [sp, #224]	; 0xe0
   4396a:	3d02      	subs	r5, #2
   4396c:	b22d      	sxth	r5, r5
   4396e:	2d00      	cmp	r5, #0
   43970:	dc62      	bgt.n	43a38 <EccPoint_mult+0x144>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   43972:	f8d9 5000 	ldr.w	r5, [r9]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   43976:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   43978:	f005 0701 	and.w	r7, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   4397c:	ab0e      	add	r3, sp, #56	; 0x38
   4397e:	eb03 1947 	add.w	r9, r3, r7, lsl #5
   43982:	43ed      	mvns	r5, r5
   43984:	ab1e      	add	r3, sp, #120	; 0x78
   43986:	eb03 1747 	add.w	r7, r3, r7, lsl #5
   4398a:	f005 0501 	and.w	r5, r5, #1
   4398e:	ab0e      	add	r3, sp, #56	; 0x38
   43990:	eb03 1a45 	add.w	sl, r3, r5, lsl #5
   43994:	ab1e      	add	r3, sp, #120	; 0x78
   43996:	eb03 1545 	add.w	r5, r3, r5, lsl #5
   4399a:	462b      	mov	r3, r5
   4399c:	4652      	mov	r2, sl
   4399e:	4639      	mov	r1, r7
   439a0:	4648      	mov	r0, r9

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   439a2:	f104 0b04 	add.w	fp, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   439a6:	f7ff fe08 	bl	435ba <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   439aa:	465b      	mov	r3, fp
   439ac:	aa0e      	add	r2, sp, #56	; 0x38
   439ae:	a916      	add	r1, sp, #88	; 0x58
   439b0:	a806      	add	r0, sp, #24
   439b2:	9600      	str	r6, [sp, #0]
   439b4:	f7ff fc68 	bl	43288 <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   439b8:	a906      	add	r1, sp, #24
   439ba:	4623      	mov	r3, r4
   439bc:	463a      	mov	r2, r7
   439be:	4608      	mov	r0, r1
   439c0:	f7ff fd0f 	bl	433e2 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   439c4:	a906      	add	r1, sp, #24
   439c6:	4623      	mov	r3, r4
   439c8:	4642      	mov	r2, r8
   439ca:	4608      	mov	r0, r1
   439cc:	f7ff fd09 	bl	433e2 <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   439d0:	a906      	add	r1, sp, #24
   439d2:	4633      	mov	r3, r6
   439d4:	465a      	mov	r2, fp
   439d6:	4608      	mov	r0, r1
   439d8:	f7ff fe7d 	bl	436d6 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   439dc:	a906      	add	r1, sp, #24
   439de:	9a04      	ldr	r2, [sp, #16]
   439e0:	4623      	mov	r3, r4
   439e2:	4608      	mov	r0, r1
   439e4:	f7ff fcfd 	bl	433e2 <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   439e8:	a906      	add	r1, sp, #24
   439ea:	4623      	mov	r3, r4
   439ec:	464a      	mov	r2, r9
   439ee:	4608      	mov	r0, r1
   439f0:	f7ff fcf7 	bl	433e2 <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   439f4:	463b      	mov	r3, r7
   439f6:	464a      	mov	r2, r9
   439f8:	4629      	mov	r1, r5
   439fa:	4650      	mov	r0, sl
   439fc:	9400      	str	r4, [sp, #0]
   439fe:	f7ff ff12 	bl	43826 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   43a02:	4623      	mov	r3, r4
   43a04:	aa06      	add	r2, sp, #24
   43a06:	a91e      	add	r1, sp, #120	; 0x78
   43a08:	a80e      	add	r0, sp, #56	; 0x38
   43a0a:	f7ff feed 	bl	437e8 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   43a0e:	9802      	ldr	r0, [sp, #8]
   43a10:	4632      	mov	r2, r6
   43a12:	a90e      	add	r1, sp, #56	; 0x38
   43a14:	f7ff fbd1 	bl	431ba <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   43a18:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
   43a1c:	a91e      	add	r1, sp, #120	; 0x78
   43a1e:	4418      	add	r0, r3
   43a20:	f7ff fbcb 	bl	431ba <uECC_vli_set>
}
   43a24:	b02f      	add	sp, #188	; 0xbc
   43a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   43a2a:	4631      	mov	r1, r6
   43a2c:	a806      	add	r0, sp, #24
   43a2e:	f7ff fb81 	bl	43134 <uECC_vli_clear>
		z[0] = 1;
   43a32:	2301      	movs	r3, #1
   43a34:	9306      	str	r3, [sp, #24]
   43a36:	e77b      	b.n	43930 <EccPoint_mult+0x3c>
		nb = !uECC_vli_testBit(scalar, i);
   43a38:	4629      	mov	r1, r5
   43a3a:	4648      	mov	r0, r9
   43a3c:	f7ff fb94 	bl	43168 <uECC_vli_testBit>
   43a40:	fab0 f780 	clz	r7, r0
   43a44:	097f      	lsrs	r7, r7, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   43a46:	f1c7 0101 	rsb	r1, r7, #1
   43a4a:	ab0e      	add	r3, sp, #56	; 0x38
   43a4c:	eb03 1b41 	add.w	fp, r3, r1, lsl #5
   43a50:	ab1e      	add	r3, sp, #120	; 0x78
   43a52:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   43a56:	ab0e      	add	r3, sp, #56	; 0x38
   43a58:	eb03 1a47 	add.w	sl, r3, r7, lsl #5
   43a5c:	ab1e      	add	r3, sp, #120	; 0x78
   43a5e:	eb03 1747 	add.w	r7, r3, r7, lsl #5
   43a62:	463b      	mov	r3, r7
   43a64:	4652      	mov	r2, sl
   43a66:	4658      	mov	r0, fp
   43a68:	9400      	str	r4, [sp, #0]
   43a6a:	9105      	str	r1, [sp, #20]
   43a6c:	f7ff fda5 	bl	435ba <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   43a70:	9905      	ldr	r1, [sp, #20]
   43a72:	9400      	str	r4, [sp, #0]
   43a74:	460b      	mov	r3, r1
   43a76:	465a      	mov	r2, fp
   43a78:	4639      	mov	r1, r7
   43a7a:	4650      	mov	r0, sl
   43a7c:	f7ff fed3 	bl	43826 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   43a80:	3d01      	subs	r5, #1
   43a82:	e773      	b.n	4396c <EccPoint_mult+0x78>

00043a84 <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   43a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   43a88:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   43a8c:	f119 061f 	adds.w	r6, r9, #31
   43a90:	bf48      	it	mi
   43a92:	f109 063e 	addmi.w	r6, r9, #62	; 0x3e
{
   43a96:	460f      	mov	r7, r1

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   43a98:	f103 0524 	add.w	r5, r3, #36	; 0x24
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   43a9c:	f346 1647 	sbfx	r6, r6, #5, #8
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   43aa0:	4601      	mov	r1, r0
{
   43aa2:	4690      	mov	r8, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   43aa4:	4633      	mov	r3, r6
   43aa6:	462a      	mov	r2, r5
   43aa8:	4638      	mov	r0, r7
   43aaa:	f7ff fa94 	bl	42fd6 <uECC_vli_add>
   43aae:	4604      	mov	r4, r0
   43ab0:	b990      	cbnz	r0, 43ad8 <regularize_k+0x54>
   43ab2:	ebb9 1f46 	cmp.w	r9, r6, lsl #5
   43ab6:	da06      	bge.n	43ac6 <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   43ab8:	4649      	mov	r1, r9
   43aba:	4638      	mov	r0, r7
   43abc:	f7ff fb54 	bl	43168 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   43ac0:	1e04      	subs	r4, r0, #0
   43ac2:	bf18      	it	ne
   43ac4:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   43ac6:	4633      	mov	r3, r6
   43ac8:	462a      	mov	r2, r5
   43aca:	4639      	mov	r1, r7
   43acc:	4640      	mov	r0, r8
   43ace:	f7ff fa82 	bl	42fd6 <uECC_vli_add>

	return carry;
}
   43ad2:	4620      	mov	r0, r4
   43ad4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   43ad8:	2401      	movs	r4, #1
   43ada:	e7f4      	b.n	43ac6 <regularize_k+0x42>

00043adc <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   43adc:	b530      	push	{r4, r5, lr}
   43ade:	4614      	mov	r4, r2
   43ae0:	b095      	sub	sp, #84	; 0x54
   43ae2:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   43ae4:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   43ae6:	4623      	mov	r3, r4
{
   43ae8:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   43aea:	a904      	add	r1, sp, #16
   43aec:	9102      	str	r1, [sp, #8]
   43aee:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   43af0:	f7ff ffc8 	bl	43a84 <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   43af4:	fab0 f380 	clz	r3, r0
   43af8:	9401      	str	r4, [sp, #4]
   43afa:	095b      	lsrs	r3, r3, #5
   43afc:	aa14      	add	r2, sp, #80	; 0x50
   43afe:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   43b02:	8863      	ldrh	r3, [r4, #2]
   43b04:	3301      	adds	r3, #1
   43b06:	b21b      	sxth	r3, r3
   43b08:	9300      	str	r3, [sp, #0]
   43b0a:	f852 2c48 	ldr.w	r2, [r2, #-72]
   43b0e:	2300      	movs	r3, #0
   43b10:	f104 0144 	add.w	r1, r4, #68	; 0x44
   43b14:	4628      	mov	r0, r5
   43b16:	f7ff feed 	bl	438f4 <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   43b1a:	4621      	mov	r1, r4
   43b1c:	4628      	mov	r0, r5
   43b1e:	f7ff fe5e 	bl	437de <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   43b22:	fab0 f080 	clz	r0, r0
   43b26:	0940      	lsrs	r0, r0, #5
   43b28:	b015      	add	sp, #84	; 0x54
   43b2a:	bd30      	pop	{r4, r5, pc}

00043b2c <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   43b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   43b2e:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   43b30:	1e4f      	subs	r7, r1, #1
   43b32:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   43b34:	428c      	cmp	r4, r1
   43b36:	f105 0501 	add.w	r5, r5, #1
   43b3a:	db00      	blt.n	43b3e <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   43b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   43b3e:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   43b40:	f023 0603 	bic.w	r6, r3, #3
   43b44:	f003 0303 	and.w	r3, r3, #3
   43b48:	5996      	ldr	r6, [r2, r6]
   43b4a:	00db      	lsls	r3, r3, #3
   43b4c:	fa26 f303 	lsr.w	r3, r6, r3
   43b50:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   43b52:	e7ee      	b.n	43b32 <uECC_vli_nativeToBytes+0x6>

00043b54 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   43b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   43b56:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   43b58:	1cd1      	adds	r1, r2, #3
   43b5a:	bf48      	it	mi
   43b5c:	1d91      	addmi	r1, r2, #6
   43b5e:	f341 0187 	sbfx	r1, r1, #2, #8
{
   43b62:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   43b64:	f7ff fae6 	bl	43134 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   43b68:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   43b6a:	1e67      	subs	r7, r4, #1
   43b6c:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   43b6e:	42a2      	cmp	r2, r4
   43b70:	f105 0501 	add.w	r5, r5, #1
   43b74:	db00      	blt.n	43b78 <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   43b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   43b78:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   43b7a:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   43b7e:	5cb2      	ldrb	r2, [r6, r2]
   43b80:	f003 0303 	and.w	r3, r3, #3
   43b84:	00db      	lsls	r3, r3, #3
   43b86:	409a      	lsls	r2, r3
		native[b / uECC_WORD_SIZE] |=
   43b88:	5843      	ldr	r3, [r0, r1]
   43b8a:	4313      	orrs	r3, r2
   43b8c:	5043      	str	r3, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   43b8e:	e7ed      	b.n	43b6c <uECC_vli_bytesToNative+0x18>

00043b90 <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   43b90:	b5f0      	push	{r4, r5, r6, r7, lr}
   43b92:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   43b94:	f991 6000 	ldrsb.w	r6, [r1]
{
   43b98:	4605      	mov	r5, r0
   43b9a:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   43b9c:	f7ff fe1f 	bl	437de <EccPoint_isZero>
   43ba0:	bb28      	cbnz	r0, 43bee <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   43ba2:	1d27      	adds	r7, r4, #4
   43ba4:	4632      	mov	r2, r6
   43ba6:	4629      	mov	r1, r5
   43ba8:	4638      	mov	r0, r7
   43baa:	f7ff fb12 	bl	431d2 <uECC_vli_cmp_unsafe>
   43bae:	2801      	cmp	r0, #1
   43bb0:	d120      	bne.n	43bf4 <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   43bb2:	4632      	mov	r2, r6
   43bb4:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   43bb8:	4638      	mov	r0, r7
   43bba:	f7ff fb0a 	bl	431d2 <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   43bbe:	2801      	cmp	r0, #1
   43bc0:	d118      	bne.n	43bf4 <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   43bc2:	4622      	mov	r2, r4
   43bc4:	4668      	mov	r0, sp
   43bc6:	f7ff fc1c 	bl	43402 <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   43bca:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   43bce:	4622      	mov	r2, r4
   43bd0:	4629      	mov	r1, r5
   43bd2:	a808      	add	r0, sp, #32
   43bd4:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   43bd6:	4632      	mov	r2, r6
   43bd8:	a908      	add	r1, sp, #32
   43bda:	4668      	mov	r0, sp
   43bdc:	f7ff fb0e 	bl	431fc <uECC_vli_equal>
		return -3;

	return 0;
   43be0:	2800      	cmp	r0, #0
   43be2:	bf14      	ite	ne
   43be4:	f06f 0002 	mvnne.w	r0, #2
   43be8:	2000      	moveq	r0, #0
}
   43bea:	b011      	add	sp, #68	; 0x44
   43bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   43bee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   43bf2:	e7fa      	b.n	43bea <uECC_valid_point+0x5a>
		return -2;
   43bf4:	f06f 0001 	mvn.w	r0, #1
   43bf8:	e7f7      	b.n	43bea <uECC_valid_point+0x5a>

00043bfa <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   43bfa:	b5f0      	push	{r4, r5, r6, r7, lr}
   43bfc:	460c      	mov	r4, r1

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   43bfe:	f991 7001 	ldrsb.w	r7, [r1, #1]
{
   43c02:	b091      	sub	sp, #68	; 0x44
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   43c04:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   43c06:	4601      	mov	r1, r0
{
   43c08:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   43c0a:	463a      	mov	r2, r7
   43c0c:	4668      	mov	r0, sp
   43c0e:	f7ff ffa1 	bl	43b54 <uECC_vli_bytesToNative>
	_public + curve->num_words,
   43c12:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   43c16:	463a      	mov	r2, r7
   43c18:	19e9      	adds	r1, r5, r7
   43c1a:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   43c1e:	f7ff ff99 	bl	43b54 <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   43c22:	2210      	movs	r2, #16
   43c24:	4631      	mov	r1, r6
   43c26:	4668      	mov	r0, sp
   43c28:	f7ff fad3 	bl	431d2 <uECC_vli_cmp_unsafe>
   43c2c:	b128      	cbz	r0, 43c3a <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   43c2e:	4621      	mov	r1, r4
   43c30:	4668      	mov	r0, sp
   43c32:	f7ff ffad 	bl	43b90 <uECC_valid_point>
}
   43c36:	b011      	add	sp, #68	; 0x44
   43c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -4;
   43c3a:	f06f 0003 	mvn.w	r0, #3
   43c3e:	e7fa      	b.n	43c36 <uECC_valid_public_key+0x3c>

00043c40 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   43c40:	78cb      	ldrb	r3, [r1, #3]
   43c42:	7802      	ldrb	r2, [r0, #0]
   43c44:	4053      	eors	r3, r2
   43c46:	7003      	strb	r3, [r0, #0]
   43c48:	884b      	ldrh	r3, [r1, #2]
   43c4a:	7842      	ldrb	r2, [r0, #1]
   43c4c:	4053      	eors	r3, r2
   43c4e:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   43c50:	680a      	ldr	r2, [r1, #0]
   43c52:	7883      	ldrb	r3, [r0, #2]
   43c54:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   43c58:	7083      	strb	r3, [r0, #2]
   43c5a:	680a      	ldr	r2, [r1, #0]
   43c5c:	78c3      	ldrb	r3, [r0, #3]
   43c5e:	4053      	eors	r3, r2
   43c60:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   43c62:	79cb      	ldrb	r3, [r1, #7]
   43c64:	7902      	ldrb	r2, [r0, #4]
   43c66:	4053      	eors	r3, r2
   43c68:	7103      	strb	r3, [r0, #4]
   43c6a:	88cb      	ldrh	r3, [r1, #6]
   43c6c:	7942      	ldrb	r2, [r0, #5]
   43c6e:	4053      	eors	r3, r2
   43c70:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   43c72:	684a      	ldr	r2, [r1, #4]
   43c74:	7983      	ldrb	r3, [r0, #6]
   43c76:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   43c7a:	7183      	strb	r3, [r0, #6]
   43c7c:	684a      	ldr	r2, [r1, #4]
   43c7e:	79c3      	ldrb	r3, [r0, #7]
   43c80:	4053      	eors	r3, r2
   43c82:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   43c84:	7acb      	ldrb	r3, [r1, #11]
   43c86:	7a02      	ldrb	r2, [r0, #8]
   43c88:	4053      	eors	r3, r2
   43c8a:	7203      	strb	r3, [r0, #8]
   43c8c:	7a42      	ldrb	r2, [r0, #9]
   43c8e:	894b      	ldrh	r3, [r1, #10]
   43c90:	4053      	eors	r3, r2
   43c92:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   43c94:	688a      	ldr	r2, [r1, #8]
   43c96:	7a83      	ldrb	r3, [r0, #10]
   43c98:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   43c9c:	7283      	strb	r3, [r0, #10]
   43c9e:	688a      	ldr	r2, [r1, #8]
   43ca0:	7ac3      	ldrb	r3, [r0, #11]
   43ca2:	4053      	eors	r3, r2
   43ca4:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   43ca6:	7bcb      	ldrb	r3, [r1, #15]
   43ca8:	7b02      	ldrb	r2, [r0, #12]
   43caa:	4053      	eors	r3, r2
   43cac:	7303      	strb	r3, [r0, #12]
   43cae:	89cb      	ldrh	r3, [r1, #14]
   43cb0:	7b42      	ldrb	r2, [r0, #13]
   43cb2:	4053      	eors	r3, r2
   43cb4:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   43cb6:	68ca      	ldr	r2, [r1, #12]
   43cb8:	7b83      	ldrb	r3, [r0, #14]
   43cba:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   43cbe:	7383      	strb	r3, [r0, #14]
   43cc0:	68ca      	ldr	r2, [r1, #12]
   43cc2:	7bc3      	ldrb	r3, [r0, #15]
   43cc4:	4053      	eors	r3, r2
   43cc6:	73c3      	strb	r3, [r0, #15]
}
   43cc8:	4770      	bx	lr

00043cca <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   43cca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   43ccc:	7802      	ldrb	r2, [r0, #0]
   43cce:	f88d 2000 	strb.w	r2, [sp]
   43cd2:	7942      	ldrb	r2, [r0, #5]
   43cd4:	f88d 2001 	strb.w	r2, [sp, #1]
   43cd8:	7a82      	ldrb	r2, [r0, #10]
   43cda:	f88d 2002 	strb.w	r2, [sp, #2]
   43cde:	7bc2      	ldrb	r2, [r0, #15]
   43ce0:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   43ce4:	7902      	ldrb	r2, [r0, #4]
   43ce6:	f88d 2004 	strb.w	r2, [sp, #4]
   43cea:	7a42      	ldrb	r2, [r0, #9]
   43cec:	f88d 2005 	strb.w	r2, [sp, #5]
   43cf0:	7b82      	ldrb	r2, [r0, #14]
   43cf2:	f88d 2006 	strb.w	r2, [sp, #6]
   43cf6:	78c2      	ldrb	r2, [r0, #3]
   43cf8:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   43cfc:	7a02      	ldrb	r2, [r0, #8]
   43cfe:	f88d 2008 	strb.w	r2, [sp, #8]
   43d02:	7b42      	ldrb	r2, [r0, #13]
   43d04:	f88d 2009 	strb.w	r2, [sp, #9]
   43d08:	7882      	ldrb	r2, [r0, #2]
   43d0a:	f88d 200a 	strb.w	r2, [sp, #10]
   43d0e:	79c2      	ldrb	r2, [r0, #7]
   43d10:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   43d14:	7b02      	ldrb	r2, [r0, #12]
   43d16:	f88d 200c 	strb.w	r2, [sp, #12]
   43d1a:	7842      	ldrb	r2, [r0, #1]
   43d1c:	7ac3      	ldrb	r3, [r0, #11]
   43d1e:	f88d 200d 	strb.w	r2, [sp, #13]
   43d22:	7982      	ldrb	r2, [r0, #6]
   43d24:	f88d 200e 	strb.w	r2, [sp, #14]
   43d28:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   43d2c:	2310      	movs	r3, #16
   43d2e:	466a      	mov	r2, sp
   43d30:	4619      	mov	r1, r3
   43d32:	f7ff f88c 	bl	42e4e <_copy>
}
   43d36:	b005      	add	sp, #20
   43d38:	f85d fb04 	ldr.w	pc, [sp], #4

00043d3c <mult_row_column>:
{
   43d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   43d3e:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   43d40:	7808      	ldrb	r0, [r1, #0]
{
   43d42:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   43d44:	f7ff f892 	bl	42e6c <_double_byte>
   43d48:	4605      	mov	r5, r0
   43d4a:	7860      	ldrb	r0, [r4, #1]
   43d4c:	f7ff f88e 	bl	42e6c <_double_byte>
   43d50:	78a2      	ldrb	r2, [r4, #2]
   43d52:	7863      	ldrb	r3, [r4, #1]
   43d54:	4053      	eors	r3, r2
   43d56:	78e2      	ldrb	r2, [r4, #3]
   43d58:	4053      	eors	r3, r2
   43d5a:	405d      	eors	r5, r3
   43d5c:	4068      	eors	r0, r5
   43d5e:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   43d60:	7860      	ldrb	r0, [r4, #1]
   43d62:	7827      	ldrb	r7, [r4, #0]
   43d64:	f7ff f882 	bl	42e6c <_double_byte>
   43d68:	4605      	mov	r5, r0
   43d6a:	78a0      	ldrb	r0, [r4, #2]
   43d6c:	f7ff f87e 	bl	42e6c <_double_byte>
   43d70:	78a3      	ldrb	r3, [r4, #2]
   43d72:	405f      	eors	r7, r3
   43d74:	78e3      	ldrb	r3, [r4, #3]
   43d76:	405f      	eors	r7, r3
   43d78:	407d      	eors	r5, r7
   43d7a:	4068      	eors	r0, r5
   43d7c:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   43d7e:	7863      	ldrb	r3, [r4, #1]
   43d80:	7827      	ldrb	r7, [r4, #0]
   43d82:	78a0      	ldrb	r0, [r4, #2]
   43d84:	405f      	eors	r7, r3
   43d86:	f7ff f871 	bl	42e6c <_double_byte>
   43d8a:	4605      	mov	r5, r0
   43d8c:	78e0      	ldrb	r0, [r4, #3]
   43d8e:	f7ff f86d 	bl	42e6c <_double_byte>
   43d92:	78e3      	ldrb	r3, [r4, #3]
   43d94:	405f      	eors	r7, r3
   43d96:	407d      	eors	r5, r7
   43d98:	4068      	eors	r0, r5
   43d9a:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   43d9c:	7820      	ldrb	r0, [r4, #0]
   43d9e:	f7ff f865 	bl	42e6c <_double_byte>
   43da2:	7862      	ldrb	r2, [r4, #1]
   43da4:	7823      	ldrb	r3, [r4, #0]
   43da6:	4053      	eors	r3, r2
   43da8:	78a2      	ldrb	r2, [r4, #2]
   43daa:	4053      	eors	r3, r2
   43dac:	ea80 0503 	eor.w	r5, r0, r3
   43db0:	78e0      	ldrb	r0, [r4, #3]
   43db2:	f7ff f85b 	bl	42e6c <_double_byte>
   43db6:	b2ed      	uxtb	r5, r5
   43db8:	4045      	eors	r5, r0
   43dba:	70f5      	strb	r5, [r6, #3]
}
   43dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00043dbe <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   43dbe:	b570      	push	{r4, r5, r6, lr}
   43dc0:	4614      	mov	r4, r2
   43dc2:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   43dc4:	4605      	mov	r5, r0
   43dc6:	2800      	cmp	r0, #0
   43dc8:	d049      	beq.n	43e5e <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   43dca:	2900      	cmp	r1, #0
   43dcc:	d049      	beq.n	43e62 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   43dce:	2a00      	cmp	r2, #0
   43dd0:	d049      	beq.n	43e66 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   43dd2:	2310      	movs	r3, #16
   43dd4:	460a      	mov	r2, r1
   43dd6:	4668      	mov	r0, sp
   43dd8:	4619      	mov	r1, r3
   43dda:	f7ff f838 	bl	42e4e <_copy>
	add_round_key(state, s->words);
   43dde:	4621      	mov	r1, r4
   43de0:	4668      	mov	r0, sp
   43de2:	f7ff ff2d 	bl	43c40 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   43de6:	3410      	adds	r4, #16
   43de8:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   43dec:	4668      	mov	r0, sp
   43dee:	f7e6 fa07 	bl	2a200 <sub_bytes>
		shift_rows(state);
   43df2:	4668      	mov	r0, sp
   43df4:	f7ff ff69 	bl	43cca <shift_rows>
	mult_row_column(t, s);
   43df8:	4669      	mov	r1, sp
   43dfa:	a804      	add	r0, sp, #16
   43dfc:	f7ff ff9e 	bl	43d3c <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   43e00:	a901      	add	r1, sp, #4
   43e02:	a805      	add	r0, sp, #20
   43e04:	f7ff ff9a 	bl	43d3c <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   43e08:	a902      	add	r1, sp, #8
   43e0a:	a806      	add	r0, sp, #24
   43e0c:	f7ff ff96 	bl	43d3c <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   43e10:	a903      	add	r1, sp, #12
   43e12:	a807      	add	r0, sp, #28
   43e14:	f7ff ff92 	bl	43d3c <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   43e18:	2310      	movs	r3, #16
   43e1a:	4619      	mov	r1, r3
   43e1c:	eb0d 0203 	add.w	r2, sp, r3
   43e20:	4668      	mov	r0, sp
   43e22:	f7ff f814 	bl	42e4e <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   43e26:	4621      	mov	r1, r4
   43e28:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   43e2a:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   43e2c:	f7ff ff08 	bl	43c40 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   43e30:	42b4      	cmp	r4, r6
   43e32:	d1db      	bne.n	43dec <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   43e34:	f7e6 f9e4 	bl	2a200 <sub_bytes>
	shift_rows(state);
   43e38:	4668      	mov	r0, sp
   43e3a:	f7ff ff46 	bl	43cca <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   43e3e:	4621      	mov	r1, r4
   43e40:	4668      	mov	r0, sp
   43e42:	f7ff fefd 	bl	43c40 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   43e46:	2310      	movs	r3, #16
   43e48:	4619      	mov	r1, r3
   43e4a:	466a      	mov	r2, sp
   43e4c:	4628      	mov	r0, r5
   43e4e:	f7fe fffe 	bl	42e4e <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   43e52:	4668      	mov	r0, sp
   43e54:	2210      	movs	r2, #16
   43e56:	2100      	movs	r1, #0
   43e58:	f7ff f806 	bl	42e68 <_set>

	return TC_CRYPTO_SUCCESS;
   43e5c:	2001      	movs	r0, #1
}
   43e5e:	b008      	add	sp, #32
   43e60:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   43e62:	4608      	mov	r0, r1
   43e64:	e7fb      	b.n	43e5e <tc_aes_encrypt+0xa0>
   43e66:	4610      	mov	r0, r2
   43e68:	e7f9      	b.n	43e5e <tc_aes_encrypt+0xa0>

00043e6a <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   43e6a:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   43e6c:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   43e6e:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   43e70:	f912 3b10 	ldrsb.w	r3, [r2], #16
   43e74:	2b00      	cmp	r3, #0
   43e76:	bfac      	ite	ge
   43e78:	2300      	movge	r3, #0
   43e7a:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   43e7c:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   43e80:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   43e84:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   43e86:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   43e8a:	d002      	beq.n	43e92 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   43e8c:	7813      	ldrb	r3, [r2, #0]
   43e8e:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   43e90:	e7f4      	b.n	43e7c <gf_double+0x12>
	}
}
   43e92:	bd10      	pop	{r4, pc}

00043e94 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   43e94:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   43e96:	b120      	cbz	r0, 43ea2 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   43e98:	2258      	movs	r2, #88	; 0x58
   43e9a:	2100      	movs	r1, #0
   43e9c:	f7fe ffe4 	bl	42e68 <_set>
   43ea0:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   43ea2:	bd08      	pop	{r3, pc}

00043ea4 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   43ea4:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   43ea6:	4604      	mov	r4, r0
   43ea8:	b188      	cbz	r0, 43ece <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   43eaa:	2210      	movs	r2, #16
   43eac:	2100      	movs	r1, #0
   43eae:	f7fe ffdb 	bl	42e68 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   43eb2:	2210      	movs	r2, #16
   43eb4:	f104 0030 	add.w	r0, r4, #48	; 0x30
   43eb8:	2100      	movs	r1, #0
   43eba:	f7fe ffd5 	bl	42e68 <_set>
	s->leftover_offset = 0;
   43ebe:	2300      	movs	r3, #0
   43ec0:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   43ec2:	2200      	movs	r2, #0
   43ec4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   43ec8:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   43ecc:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   43ece:	bd10      	pop	{r4, pc}

00043ed0 <tc_cmac_setup>:
{
   43ed0:	b570      	push	{r4, r5, r6, lr}
   43ed2:	4604      	mov	r4, r0
   43ed4:	460d      	mov	r5, r1
   43ed6:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   43ed8:	b310      	cbz	r0, 43f20 <tc_cmac_setup+0x50>
   43eda:	b311      	cbz	r1, 43f22 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   43edc:	2258      	movs	r2, #88	; 0x58
   43ede:	2100      	movs	r1, #0
   43ee0:	f7fe ffc2 	bl	42e68 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   43ee4:	4629      	mov	r1, r5
	s->sched = sched;
   43ee6:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   43ee8:	4630      	mov	r0, r6
   43eea:	f7e6 f995 	bl	2a218 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   43eee:	2210      	movs	r2, #16
   43ef0:	2100      	movs	r1, #0
   43ef2:	4620      	mov	r0, r4
   43ef4:	f7fe ffb8 	bl	42e68 <_set>
	gf_double (s->K1, s->iv);
   43ef8:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   43efc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   43efe:	4621      	mov	r1, r4
   43f00:	4620      	mov	r0, r4
   43f02:	f7ff ff5c 	bl	43dbe <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   43f06:	4621      	mov	r1, r4
   43f08:	4628      	mov	r0, r5
   43f0a:	f7ff ffae 	bl	43e6a <gf_double>
	gf_double (s->K2, s->K1);
   43f0e:	4629      	mov	r1, r5
   43f10:	f104 0020 	add.w	r0, r4, #32
   43f14:	f7ff ffa9 	bl	43e6a <gf_double>
	tc_cmac_init(s);
   43f18:	4620      	mov	r0, r4
   43f1a:	f7ff ffc3 	bl	43ea4 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   43f1e:	2001      	movs	r0, #1
}
   43f20:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   43f22:	4608      	mov	r0, r1
   43f24:	e7fc      	b.n	43f20 <tc_cmac_setup+0x50>

00043f26 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   43f26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   43f2a:	460e      	mov	r6, r1
   43f2c:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   43f2e:	4604      	mov	r4, r0
   43f30:	2800      	cmp	r0, #0
   43f32:	d060      	beq.n	43ff6 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   43f34:	b1fa      	cbz	r2, 43f76 <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   43f36:	2900      	cmp	r1, #0
   43f38:	d05d      	beq.n	43ff6 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   43f3a:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   43f3e:	ea53 0102 	orrs.w	r1, r3, r2
   43f42:	d058      	beq.n	43ff6 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   43f44:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   43f46:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   43f4a:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   43f4e:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   43f52:	f1b8 0f00 	cmp.w	r8, #0
   43f56:	d02c      	beq.n	43fb2 <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   43f58:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   43f5c:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   43f60:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   43f62:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   43f64:	d20a      	bcs.n	43f7c <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   43f66:	462b      	mov	r3, r5
   43f68:	4632      	mov	r2, r6
   43f6a:	4629      	mov	r1, r5
   43f6c:	f7fe ff6f 	bl	42e4e <_copy>
			s->leftover_offset += data_length;
   43f70:	6c63      	ldr	r3, [r4, #68]	; 0x44
   43f72:	442b      	add	r3, r5
   43f74:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   43f76:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   43f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   43f7c:	463b      	mov	r3, r7
   43f7e:	4632      	mov	r2, r6
   43f80:	4639      	mov	r1, r7
   43f82:	f7fe ff64 	bl	42e4e <_copy>
		data_length -= remaining_space;
   43f86:	3d10      	subs	r5, #16
		s->leftover_offset = 0;
   43f88:	2300      	movs	r3, #0
   43f8a:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   43f8c:	4445      	add	r5, r8
		data += remaining_space;
   43f8e:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   43f90:	1e63      	subs	r3, r4, #1
   43f92:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   43f96:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   43f9a:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   43f9e:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   43fa0:	ea82 0200 	eor.w	r2, r2, r0
   43fa4:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   43fa6:	d1f6      	bne.n	43f96 <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   43fa8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   43faa:	4621      	mov	r1, r4
   43fac:	4620      	mov	r0, r4
   43fae:	f7ff ff06 	bl	43dbe <tc_aes_encrypt>
   43fb2:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   43fb6:	2d10      	cmp	r5, #16
   43fb8:	d80a      	bhi.n	43fd0 <tc_cmac_update+0xaa>
	if (data_length > 0) {
   43fba:	2d00      	cmp	r5, #0
   43fbc:	d0db      	beq.n	43f76 <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   43fbe:	462b      	mov	r3, r5
   43fc0:	4632      	mov	r2, r6
   43fc2:	4629      	mov	r1, r5
   43fc4:	f104 0030 	add.w	r0, r4, #48	; 0x30
   43fc8:	f7fe ff41 	bl	42e4e <_copy>
		s->leftover_offset = data_length;
   43fcc:	6465      	str	r5, [r4, #68]	; 0x44
   43fce:	e7d2      	b.n	43f76 <tc_cmac_update+0x50>
   43fd0:	1e63      	subs	r3, r4, #1
   43fd2:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   43fd4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   43fd8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   43fdc:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   43fde:	ea82 0200 	eor.w	r2, r2, r0
   43fe2:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   43fe4:	d1f6      	bne.n	43fd4 <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   43fe6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   43fe8:	4621      	mov	r1, r4
   43fea:	4620      	mov	r0, r4
   43fec:	f7ff fee7 	bl	43dbe <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   43ff0:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   43ff2:	3d10      	subs	r5, #16
   43ff4:	e7df      	b.n	43fb6 <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   43ff6:	2000      	movs	r0, #0
   43ff8:	e7be      	b.n	43f78 <tc_cmac_update+0x52>

00043ffa <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   43ffa:	b570      	push	{r4, r5, r6, lr}
   43ffc:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   43ffe:	4605      	mov	r5, r0
   44000:	b1e8      	cbz	r0, 4403e <tc_cmac_final+0x44>
   44002:	b369      	cbz	r1, 44060 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   44004:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   44006:	2a10      	cmp	r2, #16
   44008:	d11a      	bne.n	44040 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   4400a:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   4400c:	1e63      	subs	r3, r4, #1
   4400e:	3901      	subs	r1, #1
   44010:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   44014:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   44018:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   4401c:	4072      	eors	r2, r6
   4401e:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   44022:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   44024:	ea82 0206 	eor.w	r2, r2, r6
   44028:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   4402a:	d1f3      	bne.n	44014 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   4402c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   4402e:	4621      	mov	r1, r4
   44030:	4628      	mov	r0, r5
   44032:	f7ff fec4 	bl	43dbe <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   44036:	4620      	mov	r0, r4
   44038:	f7ff ff2c 	bl	43e94 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   4403c:	2001      	movs	r0, #1
}
   4403e:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   44040:	f102 0030 	add.w	r0, r2, #48	; 0x30
   44044:	2100      	movs	r1, #0
   44046:	f1c2 0210 	rsb	r2, r2, #16
   4404a:	4420      	add	r0, r4
   4404c:	f7fe ff0c 	bl	42e68 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   44050:	6c63      	ldr	r3, [r4, #68]	; 0x44
   44052:	4423      	add	r3, r4
   44054:	2280      	movs	r2, #128	; 0x80
   44056:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   4405a:	f104 0120 	add.w	r1, r4, #32
   4405e:	e7d5      	b.n	4400c <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   44060:	4608      	mov	r0, r1
   44062:	e7ec      	b.n	4403e <tc_cmac_final+0x44>

00044064 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   44064:	f003 be6e 	b.w	47d44 <z_fatal_error>

00044068 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   44068:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   4406a:	6800      	ldr	r0, [r0, #0]
   4406c:	f003 be6a 	b.w	47d44 <z_fatal_error>

00044070 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   44070:	2100      	movs	r1, #0
   44072:	2001      	movs	r0, #1
   44074:	f7ff bff6 	b.w	44064 <z_arm_fatal_error>

00044078 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   44078:	b508      	push	{r3, lr}
	handler();
   4407a:	f7e6 f993 	bl	2a3a4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   4407e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   44082:	f7e6 ba53 	b.w	2a52c <z_arm_exc_exit>

00044086 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   44086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4408a:	4684      	mov	ip, r0
   4408c:	460f      	mov	r7, r1
	register const char *s = nptr;
   4408e:	4604      	mov	r4, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   44090:	4621      	mov	r1, r4
   44092:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
}

static inline int isspace(int c)
{
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   44096:	2b20      	cmp	r3, #32
   44098:	d0fa      	beq.n	44090 <strtoul+0xa>
   4409a:	f1a3 0009 	sub.w	r0, r3, #9
   4409e:	2804      	cmp	r0, #4
   440a0:	d9f6      	bls.n	44090 <strtoul+0xa>
	} while (isspace((unsigned char)c));
	if (c == '-') {
   440a2:	2b2d      	cmp	r3, #45	; 0x2d
   440a4:	d125      	bne.n	440f2 <strtoul+0x6c>
		neg = 1;
		c = *s++;
   440a6:	784b      	ldrb	r3, [r1, #1]
   440a8:	1c8c      	adds	r4, r1, #2
		neg = 1;
   440aa:	f04f 0e01 	mov.w	lr, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   440ae:	bb3a      	cbnz	r2, 44100 <strtoul+0x7a>
   440b0:	2b30      	cmp	r3, #48	; 0x30
   440b2:	d032      	beq.n	4411a <strtoul+0x94>
		s += 2;
		base = 16;
	}

	if (base == 0) {
		base = c == '0' ? 8 : 10;
   440b4:	220a      	movs	r2, #10
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   440b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   440ba:	2500      	movs	r5, #0
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   440bc:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   440c0:	fb02 f801 	mul.w	r8, r2, r1
   440c4:	ea6f 0808 	mvn.w	r8, r8
	for (acc = 0, any = 0;; c = *s++) {
   440c8:	4628      	mov	r0, r5
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   440ca:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
		if (isdigit((unsigned char)c)) {
   440ce:	2e09      	cmp	r6, #9
   440d0:	d82a      	bhi.n	44128 <strtoul+0xa2>
			c -= '0';
   440d2:	4633      	mov	r3, r6
		} else if (isalpha((unsigned char)c)) {
			c -= isupper((unsigned char)c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   440d4:	429a      	cmp	r2, r3
   440d6:	dd37      	ble.n	44148 <strtoul+0xc2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   440d8:	1c6e      	adds	r6, r5, #1
   440da:	d007      	beq.n	440ec <strtoul+0x66>
   440dc:	4288      	cmp	r0, r1
   440de:	d830      	bhi.n	44142 <strtoul+0xbc>
   440e0:	d101      	bne.n	440e6 <strtoul+0x60>
   440e2:	4543      	cmp	r3, r8
   440e4:	dc2d      	bgt.n	44142 <strtoul+0xbc>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   440e6:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   440ea:	2501      	movs	r5, #1
	for (acc = 0, any = 0;; c = *s++) {
   440ec:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit((unsigned char)c)) {
   440f0:	e7eb      	b.n	440ca <strtoul+0x44>
	} else if (c == '+') {
   440f2:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   440f4:	bf04      	itt	eq
   440f6:	784b      	ldrbeq	r3, [r1, #1]
   440f8:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   440fa:	f04f 0e00 	mov.w	lr, #0
   440fe:	e7d6      	b.n	440ae <strtoul+0x28>
	if ((base == 0 || base == 16) &&
   44100:	2a10      	cmp	r2, #16
   44102:	d1d8      	bne.n	440b6 <strtoul+0x30>
   44104:	2b30      	cmp	r3, #48	; 0x30
   44106:	d1d6      	bne.n	440b6 <strtoul+0x30>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   44108:	7821      	ldrb	r1, [r4, #0]
   4410a:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   4410e:	2958      	cmp	r1, #88	; 0x58
   44110:	d1d1      	bne.n	440b6 <strtoul+0x30>
		c = s[1];
   44112:	7863      	ldrb	r3, [r4, #1]
		base = 16;
   44114:	2210      	movs	r2, #16
		s += 2;
   44116:	3402      	adds	r4, #2
	if (base == 0) {
   44118:	e7cd      	b.n	440b6 <strtoul+0x30>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   4411a:	7822      	ldrb	r2, [r4, #0]
   4411c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   44120:	2a58      	cmp	r2, #88	; 0x58
   44122:	d0f6      	beq.n	44112 <strtoul+0x8c>
		base = c == '0' ? 8 : 10;
   44124:	2208      	movs	r2, #8
   44126:	e7c6      	b.n	440b6 <strtoul+0x30>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   44128:	f043 0620 	orr.w	r6, r3, #32
   4412c:	3e61      	subs	r6, #97	; 0x61
		} else if (isalpha((unsigned char)c)) {
   4412e:	2e19      	cmp	r6, #25
   44130:	d80a      	bhi.n	44148 <strtoul+0xc2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   44132:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
			c -= isupper((unsigned char)c) ? 'A' - 10 : 'a' - 10;
   44136:	2e1a      	cmp	r6, #26
   44138:	bf34      	ite	cc
   4413a:	2637      	movcc	r6, #55	; 0x37
   4413c:	2657      	movcs	r6, #87	; 0x57
   4413e:	1b9b      	subs	r3, r3, r6
   44140:	e7c8      	b.n	440d4 <strtoul+0x4e>
			any = -1;
   44142:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   44146:	e7d1      	b.n	440ec <strtoul+0x66>
		}
	}
	if (any < 0) {
   44148:	1c6b      	adds	r3, r5, #1
   4414a:	d107      	bne.n	4415c <strtoul+0xd6>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   4414c:	f7fc f980 	bl	40450 <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   44150:	2322      	movs	r3, #34	; 0x22
   44152:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   44154:	4628      	mov	r0, r5
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   44156:	b947      	cbnz	r7, 4416a <strtoul+0xe4>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   44158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   4415c:	f1be 0f00 	cmp.w	lr, #0
   44160:	d000      	beq.n	44164 <strtoul+0xde>
		acc = -acc;
   44162:	4240      	negs	r0, r0
	if (endptr != NULL) {
   44164:	2f00      	cmp	r7, #0
   44166:	d0f7      	beq.n	44158 <strtoul+0xd2>
		*endptr = (char *)(any ? s - 1 : nptr);
   44168:	b10d      	cbz	r5, 4416e <strtoul+0xe8>
   4416a:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   4416e:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   44172:	e7f1      	b.n	44158 <strtoul+0xd2>

00044174 <compare>:
		int (*comp3)(const void *a, const void *b, void *arg);
	};
};

static inline int compare(struct qsort_comp *cmp, void *a, void *b)
{
   44174:	b410      	push	{r4}
   44176:	4603      	mov	r3, r0
   44178:	4608      	mov	r0, r1
   4417a:	4611      	mov	r1, r2
	if (cmp->has3) {
   4417c:	781a      	ldrb	r2, [r3, #0]
		return cmp->comp3(a, b, cmp->arg);
   4417e:	689c      	ldr	r4, [r3, #8]
	if (cmp->has3) {
   44180:	b11a      	cbz	r2, 4418a <compare+0x16>
		return cmp->comp3(a, b, cmp->arg);
   44182:	685a      	ldr	r2, [r3, #4]
   44184:	4623      	mov	r3, r4
	}

	return cmp->comp2(a, b);
}
   44186:	bc10      	pop	{r4}
		return cmp->comp3(a, b, cmp->arg);
   44188:	4718      	bx	r3
	return cmp->comp2(a, b);
   4418a:	4623      	mov	r3, r4
}
   4418c:	bc10      	pop	{r4}
	return cmp->comp2(a, b);
   4418e:	4718      	bx	r3

00044190 <sift_down>:

static void sift_down(void *base, int start, int end, size_t size, struct qsort_comp *cmp)
{
   44190:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   44194:	4607      	mov	r7, r0
   44196:	460e      	mov	r6, r1
   44198:	4692      	mov	sl, r2
   4419a:	461d      	mov	r5, r3
	int root;
	int child;
	int swap;

	for (swap = start, root = swap; left(root) < end; root = swap) {
   4419c:	ea4f 0846 	mov.w	r8, r6, lsl #1
   441a0:	f108 0401 	add.w	r4, r8, #1
   441a4:	4554      	cmp	r4, sl
   441a6:	db01      	blt.n	441ac <sift_down+0x1c>
			return;
		}

		byteswp(A(root), A(swap), size);
	}
}
   441a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (compare(cmp, A(swap), A(child)) < 0) {
   441ac:	fb05 7906 	mla	r9, r5, r6, r7
   441b0:	fb05 fb04 	mul.w	fp, r5, r4
   441b4:	980a      	ldr	r0, [sp, #40]	; 0x28
   441b6:	eb07 020b 	add.w	r2, r7, fp
   441ba:	4649      	mov	r1, r9
   441bc:	f7ff ffda 	bl	44174 <compare>
   441c0:	2800      	cmp	r0, #0
		if (right(root) < end && compare(cmp, A(swap), A(right(root))) < 0) {
   441c2:	f108 0802 	add.w	r8, r8, #2
		if (compare(cmp, A(swap), A(child)) < 0) {
   441c6:	db03      	blt.n	441d0 <sift_down+0x40>
		if (right(root) < end && compare(cmp, A(swap), A(right(root))) < 0) {
   441c8:	45c2      	cmp	sl, r8
   441ca:	dded      	ble.n	441a8 <sift_down+0x18>
   441cc:	4634      	mov	r4, r6
   441ce:	e001      	b.n	441d4 <sift_down+0x44>
   441d0:	45c2      	cmp	sl, r8
   441d2:	dd0b      	ble.n	441ec <sift_down+0x5c>
   441d4:	eb0b 0205 	add.w	r2, fp, r5
   441d8:	fb05 7104 	mla	r1, r5, r4, r7
   441dc:	980a      	ldr	r0, [sp, #40]	; 0x28
   441de:	443a      	add	r2, r7
   441e0:	f7ff ffc8 	bl	44174 <compare>
   441e4:	ea34 0420 	bics.w	r4, r4, r0, asr #32
   441e8:	bf28      	it	cs
   441ea:	4644      	movcs	r4, r8
		if (swap == root) {
   441ec:	42a6      	cmp	r6, r4
   441ee:	d0db      	beq.n	441a8 <sift_down+0x18>
		byteswp(A(root), A(swap), size);
   441f0:	fb05 7304 	mla	r3, r5, r4, r7
{
	uint8_t t;
	uint8_t *aa = (uint8_t *)a;
	uint8_t *bb = (uint8_t *)b;

	for (; size > 0; --size) {
   441f4:	eb09 0205 	add.w	r2, r9, r5
   441f8:	454a      	cmp	r2, r9
   441fa:	d101      	bne.n	44200 <sift_down+0x70>
   441fc:	4626      	mov	r6, r4
   441fe:	e7cd      	b.n	4419c <sift_down+0xc>
		t = *aa;
   44200:	f899 1000 	ldrb.w	r1, [r9]
		*aa++ = *bb;
   44204:	7818      	ldrb	r0, [r3, #0]
   44206:	f809 0b01 	strb.w	r0, [r9], #1
		*bb++ = t;
   4420a:	f803 1b01 	strb.w	r1, [r3], #1
	for (; size > 0; --size) {
   4420e:	e7f3      	b.n	441f8 <sift_down+0x68>

00044210 <heap_sort>:
		sift_down(base, start, nmemb, size, cmp);
	}
}

static void heap_sort(void *base, int nmemb, size_t size, struct qsort_comp *cmp)
{
   44210:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	for (start = parent(nmemb - 1); start >= 0; --start) {
   44214:	1e8d      	subs	r5, r1, #2
{
   44216:	4607      	mov	r7, r0
   44218:	460c      	mov	r4, r1
   4421a:	4616      	mov	r6, r2
   4421c:	4698      	mov	r8, r3
	for (start = parent(nmemb - 1); start >= 0; --start) {
   4421e:	106d      	asrs	r5, r5, #1
   44220:	2d00      	cmp	r5, #0
   44222:	da0b      	bge.n	4423c <heap_sort+0x2c>
	int end;

	heapify(base, nmemb, size, cmp);

	for (end = nmemb - 1; end > 0; --end) {
   44224:	3c01      	subs	r4, #1
   44226:	fb06 f504 	mul.w	r5, r6, r4
   4422a:	eb07 0905 	add.w	r9, r7, r5
   4422e:	4435      	add	r5, r6
   44230:	443d      	add	r5, r7
   44232:	2c00      	cmp	r4, #0
   44234:	dc0c      	bgt.n	44250 <heap_sort+0x40>
		byteswp(A(end), A(0), size);
		sift_down(base, 0, end, size, cmp);
	}
}
   44236:	b003      	add	sp, #12
   44238:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		sift_down(base, start, nmemb, size, cmp);
   4423c:	4629      	mov	r1, r5
   4423e:	f8cd 8000 	str.w	r8, [sp]
   44242:	4633      	mov	r3, r6
   44244:	4622      	mov	r2, r4
   44246:	4638      	mov	r0, r7
   44248:	f7ff ffa2 	bl	44190 <sift_down>
	for (start = parent(nmemb - 1); start >= 0; --start) {
   4424c:	3d01      	subs	r5, #1
   4424e:	e7e7      	b.n	44220 <heap_sort+0x10>
		byteswp(A(end), A(0), size);
   44250:	464b      	mov	r3, r9
	uint8_t *bb = (uint8_t *)b;
   44252:	463a      	mov	r2, r7
	for (; size > 0; --size) {
   44254:	42ab      	cmp	r3, r5
   44256:	d10c      	bne.n	44272 <heap_sort+0x62>
		sift_down(base, 0, end, size, cmp);
   44258:	4622      	mov	r2, r4
   4425a:	f8cd 8000 	str.w	r8, [sp]
   4425e:	4633      	mov	r3, r6
   44260:	2100      	movs	r1, #0
   44262:	4638      	mov	r0, r7
   44264:	f7ff ff94 	bl	44190 <sift_down>
	for (end = nmemb - 1; end > 0; --end) {
   44268:	3c01      	subs	r4, #1
   4426a:	eba9 0906 	sub.w	r9, r9, r6
   4426e:	1bad      	subs	r5, r5, r6
   44270:	e7df      	b.n	44232 <heap_sort+0x22>
		t = *aa;
   44272:	7819      	ldrb	r1, [r3, #0]
		*aa++ = *bb;
   44274:	7810      	ldrb	r0, [r2, #0]
   44276:	f803 0b01 	strb.w	r0, [r3], #1
		*bb++ = t;
   4427a:	f802 1b01 	strb.w	r1, [r2], #1
	for (; size > 0; --size) {
   4427e:	e7e9      	b.n	44254 <heap_sort+0x44>

00044280 <qsort>:
	heap_sort(base, nmemb, size, &cmp);
}

void qsort(void *base, size_t nmemb, size_t size,
	   int (*comp2)(const void *a, const void *b))
{
   44280:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct qsort_comp cmp = {
   44282:	2400      	movs	r4, #0
   44284:	e9cd 4302 	strd	r4, r3, [sp, #8]
		{
			.comp2 = comp2
		}
	};

	heap_sort(base, nmemb, size, &cmp);
   44288:	ab01      	add	r3, sp, #4
	struct qsort_comp cmp = {
   4428a:	f88d 4004 	strb.w	r4, [sp, #4]
	heap_sort(base, nmemb, size, &cmp);
   4428e:	f7ff ffbf 	bl	44210 <heap_sort>
}
   44292:	b004      	add	sp, #16
   44294:	bd10      	pop	{r4, pc}

00044296 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   44296:	3901      	subs	r1, #1
   44298:	4603      	mov	r3, r0
   4429a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   4429e:	b90a      	cbnz	r2, 442a4 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   442a0:	701a      	strb	r2, [r3, #0]

	return dest;
}
   442a2:	4770      	bx	lr
		*d = *s;
   442a4:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   442a8:	e7f7      	b.n	4429a <strcpy+0x4>

000442aa <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   442aa:	4603      	mov	r3, r0
	size_t n = 0;
   442ac:	2000      	movs	r0, #0

	while (*s != '\0') {
   442ae:	5c1a      	ldrb	r2, [r3, r0]
   442b0:	b902      	cbnz	r2, 442b4 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   442b2:	4770      	bx	lr
		n++;
   442b4:	3001      	adds	r0, #1
   442b6:	e7fa      	b.n	442ae <strlen+0x4>

000442b8 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   442b8:	1e43      	subs	r3, r0, #1
   442ba:	3901      	subs	r1, #1
   442bc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   442c0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   442c4:	4282      	cmp	r2, r0
   442c6:	d101      	bne.n	442cc <strcmp+0x14>
   442c8:	2a00      	cmp	r2, #0
   442ca:	d1f7      	bne.n	442bc <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   442cc:	1a10      	subs	r0, r2, r0
   442ce:	4770      	bx	lr

000442d0 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   442d0:	b570      	push	{r4, r5, r6, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   442d2:	460b      	mov	r3, r1
   442d4:	4605      	mov	r5, r0
   442d6:	b16a      	cbz	r2, 442f4 <strncmp+0x24>
   442d8:	f810 6b01 	ldrb.w	r6, [r0], #1
   442dc:	781c      	ldrb	r4, [r3, #0]
   442de:	42b4      	cmp	r4, r6
   442e0:	f101 0101 	add.w	r1, r1, #1
   442e4:	d100      	bne.n	442e8 <strncmp+0x18>
   442e6:	b91c      	cbnz	r4, 442f0 <strncmp+0x20>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   442e8:	782a      	ldrb	r2, [r5, #0]
   442ea:	781b      	ldrb	r3, [r3, #0]
   442ec:	1ad0      	subs	r0, r2, r3
   442ee:	e002      	b.n	442f6 <strncmp+0x26>
		n--;
   442f0:	3a01      	subs	r2, #1
   442f2:	e7ee      	b.n	442d2 <strncmp+0x2>
	return (n == 0) ? 0 : (*s1 - *s2);
   442f4:	4610      	mov	r0, r2
}
   442f6:	bd70      	pop	{r4, r5, r6, pc}

000442f8 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   442f8:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   442fa:	b15a      	cbz	r2, 44314 <memcmp+0x1c>
   442fc:	3901      	subs	r1, #1
   442fe:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   44300:	f810 2b01 	ldrb.w	r2, [r0], #1
   44304:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   44308:	42a0      	cmp	r0, r4
   4430a:	d001      	beq.n	44310 <memcmp+0x18>
   4430c:	429a      	cmp	r2, r3
   4430e:	d0f7      	beq.n	44300 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   44310:	1ad0      	subs	r0, r2, r3
}
   44312:	bd10      	pop	{r4, pc}
		return 0;
   44314:	4610      	mov	r0, r2
   44316:	e7fc      	b.n	44312 <memcmp+0x1a>

00044318 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   44318:	b510      	push	{r4, lr}
   4431a:	1e43      	subs	r3, r0, #1
   4431c:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   4431e:	4291      	cmp	r1, r2
   44320:	d100      	bne.n	44324 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   44322:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   44324:	f811 4b01 	ldrb.w	r4, [r1], #1
   44328:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   4432c:	e7f7      	b.n	4431e <memcpy+0x6>

0004432e <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   4432e:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   44330:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   44332:	4603      	mov	r3, r0
	while (n > 0) {
   44334:	4293      	cmp	r3, r2
   44336:	d100      	bne.n	4433a <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   44338:	4770      	bx	lr
		*(d_byte++) = c_byte;
   4433a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   4433e:	e7f9      	b.n	44334 <memset+0x6>

00044340 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   44340:	684b      	ldr	r3, [r1, #4]
   44342:	2b01      	cmp	r3, #1
   44344:	dd07      	ble.n	44356 <sprintf_out+0x16>
		*(p->ptr) = c;
   44346:	680b      	ldr	r3, [r1, #0]
   44348:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   4434a:	680b      	ldr	r3, [r1, #0]
   4434c:	3301      	adds	r3, #1
   4434e:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   44350:	684b      	ldr	r3, [r1, #4]
   44352:	3b01      	subs	r3, #1
   44354:	604b      	str	r3, [r1, #4]
}
   44356:	2000      	movs	r0, #0
   44358:	4770      	bx	lr

0004435a <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   4435a:	2806      	cmp	r0, #6
   4435c:	d108      	bne.n	44370 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   4435e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   44362:	2201      	movs	r2, #1
   44364:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   44368:	f3bf 8f4f 	dsb	sy
        __WFE();
   4436c:	bf20      	wfe
    while (true)
   4436e:	e7fd      	b.n	4436c <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   44370:	4770      	bx	lr

00044372 <pm_state_exit_post_ops>:
   44372:	2300      	movs	r3, #0
   44374:	f383 8811 	msr	BASEPRI, r3
   44378:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   4437c:	4770      	bx	lr

0004437e <bt_rpa_irk_matches>:
	return 0;
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   4437e:	b530      	push	{r4, r5, lr}
	memcpy(res, r, 3);
   44380:	2203      	movs	r2, #3
{
   44382:	b087      	sub	sp, #28
   44384:	4605      	mov	r5, r0
   44386:	460c      	mov	r4, r1
	memcpy(res, r, 3);
   44388:	a802      	add	r0, sp, #8
   4438a:	4411      	add	r1, r2
   4438c:	f7ff ffc4 	bl	44318 <memcpy>
	(void)memset(res + 3, 0, 13);
   44390:	220d      	movs	r2, #13
   44392:	2100      	movs	r1, #0
   44394:	f10d 000b 	add.w	r0, sp, #11
   44398:	f7ff ffc9 	bl	4432e <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   4439c:	aa02      	add	r2, sp, #8
   4439e:	4611      	mov	r1, r2
   443a0:	4628      	mov	r0, r5
   443a2:	f7ee fb13 	bl	329cc <bt_encrypt_le>
	if (err) {
   443a6:	b110      	cbz	r0, 443ae <bt_rpa_irk_matches+0x30>

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
	if (err) {
		return false;
   443a8:	2000      	movs	r0, #0
	}

	return !memcmp(addr->val, hash, 3);
}
   443aa:	b007      	add	sp, #28
   443ac:	bd30      	pop	{r4, r5, pc}
	memcpy(out, res, 3);
   443ae:	2203      	movs	r2, #3
   443b0:	a902      	add	r1, sp, #8
   443b2:	a801      	add	r0, sp, #4
   443b4:	f7ff ffb0 	bl	44318 <memcpy>
	return !memcmp(addr->val, hash, 3);
   443b8:	2203      	movs	r2, #3
   443ba:	a901      	add	r1, sp, #4
   443bc:	4620      	mov	r0, r4
   443be:	f7ff ff9b 	bl	442f8 <memcmp>
   443c2:	fab0 f080 	clz	r0, r0
   443c6:	0940      	lsrs	r0, r0, #5
   443c8:	e7ef      	b.n	443aa <bt_rpa_irk_matches+0x2c>

000443ca <send_cmd_status>:
{
   443ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   443ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   443d2:	4606      	mov	r6, r0
   443d4:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   443d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   443da:	2100      	movs	r1, #0
   443dc:	200f      	movs	r0, #15
   443de:	f7e6 fd87 	bl	2aef0 <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   443e2:	2701      	movs	r7, #1
	return net_buf_simple_add(&buf->b, len);
   443e4:	f100 0808 	add.w	r8, r0, #8
   443e8:	4604      	mov	r4, r0
   443ea:	7507      	strb	r7, [r0, #20]
   443ec:	2102      	movs	r1, #2
   443ee:	4640      	mov	r0, r8
   443f0:	f002 feed 	bl	471ce <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   443f4:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   443f6:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   443f8:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   443fa:	7041      	strb	r1, [r0, #1]
   443fc:	4640      	mov	r0, r8
   443fe:	f002 fee6 	bl	471ce <net_buf_simple_add>
	evt->ncmd = 1U;
   44402:	7047      	strb	r7, [r0, #1]
	evt->opcode = sys_cpu_to_le16(opcode);
   44404:	8046      	strh	r6, [r0, #2]
	evt->status = status;
   44406:	7005      	strb	r5, [r0, #0]
		bt_recv_prio(buf);
   44408:	4620      	mov	r0, r4
}
   4440a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv_prio(buf);
   4440e:	f7e7 ba0f 	b.w	2b830 <bt_recv_prio>

00044412 <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   44412:	f101 0320 	add.w	r3, r1, #32
   44416:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   44418:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   4441c:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   44420:	428b      	cmp	r3, r1
   44422:	d1f9      	bne.n	44418 <sys_memcpy_swap.constprop.0+0x6>
}
   44424:	4770      	bx	lr

00044426 <bt_hci_ecc_supported_commands>:
void bt_hci_ecc_supported_commands(uint8_t *supported_commands)
{
	/* LE Read Local P-256 Public Key */
	supported_commands[34] |= BIT(1);
	/* LE Generate DH Key v1 */
	supported_commands[34] |= BIT(2);
   44426:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   4442a:	f043 0306 	orr.w	r3, r3, #6
   4442e:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	/* LE Generate DH Key v2 */
	supported_commands[41] |= BIT(2);
   44432:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   44436:	f043 0304 	orr.w	r3, r3, #4
   4443a:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
}
   4443e:	4770      	bx	lr

00044440 <default_CSPRNG>:

int default_CSPRNG(uint8_t *dst, unsigned int len)
{
   44440:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   44442:	f7ee fac1 	bl	329c8 <bt_rand>
}
   44446:	fab0 f080 	clz	r0, r0
   4444a:	0940      	lsrs	r0, r0, #5
   4444c:	bd08      	pop	{r3, pc}

0004444e <bt_settings_decode_key>:
{
   4444e:	b570      	push	{r4, r5, r6, lr}
   44450:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   44452:	2100      	movs	r1, #0
{
   44454:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   44456:	f7fe fbf6 	bl	42c46 <settings_name_next>
   4445a:	280d      	cmp	r0, #13
   4445c:	d118      	bne.n	44490 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   4445e:	7b23      	ldrb	r3, [r4, #12]
   44460:	2b30      	cmp	r3, #48	; 0x30
   44462:	d013      	beq.n	4448c <bt_settings_decode_key+0x3e>
	} else if (key[12] == '1') {
   44464:	2b31      	cmp	r3, #49	; 0x31
   44466:	d113      	bne.n	44490 <bt_settings_decode_key+0x42>
   44468:	2301      	movs	r3, #1
		addr->type = BT_ADDR_LE_PUBLIC;
   4446a:	f805 3b06 	strb.w	r3, [r5], #6
   4446e:	f104 060c 	add.w	r6, r4, #12
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   44472:	462a      	mov	r2, r5
   44474:	4620      	mov	r0, r4
   44476:	2301      	movs	r3, #1
   44478:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   4447a:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   4447c:	f7fd fd2a 	bl	41ed4 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   44480:	42b4      	cmp	r4, r6
   44482:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   44486:	d1f4      	bne.n	44472 <bt_settings_decode_key+0x24>
	return 0;
   44488:	2000      	movs	r0, #0
}
   4448a:	bd70      	pop	{r4, r5, r6, pc}
   4448c:	2300      	movs	r3, #0
   4448e:	e7ec      	b.n	4446a <bt_settings_decode_key+0x1c>
		return -EINVAL;
   44490:	f06f 0015 	mvn.w	r0, #21
   44494:	e7f9      	b.n	4448a <bt_settings_decode_key+0x3c>

00044496 <bt_settings_init>:
{
	int err;

	BT_DBG("");

	err = settings_subsys_init();
   44496:	f7e5 bbf7 	b.w	29c88 <settings_subsys_init>

0004449a <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   4449a:	b510      	push	{r4, lr}
   4449c:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   4449e:	7801      	ldrb	r1, [r0, #0]
   444a0:	7822      	ldrb	r2, [r4, #0]
   444a2:	428a      	cmp	r2, r1
{
   444a4:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   444a6:	d00f      	beq.n	444c8 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   444a8:	4669      	mov	r1, sp
   444aa:	f7e6 fcc1 	bl	2ae30 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   444ae:	a905      	add	r1, sp, #20
   444b0:	4620      	mov	r0, r4
   444b2:	f7e6 fcbd 	bl	2ae30 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   444b6:	2210      	movs	r2, #16
   444b8:	f10d 0115 	add.w	r1, sp, #21
   444bc:	f10d 0001 	add.w	r0, sp, #1
   444c0:	f7ff ff1a 	bl	442f8 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   444c4:	b00a      	add	sp, #40	; 0x28
   444c6:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   444c8:	2a01      	cmp	r2, #1
   444ca:	d006      	beq.n	444da <bt_uuid_cmp+0x40>
   444cc:	2a02      	cmp	r2, #2
   444ce:	d007      	beq.n	444e0 <bt_uuid_cmp+0x46>
   444d0:	b972      	cbnz	r2, 444f0 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   444d2:	8840      	ldrh	r0, [r0, #2]
   444d4:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   444d6:	1ac0      	subs	r0, r0, r3
   444d8:	e7f4      	b.n	444c4 <bt_uuid_cmp+0x2a>
   444da:	6840      	ldr	r0, [r0, #4]
   444dc:	6863      	ldr	r3, [r4, #4]
   444de:	e7fa      	b.n	444d6 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   444e0:	2210      	movs	r2, #16
   444e2:	1c61      	adds	r1, r4, #1
   444e4:	3001      	adds	r0, #1
}
   444e6:	b00a      	add	sp, #40	; 0x28
   444e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   444ec:	f7ff bf04 	b.w	442f8 <memcmp>
	switch (u1->type) {
   444f0:	f06f 0015 	mvn.w	r0, #21
   444f4:	e7e6      	b.n	444c4 <bt_uuid_cmp+0x2a>

000444f6 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   444f6:	2a04      	cmp	r2, #4
{
   444f8:	b510      	push	{r4, lr}
	switch (data_len) {
   444fa:	d00a      	beq.n	44512 <bt_uuid_create+0x1c>
   444fc:	2a10      	cmp	r2, #16
   444fe:	d00d      	beq.n	4451c <bt_uuid_create+0x26>
   44500:	2a02      	cmp	r2, #2
   44502:	f04f 0300 	mov.w	r3, #0
   44506:	d10f      	bne.n	44528 <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   44508:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   4450a:	880b      	ldrh	r3, [r1, #0]
   4450c:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   4450e:	2001      	movs	r0, #1
}
   44510:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   44512:	2301      	movs	r3, #1
   44514:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   44516:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   44518:	6043      	str	r3, [r0, #4]
		break;
   4451a:	e7f8      	b.n	4450e <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   4451c:	2302      	movs	r3, #2
   4451e:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   44522:	f7ff fef9 	bl	44318 <memcpy>
		break;
   44526:	e7f2      	b.n	4450e <bt_uuid_create+0x18>
	switch (data_len) {
   44528:	4618      	mov	r0, r3
   4452a:	e7f1      	b.n	44510 <bt_uuid_create+0x1a>

0004452c <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   4452c:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   4452e:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   44530:	2106      	movs	r1, #6
{
   44532:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   44534:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   44538:	f7ee fa46 	bl	329c8 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   4453c:	b918      	cbnz	r0, 44546 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   4453e:	79a3      	ldrb	r3, [r4, #6]
   44540:	f063 033f 	orn	r3, r3, #63	; 0x3f
   44544:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   44546:	bd10      	pop	{r4, pc}

00044548 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   44548:	280f      	cmp	r0, #15
   4454a:	d807      	bhi.n	4455c <bt_hci_evt_get_flags+0x14>
   4454c:	280d      	cmp	r0, #13
   4454e:	d80b      	bhi.n	44568 <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   44550:	2805      	cmp	r0, #5
   44552:	bf08      	it	eq
   44554:	2003      	moveq	r0, #3
   44556:	bf18      	it	ne
   44558:	2002      	movne	r0, #2
   4455a:	4770      	bx	lr
	switch (evt) {
   4455c:	2813      	cmp	r0, #19
   4455e:	d003      	beq.n	44568 <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   44560:	281a      	cmp	r0, #26
   44562:	bf08      	it	eq
   44564:	2001      	moveq	r0, #1
   44566:	e7f6      	b.n	44556 <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   44568:	2001      	movs	r0, #1
	}
}
   4456a:	4770      	bx	lr

0004456c <hci_data_buf_overflow>:
}
   4456c:	4770      	bx	lr

0004456e <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   4456e:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   44572:	b183      	cbz	r3, 44596 <update_sec_level+0x28>
   44574:	7b5a      	ldrb	r2, [r3, #13]
   44576:	07d1      	lsls	r1, r2, #31
   44578:	d50d      	bpl.n	44596 <update_sec_level+0x28>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   4457a:	06d2      	lsls	r2, r2, #27
   4457c:	d50d      	bpl.n	4459a <update_sec_level+0x2c>
   4457e:	7b1b      	ldrb	r3, [r3, #12]
   44580:	2b10      	cmp	r3, #16
   44582:	bf14      	ite	ne
   44584:	2303      	movne	r3, #3
   44586:	2304      	moveq	r3, #4
			conn->sec_level = BT_SECURITY_L3;
   44588:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   4458a:	7a80      	ldrb	r0, [r0, #10]
}
   4458c:	4298      	cmp	r0, r3
   4458e:	bf8c      	ite	hi
   44590:	2000      	movhi	r0, #0
   44592:	2001      	movls	r0, #1
   44594:	4770      	bx	lr
   44596:	2302      	movs	r3, #2
   44598:	e7f6      	b.n	44588 <update_sec_level+0x1a>
   4459a:	2303      	movs	r3, #3
   4459c:	e7f4      	b.n	44588 <update_sec_level+0x1a>

0004459e <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   4459e:	2207      	movs	r2, #7
   445a0:	f7ff beba 	b.w	44318 <memcpy>

000445a4 <atomic_or>:
{
   445a4:	b510      	push	{r4, lr}
   445a6:	4603      	mov	r3, r0
}
   445a8:	f3bf 8f5b 	dmb	ish
   445ac:	e853 0f00 	ldrex	r0, [r3]
   445b0:	ea40 0201 	orr.w	r2, r0, r1
   445b4:	e843 2400 	strex	r4, r2, [r3]
   445b8:	2c00      	cmp	r4, #0
   445ba:	d1f7      	bne.n	445ac <atomic_or+0x8>
   445bc:	f3bf 8f5b 	dmb	ish
   445c0:	bd10      	pop	{r4, pc}

000445c2 <hci_disconn_complete>:
{
   445c2:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   445c4:	6885      	ldr	r5, [r0, #8]
	if (evt->status) {
   445c6:	782e      	ldrb	r6, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   445c8:	f8b5 0001 	ldrh.w	r0, [r5, #1]
	if (evt->status) {
   445cc:	b96e      	cbnz	r6, 445ea <hci_disconn_complete+0x28>
	conn = bt_conn_lookup_handle(handle);
   445ce:	f7e8 f9d7 	bl	2c980 <bt_conn_lookup_handle>
	if (!conn) {
   445d2:	4604      	mov	r4, r0
   445d4:	b148      	cbz	r0, 445ea <hci_disconn_complete+0x28>
	conn->err = evt->reason;
   445d6:	78eb      	ldrb	r3, [r5, #3]
   445d8:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   445da:	4631      	mov	r1, r6
   445dc:	f7e8 f9d8 	bl	2c990 <bt_conn_set_state>
		bt_conn_unref(conn);
   445e0:	4620      	mov	r0, r4
}
   445e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   445e6:	f000 bdd4 	b.w	45192 <bt_conn_unref>
}
   445ea:	bd70      	pop	{r4, r5, r6, pc}

000445ec <le_data_len_change>:
{
   445ec:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   445ee:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   445f0:	8818      	ldrh	r0, [r3, #0]
   445f2:	f7e8 f9c5 	bl	2c980 <bt_conn_lookup_handle>
	if (!conn) {
   445f6:	b118      	cbz	r0, 44600 <le_data_len_change+0x14>
}
   445f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   445fc:	f000 bdc9 	b.w	45192 <bt_conn_unref>
}
   44600:	bd08      	pop	{r3, pc}

00044602 <hci_hardware_error>:
	return net_buf_simple_pull_mem(&buf->b, len);
   44602:	2101      	movs	r1, #1
   44604:	3008      	adds	r0, #8
   44606:	f002 be09 	b.w	4721c <net_buf_simple_pull_mem>

0004460a <le_conn_update_complete>:
{
   4460a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   4460c:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   4460e:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   44612:	f7e8 f9b5 	bl	2c980 <bt_conn_lookup_handle>
	if (!conn) {
   44616:	4604      	mov	r4, r0
   44618:	b360      	cbz	r0, 44674 <le_conn_update_complete+0x6a>
	if (!evt->status) {
   4461a:	782b      	ldrb	r3, [r5, #0]
   4461c:	b99b      	cbnz	r3, 44646 <le_conn_update_complete+0x3c>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   4461e:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   44622:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   44626:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   4462a:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   4462e:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   44632:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   44636:	f7e8 fa7d 	bl	2cb34 <notify_le_param_updated>
	bt_conn_unref(conn);
   4463a:	4620      	mov	r0, r4
}
   4463c:	b003      	add	sp, #12
   4463e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_conn_unref(conn);
   44642:	f000 bda6 	b.w	45192 <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   44646:	2b1a      	cmp	r3, #26
   44648:	d1f7      	bne.n	4463a <le_conn_update_complete+0x30>
   4464a:	78c3      	ldrb	r3, [r0, #3]
   4464c:	2b01      	cmp	r3, #1
   4464e:	d1f4      	bne.n	4463a <le_conn_update_complete+0x30>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   44650:	f44f 7100 	mov.w	r1, #512	; 0x200
   44654:	3004      	adds	r0, #4
   44656:	f7ff ffa5 	bl	445a4 <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   4465a:	0583      	lsls	r3, r0, #22
   4465c:	d4ed      	bmi.n	4463a <le_conn_update_complete+0x30>
		param.interval_min = conn->le.interval_min;
   4465e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   44662:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   44664:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   44666:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   4466a:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   4466c:	4620      	mov	r0, r4
   4466e:	f7e8 fd5b 	bl	2d128 <bt_l2cap_update_conn_param>
   44672:	e7e2      	b.n	4463a <le_conn_update_complete+0x30>
}
   44674:	b003      	add	sp, #12
   44676:	bd30      	pop	{r4, r5, pc}

00044678 <le_remote_feat_complete>:
{
   44678:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   4467a:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   4467c:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   44680:	f7e8 f97e 	bl	2c980 <bt_conn_lookup_handle>
	if (!conn) {
   44684:	4604      	mov	r4, r0
   44686:	b180      	cbz	r0, 446aa <le_remote_feat_complete+0x32>
	if (!evt->status) {
   44688:	782b      	ldrb	r3, [r5, #0]
   4468a:	b923      	cbnz	r3, 44696 <le_remote_feat_complete+0x1e>
		memcpy(conn->le.features, evt->features,
   4468c:	2208      	movs	r2, #8
   4468e:	1ce9      	adds	r1, r5, #3
   44690:	30ac      	adds	r0, #172	; 0xac
   44692:	f7ff fe41 	bl	44318 <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   44696:	1d20      	adds	r0, r4, #4
   44698:	f44f 6100 	mov.w	r1, #2048	; 0x800
   4469c:	f7ff ff82 	bl	445a4 <atomic_or>
	bt_conn_unref(conn);
   446a0:	4620      	mov	r0, r4
}
   446a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   446a6:	f000 bd74 	b.w	45192 <bt_conn_unref>
}
   446aa:	bd38      	pop	{r3, r4, r5, pc}

000446ac <handle_event_common.isra.0>:
static int handle_event_common(uint8_t event, struct net_buf *buf,
   446ac:	b430      	push	{r4, r5}
   446ae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   446b2:	4604      	mov	r4, r0
   446b4:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
   446b6:	429a      	cmp	r2, r3
   446b8:	d101      	bne.n	446be <handle_event_common.isra.0+0x12>
}
   446ba:	bc30      	pop	{r4, r5}
   446bc:	4770      	bx	lr
		if (handler->event != event) {
   446be:	4611      	mov	r1, r2
   446c0:	f811 5b08 	ldrb.w	r5, [r1], #8
   446c4:	42a5      	cmp	r5, r4
   446c6:	d106      	bne.n	446d6 <handle_event_common.isra.0+0x2a>
		if (buf->len < handler->min_len) {
   446c8:	8981      	ldrh	r1, [r0, #12]
   446ca:	7853      	ldrb	r3, [r2, #1]
   446cc:	4299      	cmp	r1, r3
   446ce:	d3f4      	bcc.n	446ba <handle_event_common.isra.0+0xe>
}
   446d0:	bc30      	pop	{r4, r5}
		handler->handler(buf);
   446d2:	6853      	ldr	r3, [r2, #4]
   446d4:	4718      	bx	r3
   446d6:	460a      	mov	r2, r1
   446d8:	e7ed      	b.n	446b6 <handle_event_common.isra.0+0xa>

000446da <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   446da:	f3bf 8f5b 	dmb	ish
   446de:	e850 3f00 	ldrex	r3, [r0]
   446e2:	400b      	ands	r3, r1
   446e4:	e840 3200 	strex	r2, r3, [r0]
   446e8:	2a00      	cmp	r2, #0
   446ea:	d1f8      	bne.n	446de <atomic_and.isra.0+0x4>
   446ec:	f3bf 8f5b 	dmb	ish
}
   446f0:	4770      	bx	lr

000446f2 <hci_vendor_event>:
static void hci_vendor_event(struct net_buf *buf)
   446f2:	4770      	bx	lr

000446f4 <sys_put_le64>:
	dst[1] = val >> 8;
   446f4:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   446f8:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   446fa:	0e00      	lsrs	r0, r0, #24
   446fc:	7053      	strb	r3, [r2, #1]
   446fe:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   44700:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   44702:	f3c1 2007 	ubfx	r0, r1, #8, #8
   44706:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   44708:	7093      	strb	r3, [r2, #2]
   4470a:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   4470c:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   4470e:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   44710:	71d1      	strb	r1, [r2, #7]
}
   44712:	4770      	bx	lr

00044714 <hci_num_completed_packets>:
{
   44714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (i = 0; i < evt->num_handles; i++) {
   44718:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   4471a:	6887      	ldr	r7, [r0, #8]
			tx->pending_no_cb = 0U;
   4471c:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   4471e:	783b      	ldrb	r3, [r7, #0]
   44720:	429d      	cmp	r5, r3
   44722:	db01      	blt.n	44728 <hci_num_completed_packets+0x14>
}
   44724:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   44728:	eb07 0385 	add.w	r3, r7, r5, lsl #2
		conn = bt_conn_lookup_handle(handle);
   4472c:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   44730:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   44734:	f7e8 f924 	bl	2c980 <bt_conn_lookup_handle>
		if (!conn) {
   44738:	4604      	mov	r4, r0
   4473a:	b318      	cbz	r0, 44784 <hci_num_completed_packets+0x70>
			k_work_submit(&conn->tx_complete_work);
   4473c:	f100 0928 	add.w	r9, r0, #40	; 0x28
		while (count--) {
   44740:	b1ee      	cbz	r6, 4477e <hci_num_completed_packets+0x6a>
	__asm__ volatile(
   44742:	f04f 0320 	mov.w	r3, #32
   44746:	f3ef 8211 	mrs	r2, BASEPRI
   4474a:	f383 8812 	msr	BASEPRI_MAX, r3
   4474e:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   44752:	69e3      	ldr	r3, [r4, #28]
   44754:	b16b      	cbz	r3, 44772 <hci_num_completed_packets+0x5e>
				conn->pending_no_cb--;
   44756:	3b01      	subs	r3, #1
   44758:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   4475a:	f382 8811 	msr	BASEPRI, r2
   4475e:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   44762:	4620      	mov	r0, r4
   44764:	f7e8 f860 	bl	2c828 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   44768:	3e01      	subs	r6, #1
   4476a:	f7fc f9fd 	bl	40b68 <z_impl_k_sem_give>
   4476e:	b2b6      	uxth	r6, r6
   44770:	e7e6      	b.n	44740 <hci_num_completed_packets+0x2c>
	return list->head;
   44772:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
   44774:	b943      	cbnz	r3, 44788 <hci_num_completed_packets+0x74>
   44776:	f382 8811 	msr	BASEPRI, r2
   4477a:	f3bf 8f6f 	isb	sy
		bt_conn_unref(conn);
   4477e:	4620      	mov	r0, r4
   44780:	f000 fd07 	bl	45192 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   44784:	3501      	adds	r5, #1
   44786:	e7ca      	b.n	4471e <hci_num_completed_packets+0xa>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   44788:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   4478a:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   4478c:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   4478e:	428b      	cmp	r3, r1
	list->tail = node;
   44790:	bf08      	it	eq
   44792:	61a0      	streq	r0, [r4, #24]
   44794:	f382 8811 	msr	BASEPRI, r2
   44798:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   4479c:	f04f 0220 	mov.w	r2, #32
   447a0:	f3ef 8111 	mrs	r1, BASEPRI
   447a4:	f382 8812 	msr	BASEPRI_MAX, r2
   447a8:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   447ac:	68da      	ldr	r2, [r3, #12]
   447ae:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   447b0:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   447b4:	f8c3 8000 	str.w	r8, [r3]
	return list->tail;
   447b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   447ba:	b94a      	cbnz	r2, 447d0 <hci_num_completed_packets+0xbc>
	list->head = node;
   447bc:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   447c0:	f381 8811 	msr	BASEPRI, r1
   447c4:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   447c8:	4648      	mov	r0, r9
   447ca:	f7fc fb6b 	bl	40ea4 <k_work_submit>
   447ce:	e7c8      	b.n	44762 <hci_num_completed_packets+0x4e>
	parent->next = child;
   447d0:	6013      	str	r3, [r2, #0]
	list->tail = node;
   447d2:	6263      	str	r3, [r4, #36]	; 0x24
}
   447d4:	e7f4      	b.n	447c0 <hci_num_completed_packets+0xac>

000447d6 <le_ltk_request>:
{
   447d6:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   447d8:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   447da:	8826      	ldrh	r6, [r4, #0]
{
   447dc:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
   447de:	b2b0      	uxth	r0, r6
   447e0:	f7e8 f8ce 	bl	2c980 <bt_conn_lookup_handle>
	if (!conn) {
   447e4:	4605      	mov	r5, r0
   447e6:	b318      	cbz	r0, 44830 <le_ltk_request+0x5a>
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   447e8:	af02      	add	r7, sp, #8
   447ea:	f8d4 2002 	ldr.w	r2, [r4, #2]
   447ee:	f8d4 3006 	ldr.w	r3, [r4, #6]
   447f2:	9701      	str	r7, [sp, #4]
   447f4:	8961      	ldrh	r1, [r4, #10]
   447f6:	9100      	str	r1, [sp, #0]
   447f8:	f002 f9e1 	bl	46bbe <bt_smp_request_ltk>
   447fc:	b1d0      	cbz	r0, 44834 <le_ltk_request+0x5e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   447fe:	2112      	movs	r1, #18
   44800:	f242 001a 	movw	r0, #8218	; 0x201a
   44804:	f7e6 fd10 	bl	2b228 <bt_hci_cmd_create>
	if (!buf) {
   44808:	4604      	mov	r4, r0
   4480a:	b170      	cbz	r0, 4482a <le_ltk_request+0x54>
	return net_buf_simple_add(&buf->b, len);
   4480c:	2112      	movs	r1, #18
   4480e:	3008      	adds	r0, #8
   44810:	f002 fcdd 	bl	471ce <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   44814:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
   44816:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   4481a:	2210      	movs	r2, #16
   4481c:	f7ff fd7c 	bl	44318 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   44820:	4621      	mov	r1, r4
   44822:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   44826:	f7e6 fd39 	bl	2b29c <bt_hci_cmd_send>
	bt_conn_unref(conn);
   4482a:	4628      	mov	r0, r5
   4482c:	f000 fcb1 	bl	45192 <bt_conn_unref>
}
   44830:	b007      	add	sp, #28
   44832:	bdf0      	pop	{r4, r5, r6, r7, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   44834:	2102      	movs	r1, #2
   44836:	f242 001b 	movw	r0, #8219	; 0x201b
   4483a:	f7e6 fcf5 	bl	2b228 <bt_hci_cmd_create>
	if (!buf) {
   4483e:	4604      	mov	r4, r0
   44840:	2800      	cmp	r0, #0
   44842:	d0f2      	beq.n	4482a <le_ltk_request+0x54>
   44844:	2102      	movs	r1, #2
   44846:	3008      	adds	r0, #8
   44848:	f002 fcc1 	bl	471ce <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   4484c:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   4484e:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   44850:	f242 001b 	movw	r0, #8219	; 0x201b
   44854:	e7e7      	b.n	44826 <le_ltk_request+0x50>

00044856 <le_conn_param_neg_reply>:
{
   44856:	b570      	push	{r4, r5, r6, lr}
   44858:	4606      	mov	r6, r0
   4485a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   4485c:	f242 0021 	movw	r0, #8225	; 0x2021
   44860:	2103      	movs	r1, #3
   44862:	f7e6 fce1 	bl	2b228 <bt_hci_cmd_create>
	if (!buf) {
   44866:	4604      	mov	r4, r0
   44868:	b160      	cbz	r0, 44884 <le_conn_param_neg_reply+0x2e>
   4486a:	2103      	movs	r1, #3
   4486c:	3008      	adds	r0, #8
   4486e:	f002 fcae 	bl	471ce <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   44872:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   44874:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   44876:	4621      	mov	r1, r4
   44878:	f242 0021 	movw	r0, #8225	; 0x2021
}
   4487c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   44880:	f7e6 bd0c 	b.w	2b29c <bt_hci_cmd_send>
}
   44884:	bd70      	pop	{r4, r5, r6, pc}

00044886 <le_conn_param_req>:
{
   44886:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   44888:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   4488a:	78d9      	ldrb	r1, [r3, #3]
   4488c:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   4488e:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   44890:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   44894:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   44898:	7959      	ldrb	r1, [r3, #5]
   4489a:	791a      	ldrb	r2, [r3, #4]
   4489c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   448a0:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   448a4:	799a      	ldrb	r2, [r3, #6]
   448a6:	79d9      	ldrb	r1, [r3, #7]
   448a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   448ac:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   448b0:	7a1a      	ldrb	r2, [r3, #8]
   448b2:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   448b4:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   448b6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   448ba:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   448bc:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   448c0:	f7e8 f85e 	bl	2c980 <bt_conn_lookup_handle>
	if (!conn) {
   448c4:	4606      	mov	r6, r0
   448c6:	b928      	cbnz	r0, 448d4 <le_conn_param_req+0x4e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   448c8:	2102      	movs	r1, #2
   448ca:	4620      	mov	r0, r4
   448cc:	f7ff ffc3 	bl	44856 <le_conn_param_neg_reply>
}
   448d0:	b003      	add	sp, #12
   448d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   448d4:	4669      	mov	r1, sp
   448d6:	f7e8 f993 	bl	2cc00 <le_param_req>
   448da:	b938      	cbnz	r0, 448ec <le_conn_param_req+0x66>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   448dc:	211e      	movs	r1, #30
   448de:	4620      	mov	r0, r4
   448e0:	f7ff ffb9 	bl	44856 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   448e4:	4630      	mov	r0, r6
   448e6:	f000 fc54 	bl	45192 <bt_conn_unref>
   448ea:	e7f1      	b.n	448d0 <le_conn_param_req+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   448ec:	210e      	movs	r1, #14
   448ee:	f242 0020 	movw	r0, #8224	; 0x2020
   448f2:	f7e6 fc99 	bl	2b228 <bt_hci_cmd_create>
	if (!buf) {
   448f6:	4605      	mov	r5, r0
   448f8:	2800      	cmp	r0, #0
   448fa:	d0f3      	beq.n	448e4 <le_conn_param_req+0x5e>
   448fc:	210e      	movs	r1, #14
   448fe:	3008      	adds	r0, #8
   44900:	f002 fc65 	bl	471ce <net_buf_simple_add>
   44904:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   44906:	220e      	movs	r2, #14
   44908:	2100      	movs	r1, #0
   4490a:	f7ff fd10 	bl	4432e <memset>
	cp->handle = sys_cpu_to_le16(handle);
   4490e:	8027      	strh	r7, [r4, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   44910:	f8bd 3000 	ldrh.w	r3, [sp]
   44914:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   44916:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   4491a:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   4491c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   44920:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   44922:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   44926:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   44928:	4629      	mov	r1, r5
   4492a:	f242 0020 	movw	r0, #8224	; 0x2020
   4492e:	f7e6 fcb5 	bl	2b29c <bt_hci_cmd_send>
   44932:	e7d7      	b.n	448e4 <le_conn_param_req+0x5e>

00044934 <hci_le_read_max_data_len>:
{
   44934:	b573      	push	{r0, r1, r4, r5, r6, lr}
   44936:	4606      	mov	r6, r0
   44938:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   4493a:	aa01      	add	r2, sp, #4
   4493c:	2100      	movs	r1, #0
   4493e:	f242 002f 	movw	r0, #8239	; 0x202f
   44942:	f7e6 fccd 	bl	2b2e0 <bt_hci_cmd_send_sync>
	if (err) {
   44946:	4604      	mov	r4, r0
   44948:	b948      	cbnz	r0, 4495e <hci_le_read_max_data_len+0x2a>
	rp = (void *)rsp->data;
   4494a:	9801      	ldr	r0, [sp, #4]
   4494c:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   4494e:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   44952:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   44954:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   44958:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   4495a:	f7f7 fcd9 	bl	3c310 <net_buf_unref>
}
   4495e:	4620      	mov	r0, r4
   44960:	b002      	add	sp, #8
   44962:	bd70      	pop	{r4, r5, r6, pc}

00044964 <le_phy_update_complete>:
{
   44964:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
   44966:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   44968:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   4496c:	f7e8 f808 	bl	2c980 <bt_conn_lookup_handle>
	if (!conn) {
   44970:	4604      	mov	r4, r0
   44972:	b188      	cbz	r0, 44998 <le_phy_update_complete+0x34>
	conn->le.phy.tx_phy = bt_get_phy(evt->tx_phy);
   44974:	78e8      	ldrb	r0, [r5, #3]
   44976:	f7e6 fd41 	bl	2b3fc <bt_get_phy>
   4497a:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
	conn->le.phy.rx_phy = bt_get_phy(evt->rx_phy);
   4497e:	7928      	ldrb	r0, [r5, #4]
   44980:	f7e6 fd3c 	bl	2b3fc <bt_get_phy>
   44984:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
	notify_le_phy_updated(conn);
   44988:	4620      	mov	r0, r4
   4498a:	f7e8 f917 	bl	2cbbc <notify_le_phy_updated>
	bt_conn_unref(conn);
   4498e:	4620      	mov	r0, r4
}
   44990:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   44994:	f000 bbfd 	b.w	45192 <bt_conn_unref>
}
   44998:	bd38      	pop	{r3, r4, r5, pc}

0004499a <bt_hci_disconnect>:
{
   4499a:	b570      	push	{r4, r5, r6, lr}
   4499c:	4606      	mov	r6, r0
   4499e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   449a0:	f240 4006 	movw	r0, #1030	; 0x406
   449a4:	2103      	movs	r1, #3
   449a6:	f7e6 fc3f 	bl	2b228 <bt_hci_cmd_create>
	if (!buf) {
   449aa:	4604      	mov	r4, r0
   449ac:	b168      	cbz	r0, 449ca <bt_hci_disconnect+0x30>
   449ae:	2103      	movs	r1, #3
   449b0:	3008      	adds	r0, #8
   449b2:	f002 fc0c 	bl	471ce <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   449b6:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   449b8:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   449ba:	4621      	mov	r1, r4
   449bc:	2200      	movs	r2, #0
}
   449be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   449c2:	f240 4006 	movw	r0, #1030	; 0x406
   449c6:	f7e6 bc8b 	b.w	2b2e0 <bt_hci_cmd_send_sync>
}
   449ca:	f06f 0068 	mvn.w	r0, #104	; 0x68
   449ce:	bd70      	pop	{r4, r5, r6, pc}

000449d0 <bt_le_set_data_len>:
{
   449d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   449d2:	4607      	mov	r7, r0
   449d4:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   449d6:	f242 0022 	movw	r0, #8226	; 0x2022
   449da:	2106      	movs	r1, #6
{
   449dc:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   449de:	f7e6 fc23 	bl	2b228 <bt_hci_cmd_create>
	if (!buf) {
   449e2:	4604      	mov	r4, r0
   449e4:	b178      	cbz	r0, 44a06 <bt_le_set_data_len+0x36>
   449e6:	2106      	movs	r1, #6
   449e8:	3008      	adds	r0, #8
   449ea:	f002 fbf0 	bl	471ce <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   449ee:	883b      	ldrh	r3, [r7, #0]
   449f0:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   449f2:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   449f4:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   449f6:	4621      	mov	r1, r4
   449f8:	2200      	movs	r2, #0
}
   449fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   449fe:	f242 0022 	movw	r0, #8226	; 0x2022
   44a02:	f7e6 bc6d 	b.w	2b2e0 <bt_hci_cmd_send_sync>
}
   44a06:	f06f 0068 	mvn.w	r0, #104	; 0x68
   44a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00044a0c <bt_le_set_phy>:
{
   44a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   44a10:	4681      	mov	r9, r0
   44a12:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   44a14:	f242 0032 	movw	r0, #8242	; 0x2032
   44a18:	2107      	movs	r1, #7
{
   44a1a:	f89d a020 	ldrb.w	sl, [sp, #32]
   44a1e:	4617      	mov	r7, r2
   44a20:	461e      	mov	r6, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   44a22:	f7e6 fc01 	bl	2b228 <bt_hci_cmd_create>
	if (!buf) {
   44a26:	4605      	mov	r5, r0
   44a28:	b1a0      	cbz	r0, 44a54 <bt_le_set_phy+0x48>
   44a2a:	2107      	movs	r1, #7
   44a2c:	3008      	adds	r0, #8
   44a2e:	f002 fbce 	bl	471ce <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   44a32:	f8b9 3000 	ldrh.w	r3, [r9]
   44a36:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   44a38:	f880 8002 	strb.w	r8, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   44a3c:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   44a3e:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   44a40:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   44a44:	4629      	mov	r1, r5
   44a46:	2200      	movs	r2, #0
}
   44a48:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   44a4c:	f242 0032 	movw	r0, #8242	; 0x2032
   44a50:	f7e6 bc46 	b.w	2b2e0 <bt_hci_cmd_send_sync>
}
   44a54:	f06f 0068 	mvn.w	r0, #104	; 0x68
   44a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00044a5c <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   44a5c:	6880      	ldr	r0, [r0, #8]
   44a5e:	f7e6 bcd7 	b.w	2b410 <bt_hci_le_enh_conn_complete>

00044a62 <bt_le_conn_params_valid>:
{
   44a62:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   44a64:	8803      	ldrh	r3, [r0, #0]
   44a66:	8842      	ldrh	r2, [r0, #2]
   44a68:	4293      	cmp	r3, r2
   44a6a:	d819      	bhi.n	44aa0 <bt_le_conn_params_valid+0x3e>
   44a6c:	2b05      	cmp	r3, #5
   44a6e:	d917      	bls.n	44aa0 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   44a70:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   44a74:	d814      	bhi.n	44aa0 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   44a76:	8883      	ldrh	r3, [r0, #4]
   44a78:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   44a7c:	d210      	bcs.n	44aa0 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   44a7e:	88c0      	ldrh	r0, [r0, #6]
   44a80:	f1a0 010a 	sub.w	r1, r0, #10
   44a84:	b289      	uxth	r1, r1
   44a86:	f640 4476 	movw	r4, #3190	; 0xc76
   44a8a:	42a1      	cmp	r1, r4
   44a8c:	d808      	bhi.n	44aa0 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   44a8e:	3301      	adds	r3, #1
   44a90:	b29b      	uxth	r3, r3
   44a92:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   44a94:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   44a98:	bf34      	ite	cc
   44a9a:	2001      	movcc	r0, #1
   44a9c:	2000      	movcs	r0, #0
}
   44a9e:	bd10      	pop	{r4, pc}
		return false;
   44aa0:	2000      	movs	r0, #0
   44aa2:	e7fc      	b.n	44a9e <bt_le_conn_params_valid+0x3c>

00044aa4 <hci_encrypt_key_refresh_complete>:
{
   44aa4:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   44aa6:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   44aa8:	f8b3 0001 	ldrh.w	r0, [r3, #1]
	uint8_t status = evt->status;
   44aac:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   44aae:	f7e7 ff67 	bl	2c980 <bt_conn_lookup_handle>
	if (!conn) {
   44ab2:	4604      	mov	r4, r0
   44ab4:	b320      	cbz	r0, 44b00 <hci_encrypt_key_refresh_complete+0x5c>
	if (status) {
   44ab6:	b165      	cbz	r5, 44ad2 <hci_encrypt_key_refresh_complete+0x2e>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   44ab8:	4628      	mov	r0, r5
   44aba:	f7e6 fde5 	bl	2b688 <bt_security_err_get>
   44abe:	4629      	mov	r1, r5
   44ac0:	4602      	mov	r2, r0
   44ac2:	4620      	mov	r0, r4
   44ac4:	f7e8 f904 	bl	2ccd0 <bt_conn_security_changed>
	bt_conn_unref(conn);
   44ac8:	4620      	mov	r0, r4
}
   44aca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   44ace:	f000 bb60 	b.w	45192 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   44ad2:	7883      	ldrb	r3, [r0, #2]
   44ad4:	2b01      	cmp	r3, #1
   44ad6:	d1ef      	bne.n	44ab8 <hci_encrypt_key_refresh_complete+0x14>
		bt_smp_update_keys(conn);
   44ad8:	f002 fa3c 	bl	46f54 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   44adc:	4620      	mov	r0, r4
   44ade:	f7ff fd46 	bl	4456e <update_sec_level>
   44ae2:	2800      	cmp	r0, #0
   44ae4:	d1e8      	bne.n	44ab8 <hci_encrypt_key_refresh_complete+0x14>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   44ae6:	2005      	movs	r0, #5
   44ae8:	f7e6 fdce 	bl	2b688 <bt_security_err_get>
   44aec:	2105      	movs	r1, #5
   44aee:	4602      	mov	r2, r0
   44af0:	4620      	mov	r0, r4
   44af2:	f7e8 f8ed 	bl	2ccd0 <bt_conn_security_changed>
		bt_conn_disconnect(conn, status);
   44af6:	2105      	movs	r1, #5
   44af8:	4620      	mov	r0, r4
   44afa:	f000 fb8f 	bl	4521c <bt_conn_disconnect>
   44afe:	e7e3      	b.n	44ac8 <hci_encrypt_key_refresh_complete+0x24>
}
   44b00:	bd38      	pop	{r3, r4, r5, pc}

00044b02 <hci_encrypt_change>:
{
   44b02:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   44b04:	6886      	ldr	r6, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   44b06:	f8b6 0001 	ldrh.w	r0, [r6, #1]
	uint8_t status = evt->status;
   44b0a:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   44b0c:	f7e7 ff38 	bl	2c980 <bt_conn_lookup_handle>
	if (!conn) {
   44b10:	4604      	mov	r4, r0
   44b12:	b368      	cbz	r0, 44b70 <hci_encrypt_change+0x6e>
	if (status) {
   44b14:	b165      	cbz	r5, 44b30 <hci_encrypt_change+0x2e>
		bt_conn_security_changed(conn, status,
   44b16:	4628      	mov	r0, r5
   44b18:	f7e6 fdb6 	bl	2b688 <bt_security_err_get>
   44b1c:	4629      	mov	r1, r5
   44b1e:	4602      	mov	r2, r0
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   44b20:	4620      	mov	r0, r4
   44b22:	f7e8 f8d5 	bl	2ccd0 <bt_conn_security_changed>
	bt_conn_unref(conn);
   44b26:	4620      	mov	r0, r4
}
   44b28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   44b2c:	f000 bb31 	b.w	45192 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   44b30:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   44b32:	78f3      	ldrb	r3, [r6, #3]
   44b34:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   44b36:	2a01      	cmp	r2, #1
   44b38:	d005      	beq.n	44b46 <hci_encrypt_change+0x44>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   44b3a:	2000      	movs	r0, #0
   44b3c:	f7e6 fda4 	bl	2b688 <bt_security_err_get>
   44b40:	2100      	movs	r1, #0
   44b42:	4602      	mov	r2, r0
   44b44:	e7ec      	b.n	44b20 <hci_encrypt_change+0x1e>
		if (conn->encrypt) {
   44b46:	b10b      	cbz	r3, 44b4c <hci_encrypt_change+0x4a>
			bt_smp_update_keys(conn);
   44b48:	f002 fa04 	bl	46f54 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   44b4c:	4620      	mov	r0, r4
   44b4e:	f7ff fd0e 	bl	4456e <update_sec_level>
   44b52:	2800      	cmp	r0, #0
   44b54:	d1f1      	bne.n	44b3a <hci_encrypt_change+0x38>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   44b56:	2005      	movs	r0, #5
   44b58:	f7e6 fd96 	bl	2b688 <bt_security_err_get>
   44b5c:	2105      	movs	r1, #5
   44b5e:	4602      	mov	r2, r0
   44b60:	4620      	mov	r0, r4
   44b62:	f7e8 f8b5 	bl	2ccd0 <bt_conn_security_changed>
		bt_conn_disconnect(conn, status);
   44b66:	2105      	movs	r1, #5
   44b68:	4620      	mov	r0, r4
   44b6a:	f000 fb57 	bl	4521c <bt_conn_disconnect>
   44b6e:	e7da      	b.n	44b26 <hci_encrypt_change+0x24>
}
   44b70:	bd70      	pop	{r4, r5, r6, pc}

00044b72 <bt_send>:
		return bt_hci_ecc_send(buf);
   44b72:	f7e6 b80b 	b.w	2ab8c <bt_hci_ecc_send>

00044b76 <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   44b76:	f240 30c1 	movw	r0, #961	; 0x3c1
   44b7a:	4770      	bx	lr

00044b7c <bt_addr_le_is_bonded>:
	return 0;
}
#endif

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   44b7c:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   44b7e:	f7eb f9bf 	bl	2ff00 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   44b82:	b118      	cbz	r0, 44b8c <bt_addr_le_is_bonded+0x10>
   44b84:	89c0      	ldrh	r0, [r0, #14]
   44b86:	3800      	subs	r0, #0
   44b88:	bf18      	it	ne
   44b8a:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   44b8c:	bd08      	pop	{r3, pc}

00044b8e <bt_hci_evt_create>:
#include <stdint.h>
#include <zephyr/sys/byteorder.h>
#include <zephyr/drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   44b8e:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   44b90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   44b94:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   44b96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   44b9a:	2100      	movs	r1, #0
{
   44b9c:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   44b9e:	f7e6 f9a7 	bl	2aef0 <bt_buf_get_evt>
   44ba2:	2102      	movs	r1, #2
   44ba4:	4604      	mov	r4, r0
   44ba6:	3008      	adds	r0, #8
   44ba8:	f002 fb11 	bl	471ce <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   44bac:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   44bae:	7045      	strb	r5, [r0, #1]

	return buf;
}
   44bb0:	4620      	mov	r0, r4
   44bb2:	bd70      	pop	{r4, r5, r6, pc}

00044bb4 <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   44bb4:	3103      	adds	r1, #3
{
   44bb6:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   44bb8:	b2c9      	uxtb	r1, r1
{
   44bba:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   44bbc:	200e      	movs	r0, #14
   44bbe:	f7ff ffe6 	bl	44b8e <bt_hci_evt_create>
   44bc2:	2103      	movs	r1, #3
   44bc4:	4604      	mov	r4, r0
   44bc6:	3008      	adds	r0, #8
   44bc8:	f002 fb01 	bl	471ce <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   44bcc:	2301      	movs	r3, #1
   44bce:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   44bd0:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   44bd4:	4620      	mov	r0, r4
   44bd6:	bd38      	pop	{r3, r4, r5, pc}

00044bd8 <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   44bd8:	b570      	push	{r4, r5, r6, lr}
   44bda:	4605      	mov	r5, r0
   44bdc:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   44bde:	200f      	movs	r0, #15
   44be0:	2104      	movs	r1, #4
   44be2:	f7ff ffd4 	bl	44b8e <bt_hci_evt_create>
   44be6:	2104      	movs	r1, #4
   44be8:	4604      	mov	r4, r0
   44bea:	3008      	adds	r0, #8
   44bec:	f002 faef 	bl	471ce <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   44bf0:	2201      	movs	r2, #1
	cs->status = status;
   44bf2:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   44bf4:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   44bf6:	8045      	strh	r5, [r0, #2]

	return buf;
}
   44bf8:	4620      	mov	r0, r4
   44bfa:	bd70      	pop	{r4, r5, r6, pc}

00044bfc <bt_addr_le_copy>:
   44bfc:	2207      	movs	r2, #7
   44bfe:	f7ff bb8b 	b.w	44318 <memcpy>

00044c02 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   44c02:	f3bf 8f5b 	dmb	ish
   44c06:	6800      	ldr	r0, [r0, #0]
   44c08:	f3bf 8f5b 	dmb	ish
}
   44c0c:	4770      	bx	lr

00044c0e <hci_id_add>:
{
   44c0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   44c12:	4688      	mov	r8, r1
   44c14:	4617      	mov	r7, r2
	if (id >= CONFIG_BT_ID_MAX) {
   44c16:	4605      	mov	r5, r0
   44c18:	bb08      	cbnz	r0, 44c5e <hci_id_add+0x50>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   44c1a:	2127      	movs	r1, #39	; 0x27
   44c1c:	f242 0027 	movw	r0, #8231	; 0x2027
   44c20:	f7e6 fb02 	bl	2b228 <bt_hci_cmd_create>
	if (!buf) {
   44c24:	4604      	mov	r4, r0
   44c26:	b1f0      	cbz	r0, 44c66 <hci_id_add+0x58>
   44c28:	2127      	movs	r1, #39	; 0x27
   44c2a:	3008      	adds	r0, #8
   44c2c:	f002 facf 	bl	471ce <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   44c30:	4641      	mov	r1, r8
   44c32:	4606      	mov	r6, r0
   44c34:	f7ff ffe2 	bl	44bfc <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   44c38:	4639      	mov	r1, r7
   44c3a:	2210      	movs	r2, #16
   44c3c:	1df0      	adds	r0, r6, #7
   44c3e:	f7ff fb6b 	bl	44318 <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   44c42:	4629      	mov	r1, r5
   44c44:	2210      	movs	r2, #16
   44c46:	f106 0017 	add.w	r0, r6, #23
   44c4a:	f7ff fb70 	bl	4432e <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   44c4e:	462a      	mov	r2, r5
   44c50:	4621      	mov	r1, r4
   44c52:	f242 0027 	movw	r0, #8231	; 0x2027
}
   44c56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   44c5a:	f7e6 bb41 	b.w	2b2e0 <bt_hci_cmd_send_sync>
		return -EINVAL;
   44c5e:	f06f 0015 	mvn.w	r0, #21
}
   44c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   44c66:	f06f 0068 	mvn.w	r0, #104	; 0x68
   44c6a:	e7fa      	b.n	44c62 <hci_id_add+0x54>

00044c6c <adv_unpause_enabled>:
{
   44c6c:	b410      	push	{r4}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   44c6e:	f100 0310 	add.w	r3, r0, #16
   44c72:	f3bf 8f5b 	dmb	ish
   44c76:	e853 2f00 	ldrex	r2, [r3]
   44c7a:	f422 4180 	bic.w	r1, r2, #16384	; 0x4000
   44c7e:	e843 1400 	strex	r4, r1, [r3]
   44c82:	2c00      	cmp	r4, #0
   44c84:	d1f7      	bne.n	44c76 <adv_unpause_enabled+0xa>
   44c86:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   44c8a:	0453      	lsls	r3, r2, #17
   44c8c:	d503      	bpl.n	44c96 <adv_unpause_enabled+0x2a>
}
   44c8e:	bc10      	pop	{r4}
		bt_le_adv_set_enable(adv, true);
   44c90:	2101      	movs	r1, #1
   44c92:	f000 b9b5 	b.w	45000 <bt_le_adv_set_enable>
}
   44c96:	bc10      	pop	{r4}
   44c98:	4770      	bx	lr

00044c9a <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   44c9a:	7a03      	ldrb	r3, [r0, #8]
   44c9c:	075b      	lsls	r3, r3, #29
{
   44c9e:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   44ca0:	d505      	bpl.n	44cae <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   44ca2:	4601      	mov	r1, r0
   44ca4:	322a      	adds	r2, #42	; 0x2a
   44ca6:	f811 0b01 	ldrb.w	r0, [r1], #1
   44caa:	f7ff bfb0 	b.w	44c0e <hci_id_add>
}
   44cae:	4770      	bx	lr

00044cb0 <addr_res_enable>:
{
   44cb0:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   44cb2:	2101      	movs	r1, #1
{
   44cb4:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   44cb6:	f242 002d 	movw	r0, #8237	; 0x202d
   44cba:	f7e6 fab5 	bl	2b228 <bt_hci_cmd_create>
	if (!buf) {
   44cbe:	4604      	mov	r4, r0
   44cc0:	b158      	cbz	r0, 44cda <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   44cc2:	4629      	mov	r1, r5
   44cc4:	3008      	adds	r0, #8
   44cc6:	f002 fa91 	bl	471ec <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   44cca:	4621      	mov	r1, r4
   44ccc:	2200      	movs	r2, #0
}
   44cce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   44cd2:	f242 002d 	movw	r0, #8237	; 0x202d
   44cd6:	f7e6 bb03 	b.w	2b2e0 <bt_hci_cmd_send_sync>
}
   44cda:	f06f 0068 	mvn.w	r0, #104	; 0x68
   44cde:	bd38      	pop	{r3, r4, r5, pc}

00044ce0 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   44ce0:	f100 0210 	add.w	r2, r0, #16
{
   44ce4:	b508      	push	{r3, lr}
   44ce6:	4603      	mov	r3, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   44ce8:	4610      	mov	r0, r2
   44cea:	f7ff ff8a 	bl	44c02 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   44cee:	0641      	lsls	r1, r0, #25
   44cf0:	d511      	bpl.n	44d16 <adv_pause_enabled+0x36>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   44cf2:	f3bf 8f5b 	dmb	ish
   44cf6:	e852 0f00 	ldrex	r0, [r2]
   44cfa:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
   44cfe:	e842 0100 	strex	r1, r0, [r2]
   44d02:	2900      	cmp	r1, #0
   44d04:	d1f7      	bne.n	44cf6 <adv_pause_enabled+0x16>
   44d06:	f3bf 8f5b 	dmb	ish
		bt_le_adv_set_enable(adv, false);
   44d0a:	4618      	mov	r0, r3
   44d0c:	2100      	movs	r1, #0
}
   44d0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_set_enable(adv, false);
   44d12:	f000 b975 	b.w	45000 <bt_le_adv_set_enable>
}
   44d16:	bd08      	pop	{r3, pc}

00044d18 <bt_lookup_id_addr>:
{
   44d18:	b510      	push	{r4, lr}
   44d1a:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   44d1c:	f7eb f8ac 	bl	2fe78 <bt_keys_find_irk>
		if (keys) {
   44d20:	b100      	cbz	r0, 44d24 <bt_lookup_id_addr+0xc>
			return &keys->addr;
   44d22:	1c44      	adds	r4, r0, #1
}
   44d24:	4620      	mov	r0, r4
   44d26:	bd10      	pop	{r4, pc}

00044d28 <bt_id_set_adv_private_addr>:
{
   44d28:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   44d2a:	2106      	movs	r1, #6
   44d2c:	4668      	mov	r0, sp
   44d2e:	f7ed fe4b 	bl	329c8 <bt_rand>
	if (err) {
   44d32:	b940      	cbnz	r0, 44d46 <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   44d34:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   44d38:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   44d3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   44d3e:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   44d42:	f7e6 fe41 	bl	2b9c8 <set_random_address>
}
   44d46:	b003      	add	sp, #12
   44d48:	f85d fb04 	ldr.w	pc, [sp], #4

00044d4c <bt_id_adv_random_addr_check>:
}
   44d4c:	2001      	movs	r0, #1
   44d4e:	4770      	bx	lr

00044d50 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   44d50:	7a03      	ldrb	r3, [r0, #8]
   44d52:	07d9      	lsls	r1, r3, #31
   44d54:	d504      	bpl.n	44d60 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   44d56:	f023 0301 	bic.w	r3, r3, #1
   44d5a:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   44d5c:	f7e6 beb2 	b.w	2bac4 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   44d60:	0799      	lsls	r1, r3, #30
   44d62:	d504      	bpl.n	44d6e <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   44d64:	f023 0302 	bic.w	r3, r3, #2
   44d68:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   44d6a:	f7e6 bf41 	b.w	2bbf0 <bt_id_del>
}
   44d6e:	4770      	bx	lr

00044d70 <bt_id_init>:
#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
}
   44d70:	2000      	movs	r0, #0
   44d72:	4770      	bx	lr

00044d74 <get_adv_channel_map>:
{
   44d74:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   44d76:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   44d7a:	bf0c      	ite	eq
   44d7c:	2007      	moveq	r0, #7
   44d7e:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   44d80:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   44d82:	bf48      	it	mi
   44d84:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   44d88:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   44d8a:	bf48      	it	mi
   44d8c:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   44d90:	4770      	bx	lr

00044d92 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   44d92:	f3bf 8f5b 	dmb	ish
   44d96:	6800      	ldr	r0, [r0, #0]
   44d98:	f3bf 8f5b 	dmb	ish
}
   44d9c:	4770      	bx	lr

00044d9e <atomic_and>:
{
   44d9e:	b510      	push	{r4, lr}
   44da0:	4603      	mov	r3, r0
}
   44da2:	f3bf 8f5b 	dmb	ish
   44da6:	e853 0f00 	ldrex	r0, [r3]
   44daa:	ea00 0201 	and.w	r2, r0, r1
   44dae:	e843 2400 	strex	r4, r2, [r3]
   44db2:	2c00      	cmp	r4, #0
   44db4:	d1f7      	bne.n	44da6 <atomic_and+0x8>
   44db6:	f3bf 8f5b 	dmb	ish
   44dba:	bd10      	pop	{r4, pc}

00044dbc <hci_set_ad>:
{
   44dbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   44dc0:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   44dc2:	2120      	movs	r1, #32
{
   44dc4:	9000      	str	r0, [sp, #0]
   44dc6:	4692      	mov	sl, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   44dc8:	f7e6 fa2e 	bl	2b228 <bt_hci_cmd_create>
	if (!buf) {
   44dcc:	4605      	mov	r5, r0
   44dce:	2800      	cmp	r0, #0
   44dd0:	d050      	beq.n	44e74 <hci_set_ad+0xb8>
	return net_buf_simple_add(&buf->b, len);
   44dd2:	2120      	movs	r1, #32
   44dd4:	3008      	adds	r0, #8
   44dd6:	f002 f9fa 	bl	471ce <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
   44dda:	2220      	movs	r2, #32
   44ddc:	2100      	movs	r1, #0
   44dde:	4681      	mov	r9, r0
   44de0:	f7ff faa5 	bl	4432e <memset>
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   44de4:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   44de8:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
	uint8_t set_data_len = 0;
   44dec:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   44dee:	f8d4 8000 	ldr.w	r8, [r4]
   44df2:	2300      	movs	r3, #0
   44df4:	6862      	ldr	r2, [r4, #4]
   44df6:	4293      	cmp	r3, r2
   44df8:	d30c      	bcc.n	44e14 <hci_set_ad+0x58>
	for (size_t i = 0; i < ad_len; i++) {
   44dfa:	3408      	adds	r4, #8
   44dfc:	45a2      	cmp	sl, r4
   44dfe:	d1f6      	bne.n	44dee <hci_set_ad+0x32>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   44e00:	9800      	ldr	r0, [sp, #0]
	*data_len = set_data_len;
   44e02:	f889 6000 	strb.w	r6, [r9]
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   44e06:	2200      	movs	r2, #0
   44e08:	4629      	mov	r1, r5
}
   44e0a:	b003      	add	sp, #12
   44e0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   44e10:	f7e6 ba66 	b.w	2b2e0 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   44e14:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   44e18:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   44e1c:	1cb0      	adds	r0, r6, #2
   44e1e:	1811      	adds	r1, r2, r0
   44e20:	291f      	cmp	r1, #31
   44e22:	d908      	bls.n	44e36 <hci_set_ad+0x7a>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   44e24:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   44e28:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   44e2c:	d11a      	bne.n	44e64 <hci_set_ad+0xa8>
   44e2e:	2a00      	cmp	r2, #0
   44e30:	dd18      	ble.n	44e64 <hci_set_ad+0xa8>
				type = BT_DATA_NAME_SHORTENED;
   44e32:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   44e36:	b2d7      	uxtb	r7, r2
   44e38:	1c79      	adds	r1, r7, #1
   44e3a:	f80b 1006 	strb.w	r1, [fp, r6]
   44e3e:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   44e40:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   44e42:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   44e46:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   44e4a:	f8d8 1004 	ldr.w	r1, [r8, #4]
   44e4e:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   44e50:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   44e52:	f7ff fa61 	bl	44318 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   44e56:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   44e58:	4437      	add	r7, r6
   44e5a:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
   44e5c:	3301      	adds	r3, #1
   44e5e:	f108 0808 	add.w	r8, r8, #8
   44e62:	e7c7      	b.n	44df4 <hci_set_ad+0x38>
		net_buf_unref(buf);
   44e64:	4628      	mov	r0, r5
   44e66:	f7f7 fa53 	bl	3c310 <net_buf_unref>
		return err;
   44e6a:	f06f 0015 	mvn.w	r0, #21
}
   44e6e:	b003      	add	sp, #12
   44e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOBUFS;
   44e74:	f06f 0068 	mvn.w	r0, #104	; 0x68
   44e78:	e7f9      	b.n	44e6e <hci_set_ad+0xb2>

00044e7a <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   44e7a:	2301      	movs	r3, #1
{
   44e7c:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   44e7e:	fa03 f101 	lsl.w	r1, r3, r1
{
   44e82:	4604      	mov	r4, r0
	if (val) {
   44e84:	b162      	cbz	r2, 44ea0 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   44e86:	f3bf 8f5b 	dmb	ish
   44e8a:	e854 3f00 	ldrex	r3, [r4]
   44e8e:	430b      	orrs	r3, r1
   44e90:	e844 3200 	strex	r2, r3, [r4]
   44e94:	2a00      	cmp	r2, #0
   44e96:	d1f8      	bne.n	44e8a <atomic_set_bit_to+0x10>
   44e98:	f3bf 8f5b 	dmb	ish
	}
}
   44e9c:	bc10      	pop	{r4}
   44e9e:	4770      	bx	lr
   44ea0:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   44ea2:	43c9      	mvns	r1, r1
   44ea4:	f7ff bf7b 	b.w	44d9e <atomic_and>

00044ea8 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   44ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   44eac:	b087      	sub	sp, #28
   44eae:	4605      	mov	r5, r0
   44eb0:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   44eb4:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   44eb8:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   44ebc:	460c      	mov	r4, r1
   44ebe:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   44ec0:	2100      	movs	r1, #0
   44ec2:	2210      	movs	r2, #16
   44ec4:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   44ec6:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   44ec8:	f7ff fa31 	bl	4432e <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   44ecc:	b9ee      	cbnz	r6, 44f0a <le_adv_update.constprop.0+0x62>
		d[0].len = ad_len;
   44ece:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   44ed2:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   44ed4:	a902      	add	r1, sp, #8
   44ed6:	f242 0008 	movw	r0, #8200	; 0x2008
   44eda:	f7ff ff6f 	bl	44dbc <hci_set_ad>
		if (err) {
   44ede:	4604      	mov	r4, r0
   44ee0:	b978      	cbnz	r0, 44f02 <le_adv_update.constprop.0+0x5a>
	if (scannable) {
   44ee2:	f1ba 0f00 	cmp.w	sl, #0
   44ee6:	d13e      	bne.n	44f66 <le_adv_update.constprop.0+0xbe>
   44ee8:	3510      	adds	r5, #16
   44eea:	f3bf 8f5b 	dmb	ish
   44eee:	e855 3f00 	ldrex	r3, [r5]
   44ef2:	f043 0304 	orr.w	r3, r3, #4
   44ef6:	e845 3200 	strex	r2, r3, [r5]
   44efa:	2a00      	cmp	r2, #0
   44efc:	d1f7      	bne.n	44eee <le_adv_update.constprop.0+0x46>
   44efe:	f3bf 8f5b 	dmb	ish
}
   44f02:	4620      	mov	r0, r4
   44f04:	b007      	add	sp, #28
   44f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   44f0a:	f7e6 fd3f 	bl	2b98c <bt_get_name>
   44f0e:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   44f10:	b9e4      	cbnz	r4, 44f4c <le_adv_update.constprop.0+0xa4>
   44f12:	bb37      	cbnz	r7, 44f62 <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   44f14:	4658      	mov	r0, fp
   44f16:	f7ff f9c8 	bl	442aa <strlen>
   44f1a:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   44f1c:	2e01      	cmp	r6, #1
		d[0].data = ad;
   44f1e:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   44f22:	f88d 3000 	strb.w	r3, [sp]
   44f26:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   44f2a:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   44f2e:	d1d0      	bne.n	44ed2 <le_adv_update.constprop.0+0x2a>
			d[1].data = &data;
   44f30:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   44f34:	9605      	str	r6, [sp, #20]
			d_len = 2;
   44f36:	2202      	movs	r2, #2
   44f38:	e7cc      	b.n	44ed4 <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   44f3a:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   44f3e:	3a08      	subs	r2, #8
   44f40:	2a01      	cmp	r2, #1
   44f42:	d925      	bls.n	44f90 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   44f44:	3301      	adds	r3, #1
   44f46:	4598      	cmp	r8, r3
   44f48:	d1f7      	bne.n	44f3a <le_adv_update.constprop.0+0x92>
   44f4a:	e7e2      	b.n	44f12 <le_adv_update.constprop.0+0x6a>
   44f4c:	2300      	movs	r3, #0
   44f4e:	e7fa      	b.n	44f46 <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   44f50:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   44f54:	3a08      	subs	r2, #8
   44f56:	2a01      	cmp	r2, #1
   44f58:	d91a      	bls.n	44f90 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   44f5a:	3301      	adds	r3, #1
   44f5c:	4599      	cmp	r9, r3
   44f5e:	d1f7      	bne.n	44f50 <le_adv_update.constprop.0+0xa8>
   44f60:	e7d8      	b.n	44f14 <le_adv_update.constprop.0+0x6c>
   44f62:	2300      	movs	r3, #0
   44f64:	e7fa      	b.n	44f5c <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   44f66:	2e02      	cmp	r6, #2
   44f68:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   44f6c:	bf08      	it	eq
   44f6e:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   44f70:	a902      	add	r1, sp, #8
			d_len = 2;
   44f72:	bf08      	it	eq
   44f74:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   44f76:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   44f7a:	bf08      	it	eq
   44f7c:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   44f80:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   44f84:	f7ff ff1a 	bl	44dbc <hci_set_ad>
		if (err) {
   44f88:	2800      	cmp	r0, #0
   44f8a:	d0ad      	beq.n	44ee8 <le_adv_update.constprop.0+0x40>
   44f8c:	4604      	mov	r4, r0
   44f8e:	e7b8      	b.n	44f02 <le_adv_update.constprop.0+0x5a>
			return -EINVAL;
   44f90:	f06f 0415 	mvn.w	r4, #21
   44f94:	e7b5      	b.n	44f02 <le_adv_update.constprop.0+0x5a>

00044f96 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   44f96:	6843      	ldr	r3, [r0, #4]
   44f98:	f013 0008 	ands.w	r0, r3, #8
   44f9c:	d00a      	beq.n	44fb4 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   44f9e:	035a      	lsls	r2, r3, #13
   44fa0:	d407      	bmi.n	44fb2 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   44fa2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   44fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   44faa:	bf14      	ite	ne
   44fac:	2002      	movne	r0, #2
   44fae:	2001      	moveq	r0, #1
   44fb0:	4770      	bx	lr
   44fb2:	2001      	movs	r0, #1
}
   44fb4:	4770      	bx	lr

00044fb6 <bt_le_adv_set_enable_legacy>:
{
   44fb6:	b570      	push	{r4, r5, r6, lr}
   44fb8:	4606      	mov	r6, r0
   44fba:	b086      	sub	sp, #24
   44fbc:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   44fbe:	f242 000a 	movw	r0, #8202	; 0x200a
   44fc2:	2101      	movs	r1, #1
   44fc4:	f7e6 f930 	bl	2b228 <bt_hci_cmd_create>
	if (!buf) {
   44fc8:	4604      	mov	r4, r0
   44fca:	b1b0      	cbz	r0, 44ffa <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   44fcc:	3008      	adds	r0, #8
	if (enable) {
   44fce:	b195      	cbz	r5, 44ff6 <bt_le_adv_set_enable_legacy+0x40>
   44fd0:	2101      	movs	r1, #1
   44fd2:	f002 f90b 	bl	471ec <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   44fd6:	f106 0210 	add.w	r2, r6, #16
   44fda:	a903      	add	r1, sp, #12
   44fdc:	4620      	mov	r0, r4
   44fde:	9500      	str	r5, [sp, #0]
   44fe0:	2306      	movs	r3, #6
   44fe2:	f7e6 f90f 	bl	2b204 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   44fe6:	2200      	movs	r2, #0
   44fe8:	4621      	mov	r1, r4
   44fea:	f242 000a 	movw	r0, #8202	; 0x200a
   44fee:	f7e6 f977 	bl	2b2e0 <bt_hci_cmd_send_sync>
}
   44ff2:	b006      	add	sp, #24
   44ff4:	bd70      	pop	{r4, r5, r6, pc}
   44ff6:	4629      	mov	r1, r5
   44ff8:	e7eb      	b.n	44fd2 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   44ffa:	f06f 0068 	mvn.w	r0, #104	; 0x68
   44ffe:	e7f8      	b.n	44ff2 <bt_le_adv_set_enable_legacy+0x3c>

00045000 <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   45000:	f7ff bfd9 	b.w	44fb6 <bt_le_adv_set_enable_legacy>

00045004 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   45004:	3018      	adds	r0, #24
   45006:	f003 b954 	b.w	482b2 <k_work_cancel_delayable>

0004500a <adv_timeout>:
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   4500a:	f7e7 b985 	b.w	2c318 <bt_le_adv_stop>

0004500e <sys_slist_find_and_remove>:
	return list->head;
   4500e:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   45010:	2200      	movs	r2, #0
   45012:	b90b      	cbnz	r3, 45018 <sys_slist_find_and_remove+0xa>
   45014:	4618      	mov	r0, r3
   45016:	4770      	bx	lr
   45018:	428b      	cmp	r3, r1
   4501a:	d110      	bne.n	4503e <sys_slist_find_and_remove+0x30>
	return node->next;
   4501c:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   4501e:	b942      	cbnz	r2, 45032 <sys_slist_find_and_remove+0x24>
   45020:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   45022:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   45024:	4291      	cmp	r1, r2
   45026:	d100      	bne.n	4502a <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   45028:	6043      	str	r3, [r0, #4]
	parent->next = child;
   4502a:	2300      	movs	r3, #0
   4502c:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4502e:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   45030:	4770      	bx	lr
	parent->next = child;
   45032:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   45034:	6843      	ldr	r3, [r0, #4]
   45036:	4299      	cmp	r1, r3
	list->tail = node;
   45038:	bf08      	it	eq
   4503a:	6042      	streq	r2, [r0, #4]
}
   4503c:	e7f5      	b.n	4502a <sys_slist_find_and_remove+0x1c>
	return node->next;
   4503e:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   45040:	681b      	ldr	r3, [r3, #0]
   45042:	e7e6      	b.n	45012 <sys_slist_find_and_remove+0x4>

00045044 <atomic_and>:
{
   45044:	b510      	push	{r4, lr}
   45046:	4603      	mov	r3, r0
}
   45048:	f3bf 8f5b 	dmb	ish
   4504c:	e853 0f00 	ldrex	r0, [r3]
   45050:	ea00 0201 	and.w	r2, r0, r1
   45054:	e843 2400 	strex	r4, r2, [r3]
   45058:	2c00      	cmp	r4, #0
   4505a:	d1f7      	bne.n	4504c <atomic_and+0x8>
   4505c:	f3bf 8f5b 	dmb	ish
   45060:	bd10      	pop	{r4, pc}

00045062 <tx_complete_work>:
	tx_notify(conn);
   45062:	3828      	subs	r0, #40	; 0x28
   45064:	f7e7 bb12 	b.w	2c68c <tx_notify>

00045068 <bt_conn_reset_rx_state>:
{
   45068:	b510      	push	{r4, lr}
   4506a:	4604      	mov	r4, r0
	if (!conn->rx) {
   4506c:	6900      	ldr	r0, [r0, #16]
   4506e:	b118      	cbz	r0, 45078 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   45070:	f7f7 f94e 	bl	3c310 <net_buf_unref>
	conn->rx = NULL;
   45074:	2300      	movs	r3, #0
   45076:	6123      	str	r3, [r4, #16]
}
   45078:	bd10      	pop	{r4, pc}

0004507a <conn_cleanup>:
{
   4507a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4507e:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   45080:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   45082:	f104 0638 	add.w	r6, r4, #56	; 0x38
   45086:	2300      	movs	r3, #0
   45088:	2200      	movs	r2, #0
   4508a:	4630      	mov	r0, r6
   4508c:	f002 f842 	bl	47114 <net_buf_get>
   45090:	4603      	mov	r3, r0
   45092:	b950      	cbnz	r0, 450aa <conn_cleanup+0x30>
	bt_conn_reset_rx_state(conn);
   45094:	4620      	mov	r0, r4
   45096:	f7ff ffe7 	bl	45068 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   4509a:	f104 0058 	add.w	r0, r4, #88	; 0x58
   4509e:	2200      	movs	r2, #0
}
   450a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   450a4:	2300      	movs	r3, #0
   450a6:	f7fb bf99 	b.w	40fdc <k_work_reschedule>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   450aa:	695d      	ldr	r5, [r3, #20]
		tx_data(buf)->tx = NULL;
   450ac:	615f      	str	r7, [r3, #20]
		net_buf_unref(buf);
   450ae:	f7f7 f92f 	bl	3c310 <net_buf_unref>
		if (tx) {
   450b2:	2d00      	cmp	r5, #0
   450b4:	d0e7      	beq.n	45086 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   450b6:	4629      	mov	r1, r5
   450b8:	4620      	mov	r0, r4
   450ba:	f7e7 fb17 	bl	2c6ec <conn_tx_destroy>
   450be:	e7e0      	b.n	45082 <conn_cleanup+0x8>

000450c0 <bt_conn_recv>:
{
   450c0:	b570      	push	{r4, r5, r6, lr}
   450c2:	4616      	mov	r6, r2
   450c4:	4604      	mov	r4, r0
   450c6:	460d      	mov	r5, r1
	tx_notify(conn);
   450c8:	f7e7 fae0 	bl	2c68c <tx_notify>
	switch (flags) {
   450cc:	2e01      	cmp	r6, #1
   450ce:	d017      	beq.n	45100 <bt_conn_recv+0x40>
   450d0:	2e02      	cmp	r6, #2
   450d2:	d117      	bne.n	45104 <bt_conn_recv+0x44>
		if (conn->rx) {
   450d4:	6923      	ldr	r3, [r4, #16]
   450d6:	b113      	cbz	r3, 450de <bt_conn_recv+0x1e>
			bt_conn_reset_rx_state(conn);
   450d8:	4620      	mov	r0, r4
   450da:	f7ff ffc5 	bl	45068 <bt_conn_reset_rx_state>
		conn->rx = buf;
   450de:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   450e0:	6921      	ldr	r1, [r4, #16]
   450e2:	898a      	ldrh	r2, [r1, #12]
   450e4:	2a01      	cmp	r2, #1
   450e6:	d937      	bls.n	45158 <bt_conn_recv+0x98>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   450e8:	688b      	ldr	r3, [r1, #8]
   450ea:	881b      	ldrh	r3, [r3, #0]
   450ec:	3304      	adds	r3, #4
   450ee:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   450f0:	429a      	cmp	r2, r3
   450f2:	d331      	bcc.n	45158 <bt_conn_recv+0x98>
	if (conn->rx->len > acl_total_len) {
   450f4:	d928      	bls.n	45148 <bt_conn_recv+0x88>
		bt_conn_reset_rx_state(conn);
   450f6:	4620      	mov	r0, r4
}
   450f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   450fc:	f7ff bfb4 	b.w	45068 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   45100:	6920      	ldr	r0, [r4, #16]
   45102:	b918      	cbnz	r0, 4510c <bt_conn_recv+0x4c>
		bt_conn_reset_rx_state(conn);
   45104:	4620      	mov	r0, r4
   45106:	f7ff ffaf 	bl	45068 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   4510a:	e001      	b.n	45110 <bt_conn_recv+0x50>
		if (!buf->len) {
   4510c:	89ae      	ldrh	r6, [r5, #12]
   4510e:	b926      	cbnz	r6, 4511a <bt_conn_recv+0x5a>
			net_buf_unref(buf);
   45110:	4628      	mov	r0, r5
}
   45112:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   45116:	f7f7 b8fb 	b.w	3c310 <net_buf_unref>
	return net_buf_simple_tailroom(&buf->b);
   4511a:	3008      	adds	r0, #8
   4511c:	f002 f892 	bl	47244 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   45120:	4286      	cmp	r6, r0
   45122:	d907      	bls.n	45134 <bt_conn_recv+0x74>
			bt_l2cap_recv(conn, conn->rx, false);
   45124:	6921      	ldr	r1, [r4, #16]
   45126:	2200      	movs	r2, #0
   45128:	4620      	mov	r0, r4
   4512a:	f000 f9d4 	bl	454d6 <bt_l2cap_recv>
			conn->rx = NULL;
   4512e:	2300      	movs	r3, #0
   45130:	6123      	str	r3, [r4, #16]
   45132:	e7ed      	b.n	45110 <bt_conn_recv+0x50>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   45134:	6920      	ldr	r0, [r4, #16]
   45136:	89aa      	ldrh	r2, [r5, #12]
   45138:	68a9      	ldr	r1, [r5, #8]
   4513a:	3008      	adds	r0, #8
   4513c:	f002 f84d 	bl	471da <net_buf_simple_add_mem>
		net_buf_unref(buf);
   45140:	4628      	mov	r0, r5
   45142:	f7f7 f8e5 	bl	3c310 <net_buf_unref>
		break;
   45146:	e7cb      	b.n	450e0 <bt_conn_recv+0x20>
	conn->rx = NULL;
   45148:	2300      	movs	r3, #0
   4514a:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   4514c:	4620      	mov	r0, r4
   4514e:	2201      	movs	r2, #1
}
   45150:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   45154:	f000 b9bf 	b.w	454d6 <bt_l2cap_recv>
}
   45158:	bd70      	pop	{r4, r5, r6, pc}

0004515a <bt_conn_ref>:
{
   4515a:	b510      	push	{r4, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   4515c:	f3bf 8f5b 	dmb	ish
   45160:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   45164:	f3bf 8f5b 	dmb	ish
		old = atomic_get(&conn->ref);
   45168:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
		if (!old) {
   4516c:	b17b      	cbz	r3, 4518e <bt_conn_ref+0x34>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   4516e:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   45172:	1c59      	adds	r1, r3, #1
   45174:	e852 4f00 	ldrex	r4, [r2]
   45178:	429c      	cmp	r4, r3
   4517a:	d104      	bne.n	45186 <bt_conn_ref+0x2c>
   4517c:	e842 1c00 	strex	ip, r1, [r2]
   45180:	f1bc 0f00 	cmp.w	ip, #0
   45184:	d1f6      	bne.n	45174 <bt_conn_ref+0x1a>
   45186:	f3bf 8f5b 	dmb	ish
   4518a:	d1e7      	bne.n	4515c <bt_conn_ref+0x2>
}
   4518c:	bd10      	pop	{r4, pc}
			return NULL;
   4518e:	4618      	mov	r0, r3
   45190:	e7fc      	b.n	4518c <bt_conn_ref+0x32>

00045192 <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   45192:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   45196:	f3bf 8f5b 	dmb	ish
   4519a:	e853 1f00 	ldrex	r1, [r3]
   4519e:	3901      	subs	r1, #1
   451a0:	e843 1200 	strex	r2, r1, [r3]
   451a4:	2a00      	cmp	r2, #0
   451a6:	d1f8      	bne.n	4519a <bt_conn_unref+0x8>
   451a8:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   451ac:	7883      	ldrb	r3, [r0, #2]
   451ae:	2b01      	cmp	r3, #1
   451b0:	d108      	bne.n	451c4 <bt_conn_unref+0x32>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   451b2:	f3bf 8f5b 	dmb	ish
   451b6:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   451ba:	f3bf 8f5b 	dmb	ish
   451be:	b90b      	cbnz	r3, 451c4 <bt_conn_unref+0x32>
		bt_le_adv_resume();
   451c0:	f7e7 b8ec 	b.w	2c39c <bt_le_adv_resume>
}
   451c4:	4770      	bx	lr

000451c6 <conn_lookup_handle>:
{
   451c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   451ca:	4607      	mov	r7, r0
   451cc:	460e      	mov	r6, r1
   451ce:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   451d0:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   451d2:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   451d6:	42b4      	cmp	r4, r6
   451d8:	d103      	bne.n	451e2 <conn_lookup_handle+0x1c>
	return NULL;
   451da:	2300      	movs	r3, #0
}
   451dc:	4618      	mov	r0, r3
   451de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   451e2:	fb09 7004 	mla	r0, r9, r4, r7
   451e6:	f7ff ffb8 	bl	4515a <bt_conn_ref>
   451ea:	4603      	mov	r3, r0
		if (!conn) {
   451ec:	b158      	cbz	r0, 45206 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   451ee:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   451f0:	2d01      	cmp	r5, #1
   451f2:	d002      	beq.n	451fa <conn_lookup_handle+0x34>
   451f4:	3d07      	subs	r5, #7
   451f6:	2d01      	cmp	r5, #1
   451f8:	d803      	bhi.n	45202 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   451fa:	881a      	ldrh	r2, [r3, #0]
   451fc:	4542      	cmp	r2, r8
   451fe:	d0ed      	beq.n	451dc <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   45200:	4618      	mov	r0, r3
   45202:	f7ff ffc6 	bl	45192 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   45206:	3401      	adds	r4, #1
   45208:	e7e5      	b.n	451d6 <conn_lookup_handle+0x10>

0004520a <bt_conn_connected>:
{
   4520a:	b510      	push	{r4, lr}
   4520c:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   4520e:	f7e7 ff3d 	bl	2d08c <bt_l2cap_connected>
	notify_connected(conn);
   45212:	4620      	mov	r0, r4
}
   45214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   45218:	f7e7 ba1a 	b.w	2c650 <notify_connected>

0004521c <bt_conn_disconnect>:
{
   4521c:	b510      	push	{r4, lr}
	switch (conn->state) {
   4521e:	7b43      	ldrb	r3, [r0, #13]
   45220:	3b02      	subs	r3, #2
{
   45222:	4604      	mov	r4, r0
	switch (conn->state) {
   45224:	2b06      	cmp	r3, #6
   45226:	d816      	bhi.n	45256 <bt_conn_disconnect+0x3a>
   45228:	e8df f003 	tbb	[pc, r3]
   4522c:	15151504 	.word	0x15151504
   45230:	0b09      	.short	0x0b09
   45232:	09          	.byte	0x09
   45233:	00          	.byte	0x00
		conn->err = reason;
   45234:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   45236:	2100      	movs	r1, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   45238:	4620      	mov	r0, r4
   4523a:	f7e7 fba9 	bl	2c990 <bt_conn_set_state>
{
   4523e:	2000      	movs	r0, #0
}
   45240:	bd10      	pop	{r4, pc}
	err = bt_hci_disconnect(conn->handle, reason);
   45242:	8800      	ldrh	r0, [r0, #0]
   45244:	f7ff fba9 	bl	4499a <bt_hci_disconnect>
	if (err) {
   45248:	2800      	cmp	r0, #0
   4524a:	d1f9      	bne.n	45240 <bt_conn_disconnect+0x24>
	if (conn->state == BT_CONN_CONNECTED) {
   4524c:	7b63      	ldrb	r3, [r4, #13]
   4524e:	2b07      	cmp	r3, #7
   45250:	d1f5      	bne.n	4523e <bt_conn_disconnect+0x22>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   45252:	2108      	movs	r1, #8
   45254:	e7f0      	b.n	45238 <bt_conn_disconnect+0x1c>
		return -ENOTCONN;
   45256:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   4525a:	e7f1      	b.n	45240 <bt_conn_disconnect+0x24>

0004525c <bt_conn_set_security>:
{
   4525c:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   4525e:	7b43      	ldrb	r3, [r0, #13]
   45260:	2b07      	cmp	r3, #7
{
   45262:	4604      	mov	r4, r0
   45264:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   45266:	d126      	bne.n	452b6 <bt_conn_set_security+0x5a>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   45268:	7a43      	ldrb	r3, [r0, #9]
   4526a:	428b      	cmp	r3, r1
   4526c:	d219      	bcs.n	452a2 <bt_conn_set_security+0x46>
   4526e:	7a83      	ldrb	r3, [r0, #10]
   45270:	428b      	cmp	r3, r1
   45272:	d216      	bcs.n	452a2 <bt_conn_set_security+0x46>
	if (val) {
   45274:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   45276:	f100 0004 	add.w	r0, r0, #4
   4527a:	d514      	bpl.n	452a6 <bt_conn_set_security+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   4527c:	f3bf 8f5b 	dmb	ish
   45280:	e850 3f00 	ldrex	r3, [r0]
   45284:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   45288:	e840 3200 	strex	r2, r3, [r0]
   4528c:	2a00      	cmp	r2, #0
   4528e:	d1f7      	bne.n	45280 <bt_conn_set_security+0x24>
   45290:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   45294:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   45298:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   4529a:	4620      	mov	r0, r4
   4529c:	f7ea fb34 	bl	2f908 <bt_smp_start_security>
	if (err) {
   452a0:	b930      	cbnz	r0, 452b0 <bt_conn_set_security+0x54>
		return -ENOTCONN;
   452a2:	2000      	movs	r0, #0
}
   452a4:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   452a6:	f46f 6180 	mvn.w	r1, #1024	; 0x400
   452aa:	f7ff fecb 	bl	45044 <atomic_and>
   452ae:	e7f1      	b.n	45294 <bt_conn_set_security+0x38>
		conn->required_sec_level = conn->sec_level;
   452b0:	7a63      	ldrb	r3, [r4, #9]
   452b2:	72a3      	strb	r3, [r4, #10]
   452b4:	e7f6      	b.n	452a4 <bt_conn_set_security+0x48>
		return -ENOTCONN;
   452b6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   452ba:	e7f3      	b.n	452a4 <bt_conn_set_security+0x48>

000452bc <bt_conn_get_security>:
}
   452bc:	7a40      	ldrb	r0, [r0, #9]
   452be:	4770      	bx	lr

000452c0 <bt_conn_is_peer_addr_le>:
{
   452c0:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   452c2:	7a03      	ldrb	r3, [r0, #8]
   452c4:	428b      	cmp	r3, r1
{
   452c6:	4604      	mov	r4, r0
   452c8:	4615      	mov	r5, r2
	if (id != conn->id) {
   452ca:	d115      	bne.n	452f8 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   452cc:	f100 0188 	add.w	r1, r0, #136	; 0x88
   452d0:	2207      	movs	r2, #7
   452d2:	4628      	mov	r0, r5
   452d4:	f7ff f810 	bl	442f8 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   452d8:	b180      	cbz	r0, 452fc <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   452da:	78e3      	ldrb	r3, [r4, #3]
   452dc:	2207      	movs	r2, #7
   452de:	b943      	cbnz	r3, 452f2 <bt_conn_is_peer_addr_le+0x32>
   452e0:	f104 0196 	add.w	r1, r4, #150	; 0x96
   452e4:	4628      	mov	r0, r5
   452e6:	f7ff f807 	bl	442f8 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   452ea:	fab0 f080 	clz	r0, r0
   452ee:	0940      	lsrs	r0, r0, #5
}
   452f0:	bd38      	pop	{r3, r4, r5, pc}
   452f2:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   452f6:	e7f5      	b.n	452e4 <bt_conn_is_peer_addr_le+0x24>
		return false;
   452f8:	2000      	movs	r0, #0
   452fa:	e7f9      	b.n	452f0 <bt_conn_is_peer_addr_le+0x30>
		return true;
   452fc:	2001      	movs	r0, #1
   452fe:	e7f7      	b.n	452f0 <bt_conn_is_peer_addr_le+0x30>

00045300 <bt_conn_exists_le>:
{
   45300:	b508      	push	{r3, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   45302:	f7e7 fd2f 	bl	2cd64 <bt_conn_lookup_addr_le>
	if (conn) {
   45306:	b110      	cbz	r0, 4530e <bt_conn_exists_le+0xe>
		bt_conn_unref(conn);
   45308:	f7ff ff43 	bl	45192 <bt_conn_unref>
		return true;
   4530c:	2001      	movs	r0, #1
}
   4530e:	bd08      	pop	{r3, pc}

00045310 <bt_conn_get_dst>:
}
   45310:	3088      	adds	r0, #136	; 0x88
   45312:	4770      	bx	lr

00045314 <bt_conn_le_conn_update>:
{
   45314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   45316:	4607      	mov	r7, r0
   45318:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   4531a:	f242 0013 	movw	r0, #8211	; 0x2013
   4531e:	210e      	movs	r1, #14
   45320:	f7e5 ff82 	bl	2b228 <bt_hci_cmd_create>
	if (!buf) {
   45324:	4606      	mov	r6, r0
   45326:	b1d0      	cbz	r0, 4535e <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   45328:	210e      	movs	r1, #14
   4532a:	3008      	adds	r0, #8
   4532c:	f001 ff4f 	bl	471ce <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   45330:	220e      	movs	r2, #14
   45332:	4604      	mov	r4, r0
   45334:	2100      	movs	r1, #0
   45336:	f7fe fffa 	bl	4432e <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   4533a:	883b      	ldrh	r3, [r7, #0]
   4533c:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   4533e:	882b      	ldrh	r3, [r5, #0]
   45340:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   45342:	886b      	ldrh	r3, [r5, #2]
   45344:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   45346:	88ab      	ldrh	r3, [r5, #4]
   45348:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   4534a:	88eb      	ldrh	r3, [r5, #6]
   4534c:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   4534e:	4631      	mov	r1, r6
   45350:	2200      	movs	r2, #0
}
   45352:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   45356:	f242 0013 	movw	r0, #8211	; 0x2013
   4535a:	f7e5 bfc1 	b.w	2b2e0 <bt_hci_cmd_send_sync>
}
   4535e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   45362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00045364 <l2cap_connected>:
}
   45364:	4770      	bx	lr

00045366 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   45366:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   45368:	4607      	mov	r7, r0
   4536a:	460e      	mov	r6, r1
   4536c:	4615      	mov	r5, r2
	return bt_conn_create_pdu_timeout(pool,
   4536e:	2300      	movs	r3, #0
   45370:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   45374:	2104      	movs	r1, #4
   45376:	2000      	movs	r0, #0
   45378:	f7e7 fbca 	bl	2cb10 <bt_conn_create_pdu_timeout>
	if (!buf) {
   4537c:	4604      	mov	r4, r0
   4537e:	b130      	cbz	r0, 4538e <l2cap_create_le_sig_pdu.constprop.0+0x28>
   45380:	2104      	movs	r1, #4
   45382:	3008      	adds	r0, #8
   45384:	f001 ff23 	bl	471ce <net_buf_simple_add>
	hdr->code = code;
   45388:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
   4538a:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   4538c:	8045      	strh	r5, [r0, #2]
}
   4538e:	4620      	mov	r0, r4
   45390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00045392 <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   45392:	4770      	bx	lr

00045394 <bt_l2cap_chan_del>:
{
   45394:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   45396:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   4539a:	4604      	mov	r4, r0
	if (!chan->conn) {
   4539c:	b123      	cbz	r3, 453a8 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   4539e:	686b      	ldr	r3, [r5, #4]
   453a0:	b103      	cbz	r3, 453a4 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   453a2:	4798      	blx	r3
	chan->conn = NULL;
   453a4:	2300      	movs	r3, #0
   453a6:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   453a8:	68e3      	ldr	r3, [r4, #12]
   453aa:	b10b      	cbz	r3, 453b0 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   453ac:	4620      	mov	r0, r4
   453ae:	4798      	blx	r3
	if (ops->released) {
   453b0:	6a2b      	ldr	r3, [r5, #32]
   453b2:	b11b      	cbz	r3, 453bc <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   453b4:	4620      	mov	r0, r4
}
   453b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   453ba:	4718      	bx	r3
}
   453bc:	bd70      	pop	{r4, r5, r6, pc}

000453be <bt_l2cap_disconnected>:
{
   453be:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   453c0:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   453c2:	b130      	cbz	r0, 453d2 <bt_l2cap_disconnected+0x14>
	return node->next;
   453c4:	f850 4908 	ldr.w	r4, [r0], #-8
   453c8:	b104      	cbz	r4, 453cc <bt_l2cap_disconnected+0xe>
   453ca:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   453cc:	f7ff ffe2 	bl	45394 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   453d0:	b904      	cbnz	r4, 453d4 <bt_l2cap_disconnected+0x16>
}
   453d2:	bd38      	pop	{r3, r4, r5, pc}
   453d4:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   453d6:	b12d      	cbz	r5, 453e4 <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   453d8:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   453da:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   453dc:	f7ff ffda 	bl	45394 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   453e0:	462c      	mov	r4, r5
   453e2:	e7f7      	b.n	453d4 <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   453e4:	4620      	mov	r0, r4
}
   453e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   453ea:	f7ff bfd3 	b.w	45394 <bt_l2cap_chan_del>

000453ee <bt_l2cap_security_changed>:
{
   453ee:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   453f0:	6d03      	ldr	r3, [r0, #80]	; 0x50
   453f2:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   453f4:	b1bb      	cbz	r3, 45426 <bt_l2cap_security_changed+0x38>
   453f6:	4618      	mov	r0, r3
	return node->next;
   453f8:	f850 4908 	ldr.w	r4, [r0], #-8
   453fc:	b104      	cbz	r4, 45400 <bt_l2cap_security_changed+0x12>
   453fe:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   45400:	f853 3c04 	ldr.w	r3, [r3, #-4]
   45404:	689b      	ldr	r3, [r3, #8]
   45406:	b10b      	cbz	r3, 4540c <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   45408:	4629      	mov	r1, r5
   4540a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   4540c:	b15c      	cbz	r4, 45426 <bt_l2cap_security_changed+0x38>
   4540e:	4620      	mov	r0, r4
   45410:	68a4      	ldr	r4, [r4, #8]
   45412:	6843      	ldr	r3, [r0, #4]
   45414:	b124      	cbz	r4, 45420 <bt_l2cap_security_changed+0x32>
		if (chan->ops->encrypt_change) {
   45416:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   45418:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   4541a:	2b00      	cmp	r3, #0
   4541c:	d1f4      	bne.n	45408 <bt_l2cap_security_changed+0x1a>
   4541e:	e7f6      	b.n	4540e <bt_l2cap_security_changed+0x20>
   45420:	689b      	ldr	r3, [r3, #8]
   45422:	2b00      	cmp	r3, #0
   45424:	d1f0      	bne.n	45408 <bt_l2cap_security_changed+0x1a>
}
   45426:	bd38      	pop	{r3, r4, r5, pc}

00045428 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   45428:	3104      	adds	r1, #4
   4542a:	f7e7 bb71 	b.w	2cb10 <bt_conn_create_pdu_timeout>

0004542e <bt_l2cap_send_cb>:
{
   4542e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   45432:	4614      	mov	r4, r2
   45434:	4605      	mov	r5, r0
   45436:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   45438:	f102 0008 	add.w	r0, r2, #8
   4543c:	2104      	movs	r1, #4
   4543e:	461e      	mov	r6, r3
   45440:	f8dd 8018 	ldr.w	r8, [sp, #24]
   45444:	f001 feda 	bl	471fc <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   45448:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   4544a:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   4544c:	3a04      	subs	r2, #4
   4544e:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   45450:	4643      	mov	r3, r8
   45452:	4632      	mov	r2, r6
   45454:	4621      	mov	r1, r4
   45456:	4628      	mov	r0, r5
}
   45458:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   4545c:	f7e7 ba1a 	b.w	2c894 <bt_conn_send_cb>

00045460 <l2cap_recv>:
{
   45460:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   45462:	898b      	ldrh	r3, [r1, #12]
   45464:	2b03      	cmp	r3, #3
{
   45466:	4605      	mov	r5, r0
   45468:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   4546a:	d927      	bls.n	454bc <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   4546c:	2104      	movs	r1, #4
   4546e:	f104 0008 	add.w	r0, r4, #8
   45472:	f001 fed3 	bl	4721c <net_buf_simple_pull_mem>
	if (buf->len != len) {
   45476:	89a3      	ldrh	r3, [r4, #12]
   45478:	8842      	ldrh	r2, [r0, #2]
   4547a:	429a      	cmp	r2, r3
   4547c:	d11e      	bne.n	454bc <l2cap_recv+0x5c>
	if (!hdr->ident) {
   4547e:	7841      	ldrb	r1, [r0, #1]
   45480:	b1e1      	cbz	r1, 454bc <l2cap_recv+0x5c>
	switch (hdr->code) {
   45482:	7803      	ldrb	r3, [r0, #0]
   45484:	2b01      	cmp	r3, #1
   45486:	d019      	beq.n	454bc <l2cap_recv+0x5c>
   45488:	2b13      	cmp	r3, #19
   4548a:	d017      	beq.n	454bc <l2cap_recv+0x5c>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   4548c:	2202      	movs	r2, #2
   4548e:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   45490:	682d      	ldr	r5, [r5, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   45492:	f7ff ff68 	bl	45366 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   45496:	4604      	mov	r4, r0
   45498:	b180      	cbz	r0, 454bc <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   4549a:	2102      	movs	r1, #2
   4549c:	3008      	adds	r0, #8
   4549e:	f001 fe96 	bl	471ce <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   454a2:	2300      	movs	r3, #0
   454a4:	7003      	strb	r3, [r0, #0]
   454a6:	7043      	strb	r3, [r0, #1]
   454a8:	4622      	mov	r2, r4
   454aa:	9300      	str	r3, [sp, #0]
   454ac:	2105      	movs	r1, #5
   454ae:	4628      	mov	r0, r5
   454b0:	f7ff ffbd 	bl	4542e <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   454b4:	b110      	cbz	r0, 454bc <l2cap_recv+0x5c>
		net_buf_unref(buf);
   454b6:	4620      	mov	r0, r4
   454b8:	f7f6 ff2a 	bl	3c310 <net_buf_unref>
}
   454bc:	2000      	movs	r0, #0
   454be:	b003      	add	sp, #12
   454c0:	bd30      	pop	{r4, r5, pc}

000454c2 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   454c2:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   454c4:	b130      	cbz	r0, 454d4 <bt_l2cap_le_lookup_rx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   454c6:	8983      	ldrh	r3, [r0, #12]
   454c8:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   454ca:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   454ce:	d001      	beq.n	454d4 <bt_l2cap_le_lookup_rx_cid+0x12>
	return node->next;
   454d0:	6880      	ldr	r0, [r0, #8]
   454d2:	e7f7      	b.n	454c4 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   454d4:	4770      	bx	lr

000454d6 <bt_l2cap_recv>:
{
   454d6:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   454d8:	898b      	ldrh	r3, [r1, #12]
   454da:	2b03      	cmp	r3, #3
{
   454dc:	4605      	mov	r5, r0
   454de:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   454e0:	d804      	bhi.n	454ec <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
   454e2:	4620      	mov	r0, r4
}
   454e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   454e8:	f7f6 bf12 	b.w	3c310 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   454ec:	2104      	movs	r1, #4
   454ee:	f104 0008 	add.w	r0, r4, #8
   454f2:	f001 fe93 	bl	4721c <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   454f6:	8841      	ldrh	r1, [r0, #2]
   454f8:	4628      	mov	r0, r5
   454fa:	f7ff ffe2 	bl	454c2 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   454fe:	2800      	cmp	r0, #0
   45500:	d0ef      	beq.n	454e2 <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
   45502:	6843      	ldr	r3, [r0, #4]
   45504:	4621      	mov	r1, r4
   45506:	695b      	ldr	r3, [r3, #20]
   45508:	4798      	blx	r3
   4550a:	e7ea      	b.n	454e2 <bt_l2cap_recv+0xc>

0004550c <bt_l2cap_init>:
#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
	for (size_t i = 0; i < ARRAY_SIZE(l2cap_tx_meta_data_storage); i++) {
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   4550c:	4770      	bx	lr

0004550e <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   4550e:	4603      	mov	r3, r0
	return list->head;
   45510:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   45512:	b128      	cbz	r0, 45520 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   45514:	6859      	ldr	r1, [r3, #4]
	return node->next;
   45516:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   45518:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   4551a:	4288      	cmp	r0, r1
	list->tail = node;
   4551c:	bf08      	it	eq
   4551e:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   45520:	4770      	bx	lr

00045522 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   45522:	4603      	mov	r3, r0
	size_t bytes = 0;
   45524:	2000      	movs	r0, #0

	while (buf) {
   45526:	b903      	cbnz	r3, 4552a <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   45528:	4770      	bx	lr
		bytes += buf->len;
   4552a:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   4552c:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   4552e:	4410      	add	r0, r2
		buf = buf->frags;
   45530:	e7f9      	b.n	45526 <net_buf_frags_len+0x4>

00045532 <attr_read_type_cb>:
{
   45532:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   45534:	68d4      	ldr	r4, [r2, #12]
   45536:	7823      	ldrb	r3, [r4, #0]
   45538:	3102      	adds	r1, #2
   4553a:	b913      	cbnz	r3, 45542 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   4553c:	7021      	strb	r1, [r4, #0]
	return true;
   4553e:	2001      	movs	r0, #1
}
   45540:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   45542:	428b      	cmp	r3, r1
   45544:	d0fb      	beq.n	4553e <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   45546:	8983      	ldrh	r3, [r0, #12]
   45548:	3b02      	subs	r3, #2
   4554a:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   4554c:	2000      	movs	r0, #0
   4554e:	6110      	str	r0, [r2, #16]
		return false;
   45550:	e7f6      	b.n	45540 <attr_read_type_cb+0xe>

00045552 <att_prepare_write_req>:
}
   45552:	2006      	movs	r0, #6
   45554:	4770      	bx	lr

00045556 <att_get>:
{
   45556:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   45558:	7b43      	ldrb	r3, [r0, #13]
   4555a:	2b07      	cmp	r3, #7
   4555c:	d001      	beq.n	45562 <att_get+0xc>
		return NULL;
   4555e:	2000      	movs	r0, #0
}
   45560:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   45562:	2104      	movs	r1, #4
   45564:	f7ff ffad 	bl	454c2 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   45568:	2800      	cmp	r0, #0
   4556a:	d0f8      	beq.n	4555e <att_get+0x8>
	return att_chan->att;
   4556c:	f850 0c04 	ldr.w	r0, [r0, #-4]
   45570:	e7f6      	b.n	45560 <att_get+0xa>

00045572 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   45572:	f3bf 8f5b 	dmb	ish
   45576:	6800      	ldr	r0, [r0, #0]
   45578:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   4557c:	4108      	asrs	r0, r1
}
   4557e:	f000 0001 	and.w	r0, r0, #1
   45582:	4770      	bx	lr

00045584 <chan_req_send>:
{
   45584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   45586:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   45588:	6888      	ldr	r0, [r1, #8]
   4558a:	f7ff ffca 	bl	45522 <net_buf_frags_len>
   4558e:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
   45590:	4283      	cmp	r3, r0
{
   45592:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   45594:	d30d      	bcc.n	455b2 <chan_req_send+0x2e>
	chan->req = req;
   45596:	f8c5 1094 	str.w	r1, [r5, #148]	; 0x94
	buf = req->buf;
   4559a:	688f      	ldr	r7, [r1, #8]
	req->buf = NULL;
   4559c:	2600      	movs	r6, #0
   4559e:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   455a0:	4628      	mov	r0, r5
   455a2:	4639      	mov	r1, r7
   455a4:	f7e7 fe46 	bl	2d234 <chan_send>
	if (err) {
   455a8:	b110      	cbz	r0, 455b0 <chan_req_send+0x2c>
		req->buf = buf;
   455aa:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   455ac:	f8c5 6094 	str.w	r6, [r5, #148]	; 0x94
}
   455b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   455b2:	f06f 0079 	mvn.w	r0, #121	; 0x79
   455b6:	e7fb      	b.n	455b0 <chan_req_send+0x2c>

000455b8 <write_cb>:
{
   455b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   455ba:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   455bc:	4601      	mov	r1, r0
{
   455be:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   455c0:	f44f 7295 	mov.w	r2, #298	; 0x12a
   455c4:	6820      	ldr	r0, [r4, #0]
   455c6:	f000 ffb5 	bl	46534 <bt_gatt_check_perm>
   455ca:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   455cc:	bb00      	cbnz	r0, 45610 <write_cb+0x58>
	if (!data->req) {
   455ce:	7a23      	ldrb	r3, [r4, #8]
   455d0:	b1b3      	cbz	r3, 45600 <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   455d2:	f1a3 0218 	sub.w	r2, r3, #24
   455d6:	4253      	negs	r3, r2
   455d8:	4153      	adcs	r3, r2
   455da:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   455dc:	9301      	str	r3, [sp, #4]
   455de:	8a63      	ldrh	r3, [r4, #18]
   455e0:	9300      	str	r3, [sp, #0]
   455e2:	68ae      	ldr	r6, [r5, #8]
   455e4:	8a23      	ldrh	r3, [r4, #16]
   455e6:	68e2      	ldr	r2, [r4, #12]
   455e8:	6820      	ldr	r0, [r4, #0]
   455ea:	4629      	mov	r1, r5
   455ec:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   455ee:	2800      	cmp	r0, #0
   455f0:	db08      	blt.n	45604 <write_cb+0x4c>
   455f2:	8a23      	ldrh	r3, [r4, #16]
   455f4:	4298      	cmp	r0, r3
   455f6:	d10e      	bne.n	45616 <write_cb+0x5e>
	data->err = 0U;
   455f8:	2300      	movs	r3, #0
   455fa:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   455fc:	2001      	movs	r0, #1
   455fe:	e008      	b.n	45612 <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   45600:	2302      	movs	r3, #2
   45602:	e7eb      	b.n	455dc <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   45604:	f110 0fff 	cmn.w	r0, #255	; 0xff
   45608:	d305      	bcc.n	45616 <write_cb+0x5e>
		return -err;
   4560a:	4240      	negs	r0, r0
   4560c:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   4560e:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   45610:	2000      	movs	r0, #0
}
   45612:	b002      	add	sp, #8
   45614:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   45616:	200e      	movs	r0, #14
   45618:	e7f9      	b.n	4560e <write_cb+0x56>

0004561a <bt_gatt_foreach_attr>:
{
   4561a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   4561c:	e9cd 2301 	strd	r2, r3, [sp, #4]
   45620:	2300      	movs	r3, #0
   45622:	9300      	str	r3, [sp, #0]
   45624:	461a      	mov	r2, r3
   45626:	f7e8 ffa1 	bl	2e56c <bt_gatt_foreach_attr_type>
}
   4562a:	b005      	add	sp, #20
   4562c:	f85d fb04 	ldr.w	pc, [sp], #4

00045630 <bt_att_chan_send_rsp>:
{
   45630:	b538      	push	{r3, r4, r5, lr}
   45632:	4604      	mov	r4, r0
   45634:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   45636:	f7e7 fdfd 	bl	2d234 <chan_send>
	if (err) {
   4563a:	b130      	cbz	r0, 4564a <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   4563c:	4629      	mov	r1, r5
   4563e:	f104 0098 	add.w	r0, r4, #152	; 0x98
}
   45642:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   45646:	f001 bd83 	b.w	47150 <net_buf_put>
}
   4564a:	bd38      	pop	{r3, r4, r5, pc}

0004564c <find_type_cb>:
{
   4564c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   45650:	b091      	sub	sp, #68	; 0x44
	struct bt_att_chan *chan = data->chan;
   45652:	f8d2 9000 	ldr.w	r9, [r2]
{
   45656:	4607      	mov	r7, r0
   45658:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   4565a:	2500      	movs	r5, #0
   4565c:	f642 0301 	movw	r3, #10241	; 0x2801
   45660:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   45662:	f8d9 8004 	ldr.w	r8, [r9, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   45666:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   4566a:	a90b      	add	r1, sp, #44	; 0x2c
{
   4566c:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   4566e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   45672:	f7fe ff12 	bl	4449a <bt_uuid_cmp>
   45676:	2800      	cmp	r0, #0
   45678:	d079      	beq.n	4576e <find_type_cb+0x122>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   4567a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   4567e:	6838      	ldr	r0, [r7, #0]
   45680:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   45684:	a90b      	add	r1, sp, #44	; 0x2c
   45686:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   4568a:	f7fe ff06 	bl	4449a <bt_uuid_cmp>
   4568e:	b138      	cbz	r0, 456a0 <find_type_cb+0x54>
		if (data->group &&
   45690:	68a3      	ldr	r3, [r4, #8]
   45692:	b11b      	cbz	r3, 4569c <find_type_cb+0x50>
   45694:	885a      	ldrh	r2, [r3, #2]
   45696:	42b2      	cmp	r2, r6
   45698:	d200      	bcs.n	4569c <find_type_cb+0x50>
	data->group->end_handle = sys_cpu_to_le16(handle);
   4569a:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   4569c:	2001      	movs	r0, #1
   4569e:	e009      	b.n	456b4 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   456a0:	6861      	ldr	r1, [r4, #4]
   456a2:	4608      	mov	r0, r1
   456a4:	f7ff ff3d 	bl	45522 <net_buf_frags_len>
   456a8:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   456ac:	1a1b      	subs	r3, r3, r0
   456ae:	2b03      	cmp	r3, #3
   456b0:	d803      	bhi.n	456ba <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   456b2:	2000      	movs	r0, #0
}
   456b4:	b011      	add	sp, #68	; 0x44
   456b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   456ba:	4608      	mov	r0, r1
   456bc:	f001 fd59 	bl	47172 <net_buf_frag_last>
   456c0:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   456c2:	6860      	ldr	r0, [r4, #4]
   456c4:	f7ff ff2d 	bl	45522 <net_buf_frags_len>
   456c8:	f8b9 a02a 	ldrh.w	sl, [r9, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   456cc:	f105 0b08 	add.w	fp, r5, #8
   456d0:	ebaa 0a00 	sub.w	sl, sl, r0
   456d4:	4658      	mov	r0, fp
   456d6:	f001 fdb5 	bl	47244 <net_buf_simple_tailroom>
   456da:	4582      	cmp	sl, r0
   456dc:	d23f      	bcs.n	4575e <find_type_cb+0x112>
   456de:	6860      	ldr	r0, [r4, #4]
   456e0:	f7ff ff1f 	bl	45522 <net_buf_frags_len>
   456e4:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   456e8:	1a18      	subs	r0, r3, r0
	if (!len) {
   456ea:	b970      	cbnz	r0, 4570a <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   456ec:	6863      	ldr	r3, [r4, #4]
   456ee:	7998      	ldrb	r0, [r3, #6]
   456f0:	f7f6 fd4c 	bl	3c18c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   456f4:	2200      	movs	r2, #0
   456f6:	2300      	movs	r3, #0
   456f8:	f001 fd07 	bl	4710a <net_buf_alloc_fixed>
		if (!frag) {
   456fc:	4605      	mov	r5, r0
   456fe:	2800      	cmp	r0, #0
   45700:	d0d7      	beq.n	456b2 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   45702:	4601      	mov	r1, r0
   45704:	6860      	ldr	r0, [r4, #4]
   45706:	f001 fd45 	bl	47194 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   4570a:	2300      	movs	r3, #0
   4570c:	9300      	str	r3, [sp, #0]
   4570e:	f8d7 9004 	ldr.w	r9, [r7, #4]
   45712:	4639      	mov	r1, r7
   45714:	2310      	movs	r3, #16
   45716:	aa02      	add	r2, sp, #8
   45718:	4640      	mov	r0, r8
   4571a:	47c8      	blx	r9
	if (read < 0) {
   4571c:	1e07      	subs	r7, r0, #0
   4571e:	db26      	blt.n	4576e <find_type_cb+0x122>
	if (read != data->value_len) {
   45720:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   45722:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   45724:	42ba      	cmp	r2, r7
   45726:	d01e      	beq.n	45766 <find_type_cb+0x11a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   45728:	4601      	mov	r1, r0
   4572a:	a80b      	add	r0, sp, #44	; 0x2c
   4572c:	f7fe fee3 	bl	444f6 <bt_uuid_create>
   45730:	b1e8      	cbz	r0, 4576e <find_type_cb+0x122>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   45732:	b2fa      	uxtb	r2, r7
   45734:	a902      	add	r1, sp, #8
   45736:	a806      	add	r0, sp, #24
   45738:	f7fe fedd 	bl	444f6 <bt_uuid_create>
   4573c:	b1b8      	cbz	r0, 4576e <find_type_cb+0x122>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   4573e:	a906      	add	r1, sp, #24
   45740:	a80b      	add	r0, sp, #44	; 0x2c
   45742:	f7fe feaa 	bl	4449a <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   45746:	b990      	cbnz	r0, 4576e <find_type_cb+0x122>
	data->err = 0x00;
   45748:	2300      	movs	r3, #0
   4574a:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   4574c:	2104      	movs	r1, #4
   4574e:	f105 0008 	add.w	r0, r5, #8
   45752:	f001 fd3c 	bl	471ce <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   45756:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   45758:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   4575a:	68a3      	ldr	r3, [r4, #8]
   4575c:	e79d      	b.n	4569a <find_type_cb+0x4e>
	return net_buf_simple_tailroom(&buf->b);
   4575e:	4658      	mov	r0, fp
   45760:	f001 fd70 	bl	47244 <net_buf_simple_tailroom>
   45764:	e7c1      	b.n	456ea <find_type_cb+0x9e>
	} else if (memcmp(data->value, uuid, read)) {
   45766:	a902      	add	r1, sp, #8
   45768:	f7fe fdc6 	bl	442f8 <memcmp>
   4576c:	e7eb      	b.n	45746 <find_type_cb+0xfa>
	data->group = NULL;
   4576e:	2300      	movs	r3, #0
   45770:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   45772:	e793      	b.n	4569c <find_type_cb+0x50>

00045774 <find_info_cb>:
{
   45774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   45776:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   45778:	6817      	ldr	r7, [r2, #0]
{
   4577a:	4605      	mov	r5, r0
   4577c:	460e      	mov	r6, r1
   4577e:	4614      	mov	r4, r2
	if (!data->rsp) {
   45780:	b963      	cbnz	r3, 4579c <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   45782:	6850      	ldr	r0, [r2, #4]
   45784:	2101      	movs	r1, #1
   45786:	3008      	adds	r0, #8
   45788:	f001 fd21 	bl	471ce <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   4578c:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   4578e:	682b      	ldr	r3, [r5, #0]
   45790:	781b      	ldrb	r3, [r3, #0]
   45792:	2b00      	cmp	r3, #0
   45794:	bf14      	ite	ne
   45796:	2302      	movne	r3, #2
   45798:	2301      	moveq	r3, #1
   4579a:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   4579c:	68a3      	ldr	r3, [r4, #8]
   4579e:	781b      	ldrb	r3, [r3, #0]
   457a0:	2b01      	cmp	r3, #1
   457a2:	d003      	beq.n	457ac <find_info_cb+0x38>
   457a4:	2b02      	cmp	r3, #2
   457a6:	d019      	beq.n	457dc <find_info_cb+0x68>
   457a8:	2000      	movs	r0, #0
   457aa:	e016      	b.n	457da <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   457ac:	682b      	ldr	r3, [r5, #0]
   457ae:	781b      	ldrb	r3, [r3, #0]
   457b0:	2b00      	cmp	r3, #0
   457b2:	d1f9      	bne.n	457a8 <find_info_cb+0x34>
   457b4:	6860      	ldr	r0, [r4, #4]
   457b6:	2104      	movs	r1, #4
   457b8:	3008      	adds	r0, #8
   457ba:	f001 fd08 	bl	471ce <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   457be:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   457c0:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   457c2:	682a      	ldr	r2, [r5, #0]
   457c4:	68e3      	ldr	r3, [r4, #12]
   457c6:	8852      	ldrh	r2, [r2, #2]
   457c8:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   457ca:	6863      	ldr	r3, [r4, #4]
   457cc:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   457ce:	899b      	ldrh	r3, [r3, #12]
   457d0:	1ac0      	subs	r0, r0, r3
   457d2:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   457d4:	bf94      	ite	ls
   457d6:	2000      	movls	r0, #0
   457d8:	2001      	movhi	r0, #1
}
   457da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   457dc:	682b      	ldr	r3, [r5, #0]
   457de:	781b      	ldrb	r3, [r3, #0]
   457e0:	2b02      	cmp	r3, #2
   457e2:	d1e1      	bne.n	457a8 <find_info_cb+0x34>
   457e4:	6860      	ldr	r0, [r4, #4]
   457e6:	2112      	movs	r1, #18
   457e8:	3008      	adds	r0, #8
   457ea:	f001 fcf0 	bl	471ce <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   457ee:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   457f0:	8006      	strh	r6, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   457f2:	6829      	ldr	r1, [r5, #0]
   457f4:	68e0      	ldr	r0, [r4, #12]
   457f6:	2210      	movs	r2, #16
   457f8:	3101      	adds	r1, #1
   457fa:	3002      	adds	r0, #2
   457fc:	f7fe fd8c 	bl	44318 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   45800:	6863      	ldr	r3, [r4, #4]
   45802:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   45804:	899b      	ldrh	r3, [r3, #12]
   45806:	1ac0      	subs	r0, r0, r3
   45808:	2812      	cmp	r0, #18
   4580a:	e7e3      	b.n	457d4 <find_info_cb+0x60>

0004580c <att_chan_mtu_updated>:
{
   4580c:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   4580e:	6805      	ldr	r5, [r0, #0]
	return list->head;
   45810:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   45812:	b352      	cbz	r2, 4586a <att_chan_mtu_updated+0x5e>
	return node->next;
   45814:	6813      	ldr	r3, [r2, #0]
   45816:	b103      	cbz	r3, 4581a <att_chan_mtu_updated+0xe>
   45818:	3be0      	subs	r3, #224	; 0xe0
   4581a:	f1a2 04e0 	sub.w	r4, r2, #224	; 0xe0
   4581e:	2200      	movs	r2, #0
   45820:	4611      	mov	r1, r2
   45822:	e000      	b.n	45826 <att_chan_mtu_updated+0x1a>
   45824:	3be0      	subs	r3, #224	; 0xe0
		if (chan == updated_chan) {
   45826:	4284      	cmp	r4, r0
   45828:	d007      	beq.n	4583a <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   4582a:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   4582c:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   4582e:	42b1      	cmp	r1, r6
   45830:	bf38      	it	cc
   45832:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   45834:	42a2      	cmp	r2, r4
   45836:	bf38      	it	cc
   45838:	4622      	movcc	r2, r4
   4583a:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4583c:	b12b      	cbz	r3, 4584a <att_chan_mtu_updated+0x3e>
   4583e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   45842:	2b00      	cmp	r3, #0
   45844:	d1ee      	bne.n	45824 <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   45846:	4284      	cmp	r4, r0
   45848:	d1ef      	bne.n	4582a <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   4584a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   4584c:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   4584e:	428b      	cmp	r3, r1
   45850:	d801      	bhi.n	45856 <att_chan_mtu_updated+0x4a>
   45852:	4290      	cmp	r0, r2
   45854:	d90b      	bls.n	4586e <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   45856:	4282      	cmp	r2, r0
   45858:	bf38      	it	cc
   4585a:	4602      	movcc	r2, r0
   4585c:	4299      	cmp	r1, r3
   4585e:	6828      	ldr	r0, [r5, #0]
   45860:	bf38      	it	cc
   45862:	4619      	movcc	r1, r3
}
   45864:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   45866:	f7e9 babf 	b.w	2ede8 <bt_gatt_att_max_mtu_changed>
   4586a:	4611      	mov	r1, r2
   4586c:	e7ed      	b.n	4584a <att_chan_mtu_updated+0x3e>
}
   4586e:	bc70      	pop	{r4, r5, r6}
   45870:	4770      	bx	lr

00045872 <attr_read_group_cb>:
	if (!data->rsp->len) {
   45872:	68d0      	ldr	r0, [r2, #12]
   45874:	7803      	ldrb	r3, [r0, #0]
   45876:	3104      	adds	r1, #4
   45878:	b913      	cbnz	r3, 45880 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   4587a:	7001      	strb	r1, [r0, #0]
	return true;
   4587c:	2001      	movs	r0, #1
   4587e:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   45880:	428b      	cmp	r3, r1
   45882:	d0fb      	beq.n	4587c <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   45884:	6891      	ldr	r1, [r2, #8]
   45886:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   45888:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   4588a:	3b04      	subs	r3, #4
   4588c:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   4588e:	6110      	str	r0, [r2, #16]
}
   45890:	4770      	bx	lr

00045892 <process_queue>:
{
   45892:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   45894:	2200      	movs	r2, #0
{
   45896:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   45898:	2300      	movs	r3, #0
   4589a:	4608      	mov	r0, r1
{
   4589c:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   4589e:	f001 fc39 	bl	47114 <net_buf_get>
	if (buf) {
   458a2:	4605      	mov	r5, r0
   458a4:	b158      	cbz	r0, 458be <process_queue+0x2c>
	return chan_send(chan, buf);
   458a6:	4601      	mov	r1, r0
   458a8:	4620      	mov	r0, r4
   458aa:	f7e7 fcc3 	bl	2d234 <chan_send>
		if (err) {
   458ae:	4604      	mov	r4, r0
   458b0:	b118      	cbz	r0, 458ba <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   458b2:	4629      	mov	r1, r5
   458b4:	4630      	mov	r0, r6
   458b6:	f002 fbdf 	bl	48078 <k_queue_prepend>
}
   458ba:	4620      	mov	r0, r4
   458bc:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   458be:	f06f 0401 	mvn.w	r4, #1
   458c2:	e7fa      	b.n	458ba <process_queue+0x28>

000458c4 <att_chan_read>:
{
   458c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   458c8:	4680      	mov	r8, r0
   458ca:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   458cc:	4610      	mov	r0, r2
{
   458ce:	4699      	mov	r9, r3
   458d0:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   458d2:	f7ff fe26 	bl	45522 <net_buf_frags_len>
   458d6:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   458da:	4283      	cmp	r3, r0
{
   458dc:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   458de:	d97a      	bls.n	459d6 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   458e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   458e4:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   458e6:	4630      	mov	r0, r6
   458e8:	f001 fc43 	bl	47172 <net_buf_frag_last>
	size_t len, total = 0;
   458ec:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   458f0:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   458f2:	4630      	mov	r0, r6
   458f4:	f7ff fe15 	bl	45522 <net_buf_frags_len>
   458f8:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   458fc:	f105 0708 	add.w	r7, r5, #8
   45900:	1a24      	subs	r4, r4, r0
   45902:	4638      	mov	r0, r7
   45904:	f001 fc9e 	bl	47244 <net_buf_simple_tailroom>
   45908:	4284      	cmp	r4, r0
   4590a:	d211      	bcs.n	45930 <att_chan_read+0x6c>
   4590c:	4630      	mov	r0, r6
   4590e:	f7ff fe08 	bl	45522 <net_buf_frags_len>
   45912:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   45916:	1a24      	subs	r4, r4, r0
		if (!len) {
   45918:	bb34      	cbnz	r4, 45968 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   4591a:	79b0      	ldrb	r0, [r6, #6]
   4591c:	f7f6 fc36 	bl	3c18c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   45920:	2200      	movs	r2, #0
   45922:	2300      	movs	r3, #0
   45924:	f001 fbf1 	bl	4710a <net_buf_alloc_fixed>
			if (!frag) {
   45928:	4605      	mov	r5, r0
   4592a:	b930      	cbnz	r0, 4593a <att_chan_read+0x76>
	return total;
   4592c:	4657      	mov	r7, sl
   4592e:	e02c      	b.n	4598a <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   45930:	4638      	mov	r0, r7
   45932:	f001 fc87 	bl	47244 <net_buf_simple_tailroom>
   45936:	4604      	mov	r4, r0
   45938:	e7ee      	b.n	45918 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   4593a:	4601      	mov	r1, r0
   4593c:	4630      	mov	r0, r6
   4593e:	f001 fc29 	bl	47194 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   45942:	4630      	mov	r0, r6
   45944:	f7ff fded 	bl	45522 <net_buf_frags_len>
   45948:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   4594c:	f105 0708 	add.w	r7, r5, #8
   45950:	1a24      	subs	r4, r4, r0
   45952:	4638      	mov	r0, r7
   45954:	f001 fc76 	bl	47244 <net_buf_simple_tailroom>
   45958:	4284      	cmp	r4, r0
   4595a:	d21a      	bcs.n	45992 <att_chan_read+0xce>
   4595c:	4630      	mov	r0, r6
   4595e:	f7ff fde0 	bl	45522 <net_buf_frags_len>
   45962:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   45966:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   45968:	68a9      	ldr	r1, [r5, #8]
   4596a:	89aa      	ldrh	r2, [r5, #12]
   4596c:	f8cd 9000 	str.w	r9, [sp]
   45970:	f8db 7004 	ldr.w	r7, [fp, #4]
   45974:	9803      	ldr	r0, [sp, #12]
   45976:	440a      	add	r2, r1
   45978:	b2a3      	uxth	r3, r4
   4597a:	4659      	mov	r1, fp
   4597c:	47b8      	blx	r7
		if (read < 0) {
   4597e:	1e07      	subs	r7, r0, #0
   45980:	da0c      	bge.n	4599c <att_chan_read+0xd8>
				return total;
   45982:	f1ba 0f00 	cmp.w	sl, #0
   45986:	bf18      	it	ne
   45988:	4657      	movne	r7, sl
}
   4598a:	4638      	mov	r0, r7
   4598c:	b005      	add	sp, #20
   4598e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   45992:	4638      	mov	r0, r7
   45994:	f001 fc56 	bl	47244 <net_buf_simple_tailroom>
   45998:	4604      	mov	r4, r0
   4599a:	e7e5      	b.n	45968 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   4599c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   4599e:	b993      	cbnz	r3, 459c6 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   459a0:	4639      	mov	r1, r7
   459a2:	f105 0008 	add.w	r0, r5, #8
   459a6:	f001 fc12 	bl	471ce <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   459aa:	4630      	mov	r0, r6
   459ac:	f7ff fdb9 	bl	45522 <net_buf_frags_len>
   459b0:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   459b4:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   459b6:	4283      	cmp	r3, r0
		total += read;
   459b8:	44ba      	add	sl, r7
		offset += read;
   459ba:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   459be:	d9b5      	bls.n	4592c <att_chan_read+0x68>
   459c0:	42a7      	cmp	r7, r4
   459c2:	d096      	beq.n	458f2 <att_chan_read+0x2e>
   459c4:	e7b2      	b.n	4592c <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   459c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   459c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   459ca:	4639      	mov	r1, r7
   459cc:	4628      	mov	r0, r5
   459ce:	4798      	blx	r3
   459d0:	2800      	cmp	r0, #0
   459d2:	d1e5      	bne.n	459a0 <att_chan_read+0xdc>
   459d4:	e7aa      	b.n	4592c <att_chan_read+0x68>
		return 0;
   459d6:	2700      	movs	r7, #0
   459d8:	e7d7      	b.n	4598a <att_chan_read+0xc6>

000459da <sys_slist_find_and_remove.isra.0>:
	return list->head;
   459da:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   459dc:	2200      	movs	r2, #0
   459de:	b903      	cbnz	r3, 459e2 <sys_slist_find_and_remove.isra.0+0x8>
   459e0:	4770      	bx	lr
   459e2:	428b      	cmp	r3, r1
   459e4:	d10f      	bne.n	45a06 <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   459e6:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   459e8:	b93a      	cbnz	r2, 459fa <sys_slist_find_and_remove.isra.0+0x20>
   459ea:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   459ec:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   459ee:	4291      	cmp	r1, r2
   459f0:	d100      	bne.n	459f4 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   459f2:	6043      	str	r3, [r0, #4]
	parent->next = child;
   459f4:	2300      	movs	r3, #0
   459f6:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   459f8:	4770      	bx	lr
	parent->next = child;
   459fa:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   459fc:	6843      	ldr	r3, [r0, #4]
   459fe:	4299      	cmp	r1, r3
	list->tail = node;
   45a00:	bf08      	it	eq
   45a02:	6042      	streq	r2, [r0, #4]
}
   45a04:	e7f6      	b.n	459f4 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   45a06:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   45a08:	681b      	ldr	r3, [r3, #0]
   45a0a:	e7e8      	b.n	459de <sys_slist_find_and_remove.isra.0+0x4>

00045a0c <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   45a0c:	2006      	movs	r0, #6
   45a0e:	4770      	bx	lr

00045a10 <atomic_test_and_set_bit>:
{
   45a10:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   45a12:	2301      	movs	r3, #1
   45a14:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   45a18:	f3bf 8f5b 	dmb	ish
   45a1c:	e850 3f00 	ldrex	r3, [r0]
   45a20:	ea43 0201 	orr.w	r2, r3, r1
   45a24:	e840 2400 	strex	r4, r2, [r0]
   45a28:	2c00      	cmp	r4, #0
   45a2a:	d1f7      	bne.n	45a1c <atomic_test_and_set_bit+0xc>
   45a2c:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   45a30:	4219      	tst	r1, r3
}
   45a32:	bf14      	ite	ne
   45a34:	2001      	movne	r0, #1
   45a36:	2000      	moveq	r0, #0
   45a38:	bd10      	pop	{r4, pc}

00045a3a <read_cb>:
{
   45a3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_att_chan *chan = data->chan;
   45a3c:	6816      	ldr	r6, [r2, #0]
{
   45a3e:	4605      	mov	r5, r0
	data->err = 0x00;
   45a40:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   45a42:	6870      	ldr	r0, [r6, #4]
	data->err = 0x00;
   45a44:	7313      	strb	r3, [r2, #12]
{
   45a46:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   45a48:	4629      	mov	r1, r5
   45a4a:	2295      	movs	r2, #149	; 0x95
   45a4c:	f000 fd72 	bl	46534 <bt_gatt_check_perm>
   45a50:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   45a52:	b980      	cbnz	r0, 45a76 <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   45a54:	e9cd 0000 	strd	r0, r0, [sp]
   45a58:	4629      	mov	r1, r5
   45a5a:	88a3      	ldrh	r3, [r4, #4]
   45a5c:	68a2      	ldr	r2, [r4, #8]
   45a5e:	4630      	mov	r0, r6
   45a60:	f7ff ff30 	bl	458c4 <att_chan_read>
	if (ret < 0) {
   45a64:	2800      	cmp	r0, #0
   45a66:	da09      	bge.n	45a7c <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   45a68:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   45a6c:	bf26      	itte	cs
   45a6e:	4240      	negcs	r0, r0
   45a70:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   45a72:	200e      	movcc	r0, #14
		data->err = err_to_att(ret);
   45a74:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   45a76:	2000      	movs	r0, #0
}
   45a78:	b002      	add	sp, #8
   45a7a:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   45a7c:	2001      	movs	r0, #1
   45a7e:	e7fb      	b.n	45a78 <read_cb+0x3e>

00045a80 <read_vl_cb>:
{
   45a80:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   45a84:	f8d2 8000 	ldr.w	r8, [r2]
{
   45a88:	4606      	mov	r6, r0
	data->err = 0x00;
   45a8a:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   45a8c:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   45a90:	7313      	strb	r3, [r2, #12]
{
   45a92:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   45a94:	4631      	mov	r1, r6
   45a96:	2295      	movs	r2, #149	; 0x95
   45a98:	f000 fd4c 	bl	46534 <bt_gatt_check_perm>
   45a9c:	4605      	mov	r5, r0
   45a9e:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   45aa0:	b9e0      	cbnz	r0, 45adc <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   45aa2:	68a0      	ldr	r0, [r4, #8]
   45aa4:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   45aa8:	8982      	ldrh	r2, [r0, #12]
   45aaa:	1a9b      	subs	r3, r3, r2
   45aac:	2b01      	cmp	r3, #1
   45aae:	dd15      	ble.n	45adc <read_vl_cb+0x5c>
   45ab0:	2102      	movs	r1, #2
   45ab2:	3008      	adds	r0, #8
   45ab4:	f001 fb8b 	bl	471ce <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   45ab8:	e9cd 5500 	strd	r5, r5, [sp]
   45abc:	4607      	mov	r7, r0
   45abe:	88a3      	ldrh	r3, [r4, #4]
   45ac0:	68a2      	ldr	r2, [r4, #8]
   45ac2:	4631      	mov	r1, r6
   45ac4:	4640      	mov	r0, r8
   45ac6:	f7ff fefd 	bl	458c4 <att_chan_read>
	if (read < 0) {
   45aca:	1e03      	subs	r3, r0, #0
   45acc:	da0a      	bge.n	45ae4 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   45ace:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   45ad2:	bf26      	itte	cs
   45ad4:	425b      	negcs	r3, r3
   45ad6:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   45ad8:	230e      	movcc	r3, #14
		data->err = err_to_att(read);
   45ada:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   45adc:	2000      	movs	r0, #0
}
   45ade:	b002      	add	sp, #8
   45ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rsp->len = read;
   45ae4:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   45ae6:	2001      	movs	r0, #1
   45ae8:	e7f9      	b.n	45ade <read_vl_cb+0x5e>

00045aea <bt_att_sent>:
{
   45aea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   45aec:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   45aee:	1f07      	subs	r7, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   45af0:	f100 038c 	add.w	r3, r0, #140	; 0x8c
	struct bt_att *att = chan->att;
   45af4:	f850 4c04 	ldr.w	r4, [r0, #-4]
   45af8:	f3bf 8f5b 	dmb	ish
   45afc:	e853 1f00 	ldrex	r1, [r3]
   45b00:	f021 0110 	bic.w	r1, r1, #16
   45b04:	e843 1200 	strex	r2, r1, [r3]
   45b08:	2a00      	cmp	r2, #0
   45b0a:	d1f7      	bne.n	45afc <bt_att_sent+0x12>
   45b0c:	f3bf 8f5b 	dmb	ish
	if (!att) {
   45b10:	b30c      	cbz	r4, 45b56 <bt_att_sent+0x6c>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   45b12:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   45b16:	b98b      	cbnz	r3, 45b3c <bt_att_sent+0x52>
   45b18:	6863      	ldr	r3, [r4, #4]
   45b1a:	b17b      	cbz	r3, 45b3c <bt_att_sent+0x52>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   45b1c:	1d20      	adds	r0, r4, #4
   45b1e:	f7ff fcf6 	bl	4550e <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   45b22:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   45b24:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   45b26:	4638      	mov	r0, r7
   45b28:	f7ff fd2c 	bl	45584 <chan_req_send>
   45b2c:	2800      	cmp	r0, #0
   45b2e:	da12      	bge.n	45b56 <bt_att_sent+0x6c>
	return list->head;
   45b30:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   45b32:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   45b34:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   45b36:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   45b38:	b903      	cbnz	r3, 45b3c <bt_att_sent+0x52>
	list->tail = node;
   45b3a:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   45b3c:	f105 0194 	add.w	r1, r5, #148	; 0x94
   45b40:	4638      	mov	r0, r7
   45b42:	f7ff fea6 	bl	45892 <process_queue>
	if (!err) {
   45b46:	b130      	cbz	r0, 45b56 <bt_att_sent+0x6c>
	(void)process_queue(chan, &att->tx_queue);
   45b48:	f104 010c 	add.w	r1, r4, #12
   45b4c:	4638      	mov	r0, r7
}
   45b4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   45b52:	f7ff be9e 	b.w	45892 <process_queue>
}
   45b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00045b58 <att_req_send_process>:
{
   45b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   45b5c:	6a44      	ldr	r4, [r0, #36]	; 0x24
   45b5e:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   45b60:	2c00      	cmp	r4, #0
   45b62:	d03b      	beq.n	45bdc <att_req_send_process+0x84>
	return node->next;
   45b64:	f854 69e0 	ldr.w	r6, [r4], #-224
   45b68:	b106      	cbz	r6, 45b6c <att_req_send_process+0x14>
   45b6a:	3ee0      	subs	r6, #224	; 0xe0
{
   45b6c:	2300      	movs	r3, #0
   45b6e:	461d      	mov	r5, r3
		req = get_first_req_matching_chan(&att->reqs, chan);
   45b70:	f108 0704 	add.w	r7, r8, #4
   45b74:	e013      	b.n	45b9e <att_req_send_process+0x46>
		if (!req && prev &&
   45b76:	b1c3      	cbz	r3, 45baa <att_req_send_process+0x52>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   45b78:	2103      	movs	r1, #3
   45b7a:	f104 0090 	add.w	r0, r4, #144	; 0x90
   45b7e:	f7ff fcf8 	bl	45572 <atomic_test_bit>
   45b82:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   45b84:	f103 0090 	add.w	r0, r3, #144	; 0x90
   45b88:	f7ff fcf3 	bl	45572 <atomic_test_bit>
		if (!req && prev &&
   45b8c:	4282      	cmp	r2, r0
   45b8e:	d10c      	bne.n	45baa <att_req_send_process+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   45b90:	b326      	cbz	r6, 45bdc <att_req_send_process+0x84>
   45b92:	f8d6 20e0 	ldr.w	r2, [r6, #224]	; 0xe0
   45b96:	b102      	cbz	r2, 45b9a <att_req_send_process+0x42>
   45b98:	3ae0      	subs	r2, #224	; 0xe0
{
   45b9a:	4634      	mov	r4, r6
   45b9c:	4616      	mov	r6, r2
		if (chan->req) {
   45b9e:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   45ba2:	2a00      	cmp	r2, #0
   45ba4:	d1f4      	bne.n	45b90 <att_req_send_process+0x38>
		if (!req && prev &&
   45ba6:	2d00      	cmp	r5, #0
   45ba8:	d0e5      	beq.n	45b76 <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   45baa:	4638      	mov	r0, r7
   45bac:	f7ff fcaf 	bl	4550e <sys_slist_get>
	if (node) {
   45bb0:	4605      	mov	r5, r0
   45bb2:	b908      	cbnz	r0, 45bb8 <att_req_send_process+0x60>
   45bb4:	4623      	mov	r3, r4
   45bb6:	e7eb      	b.n	45b90 <att_req_send_process+0x38>
	return chan_req_send(chan, req);
   45bb8:	4601      	mov	r1, r0
   45bba:	4620      	mov	r0, r4
   45bbc:	f7ff fce2 	bl	45584 <chan_req_send>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   45bc0:	2800      	cmp	r0, #0
   45bc2:	da0b      	bge.n	45bdc <att_req_send_process+0x84>
	return list->head;
   45bc4:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   45bc8:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   45bca:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   45bce:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   45bd2:	2b00      	cmp	r3, #0
   45bd4:	d1ee      	bne.n	45bb4 <att_req_send_process+0x5c>
	list->tail = node;
   45bd6:	f8c8 5008 	str.w	r5, [r8, #8]
}
   45bda:	e7eb      	b.n	45bb4 <att_req_send_process+0x5c>
}
   45bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00045be0 <bt_att_status>:
{
   45be0:	b538      	push	{r3, r4, r5, lr}
   45be2:	4605      	mov	r5, r0
   45be4:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   45be6:	2100      	movs	r1, #0
   45be8:	f7ff fcc3 	bl	45572 <atomic_test_bit>
   45bec:	b1c0      	cbz	r0, 45c20 <bt_att_status+0x40>
	if (!chan->att) {
   45bee:	f855 0c04 	ldr.w	r0, [r5, #-4]
   45bf2:	b1a8      	cbz	r0, 45c20 <bt_att_status+0x40>
	if (chan->req) {
   45bf4:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   45bf8:	b993      	cbnz	r3, 45c20 <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   45bfa:	3004      	adds	r0, #4
   45bfc:	f7ff fc87 	bl	4550e <sys_slist_get>
	if (!node) {
   45c00:	4604      	mov	r4, r0
   45c02:	b168      	cbz	r0, 45c20 <bt_att_status+0x40>
	return chan_req_send(chan, req);
   45c04:	4601      	mov	r1, r0
   45c06:	1f28      	subs	r0, r5, #4
   45c08:	f7ff fcbc 	bl	45584 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   45c0c:	2800      	cmp	r0, #0
   45c0e:	da07      	bge.n	45c20 <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   45c10:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   45c14:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   45c16:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   45c18:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   45c1a:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   45c1c:	b902      	cbnz	r2, 45c20 <bt_att_status+0x40>
	list->tail = node;
   45c1e:	609c      	str	r4, [r3, #8]
}
   45c20:	bd38      	pop	{r3, r4, r5, pc}

00045c22 <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   45c22:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   45c24:	6883      	ldr	r3, [r0, #8]
   45c26:	699b      	ldr	r3, [r3, #24]
   45c28:	b10b      	cbz	r3, 45c2e <att_sent+0xc>
		chan->ops->sent(chan);
   45c2a:	3004      	adds	r0, #4
   45c2c:	4718      	bx	r3
}
   45c2e:	4770      	bx	lr

00045c30 <att_unknown>:
{
   45c30:	b510      	push	{r4, lr}
   45c32:	460c      	mov	r4, r1
	if (!err) {
   45c34:	b90a      	cbnz	r2, 45c3a <att_unknown+0xa>
		att_sent(conn, user_data);
   45c36:	f7ff fff4 	bl	45c22 <att_sent>
	tx_meta_data_free(user_data);
   45c3a:	4620      	mov	r0, r4
}
   45c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   45c40:	f7e7 baea 	b.w	2d218 <tx_meta_data_free>

00045c44 <att_tx_complete>:
{
   45c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   45c48:	4606      	mov	r6, r0
   45c4a:	460d      	mov	r5, r1
	if (!err) {
   45c4c:	4614      	mov	r4, r2
   45c4e:	b122      	cbz	r2, 45c5a <att_tx_complete+0x16>
}
   45c50:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   45c54:	4608      	mov	r0, r1
   45c56:	f7e7 badf 	b.w	2d218 <tx_meta_data_free>
		att_sent(conn, user_data);
   45c5a:	f7ff ffe2 	bl	45c22 <att_sent>
	bt_gatt_complete_func_t func = data->func;
   45c5e:	68af      	ldr	r7, [r5, #8]
	uint16_t attr_count = data->attr_count;
   45c60:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   45c64:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   45c68:	4628      	mov	r0, r5
   45c6a:	f7e7 fad5 	bl	2d218 <tx_meta_data_free>
	if (!err && func) {
   45c6e:	b92f      	cbnz	r7, 45c7c <att_tx_complete+0x38>
}
   45c70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   45c74:	4649      	mov	r1, r9
   45c76:	4630      	mov	r0, r6
   45c78:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   45c7a:	3401      	adds	r4, #1
   45c7c:	b2a3      	uxth	r3, r4
   45c7e:	4543      	cmp	r3, r8
   45c80:	d3f8      	bcc.n	45c74 <att_tx_complete+0x30>
   45c82:	e7f5      	b.n	45c70 <att_tx_complete+0x2c>

00045c84 <att_req_sent>:
{
   45c84:	b510      	push	{r4, lr}
   45c86:	460c      	mov	r4, r1
	if (!err) {
   45c88:	b90a      	cbnz	r2, 45c8e <att_req_sent+0xa>
		att_sent(conn, user_data);
   45c8a:	f7ff ffca 	bl	45c22 <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   45c8e:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   45c90:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   45c94:	b12b      	cbz	r3, 45ca2 <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   45c96:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   45c9a:	2300      	movs	r3, #0
   45c9c:	30b0      	adds	r0, #176	; 0xb0
   45c9e:	f7fb f99d 	bl	40fdc <k_work_reschedule>
	tx_meta_data_free(user_data);
   45ca2:	4620      	mov	r0, r4
}
   45ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   45ca8:	f7e7 bab6 	b.w	2d218 <tx_meta_data_free>

00045cac <att_cfm_sent>:
{
   45cac:	b510      	push	{r4, lr}
   45cae:	460c      	mov	r4, r1
	if (!err) {
   45cb0:	b90a      	cbnz	r2, 45cb6 <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   45cb2:	f7ff ffb6 	bl	45c22 <att_sent>
   45cb6:	6823      	ldr	r3, [r4, #0]
   45cb8:	f3bf 8f5b 	dmb	ish
   45cbc:	3390      	adds	r3, #144	; 0x90
   45cbe:	e853 1f00 	ldrex	r1, [r3]
   45cc2:	f021 0102 	bic.w	r1, r1, #2
   45cc6:	e843 1200 	strex	r2, r1, [r3]
   45cca:	2a00      	cmp	r2, #0
   45ccc:	d1f7      	bne.n	45cbe <att_cfm_sent+0x12>
   45cce:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   45cd2:	4620      	mov	r0, r4
}
   45cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   45cd8:	f7e7 ba9e 	b.w	2d218 <tx_meta_data_free>

00045cdc <att_rsp_sent>:
{
   45cdc:	b510      	push	{r4, lr}
   45cde:	460c      	mov	r4, r1
	if (!err) {
   45ce0:	b90a      	cbnz	r2, 45ce6 <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   45ce2:	f7ff ff9e 	bl	45c22 <att_sent>
   45ce6:	6823      	ldr	r3, [r4, #0]
   45ce8:	f3bf 8f5b 	dmb	ish
   45cec:	3390      	adds	r3, #144	; 0x90
   45cee:	e853 1f00 	ldrex	r1, [r3]
   45cf2:	f021 0101 	bic.w	r1, r1, #1
   45cf6:	e843 1200 	strex	r2, r1, [r3]
   45cfa:	2a00      	cmp	r2, #0
   45cfc:	d1f7      	bne.n	45cee <att_rsp_sent+0x12>
   45cfe:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   45d02:	4620      	mov	r0, r4
}
   45d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   45d08:	f7e7 ba86 	b.w	2d218 <tx_meta_data_free>

00045d0c <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   45d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   45d10:	4688      	mov	r8, r1
   45d12:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   45d14:	2101      	movs	r1, #1
   45d16:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   45d18:	4605      	mov	r5, r0
   45d1a:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   45d1c:	f7e7 fc00 	bl	2d520 <bt_att_chan_create_pdu>
	if (!buf) {
   45d20:	4604      	mov	r4, r0
   45d22:	b170      	cbz	r0, 45d42 <send_err_rsp.part.0+0x36>
   45d24:	2104      	movs	r1, #4
   45d26:	3008      	adds	r0, #8
   45d28:	f001 fa51 	bl	471ce <net_buf_simple_add>
	rsp->request = req;
   45d2c:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   45d30:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   45d34:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   45d36:	4621      	mov	r1, r4
   45d38:	4628      	mov	r0, r5
}
   45d3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   45d3e:	f7ff bc77 	b.w	45630 <bt_att_chan_send_rsp>
}
   45d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00045d46 <att_write_req>:
{
   45d46:	b537      	push	{r0, r1, r2, r4, r5, lr}
   45d48:	460c      	mov	r4, r1
   45d4a:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   45d4c:	f101 0008 	add.w	r0, r1, #8
   45d50:	f001 fa6c 	bl	4722c <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   45d54:	89a2      	ldrh	r2, [r4, #12]
   45d56:	9201      	str	r2, [sp, #4]
   45d58:	68a2      	ldr	r2, [r4, #8]
   45d5a:	9200      	str	r2, [sp, #0]
   45d5c:	4603      	mov	r3, r0
   45d5e:	2213      	movs	r2, #19
   45d60:	2112      	movs	r1, #18
   45d62:	4628      	mov	r0, r5
   45d64:	f7e7 fc7c 	bl	2d660 <att_write_rsp.constprop.0>
}
   45d68:	b003      	add	sp, #12
   45d6a:	bd30      	pop	{r4, r5, pc}

00045d6c <att_write_cmd>:
{
   45d6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   45d6e:	460c      	mov	r4, r1
   45d70:	4605      	mov	r5, r0
   45d72:	f101 0008 	add.w	r0, r1, #8
   45d76:	f001 fa59 	bl	4722c <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   45d7a:	89a2      	ldrh	r2, [r4, #12]
   45d7c:	9201      	str	r2, [sp, #4]
   45d7e:	68a2      	ldr	r2, [r4, #8]
   45d80:	9200      	str	r2, [sp, #0]
   45d82:	2200      	movs	r2, #0
   45d84:	4603      	mov	r3, r0
   45d86:	4611      	mov	r1, r2
   45d88:	4628      	mov	r0, r5
   45d8a:	f7e7 fc69 	bl	2d660 <att_write_rsp.constprop.0>
}
   45d8e:	b003      	add	sp, #12
   45d90:	bd30      	pop	{r4, r5, pc}

00045d92 <bt_att_create_pdu>:
{
   45d92:	b538      	push	{r3, r4, r5, lr}
   45d94:	460d      	mov	r5, r1
   45d96:	4614      	mov	r4, r2
	att = att_get(conn);
   45d98:	f7ff fbdd 	bl	45556 <att_get>
	if (!att) {
   45d9c:	b158      	cbz	r0, 45db6 <bt_att_create_pdu+0x24>
	return list->head;
   45d9e:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   45da0:	b14b      	cbz	r3, 45db6 <bt_att_create_pdu+0x24>
   45da2:	4618      	mov	r0, r3
	return node->next;
   45da4:	f850 39e0 	ldr.w	r3, [r0], #-224
   45da8:	b103      	cbz	r3, 45dac <bt_att_create_pdu+0x1a>
   45daa:	3be0      	subs	r3, #224	; 0xe0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   45dac:	1c62      	adds	r2, r4, #1
   45dae:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   45db0:	428a      	cmp	r2, r1
   45db2:	d90c      	bls.n	45dce <bt_att_create_pdu+0x3c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   45db4:	b90b      	cbnz	r3, 45dba <bt_att_create_pdu+0x28>
}
   45db6:	2000      	movs	r0, #0
   45db8:	bd38      	pop	{r3, r4, r5, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   45dba:	4618      	mov	r0, r3
   45dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   45dc0:	2b00      	cmp	r3, #0
   45dc2:	d0f4      	beq.n	45dae <bt_att_create_pdu+0x1c>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   45dc4:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   45dc6:	428a      	cmp	r2, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   45dc8:	f1a3 03e0 	sub.w	r3, r3, #224	; 0xe0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   45dcc:	d8f5      	bhi.n	45dba <bt_att_create_pdu+0x28>
		return bt_att_chan_create_pdu(chan, op, len);
   45dce:	4622      	mov	r2, r4
   45dd0:	4629      	mov	r1, r5
}
   45dd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   45dd6:	f7e7 bba3 	b.w	2d520 <bt_att_chan_create_pdu>

00045dda <att_read_blob_req>:
{
   45dda:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   45ddc:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   45dde:	8813      	ldrh	r3, [r2, #0]
   45de0:	8852      	ldrh	r2, [r2, #2]
   45de2:	9200      	str	r2, [sp, #0]
   45de4:	210c      	movs	r1, #12
   45de6:	220d      	movs	r2, #13
   45de8:	f7e7 fdc4 	bl	2d974 <att_read_rsp>
}
   45dec:	b003      	add	sp, #12
   45dee:	f85d fb04 	ldr.w	pc, [sp], #4

00045df2 <att_read_req>:
{
   45df2:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   45df4:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   45df6:	2200      	movs	r2, #0
   45df8:	881b      	ldrh	r3, [r3, #0]
   45dfa:	9200      	str	r2, [sp, #0]
   45dfc:	210a      	movs	r1, #10
   45dfe:	220b      	movs	r2, #11
   45e00:	f7e7 fdb8 	bl	2d974 <att_read_rsp>
}
   45e04:	b003      	add	sp, #12
   45e06:	f85d fb04 	ldr.w	pc, [sp], #4

00045e0a <att_mtu_req>:
{
   45e0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   45e0c:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   45e0e:	f850 2b90 	ldr.w	r2, [r0], #144
{
   45e12:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   45e14:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   45e16:	6817      	ldr	r7, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   45e18:	f7ff fbab 	bl	45572 <atomic_test_bit>
   45e1c:	4604      	mov	r4, r0
   45e1e:	b9f0      	cbnz	r0, 45e5e <att_mtu_req+0x54>
	mtu_client = sys_le16_to_cpu(req->mtu);
   45e20:	689b      	ldr	r3, [r3, #8]
   45e22:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   45e24:	2e16      	cmp	r6, #22
   45e26:	d91c      	bls.n	45e62 <att_mtu_req+0x58>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   45e28:	4638      	mov	r0, r7
   45e2a:	2202      	movs	r2, #2
   45e2c:	f7ff ffb1 	bl	45d92 <bt_att_create_pdu>
	if (!pdu) {
   45e30:	4607      	mov	r7, r0
   45e32:	b1c0      	cbz	r0, 45e66 <att_mtu_req+0x5c>
	return net_buf_simple_add(&buf->b, len);
   45e34:	2102      	movs	r1, #2
   45e36:	3008      	adds	r0, #8
   45e38:	f001 f9c9 	bl	471ce <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   45e3c:	2341      	movs	r3, #65	; 0x41
   45e3e:	7003      	strb	r3, [r0, #0]
   45e40:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   45e42:	4639      	mov	r1, r7
   45e44:	4628      	mov	r0, r5
   45e46:	f7ff fbf3 	bl	45630 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   45e4a:	2e41      	cmp	r6, #65	; 0x41
   45e4c:	bf28      	it	cs
   45e4e:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   45e50:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   45e52:	836e      	strh	r6, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   45e54:	856e      	strh	r6, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   45e56:	f7ff fcd9 	bl	4580c <att_chan_mtu_updated>
	return 0;
   45e5a:	4620      	mov	r0, r4
}
   45e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   45e5e:	2006      	movs	r0, #6
   45e60:	e7fc      	b.n	45e5c <att_mtu_req+0x52>
		return BT_ATT_ERR_INVALID_PDU;
   45e62:	2004      	movs	r0, #4
   45e64:	e7fa      	b.n	45e5c <att_mtu_req+0x52>
		return BT_ATT_ERR_UNLIKELY;
   45e66:	200e      	movs	r0, #14
   45e68:	e7f8      	b.n	45e5c <att_mtu_req+0x52>

00045e6a <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   45e6a:	898a      	ldrh	r2, [r1, #12]
   45e6c:	6889      	ldr	r1, [r1, #8]
   45e6e:	2300      	movs	r3, #0
   45e70:	f7e7 bf2a 	b.w	2dcc8 <att_handle_rsp>

00045e74 <bt_att_encrypt_change>:
{
   45e74:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   45e76:	4606      	mov	r6, r0
	if (!att_chan->att) {
   45e78:	f850 3c04 	ldr.w	r3, [r0, #-4]
	struct bt_conn *conn = le_chan->chan.conn;
   45e7c:	f856 5904 	ldr.w	r5, [r6], #-4
{
   45e80:	4604      	mov	r4, r0
	if (!att_chan->att) {
   45e82:	2b00      	cmp	r3, #0
   45e84:	d038      	beq.n	45ef8 <bt_att_encrypt_change+0x84>
	if (hci_status) {
   45e86:	b141      	cbz	r1, 45e9a <bt_att_encrypt_change+0x26>
		if (att_chan->req && att_chan->req->retrying) {
   45e88:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
   45e8c:	2b00      	cmp	r3, #0
   45e8e:	d033      	beq.n	45ef8 <bt_att_encrypt_change+0x84>
   45e90:	7c1b      	ldrb	r3, [r3, #16]
   45e92:	07da      	lsls	r2, r3, #31
   45e94:	d530      	bpl.n	45ef8 <bt_att_encrypt_change+0x84>
		return BT_ATT_ERR_AUTHENTICATION;
   45e96:	2305      	movs	r3, #5
   45e98:	e021      	b.n	45ede <bt_att_encrypt_change+0x6a>
	bt_gatt_encrypt_change(conn);
   45e9a:	4628      	mov	r0, r5
   45e9c:	f7e8 ffb8 	bl	2ee10 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   45ea0:	7a6b      	ldrb	r3, [r5, #9]
   45ea2:	2b01      	cmp	r3, #1
   45ea4:	d028      	beq.n	45ef8 <bt_att_encrypt_change+0x84>
	if (!(att_chan->req && att_chan->req->retrying)) {
   45ea6:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
   45eaa:	b32d      	cbz	r5, 45ef8 <bt_att_encrypt_change+0x84>
   45eac:	7c2b      	ldrb	r3, [r5, #16]
   45eae:	07db      	lsls	r3, r3, #31
   45eb0:	d522      	bpl.n	45ef8 <bt_att_encrypt_change+0x84>
	if (!req->encode) {
   45eb2:	68eb      	ldr	r3, [r5, #12]
   45eb4:	2b00      	cmp	r3, #0
   45eb6:	d0ee      	beq.n	45e96 <bt_att_encrypt_change+0x22>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   45eb8:	696a      	ldr	r2, [r5, #20]
   45eba:	7c69      	ldrb	r1, [r5, #17]
   45ebc:	4630      	mov	r0, r6
   45ebe:	f7e7 fb2f 	bl	2d520 <bt_att_chan_create_pdu>
	if (!buf) {
   45ec2:	4604      	mov	r4, r0
   45ec4:	b150      	cbz	r0, 45edc <bt_att_encrypt_change+0x68>
	if (req->encode(buf, req->len, req->user_data)) {
   45ec6:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   45eca:	68eb      	ldr	r3, [r5, #12]
   45ecc:	4798      	blx	r3
   45ece:	b168      	cbz	r0, 45eec <bt_att_encrypt_change+0x78>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   45ed0:	6960      	ldr	r0, [r4, #20]
   45ed2:	f7e7 f9a1 	bl	2d218 <tx_meta_data_free>
		net_buf_unref(buf);
   45ed6:	4620      	mov	r0, r4
   45ed8:	f7f6 fa1a 	bl	3c310 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   45edc:	230e      	movs	r3, #14
		att_handle_rsp(att_chan, NULL, 0, err);
   45ede:	2200      	movs	r2, #0
   45ee0:	4630      	mov	r0, r6
   45ee2:	4611      	mov	r1, r2
}
   45ee4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   45ee8:	f7e7 beee 	b.w	2dcc8 <att_handle_rsp>
	if (chan_send(att_chan, buf)) {
   45eec:	4621      	mov	r1, r4
   45eee:	4630      	mov	r0, r6
   45ef0:	f7e7 f9a0 	bl	2d234 <chan_send>
   45ef4:	2800      	cmp	r0, #0
   45ef6:	d1eb      	bne.n	45ed0 <bt_att_encrypt_change+0x5c>
}
   45ef8:	bd70      	pop	{r4, r5, r6, pc}

00045efa <att_timeout>:
	bt_att_disconnected(&chan->chan.chan);
   45efa:	38ac      	subs	r0, #172	; 0xac
   45efc:	f7e7 bf1c 	b.w	2dd38 <bt_att_disconnected>

00045f00 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   45f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   45f02:	460d      	mov	r5, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   45f04:	f7ff fb27 	bl	45556 <att_get>
	if (!att) {
   45f08:	4604      	mov	r4, r0
   45f0a:	b940      	cbnz	r0, 45f1e <bt_att_send+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   45f0c:	6968      	ldr	r0, [r5, #20]
   45f0e:	f7e7 f983 	bl	2d218 <tx_meta_data_free>
		net_buf_unref(buf);
   45f12:	4628      	mov	r0, r5
   45f14:	f7f6 f9fc 	bl	3c310 <net_buf_unref>
		return -ENOTCONN;
   45f18:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   45f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   45f1e:	f100 060c 	add.w	r6, r0, #12
   45f22:	4629      	mov	r1, r5
   45f24:	4630      	mov	r0, r6
   45f26:	f001 f913 	bl	47150 <net_buf_put>
	return list->head;
   45f2a:	6a65      	ldr	r5, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   45f2c:	b14d      	cbz	r5, 45f42 <bt_att_send+0x42>
	return node->next;
   45f2e:	f855 49e0 	ldr.w	r4, [r5], #-224
   45f32:	b104      	cbz	r4, 45f36 <bt_att_send+0x36>
   45f34:	3ce0      	subs	r4, #224	; 0xe0
		err = process_queue(chan, &att->tx_queue);
   45f36:	4631      	mov	r1, r6
   45f38:	4628      	mov	r0, r5
   45f3a:	f7ff fcaa 	bl	45892 <process_queue>
		if (!err) {
   45f3e:	4603      	mov	r3, r0
   45f40:	b980      	cbnz	r0, 45f64 <bt_att_send+0x64>
	return 0;
   45f42:	2000      	movs	r0, #0
   45f44:	e7ea      	b.n	45f1c <bt_att_send+0x1c>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   45f46:	2103      	movs	r1, #3
   45f48:	f104 0090 	add.w	r0, r4, #144	; 0x90
   45f4c:	f7ff fb11 	bl	45572 <atomic_test_bit>
   45f50:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   45f52:	f105 0090 	add.w	r0, r5, #144	; 0x90
   45f56:	f7ff fb0c 	bl	45572 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   45f5a:	4287      	cmp	r7, r0
   45f5c:	f06f 0301 	mvn.w	r3, #1
   45f60:	d107      	bne.n	45f72 <bt_att_send+0x72>
   45f62:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   45f64:	2c00      	cmp	r4, #0
   45f66:	d0ec      	beq.n	45f42 <bt_att_send+0x42>
   45f68:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
   45f6c:	b922      	cbnz	r2, 45f78 <bt_att_send+0x78>
		if (err == -ENOENT && prev &&
   45f6e:	3302      	adds	r3, #2
   45f70:	d0e9      	beq.n	45f46 <bt_att_send+0x46>
{
   45f72:	4625      	mov	r5, r4
   45f74:	4614      	mov	r4, r2
   45f76:	e7de      	b.n	45f36 <bt_att_send+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   45f78:	3ae0      	subs	r2, #224	; 0xe0
   45f7a:	e7f8      	b.n	45f6e <bt_att_send+0x6e>

00045f7c <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   45f7c:	b510      	push	{r4, lr}
   45f7e:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   45f80:	f7ff fae9 	bl	45556 <att_get>
	if (!att) {
   45f84:	b160      	cbz	r0, 45fa0 <bt_att_req_send+0x24>
	parent->next = child;
   45f86:	2300      	movs	r3, #0
   45f88:	6023      	str	r3, [r4, #0]
	return list->tail;
   45f8a:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   45f8c:	b92b      	cbnz	r3, 45f9a <bt_att_req_send+0x1e>
	list->head = node;
   45f8e:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   45f92:	f7ff fde1 	bl	45b58 <att_req_send_process>

	return 0;
   45f96:	2000      	movs	r0, #0
}
   45f98:	bd10      	pop	{r4, pc}
	parent->next = child;
   45f9a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   45f9c:	6084      	str	r4, [r0, #8]
}
   45f9e:	e7f8      	b.n	45f92 <bt_att_req_send+0x16>
		return -ENOTCONN;
   45fa0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   45fa4:	e7f8      	b.n	45f98 <bt_att_req_send+0x1c>

00045fa6 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   45fa6:	2001      	movs	r0, #1
   45fa8:	4770      	bx	lr

00045faa <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   45faa:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   45fac:	f7ff fad3 	bl	45556 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   45fb0:	b198      	cbz	r0, 45fda <bt_att_clear_out_of_sync_sent+0x30>
	return list->head;
   45fb2:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   45fb4:	b18b      	cbz	r3, 45fda <bt_att_clear_out_of_sync_sent+0x30>
   45fb6:	f3bf 8f5b 	dmb	ish
   45fba:	3be0      	subs	r3, #224	; 0xe0
   45fbc:	f103 0290 	add.w	r2, r3, #144	; 0x90
   45fc0:	e852 0f00 	ldrex	r0, [r2]
   45fc4:	f020 0020 	bic.w	r0, r0, #32
   45fc8:	e842 0100 	strex	r1, r0, [r2]
   45fcc:	2900      	cmp	r1, #0
   45fce:	d1f7      	bne.n	45fc0 <bt_att_clear_out_of_sync_sent+0x16>
   45fd0:	f3bf 8f5b 	dmb	ish
	return node->next;
   45fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   45fd8:	e7ec      	b.n	45fb4 <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   45fda:	bd08      	pop	{r3, pc}

00045fdc <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   45fdc:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   45fde:	2104      	movs	r1, #4
   45fe0:	f7ff fa6f 	bl	454c2 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   45fe4:	b128      	cbz	r0, 45ff2 <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   45fe6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   45fea:	2105      	movs	r1, #5
   45fec:	308c      	adds	r0, #140	; 0x8c
   45fee:	f7ff bac0 	b.w	45572 <atomic_test_bit>
}
   45ff2:	bd08      	pop	{r3, pc}

00045ff4 <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   45ff4:	6940      	ldr	r0, [r0, #20]

	data->func = func;
	data->user_data = user_data;
   45ff6:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   45ffa:	2201      	movs	r2, #1
   45ffc:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   45ffe:	7403      	strb	r3, [r0, #16]
}
   46000:	4770      	bx	lr

00046002 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   46002:	6010      	str	r0, [r2, #0]
}
   46004:	2000      	movs	r0, #0
   46006:	4770      	bx	lr

00046008 <gatt_ccc_changed>:
{
   46008:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   4600a:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   4600c:	895a      	ldrh	r2, [r3, #10]
   4600e:	428a      	cmp	r2, r1
   46010:	d003      	beq.n	4601a <gatt_ccc_changed+0x12>
		ccc->value = value;
   46012:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   46014:	68db      	ldr	r3, [r3, #12]
   46016:	b103      	cbz	r3, 4601a <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   46018:	4718      	bx	r3
}
   4601a:	4770      	bx	lr

0004601c <gatt_indicate_rsp>:
{
   4601c:	b510      	push	{r4, lr}
   4601e:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   46020:	68a3      	ldr	r3, [r4, #8]
{
   46022:	460a      	mov	r2, r1
	if (params->func) {
   46024:	b10b      	cbz	r3, 4602a <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   46026:	4621      	mov	r1, r4
   46028:	4798      	blx	r3
	params->_ref--;
   4602a:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   4602c:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   4602e:	3b01      	subs	r3, #1
   46030:	b2db      	uxtb	r3, r3
   46032:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   46034:	b122      	cbz	r2, 46040 <gatt_indicate_rsp+0x24>
   46036:	b91b      	cbnz	r3, 46040 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   46038:	4620      	mov	r0, r4
}
   4603a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   4603e:	4710      	bx	r2
}
   46040:	bd10      	pop	{r4, pc}

00046042 <match_uuid>:
	data->attr = attr;
   46042:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   46044:	8091      	strh	r1, [r2, #4]
}
   46046:	2000      	movs	r0, #0
   46048:	4770      	bx	lr

0004604a <ccc_set_cb>:
}
   4604a:	2000      	movs	r0, #0
   4604c:	4770      	bx	lr

0004604e <gen_hash_m>:
{
   4604e:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   46050:	6807      	ldr	r7, [r0, #0]
   46052:	783d      	ldrb	r5, [r7, #0]
{
   46054:	b089      	sub	sp, #36	; 0x24
   46056:	4606      	mov	r6, r0
   46058:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   4605a:	b9dd      	cbnz	r5, 46094 <gen_hash_m+0x46>
	switch (u16->val) {
   4605c:	887b      	ldrh	r3, [r7, #2]
   4605e:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   46062:	d004      	beq.n	4606e <gen_hash_m+0x20>
   46064:	d810      	bhi.n	46088 <gen_hash_m+0x3a>
   46066:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   4606a:	2b03      	cmp	r3, #3
   4606c:	d812      	bhi.n	46094 <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   4606e:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   46072:	2202      	movs	r2, #2
   46074:	f10d 010a 	add.w	r1, sp, #10
   46078:	4620      	mov	r0, r4
   4607a:	f7fd ff54 	bl	43f26 <tc_cmac_update>
   4607e:	b968      	cbnz	r0, 4609c <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   46080:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   46084:	65a2      	str	r2, [r4, #88]	; 0x58
   46086:	e006      	b.n	46096 <gen_hash_m+0x48>
	switch (u16->val) {
   46088:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   4608c:	33ff      	adds	r3, #255	; 0xff
   4608e:	b29b      	uxth	r3, r3
   46090:	2b04      	cmp	r3, #4
   46092:	d91e      	bls.n	460d2 <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   46094:	2501      	movs	r5, #1
}
   46096:	4628      	mov	r0, r5
   46098:	b009      	add	sp, #36	; 0x24
   4609a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   4609c:	887b      	ldrh	r3, [r7, #2]
   4609e:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   460a2:	2202      	movs	r2, #2
   460a4:	f10d 010a 	add.w	r1, sp, #10
   460a8:	4620      	mov	r0, r4
   460aa:	f7fd ff3c 	bl	43f26 <tc_cmac_update>
   460ae:	2800      	cmp	r0, #0
   460b0:	d0e6      	beq.n	46080 <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   460b2:	2000      	movs	r0, #0
   460b4:	9000      	str	r0, [sp, #0]
   460b6:	aa03      	add	r2, sp, #12
   460b8:	6877      	ldr	r7, [r6, #4]
   460ba:	2313      	movs	r3, #19
   460bc:	4631      	mov	r1, r6
   460be:	47b8      	blx	r7
		if (len < 0) {
   460c0:	1e02      	subs	r2, r0, #0
   460c2:	dbdf      	blt.n	46084 <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   460c4:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   460c6:	4620      	mov	r0, r4
   460c8:	f7fd ff2d 	bl	43f26 <tc_cmac_update>
   460cc:	2800      	cmp	r0, #0
   460ce:	d1e1      	bne.n	46094 <gen_hash_m+0x46>
   460d0:	e7d6      	b.n	46080 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   460d2:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   460d6:	2202      	movs	r2, #2
   460d8:	f10d 010a 	add.w	r1, sp, #10
   460dc:	4620      	mov	r0, r4
   460de:	f7fd ff22 	bl	43f26 <tc_cmac_update>
   460e2:	2800      	cmp	r0, #0
   460e4:	d0cc      	beq.n	46080 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   460e6:	887b      	ldrh	r3, [r7, #2]
   460e8:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   460ec:	2202      	movs	r2, #2
   460ee:	f10d 010a 	add.w	r1, sp, #10
   460f2:	e7e8      	b.n	460c6 <gen_hash_m+0x78>

000460f4 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   460f4:	f3bf 8f5b 	dmb	ish
   460f8:	6800      	ldr	r0, [r0, #0]
   460fa:	f3bf 8f5b 	dmb	ish
}
   460fe:	4770      	bx	lr

00046100 <atomic_or>:
{
   46100:	b510      	push	{r4, lr}
   46102:	4603      	mov	r3, r0
}
   46104:	f3bf 8f5b 	dmb	ish
   46108:	e853 0f00 	ldrex	r0, [r3]
   4610c:	ea40 0201 	orr.w	r2, r0, r1
   46110:	e843 2400 	strex	r4, r2, [r3]
   46114:	2c00      	cmp	r4, #0
   46116:	d1f7      	bne.n	46108 <atomic_or+0x8>
   46118:	f3bf 8f5b 	dmb	ish
   4611c:	bd10      	pop	{r4, pc}

0004611e <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   4611e:	2207      	movs	r2, #7
   46120:	f7fe b8fa 	b.w	44318 <memcpy>

00046124 <cf_write>:
{
   46124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   46128:	461f      	mov	r7, r3
   4612a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   4612e:	2b01      	cmp	r3, #1
{
   46130:	4606      	mov	r6, r0
   46132:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   46134:	d82e      	bhi.n	46194 <cf_write+0x70>
	if (offset + len > sizeof(cfg->data)) {
   46136:	443b      	add	r3, r7
   46138:	2b01      	cmp	r3, #1
   4613a:	463d      	mov	r5, r7
   4613c:	dc2d      	bgt.n	4619a <cf_write+0x76>
	cfg = find_cf_cfg(conn);
   4613e:	f7e7 fe6b 	bl	2de18 <find_cf_cfg>
	if (!cfg) {
   46142:	4604      	mov	r4, r0
   46144:	b918      	cbnz	r0, 4614e <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   46146:	f7e7 fe67 	bl	2de18 <find_cf_cfg>
	if (!cfg) {
   4614a:	4604      	mov	r4, r0
   4614c:	b340      	cbz	r0, 461a0 <cf_write+0x7c>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   4614e:	b197      	cbz	r7, 46176 <cf_write+0x52>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   46150:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   46152:	f898 2000 	ldrb.w	r2, [r8]
   46156:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   46158:	fa21 f003 	lsr.w	r0, r1, r3
   4615c:	07c7      	lsls	r7, r0, #31
   4615e:	d503      	bpl.n	46168 <cf_write+0x44>
		    !(value[i / 8] & BIT(i % 8))) {
   46160:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   46164:	07c0      	lsls	r0, r0, #31
   46166:	d51e      	bpl.n	461a6 <cf_write+0x82>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   46168:	3301      	adds	r3, #1
   4616a:	2b03      	cmp	r3, #3
   4616c:	d1f4      	bne.n	46158 <cf_write+0x34>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   4616e:	f002 0207 	and.w	r2, r2, #7
   46172:	4311      	orrs	r1, r2
   46174:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   46176:	f106 0188 	add.w	r1, r6, #136	; 0x88
   4617a:	1c60      	adds	r0, r4, #1
   4617c:	f7ff ffcf 	bl	4611e <bt_addr_le_copy>
	cfg->id = conn->id;
   46180:	4620      	mov	r0, r4
   46182:	7a33      	ldrb	r3, [r6, #8]
   46184:	f800 3b0c 	strb.w	r3, [r0], #12
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   46188:	2101      	movs	r1, #1
   4618a:	f7ff ffb9 	bl	46100 <atomic_or>
}
   4618e:	4628      	mov	r0, r5
   46190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   46194:	f06f 0506 	mvn.w	r5, #6
   46198:	e7f9      	b.n	4618e <cf_write+0x6a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   4619a:	f06f 050c 	mvn.w	r5, #12
   4619e:	e7f6      	b.n	4618e <cf_write+0x6a>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   461a0:	f06f 0510 	mvn.w	r5, #16
   461a4:	e7f3      	b.n	4618e <cf_write+0x6a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   461a6:	f06f 0512 	mvn.w	r5, #18
   461aa:	e7f0      	b.n	4618e <cf_write+0x6a>

000461ac <atomic_and>:
{
   461ac:	b510      	push	{r4, lr}
   461ae:	4603      	mov	r3, r0
}
   461b0:	f3bf 8f5b 	dmb	ish
   461b4:	e853 0f00 	ldrex	r0, [r3]
   461b8:	ea00 0201 	and.w	r2, r0, r1
   461bc:	e843 2400 	strex	r4, r2, [r3]
   461c0:	2c00      	cmp	r4, #0
   461c2:	d1f7      	bne.n	461b4 <atomic_and+0x8>
   461c4:	f3bf 8f5b 	dmb	ish
   461c8:	bd10      	pop	{r4, pc}

000461ca <read_appearance>:
{
   461ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   461cc:	4615      	mov	r5, r2
   461ce:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   461d2:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   461d4:	f7fe fccf 	bl	44b76 <bt_get_appearance>
	if (offset > value_len) {
   461d8:	2e02      	cmp	r6, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   461da:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   461de:	d80e      	bhi.n	461fe <read_appearance+0x34>
	len = MIN(buf_len, value_len - offset);
   461e0:	f1c6 0402 	rsb	r4, r6, #2
   461e4:	42bc      	cmp	r4, r7
   461e6:	bfa8      	it	ge
   461e8:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   461ea:	f10d 0306 	add.w	r3, sp, #6
   461ee:	4622      	mov	r2, r4
   461f0:	1999      	adds	r1, r3, r6
   461f2:	4628      	mov	r0, r5
   461f4:	f7fe f890 	bl	44318 <memcpy>
}
   461f8:	4620      	mov	r0, r4
   461fa:	b003      	add	sp, #12
   461fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   461fe:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   46202:	e7f9      	b.n	461f8 <read_appearance+0x2e>

00046204 <read_name>:
{
   46204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   46208:	4698      	mov	r8, r3
   4620a:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   4620e:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   46210:	f7e5 fbbc 	bl	2b98c <bt_get_name>
   46214:	4607      	mov	r7, r0
				 strlen(name));
   46216:	f7fe f848 	bl	442aa <strlen>
	if (offset > value_len) {
   4621a:	b283      	uxth	r3, r0
   4621c:	42b3      	cmp	r3, r6
   4621e:	d30c      	bcc.n	4623a <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   46220:	1b9c      	subs	r4, r3, r6
   46222:	4544      	cmp	r4, r8
   46224:	bfa8      	it	ge
   46226:	4644      	movge	r4, r8
   46228:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   4622a:	4622      	mov	r2, r4
   4622c:	19b9      	adds	r1, r7, r6
   4622e:	4628      	mov	r0, r5
   46230:	f7fe f872 	bl	44318 <memcpy>
}
   46234:	4620      	mov	r0, r4
   46236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4623a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   4623e:	e7f9      	b.n	46234 <read_name+0x30>

00046240 <cf_read>:
{
   46240:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   46242:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   46244:	2300      	movs	r3, #0
{
   46246:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   4624a:	f88d 3004 	strb.w	r3, [sp, #4]
{
   4624e:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   46250:	f7e7 fde2 	bl	2de18 <find_cf_cfg>
	if (cfg) {
   46254:	b128      	cbz	r0, 46262 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   46256:	f100 0108 	add.w	r1, r0, #8
   4625a:	2201      	movs	r2, #1
   4625c:	a801      	add	r0, sp, #4
   4625e:	f7fe f85b 	bl	44318 <memcpy>
	if (offset > value_len) {
   46262:	2e01      	cmp	r6, #1
   46264:	d80d      	bhi.n	46282 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   46266:	f1c6 0401 	rsb	r4, r6, #1
   4626a:	42bc      	cmp	r4, r7
   4626c:	bfa8      	it	ge
   4626e:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   46270:	ab01      	add	r3, sp, #4
   46272:	4622      	mov	r2, r4
   46274:	1999      	adds	r1, r3, r6
   46276:	4628      	mov	r0, r5
   46278:	f7fe f84e 	bl	44318 <memcpy>
}
   4627c:	4620      	mov	r0, r4
   4627e:	b003      	add	sp, #12
   46280:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   46282:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   46286:	e7f9      	b.n	4627c <cf_read+0x3c>

00046288 <bt_gatt_attr_read_service>:
{
   46288:	b513      	push	{r0, r1, r4, lr}
	struct bt_uuid *uuid = attr->user_data;
   4628a:	68c9      	ldr	r1, [r1, #12]
{
   4628c:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   4628e:	780a      	ldrb	r2, [r1, #0]
{
   46290:	461c      	mov	r4, r3
   46292:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	if (uuid->type == BT_UUID_TYPE_16) {
   46296:	b992      	cbnz	r2, 462be <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   46298:	884a      	ldrh	r2, [r1, #2]
   4629a:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   4629e:	2b02      	cmp	r3, #2
   462a0:	d818      	bhi.n	462d4 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   462a2:	f1c3 0202 	rsb	r2, r3, #2
   462a6:	4294      	cmp	r4, r2
   462a8:	bfa8      	it	ge
   462aa:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   462ac:	4622      	mov	r2, r4
   462ae:	f10d 0106 	add.w	r1, sp, #6
   462b2:	4419      	add	r1, r3
   462b4:	f7fe f830 	bl	44318 <memcpy>
}
   462b8:	4620      	mov	r0, r4
   462ba:	b002      	add	sp, #8
   462bc:	bd10      	pop	{r4, pc}
	if (offset > value_len) {
   462be:	2b10      	cmp	r3, #16
				 BT_UUID_128(uuid)->val, 16);
   462c0:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   462c4:	d806      	bhi.n	462d4 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   462c6:	f1c3 0210 	rsb	r2, r3, #16
   462ca:	4294      	cmp	r4, r2
   462cc:	bfa8      	it	ge
   462ce:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   462d0:	4622      	mov	r2, r4
   462d2:	e7ee      	b.n	462b2 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   462d4:	f06f 0406 	mvn.w	r4, #6
   462d8:	e7ee      	b.n	462b8 <bt_gatt_attr_read_service+0x30>

000462da <cf_set>:
{
   462da:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   462de:	4688      	mov	r8, r1
   462e0:	4616      	mov	r6, r2
   462e2:	461f      	mov	r7, r3
	if (!name) {
   462e4:	4605      	mov	r5, r0
   462e6:	b928      	cbnz	r0, 462f4 <cf_set+0x1a>
		return -EINVAL;
   462e8:	f06f 0415 	mvn.w	r4, #21
}
   462ec:	4620      	mov	r0, r4
   462ee:	b004      	add	sp, #16
   462f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
   462f4:	a902      	add	r1, sp, #8
   462f6:	f7fe f8aa 	bl	4444e <bt_settings_decode_key>
	if (err) {
   462fa:	4604      	mov	r4, r0
   462fc:	2800      	cmp	r0, #0
   462fe:	d1f3      	bne.n	462e8 <cf_set+0xe>
	settings_name_next(name, &next);
   46300:	a901      	add	r1, sp, #4
   46302:	4628      	mov	r0, r5
   46304:	f7fc fc9f 	bl	42c46 <settings_name_next>
	if (!next) {
   46308:	9801      	ldr	r0, [sp, #4]
   4630a:	b9d0      	cbnz	r0, 46342 <cf_set+0x68>
	cfg = find_cf_cfg_by_addr(id, &addr);
   4630c:	a902      	add	r1, sp, #8
   4630e:	2000      	movs	r0, #0
   46310:	f7e7 fe36 	bl	2df80 <find_cf_cfg_by_addr>
	if (!cfg) {
   46314:	4605      	mov	r5, r0
   46316:	b948      	cbnz	r0, 4632c <cf_set+0x52>
		cfg = find_cf_cfg(NULL);
   46318:	f7e7 fd7e 	bl	2de18 <find_cf_cfg>
		if (!cfg) {
   4631c:	4605      	mov	r5, r0
   4631e:	b1d8      	cbz	r0, 46358 <cf_set+0x7e>
		cfg->id = id;
   46320:	2300      	movs	r3, #0
   46322:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   46326:	a902      	add	r1, sp, #8
   46328:	f7ff fef9 	bl	4611e <bt_addr_le_copy>
	if (len_rd) {
   4632c:	f1b8 0f00 	cmp.w	r8, #0
   46330:	d00e      	beq.n	46350 <cf_set+0x76>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   46332:	2201      	movs	r2, #1
   46334:	f105 0108 	add.w	r1, r5, #8
   46338:	4638      	mov	r0, r7
   4633a:	47b0      	blx	r6
		if (len < 0) {
   4633c:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   46340:	e7d4      	b.n	462ec <cf_set+0x12>
		unsigned long next_id = strtoul(next, NULL, 10);
   46342:	220a      	movs	r2, #10
   46344:	4621      	mov	r1, r4
   46346:	f7fd fe9e 	bl	44086 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   4634a:	2800      	cmp	r0, #0
   4634c:	d0de      	beq.n	4630c <cf_set+0x32>
   4634e:	e7cb      	b.n	462e8 <cf_set+0xe>
		clear_cf_cfg(cfg);
   46350:	4628      	mov	r0, r5
   46352:	f7e7 fdc3 	bl	2dedc <clear_cf_cfg>
   46356:	e7c9      	b.n	462ec <cf_set+0x12>
			return -ENOMEM;
   46358:	f06f 040b 	mvn.w	r4, #11
   4635c:	e7c6      	b.n	462ec <cf_set+0x12>

0004635e <ccc_find_cfg>:
{
   4635e:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   46360:	7803      	ldrb	r3, [r0, #0]
   46362:	4293      	cmp	r3, r2
{
   46364:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   46366:	d106      	bne.n	46376 <ccc_find_cfg+0x18>
	return memcmp(a, b, sizeof(*a));
   46368:	2207      	movs	r2, #7
   4636a:	3001      	adds	r0, #1
   4636c:	f7fd ffc4 	bl	442f8 <memcmp>
   46370:	b908      	cbnz	r0, 46376 <ccc_find_cfg+0x18>
			return &ccc->cfg[i];
   46372:	4620      	mov	r0, r4
}
   46374:	bd10      	pop	{r4, pc}
	return NULL;
   46376:	2000      	movs	r0, #0
   46378:	e7fc      	b.n	46374 <ccc_find_cfg+0x16>

0004637a <bt_gatt_attr_read_ccc>:
{
   4637a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   4637c:	68c9      	ldr	r1, [r1, #12]
{
   4637e:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   46382:	4615      	mov	r5, r2
   46384:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   46386:	f7e7 fe93 	bl	2e0b0 <find_ccc_cfg>
	if (cfg) {
   4638a:	b100      	cbz	r0, 4638e <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   4638c:	8900      	ldrh	r0, [r0, #8]
   4638e:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   46392:	2e02      	cmp	r6, #2
   46394:	d80e      	bhi.n	463b4 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   46396:	f1c6 0402 	rsb	r4, r6, #2
   4639a:	42bc      	cmp	r4, r7
   4639c:	bfa8      	it	ge
   4639e:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   463a0:	f10d 0306 	add.w	r3, sp, #6
   463a4:	4622      	mov	r2, r4
   463a6:	1999      	adds	r1, r3, r6
   463a8:	4628      	mov	r0, r5
   463aa:	f7fd ffb5 	bl	44318 <memcpy>
}
   463ae:	4620      	mov	r0, r4
   463b0:	b003      	add	sp, #12
   463b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   463b4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   463b8:	e7f9      	b.n	463ae <bt_gatt_attr_read_ccc+0x34>

000463ba <sc_clear>:
{
   463ba:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   463bc:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   463c0:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   463c2:	4631      	mov	r1, r6
   463c4:	7a00      	ldrb	r0, [r0, #8]
   463c6:	f7fe fbd9 	bl	44b7c <bt_addr_le_is_bonded>
   463ca:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   463cc:	4631      	mov	r1, r6
   463ce:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   463d0:	b11d      	cbz	r5, 463da <sc_clear+0x20>
}
   463d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   463d6:	f7e7 bf4f 	b.w	2e278 <bt_gatt_clear_sc>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   463da:	f7e7 fef9 	bl	2e1d0 <find_sc_cfg>
		if (cfg) {
   463de:	b128      	cbz	r0, 463ec <sc_clear+0x32>
	memset(cfg, 0, sizeof(*cfg));
   463e0:	4629      	mov	r1, r5
   463e2:	220c      	movs	r2, #12
}
   463e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   463e8:	f7fd bfa1 	b.w	4432e <memset>
}
   463ec:	bd70      	pop	{r4, r5, r6, pc}

000463ee <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   463ee:	2a02      	cmp	r2, #2
{
   463f0:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   463f2:	d108      	bne.n	46406 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   463f4:	2300      	movs	r3, #0
   463f6:	f100 0188 	add.w	r1, r0, #136	; 0x88
   463fa:	461a      	mov	r2, r3
   463fc:	7a00      	ldrb	r0, [r0, #8]
   463fe:	f7e7 ff09 	bl	2e214 <sc_save>
}
   46402:	2002      	movs	r0, #2
   46404:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   46406:	f7ff ffd8 	bl	463ba <sc_clear>
   4640a:	e7fa      	b.n	46402 <sc_ccc_cfg_write+0x14>

0004640c <sc_restore_rsp>:
{
   4640c:	b538      	push	{r3, r4, r5, lr}
   4640e:	4604      	mov	r4, r0
   46410:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   46412:	f7ff fdc8 	bl	45fa6 <bt_att_fixed_chan_only>
   46416:	b150      	cbz	r0, 4642e <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   46418:	4620      	mov	r0, r4
   4641a:	f7e7 fcfd 	bl	2de18 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   4641e:	b130      	cbz	r0, 4642e <sc_restore_rsp+0x22>
   46420:	7a03      	ldrb	r3, [r0, #8]
   46422:	07db      	lsls	r3, r3, #31
   46424:	d503      	bpl.n	4642e <sc_restore_rsp+0x22>
   46426:	2101      	movs	r1, #1
   46428:	300c      	adds	r0, #12
   4642a:	f7ff fe69 	bl	46100 <atomic_or>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   4642e:	b985      	cbnz	r5, 46452 <sc_restore_rsp+0x46>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   46430:	7a20      	ldrb	r0, [r4, #8]
   46432:	f104 0188 	add.w	r1, r4, #136	; 0x88
   46436:	f7e7 fecb 	bl	2e1d0 <find_sc_cfg>
		if (sc_cfg) {
   4643a:	4604      	mov	r4, r0
   4643c:	b148      	cbz	r0, 46452 <sc_restore_rsp+0x46>
	memset(&cfg->data, 0, sizeof(cfg->data));
   4643e:	4629      	mov	r1, r5
   46440:	2204      	movs	r2, #4
   46442:	3008      	adds	r0, #8
   46444:	f7fd ff73 	bl	4432e <memset>
		sc_store(cfg);
   46448:	4620      	mov	r0, r4
}
   4644a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		sc_store(cfg);
   4644e:	f7e7 bd13 	b.w	2de78 <sc_store>
}
   46452:	bd38      	pop	{r3, r4, r5, pc}

00046454 <bt_gatt_attr_read>:
{
   46454:	b510      	push	{r4, lr}
   46456:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   4645a:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   4645e:	42a1      	cmp	r1, r4
{
   46460:	4610      	mov	r0, r2
	if (offset > value_len) {
   46462:	d80b      	bhi.n	4647c <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   46464:	1a64      	subs	r4, r4, r1
   46466:	429c      	cmp	r4, r3
   46468:	bfa8      	it	ge
   4646a:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   4646c:	9b03      	ldr	r3, [sp, #12]
   4646e:	b2a4      	uxth	r4, r4
   46470:	4622      	mov	r2, r4
   46472:	4419      	add	r1, r3
   46474:	f7fd ff50 	bl	44318 <memcpy>
}
   46478:	4620      	mov	r0, r4
   4647a:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4647c:	f06f 0406 	mvn.w	r4, #6
   46480:	e7fa      	b.n	46478 <bt_gatt_attr_read+0x24>

00046482 <bt_gatt_attr_value_handle>:
{
   46482:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   46484:	4604      	mov	r4, r0
   46486:	b910      	cbnz	r0, 4648e <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   46488:	2000      	movs	r0, #0
}
   4648a:	b002      	add	sp, #8
   4648c:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   4648e:	2300      	movs	r3, #0
   46490:	f88d 3004 	strb.w	r3, [sp, #4]
   46494:	6800      	ldr	r0, [r0, #0]
   46496:	f642 0303 	movw	r3, #10243	; 0x2803
   4649a:	a901      	add	r1, sp, #4
   4649c:	f8ad 3006 	strh.w	r3, [sp, #6]
   464a0:	f7fd fffb 	bl	4449a <bt_uuid_cmp>
   464a4:	2800      	cmp	r0, #0
   464a6:	d1ef      	bne.n	46488 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   464a8:	68e3      	ldr	r3, [r4, #12]
   464aa:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   464ac:	2800      	cmp	r0, #0
   464ae:	d1ec      	bne.n	4648a <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   464b0:	4620      	mov	r0, r4
   464b2:	f7e8 f82b 	bl	2e50c <bt_gatt_attr_get_handle>
   464b6:	3001      	adds	r0, #1
   464b8:	b280      	uxth	r0, r0
	return handle;
   464ba:	e7e6      	b.n	4648a <bt_gatt_attr_value_handle+0x8>

000464bc <bt_gatt_attr_read_chrc>:
{
   464bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   464be:	68cc      	ldr	r4, [r1, #12]
{
   464c0:	b087      	sub	sp, #28
   464c2:	4608      	mov	r0, r1
   464c4:	461f      	mov	r7, r3
	pdu.properties = chrc->properties;
   464c6:	79a3      	ldrb	r3, [r4, #6]
   464c8:	f88d 3004 	strb.w	r3, [sp, #4]
{
   464cc:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   464d0:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   464d2:	f7ff ffd6 	bl	46482 <bt_gatt_attr_value_handle>
   464d6:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   464da:	6821      	ldr	r1, [r4, #0]
   464dc:	780b      	ldrb	r3, [r1, #0]
   464de:	b99b      	cbnz	r3, 46508 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   464e0:	884b      	ldrh	r3, [r1, #2]
   464e2:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   464e6:	2405      	movs	r4, #5
	if (offset > value_len) {
   464e8:	42b4      	cmp	r4, r6
   464ea:	d315      	bcc.n	46518 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   464ec:	1ba4      	subs	r4, r4, r6
   464ee:	42bc      	cmp	r4, r7
   464f0:	bfa8      	it	ge
   464f2:	463c      	movge	r4, r7
   464f4:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   464f6:	ab01      	add	r3, sp, #4
   464f8:	4622      	mov	r2, r4
   464fa:	1999      	adds	r1, r3, r6
   464fc:	4628      	mov	r0, r5
   464fe:	f7fd ff0b 	bl	44318 <memcpy>
}
   46502:	4620      	mov	r0, r4
   46504:	b007      	add	sp, #28
   46506:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   46508:	2210      	movs	r2, #16
   4650a:	3101      	adds	r1, #1
   4650c:	f10d 0007 	add.w	r0, sp, #7
   46510:	f7fd ff02 	bl	44318 <memcpy>
		value_len += 16U;
   46514:	2413      	movs	r4, #19
   46516:	e7e7      	b.n	464e8 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   46518:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   4651c:	e7f1      	b.n	46502 <bt_gatt_attr_read_chrc+0x46>

0004651e <bt_gatt_foreach_attr>:
{
   4651e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   46520:	e9cd 2301 	strd	r2, r3, [sp, #4]
   46524:	2300      	movs	r3, #0
   46526:	9300      	str	r3, [sp, #0]
   46528:	461a      	mov	r2, r3
   4652a:	f7e8 f81f 	bl	2e56c <bt_gatt_foreach_attr_type>
}
   4652e:	b005      	add	sp, #20
   46530:	f85d fb04 	ldr.w	pc, [sp], #4

00046534 <bt_gatt_check_perm>:
{
   46534:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   46536:	07d4      	lsls	r4, r2, #31
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   46538:	8a4b      	ldrh	r3, [r1, #18]
{
   4653a:	4605      	mov	r5, r0
	if ((mask & BT_GATT_PERM_READ) &&
   4653c:	d504      	bpl.n	46548 <bt_gatt_check_perm+0x14>
   4653e:	f013 0f95 	tst.w	r3, #149	; 0x95
   46542:	d027      	beq.n	46594 <bt_gatt_check_perm+0x60>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   46544:	6848      	ldr	r0, [r1, #4]
   46546:	b328      	cbz	r0, 46594 <bt_gatt_check_perm+0x60>
	if ((mask & BT_GATT_PERM_WRITE) &&
   46548:	0790      	lsls	r0, r2, #30
   4654a:	d504      	bpl.n	46556 <bt_gatt_check_perm+0x22>
   4654c:	f413 7f95 	tst.w	r3, #298	; 0x12a
   46550:	d022      	beq.n	46598 <bt_gatt_check_perm+0x64>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   46552:	6889      	ldr	r1, [r1, #8]
   46554:	b301      	cbz	r1, 46598 <bt_gatt_check_perm+0x64>
	mask &= attr->perm;
   46556:	ea02 0403 	and.w	r4, r2, r3
	if (mask & BT_GATT_PERM_LESC_MASK) {
   4655a:	f414 7fc0 	tst.w	r4, #384	; 0x180
   4655e:	d007      	beq.n	46570 <bt_gatt_check_perm+0x3c>
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   46560:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   46564:	b90b      	cbnz	r3, 4656a <bt_gatt_check_perm+0x36>
			return BT_ATT_ERR_AUTHENTICATION;
   46566:	2005      	movs	r0, #5
}
   46568:	bd38      	pop	{r3, r4, r5, pc}
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   4656a:	7b5b      	ldrb	r3, [r3, #13]
   4656c:	06db      	lsls	r3, r3, #27
   4656e:	d5fa      	bpl.n	46566 <bt_gatt_check_perm+0x32>
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   46570:	f014 0f30 	tst.w	r4, #48	; 0x30
   46574:	d108      	bne.n	46588 <bt_gatt_check_perm+0x54>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   46576:	f014 000c 	ands.w	r0, r4, #12
   4657a:	d0f5      	beq.n	46568 <bt_gatt_check_perm+0x34>
		if (!conn->encrypt) {
   4657c:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   4657e:	2b00      	cmp	r3, #0
   46580:	bf14      	ite	ne
   46582:	2000      	movne	r0, #0
   46584:	200f      	moveq	r0, #15
   46586:	e7ef      	b.n	46568 <bt_gatt_check_perm+0x34>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   46588:	4628      	mov	r0, r5
   4658a:	f7fe fe97 	bl	452bc <bt_conn_get_security>
   4658e:	2802      	cmp	r0, #2
   46590:	d8f1      	bhi.n	46576 <bt_gatt_check_perm+0x42>
   46592:	e7e8      	b.n	46566 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   46594:	2002      	movs	r0, #2
   46596:	e7e7      	b.n	46568 <bt_gatt_check_perm+0x34>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   46598:	2003      	movs	r0, #3
   4659a:	e7e5      	b.n	46568 <bt_gatt_check_perm+0x34>

0004659c <bt_gatt_is_subscribed>:
{
   4659c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   465a0:	7b43      	ldrb	r3, [r0, #13]
   465a2:	2b07      	cmp	r3, #7
{
   465a4:	4605      	mov	r5, r0
   465a6:	460c      	mov	r4, r1
   465a8:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   465aa:	d110      	bne.n	465ce <bt_gatt_is_subscribed+0x32>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   465ac:	2300      	movs	r3, #0
   465ae:	f88d 300c 	strb.w	r3, [sp, #12]
   465b2:	6820      	ldr	r0, [r4, #0]
   465b4:	f642 0303 	movw	r3, #10243	; 0x2803
   465b8:	a903      	add	r1, sp, #12
   465ba:	f8ad 300e 	strh.w	r3, [sp, #14]
   465be:	f7fd ff6c 	bl	4449a <bt_uuid_cmp>
   465c2:	b960      	cbnz	r0, 465de <bt_gatt_is_subscribed+0x42>
		if (!(chrc->properties &
   465c4:	68e3      	ldr	r3, [r4, #12]
   465c6:	799b      	ldrb	r3, [r3, #6]
   465c8:	f013 0f30 	tst.w	r3, #48	; 0x30
   465cc:	d103      	bne.n	465d6 <bt_gatt_is_subscribed+0x3a>
		return false;
   465ce:	2000      	movs	r0, #0
}
   465d0:	b004      	add	sp, #16
   465d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   465d6:	4620      	mov	r0, r4
   465d8:	f7e8 f946 	bl	2e868 <bt_gatt_attr_next>
   465dc:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   465de:	2300      	movs	r3, #0
   465e0:	6820      	ldr	r0, [r4, #0]
   465e2:	f88d 300c 	strb.w	r3, [sp, #12]
   465e6:	a903      	add	r1, sp, #12
   465e8:	f642 1302 	movw	r3, #10498	; 0x2902
   465ec:	f8ad 300e 	strh.w	r3, [sp, #14]
   465f0:	f7fd ff53 	bl	4449a <bt_uuid_cmp>
   465f4:	b118      	cbz	r0, 465fe <bt_gatt_is_subscribed+0x62>
		attr = bt_gatt_attr_next(attr);
   465f6:	4620      	mov	r0, r4
   465f8:	f7e8 f936 	bl	2e868 <bt_gatt_attr_next>
   465fc:	4604      	mov	r4, r0
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   465fe:	2600      	movs	r6, #0
   46600:	f642 1802 	movw	r8, #10498	; 0x2902
   46604:	6820      	ldr	r0, [r4, #0]
   46606:	f88d 6000 	strb.w	r6, [sp]
   4660a:	4669      	mov	r1, sp
   4660c:	f8ad 8002 	strh.w	r8, [sp, #2]
   46610:	f7fd ff43 	bl	4449a <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   46614:	b9d8      	cbnz	r0, 4664e <bt_gatt_is_subscribed+0xb2>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   46616:	2300      	movs	r3, #0
   46618:	6820      	ldr	r0, [r4, #0]
   4661a:	f88d 300c 	strb.w	r3, [sp, #12]
   4661e:	a903      	add	r1, sp, #12
   46620:	f642 1302 	movw	r3, #10498	; 0x2902
   46624:	f8ad 300e 	strh.w	r3, [sp, #14]
   46628:	f7fd ff37 	bl	4449a <bt_uuid_cmp>
   4662c:	2800      	cmp	r0, #0
   4662e:	d1ce      	bne.n	465ce <bt_gatt_is_subscribed+0x32>
	ccc = attr->user_data;
   46630:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   46632:	4622      	mov	r2, r4
   46634:	4628      	mov	r0, r5
   46636:	f812 1b01 	ldrb.w	r1, [r2], #1
   4663a:	f7fe fe41 	bl	452c0 <bt_conn_is_peer_addr_le>
   4663e:	2800      	cmp	r0, #0
   46640:	d0c5      	beq.n	465ce <bt_gatt_is_subscribed+0x32>
   46642:	8923      	ldrh	r3, [r4, #8]
   46644:	421f      	tst	r7, r3
   46646:	bf14      	ite	ne
   46648:	2001      	movne	r0, #1
   4664a:	2000      	moveq	r0, #0
   4664c:	e7c0      	b.n	465d0 <bt_gatt_is_subscribed+0x34>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   4664e:	6820      	ldr	r0, [r4, #0]
   46650:	f88d 6004 	strb.w	r6, [sp, #4]
   46654:	f642 0303 	movw	r3, #10243	; 0x2803
   46658:	a901      	add	r1, sp, #4
   4665a:	f8ad 3006 	strh.w	r3, [sp, #6]
   4665e:	f7fd ff1c 	bl	4449a <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   46662:	2800      	cmp	r0, #0
   46664:	d0d7      	beq.n	46616 <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   46666:	6820      	ldr	r0, [r4, #0]
   46668:	f88d 6008 	strb.w	r6, [sp, #8]
   4666c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   46670:	a902      	add	r1, sp, #8
   46672:	f8ad 300a 	strh.w	r3, [sp, #10]
   46676:	f7fd ff10 	bl	4449a <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   4667a:	2800      	cmp	r0, #0
   4667c:	d0cb      	beq.n	46616 <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   4667e:	6820      	ldr	r0, [r4, #0]
   46680:	f88d 600c 	strb.w	r6, [sp, #12]
   46684:	f642 0301 	movw	r3, #10241	; 0x2801
   46688:	a903      	add	r1, sp, #12
   4668a:	f8ad 300e 	strh.w	r3, [sp, #14]
   4668e:	f7fd ff04 	bl	4449a <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   46692:	2800      	cmp	r0, #0
   46694:	d0bf      	beq.n	46616 <bt_gatt_is_subscribed+0x7a>
		attr = bt_gatt_attr_next(attr);
   46696:	4620      	mov	r0, r4
   46698:	f7e8 f8e6 	bl	2e868 <bt_gatt_attr_next>
		if (!attr) {
   4669c:	4604      	mov	r4, r0
   4669e:	2800      	cmp	r0, #0
   466a0:	d1b0      	bne.n	46604 <bt_gatt_is_subscribed+0x68>
   466a2:	e794      	b.n	465ce <bt_gatt_is_subscribed+0x32>

000466a4 <gatt_notify>:
{
   466a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   466a8:	4614      	mov	r4, r2
   466aa:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   466ac:	2294      	movs	r2, #148	; 0x94
   466ae:	6861      	ldr	r1, [r4, #4]
{
   466b0:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   466b2:	f7ff ff3f 	bl	46534 <bt_gatt_check_perm>
   466b6:	bb58      	cbnz	r0, 46710 <gatt_notify+0x6c>
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   466b8:	6861      	ldr	r1, [r4, #4]
   466ba:	2201      	movs	r2, #1
   466bc:	4630      	mov	r0, r6
   466be:	f7ff ff6d 	bl	4659c <bt_gatt_is_subscribed>
   466c2:	b348      	cbz	r0, 46718 <gatt_notify+0x74>
				sizeof(*nfy) + params->len);
   466c4:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   466c6:	211b      	movs	r1, #27
   466c8:	3202      	adds	r2, #2
   466ca:	4630      	mov	r0, r6
   466cc:	f7ff fb61 	bl	45d92 <bt_att_create_pdu>
	if (!buf) {
   466d0:	4605      	mov	r5, r0
   466d2:	b320      	cbz	r0, 4671e <gatt_notify+0x7a>
   466d4:	f100 0908 	add.w	r9, r0, #8
   466d8:	2102      	movs	r1, #2
   466da:	4648      	mov	r0, r9
   466dc:	f000 fd77 	bl	471ce <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   466e0:	4607      	mov	r7, r0
   466e2:	4648      	mov	r0, r9
   466e4:	f827 8b02 	strh.w	r8, [r7], #2
   466e8:	89a1      	ldrh	r1, [r4, #12]
   466ea:	f000 fd70 	bl	471ce <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   466ee:	89a2      	ldrh	r2, [r4, #12]
   466f0:	68a1      	ldr	r1, [r4, #8]
   466f2:	4638      	mov	r0, r7
   466f4:	f7fd fe10 	bl	44318 <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   466f8:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   466fc:	4628      	mov	r0, r5
   466fe:	2301      	movs	r3, #1
   46700:	f7ff fc78 	bl	45ff4 <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   46704:	4629      	mov	r1, r5
   46706:	4630      	mov	r0, r6
}
   46708:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   4670c:	f7ff bbf8 	b.w	45f00 <bt_att_send>
		return -EPERM;
   46710:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   46714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
   46718:	f06f 0015 	mvn.w	r0, #21
   4671c:	e7fa      	b.n	46714 <gatt_notify+0x70>
		return -ENOMEM;
   4671e:	f06f 000b 	mvn.w	r0, #11
   46722:	e7f7      	b.n	46714 <gatt_notify+0x70>

00046724 <bt_gatt_change_aware>:
{
   46724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   46726:	4605      	mov	r5, r0
   46728:	460f      	mov	r7, r1
	cfg = find_cf_cfg(conn);
   4672a:	f7e7 fb75 	bl	2de18 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   4672e:	b1d0      	cbz	r0, 46766 <bt_gatt_change_aware+0x42>
   46730:	7a03      	ldrb	r3, [r0, #8]
   46732:	07db      	lsls	r3, r3, #31
   46734:	d517      	bpl.n	46766 <bt_gatt_change_aware+0x42>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   46736:	f100 040c 	add.w	r4, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   4673a:	4620      	mov	r0, r4
   4673c:	f7ff fcda 	bl	460f4 <atomic_get>
   46740:	f010 0601 	ands.w	r6, r0, #1
   46744:	d10f      	bne.n	46766 <bt_gatt_change_aware+0x42>
	if (!req) {
   46746:	b17f      	cbz	r7, 46768 <bt_gatt_change_aware+0x44>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   46748:	f06f 0102 	mvn.w	r1, #2
   4674c:	4620      	mov	r0, r4
   4674e:	f7ff fd2d 	bl	461ac <atomic_and>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   46752:	f010 0f02 	tst.w	r0, #2
		bt_att_clear_out_of_sync_sent(conn);
   46756:	4628      	mov	r0, r5
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   46758:	d008      	beq.n	4676c <bt_gatt_change_aware+0x48>
		bt_att_clear_out_of_sync_sent(conn);
   4675a:	f7ff fc26 	bl	45faa <bt_att_clear_out_of_sync_sent>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   4675e:	2101      	movs	r1, #1
   46760:	4620      	mov	r0, r4
   46762:	f7ff fccd 	bl	46100 <atomic_or>
		return true;
   46766:	2601      	movs	r6, #1
}
   46768:	4630      	mov	r0, r6
   4676a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   4676c:	f7ff fc1b 	bl	45fa6 <bt_att_fixed_chan_only>
   46770:	2800      	cmp	r0, #0
   46772:	d0f9      	beq.n	46768 <bt_gatt_change_aware+0x44>
   46774:	4628      	mov	r0, r5
   46776:	f7ff fc31 	bl	45fdc <bt_att_out_of_sync_sent_on_fixed>
   4677a:	2800      	cmp	r0, #0
   4677c:	d0f4      	beq.n	46768 <bt_gatt_change_aware+0x44>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   4677e:	f06f 0102 	mvn.w	r1, #2
   46782:	4620      	mov	r0, r4
   46784:	f7ff fd12 	bl	461ac <atomic_and>
		bt_att_clear_out_of_sync_sent(conn);
   46788:	4628      	mov	r0, r5
   4678a:	e7e6      	b.n	4675a <bt_gatt_change_aware+0x36>

0004678c <ccc_delayed_store>:
{
   4678c:	b570      	push	{r4, r5, r6, lr}
		struct bt_conn *conn = ccc_store->conn_list[i];
   4678e:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   46792:	4605      	mov	r5, r0
		if (!conn) {
   46794:	b184      	cbz	r4, 467b8 <ccc_delayed_store+0x2c>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   46796:	f104 0688 	add.w	r6, r4, #136	; 0x88
   4679a:	7a20      	ldrb	r0, [r4, #8]
   4679c:	4631      	mov	r1, r6
   4679e:	f7fe f9ed 	bl	44b7c <bt_addr_le_is_bonded>
   467a2:	b148      	cbz	r0, 467b8 <ccc_delayed_store+0x2c>
			ccc_store->conn_list[i] = NULL;
   467a4:	2300      	movs	r3, #0
   467a6:	f845 3c08 	str.w	r3, [r5, #-8]
			bt_gatt_store_ccc(conn->id, &conn->le.dst);
   467aa:	7a20      	ldrb	r0, [r4, #8]
   467ac:	4631      	mov	r1, r6
   467ae:	f7e8 fb3f 	bl	2ee30 <bt_gatt_store_ccc>
			bt_conn_unref(conn);
   467b2:	4620      	mov	r0, r4
   467b4:	f7fe fced 	bl	45192 <bt_conn_unref>
}
   467b8:	bd70      	pop	{r4, r5, r6, pc}

000467ba <sys_memcpy_swap>:
	psrc += length - 1;
   467ba:	1e53      	subs	r3, r2, #1
   467bc:	4419      	add	r1, r3
	for (; length > 0; length--) {
   467be:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   467c0:	f811 3901 	ldrb.w	r3, [r1], #-1
   467c4:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   467c8:	4290      	cmp	r0, r2
   467ca:	d1f9      	bne.n	467c0 <sys_memcpy_swap+0x6>
}
   467cc:	4770      	bx	lr

000467ce <smp_encrypt_info>:
}
   467ce:	2007      	movs	r0, #7
   467d0:	4770      	bx	lr

000467d2 <smp_chan_get>:
{
   467d2:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   467d4:	2106      	movs	r1, #6
   467d6:	f7fe fe74 	bl	454c2 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   467da:	b100      	cbz	r0, 467de <smp_chan_get+0xc>
	return CONTAINER_OF(chan, struct bt_smp, chan);
   467dc:	38ec      	subs	r0, #236	; 0xec
}
   467de:	bd08      	pop	{r3, pc}

000467e0 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   467e0:	f3bf 8f5b 	dmb	ish
   467e4:	6800      	ldr	r0, [r0, #0]
   467e6:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   467ea:	4108      	asrs	r0, r1
}
   467ec:	f000 0001 	and.w	r0, r0, #1
   467f0:	4770      	bx	lr

000467f2 <update_keys_check>:
{
   467f2:	b510      	push	{r4, lr}
   467f4:	4603      	mov	r3, r0
	if (!keys ||
   467f6:	b1d9      	cbz	r1, 46830 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   467f8:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   467fa:	f010 0f24 	tst.w	r0, #36	; 0x24
   467fe:	d017      	beq.n	46830 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   46800:	7d1a      	ldrb	r2, [r3, #20]
   46802:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   46804:	7b09      	ldrb	r1, [r1, #12]
   46806:	42a2      	cmp	r2, r4
   46808:	bf28      	it	cs
   4680a:	4622      	movcs	r2, r4
   4680c:	4291      	cmp	r1, r2
   4680e:	d901      	bls.n	46814 <update_keys_check+0x22>
		return false;
   46810:	2000      	movs	r0, #0
}
   46812:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   46814:	0682      	lsls	r2, r0, #26
   46816:	d404      	bmi.n	46822 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   46818:	7a18      	ldrb	r0, [r3, #8]
   4681a:	3800      	subs	r0, #0
   4681c:	bf18      	it	ne
   4681e:	2001      	movne	r0, #1
   46820:	e7f7      	b.n	46812 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   46822:	2105      	movs	r1, #5
   46824:	1d18      	adds	r0, r3, #4
   46826:	f7ff ffdb 	bl	467e0 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   4682a:	2800      	cmp	r0, #0
   4682c:	d1f4      	bne.n	46818 <update_keys_check+0x26>
   4682e:	e7ef      	b.n	46810 <update_keys_check+0x1e>
	return true;
   46830:	2001      	movs	r0, #1
   46832:	e7ee      	b.n	46812 <update_keys_check+0x20>

00046834 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   46834:	2301      	movs	r3, #1
   46836:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   46838:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   4683a:	f3bf 8f5b 	dmb	ish
   4683e:	e850 2f00 	ldrex	r2, [r0]
   46842:	401a      	ands	r2, r3
   46844:	e840 2100 	strex	r1, r2, [r0]
   46848:	2900      	cmp	r1, #0
   4684a:	d1f8      	bne.n	4683e <atomic_clear_bit+0xa>
   4684c:	f3bf 8f5b 	dmb	ish
}
   46850:	4770      	bx	lr

00046852 <bt_smp_aes_cmac>:
{
   46852:	b570      	push	{r4, r5, r6, lr}
   46854:	b0c2      	sub	sp, #264	; 0x108
   46856:	460d      	mov	r5, r1
   46858:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   4685a:	4601      	mov	r1, r0
   4685c:	aa16      	add	r2, sp, #88	; 0x58
   4685e:	4668      	mov	r0, sp
{
   46860:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   46862:	f7fd fb35 	bl	43ed0 <tc_cmac_setup>
   46866:	b918      	cbnz	r0, 46870 <bt_smp_aes_cmac+0x1e>
		return -EIO;
   46868:	f06f 0004 	mvn.w	r0, #4
}
   4686c:	b042      	add	sp, #264	; 0x108
   4686e:	bd70      	pop	{r4, r5, r6, pc}
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   46870:	4632      	mov	r2, r6
   46872:	4629      	mov	r1, r5
   46874:	4668      	mov	r0, sp
   46876:	f7fd fb56 	bl	43f26 <tc_cmac_update>
   4687a:	2800      	cmp	r0, #0
   4687c:	d0f4      	beq.n	46868 <bt_smp_aes_cmac+0x16>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   4687e:	4669      	mov	r1, sp
   46880:	4620      	mov	r0, r4
   46882:	f7fd fbba 	bl	43ffa <tc_cmac_final>
   46886:	2800      	cmp	r0, #0
   46888:	d0ee      	beq.n	46868 <bt_smp_aes_cmac+0x16>
	return 0;
   4688a:	2000      	movs	r0, #0
   4688c:	e7ee      	b.n	4686c <bt_smp_aes_cmac+0x1a>

0004688e <smp_security_request>:
static uint8_t smp_security_request(struct bt_smp *smp, struct net_buf *buf)
   4688e:	2007      	movs	r0, #7
   46890:	4770      	bx	lr

00046892 <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   46892:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   46894:	2300      	movs	r3, #0
   46896:	9300      	str	r3, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   46898:	4604      	mov	r4, r0
   4689a:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   4689c:	460a      	mov	r2, r1
   4689e:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   468a2:	2106      	movs	r1, #6
   468a4:	f7fe fdc3 	bl	4542e <bt_l2cap_send_cb>
   468a8:	b128      	cbz	r0, 468b6 <smp_send.constprop.0+0x24>
		net_buf_unref(buf);
   468aa:	4628      	mov	r0, r5
}
   468ac:	b003      	add	sp, #12
   468ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   468b2:	f7f5 bd2d 	b.w	3c310 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   468b6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   468ba:	2300      	movs	r3, #0
   468bc:	f504 70bc 	add.w	r0, r4, #376	; 0x178
}
   468c0:	b003      	add	sp, #12
   468c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   468c6:	f7fa bb89 	b.w	40fdc <k_work_reschedule>

000468ca <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   468ca:	b510      	push	{r4, lr}
   468cc:	1e43      	subs	r3, r0, #1
   468ce:	f100 0210 	add.w	r2, r0, #16
   468d2:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   468d4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   468d8:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   468dc:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   468de:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   468e0:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   468e2:	d1f7      	bne.n	468d4 <sys_mem_swap.constprop.0+0xa>
	}
}
   468e4:	bd10      	pop	{r4, pc}

000468e6 <smp_f6>:
{
   468e6:	b5f0      	push	{r4, r5, r6, r7, lr}
   468e8:	b097      	sub	sp, #92	; 0x5c
   468ea:	4605      	mov	r5, r0
   468ec:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   468ee:	a805      	add	r0, sp, #20
   468f0:	2210      	movs	r2, #16
{
   468f2:	461c      	mov	r4, r3
   468f4:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   468f6:	f7ff ff60 	bl	467ba <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   468fa:	2210      	movs	r2, #16
   468fc:	4631      	mov	r1, r6
   468fe:	a809      	add	r0, sp, #36	; 0x24
   46900:	f7ff ff5b 	bl	467ba <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   46904:	4621      	mov	r1, r4
   46906:	2210      	movs	r2, #16
   46908:	a80d      	add	r0, sp, #52	; 0x34
   4690a:	f7ff ff56 	bl	467ba <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   4690e:	991c      	ldr	r1, [sp, #112]	; 0x70
   46910:	2203      	movs	r2, #3
   46912:	a811      	add	r0, sp, #68	; 0x44
   46914:	f7ff ff51 	bl	467ba <sys_memcpy_swap>
	m[51] = a1->type;
   46918:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   4691a:	f814 3b01 	ldrb.w	r3, [r4], #1
   4691e:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   46922:	4621      	mov	r1, r4
   46924:	2206      	movs	r2, #6
   46926:	a812      	add	r0, sp, #72	; 0x48
   46928:	f7fd fcf6 	bl	44318 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   4692c:	4621      	mov	r1, r4
   4692e:	2206      	movs	r2, #6
   46930:	a812      	add	r0, sp, #72	; 0x48
   46932:	f7ff ff42 	bl	467ba <sys_memcpy_swap>
	m[58] = a2->type;
   46936:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   46938:	f814 3b01 	ldrb.w	r3, [r4], #1
   4693c:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   46940:	4621      	mov	r1, r4
   46942:	2206      	movs	r2, #6
   46944:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   46948:	f7fd fce6 	bl	44318 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   4694c:	4621      	mov	r1, r4
   4694e:	2206      	movs	r2, #6
   46950:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   46954:	f7ff ff31 	bl	467ba <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   46958:	2210      	movs	r2, #16
   4695a:	4629      	mov	r1, r5
   4695c:	a801      	add	r0, sp, #4
   4695e:	f7ff ff2c 	bl	467ba <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   46962:	463b      	mov	r3, r7
   46964:	2241      	movs	r2, #65	; 0x41
   46966:	a905      	add	r1, sp, #20
   46968:	a801      	add	r0, sp, #4
   4696a:	f7ff ff72 	bl	46852 <bt_smp_aes_cmac>
	if (err) {
   4696e:	4604      	mov	r4, r0
   46970:	b910      	cbnz	r0, 46978 <smp_f6+0x92>
	sys_mem_swap(check, 16);
   46972:	4638      	mov	r0, r7
   46974:	f7ff ffa9 	bl	468ca <sys_mem_swap.constprop.0>
}
   46978:	4620      	mov	r0, r4
   4697a:	b017      	add	sp, #92	; 0x5c
   4697c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0004697e <smp_f4>:
{
   4697e:	b5f0      	push	{r4, r5, r6, r7, lr}
   46980:	b097      	sub	sp, #92	; 0x5c
   46982:	4614      	mov	r4, r2
   46984:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   46986:	2220      	movs	r2, #32
   46988:	4601      	mov	r1, r0
   4698a:	a805      	add	r0, sp, #20
{
   4698c:	461d      	mov	r5, r3
   4698e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   46990:	f7ff ff13 	bl	467ba <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   46994:	2220      	movs	r2, #32
   46996:	4631      	mov	r1, r6
   46998:	a80d      	add	r0, sp, #52	; 0x34
   4699a:	f7ff ff0e 	bl	467ba <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   4699e:	4621      	mov	r1, r4
   469a0:	2210      	movs	r2, #16
   469a2:	a801      	add	r0, sp, #4
	m[64] = z;
   469a4:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   469a8:	f7ff ff07 	bl	467ba <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   469ac:	463b      	mov	r3, r7
   469ae:	2241      	movs	r2, #65	; 0x41
   469b0:	a905      	add	r1, sp, #20
   469b2:	a801      	add	r0, sp, #4
   469b4:	f7ff ff4d 	bl	46852 <bt_smp_aes_cmac>
	if (err) {
   469b8:	4604      	mov	r4, r0
   469ba:	b910      	cbnz	r0, 469c2 <smp_f4+0x44>
	sys_mem_swap(res, 16);
   469bc:	4638      	mov	r0, r7
   469be:	f7ff ff84 	bl	468ca <sys_mem_swap.constprop.0>
}
   469c2:	4620      	mov	r0, r4
   469c4:	b017      	add	sp, #92	; 0x5c
   469c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000469c8 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   469c8:	2301      	movs	r3, #1
   469ca:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   469cc:	f3bf 8f5b 	dmb	ish
   469d0:	e850 2f00 	ldrex	r2, [r0]
   469d4:	431a      	orrs	r2, r3
   469d6:	e840 2100 	strex	r1, r2, [r0]
   469da:	2900      	cmp	r1, #0
   469dc:	d1f8      	bne.n	469d0 <atomic_set_bit+0x8>
   469de:	f3bf 8f5b 	dmb	ish
}
   469e2:	4770      	bx	lr

000469e4 <smp_keypress_notif>:
{
   469e4:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   469e6:	210e      	movs	r1, #14
   469e8:	f7ff ffee 	bl	469c8 <atomic_set_bit>
}
   469ec:	2000      	movs	r0, #0
   469ee:	bd08      	pop	{r3, pc}

000469f0 <smp_ident_info>:
{
   469f0:	b538      	push	{r3, r4, r5, lr}
   469f2:	4604      	mov	r4, r0
   469f4:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   469f6:	3004      	adds	r0, #4
   469f8:	210d      	movs	r1, #13
   469fa:	f7ff fef1 	bl	467e0 <atomic_test_bit>
   469fe:	b170      	cbz	r0, 46a1e <smp_ident_info+0x2e>
		struct bt_smp_ident_info *req = (void *)buf->data;
   46a00:	689d      	ldr	r5, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   46a02:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   46a06:	2002      	movs	r0, #2
   46a08:	7a19      	ldrb	r1, [r3, #8]
   46a0a:	f103 0288 	add.w	r2, r3, #136	; 0x88
   46a0e:	f000 fb26 	bl	4705e <bt_keys_get_type>
		if (!keys) {
   46a12:	b150      	cbz	r0, 46a2a <smp_ident_info+0x3a>
		memcpy(keys->irk.val, req->irk, 16);
   46a14:	2210      	movs	r2, #16
   46a16:	4629      	mov	r1, r5
   46a18:	302a      	adds	r0, #42	; 0x2a
   46a1a:	f7fd fc7d 	bl	44318 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   46a1e:	4620      	mov	r0, r4
   46a20:	2109      	movs	r1, #9
   46a22:	f7ff ffd1 	bl	469c8 <atomic_set_bit>
	return 0;
   46a26:	2000      	movs	r0, #0
}
   46a28:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   46a2a:	2008      	movs	r0, #8
   46a2c:	e7fc      	b.n	46a28 <smp_ident_info+0x38>

00046a2e <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   46a2e:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   46a30:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   46a32:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   46a34:	4628      	mov	r0, r5
   46a36:	2104      	movs	r1, #4
   46a38:	f7ff fed2 	bl	467e0 <atomic_test_bit>
   46a3c:	b168      	cbz	r0, 46a5a <smp_create_pdu.constprop.0+0x2c>
		timeout = K_NO_WAIT;
   46a3e:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   46a40:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   46a42:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   46a44:	4608      	mov	r0, r1
   46a46:	f7fe fcef 	bl	45428 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   46a4a:	4604      	mov	r4, r0
   46a4c:	b940      	cbnz	r0, 46a60 <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   46a4e:	2104      	movs	r1, #4
   46a50:	4628      	mov	r0, r5
   46a52:	f7ff ffb9 	bl	469c8 <atomic_set_bit>
}
   46a56:	4620      	mov	r0, r4
   46a58:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   46a5a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   46a5e:	e7ef      	b.n	46a40 <smp_create_pdu.constprop.0+0x12>
   46a60:	2101      	movs	r1, #1
   46a62:	3008      	adds	r0, #8
   46a64:	f000 fbb3 	bl	471ce <net_buf_simple_add>
	hdr->code = op;
   46a68:	7006      	strb	r6, [r0, #0]
	return buf;
   46a6a:	e7f4      	b.n	46a56 <smp_create_pdu.constprop.0+0x28>

00046a6c <smp_send_pairing_random>:
{
   46a6c:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   46a6e:	2104      	movs	r1, #4
{
   46a70:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   46a72:	f7ff ffdc 	bl	46a2e <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   46a76:	4604      	mov	r4, r0
   46a78:	b170      	cbz	r0, 46a98 <smp_send_pairing_random+0x2c>
   46a7a:	2110      	movs	r1, #16
   46a7c:	3008      	adds	r0, #8
   46a7e:	f000 fba6 	bl	471ce <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   46a82:	2210      	movs	r2, #16
   46a84:	f105 0127 	add.w	r1, r5, #39	; 0x27
   46a88:	f7fd fc46 	bl	44318 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   46a8c:	4628      	mov	r0, r5
   46a8e:	4621      	mov	r1, r4
   46a90:	f7ff feff 	bl	46892 <smp_send.constprop.0>
	return 0;
   46a94:	2000      	movs	r0, #0
}
   46a96:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   46a98:	2008      	movs	r0, #8
   46a9a:	e7fc      	b.n	46a96 <smp_send_pairing_random+0x2a>

00046a9c <smp_dhkey_check>:
{
   46a9c:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   46a9e:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   46aa2:	78db      	ldrb	r3, [r3, #3]
   46aa4:	2b01      	cmp	r3, #1
{
   46aa6:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   46aa8:	d114      	bne.n	46ad4 <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   46aaa:	688e      	ldr	r6, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   46aac:	1d05      	adds	r5, r0, #4
   46aae:	2110      	movs	r1, #16
   46ab0:	4628      	mov	r0, r5
   46ab2:	f7ff febf 	bl	46834 <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   46ab6:	4631      	mov	r1, r6
   46ab8:	2210      	movs	r2, #16
   46aba:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   46abe:	f7fd fc2b 	bl	44318 <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   46ac2:	2107      	movs	r1, #7
   46ac4:	4628      	mov	r0, r5
   46ac6:	f7ff fe8b 	bl	467e0 <atomic_test_bit>
   46aca:	b128      	cbz	r0, 46ad8 <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   46acc:	2109      	movs	r1, #9
   46ace:	4628      	mov	r0, r5
   46ad0:	f7ff ff7a 	bl	469c8 <atomic_set_bit>
}
   46ad4:	2000      	movs	r0, #0
   46ad6:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   46ad8:	210a      	movs	r1, #10
   46ada:	4628      	mov	r0, r5
   46adc:	f7ff fe80 	bl	467e0 <atomic_test_bit>
   46ae0:	2800      	cmp	r0, #0
   46ae2:	d1f3      	bne.n	46acc <smp_dhkey_check+0x30>
		return compute_and_check_and_send_periph_dhcheck(smp);
   46ae4:	4620      	mov	r0, r4
}
   46ae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
   46aea:	f7e8 bbd5 	b.w	2f298 <compute_and_check_and_send_periph_dhcheck>

00046aee <smp_pairing_confirm>:
{
   46aee:	b570      	push	{r4, r5, r6, lr}
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   46af0:	1d05      	adds	r5, r0, #4
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   46af2:	688e      	ldr	r6, [r1, #8]
{
   46af4:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   46af6:	210b      	movs	r1, #11
   46af8:	4628      	mov	r0, r5
   46afa:	f7ff fe9b 	bl	46834 <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   46afe:	2210      	movs	r2, #16
   46b00:	4631      	mov	r1, r6
   46b02:	f104 0017 	add.w	r0, r4, #23
   46b06:	f7fd fc07 	bl	44318 <memcpy>
	switch (smp->method) {
   46b0a:	7a23      	ldrb	r3, [r4, #8]
   46b0c:	2b01      	cmp	r3, #1
   46b0e:	d009      	beq.n	46b24 <smp_pairing_confirm+0x36>
   46b10:	2b02      	cmp	r3, #2
   46b12:	d113      	bne.n	46b3c <smp_pairing_confirm+0x4e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   46b14:	4620      	mov	r0, r4
   46b16:	2104      	movs	r1, #4
   46b18:	f7ff ff56 	bl	469c8 <atomic_set_bit>
}
   46b1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   46b20:	f7e8 bca0 	b.w	2f464 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   46b24:	210a      	movs	r1, #10
   46b26:	4628      	mov	r0, r5
   46b28:	f7ff fe5a 	bl	467e0 <atomic_test_bit>
   46b2c:	2800      	cmp	r0, #0
   46b2e:	d0f1      	beq.n	46b14 <smp_pairing_confirm+0x26>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   46b30:	4628      	mov	r0, r5
   46b32:	2100      	movs	r1, #0
   46b34:	f7ff ff48 	bl	469c8 <atomic_set_bit>
			return 0;
   46b38:	2000      	movs	r0, #0
}
   46b3a:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   46b3c:	2008      	movs	r0, #8
   46b3e:	e7fc      	b.n	46b3a <smp_pairing_confirm+0x4c>

00046b40 <smp_central_ident>:
static uint8_t smp_central_ident(struct bt_smp *smp, struct net_buf *buf)
   46b40:	2007      	movs	r0, #7
   46b42:	4770      	bx	lr

00046b44 <smp_pairing_rsp>:
static uint8_t smp_pairing_rsp(struct bt_smp *smp, struct net_buf *buf)
   46b44:	2007      	movs	r0, #7
   46b46:	4770      	bx	lr

00046b48 <smp_signing_info>:
static uint8_t smp_signing_info(struct bt_smp *smp, struct net_buf *buf)
   46b48:	2007      	movs	r0, #7
   46b4a:	4770      	bx	lr

00046b4c <atomic_test_and_clear_bit>:
{
   46b4c:	b530      	push	{r4, r5, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   46b4e:	2301      	movs	r3, #1
   46b50:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   46b54:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   46b56:	f3bf 8f5b 	dmb	ish
   46b5a:	e850 3f00 	ldrex	r3, [r0]
   46b5e:	ea03 0402 	and.w	r4, r3, r2
   46b62:	e840 4500 	strex	r5, r4, [r0]
   46b66:	2d00      	cmp	r5, #0
   46b68:	d1f7      	bne.n	46b5a <atomic_test_and_clear_bit+0xe>
   46b6a:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   46b6e:	4219      	tst	r1, r3
}
   46b70:	bf14      	ite	ne
   46b72:	2001      	movne	r0, #1
   46b74:	2000      	moveq	r0, #0
   46b76:	bd30      	pop	{r4, r5, pc}

00046b78 <smp_reset>:
{
   46b78:	b538      	push	{r3, r4, r5, lr}
   46b7a:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   46b7c:	1d03      	adds	r3, r0, #4
   46b7e:	2500      	movs	r5, #0
   46b80:	f3bf 8f5b 	dmb	ish
   46b84:	e853 2f00 	ldrex	r2, [r3]
   46b88:	e843 5100 	strex	r1, r5, [r3]
   46b8c:	2900      	cmp	r1, #0
   46b8e:	d1f9      	bne.n	46b84 <smp_reset+0xc>
   46b90:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   46b94:	f504 70bc 	add.w	r0, r4, #376	; 0x178
   46b98:	f001 fb8b 	bl	482b2 <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   46b9c:	7225      	strb	r5, [r4, #8]
   46b9e:	f3bf 8f5b 	dmb	ish
   46ba2:	e854 3f00 	ldrex	r3, [r4]
   46ba6:	e844 5200 	strex	r2, r5, [r4]
   46baa:	2a00      	cmp	r2, #0
   46bac:	d1f9      	bne.n	46ba2 <smp_reset+0x2a>
   46bae:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   46bb2:	4620      	mov	r0, r4
   46bb4:	2101      	movs	r1, #1
}
   46bb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   46bba:	f7ff bf05 	b.w	469c8 <atomic_set_bit>

00046bbe <bt_smp_request_ltk>:
{
   46bbe:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   46bc2:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   46bc6:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   46bca:	4604      	mov	r4, r0
   46bcc:	4692      	mov	sl, r2
   46bce:	461f      	mov	r7, r3
	smp = smp_chan_get(conn);
   46bd0:	f7ff fdff 	bl	467d2 <smp_chan_get>
	if (!smp) {
   46bd4:	4605      	mov	r5, r0
   46bd6:	2800      	cmp	r0, #0
   46bd8:	d05a      	beq.n	46c90 <bt_smp_request_ltk+0xd2>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   46bda:	1d06      	adds	r6, r0, #4
	if (ediv == 0U && rand == 0U &&
   46bdc:	f1b9 0f00 	cmp.w	r9, #0
   46be0:	d127      	bne.n	46c32 <bt_smp_request_ltk+0x74>
   46be2:	ea5a 0307 	orrs.w	r3, sl, r7
   46be6:	d124      	bne.n	46c32 <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   46be8:	2103      	movs	r1, #3
   46bea:	4630      	mov	r0, r6
   46bec:	f7ff fdf8 	bl	467e0 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   46bf0:	b3d0      	cbz	r0, 46c68 <bt_smp_request_ltk+0xaa>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   46bf2:	2101      	movs	r1, #1
   46bf4:	4630      	mov	r0, r6
   46bf6:	f7ff fdf3 	bl	467e0 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   46bfa:	b3a8      	cbz	r0, 46c68 <bt_smp_request_ltk+0xaa>
	return MIN(req->max_key_size, rsp->max_key_size);
   46bfc:	7d2c      	ldrb	r4, [r5, #20]
   46bfe:	7b6b      	ldrb	r3, [r5, #13]
   46c00:	429c      	cmp	r4, r3
   46c02:	bf28      	it	cs
   46c04:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   46c06:	4622      	mov	r2, r4
   46c08:	f105 0147 	add.w	r1, r5, #71	; 0x47
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   46c0c:	4640      	mov	r0, r8
   46c0e:	f7fd fb83 	bl	44318 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   46c12:	2c0f      	cmp	r4, #15
   46c14:	d806      	bhi.n	46c24 <bt_smp_request_ltk+0x66>
			(void)memset(ltk + enc_size, 0,
   46c16:	f1c4 0210 	rsb	r2, r4, #16
   46c1a:	2100      	movs	r1, #0
   46c1c:	eb08 0004 	add.w	r0, r8, r4
   46c20:	f7fd fb85 	bl	4432e <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   46c24:	4630      	mov	r0, r6
   46c26:	2101      	movs	r1, #1
   46c28:	f7ff fece 	bl	469c8 <atomic_set_bit>
		return true;
   46c2c:	2001      	movs	r0, #1
}
   46c2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!conn->le.keys) {
   46c32:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   46c36:	b9f3      	cbnz	r3, 46c76 <bt_smp_request_ltk+0xb8>
					     &conn->le.dst);
   46c38:	f104 0b88 	add.w	fp, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   46c3c:	7a21      	ldrb	r1, [r4, #8]
   46c3e:	465a      	mov	r2, fp
   46c40:	2020      	movs	r0, #32
   46c42:	f7e9 f8f5 	bl	2fe30 <bt_keys_find>
   46c46:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   46c4a:	b930      	cbnz	r0, 46c5a <bt_smp_request_ltk+0x9c>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   46c4c:	7a21      	ldrb	r1, [r4, #8]
   46c4e:	465a      	mov	r2, fp
   46c50:	2001      	movs	r0, #1
   46c52:	f7e9 f8ed 	bl	2fe30 <bt_keys_find>
   46c56:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   46c5a:	f1b9 0f00 	cmp.w	r9, #0
   46c5e:	d10a      	bne.n	46c76 <bt_smp_request_ltk+0xb8>
   46c60:	ea5a 0707 	orrs.w	r7, sl, r7
   46c64:	d004      	beq.n	46c70 <bt_smp_request_ltk+0xb2>
   46c66:	e006      	b.n	46c76 <bt_smp_request_ltk+0xb8>
	if (!conn->le.keys) {
   46c68:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   46c6c:	2b00      	cmp	r3, #0
   46c6e:	d0e3      	beq.n	46c38 <bt_smp_request_ltk+0x7a>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   46c70:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   46c74:	b971      	cbnz	r1, 46c94 <bt_smp_request_ltk+0xd6>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   46c76:	210f      	movs	r1, #15
   46c78:	4630      	mov	r0, r6
   46c7a:	f7ff fdb1 	bl	467e0 <atomic_test_bit>
   46c7e:	b120      	cbz	r0, 46c8a <bt_smp_request_ltk+0xcc>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   46c80:	2202      	movs	r2, #2
   46c82:	2106      	movs	r1, #6
   46c84:	4620      	mov	r0, r4
   46c86:	f7e6 f823 	bl	2ccd0 <bt_conn_security_changed>
	smp_reset(smp);
   46c8a:	4628      	mov	r0, r5
   46c8c:	f7ff ff74 	bl	46b78 <smp_reset>
		return false;
   46c90:	2000      	movs	r0, #0
   46c92:	e7cc      	b.n	46c2e <bt_smp_request_ltk+0x70>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   46c94:	89cb      	ldrh	r3, [r1, #14]
   46c96:	069b      	lsls	r3, r3, #26
   46c98:	d5ed      	bpl.n	46c76 <bt_smp_request_ltk+0xb8>
		enc_size = conn->le.keys->enc_size;
   46c9a:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   46c9c:	311a      	adds	r1, #26
   46c9e:	4622      	mov	r2, r4
   46ca0:	e7b4      	b.n	46c0c <bt_smp_request_ltk+0x4e>

00046ca2 <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   46ca2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   46ca6:	4770      	bx	lr

00046ca8 <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   46ca8:	1d03      	adds	r3, r0, #4
{
   46caa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   46cac:	4605      	mov	r5, r0
   46cae:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   46cb0:	4618      	mov	r0, r3
   46cb2:	2103      	movs	r1, #3
   46cb4:	f7ff fd94 	bl	467e0 <atomic_test_bit>
   46cb8:	b1d0      	cbz	r0, 46cf0 <smp_error+0x48>
		smp_pairing_complete(smp, reason);
   46cba:	4631      	mov	r1, r6
   46cbc:	4628      	mov	r0, r5
   46cbe:	f7e8 fee9 	bl	2fa94 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   46cc2:	2105      	movs	r1, #5
   46cc4:	4628      	mov	r0, r5
   46cc6:	f7ff feb2 	bl	46a2e <smp_create_pdu.constprop.0>
	if (!buf) {
   46cca:	4604      	mov	r4, r0
   46ccc:	b308      	cbz	r0, 46d12 <smp_error+0x6a>
   46cce:	2101      	movs	r1, #1
   46cd0:	3008      	adds	r0, #8
   46cd2:	f000 fa7c 	bl	471ce <net_buf_simple_add>
   46cd6:	2300      	movs	r3, #0
	rsp->reason = reason;
   46cd8:	7006      	strb	r6, [r0, #0]
   46cda:	9300      	str	r3, [sp, #0]
   46cdc:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
   46ce0:	4622      	mov	r2, r4
   46ce2:	2106      	movs	r1, #6
   46ce4:	f7fe fba3 	bl	4542e <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   46ce8:	b978      	cbnz	r0, 46d0a <smp_error+0x62>
	return 0;
   46cea:	2000      	movs	r0, #0
}
   46cec:	b002      	add	sp, #8
   46cee:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   46cf0:	2101      	movs	r1, #1
   46cf2:	4618      	mov	r0, r3
   46cf4:	f7ff fd74 	bl	467e0 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   46cf8:	2800      	cmp	r0, #0
   46cfa:	d1de      	bne.n	46cba <smp_error+0x12>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   46cfc:	210f      	movs	r1, #15
   46cfe:	4618      	mov	r0, r3
   46d00:	f7ff fd6e 	bl	467e0 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   46d04:	2800      	cmp	r0, #0
   46d06:	d1d8      	bne.n	46cba <smp_error+0x12>
   46d08:	e7db      	b.n	46cc2 <smp_error+0x1a>
		net_buf_unref(buf);
   46d0a:	4620      	mov	r0, r4
   46d0c:	f7f5 fb00 	bl	3c310 <net_buf_unref>
   46d10:	e7eb      	b.n	46cea <smp_error+0x42>
		return -ENOBUFS;
   46d12:	f06f 0068 	mvn.w	r0, #104	; 0x68
   46d16:	e7e9      	b.n	46cec <smp_error+0x44>

00046d18 <bt_smp_dhkey_ready>:
{
   46d18:	b570      	push	{r4, r5, r6, lr}
   46d1a:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   46d1c:	2008      	movs	r0, #8
   46d1e:	f7e8 f94b 	bl	2efb8 <smp_find>
	if (smp) {
   46d22:	4604      	mov	r4, r0
   46d24:	b1b8      	cbz	r0, 46d56 <bt_smp_dhkey_ready+0x3e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   46d26:	1d05      	adds	r5, r0, #4
   46d28:	2108      	movs	r1, #8
   46d2a:	4628      	mov	r0, r5
   46d2c:	f7ff fd82 	bl	46834 <atomic_clear_bit>
	if (!dhkey) {
   46d30:	b38e      	cbz	r6, 46d96 <bt_smp_dhkey_ready+0x7e>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   46d32:	2107      	movs	r1, #7
   46d34:	f7ff fd7e 	bl	46834 <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, BT_DH_KEY_LEN);
   46d38:	4631      	mov	r1, r6
   46d3a:	2220      	movs	r2, #32
   46d3c:	f104 0097 	add.w	r0, r4, #151	; 0x97
   46d40:	f7fd faea 	bl	44318 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   46d44:	210a      	movs	r1, #10
   46d46:	4628      	mov	r0, r5
   46d48:	f7ff fd4a 	bl	467e0 <atomic_test_bit>
   46d4c:	b168      	cbz	r0, 46d6a <bt_smp_dhkey_ready+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   46d4e:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   46d50:	4628      	mov	r0, r5
   46d52:	f7ff fe39 	bl	469c8 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   46d56:	2007      	movs	r0, #7
   46d58:	f7e8 f92e 	bl	2efb8 <smp_find>
		if (smp) {
   46d5c:	4604      	mov	r4, r0
   46d5e:	b118      	cbz	r0, 46d68 <bt_smp_dhkey_ready+0x50>
			err = smp_dhkey_generate(smp);
   46d60:	f7e8 f9b6 	bl	2f0d0 <smp_dhkey_generate>
			if (err) {
   46d64:	4601      	mov	r1, r0
   46d66:	b990      	cbnz	r0, 46d8e <bt_smp_dhkey_ready+0x76>
}
   46d68:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   46d6a:	2110      	movs	r1, #16
   46d6c:	4628      	mov	r0, r5
   46d6e:	f7ff fd37 	bl	467e0 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   46d72:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   46d74:	2800      	cmp	r0, #0
   46d76:	d1eb      	bne.n	46d50 <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   46d78:	4628      	mov	r0, r5
   46d7a:	f7ff fd31 	bl	467e0 <atomic_test_bit>
   46d7e:	2800      	cmp	r0, #0
   46d80:	d0e9      	beq.n	46d56 <bt_smp_dhkey_ready+0x3e>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   46d82:	4620      	mov	r0, r4
   46d84:	f7e8 fa88 	bl	2f298 <compute_and_check_and_send_periph_dhcheck>
		if (err) {
   46d88:	4601      	mov	r1, r0
   46d8a:	2800      	cmp	r0, #0
   46d8c:	d0e3      	beq.n	46d56 <bt_smp_dhkey_ready+0x3e>
			smp_error(smp, err);
   46d8e:	4620      	mov	r0, r4
   46d90:	f7ff ff8a 	bl	46ca8 <smp_error>
   46d94:	e7df      	b.n	46d56 <bt_smp_dhkey_ready+0x3e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   46d96:	210b      	movs	r1, #11
   46d98:	e7f9      	b.n	46d8e <bt_smp_dhkey_ready+0x76>

00046d9a <smp_ident_addr_info>:
{
   46d9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   46d9e:	688f      	ldr	r7, [r1, #8]
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   46da0:	783b      	ldrb	r3, [r7, #0]
{
   46da2:	4604      	mov	r4, r0
   46da4:	b123      	cbz	r3, 46db0 <smp_ident_addr_info+0x16>
	if (!bt_addr_le_is_identity(&req->addr)) {
   46da6:	79bb      	ldrb	r3, [r7, #6]
   46da8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   46dac:	2bc0      	cmp	r3, #192	; 0xc0
   46dae:	d16a      	bne.n	46e86 <smp_ident_addr_info+0xec>
	struct bt_conn *conn = smp->chan.chan.conn;
   46db0:	f8d4 50ec 	ldr.w	r5, [r4, #236]	; 0xec
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
   46db4:	f105 0888 	add.w	r8, r5, #136	; 0x88
	return memcmp(a, b, sizeof(*a));
   46db8:	2207      	movs	r2, #7
   46dba:	4639      	mov	r1, r7
   46dbc:	4640      	mov	r0, r8
   46dbe:	f7fd fa9b 	bl	442f8 <memcmp>
   46dc2:	b180      	cbz	r0, 46de6 <smp_ident_addr_info+0x4c>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   46dc4:	7a28      	ldrb	r0, [r5, #8]
   46dc6:	4639      	mov	r1, r7
   46dc8:	f7e9 f89a 	bl	2ff00 <bt_keys_find_addr>
		if (keys) {
   46dcc:	4606      	mov	r6, r0
   46dce:	b150      	cbz	r0, 46de6 <smp_ident_addr_info+0x4c>
			if (!update_keys_check(smp, keys)) {
   46dd0:	4601      	mov	r1, r0
   46dd2:	4620      	mov	r0, r4
   46dd4:	f7ff fd0d 	bl	467f2 <update_keys_check>
   46dd8:	b910      	cbnz	r0, 46de0 <smp_ident_addr_info+0x46>
				return BT_SMP_ERR_UNSPECIFIED;
   46dda:	2008      	movs	r0, #8
}
   46ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bt_keys_clear(keys);
   46de0:	4630      	mov	r0, r6
   46de2:	f7e9 f89d 	bl	2ff20 <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   46de6:	210d      	movs	r1, #13
   46de8:	1d20      	adds	r0, r4, #4
   46dea:	f7ff fcf9 	bl	467e0 <atomic_test_bit>
   46dee:	b390      	cbz	r0, 46e56 <smp_ident_addr_info+0xbc>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   46df0:	7a29      	ldrb	r1, [r5, #8]
   46df2:	4642      	mov	r2, r8
   46df4:	2002      	movs	r0, #2
   46df6:	f000 f932 	bl	4705e <bt_keys_get_type>
		if (!keys) {
   46dfa:	4606      	mov	r6, r0
   46dfc:	2800      	cmp	r0, #0
   46dfe:	d0ec      	beq.n	46dda <smp_ident_addr_info+0x40>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   46e00:	78eb      	ldrb	r3, [r5, #3]
   46e02:	bbcb      	cbnz	r3, 46e78 <smp_ident_addr_info+0xde>
			dst = &conn->le.resp_addr;
   46e04:	f105 0196 	add.w	r1, r5, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   46e08:	780b      	ldrb	r3, [r1, #0]
   46e0a:	2b01      	cmp	r3, #1
   46e0c:	d120      	bne.n	46e50 <smp_ident_addr_info+0xb6>
		if (bt_addr_le_is_rpa(dst)) {
   46e0e:	798b      	ldrb	r3, [r1, #6]
   46e10:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   46e14:	2b40      	cmp	r3, #64	; 0x40
   46e16:	d11b      	bne.n	46e50 <smp_ident_addr_info+0xb6>
	memcpy(dst, src, sizeof(*dst));
   46e18:	2206      	movs	r2, #6
   46e1a:	3101      	adds	r1, #1
   46e1c:	f106 003a 	add.w	r0, r6, #58	; 0x3a
   46e20:	f7fd fa7a 	bl	44318 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   46e24:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
   46e28:	b193      	cbz	r3, 46e50 <smp_ident_addr_info+0xb6>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   46e2a:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
   46e2e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   46e32:	2bc0      	cmp	r3, #192	; 0xc0
   46e34:	d00c      	beq.n	46e50 <smp_ident_addr_info+0xb6>
	memcpy(dst, src, sizeof(*dst));
   46e36:	2207      	movs	r2, #7
   46e38:	4639      	mov	r1, r7
   46e3a:	1c70      	adds	r0, r6, #1
   46e3c:	f7fd fa6c 	bl	44318 <memcpy>
   46e40:	2207      	movs	r2, #7
   46e42:	4639      	mov	r1, r7
   46e44:	4640      	mov	r0, r8
   46e46:	f7fd fa67 	bl	44318 <memcpy>
				bt_conn_identity_resolved(conn);
   46e4a:	4628      	mov	r0, r5
   46e4c:	f7e5 ff12 	bl	2cc74 <bt_conn_identity_resolved>
		bt_id_add(keys);
   46e50:	4630      	mov	r0, r6
   46e52:	f7e4 fe37 	bl	2bac4 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   46e56:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   46e5a:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   46e5e:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   46e60:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   46e64:	d503      	bpl.n	46e6e <smp_ident_addr_info+0xd4>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   46e66:	210a      	movs	r1, #10
   46e68:	4620      	mov	r0, r4
   46e6a:	f7ff fdad 	bl	469c8 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   46e6e:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   46e72:	b121      	cbz	r1, 46e7e <smp_ident_addr_info+0xe4>
	return 0;
   46e74:	2000      	movs	r0, #0
   46e76:	e7b1      	b.n	46ddc <smp_ident_addr_info+0x42>
			dst = &conn->le.init_addr;
   46e78:	f105 018f 	add.w	r1, r5, #143	; 0x8f
   46e7c:	e7c4      	b.n	46e08 <smp_ident_addr_info+0x6e>
		smp_pairing_complete(smp, 0);
   46e7e:	4620      	mov	r0, r4
   46e80:	f7e8 fe08 	bl	2fa94 <smp_pairing_complete>
   46e84:	e7f6      	b.n	46e74 <smp_ident_addr_info+0xda>
		return BT_SMP_ERR_INVALID_PARAMS;
   46e86:	200a      	movs	r0, #10
   46e88:	e7a8      	b.n	46ddc <smp_ident_addr_info+0x42>

00046e8a <smp_pairing_failed>:
{
   46e8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   46e8e:	460e      	mov	r6, r1
   46e90:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   46e92:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   46e96:	f7e8 f89d 	bl	2efd4 <latch_auth_cb>
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   46e9a:	68b7      	ldr	r7, [r6, #8]
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   46e9c:	1d26      	adds	r6, r4, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   46e9e:	4605      	mov	r5, r0
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   46ea0:	210a      	movs	r1, #10
   46ea2:	4630      	mov	r0, r6
   46ea4:	f7ff fe52 	bl	46b4c <atomic_test_and_clear_bit>
   46ea8:	b138      	cbz	r0, 46eba <smp_pairing_failed+0x30>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   46eaa:	b96d      	cbnz	r5, 46ec8 <smp_pairing_failed+0x3e>
	smp_pairing_complete(smp, req->reason);
   46eac:	4620      	mov	r0, r4
   46eae:	7839      	ldrb	r1, [r7, #0]
   46eb0:	f7e8 fdf0 	bl	2fa94 <smp_pairing_complete>
}
   46eb4:	2000      	movs	r0, #0
   46eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   46eba:	210b      	movs	r1, #11
   46ebc:	4630      	mov	r0, r6
   46ebe:	f7ff fe45 	bl	46b4c <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   46ec2:	2800      	cmp	r0, #0
   46ec4:	d1f1      	bne.n	46eaa <smp_pairing_failed+0x20>
   46ec6:	e7f1      	b.n	46eac <smp_pairing_failed+0x22>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   46ec8:	696b      	ldr	r3, [r5, #20]
   46eca:	2b00      	cmp	r3, #0
   46ecc:	d0ee      	beq.n	46eac <smp_pairing_failed+0x22>
			smp_auth_cb->cancel(conn);
   46ece:	4640      	mov	r0, r8
   46ed0:	4798      	blx	r3
   46ed2:	e7eb      	b.n	46eac <smp_pairing_failed+0x22>

00046ed4 <bt_smp_disconnected>:
{
   46ed4:	b570      	push	{r4, r5, r6, lr}
   46ed6:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   46ed8:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   46edc:	f850 3b8c 	ldr.w	r3, [r0], #140
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   46ee0:	3ce8      	subs	r4, #232	; 0xe8
	struct bt_keys *keys = chan->conn->le.keys;
   46ee2:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	(void)k_work_cancel_delayable(&smp->work);
   46ee6:	f001 f9e4 	bl	482b2 <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   46eea:	2103      	movs	r1, #3
   46eec:	4620      	mov	r0, r4
   46eee:	f7ff fc77 	bl	467e0 <atomic_test_bit>
   46ef2:	b1a0      	cbz	r0, 46f1e <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   46ef4:	2108      	movs	r1, #8
   46ef6:	4630      	mov	r0, r6
   46ef8:	f7e8 fdcc 	bl	2fa94 <smp_pairing_complete>
	if (keys) {
   46efc:	b13d      	cbz	r5, 46f0e <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   46efe:	89eb      	ldrh	r3, [r5, #14]
   46f00:	b113      	cbz	r3, 46f08 <bt_smp_disconnected+0x34>
   46f02:	7b6b      	ldrb	r3, [r5, #13]
   46f04:	079b      	lsls	r3, r3, #30
   46f06:	d502      	bpl.n	46f0e <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   46f08:	4628      	mov	r0, r5
   46f0a:	f7e9 f809 	bl	2ff20 <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   46f0e:	4630      	mov	r0, r6
   46f10:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
}
   46f14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(smp, 0, sizeof(*smp));
   46f18:	2100      	movs	r1, #0
   46f1a:	f7fd ba08 	b.w	4432e <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   46f1e:	2101      	movs	r1, #1
   46f20:	4620      	mov	r0, r4
   46f22:	f7ff fc5d 	bl	467e0 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   46f26:	2800      	cmp	r0, #0
   46f28:	d1e4      	bne.n	46ef4 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   46f2a:	210f      	movs	r1, #15
   46f2c:	4620      	mov	r0, r4
   46f2e:	f7ff fc57 	bl	467e0 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   46f32:	2800      	cmp	r0, #0
   46f34:	d1de      	bne.n	46ef4 <bt_smp_disconnected+0x20>
   46f36:	e7e1      	b.n	46efc <bt_smp_disconnected+0x28>

00046f38 <smp_timeout>:
{
   46f38:	b510      	push	{r4, lr}
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   46f3a:	2108      	movs	r1, #8
{
   46f3c:	4604      	mov	r4, r0
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   46f3e:	f5a0 70bc 	sub.w	r0, r0, #376	; 0x178
   46f42:	f7e8 fda7 	bl	2fa94 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   46f46:	f5a4 70ba 	sub.w	r0, r4, #372	; 0x174
   46f4a:	2104      	movs	r1, #4
}
   46f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   46f50:	f7ff bd3a 	b.w	469c8 <atomic_set_bit>

00046f54 <bt_smp_update_keys>:
{
   46f54:	b570      	push	{r4, r5, r6, lr}
   46f56:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   46f58:	f7ff fc3b 	bl	467d2 <smp_chan_get>
	if (!smp) {
   46f5c:	4605      	mov	r5, r0
   46f5e:	2800      	cmp	r0, #0
   46f60:	d07a      	beq.n	47058 <bt_smp_update_keys+0x104>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   46f62:	1d06      	adds	r6, r0, #4
   46f64:	2103      	movs	r1, #3
   46f66:	4630      	mov	r0, r6
   46f68:	f7ff fc3a 	bl	467e0 <atomic_test_bit>
   46f6c:	2800      	cmp	r0, #0
   46f6e:	d073      	beq.n	47058 <bt_smp_update_keys+0x104>
	if (conn->le.keys) {
   46f70:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   46f74:	b108      	cbz	r0, 46f7a <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   46f76:	f7e8 ffd3 	bl	2ff20 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   46f7a:	7a20      	ldrb	r0, [r4, #8]
   46f7c:	f104 0188 	add.w	r1, r4, #136	; 0x88
   46f80:	f7e8 fefa 	bl	2fd78 <bt_keys_get_addr>
   46f84:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   46f88:	b928      	cbnz	r0, 46f96 <bt_smp_update_keys+0x42>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   46f8a:	4628      	mov	r0, r5
   46f8c:	2108      	movs	r1, #8
}
   46f8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   46f92:	f7ff be89 	b.w	46ca8 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   46f96:	210e      	movs	r1, #14
   46f98:	4630      	mov	r0, r6
   46f9a:	f7ff fc21 	bl	467e0 <atomic_test_bit>
   46f9e:	b128      	cbz	r0, 46fac <bt_smp_update_keys+0x58>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   46fa0:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   46fa4:	7b53      	ldrb	r3, [r2, #13]
   46fa6:	f043 0302 	orr.w	r3, r3, #2
   46faa:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   46fac:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_OOB;
   46fae:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	switch (smp->method) {
   46fb2:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_OOB;
   46fb4:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   46fb6:	d83c      	bhi.n	47032 <bt_smp_update_keys+0xde>
   46fb8:	2a00      	cmp	r2, #0
   46fba:	d041      	beq.n	47040 <bt_smp_update_keys+0xec>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   46fbc:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   46fc0:	7b53      	ldrb	r3, [r2, #13]
   46fc2:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   46fc6:	7353      	strb	r3, [r2, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   46fc8:	7b6b      	ldrb	r3, [r5, #13]
   46fca:	7d29      	ldrb	r1, [r5, #20]
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   46fcc:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
	return MIN(req->max_key_size, rsp->max_key_size);
   46fd0:	428b      	cmp	r3, r1
   46fd2:	bf28      	it	cs
   46fd4:	460b      	movcs	r3, r1
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   46fd6:	7313      	strb	r3, [r2, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   46fd8:	2105      	movs	r1, #5
   46fda:	4630      	mov	r0, r6
   46fdc:	f7ff fc00 	bl	467e0 <atomic_test_bit>
   46fe0:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
   46fe4:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   46fe6:	b3a0      	cbz	r0, 47052 <bt_smp_update_keys+0xfe>
		conn->le.keys->flags |= BT_KEYS_SC;
   46fe8:	f042 0210 	orr.w	r2, r2, #16
   46fec:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   46fee:	210d      	movs	r1, #13
   46ff0:	4630      	mov	r0, r6
   46ff2:	f7ff fbf5 	bl	467e0 <atomic_test_bit>
   46ff6:	b378      	cbz	r0, 47058 <bt_smp_update_keys+0x104>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   46ff8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   46ffc:	2120      	movs	r1, #32
   46ffe:	f000 f83e 	bl	4707e <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   47002:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   47006:	f105 0147 	add.w	r1, r5, #71	; 0x47
   4700a:	2210      	movs	r2, #16
   4700c:	301a      	adds	r0, #26
   4700e:	f7fd f983 	bl	44318 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   47012:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   47016:	2208      	movs	r2, #8
   47018:	2100      	movs	r1, #0
   4701a:	3010      	adds	r0, #16
   4701c:	f7fd f987 	bl	4432e <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   47020:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   47024:	2202      	movs	r2, #2
}
   47026:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   4702a:	2100      	movs	r1, #0
   4702c:	3018      	adds	r0, #24
   4702e:	f7fd b97e 	b.w	4432e <memset>
	switch (smp->method) {
   47032:	3a05      	subs	r2, #5
   47034:	2a01      	cmp	r2, #1
   47036:	d803      	bhi.n	47040 <bt_smp_update_keys+0xec>
		conn->le.keys->flags |= BT_KEYS_OOB;
   47038:	f043 0320 	orr.w	r3, r3, #32
   4703c:	734b      	strb	r3, [r1, #13]
   4703e:	e7bd      	b.n	46fbc <bt_smp_update_keys+0x68>
		conn->le.keys->flags &= ~BT_KEYS_OOB;
   47040:	f023 0320 	bic.w	r3, r3, #32
   47044:	734b      	strb	r3, [r1, #13]
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   47046:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   4704a:	7b53      	ldrb	r3, [r2, #13]
   4704c:	f023 0301 	bic.w	r3, r3, #1
   47050:	e7b9      	b.n	46fc6 <bt_smp_update_keys+0x72>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   47052:	f022 0210 	bic.w	r2, r2, #16
   47056:	735a      	strb	r2, [r3, #13]
}
   47058:	bd70      	pop	{r4, r5, r6, pc}

0004705a <id_add>:
	bt_id_add(keys);
   4705a:	f7e4 bd33 	b.w	2bac4 <bt_id_add>

0004705e <bt_keys_get_type>:
{
   4705e:	b570      	push	{r4, r5, r6, lr}
   47060:	4604      	mov	r4, r0
   47062:	460d      	mov	r5, r1
   47064:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   47066:	f7e8 fee3 	bl	2fe30 <bt_keys_find>
	if (keys) {
   4706a:	b938      	cbnz	r0, 4707c <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   4706c:	4631      	mov	r1, r6
   4706e:	4628      	mov	r0, r5
   47070:	f7e8 fe82 	bl	2fd78 <bt_keys_get_addr>
	if (!keys) {
   47074:	b110      	cbz	r0, 4707c <bt_keys_get_type+0x1e>
	keys->keys |= type;
   47076:	89c3      	ldrh	r3, [r0, #14]
   47078:	431c      	orrs	r4, r3
   4707a:	81c4      	strh	r4, [r0, #14]
}
   4707c:	bd70      	pop	{r4, r5, r6, pc}

0004707e <bt_keys_add_type>:
	keys->keys |= type;
   4707e:	89c3      	ldrh	r3, [r0, #14]
   47080:	4319      	orrs	r1, r3
   47082:	81c1      	strh	r1, [r0, #14]
}
   47084:	4770      	bx	lr

00047086 <keys_set>:
{
   47086:	b570      	push	{r4, r5, r6, lr}
   47088:	4606      	mov	r6, r0
   4708a:	b090      	sub	sp, #64	; 0x40
   4708c:	4614      	mov	r4, r2
   4708e:	4618      	mov	r0, r3
	if (!name) {
   47090:	b326      	cbz	r6, 470dc <keys_set+0x56>
	len = read_cb(cb_arg, val, sizeof(val));
   47092:	2234      	movs	r2, #52	; 0x34
   47094:	a903      	add	r1, sp, #12
   47096:	47a0      	blx	r4
	if (len < 0) {
   47098:	1e04      	subs	r4, r0, #0
   4709a:	db1f      	blt.n	470dc <keys_set+0x56>
	err = bt_settings_decode_key(name, &addr);
   4709c:	a901      	add	r1, sp, #4
   4709e:	4630      	mov	r0, r6
   470a0:	f7fd f9d5 	bl	4444e <bt_settings_decode_key>
	if (err) {
   470a4:	4605      	mov	r5, r0
   470a6:	b9c8      	cbnz	r0, 470dc <keys_set+0x56>
	settings_name_next(name, &next);
   470a8:	4669      	mov	r1, sp
   470aa:	4630      	mov	r0, r6
   470ac:	f7fb fdcb 	bl	42c46 <settings_name_next>
	if (!next) {
   470b0:	9800      	ldr	r0, [sp, #0]
   470b2:	b968      	cbnz	r0, 470d0 <keys_set+0x4a>
	if (!len) {
   470b4:	b9ac      	cbnz	r4, 470e2 <keys_set+0x5c>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   470b6:	aa01      	add	r2, sp, #4
   470b8:	4621      	mov	r1, r4
   470ba:	203f      	movs	r0, #63	; 0x3f
   470bc:	f7e8 feb8 	bl	2fe30 <bt_keys_find>
		if (keys) {
   470c0:	b118      	cbz	r0, 470ca <keys_set+0x44>
			(void)memset(keys, 0, sizeof(*keys));
   470c2:	2240      	movs	r2, #64	; 0x40
   470c4:	4621      	mov	r1, r4
   470c6:	f7fd f932 	bl	4432e <memset>
}
   470ca:	4628      	mov	r0, r5
   470cc:	b010      	add	sp, #64	; 0x40
   470ce:	bd70      	pop	{r4, r5, r6, pc}
		unsigned long next_id = strtoul(next, NULL, 10);
   470d0:	220a      	movs	r2, #10
   470d2:	4629      	mov	r1, r5
   470d4:	f7fc ffd7 	bl	44086 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   470d8:	2800      	cmp	r0, #0
   470da:	d0eb      	beq.n	470b4 <keys_set+0x2e>
		return -EINVAL;
   470dc:	f06f 0515 	mvn.w	r5, #21
   470e0:	e7f3      	b.n	470ca <keys_set+0x44>
	keys = bt_keys_get_addr(id, &addr);
   470e2:	a901      	add	r1, sp, #4
   470e4:	2000      	movs	r0, #0
   470e6:	f7e8 fe47 	bl	2fd78 <bt_keys_get_addr>
	if (!keys) {
   470ea:	b150      	cbz	r0, 47102 <keys_set+0x7c>
	if (len != BT_KEYS_STORAGE_LEN) {
   470ec:	2c34      	cmp	r4, #52	; 0x34
   470ee:	d002      	beq.n	470f6 <keys_set+0x70>
			bt_keys_clear(keys);
   470f0:	f7e8 ff16 	bl	2ff20 <bt_keys_clear>
			return -EINVAL;
   470f4:	e7f2      	b.n	470dc <keys_set+0x56>
		memcpy(keys->storage_start, val, len);
   470f6:	4622      	mov	r2, r4
   470f8:	a903      	add	r1, sp, #12
   470fa:	300c      	adds	r0, #12
   470fc:	f7fd f90c 	bl	44318 <memcpy>
	return 0;
   47100:	e7e3      	b.n	470ca <keys_set+0x44>
		return -ENOMEM;
   47102:	f06f 050b 	mvn.w	r5, #11
   47106:	e7e0      	b.n	470ca <keys_set+0x44>

00047108 <fixed_data_unref>:
}
   47108:	4770      	bx	lr

0004710a <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   4710a:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   4710c:	6849      	ldr	r1, [r1, #4]
   4710e:	6809      	ldr	r1, [r1, #0]
   47110:	f7f5 b86c 	b.w	3c1ec <net_buf_alloc_len>

00047114 <net_buf_get>:
{
   47114:	b570      	push	{r4, r5, r6, lr}
   47116:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   47118:	f7f9 fcf2 	bl	40b00 <z_impl_k_queue_get>
	if (!buf) {
   4711c:	4605      	mov	r5, r0
   4711e:	b128      	cbz	r0, 4712c <net_buf_get+0x18>
   47120:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   47122:	7963      	ldrb	r3, [r4, #5]
   47124:	f013 0301 	ands.w	r3, r3, #1
   47128:	d102      	bne.n	47130 <net_buf_get+0x1c>
	frag->frags = NULL;
   4712a:	6023      	str	r3, [r4, #0]
}
   4712c:	4628      	mov	r0, r5
   4712e:	bd70      	pop	{r4, r5, r6, pc}
   47130:	2300      	movs	r3, #0
   47132:	2200      	movs	r2, #0
   47134:	4630      	mov	r0, r6
   47136:	f7f9 fce3 	bl	40b00 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   4713a:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   4713c:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   4713e:	f023 0301 	bic.w	r3, r3, #1
   47142:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   47144:	4604      	mov	r4, r0
   47146:	e7ec      	b.n	47122 <net_buf_get+0xe>

00047148 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   47148:	6883      	ldr	r3, [r0, #8]
   4714a:	440b      	add	r3, r1
   4714c:	6003      	str	r3, [r0, #0]
}
   4714e:	4770      	bx	lr

00047150 <net_buf_put>:
{
   47150:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   47152:	460a      	mov	r2, r1
   47154:	6814      	ldr	r4, [r2, #0]
   47156:	b914      	cbnz	r4, 4715e <net_buf_put+0xe>
}
   47158:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   4715a:	f000 bf97 	b.w	4808c <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   4715e:	7953      	ldrb	r3, [r2, #5]
   47160:	f043 0301 	orr.w	r3, r3, #1
   47164:	7153      	strb	r3, [r2, #5]
   47166:	4622      	mov	r2, r4
   47168:	e7f4      	b.n	47154 <net_buf_put+0x4>

0004716a <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   4716a:	7902      	ldrb	r2, [r0, #4]
   4716c:	3201      	adds	r2, #1
   4716e:	7102      	strb	r2, [r0, #4]
	return buf;
}
   47170:	4770      	bx	lr

00047172 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   47172:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   47174:	4618      	mov	r0, r3
   47176:	681b      	ldr	r3, [r3, #0]
   47178:	2b00      	cmp	r3, #0
   4717a:	d1fb      	bne.n	47174 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   4717c:	4770      	bx	lr

0004717e <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   4717e:	6802      	ldr	r2, [r0, #0]
{
   47180:	b510      	push	{r4, lr}
	if (parent->frags) {
   47182:	b12a      	cbz	r2, 47190 <net_buf_frag_insert+0x12>
   47184:	460b      	mov	r3, r1
	while (buf->frags) {
   47186:	461c      	mov	r4, r3
   47188:	681b      	ldr	r3, [r3, #0]
   4718a:	2b00      	cmp	r3, #0
   4718c:	d1fb      	bne.n	47186 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   4718e:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   47190:	6001      	str	r1, [r0, #0]
}
   47192:	bd10      	pop	{r4, pc}

00047194 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   47194:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   47196:	4604      	mov	r4, r0
   47198:	b920      	cbnz	r0, 471a4 <net_buf_frag_add+0x10>
	buf->ref++;
   4719a:	790b      	ldrb	r3, [r1, #4]
   4719c:	3301      	adds	r3, #1
   4719e:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   471a0:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   471a2:	bd10      	pop	{r4, pc}
   471a4:	4603      	mov	r3, r0
	while (buf->frags) {
   471a6:	4618      	mov	r0, r3
   471a8:	681b      	ldr	r3, [r3, #0]
   471aa:	2b00      	cmp	r3, #0
   471ac:	d1fb      	bne.n	471a6 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   471ae:	f7ff ffe6 	bl	4717e <net_buf_frag_insert>
   471b2:	4620      	mov	r0, r4
   471b4:	e7f5      	b.n	471a2 <net_buf_frag_add+0xe>

000471b6 <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   471b6:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	__ASSERT_NO_MSG(frag);

	if (parent) {
   471b8:	b108      	cbz	r0, 471be <net_buf_frag_del+0x8>
		__ASSERT_NO_MSG(parent->frags);
		__ASSERT_NO_MSG(parent->frags == frag);
		parent->frags = frag->frags;
   471ba:	680b      	ldr	r3, [r1, #0]
   471bc:	6003      	str	r3, [r0, #0]
	}

	next_frag = frag->frags;
   471be:	680c      	ldr	r4, [r1, #0]

	frag->frags = NULL;
   471c0:	2300      	movs	r3, #0

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   471c2:	4608      	mov	r0, r1
	frag->frags = NULL;
   471c4:	600b      	str	r3, [r1, #0]
	net_buf_unref(frag);
   471c6:	f7f5 f8a3 	bl	3c310 <net_buf_unref>
#endif

	return next_frag;
}
   471ca:	4620      	mov	r0, r4
   471cc:	bd10      	pop	{r4, pc}

000471ce <net_buf_simple_add>:
	return buf->data + buf->len;
   471ce:	8883      	ldrh	r3, [r0, #4]
   471d0:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   471d2:	4419      	add	r1, r3
   471d4:	8081      	strh	r1, [r0, #4]
	return tail;
}
   471d6:	18d0      	adds	r0, r2, r3
   471d8:	4770      	bx	lr

000471da <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   471da:	b430      	push	{r4, r5}
   471dc:	8884      	ldrh	r4, [r0, #4]
   471de:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   471e0:	18a3      	adds	r3, r4, r2
   471e2:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   471e4:	1928      	adds	r0, r5, r4
}
   471e6:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   471e8:	f7fd b896 	b.w	44318 <memcpy>

000471ec <net_buf_simple_add_u8>:

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   471ec:	b510      	push	{r4, lr}
   471ee:	8883      	ldrh	r3, [r0, #4]
   471f0:	6802      	ldr	r2, [r0, #0]
	buf->len += len;
   471f2:	1c5c      	adds	r4, r3, #1
   471f4:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   471f6:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   471f8:	18d0      	adds	r0, r2, r3
   471fa:	bd10      	pop	{r4, pc}

000471fc <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   471fc:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   471fe:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   47200:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   47202:	1a40      	subs	r0, r0, r1
	buf->len += len;
   47204:	4411      	add	r1, r2
	buf->data -= len;
   47206:	6018      	str	r0, [r3, #0]
	buf->len += len;
   47208:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   4720a:	4770      	bx	lr

0004720c <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   4720c:	8882      	ldrh	r2, [r0, #4]
   4720e:	1a52      	subs	r2, r2, r1
{
   47210:	4603      	mov	r3, r0
	buf->len -= len;
   47212:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   47214:	6800      	ldr	r0, [r0, #0]
   47216:	4408      	add	r0, r1
   47218:	6018      	str	r0, [r3, #0]
}
   4721a:	4770      	bx	lr

0004721c <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   4721c:	4603      	mov	r3, r0
	void *data = buf->data;
   4721e:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   47220:	889a      	ldrh	r2, [r3, #4]
   47222:	1a52      	subs	r2, r2, r1
	buf->data += len;
   47224:	4401      	add	r1, r0
	buf->len -= len;
   47226:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   47228:	6019      	str	r1, [r3, #0]

	return data;
}
   4722a:	4770      	bx	lr

0004722c <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   4722c:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   4722e:	6803      	ldr	r3, [r0, #0]
   47230:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   47232:	2102      	movs	r1, #2
   47234:	f7ff ffea 	bl	4720c <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   47238:	4620      	mov	r0, r4
   4723a:	bd10      	pop	{r4, pc}

0004723c <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   4723c:	6802      	ldr	r2, [r0, #0]
   4723e:	6880      	ldr	r0, [r0, #8]
}
   47240:	1a10      	subs	r0, r2, r0
   47242:	4770      	bx	lr

00047244 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   47244:	8883      	ldrh	r3, [r0, #4]
   47246:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   47248:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   4724a:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   4724c:	6803      	ldr	r3, [r0, #0]
   4724e:	1a5b      	subs	r3, r3, r1
}
   47250:	1ad0      	subs	r0, r2, r3
   47252:	4770      	bx	lr

00047254 <ep_ctx_reset>:
{
   47254:	b510      	push	{r4, lr}
	ep_ctx->buf.data = ep_ctx->buf.block.data;
   47256:	6903      	ldr	r3, [r0, #16]
	ep_ctx->buf.curr = ep_ctx->buf.data;
   47258:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
   4725c:	2300      	movs	r3, #0
   4725e:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
   47260:	7f83      	ldrb	r3, [r0, #30]
{
   47262:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
   47264:	b113      	cbz	r3, 4726c <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   47266:	7a40      	ldrb	r0, [r0, #9]
   47268:	f000 fb51 	bl	4790e <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
   4726c:	2301      	movs	r3, #1
   4726e:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
   47270:	2300      	movs	r3, #0
   47272:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
   47274:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
   47276:	77a3      	strb	r3, [r4, #30]
}
   47278:	bd10      	pop	{r4, pc}

0004727a <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   4727a:	f7f9 bb8b 	b.w	40994 <z_impl_k_mutex_lock>

0004727e <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   4727e:	f7f9 bc03 	b.w	40a88 <z_impl_k_mutex_unlock>

00047282 <usb_dc_ep_check_cap>:
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
   47282:	7803      	ldrb	r3, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
   47284:	7901      	ldrb	r1, [r0, #4]
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
   47286:	f003 020f 	and.w	r2, r3, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
   4728a:	b921      	cbnz	r1, 47296 <usb_dc_ep_check_cap+0x14>
   4728c:	3a00      	subs	r2, #0
   4728e:	bf18      	it	ne
   47290:	2201      	movne	r2, #1
   47292:	4250      	negs	r0, r2
   47294:	4770      	bx	lr
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
   47296:	2a08      	cmp	r2, #8
   47298:	d806      	bhi.n	472a8 <usb_dc_ep_check_cap+0x26>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
   4729a:	2901      	cmp	r1, #1
   4729c:	d107      	bne.n	472ae <usb_dc_ep_check_cap+0x2c>
   4729e:	f083 0008 	eor.w	r0, r3, #8
   472a2:	f340 00c0 	sbfx	r0, r0, #3, #1
   472a6:	4770      	bx	lr
		return -1;
   472a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   472ac:	4770      	bx	lr
	return 0;
   472ae:	2000      	movs	r0, #0
}
   472b0:	4770      	bx	lr

000472b2 <usb_dc_ep_read>:
{
   472b2:	b570      	push	{r4, r5, r6, lr}
   472b4:	4604      	mov	r4, r0
   472b6:	460e      	mov	r6, r1
   472b8:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
   472ba:	f7f5 fd67 	bl	3cd8c <usb_dc_ep_read_wait>
	if (ret) {
   472be:	b930      	cbnz	r0, 472ce <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
   472c0:	b906      	cbnz	r6, 472c4 <usb_dc_ep_read+0x12>
   472c2:	b125      	cbz	r5, 472ce <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
   472c4:	4620      	mov	r0, r4
}
   472c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
   472ca:	f7f5 bda7 	b.w	3ce1c <usb_dc_ep_read_continue>
}
   472ce:	bd70      	pop	{r4, r5, r6, pc}

000472d0 <adc_context_on_timer_expired>:
{
   472d0:	b410      	push	{r4}
   472d2:	4603      	mov	r3, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   472d4:	3808      	subs	r0, #8
   472d6:	f3bf 8f5b 	dmb	ish
   472da:	e850 2f00 	ldrex	r2, [r0]
   472de:	1c51      	adds	r1, r2, #1
   472e0:	e840 1400 	strex	r4, r1, [r0]
   472e4:	2c00      	cmp	r4, #0
   472e6:	d1f8      	bne.n	472da <adc_context_on_timer_expired+0xa>
   472e8:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   472ec:	b912      	cbnz	r2, 472f4 <adc_context_on_timer_expired+0x24>
}
   472ee:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
   472f0:	f7f5 be18 	b.w	3cf24 <adc_context_start_sampling>
		ctx->status = -EBUSY;
   472f4:	f06f 020f 	mvn.w	r2, #15
}
   472f8:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
   472fa:	669a      	str	r2, [r3, #104]	; 0x68
}
   472fc:	4770      	bx	lr

000472fe <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   472fe:	6903      	ldr	r3, [r0, #16]
   47300:	b2c9      	uxtb	r1, r1
   47302:	220c      	movs	r2, #12
   47304:	fb01 3302 	mla	r3, r1, r2, r3
   47308:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   4730a:	f000 0007 	and.w	r0, r0, #7
   4730e:	4770      	bx	lr

00047310 <set_on_state>:
	__asm__ volatile(
   47310:	f04f 0320 	mov.w	r3, #32
   47314:	f3ef 8211 	mrs	r2, BASEPRI
   47318:	f383 8812 	msr	BASEPRI_MAX, r3
   4731c:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   47320:	6803      	ldr	r3, [r0, #0]
   47322:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   47326:	f043 0302 	orr.w	r3, r3, #2
   4732a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   4732c:	f382 8811 	msr	BASEPRI, r2
   47330:	f3bf 8f6f 	isb	sy
}
   47334:	4770      	bx	lr

00047336 <stop>:
{
   47336:	b570      	push	{r4, r5, r6, lr}
   47338:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   4733a:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   4733c:	f04f 0420 	mov.w	r4, #32
   47340:	f3ef 8511 	mrs	r5, BASEPRI
   47344:	f384 8812 	msr	BASEPRI_MAX, r4
   47348:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   4734c:	260c      	movs	r6, #12
   4734e:	fb06 3401 	mla	r4, r6, r1, r3
   47352:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   47354:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   47358:	d008      	beq.n	4736c <stop+0x36>
   4735a:	42a2      	cmp	r2, r4
   4735c:	d006      	beq.n	4736c <stop+0x36>
	__asm__ volatile(
   4735e:	f385 8811 	msr	BASEPRI, r5
   47362:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   47366:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   4736a:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   4736c:	fb06 3301 	mla	r3, r6, r1, r3
   47370:	2201      	movs	r2, #1
   47372:	641a      	str	r2, [r3, #64]	; 0x40
   47374:	f385 8811 	msr	BASEPRI, r5
   47378:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   4737c:	6843      	ldr	r3, [r0, #4]
   4737e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   47382:	685b      	ldr	r3, [r3, #4]
   47384:	4798      	blx	r3
	return 0;
   47386:	2000      	movs	r0, #0
   47388:	e7ef      	b.n	4736a <stop+0x34>

0004738a <api_stop>:
	return stop(dev, subsys, CTX_API);
   4738a:	2280      	movs	r2, #128	; 0x80
   4738c:	f7ff bfd3 	b.w	47336 <stop>

00047390 <async_start>:
{
   47390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   47392:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   47394:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   47396:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   47398:	f04f 0520 	mov.w	r5, #32
   4739c:	f3ef 8611 	mrs	r6, BASEPRI
   473a0:	f385 8812 	msr	BASEPRI_MAX, r5
   473a4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   473a8:	250c      	movs	r5, #12
   473aa:	fb05 4401 	mla	r4, r5, r1, r4
   473ae:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   473b0:	f005 0c07 	and.w	ip, r5, #7
   473b4:	f1bc 0f01 	cmp.w	ip, #1
   473b8:	d10c      	bne.n	473d4 <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   473ba:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
   473bc:	f386 8811 	msr	BASEPRI, r6
   473c0:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   473c4:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   473c8:	6843      	ldr	r3, [r0, #4]
   473ca:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   473ce:	4798      	blx	r3
	return 0;
   473d0:	2000      	movs	r0, #0
}
   473d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   473d4:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   473d8:	42af      	cmp	r7, r5
   473da:	f386 8811 	msr	BASEPRI, r6
   473de:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   473e2:	bf0c      	ite	eq
   473e4:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   473e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   473ec:	e7f1      	b.n	473d2 <async_start+0x42>

000473ee <api_start>:
{
   473ee:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   473f0:	2480      	movs	r4, #128	; 0x80
   473f2:	9400      	str	r4, [sp, #0]
   473f4:	f7ff ffcc 	bl	47390 <async_start>
}
   473f8:	b002      	add	sp, #8
   473fa:	bd10      	pop	{r4, pc}

000473fc <onoff_started_callback>:
{
   473fc:	b410      	push	{r4}
	return &data->mgr[type];
   473fe:	6900      	ldr	r0, [r0, #16]
   47400:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   47402:	241c      	movs	r4, #28
   47404:	fb03 0004 	mla	r0, r3, r4, r0
   47408:	2100      	movs	r1, #0
}
   4740a:	bc10      	pop	{r4}
	notify(mgr, 0);
   4740c:	4710      	bx	r2

0004740e <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   4740e:	2000      	movs	r0, #0
   47410:	f000 b915 	b.w	4763e <nrfx_clock_start>

00047414 <blocking_start_callback>:
{
   47414:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   47416:	f7f9 bba7 	b.w	40b68 <z_impl_k_sem_give>

0004741a <lfclk_stop>:
{
   4741a:	b508      	push	{r3, lr}
		z_nrf_clock_calibration_lfclk_stopped();
   4741c:	f7f6 f988 	bl	3d730 <z_nrf_clock_calibration_lfclk_stopped>
}
   47420:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   47424:	2000      	movs	r0, #0
   47426:	f000 b942 	b.w	476ae <nrfx_clock_stop>

0004742a <timeout_handler>:
	start_cal_process();
   4742a:	f7f6 b8d1 	b.w	3d5d0 <start_cal_process>

0004742e <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   4742e:	6843      	ldr	r3, [r0, #4]
   47430:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   47432:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   47436:	600b      	str	r3, [r1, #0]
}
   47438:	2000      	movs	r0, #0
   4743a:	4770      	bx	lr

0004743c <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   4743c:	6843      	ldr	r3, [r0, #4]
   4743e:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   47440:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   47444:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   47448:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   4744c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   47450:	2000      	movs	r0, #0
   47452:	4770      	bx	lr

00047454 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   47454:	6843      	ldr	r3, [r0, #4]
   47456:	685b      	ldr	r3, [r3, #4]
}
   47458:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   4745a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   4745e:	4770      	bx	lr

00047460 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   47460:	6843      	ldr	r3, [r0, #4]
   47462:	685b      	ldr	r3, [r3, #4]
}
   47464:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   47466:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   4746a:	4770      	bx	lr

0004746c <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   4746c:	6843      	ldr	r3, [r0, #4]
   4746e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   47470:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   47474:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   47478:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   4747a:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   4747e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   47482:	2000      	movs	r0, #0
   47484:	4770      	bx	lr

00047486 <gpio_nrfx_manage_callback>:
{
   47486:	b510      	push	{r4, lr}
	return port->data;
   47488:	6903      	ldr	r3, [r0, #16]
	return list->head;
   4748a:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   4748c:	b148      	cbz	r0, 474a2 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4748e:	4288      	cmp	r0, r1
   47490:	d113      	bne.n	474ba <gpio_nrfx_manage_callback+0x34>
Z_GENLIST_REMOVE(slist, snode)
   47492:	689c      	ldr	r4, [r3, #8]
	return node->next;
   47494:	6808      	ldr	r0, [r1, #0]
	list->head = node;
   47496:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   47498:	42a1      	cmp	r1, r4
   4749a:	d100      	bne.n	4749e <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   4749c:	6098      	str	r0, [r3, #8]
	parent->next = child;
   4749e:	2000      	movs	r0, #0
   474a0:	6008      	str	r0, [r1, #0]
	if (set) {
   474a2:	b97a      	cbnz	r2, 474c4 <gpio_nrfx_manage_callback+0x3e>
	return 0;
   474a4:	2000      	movs	r0, #0
}
   474a6:	bd10      	pop	{r4, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   474a8:	4281      	cmp	r1, r0
   474aa:	d106      	bne.n	474ba <gpio_nrfx_manage_callback+0x34>
	return node->next;
   474ac:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   474ae:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   474b0:	6898      	ldr	r0, [r3, #8]
   474b2:	4281      	cmp	r1, r0
   474b4:	d1f3      	bne.n	4749e <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   474b6:	609c      	str	r4, [r3, #8]
}
   474b8:	e7f1      	b.n	4749e <gpio_nrfx_manage_callback+0x18>
	return node->next;
   474ba:	4604      	mov	r4, r0
   474bc:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   474be:	2800      	cmp	r0, #0
   474c0:	d1f2      	bne.n	474a8 <gpio_nrfx_manage_callback+0x22>
			if (!set) {
   474c2:	b13a      	cbz	r2, 474d4 <gpio_nrfx_manage_callback+0x4e>
	return list->head;
   474c4:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   474c6:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   474c8:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   474ca:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   474cc:	2a00      	cmp	r2, #0
   474ce:	d1e9      	bne.n	474a4 <gpio_nrfx_manage_callback+0x1e>
	list->tail = node;
   474d0:	6099      	str	r1, [r3, #8]
}
   474d2:	e7e7      	b.n	474a4 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   474d4:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   474d8:	e7e5      	b.n	474a6 <gpio_nrfx_manage_callback+0x20>

000474da <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
   474da:	b513      	push	{r0, r1, r4, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
   474dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	soc_secure_read_deviceid(deviceid);

	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);

	if (length > sizeof(dev_id.id)) {
   474e0:	2908      	cmp	r1, #8
   474e2:	6e13      	ldr	r3, [r2, #96]	; 0x60
   474e4:	6e52      	ldr	r2, [r2, #100]	; 0x64
   474e6:	bf28      	it	cs
   474e8:	2108      	movcs	r1, #8
   474ea:	ba12      	rev	r2, r2
	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
   474ec:	9200      	str	r2, [sp, #0]
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
   474ee:	ba1b      	rev	r3, r3
	if (length > sizeof(dev_id.id)) {
   474f0:	460c      	mov	r4, r1
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
   474f2:	460a      	mov	r2, r1
   474f4:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
   474f6:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
   474f8:	f7fc ff0e 	bl	44318 <memcpy>

	return length;
}
   474fc:	4620      	mov	r0, r4
   474fe:	b002      	add	sp, #8
   47500:	bd10      	pop	{r4, pc}

00047502 <is_regular_addr_valid>:
{
   47502:	b538      	push	{r3, r4, r5, lr}
   47504:	4605      	mov	r5, r0
   47506:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   47508:	f000 f92b 	bl	47762 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   4750c:	2d00      	cmp	r5, #0
   4750e:	db07      	blt.n	47520 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   47510:	42a8      	cmp	r0, r5
   47512:	d905      	bls.n	47520 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   47514:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   47516:	4284      	cmp	r4, r0
   47518:	bf8c      	ite	hi
   4751a:	2000      	movhi	r0, #0
   4751c:	2001      	movls	r0, #1
}
   4751e:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   47520:	2000      	movs	r0, #0
   47522:	e7fc      	b.n	4751e <is_regular_addr_valid+0x1c>

00047524 <flash_nrf_read>:
{
   47524:	b570      	push	{r4, r5, r6, lr}
   47526:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   47528:	4628      	mov	r0, r5
   4752a:	4619      	mov	r1, r3
{
   4752c:	4616      	mov	r6, r2
   4752e:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   47530:	f7ff ffe7 	bl	47502 <is_regular_addr_valid>
   47534:	b138      	cbz	r0, 47546 <flash_nrf_read+0x22>
	if (!len) {
   47536:	b124      	cbz	r4, 47542 <flash_nrf_read+0x1e>
	memcpy(data, (void *)addr, len);
   47538:	4622      	mov	r2, r4
   4753a:	4629      	mov	r1, r5
   4753c:	4630      	mov	r0, r6
   4753e:	f7fc feeb 	bl	44318 <memcpy>
		return 0;
   47542:	2000      	movs	r0, #0
}
   47544:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   47546:	f06f 0015 	mvn.w	r0, #21
   4754a:	e7fb      	b.n	47544 <flash_nrf_read+0x20>

0004754c <nrf_flash_sync_is_required>:
	return ticker_is_initialized(0);
   4754c:	2000      	movs	r0, #0
   4754e:	f7e9 beb5 	b.w	312bc <ticker_is_initialized>

00047552 <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   47552:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   47554:	461c      	mov	r4, r3
   47556:	4616      	mov	r6, r2
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   47558:	2300      	movs	r3, #0
	const struct flash_driver_api *api = dev->api;
   4755a:	6882      	ldr	r2, [r0, #8]
	info->start_offset = 0;
   4755c:	6023      	str	r3, [r4, #0]
	info->index = 0U;
   4755e:	60a3      	str	r3, [r4, #8]

	api->page_layout(dev, &layout, &layout_size);
   47560:	6913      	ldr	r3, [r2, #16]
{
   47562:	460d      	mov	r5, r1
	api->page_layout(dev, &layout, &layout_size);
   47564:	aa01      	add	r2, sp, #4
   47566:	4669      	mov	r1, sp
   47568:	4798      	blx	r3

	while (layout_size--) {
   4756a:	9b01      	ldr	r3, [sp, #4]
   4756c:	1e5a      	subs	r2, r3, #1
   4756e:	9201      	str	r2, [sp, #4]
   47570:	b91b      	cbnz	r3, 4757a <flash_get_page_info+0x28>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   47572:	f06f 0015 	mvn.w	r0, #21
}
   47576:	b003      	add	sp, #12
   47578:	bdf0      	pop	{r4, r5, r6, r7, pc}
		info->size = layout->pages_size;
   4757a:	9800      	ldr	r0, [sp, #0]
			index_jmp = index - info->index;
   4757c:	68a2      	ldr	r2, [r4, #8]
		info->size = layout->pages_size;
   4757e:	6847      	ldr	r7, [r0, #4]
			index_jmp = (offs - info->start_offset) / info->size;
   47580:	6821      	ldr	r1, [r4, #0]
		info->size = layout->pages_size;
   47582:	6067      	str	r7, [r4, #4]
		if (offs == 0) {
   47584:	b985      	cbnz	r5, 475a8 <flash_get_page_info+0x56>
			index_jmp = index - info->index;
   47586:	1ab3      	subs	r3, r6, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
   47588:	f8d0 c000 	ldr.w	ip, [r0]
   4758c:	4563      	cmp	r3, ip
   4758e:	bf28      	it	cs
   47590:	4663      	movcs	r3, ip
		info->index += index_jmp;
   47592:	441a      	add	r2, r3
		info->start_offset += (index_jmp * info->size);
   47594:	fb03 1107 	mla	r1, r3, r7, r1
   47598:	6021      	str	r1, [r4, #0]
		info->index += index_jmp;
   4759a:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
   4759c:	6802      	ldr	r2, [r0, #0]
   4759e:	429a      	cmp	r2, r3
   475a0:	d806      	bhi.n	475b0 <flash_get_page_info+0x5e>
		layout++;
   475a2:	3008      	adds	r0, #8
   475a4:	9000      	str	r0, [sp, #0]
   475a6:	e7e0      	b.n	4756a <flash_get_page_info+0x18>
			index_jmp = (offs - info->start_offset) / info->size;
   475a8:	1a6b      	subs	r3, r5, r1
   475aa:	fbb3 f3f7 	udiv	r3, r3, r7
   475ae:	e7eb      	b.n	47588 <flash_get_page_info+0x36>
			return 0;
   475b0:	2000      	movs	r0, #0
   475b2:	e7e0      	b.n	47576 <flash_get_page_info+0x24>

000475b4 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   475b4:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   475b6:	2200      	movs	r2, #0
   475b8:	f7ff bfcb 	b.w	47552 <flash_get_page_info>

000475bc <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   475bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   475c0:	6883      	ldr	r3, [r0, #8]
{
   475c2:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
   475c4:	691b      	ldr	r3, [r3, #16]
{
   475c6:	4688      	mov	r8, r1
   475c8:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   475ca:	a901      	add	r1, sp, #4
   475cc:	aa02      	add	r2, sp, #8
   475ce:	4798      	blx	r3
	off_t off = 0;
   475d0:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   475d2:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   475d4:	4625      	mov	r5, r4
   475d6:	9b02      	ldr	r3, [sp, #8]
   475d8:	42ab      	cmp	r3, r5
   475da:	d802      	bhi.n	475e2 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   475dc:	b006      	add	sp, #24
   475de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   475e2:	9f01      	ldr	r7, [sp, #4]
   475e4:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   475e8:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   475ea:	687b      	ldr	r3, [r7, #4]
   475ec:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   475ee:	683a      	ldr	r2, [r7, #0]
   475f0:	42b2      	cmp	r2, r6
   475f2:	eb0a 0306 	add.w	r3, sl, r6
   475f6:	d802      	bhi.n	475fe <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   475f8:	3501      	adds	r5, #1
   475fa:	469a      	mov	sl, r3
   475fc:	e7eb      	b.n	475d6 <flash_page_foreach+0x1a>
			page_info.start_offset = off;
   475fe:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   47600:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   47602:	4649      	mov	r1, r9
   47604:	a803      	add	r0, sp, #12
   47606:	47c0      	blx	r8
   47608:	2800      	cmp	r0, #0
   4760a:	d0e7      	beq.n	475dc <flash_page_foreach+0x20>
			off += page_info.size;
   4760c:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   4760e:	3601      	adds	r6, #1
			off += page_info.size;
   47610:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   47612:	e7ec      	b.n	475ee <flash_page_foreach+0x32>

00047614 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   47614:	2000      	movs	r0, #0
   47616:	4770      	bx	lr

00047618 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   47618:	b538      	push	{r3, r4, r5, lr}
   4761a:	460c      	mov	r4, r1
   4761c:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   4761e:	f7e4 f9a9 	bl	2b974 <bt_is_ready>
   47622:	b128      	cbz	r0, 47630 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   47624:	4629      	mov	r1, r5
   47626:	4620      	mov	r0, r4
}
   47628:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   4762c:	f7e3 beba 	b.w	2b3a4 <bt_hci_le_rand>
}
   47630:	f06f 000a 	mvn.w	r0, #10
   47634:	bd38      	pop	{r3, r4, r5, pc}

00047636 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   47636:	4770      	bx	lr

00047638 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   47638:	4700      	bx	r0

0004763a <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   4763a:	f000 bfdc 	b.w	485f6 <z_impl_k_busy_wait>

0004763e <nrfx_clock_start>:
{
   4763e:	b508      	push	{r3, lr}
    switch (domain)
   47640:	b110      	cbz	r0, 47648 <nrfx_clock_start+0xa>
   47642:	2801      	cmp	r0, #1
   47644:	d028      	beq.n	47698 <nrfx_clock_start+0x5a>
}
   47646:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   47648:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   4764c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   47650:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   47654:	03c9      	lsls	r1, r1, #15
   47656:	d40b      	bmi.n	47670 <nrfx_clock_start+0x32>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   47658:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   4765c:	07d0      	lsls	r0, r2, #31
   4765e:	d50c      	bpl.n	4767a <nrfx_clock_start+0x3c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   47660:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
    if (!is_correct_clk)
   47664:	0792      	lsls	r2, r2, #30
   47666:	d105      	bne.n	47674 <nrfx_clock_start+0x36>
    p_reg->INTENSET = mask;
   47668:	2202      	movs	r2, #2
   4766a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
   4766e:	e7ea      	b.n	47646 <nrfx_clock_start+0x8>
    if (!is_correct_clk)
   47670:	0791      	lsls	r1, r2, #30
   47672:	d002      	beq.n	4767a <nrfx_clock_start+0x3c>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   47674:	2000      	movs	r0, #0
   47676:	f7f7 f90d 	bl	3e894 <clock_stop>
    p_reg->LFCLKSRC = (uint32_t)(source);
   4767a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   4767e:	2200      	movs	r2, #0
   47680:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   47684:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   47688:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   4768c:	2202      	movs	r2, #2
   4768e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   47692:	2201      	movs	r2, #1
   47694:	609a      	str	r2, [r3, #8]
}
   47696:	e7d6      	b.n	47646 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   47698:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   4769c:	2200      	movs	r2, #0
   4769e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   476a2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   476a6:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   476aa:	6018      	str	r0, [r3, #0]
}
   476ac:	e7cb      	b.n	47646 <nrfx_clock_start+0x8>

000476ae <nrfx_clock_stop>:
    clock_stop(domain);
   476ae:	f7f7 b8f1 	b.w	3e894 <clock_stop>

000476b2 <nrf_gpio_reconfigure>:
{
   476b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   476b4:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   476b6:	a801      	add	r0, sp, #4
{
   476b8:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   476bc:	4616      	mov	r6, r2
   476be:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   476c0:	f7f7 f9e0 	bl	3ea84 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   476c4:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   476c6:	f1b6 0c00 	subs.w	ip, r6, #0
   476ca:	bf18      	it	ne
   476cc:	f04f 0c01 	movne.w	ip, #1
   476d0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   476d4:	1e0b      	subs	r3, r1, #0
   476d6:	bf18      	it	ne
   476d8:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   476da:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   476dc:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   476e0:	bf14      	ite	ne
   476e2:	f04f 0c0c 	movne.w	ip, #12
   476e6:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   476ea:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   476ec:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   476f0:	bf14      	ite	ne
   476f2:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   476f6:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   476fa:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   476fc:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   47700:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   47704:	bf14      	ite	ne
   47706:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   4770a:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   4770e:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   47712:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   47716:	b101      	cbz	r1, 4771a <nrf_gpio_reconfigure+0x68>
   47718:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   4771a:	b10e      	cbz	r6, 47720 <nrf_gpio_reconfigure+0x6e>
   4771c:	7836      	ldrb	r6, [r6, #0]
   4771e:	0076      	lsls	r6, r6, #1
   47720:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   47722:	b10d      	cbz	r5, 47728 <nrf_gpio_reconfigure+0x76>
   47724:	782d      	ldrb	r5, [r5, #0]
   47726:	00ad      	lsls	r5, r5, #2
   47728:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   4772a:	b10c      	cbz	r4, 47730 <nrf_gpio_reconfigure+0x7e>
   4772c:	7824      	ldrb	r4, [r4, #0]
   4772e:	0224      	lsls	r4, r4, #8
   47730:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   47732:	b10f      	cbz	r7, 47738 <nrf_gpio_reconfigure+0x86>
   47734:	783f      	ldrb	r7, [r7, #0]
   47736:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   47738:	430c      	orrs	r4, r1
   4773a:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   4773c:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   47740:	b003      	add	sp, #12
   47742:	bdf0      	pop	{r4, r5, r6, r7, pc}

00047744 <nrf_gpio_cfg_sense_set>:
{
   47744:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   47746:	f10d 030f 	add.w	r3, sp, #15
   4774a:	9301      	str	r3, [sp, #4]
   4774c:	2300      	movs	r3, #0
{
   4774e:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   47752:	9300      	str	r3, [sp, #0]
   47754:	461a      	mov	r2, r3
   47756:	4619      	mov	r1, r3
   47758:	f7ff ffab 	bl	476b2 <nrf_gpio_reconfigure>
}
   4775c:	b005      	add	sp, #20
   4775e:	f85d fb04 	ldr.w	pc, [sp], #4

00047762 <nrfx_nvmc_flash_size_get>:
    return p_reg->CODEPAGESIZE;
   47762:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   47766:	691a      	ldr	r2, [r3, #16]
    return p_reg->CODESIZE;
   47768:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   4776a:	4350      	muls	r0, r2
   4776c:	4770      	bx	lr

0004776e <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   4776e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   47772:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   47774:	4770      	bx	lr

00047776 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   47776:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   4777a:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   4777c:	4770      	bx	lr

0004777e <nrf_power_event_get_and_clear.constprop.0>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   4777e:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   47782:	681a      	ldr	r2, [r3, #0]
   47784:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   47786:	bf1f      	itttt	ne
   47788:	2200      	movne	r2, #0
   4778a:	601a      	strne	r2, [r3, #0]
   4778c:	681b      	ldrne	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   4778e:	2001      	movne	r0, #1
   47790:	bf08      	it	eq
   47792:	2000      	moveq	r0, #0
}
   47794:	4770      	bx	lr

00047796 <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
   47796:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   4779a:	f44f 7260 	mov.w	r2, #896	; 0x380
   4779e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   477a2:	4770      	bx	lr

000477a4 <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
   477a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   477a8:	f44f 7260 	mov.w	r2, #896	; 0x380
   477ac:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   477b0:	4770      	bx	lr

000477b2 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
   477b2:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
   477b4:	f7f7 fd58 	bl	3f268 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
   477b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
   477bc:	f7f7 b920 	b.w	3ea00 <nrfx_clock_irq_handler>

000477c0 <nrfx_usbd_consumer>:
{
   477c0:	b530      	push	{r4, r5, lr}
    size_t size = p_transfer->size;
   477c2:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
   477c4:	429c      	cmp	r4, r3
   477c6:	d209      	bcs.n	477dc <nrfx_usbd_consumer+0x1c>
        p_next->size = 0;
   477c8:	2500      	movs	r5, #0
   477ca:	6045      	str	r5, [r0, #4]
        p_next->p_data = p_transfer->p_data;
   477cc:	6809      	ldr	r1, [r1, #0]
   477ce:	6001      	str	r1, [r0, #0]
    return (ep_size == data_size) && (size != 0);
   477d0:	429a      	cmp	r2, r3
   477d2:	d10c      	bne.n	477ee <nrfx_usbd_consumer+0x2e>
   477d4:	1e20      	subs	r0, r4, #0
   477d6:	bf18      	it	ne
   477d8:	2001      	movne	r0, #1
}
   477da:	bd30      	pop	{r4, r5, pc}
        p_next->size = data_size;
   477dc:	6043      	str	r3, [r0, #4]
        p_next->p_data = p_transfer->p_data;
   477de:	680d      	ldr	r5, [r1, #0]
   477e0:	6005      	str	r5, [r0, #0]
        p_transfer->p_data.addr += data_size;
   477e2:	6808      	ldr	r0, [r1, #0]
        size -= data_size;
   477e4:	1ae4      	subs	r4, r4, r3
        p_transfer->p_data.addr += data_size;
   477e6:	4418      	add	r0, r3
        p_transfer->size = size;
   477e8:	604c      	str	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
   477ea:	6008      	str	r0, [r1, #0]
   477ec:	e7f0      	b.n	477d0 <nrfx_usbd_consumer+0x10>
    return (ep_size == data_size) && (size != 0);
   477ee:	2000      	movs	r0, #0
   477f0:	e7f3      	b.n	477da <nrfx_usbd_consumer+0x1a>

000477f2 <nrfx_usbd_feeder_ram>:
    if (tx_size > ep_size)
   477f2:	684b      	ldr	r3, [r1, #4]
   477f4:	429a      	cmp	r2, r3
   477f6:	bf28      	it	cs
   477f8:	461a      	movcs	r2, r3
    p_next->p_data = p_transfer->p_data;
   477fa:	680b      	ldr	r3, [r1, #0]
    p_next->size = tx_size;
   477fc:	e9c0 3200 	strd	r3, r2, [r0]
    p_transfer->size -= tx_size;
   47800:	6848      	ldr	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   47802:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
   47804:	1a80      	subs	r0, r0, r2
   47806:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   47808:	4413      	add	r3, r2
}
   4780a:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
   4780c:	600b      	str	r3, [r1, #0]
}
   4780e:	bf18      	it	ne
   47810:	2001      	movne	r0, #1
   47812:	4770      	bx	lr

00047814 <nrfx_usbd_feeder_ram_zlp>:
    if (tx_size > ep_size)
   47814:	684b      	ldr	r3, [r1, #4]
   47816:	429a      	cmp	r2, r3
   47818:	bf28      	it	cs
   4781a:	461a      	movcs	r2, r3
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
   4781c:	b162      	cbz	r2, 47838 <nrfx_usbd_feeder_ram_zlp+0x24>
   4781e:	680b      	ldr	r3, [r1, #0]
    p_next->size = tx_size;
   47820:	e9c0 3200 	strd	r3, r2, [r0]
    p_transfer->size -= tx_size;
   47824:	684b      	ldr	r3, [r1, #4]
   47826:	1a9b      	subs	r3, r3, r2
   47828:	604b      	str	r3, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   4782a:	680b      	ldr	r3, [r1, #0]
}
   4782c:	1e10      	subs	r0, r2, #0
    p_transfer->p_data.addr += tx_size;
   4782e:	4413      	add	r3, r2
   47830:	600b      	str	r3, [r1, #0]
}
   47832:	bf18      	it	ne
   47834:	2001      	movne	r0, #1
   47836:	4770      	bx	lr
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
   47838:	4613      	mov	r3, r2
   4783a:	e7f1      	b.n	47820 <nrfx_usbd_feeder_ram_zlp+0xc>

0004783c <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
   4783c:	43c3      	mvns	r3, r0
   4783e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   47842:	f000 000f 	and.w	r0, r0, #15
}
   47846:	eb00 1003 	add.w	r0, r0, r3, lsl #4
   4784a:	4770      	bx	lr

0004784c <ev_started_handler>:
}
   4784c:	4770      	bx	lr

0004784e <nrf_usbd_epin_dma_handler>:
{
   4784e:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
   47850:	f7f7 fe78 	bl	3f544 <usbd_dma_pending_clear>
{
   47854:	4601      	mov	r1, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
   47856:	f7f7 fd6b 	bl	3f330 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   4785a:	7b83      	ldrb	r3, [r0, #14]
   4785c:	2b03      	cmp	r3, #3
   4785e:	d10a      	bne.n	47876 <nrf_usbd_epin_dma_handler+0x28>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   47860:	4608      	mov	r0, r1
   47862:	f7ff ffeb 	bl	4783c <ep2bit>
   47866:	2301      	movs	r3, #1
   47868:	fa03 f000 	lsl.w	r0, r3, r0
   4786c:	43c0      	mvns	r0, r0
}
   4786e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   47872:	f7f7 be57 	b.w	3f524 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   47876:	6803      	ldr	r3, [r0, #0]
   47878:	2b00      	cmp	r3, #0
   4787a:	d0f1      	beq.n	47860 <nrf_usbd_epin_dma_handler+0x12>
}
   4787c:	bd08      	pop	{r3, pc}

0004787e <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
   4787e:	2087      	movs	r0, #135	; 0x87
   47880:	f7ff bfe5 	b.w	4784e <nrf_usbd_epin_dma_handler>

00047884 <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
   47884:	2086      	movs	r0, #134	; 0x86
   47886:	f7ff bfe2 	b.w	4784e <nrf_usbd_epin_dma_handler>

0004788a <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
   4788a:	2085      	movs	r0, #133	; 0x85
   4788c:	f7ff bfdf 	b.w	4784e <nrf_usbd_epin_dma_handler>

00047890 <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
   47890:	2084      	movs	r0, #132	; 0x84
   47892:	f7ff bfdc 	b.w	4784e <nrf_usbd_epin_dma_handler>

00047896 <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
   47896:	2083      	movs	r0, #131	; 0x83
   47898:	f7ff bfd9 	b.w	4784e <nrf_usbd_epin_dma_handler>

0004789c <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
   4789c:	2082      	movs	r0, #130	; 0x82
   4789e:	f7ff bfd6 	b.w	4784e <nrf_usbd_epin_dma_handler>

000478a2 <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
   478a2:	2081      	movs	r0, #129	; 0x81
   478a4:	f7ff bfd3 	b.w	4784e <nrf_usbd_epin_dma_handler>

000478a8 <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
   478a8:	f7f7 be5e 	b.w	3f568 <nrf_usbd_ep0in_dma_handler>

000478ac <nrfx_usbd_ep_max_packet_size_set>:
{
   478ac:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
   478ae:	f7f7 fd3f 	bl	3f330 <ep_state_access>
    p_state->max_packet_size = size;
   478b2:	8181      	strh	r1, [r0, #12]
}
   478b4:	bd08      	pop	{r3, pc}

000478b6 <nrfx_usbd_ep_status_get>:
{
   478b6:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
   478b8:	f7f7 fd3a 	bl	3f330 <ep_state_access>
	__asm__ volatile(
   478bc:	f04f 0220 	mov.w	r2, #32
   478c0:	f3ef 8311 	mrs	r3, BASEPRI
   478c4:	f382 8812 	msr	BASEPRI_MAX, r2
   478c8:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
   478cc:	6882      	ldr	r2, [r0, #8]
   478ce:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   478d0:	6802      	ldr	r2, [r0, #0]
   478d2:	b92a      	cbnz	r2, 478e0 <nrfx_usbd_ep_status_get+0x2a>
   478d4:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
   478d6:	f383 8811 	msr	BASEPRI, r3
   478da:	f3bf 8f6f 	isb	sy
}
   478de:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   478e0:	2004      	movs	r0, #4
   478e2:	e7f8      	b.n	478d6 <nrfx_usbd_ep_status_get+0x20>

000478e4 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
   478e4:	2007      	movs	r0, #7
   478e6:	f7f8 b97f 	b.w	3fbe8 <nrf_usbd_epout_dma_handler>

000478ea <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
   478ea:	2006      	movs	r0, #6
   478ec:	f7f8 b97c 	b.w	3fbe8 <nrf_usbd_epout_dma_handler>

000478f0 <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
   478f0:	2005      	movs	r0, #5
   478f2:	f7f8 b979 	b.w	3fbe8 <nrf_usbd_epout_dma_handler>

000478f6 <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
   478f6:	2004      	movs	r0, #4
   478f8:	f7f8 b976 	b.w	3fbe8 <nrf_usbd_epout_dma_handler>

000478fc <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
   478fc:	2003      	movs	r0, #3
   478fe:	f7f8 b973 	b.w	3fbe8 <nrf_usbd_epout_dma_handler>

00047902 <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
   47902:	2002      	movs	r0, #2
   47904:	f7f8 b970 	b.w	3fbe8 <nrf_usbd_epout_dma_handler>

00047908 <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
   47908:	2001      	movs	r0, #1
   4790a:	f7f8 b96d 	b.w	3fbe8 <nrf_usbd_epout_dma_handler>

0004790e <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
   4790e:	f7f8 ba61 	b.w	3fdd4 <usbd_ep_abort>

00047912 <debounce_update>:
        state->counter -= elapsed_ms;
    }
}

void debounce_update(struct debounce_state *state, const bool active, const int elapsed_ms,
                     const struct debounce_config *config) {
   47912:	b570      	push	{r4, r5, r6, lr}
    // This uses a variation of the integrator debouncing described at
    // https://www.kennethkuhn.com/electronics/debounce.c
    // Every update where "active" does not match the current state, we increment
    // a counter, otherwise we decrement it. When the counter reaches a
    // threshold, the state flips and we reset the counter.
    state->changed = false;
   47914:	7804      	ldrb	r4, [r0, #0]
   47916:	f36f 0441 	bfc	r4, #1, #1
   4791a:	7004      	strb	r4, [r0, #0]

    if (active == state->pressed) {
   4791c:	f004 0501 	and.w	r5, r4, #1
    if (state->counter < elapsed_ms) {
   47920:	8804      	ldrh	r4, [r0, #0]
    if (active == state->pressed) {
   47922:	428d      	cmp	r5, r1
    if (state->counter < elapsed_ms) {
   47924:	f3c4 068d 	ubfx	r6, r4, #2, #14
    if (active == state->pressed) {
   47928:	d109      	bne.n	4793e <debounce_update+0x2c>
    if (state->counter < elapsed_ms) {
   4792a:	42b2      	cmp	r2, r6
   4792c:	dd03      	ble.n	47936 <debounce_update+0x24>
        state->counter = 0;
   4792e:	f36f 048f 	bfc	r4, #2, #14
    if (state->counter < flip_threshold) {
        increment_counter(state, elapsed_ms);
        return;
    }

    state->pressed = !state->pressed;
   47932:	8004      	strh	r4, [r0, #0]
    state->counter = 0;
    state->changed = true;
}
   47934:	bd70      	pop	{r4, r5, r6, pc}
        state->counter -= elapsed_ms;
   47936:	1ab6      	subs	r6, r6, r2
        state->counter += elapsed_ms;
   47938:	f366 048f 	bfi	r4, r6, #2, #14
   4793c:	e7f9      	b.n	47932 <debounce_update+0x20>
    return state->pressed ? config->debounce_release_ms : config->debounce_press_ms;
   4793e:	e9d3 1300 	ldrd	r1, r3, [r3]
   47942:	f014 0f01 	tst.w	r4, #1
   47946:	bf18      	it	ne
   47948:	4619      	movne	r1, r3
    if (state->counter < flip_threshold) {
   4794a:	428e      	cmp	r6, r1
   4794c:	d208      	bcs.n	47960 <debounce_update+0x4e>
    if (state->counter + elapsed_ms > DEBOUNCE_COUNTER_MAX) {
   4794e:	4416      	add	r6, r2
   47950:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
   47954:	d3f0      	bcc.n	47938 <debounce_update+0x26>
        state->counter = DEBOUNCE_COUNTER_MAX;
   47956:	f643 73ff 	movw	r3, #16383	; 0x3fff
   4795a:	f363 048f 	bfi	r4, r3, #2, #14
   4795e:	e7e8      	b.n	47932 <debounce_update+0x20>
    state->pressed = !state->pressed;
   47960:	f085 0401 	eor.w	r4, r5, #1
   47964:	f044 0402 	orr.w	r4, r4, #2
   47968:	e7e3      	b.n	47932 <debounce_update+0x20>

0004796a <debounce_is_active>:

bool debounce_is_active(const struct debounce_state *state) {
    return state->pressed || state->counter > 0;
   4796a:	8800      	ldrh	r0, [r0, #0]
   4796c:	f020 0002 	bic.w	r0, r0, #2
   47970:	b280      	uxth	r0, r0
}
   47972:	3800      	subs	r0, #0
   47974:	bf18      	it	ne
   47976:	2001      	movne	r0, #1
   47978:	4770      	bx	lr

0004797a <debounce_is_pressed>:

bool debounce_is_pressed(const struct debounce_state *state) { return state->pressed; }
   4797a:	7800      	ldrb	r0, [r0, #0]
   4797c:	f000 0001 	and.w	r0, r0, #1
   47980:	4770      	bx	lr

00047982 <debounce_get_changed>:

   47982:	7800      	ldrb	r0, [r0, #0]
   47984:	f3c0 0040 	ubfx	r0, r0, #1, #1
   47988:	4770      	bx	lr

0004798a <kscan_gpio_pin_get>:
}

int kscan_gpio_pin_get(const struct kscan_gpio *gpio, struct kscan_gpio_port_state *state) {
   4798a:	b570      	push	{r4, r5, r6, lr}
    if (gpio->spec.port != state->port) {
   4798c:	680b      	ldr	r3, [r1, #0]
int kscan_gpio_pin_get(const struct kscan_gpio *gpio, struct kscan_gpio_port_state *state) {
   4798e:	4605      	mov	r5, r0
    if (gpio->spec.port != state->port) {
   47990:	6800      	ldr	r0, [r0, #0]
   47992:	4298      	cmp	r0, r3
int kscan_gpio_pin_get(const struct kscan_gpio *gpio, struct kscan_gpio_port_state *state) {
   47994:	460c      	mov	r4, r1
    if (gpio->spec.port != state->port) {
   47996:	d00a      	beq.n	479ae <kscan_gpio_pin_get+0x24>
        state->port = gpio->spec.port;
   47998:	f841 0b04 	str.w	r0, [r1], #4
	const struct gpio_driver_data *const data =
   4799c:	6906      	ldr	r6, [r0, #16]
	return api->port_get_raw(port, value);
   4799e:	6883      	ldr	r3, [r0, #8]
   479a0:	685b      	ldr	r3, [r3, #4]
   479a2:	4798      	blx	r3
	if (ret == 0) {
   479a4:	b940      	cbnz	r0, 479b8 <kscan_gpio_pin_get+0x2e>
		*value ^= data->invert;
   479a6:	6863      	ldr	r3, [r4, #4]
   479a8:	6832      	ldr	r2, [r6, #0]
   479aa:	4053      	eors	r3, r2
   479ac:	6063      	str	r3, [r4, #4]
        if (err) {
            return err;
        }
    }

    return (state->value & BIT(gpio->spec.pin)) != 0;
   479ae:	792b      	ldrb	r3, [r5, #4]
   479b0:	6860      	ldr	r0, [r4, #4]
   479b2:	40d8      	lsrs	r0, r3
   479b4:	f000 0001 	and.w	r0, r0, #1
}
   479b8:	bd70      	pop	{r4, r5, r6, pc}

000479ba <gpio_pin_configure_dt>:
{
   479ba:	b470      	push	{r4, r5, r6}
   479bc:	4603      	mov	r3, r0
   479be:	460c      	mov	r4, r1
				  spec->dt_flags | extra_flags);
   479c0:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
   479c2:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   479c4:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
   479c6:	4322      	orrs	r2, r4
	struct gpio_driver_data *data =
   479c8:	6905      	ldr	r5, [r0, #16]
	const struct gpio_driver_api *api =
   479ca:	6886      	ldr	r6, [r0, #8]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   479cc:	682b      	ldr	r3, [r5, #0]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   479ce:	2401      	movs	r4, #1
   479d0:	408c      	lsls	r4, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   479d2:	f012 0f01 	tst.w	r2, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   479d6:	bf14      	ite	ne
   479d8:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   479da:	43a3      	biceq	r3, r4
   479dc:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
   479de:	6833      	ldr	r3, [r6, #0]
}
   479e0:	bc70      	pop	{r4, r5, r6}
	return api->pin_configure(port, pin, flags);
   479e2:	4718      	bx	r3

000479e4 <gpio_pin_set_dt>:
{
   479e4:	4603      	mov	r3, r0
   479e6:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
   479e8:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   479ea:	7919      	ldrb	r1, [r3, #4]
   479ec:	2301      	movs	r3, #1
   479ee:	fa03 f101 	lsl.w	r1, r3, r1
   479f2:	6903      	ldr	r3, [r0, #16]
   479f4:	681b      	ldr	r3, [r3, #0]
   479f6:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   479f8:	bf18      	it	ne
   479fa:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   479fe:	b112      	cbz	r2, 47a06 <gpio_pin_set_dt+0x22>
	return api->port_set_bits_raw(port, pins);
   47a00:	6883      	ldr	r3, [r0, #8]
   47a02:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   47a04:	4718      	bx	r3
   47a06:	6883      	ldr	r3, [r0, #8]
   47a08:	691b      	ldr	r3, [r3, #16]
   47a0a:	e7fb      	b.n	47a04 <gpio_pin_set_dt+0x20>

00047a0c <kscan_matrix_configure>:
    struct kscan_matrix_data *data = dev->data;
   47a0c:	6903      	ldr	r3, [r0, #16]
    if (!callback) {
   47a0e:	b111      	cbz	r1, 47a16 <kscan_matrix_configure+0xa>
    data->callback = callback;
   47a10:	60d9      	str	r1, [r3, #12]
    return 0;
   47a12:	2000      	movs	r0, #0
   47a14:	4770      	bx	lr
        return -EINVAL;
   47a16:	f06f 0015 	mvn.w	r0, #21
}
   47a1a:	4770      	bx	lr

00047a1c <kscan_matrix_interrupt_configure.isra.0>:
static int kscan_matrix_interrupt_configure(const struct device *dev, const gpio_flags_t flags) {
   47a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   47a20:	4606      	mov	r6, r0
   47a22:	460c      	mov	r4, r1
    for (int i = 0; i < data->inputs.len; i++) {
   47a24:	2500      	movs	r5, #0
        const struct gpio_dt_spec *gpio = &data->inputs.gpios[i].spec;
   47a26:	270c      	movs	r7, #12
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   47a28:	f401 0800 	and.w	r8, r1, #8388608	; 0x800000
    for (int i = 0; i < data->inputs.len; i++) {
   47a2c:	68b3      	ldr	r3, [r6, #8]
   47a2e:	429d      	cmp	r5, r3
   47a30:	d302      	bcc.n	47a38 <kscan_matrix_interrupt_configure.isra.0+0x1c>
    return 0;
   47a32:	2000      	movs	r0, #0
}
   47a34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        const struct gpio_dt_spec *gpio = &data->inputs.gpios[i].spec;
   47a38:	6872      	ldr	r2, [r6, #4]
   47a3a:	fb07 f305 	mul.w	r3, r7, r5
   47a3e:	18d1      	adds	r1, r2, r3
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   47a40:	58d0      	ldr	r0, [r2, r3]
   47a42:	7909      	ldrb	r1, [r1, #4]
	const struct gpio_driver_api *api =
   47a44:	f8d0 c008 	ldr.w	ip, [r0, #8]
	const struct gpio_driver_data *const data =
   47a48:	6902      	ldr	r2, [r0, #16]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   47a4a:	f1b8 0f00 	cmp.w	r8, #0
   47a4e:	d011      	beq.n	47a74 <kscan_matrix_interrupt_configure.isra.0+0x58>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   47a50:	6812      	ldr	r2, [r2, #0]
   47a52:	2301      	movs	r3, #1
   47a54:	408b      	lsls	r3, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   47a56:	4213      	tst	r3, r2
   47a58:	d00c      	beq.n	47a74 <kscan_matrix_interrupt_configure.isra.0+0x58>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   47a5a:	f084 62c0 	eor.w	r2, r4, #100663296	; 0x6000000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   47a5e:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
   47a62:	f8dc 9018 	ldr.w	r9, [ip, #24]
   47a66:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
   47a6a:	47c8      	blx	r9
        if (err) {
   47a6c:	2800      	cmp	r0, #0
   47a6e:	d1e1      	bne.n	47a34 <kscan_matrix_interrupt_configure.isra.0+0x18>
    for (int i = 0; i < data->inputs.len; i++) {
   47a70:	3501      	adds	r5, #1
   47a72:	e7db      	b.n	47a2c <kscan_matrix_interrupt_configure.isra.0+0x10>
   47a74:	4622      	mov	r2, r4
   47a76:	e7f2      	b.n	47a5e <kscan_matrix_interrupt_configure.isra.0+0x42>

00047a78 <kscan_matrix_set_all_outputs.isra.0>:
static int kscan_matrix_set_all_outputs(const struct device *dev, const int value) {
   47a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   47a7a:	4605      	mov	r5, r0
   47a7c:	460e      	mov	r6, r1
    for (int i = 0; i < config->outputs.len; i++) {
   47a7e:	2400      	movs	r4, #0
        const struct gpio_dt_spec *gpio = &config->outputs.gpios[i].spec;
   47a80:	270c      	movs	r7, #12
    for (int i = 0; i < config->outputs.len; i++) {
   47a82:	686b      	ldr	r3, [r5, #4]
   47a84:	42a3      	cmp	r3, r4
   47a86:	d801      	bhi.n	47a8c <kscan_matrix_set_all_outputs.isra.0+0x14>
    return 0;
   47a88:	2000      	movs	r0, #0
}
   47a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        const struct gpio_dt_spec *gpio = &config->outputs.gpios[i].spec;
   47a8c:	6828      	ldr	r0, [r5, #0]
        int err = gpio_pin_set_dt(gpio, value);
   47a8e:	4631      	mov	r1, r6
   47a90:	fb07 0004 	mla	r0, r7, r4, r0
   47a94:	f7ff ffa6 	bl	479e4 <gpio_pin_set_dt>
        if (err) {
   47a98:	2800      	cmp	r0, #0
   47a9a:	d1f6      	bne.n	47a8a <kscan_matrix_set_all_outputs.isra.0+0x12>
    for (int i = 0; i < config->outputs.len; i++) {
   47a9c:	3401      	adds	r4, #1
   47a9e:	e7f0      	b.n	47a82 <kscan_matrix_set_all_outputs.isra.0+0xa>

00047aa0 <kscan_matrix_read>:
static int kscan_matrix_read(const struct device *dev) {
   47aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    struct kscan_matrix_data *data = dev->data;
   47aa4:	6906      	ldr	r6, [r0, #16]
    const struct kscan_matrix_config *config = dev->config;
   47aa6:	6844      	ldr	r4, [r0, #4]
static int kscan_matrix_read(const struct device *dev) {
   47aa8:	b085      	sub	sp, #20
   47aaa:	4605      	mov	r5, r0
    for (int i = 0; i < config->outputs.len; i++) {
   47aac:	f04f 0900 	mov.w	r9, #0
        const struct kscan_gpio *out_gpio = &config->outputs.gpios[i];
   47ab0:	f04f 0b0c 	mov.w	fp, #12
    for (int i = 0; i < config->outputs.len; i++) {
   47ab4:	6863      	ldr	r3, [r4, #4]
   47ab6:	454b      	cmp	r3, r9
   47ab8:	d836      	bhi.n	47b28 <kscan_matrix_read+0x88>
    for (int r = 0; r < config->rows; r++) {
   47aba:	f04f 0900 	mov.w	r9, #0
    bool continue_scan = false;
   47abe:	464f      	mov	r7, r9
    for (int r = 0; r < config->rows; r++) {
   47ac0:	6923      	ldr	r3, [r4, #16]
   47ac2:	454b      	cmp	r3, r9
   47ac4:	f200 8091 	bhi.w	47bea <kscan_matrix_read+0x14a>
    struct kscan_matrix_data *data = dev->data;
   47ac8:	6928      	ldr	r0, [r5, #16]
    if (continue_scan) {
   47aca:	2f00      	cmp	r7, #0
   47acc:	f000 8095 	beq.w	47bfa <kscan_matrix_read+0x15a>
    data->scan_time += config->debounce_scan_period_ms;
   47ad0:	686b      	ldr	r3, [r5, #4]
   47ad2:	699a      	ldr	r2, [r3, #24]
   47ad4:	e9d0 3112 	ldrd	r3, r1, [r0, #72]	; 0x48
   47ad8:	18d3      	adds	r3, r2, r3
   47ada:	eb41 71e2 	adc.w	r1, r1, r2, asr #31
   47ade:	e9c0 3112 	strd	r3, r1, [r0, #72]	; 0x48
   47ae2:	03c9      	lsls	r1, r1, #15
   47ae4:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   47ae8:	f240 32e7 	movw	r2, #999	; 0x3e7
   47aec:	03db      	lsls	r3, r3, #15
    k_work_reschedule(&data->work, K_TIMEOUT_ABS_MS(data->scan_time));
   47aee:	f100 0410 	add.w	r4, r0, #16
   47af2:	1898      	adds	r0, r3, r2
   47af4:	f141 0100 	adc.w	r1, r1, #0
   47af8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   47afc:	f171 0300 	sbcs.w	r3, r1, #0
   47b00:	d376      	bcc.n	47bf0 <kscan_matrix_read+0x150>
   47b02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   47b06:	2300      	movs	r3, #0
   47b08:	f7de fafa 	bl	26100 <__aeabi_uldivmod>
   47b0c:	f06f 0201 	mvn.w	r2, #1
   47b10:	1a12      	subs	r2, r2, r0
   47b12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   47b16:	eb63 0301 	sbc.w	r3, r3, r1
   47b1a:	4620      	mov	r0, r4
   47b1c:	f7f9 fa5e 	bl	40fdc <k_work_reschedule>
    return 0;
   47b20:	2000      	movs	r0, #0
}
   47b22:	b005      	add	sp, #20
   47b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        const struct kscan_gpio *out_gpio = &config->outputs.gpios[i];
   47b28:	6827      	ldr	r7, [r4, #0]
   47b2a:	fb0b 7709 	mla	r7, fp, r9, r7
        int err = gpio_pin_set_dt(&out_gpio->spec, 1);
   47b2e:	2101      	movs	r1, #1
   47b30:	4638      	mov	r0, r7
   47b32:	f7ff ff57 	bl	479e4 <gpio_pin_set_dt>
        if (err) {
   47b36:	2800      	cmp	r0, #0
   47b38:	d1f3      	bne.n	47b22 <kscan_matrix_read+0x82>
        struct kscan_gpio_port_state state = {0};
   47b3a:	e9cd 0002 	strd	r0, r0, [sp, #8]
            debounce_update(&data->matrix_state[index], active, config->debounce_scan_period_ms,
   47b3e:	f104 0308 	add.w	r3, r4, #8
        for (int j = 0; j < data->inputs.len; j++) {
   47b42:	4682      	mov	sl, r0
            debounce_update(&data->matrix_state[index], active, config->debounce_scan_period_ms,
   47b44:	9301      	str	r3, [sp, #4]
        for (int j = 0; j < data->inputs.len; j++) {
   47b46:	68b3      	ldr	r3, [r6, #8]
   47b48:	4553      	cmp	r3, sl
   47b4a:	d808      	bhi.n	47b5e <kscan_matrix_read+0xbe>
        err = gpio_pin_set_dt(&out_gpio->spec, 0);
   47b4c:	2100      	movs	r1, #0
   47b4e:	4638      	mov	r0, r7
   47b50:	f7ff ff48 	bl	479e4 <gpio_pin_set_dt>
        if (err) {
   47b54:	2800      	cmp	r0, #0
   47b56:	d1e4      	bne.n	47b22 <kscan_matrix_read+0x82>
    for (int i = 0; i < config->outputs.len; i++) {
   47b58:	f109 0901 	add.w	r9, r9, #1
   47b5c:	e7aa      	b.n	47ab4 <kscan_matrix_read+0x14>
            const struct kscan_gpio *in_gpio = &data->inputs.gpios[j];
   47b5e:	6870      	ldr	r0, [r6, #4]
               : state_index_rc(config, input_idx, output_idx);
   47b60:	f894 c020 	ldrb.w	ip, [r4, #32]
            const int index = state_index_io(config, in_gpio->index, out_gpio->index);
   47b64:	68ba      	ldr	r2, [r7, #8]
    return (col * config->rows) + row;
   47b66:	6921      	ldr	r1, [r4, #16]
            const struct kscan_gpio *in_gpio = &data->inputs.gpios[j];
   47b68:	fb0b 000a 	mla	r0, fp, sl, r0
            const int index = state_index_io(config, in_gpio->index, out_gpio->index);
   47b6c:	6883      	ldr	r3, [r0, #8]
               : state_index_rc(config, input_idx, output_idx);
   47b6e:	f1bc 0f00 	cmp.w	ip, #0
   47b72:	d113      	bne.n	47b9c <kscan_matrix_read+0xfc>
    return (col * config->rows) + row;
   47b74:	fb01 2803 	mla	r8, r1, r3, r2
            const int active = kscan_gpio_pin_get(in_gpio, &state);
   47b78:	a902      	add	r1, sp, #8
   47b7a:	f7ff ff06 	bl	4798a <kscan_gpio_pin_get>
            if (active < 0) {
   47b7e:	2800      	cmp	r0, #0
   47b80:	dbcf      	blt.n	47b22 <kscan_matrix_read+0x82>
            debounce_update(&data->matrix_state[index], active, config->debounce_scan_period_ms,
   47b82:	6d30      	ldr	r0, [r6, #80]	; 0x50
   47b84:	9b01      	ldr	r3, [sp, #4]
   47b86:	69a2      	ldr	r2, [r4, #24]
   47b88:	bf14      	ite	ne
   47b8a:	2101      	movne	r1, #1
   47b8c:	2100      	moveq	r1, #0
   47b8e:	eb00 0048 	add.w	r0, r0, r8, lsl #1
   47b92:	f7ff febe 	bl	47912 <debounce_update>
        for (int j = 0; j < data->inputs.len; j++) {
   47b96:	f10a 0a01 	add.w	sl, sl, #1
   47b9a:	e7d4      	b.n	47b46 <kscan_matrix_read+0xa6>
    return (col * config->rows) + row;
   47b9c:	fb01 3802 	mla	r8, r1, r2, r3
   47ba0:	e7ea      	b.n	47b78 <kscan_matrix_read+0xd8>
            struct debounce_state *state = &data->matrix_state[index];
   47ba2:	6d32      	ldr	r2, [r6, #80]	; 0x50
    return (col * config->rows) + row;
   47ba4:	fb0a 9303 	mla	r3, sl, r3, r9
            struct debounce_state *state = &data->matrix_state[index];
   47ba8:	eb02 0b43 	add.w	fp, r2, r3, lsl #1
            if (debounce_get_changed(state)) {
   47bac:	4658      	mov	r0, fp
   47bae:	f7ff fee8 	bl	47982 <debounce_get_changed>
   47bb2:	b148      	cbz	r0, 47bc8 <kscan_matrix_read+0x128>
                const bool pressed = debounce_is_pressed(state);
   47bb4:	4658      	mov	r0, fp
   47bb6:	f7ff fee0 	bl	4797a <debounce_is_pressed>
                data->callback(dev, r, c, pressed);
   47bba:	f8d6 c00c 	ldr.w	ip, [r6, #12]
                const bool pressed = debounce_is_pressed(state);
   47bbe:	4603      	mov	r3, r0
                data->callback(dev, r, c, pressed);
   47bc0:	4652      	mov	r2, sl
   47bc2:	4649      	mov	r1, r9
   47bc4:	4628      	mov	r0, r5
   47bc6:	47e0      	blx	ip
            continue_scan = continue_scan || debounce_is_active(state);
   47bc8:	b96f      	cbnz	r7, 47be6 <kscan_matrix_read+0x146>
   47bca:	4658      	mov	r0, fp
   47bcc:	f7ff fecd 	bl	4796a <debounce_is_active>
   47bd0:	f000 0701 	and.w	r7, r0, #1
        for (int c = 0; c < config->cols; c++) {
   47bd4:	f10a 0a01 	add.w	sl, sl, #1
   47bd8:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   47bdc:	4552      	cmp	r2, sl
   47bde:	d8e0      	bhi.n	47ba2 <kscan_matrix_read+0x102>
    for (int r = 0; r < config->rows; r++) {
   47be0:	f109 0901 	add.w	r9, r9, #1
   47be4:	e76c      	b.n	47ac0 <kscan_matrix_read+0x20>
            continue_scan = continue_scan || debounce_is_active(state);
   47be6:	2001      	movs	r0, #1
   47be8:	e7f2      	b.n	47bd0 <kscan_matrix_read+0x130>
        for (int c = 0; c < config->cols; c++) {
   47bea:	f04f 0a00 	mov.w	sl, #0
   47bee:	e7f3      	b.n	47bd8 <kscan_matrix_read+0x138>
    k_work_reschedule(&data->work, K_TIMEOUT_ABS_MS(data->scan_time));
   47bf0:	f06f 0201 	mvn.w	r2, #1
   47bf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   47bf8:	e78f      	b.n	47b1a <kscan_matrix_read+0x7a>
    int err = kscan_matrix_interrupt_configure(dev, GPIO_INT_LEVEL_ACTIVE);
   47bfa:	f04f 6198 	mov.w	r1, #79691776	; 0x4c00000
   47bfe:	f7ff ff0d 	bl	47a1c <kscan_matrix_interrupt_configure.isra.0>
    if (err) {
   47c02:	2800      	cmp	r0, #0
   47c04:	d18c      	bne.n	47b20 <kscan_matrix_read+0x80>
    return kscan_matrix_set_all_outputs(dev, 1);
   47c06:	6868      	ldr	r0, [r5, #4]
   47c08:	2101      	movs	r1, #1
   47c0a:	f7ff ff35 	bl	47a78 <kscan_matrix_set_all_outputs.isra.0>
   47c0e:	e787      	b.n	47b20 <kscan_matrix_read+0x80>

00047c10 <kscan_matrix_work_handler>:
    kscan_matrix_read(data->dev);
   47c10:	f850 0c10 	ldr.w	r0, [r0, #-16]
   47c14:	f7ff bf44 	b.w	47aa0 <kscan_matrix_read>

00047c18 <kscan_matrix_interrupt_disable>:
static int kscan_matrix_interrupt_disable(const struct device *dev) {
   47c18:	b510      	push	{r4, lr}
    int err = kscan_matrix_interrupt_configure(dev, GPIO_INT_DISABLE);
   47c1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
static int kscan_matrix_interrupt_disable(const struct device *dev) {
   47c1e:	4604      	mov	r4, r0
    int err = kscan_matrix_interrupt_configure(dev, GPIO_INT_DISABLE);
   47c20:	6900      	ldr	r0, [r0, #16]
   47c22:	f7ff fefb 	bl	47a1c <kscan_matrix_interrupt_configure.isra.0>
   47c26:	4601      	mov	r1, r0
    if (err) {
   47c28:	b920      	cbnz	r0, 47c34 <kscan_matrix_interrupt_disable+0x1c>
    return kscan_matrix_set_all_outputs(dev, 0);
   47c2a:	6860      	ldr	r0, [r4, #4]
}
   47c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return kscan_matrix_set_all_outputs(dev, 0);
   47c30:	f7ff bf22 	b.w	47a78 <kscan_matrix_set_all_outputs.isra.0>
}
   47c34:	bd10      	pop	{r4, pc}

00047c36 <kscan_matrix_irq_callback_handler>:
                                              const gpio_port_pins_t pin) {
   47c36:	b510      	push	{r4, lr}
    struct kscan_matrix_data *data = irq_data->dev->data;
   47c38:	f851 3c04 	ldr.w	r3, [r1, #-4]
   47c3c:	691c      	ldr	r4, [r3, #16]
    kscan_matrix_interrupt_disable(data->dev);
   47c3e:	6820      	ldr	r0, [r4, #0]
   47c40:	f7ff ffea 	bl	47c18 <kscan_matrix_interrupt_disable>
	return z_impl_k_uptime_ticks();
   47c44:	f000 fcd5 	bl	485f2 <z_impl_k_uptime_ticks>
   47c48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   47c4c:	fba0 0302 	umull	r0, r3, r0, r2
   47c50:	fb02 3101 	mla	r1, r2, r1, r3
   47c54:	0bc0      	lsrs	r0, r0, #15
   47c56:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   47c5a:	0bc9      	lsrs	r1, r1, #15
    data->scan_time = k_uptime_get();
   47c5c:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
    k_work_reschedule(&data->work, K_NO_WAIT);
   47c60:	2200      	movs	r2, #0
   47c62:	f104 0010 	add.w	r0, r4, #16
   47c66:	2300      	movs	r3, #0
}
   47c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    k_work_reschedule(&data->work, K_NO_WAIT);
   47c6c:	f7f9 b9b6 	b.w	40fdc <k_work_reschedule>

00047c70 <kscan_matrix_disable>:
static int kscan_matrix_disable(const struct device *dev) {
   47c70:	b510      	push	{r4, lr}
   47c72:	4604      	mov	r4, r0
    k_work_cancel_delayable(&data->work);
   47c74:	6900      	ldr	r0, [r0, #16]
   47c76:	3010      	adds	r0, #16
   47c78:	f000 fb1b 	bl	482b2 <k_work_cancel_delayable>
    return kscan_matrix_interrupt_disable(dev);
   47c7c:	4620      	mov	r0, r4
}
   47c7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return kscan_matrix_interrupt_disable(dev);
   47c82:	f7ff bfc9 	b.w	47c18 <kscan_matrix_interrupt_disable>

00047c86 <kscan_matrix_enable>:
static int kscan_matrix_enable(const struct device *dev) {
   47c86:	b570      	push	{r4, r5, r6, lr}
   47c88:	4604      	mov	r4, r0
    struct kscan_matrix_data *data = dev->data;
   47c8a:	6906      	ldr	r6, [r0, #16]
   47c8c:	f000 fcb1 	bl	485f2 <z_impl_k_uptime_ticks>
   47c90:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   47c94:	fba0 3205 	umull	r3, r2, r0, r5
   47c98:	fb05 2101 	mla	r1, r5, r1, r2
   47c9c:	0bdb      	lsrs	r3, r3, #15
   47c9e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   47ca2:	0bc9      	lsrs	r1, r1, #15
    data->scan_time = k_uptime_get();
   47ca4:	e9c6 3112 	strd	r3, r1, [r6, #72]	; 0x48
    return kscan_matrix_read(dev);
   47ca8:	4620      	mov	r0, r4
}
   47caa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return kscan_matrix_read(dev);
   47cae:	f7ff bef7 	b.w	47aa0 <kscan_matrix_read>

00047cb2 <battery_channel_get>:

#include "battery_common.h"

int battery_channel_get(const struct battery_value *value, enum sensor_channel chan,
                        struct sensor_value *val_out) {
    switch (chan) {
   47cb2:	2927      	cmp	r1, #39	; 0x27
   47cb4:	d004      	beq.n	47cc0 <battery_channel_get+0xe>
   47cb6:	292c      	cmp	r1, #44	; 0x2c
   47cb8:	d012      	beq.n	47ce0 <battery_channel_get+0x2e>
   47cba:	f06f 0085 	mvn.w	r0, #133	; 0x85
   47cbe:	4770      	bx	lr
    case SENSOR_CHAN_GAUGE_VOLTAGE:
        val_out->val1 = value->millivolts / 1000;
   47cc0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   47cc4:	8843      	ldrh	r3, [r0, #2]
   47cc6:	fbb3 f3f1 	udiv	r3, r3, r1
   47cca:	6013      	str	r3, [r2, #0]
        val_out->val2 = (value->millivolts % 1000) * 1000U;
   47ccc:	8843      	ldrh	r3, [r0, #2]
   47cce:	fbb3 f0f1 	udiv	r0, r3, r1
   47cd2:	fb01 3310 	mls	r3, r1, r0, r3
   47cd6:	b29b      	uxth	r3, r3
   47cd8:	434b      	muls	r3, r1
   47cda:	6053      	str	r3, [r2, #4]

    default:
        return -ENOTSUP;
    }

    return 0;
   47cdc:	2000      	movs	r0, #0
}
   47cde:	4770      	bx	lr
        val_out->val1 = value->state_of_charge;
   47ce0:	7903      	ldrb	r3, [r0, #4]
   47ce2:	6013      	str	r3, [r2, #0]
        break;
   47ce4:	2300      	movs	r3, #0
   47ce6:	e7f8      	b.n	47cda <battery_channel_get+0x28>

00047ce8 <lithium_ion_mv_to_pct>:

uint8_t lithium_ion_mv_to_pct(int16_t bat_mv) {
    // Simple linear approximation of a battery based off adafruit's discharge graph:
    // https://learn.adafruit.com/li-ion-and-lipoly-batteries/voltages

    if (bat_mv >= 4200) {
   47ce8:	f241 0367 	movw	r3, #4199	; 0x1067
   47cec:	4298      	cmp	r0, r3
   47cee:	dc0a      	bgt.n	47d06 <lithium_ion_mv_to_pct+0x1e>
        return 100;
    } else if (bat_mv <= 3450) {
   47cf0:	f640 537a 	movw	r3, #3450	; 0xd7a
   47cf4:	4298      	cmp	r0, r3
   47cf6:	dd08      	ble.n	47d0a <lithium_ion_mv_to_pct+0x22>
        return 0;
    }

    return bat_mv * 2 / 15 - 459;
   47cf8:	230f      	movs	r3, #15
   47cfa:	0040      	lsls	r0, r0, #1
   47cfc:	fbb0 f0f3 	udiv	r0, r0, r3
   47d00:	3035      	adds	r0, #53	; 0x35
   47d02:	b2c0      	uxtb	r0, r0
   47d04:	4770      	bx	lr
        return 100;
   47d06:	2064      	movs	r0, #100	; 0x64
   47d08:	4770      	bx	lr
        return 0;
   47d0a:	2000      	movs	r0, #0
   47d0c:	4770      	bx	lr

00047d0e <bvd_channel_get>:
    return battery_channel_get(&drv_data->value, chan, val);
   47d0e:	6900      	ldr	r0, [r0, #16]
   47d10:	3020      	adds	r0, #32
   47d12:	f7ff bfce 	b.w	47cb2 <battery_channel_get>

00047d16 <z_device_state_init>:
}
   47d16:	4770      	bx	lr

00047d18 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   47d18:	b138      	cbz	r0, 47d2a <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   47d1a:	68c3      	ldr	r3, [r0, #12]
   47d1c:	8818      	ldrh	r0, [r3, #0]
   47d1e:	f3c0 0008 	ubfx	r0, r0, #0, #9
   47d22:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   47d26:	4258      	negs	r0, r3
   47d28:	4158      	adcs	r0, r3
}
   47d2a:	4770      	bx	lr

00047d2c <arch_system_halt>:
	__asm__ volatile(
   47d2c:	f04f 0220 	mov.w	r2, #32
   47d30:	f3ef 8311 	mrs	r3, BASEPRI
   47d34:	f382 8812 	msr	BASEPRI_MAX, r2
   47d38:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
   47d3c:	e7fe      	b.n	47d3c <arch_system_halt+0x10>

00047d3e <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   47d3e:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
   47d40:	f7ff fff4 	bl	47d2c <arch_system_halt>

00047d44 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   47d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   47d46:	4605      	mov	r5, r0
   47d48:	460e      	mov	r6, r1
   47d4a:	f04f 0320 	mov.w	r3, #32
   47d4e:	f3ef 8711 	mrs	r7, BASEPRI
   47d52:	f383 8812 	msr	BASEPRI_MAX, r3
   47d56:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   47d5a:	f7f9 fc2b 	bl	415b4 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   47d5e:	4631      	mov	r1, r6
   47d60:	4604      	mov	r4, r0
   47d62:	4628      	mov	r0, r5
   47d64:	f7ff ffeb 	bl	47d3e <k_sys_fatal_error_handler>
	__asm__ volatile(
   47d68:	f387 8811 	msr	BASEPRI, r7
   47d6c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   47d70:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   47d72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   47d76:	f7e2 bcf7 	b.w	2a768 <z_impl_k_thread_abort>

00047d7a <z_early_memset>:
	(void) memset(dst, c, n);
   47d7a:	f7fc bad8 	b.w	4432e <memset>

00047d7e <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   47d7e:	f7fc bacb 	b.w	44318 <memcpy>

00047d82 <k_heap_init>:
{
   47d82:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   47d84:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   47d88:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   47d8c:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   47d8e:	f7fa bbe3 	b.w	42558 <sys_heap_init>

00047d92 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   47d92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   47d96:	b085      	sub	sp, #20
   47d98:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   47d9c:	4607      	mov	r7, r0
   47d9e:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   47da0:	4650      	mov	r0, sl
   47da2:	4621      	mov	r1, r4
{
   47da4:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   47da6:	f000 fc2a 	bl	485fe <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   47daa:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   47dae:	bf08      	it	eq
   47db0:	f1ba 3fff 	cmpeq.w	sl, #4294967295	; 0xffffffff
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   47db4:	4605      	mov	r5, r0
   47db6:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   47db8:	bf04      	itt	eq
   47dba:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
   47dbe:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   47dc2:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
   47dc6:	f04f 0320 	mov.w	r3, #32
   47dca:	f3ef 8411 	mrs	r4, BASEPRI
   47dce:	f383 8812 	msr	BASEPRI_MAX, r3
   47dd2:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   47dd6:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   47dda:	464a      	mov	r2, r9
   47ddc:	4641      	mov	r1, r8
   47dde:	4638      	mov	r0, r7
   47de0:	f7fa fb53 	bl	4248a <sys_heap_aligned_alloc>
   47de4:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   47de6:	f7f9 fd9d 	bl	41924 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   47dea:	9b03      	ldr	r3, [sp, #12]
   47dec:	b13b      	cbz	r3, 47dfe <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   47dee:	f384 8811 	msr	BASEPRI, r4
   47df2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   47df6:	4618      	mov	r0, r3
   47df8:	b005      	add	sp, #20
   47dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   47dfe:	1a28      	subs	r0, r5, r0
   47e00:	eb66 0101 	sbc.w	r1, r6, r1
   47e04:	2801      	cmp	r0, #1
   47e06:	f171 0200 	sbcs.w	r2, r1, #0
   47e0a:	dbf0      	blt.n	47dee <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   47e0c:	e9cd 0100 	strd	r0, r1, [sp]
   47e10:	465a      	mov	r2, fp
   47e12:	4621      	mov	r1, r4
   47e14:	4650      	mov	r0, sl
   47e16:	f7f9 fa39 	bl	4128c <z_pend_curr>
	__asm__ volatile(
   47e1a:	f04f 0320 	mov.w	r3, #32
   47e1e:	f3ef 8411 	mrs	r4, BASEPRI
   47e22:	f383 8812 	msr	BASEPRI_MAX, r3
   47e26:	f3bf 8f6f 	isb	sy
	return k;
   47e2a:	e7d6      	b.n	47dda <k_heap_aligned_alloc+0x48>

00047e2c <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   47e2c:	b538      	push	{r3, r4, r5, lr}
   47e2e:	4604      	mov	r4, r0
   47e30:	f04f 0320 	mov.w	r3, #32
   47e34:	f3ef 8511 	mrs	r5, BASEPRI
   47e38:	f383 8812 	msr	BASEPRI_MAX, r3
   47e3c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   47e40:	f7fa faeb 	bl	4241a <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   47e44:	f104 000c 	add.w	r0, r4, #12
   47e48:	f000 fb5a 	bl	48500 <z_unpend_all>
   47e4c:	b130      	cbz	r0, 47e5c <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   47e4e:	4629      	mov	r1, r5
   47e50:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   47e54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   47e58:	f7f9 ba72 	b.w	41340 <z_reschedule>
	__asm__ volatile(
   47e5c:	f385 8811 	msr	BASEPRI, r5
   47e60:	f3bf 8f6f 	isb	sy
}
   47e64:	bd38      	pop	{r3, r4, r5, pc}

00047e66 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   47e66:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
   47e6a:	4313      	orrs	r3, r2
   47e6c:	f013 0303 	ands.w	r3, r3, #3
   47e70:	d10c      	bne.n	47e8c <create_free_list+0x26>
	slab->free_list = NULL;
   47e72:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   47e74:	6881      	ldr	r1, [r0, #8]
   47e76:	4299      	cmp	r1, r3
   47e78:	d801      	bhi.n	47e7e <create_free_list+0x18>
	return 0;
   47e7a:	2000      	movs	r0, #0
   47e7c:	4770      	bx	lr
		*(char **)p = slab->free_list;
   47e7e:	6941      	ldr	r1, [r0, #20]
   47e80:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   47e82:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
   47e84:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   47e86:	3301      	adds	r3, #1
		p += slab->block_size;
   47e88:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   47e8a:	e7f3      	b.n	47e74 <create_free_list+0xe>
		return -EINVAL;
   47e8c:	f06f 0015 	mvn.w	r0, #21
}
   47e90:	4770      	bx	lr

00047e92 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   47e92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   47e94:	4604      	mov	r4, r0
   47e96:	460d      	mov	r5, r1
	__asm__ volatile(
   47e98:	f04f 0320 	mov.w	r3, #32
   47e9c:	f3ef 8611 	mrs	r6, BASEPRI
   47ea0:	f383 8812 	msr	BASEPRI_MAX, r3
   47ea4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   47ea8:	6947      	ldr	r7, [r0, #20]
   47eaa:	b977      	cbnz	r7, 47eca <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   47eac:	f000 fae2 	bl	48474 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   47eb0:	b158      	cbz	r0, 47eca <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   47eb2:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   47eb4:	6142      	str	r2, [r0, #20]
   47eb6:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   47eb8:	f000 faa5 	bl	48406 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   47ebc:	4631      	mov	r1, r6
   47ebe:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   47ec2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   47ec6:	f7f9 ba3b 	b.w	41340 <z_reschedule>
	**(char ***) mem = slab->free_list;
   47eca:	682b      	ldr	r3, [r5, #0]
   47ecc:	6962      	ldr	r2, [r4, #20]
   47ece:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   47ed0:	682b      	ldr	r3, [r5, #0]
   47ed2:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   47ed4:	69a3      	ldr	r3, [r4, #24]
   47ed6:	3b01      	subs	r3, #1
   47ed8:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   47eda:	f386 8811 	msr	BASEPRI, r6
   47ede:	f3bf 8f6f 	isb	sy
}
   47ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00047ee4 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   47ee4:	f3ef 8005 	mrs	r0, IPSR
}
   47ee8:	3800      	subs	r0, #0
   47eea:	bf18      	it	ne
   47eec:	2001      	movne	r0, #1
   47eee:	4770      	bx	lr

00047ef0 <z_impl_k_thread_name_set>:
}
   47ef0:	f06f 0057 	mvn.w	r0, #87	; 0x57
   47ef4:	4770      	bx	lr

00047ef6 <z_impl_k_thread_start>:
	z_sched_start(thread);
   47ef6:	f7f9 ba35 	b.w	41364 <z_sched_start>

00047efa <z_pm_save_idle_exit>:
{
   47efa:	b508      	push	{r3, lr}
	pm_system_resume();
   47efc:	f7e1 ffae 	bl	29e5c <pm_system_resume>
}
   47f00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   47f04:	f7ff bb97 	b.w	47636 <sys_clock_idle_exit>

00047f08 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   47f08:	f990 300e 	ldrsb.w	r3, [r0, #14]
   47f0c:	428b      	cmp	r3, r1
   47f0e:	d001      	beq.n	47f14 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   47f10:	f7f9 b9d0 	b.w	412b4 <z_set_prio>
}
   47f14:	2000      	movs	r0, #0
   47f16:	4770      	bx	lr

00047f18 <z_impl_k_mutex_init>:
{
   47f18:	4603      	mov	r3, r0
	mutex->owner = NULL;
   47f1a:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   47f1c:	e9c3 0002 	strd	r0, r0, [r3, #8]
   47f20:	e9c3 3300 	strd	r3, r3, [r3]
}
   47f24:	4770      	bx	lr

00047f26 <queue_insert>:
{
   47f26:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   47f2a:	4699      	mov	r9, r3
   47f2c:	4604      	mov	r4, r0
   47f2e:	f89d 3020 	ldrb.w	r3, [sp, #32]
   47f32:	460d      	mov	r5, r1
   47f34:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   47f36:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   47f3a:	f04f 0220 	mov.w	r2, #32
   47f3e:	f3ef 8711 	mrs	r7, BASEPRI
   47f42:	f382 8812 	msr	BASEPRI_MAX, r2
   47f46:	f3bf 8f6f 	isb	sy
	if (is_append) {
   47f4a:	b103      	cbz	r3, 47f4e <queue_insert+0x28>
	return list->tail;
   47f4c:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   47f4e:	4630      	mov	r0, r6
   47f50:	f000 fa90 	bl	48474 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   47f54:	b158      	cbz	r0, 47f6e <queue_insert+0x48>
   47f56:	2300      	movs	r3, #0
   47f58:	67c3      	str	r3, [r0, #124]	; 0x7c
   47f5a:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   47f5e:	f000 fa52 	bl	48406 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   47f62:	4630      	mov	r0, r6
   47f64:	4639      	mov	r1, r7
   47f66:	f7f9 f9eb 	bl	41340 <z_reschedule>
		return 0;
   47f6a:	2000      	movs	r0, #0
   47f6c:	e00c      	b.n	47f88 <queue_insert+0x62>
	if (alloc) {
   47f6e:	f1b9 0f00 	cmp.w	r9, #0
   47f72:	d01b      	beq.n	47fac <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   47f74:	2108      	movs	r1, #8
   47f76:	f7f9 fe37 	bl	41be8 <z_thread_aligned_alloc>
		if (anode == NULL) {
   47f7a:	b938      	cbnz	r0, 47f8c <queue_insert+0x66>
	__asm__ volatile(
   47f7c:	f387 8811 	msr	BASEPRI, r7
   47f80:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   47f84:	f06f 000b 	mvn.w	r0, #11
}
   47f88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   47f8c:	2201      	movs	r2, #1
		anode->data = data;
   47f8e:	f8c0 8004 	str.w	r8, [r0, #4]
   47f92:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   47f94:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   47f96:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   47f9a:	b95d      	cbnz	r5, 47fb4 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   47f9c:	6822      	ldr	r2, [r4, #0]
   47f9e:	430a      	orrs	r2, r1
   47fa0:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   47fa2:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   47fa4:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   47fa6:	b96a      	cbnz	r2, 47fc4 <queue_insert+0x9e>
	list->tail = node;
   47fa8:	6060      	str	r0, [r4, #4]
}
   47faa:	e00b      	b.n	47fc4 <queue_insert+0x9e>
	node->next_and_flags = flags;
   47fac:	f8c8 9000 	str.w	r9, [r8]
}
   47fb0:	4640      	mov	r0, r8
   47fb2:	e7ef      	b.n	47f94 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   47fb4:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   47fb6:	2a03      	cmp	r2, #3
   47fb8:	d810      	bhi.n	47fdc <queue_insert+0xb6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   47fba:	6001      	str	r1, [r0, #0]
	return list->tail;
   47fbc:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   47fbe:	b939      	cbnz	r1, 47fd0 <queue_insert+0xaa>
	list->head = node;
   47fc0:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   47fc4:	2104      	movs	r1, #4
   47fc6:	f104 0010 	add.w	r0, r4, #16
   47fca:	f000 fc97 	bl	488fc <z_handle_obj_poll_events>
   47fce:	e7c8      	b.n	47f62 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   47fd0:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   47fd2:	f002 0203 	and.w	r2, r2, #3
   47fd6:	4302      	orrs	r2, r0
   47fd8:	600a      	str	r2, [r1, #0]
   47fda:	e7e5      	b.n	47fa8 <queue_insert+0x82>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   47fdc:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   47fe0:	430a      	orrs	r2, r1
   47fe2:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   47fe4:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   47fe6:	f002 0203 	and.w	r2, r2, #3
   47fea:	ea40 0302 	orr.w	r3, r0, r2
   47fee:	602b      	str	r3, [r5, #0]
}
   47ff0:	e7e8      	b.n	47fc4 <queue_insert+0x9e>

00047ff2 <z_queue_node_peek>:
{
   47ff2:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   47ff4:	4604      	mov	r4, r0
   47ff6:	b130      	cbz	r0, 48006 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   47ff8:	6802      	ldr	r2, [r0, #0]
   47ffa:	0793      	lsls	r3, r2, #30
   47ffc:	d003      	beq.n	48006 <z_queue_node_peek+0x14>
		ret = anode->data;
   47ffe:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   48000:	b109      	cbz	r1, 48006 <z_queue_node_peek+0x14>
			k_free(anode);
   48002:	f000 fca1 	bl	48948 <k_free>
}
   48006:	4620      	mov	r0, r4
   48008:	bd10      	pop	{r4, pc}

0004800a <z_impl_k_queue_init>:
	list->head = NULL;
   4800a:	2300      	movs	r3, #0
	list->tail = NULL;
   4800c:	e9c0 3300 	strd	r3, r3, [r0]
   48010:	f100 0308 	add.w	r3, r0, #8
   48014:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   48018:	f100 0310 	add.w	r3, r0, #16
   4801c:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   48020:	4770      	bx	lr

00048022 <z_impl_k_queue_cancel_wait>:
{
   48022:	b570      	push	{r4, r5, r6, lr}
   48024:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   48026:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   4802a:	f04f 0320 	mov.w	r3, #32
   4802e:	f3ef 8611 	mrs	r6, BASEPRI
   48032:	f383 8812 	msr	BASEPRI_MAX, r3
   48036:	f3bf 8f6f 	isb	sy
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   4803a:	4628      	mov	r0, r5
   4803c:	f000 fa1a 	bl	48474 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   48040:	b120      	cbz	r0, 4804c <z_impl_k_queue_cancel_wait+0x2a>
   48042:	2200      	movs	r2, #0
   48044:	67c2      	str	r2, [r0, #124]	; 0x7c
	thread->base.swap_data = data;
   48046:	6142      	str	r2, [r0, #20]
	z_ready_thread(thread);
   48048:	f000 f9dd 	bl	48406 <z_ready_thread>
	z_handle_obj_poll_events(&queue->poll_events, state);
   4804c:	f104 0010 	add.w	r0, r4, #16
   48050:	2108      	movs	r1, #8
   48052:	f000 fc53 	bl	488fc <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   48056:	4631      	mov	r1, r6
   48058:	4628      	mov	r0, r5
}
   4805a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&queue->lock, key);
   4805e:	f7f9 b96f 	b.w	41340 <z_reschedule>

00048062 <k_queue_append>:
{
   48062:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   48064:	2301      	movs	r3, #1
   48066:	9300      	str	r3, [sp, #0]
   48068:	2300      	movs	r3, #0
{
   4806a:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   4806c:	4619      	mov	r1, r3
   4806e:	f7ff ff5a 	bl	47f26 <queue_insert>
}
   48072:	b003      	add	sp, #12
   48074:	f85d fb04 	ldr.w	pc, [sp], #4

00048078 <k_queue_prepend>:
{
   48078:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   4807a:	2300      	movs	r3, #0
{
   4807c:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   4807e:	9300      	str	r3, [sp, #0]
   48080:	4619      	mov	r1, r3
   48082:	f7ff ff50 	bl	47f26 <queue_insert>
}
   48086:	b003      	add	sp, #12
   48088:	f85d fb04 	ldr.w	pc, [sp], #4

0004808c <k_queue_append_list>:
{
   4808c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   48090:	4680      	mov	r8, r0
   48092:	4615      	mov	r5, r2
	CHECKIF(head == NULL || tail == NULL) {
   48094:	460c      	mov	r4, r1
   48096:	b3a9      	cbz	r1, 48104 <k_queue_append_list+0x78>
   48098:	b3a2      	cbz	r2, 48104 <k_queue_append_list+0x78>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   4809a:	f100 0608 	add.w	r6, r0, #8
   4809e:	f04f 0320 	mov.w	r3, #32
   480a2:	f3ef 8711 	mrs	r7, BASEPRI
   480a6:	f383 8812 	msr	BASEPRI_MAX, r3
   480aa:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   480ae:	4630      	mov	r0, r6
   480b0:	f000 f9e0 	bl	48474 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   480b4:	b168      	cbz	r0, 480d2 <k_queue_append_list+0x46>
   480b6:	f04f 0900 	mov.w	r9, #0
   480ba:	6144      	str	r4, [r0, #20]
   480bc:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   480c0:	f000 f9a1 	bl	48406 <z_ready_thread>
		head = *(void **)head;
   480c4:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   480c6:	4630      	mov	r0, r6
   480c8:	f000 f9d4 	bl	48474 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   480cc:	b144      	cbz	r4, 480e0 <k_queue_append_list+0x54>
   480ce:	2800      	cmp	r0, #0
   480d0:	d1f3      	bne.n	480ba <k_queue_append_list+0x2e>
	return list->tail;
   480d2:	f8d8 3004 	ldr.w	r3, [r8, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   480d6:	b97b      	cbnz	r3, 480f8 <k_queue_append_list+0x6c>
	list->head = node;
   480d8:	f8c8 4000 	str.w	r4, [r8]
	list->tail = node;
   480dc:	f8c8 5004 	str.w	r5, [r8, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   480e0:	2104      	movs	r1, #4
   480e2:	f108 0010 	add.w	r0, r8, #16
   480e6:	f000 fc09 	bl	488fc <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   480ea:	4630      	mov	r0, r6
   480ec:	4639      	mov	r1, r7
   480ee:	f7f9 f927 	bl	41340 <z_reschedule>
	return 0;
   480f2:	2000      	movs	r0, #0
}
   480f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   480f8:	681a      	ldr	r2, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   480fa:	f002 0203 	and.w	r2, r2, #3
   480fe:	4314      	orrs	r4, r2
   48100:	601c      	str	r4, [r3, #0]
}
   48102:	e7eb      	b.n	480dc <k_queue_append_list+0x50>
		return -EINVAL;
   48104:	f06f 0015 	mvn.w	r0, #21
   48108:	e7f4      	b.n	480f4 <k_queue_append_list+0x68>

0004810a <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   4810a:	b15a      	cbz	r2, 48124 <z_impl_k_sem_init+0x1a>
   4810c:	428a      	cmp	r2, r1
   4810e:	d309      	bcc.n	48124 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   48110:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   48114:	e9c0 1202 	strd	r1, r2, [r0, #8]
   48118:	e9c0 0000 	strd	r0, r0, [r0]
   4811c:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   48120:	2000      	movs	r0, #0
   48122:	4770      	bx	lr
		return -EINVAL;
   48124:	f06f 0015 	mvn.w	r0, #21
}
   48128:	4770      	bx	lr

0004812a <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   4812a:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   4812c:	2301      	movs	r3, #1
   4812e:	408b      	lsls	r3, r1
   48130:	ea22 0303 	bic.w	r3, r2, r3
   48134:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   48136:	fa22 f001 	lsr.w	r0, r2, r1
}
   4813a:	f000 0001 	and.w	r0, r0, #1
   4813e:	4770      	bx	lr

00048140 <unschedule_locked>:
{
   48140:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   48142:	2103      	movs	r1, #3
{
   48144:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   48146:	300c      	adds	r0, #12
   48148:	f7ff ffef 	bl	4812a <flag_test_and_clear>
   4814c:	4604      	mov	r4, r0
   4814e:	b118      	cbz	r0, 48158 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   48150:	f105 0010 	add.w	r0, r5, #16
   48154:	f000 fa07 	bl	48566 <z_abort_timeout>
}
   48158:	4620      	mov	r0, r4
   4815a:	bd38      	pop	{r3, r4, r5, pc}

0004815c <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   4815c:	b120      	cbz	r0, 48168 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   4815e:	2200      	movs	r2, #0
   48160:	4611      	mov	r1, r2
   48162:	3088      	adds	r0, #136	; 0x88
   48164:	f000 b9dc 	b.w	48520 <z_sched_wake>
}
   48168:	4770      	bx	lr

0004816a <cancel_async_locked>:
{
   4816a:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   4816c:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   4816e:	f3c3 0640 	ubfx	r6, r3, #1, #1
   48172:	079b      	lsls	r3, r3, #30
{
   48174:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   48176:	d416      	bmi.n	481a6 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   48178:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   4817a:	2102      	movs	r1, #2
   4817c:	300c      	adds	r0, #12
   4817e:	f7ff ffd4 	bl	4812a <flag_test_and_clear>
   48182:	b180      	cbz	r0, 481a6 <cancel_async_locked+0x3c>
	return list->head;
   48184:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   48188:	b16a      	cbz	r2, 481a6 <cancel_async_locked+0x3c>
   4818a:	4294      	cmp	r4, r2
   4818c:	d11d      	bne.n	481ca <cancel_async_locked+0x60>
	return node->next;
   4818e:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   48190:	b99e      	cbnz	r6, 481ba <cancel_async_locked+0x50>
   48192:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
	list->head = node;
   48196:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   4819a:	429c      	cmp	r4, r3
   4819c:	d101      	bne.n	481a2 <cancel_async_locked+0x38>
	list->tail = node;
   4819e:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
	parent->next = child;
   481a2:	2300      	movs	r3, #0
   481a4:	6023      	str	r3, [r4, #0]
	return *flagp;
   481a6:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   481a8:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   481ac:	bf1e      	ittt	ne
   481ae:	f043 0302 	orrne.w	r3, r3, #2
   481b2:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   481b4:	f040 0002 	orrne.w	r0, r0, #2
}
   481b8:	bd70      	pop	{r4, r5, r6, pc}
   481ba:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   481bc:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
   481c0:	4294      	cmp	r4, r2
	list->tail = node;
   481c2:	bf08      	it	eq
   481c4:	f8c5 6084 	streq.w	r6, [r5, #132]	; 0x84
}
   481c8:	e7eb      	b.n	481a2 <cancel_async_locked+0x38>
	return node->next;
   481ca:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   481cc:	6812      	ldr	r2, [r2, #0]
   481ce:	e7db      	b.n	48188 <cancel_async_locked+0x1e>

000481d0 <work_timeout>:
{
   481d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   481d2:	4604      	mov	r4, r0
   481d4:	f04f 0320 	mov.w	r3, #32
   481d8:	f3ef 8511 	mrs	r5, BASEPRI
   481dc:	f383 8812 	msr	BASEPRI_MAX, r3
   481e0:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   481e4:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   481e6:	f1a0 0610 	sub.w	r6, r0, #16
   481ea:	2103      	movs	r1, #3
   481ec:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   481ee:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   481f0:	f7ff ff9b 	bl	4812a <flag_test_and_clear>
   481f4:	b128      	cbz	r0, 48202 <work_timeout+0x32>
		queue = dw->queue;
   481f6:	69a3      	ldr	r3, [r4, #24]
   481f8:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   481fa:	a901      	add	r1, sp, #4
   481fc:	4630      	mov	r0, r6
   481fe:	f7f8 fdf7 	bl	40df0 <submit_to_queue_locked>
	__asm__ volatile(
   48202:	f385 8811 	msr	BASEPRI, r5
   48206:	f3bf 8f6f 	isb	sy
}
   4820a:	b002      	add	sp, #8
   4820c:	bd70      	pop	{r4, r5, r6, pc}

0004820e <k_work_init>:
{
   4820e:	b538      	push	{r3, r4, r5, lr}
   48210:	4604      	mov	r4, r0
   48212:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   48214:	2210      	movs	r2, #16
   48216:	2100      	movs	r1, #0
   48218:	f7fc f889 	bl	4432e <memset>
   4821c:	6065      	str	r5, [r4, #4]
}
   4821e:	bd38      	pop	{r3, r4, r5, pc}

00048220 <k_work_busy_get>:
	__asm__ volatile(
   48220:	f04f 0220 	mov.w	r2, #32
   48224:	f3ef 8311 	mrs	r3, BASEPRI
   48228:	f382 8812 	msr	BASEPRI_MAX, r2
   4822c:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   48230:	68c0      	ldr	r0, [r0, #12]
   48232:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   48236:	f383 8811 	msr	BASEPRI, r3
   4823a:	f3bf 8f6f 	isb	sy
}
   4823e:	4770      	bx	lr

00048240 <z_work_submit_to_queue>:
{
   48240:	b513      	push	{r0, r1, r4, lr}
   48242:	9001      	str	r0, [sp, #4]
   48244:	4608      	mov	r0, r1
	__asm__ volatile(
   48246:	f04f 0320 	mov.w	r3, #32
   4824a:	f3ef 8411 	mrs	r4, BASEPRI
   4824e:	f383 8812 	msr	BASEPRI_MAX, r3
   48252:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   48256:	a901      	add	r1, sp, #4
   48258:	f7f8 fdca 	bl	40df0 <submit_to_queue_locked>
	__asm__ volatile(
   4825c:	f384 8811 	msr	BASEPRI, r4
   48260:	f3bf 8f6f 	isb	sy
}
   48264:	b002      	add	sp, #8
   48266:	bd10      	pop	{r4, pc}

00048268 <k_work_submit_to_queue>:
{
   48268:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   4826a:	f7ff ffe9 	bl	48240 <z_work_submit_to_queue>
	if (ret > 0) {
   4826e:	1e04      	subs	r4, r0, #0
   48270:	dd09      	ble.n	48286 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   48272:	f04f 0320 	mov.w	r3, #32
   48276:	f3ef 8011 	mrs	r0, BASEPRI
   4827a:	f383 8812 	msr	BASEPRI_MAX, r3
   4827e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   48282:	f000 f927 	bl	484d4 <z_reschedule_irqlock>
}
   48286:	4620      	mov	r0, r4
   48288:	bd10      	pop	{r4, pc}

0004828a <k_work_queue_init>:
{
   4828a:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   4828c:	22a0      	movs	r2, #160	; 0xa0
   4828e:	2100      	movs	r1, #0
   48290:	f7fc f84d 	bl	4432e <memset>
}
   48294:	bd08      	pop	{r3, pc}

00048296 <k_work_init_delayable>:
{
   48296:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   48298:	2230      	movs	r2, #48	; 0x30
{
   4829a:	4604      	mov	r4, r0
   4829c:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   4829e:	2100      	movs	r1, #0
   482a0:	f7fc f845 	bl	4432e <memset>
   482a4:	f44f 7380 	mov.w	r3, #256	; 0x100
   482a8:	6065      	str	r5, [r4, #4]
   482aa:	60e3      	str	r3, [r4, #12]
}
   482ac:	bd38      	pop	{r3, r4, r5, pc}

000482ae <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   482ae:	f7ff bfb7 	b.w	48220 <k_work_busy_get>

000482b2 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   482b2:	b538      	push	{r3, r4, r5, lr}
   482b4:	4604      	mov	r4, r0
   482b6:	f04f 0320 	mov.w	r3, #32
   482ba:	f3ef 8511 	mrs	r5, BASEPRI
   482be:	f383 8812 	msr	BASEPRI_MAX, r3
   482c2:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   482c6:	f7ff ff3b 	bl	48140 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   482ca:	4620      	mov	r0, r4
   482cc:	f7ff ff4d 	bl	4816a <cancel_async_locked>
	__asm__ volatile(
   482d0:	f385 8811 	msr	BASEPRI, r5
   482d4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   482d8:	bd38      	pop	{r3, r4, r5, pc}

000482da <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   482da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   482dc:	4604      	mov	r4, r0
   482de:	460d      	mov	r5, r1
	__asm__ volatile(
   482e0:	f04f 0320 	mov.w	r3, #32
   482e4:	f3ef 8611 	mrs	r6, BASEPRI
   482e8:	f383 8812 	msr	BASEPRI_MAX, r3
   482ec:	f3bf 8f6f 	isb	sy
	return *flagp;
   482f0:	68c3      	ldr	r3, [r0, #12]
   482f2:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   482f6:	2b00      	cmp	r3, #0
   482f8:	bf14      	ite	ne
   482fa:	2701      	movne	r7, #1
   482fc:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   482fe:	d105      	bne.n	4830c <k_work_cancel_delayable_sync+0x32>
	__asm__ volatile(
   48300:	f386 8811 	msr	BASEPRI, r6
   48304:	f3bf 8f6f 	isb	sy
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   48308:	4638      	mov	r0, r7
   4830a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	(void)unschedule_locked(dwork);
   4830c:	f7ff ff18 	bl	48140 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   48310:	4620      	mov	r0, r4
   48312:	f7ff ff2a 	bl	4816a <cancel_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   48316:	4629      	mov	r1, r5
   48318:	4620      	mov	r0, r4
   4831a:	f7f8 fd4b 	bl	40db4 <cancel_sync_locked>
   4831e:	f386 8811 	msr	BASEPRI, r6
   48322:	f3bf 8f6f 	isb	sy
	if (need_wait) {
   48326:	2800      	cmp	r0, #0
   48328:	d0ee      	beq.n	48308 <k_work_cancel_delayable_sync+0x2e>
	return z_impl_k_sem_take(sem, timeout);
   4832a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4832e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   48332:	f105 0008 	add.w	r0, r5, #8
   48336:	f7f8 fc3d 	bl	40bb4 <z_impl_k_sem_take>
   4833a:	e7e5      	b.n	48308 <k_work_cancel_delayable_sync+0x2e>

0004833c <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   4833c:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   48340:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   48342:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   48344:	2300      	movs	r3, #0
	node->prev = NULL;
   48346:	e9c0 3300 	strd	r3, r3, [r0]
}
   4834a:	4770      	bx	lr

0004834c <unpend_thread_no_timeout>:
{
   4834c:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   4834e:	f7ff fff5 	bl	4833c <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   48352:	7b43      	ldrb	r3, [r0, #13]
   48354:	f023 0302 	bic.w	r3, r3, #2
   48358:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   4835a:	2300      	movs	r3, #0
   4835c:	6083      	str	r3, [r0, #8]
}
   4835e:	bd08      	pop	{r3, pc}

00048360 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   48360:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   48364:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   48368:	4283      	cmp	r3, r0
		return b2 - b1;
   4836a:	bf14      	ite	ne
   4836c:	1ac0      	subne	r0, r0, r3
	return 0;
   4836e:	2000      	moveq	r0, #0
}
   48370:	4770      	bx	lr

00048372 <z_thread_timeout>:
{
   48372:	b510      	push	{r4, lr}
   48374:	4601      	mov	r1, r0
	__asm__ volatile(
   48376:	f04f 0320 	mov.w	r3, #32
   4837a:	f3ef 8411 	mrs	r4, BASEPRI
   4837e:	f383 8812 	msr	BASEPRI_MAX, r3
   48382:	f3bf 8f6f 	isb	sy
		if (!killed) {
   48386:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   4838a:	f013 0f28 	tst.w	r3, #40	; 0x28
   4838e:	d10d      	bne.n	483ac <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   48390:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   48394:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   48396:	b10b      	cbz	r3, 4839c <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   48398:	f7ff ffd8 	bl	4834c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   4839c:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   483a0:	f023 0314 	bic.w	r3, r3, #20
   483a4:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   483a8:	f7f8 fe8a 	bl	410c0 <ready_thread>
	__asm__ volatile(
   483ac:	f384 8811 	msr	BASEPRI, r4
   483b0:	f3bf 8f6f 	isb	sy
}
   483b4:	bd10      	pop	{r4, pc}

000483b6 <add_to_waitq_locked>:
{
   483b6:	b538      	push	{r3, r4, r5, lr}
   483b8:	4604      	mov	r4, r0
   483ba:	460d      	mov	r5, r1
	unready_thread(thread);
   483bc:	f7f8 feb4 	bl	41128 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   483c0:	7b63      	ldrb	r3, [r4, #13]
   483c2:	f043 0302 	orr.w	r3, r3, #2
   483c6:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   483c8:	b1e5      	cbz	r5, 48404 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   483ca:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   483cc:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   483ce:	429d      	cmp	r5, r3
   483d0:	d109      	bne.n	483e6 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   483d2:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   483d4:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   483d8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   483da:	606c      	str	r4, [r5, #4]
}
   483dc:	e012      	b.n	48404 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   483de:	686a      	ldr	r2, [r5, #4]
   483e0:	4293      	cmp	r3, r2
   483e2:	d0f6      	beq.n	483d2 <add_to_waitq_locked+0x1c>
   483e4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   483e6:	2b00      	cmp	r3, #0
   483e8:	d0f3      	beq.n	483d2 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   483ea:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   483ee:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   483f2:	428a      	cmp	r2, r1
   483f4:	d0f3      	beq.n	483de <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   483f6:	4291      	cmp	r1, r2
   483f8:	ddf1      	ble.n	483de <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   483fa:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   483fc:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   48400:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   48402:	605c      	str	r4, [r3, #4]
}
   48404:	bd38      	pop	{r3, r4, r5, pc}

00048406 <z_ready_thread>:
{
   48406:	b510      	push	{r4, lr}
	__asm__ volatile(
   48408:	f04f 0320 	mov.w	r3, #32
   4840c:	f3ef 8411 	mrs	r4, BASEPRI
   48410:	f383 8812 	msr	BASEPRI_MAX, r3
   48414:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   48418:	f7f8 fe52 	bl	410c0 <ready_thread>
	__asm__ volatile(
   4841c:	f384 8811 	msr	BASEPRI, r4
   48420:	f3bf 8f6f 	isb	sy
}
   48424:	bd10      	pop	{r4, pc}

00048426 <z_unpend_thread_no_timeout>:
{
   48426:	b508      	push	{r3, lr}
	__asm__ volatile(
   48428:	f04f 0320 	mov.w	r3, #32
   4842c:	f3ef 8111 	mrs	r1, BASEPRI
   48430:	f383 8812 	msr	BASEPRI_MAX, r3
   48434:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   48438:	f7ff ff88 	bl	4834c <unpend_thread_no_timeout>
	__asm__ volatile(
   4843c:	f381 8811 	msr	BASEPRI, r1
   48440:	f3bf 8f6f 	isb	sy
}
   48444:	bd08      	pop	{r3, pc}

00048446 <z_unpend1_no_timeout>:
{
   48446:	b508      	push	{r3, lr}
   48448:	4603      	mov	r3, r0
	__asm__ volatile(
   4844a:	f04f 0220 	mov.w	r2, #32
   4844e:	f3ef 8111 	mrs	r1, BASEPRI
   48452:	f382 8812 	msr	BASEPRI_MAX, r2
   48456:	f3bf 8f6f 	isb	sy
	return list->head == list;
   4845a:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   4845c:	4283      	cmp	r3, r0
   4845e:	d007      	beq.n	48470 <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
   48460:	b108      	cbz	r0, 48466 <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
   48462:	f7ff ff73 	bl	4834c <unpend_thread_no_timeout>
	__asm__ volatile(
   48466:	f381 8811 	msr	BASEPRI, r1
   4846a:	f3bf 8f6f 	isb	sy
}
   4846e:	bd08      	pop	{r3, pc}
   48470:	2000      	movs	r0, #0
   48472:	e7f8      	b.n	48466 <z_unpend1_no_timeout+0x20>

00048474 <z_unpend_first_thread>:
{
   48474:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   48476:	f04f 0320 	mov.w	r3, #32
   4847a:	f3ef 8511 	mrs	r5, BASEPRI
   4847e:	f383 8812 	msr	BASEPRI_MAX, r3
   48482:	f3bf 8f6f 	isb	sy
	return list->head == list;
   48486:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   48488:	42a0      	cmp	r0, r4
   4848a:	d00d      	beq.n	484a8 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   4848c:	b134      	cbz	r4, 4849c <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   4848e:	4620      	mov	r0, r4
   48490:	f7ff ff5c 	bl	4834c <unpend_thread_no_timeout>
   48494:	f104 0018 	add.w	r0, r4, #24
   48498:	f000 f865 	bl	48566 <z_abort_timeout>
	__asm__ volatile(
   4849c:	f385 8811 	msr	BASEPRI, r5
   484a0:	f3bf 8f6f 	isb	sy
}
   484a4:	4620      	mov	r0, r4
   484a6:	bd38      	pop	{r3, r4, r5, pc}
   484a8:	2400      	movs	r4, #0
   484aa:	e7f7      	b.n	4849c <z_unpend_first_thread+0x28>

000484ac <z_unpend_thread>:
{
   484ac:	b510      	push	{r4, lr}
	__asm__ volatile(
   484ae:	f04f 0320 	mov.w	r3, #32
   484b2:	f3ef 8411 	mrs	r4, BASEPRI
   484b6:	f383 8812 	msr	BASEPRI_MAX, r3
   484ba:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   484be:	f7ff ff45 	bl	4834c <unpend_thread_no_timeout>
	__asm__ volatile(
   484c2:	f384 8811 	msr	BASEPRI, r4
   484c6:	f3bf 8f6f 	isb	sy
}
   484ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   484ce:	3018      	adds	r0, #24
   484d0:	f000 b849 	b.w	48566 <z_abort_timeout>

000484d4 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   484d4:	4603      	mov	r3, r0
   484d6:	b920      	cbnz	r0, 484e2 <z_reschedule_irqlock+0xe>
   484d8:	f3ef 8205 	mrs	r2, IPSR
   484dc:	b90a      	cbnz	r2, 484e2 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   484de:	f7e1 bf89 	b.w	2a3f4 <arch_swap>
   484e2:	f383 8811 	msr	BASEPRI, r3
   484e6:	f3bf 8f6f 	isb	sy
}
   484ea:	4770      	bx	lr

000484ec <z_reschedule_unlocked>:
	__asm__ volatile(
   484ec:	f04f 0320 	mov.w	r3, #32
   484f0:	f3ef 8011 	mrs	r0, BASEPRI
   484f4:	f383 8812 	msr	BASEPRI_MAX, r3
   484f8:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   484fc:	f7ff bfea 	b.w	484d4 <z_reschedule_irqlock>

00048500 <z_unpend_all>:
{
   48500:	b538      	push	{r3, r4, r5, lr}
   48502:	4605      	mov	r5, r0
	int need_sched = 0;
   48504:	2000      	movs	r0, #0
	return list->head == list;
   48506:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   48508:	42a5      	cmp	r5, r4
   4850a:	d000      	beq.n	4850e <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   4850c:	b904      	cbnz	r4, 48510 <z_unpend_all+0x10>
}
   4850e:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   48510:	4620      	mov	r0, r4
   48512:	f7ff ffcb 	bl	484ac <z_unpend_thread>
		z_ready_thread(thread);
   48516:	4620      	mov	r0, r4
   48518:	f7ff ff75 	bl	48406 <z_ready_thread>
		need_sched = 1;
   4851c:	2001      	movs	r0, #1
   4851e:	e7f2      	b.n	48506 <z_unpend_all+0x6>

00048520 <z_sched_wake>:
{
   48520:	b538      	push	{r3, r4, r5, lr}
   48522:	f04f 0320 	mov.w	r3, #32
   48526:	f3ef 8511 	mrs	r5, BASEPRI
   4852a:	f383 8812 	msr	BASEPRI_MAX, r3
   4852e:	f3bf 8f6f 	isb	sy
	return list->head == list;
   48532:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   48534:	42a0      	cmp	r0, r4
   48536:	d012      	beq.n	4855e <z_sched_wake+0x3e>
		if (thread != NULL) {
   48538:	b19c      	cbz	r4, 48562 <z_sched_wake+0x42>
   4853a:	67e1      	str	r1, [r4, #124]	; 0x7c
   4853c:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   4853e:	4620      	mov	r0, r4
   48540:	f7ff ff04 	bl	4834c <unpend_thread_no_timeout>
   48544:	f104 0018 	add.w	r0, r4, #24
   48548:	f000 f80d 	bl	48566 <z_abort_timeout>
			ready_thread(thread);
   4854c:	4620      	mov	r0, r4
   4854e:	f7f8 fdb7 	bl	410c0 <ready_thread>
			ret = true;
   48552:	2001      	movs	r0, #1
	__asm__ volatile(
   48554:	f385 8811 	msr	BASEPRI, r5
   48558:	f3bf 8f6f 	isb	sy
}
   4855c:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   4855e:	2000      	movs	r0, #0
   48560:	e7f8      	b.n	48554 <z_sched_wake+0x34>
   48562:	4620      	mov	r0, r4
   48564:	e7f6      	b.n	48554 <z_sched_wake+0x34>

00048566 <z_abort_timeout>:
{
   48566:	b510      	push	{r4, lr}
	__asm__ volatile(
   48568:	f04f 0220 	mov.w	r2, #32
   4856c:	f3ef 8411 	mrs	r4, BASEPRI
   48570:	f382 8812 	msr	BASEPRI_MAX, r2
   48574:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   48578:	6803      	ldr	r3, [r0, #0]
   4857a:	b13b      	cbz	r3, 4858c <z_abort_timeout+0x26>
			remove_timeout(to);
   4857c:	f7f9 f8de 	bl	4173c <remove_timeout>
			ret = 0;
   48580:	2000      	movs	r0, #0
	__asm__ volatile(
   48582:	f384 8811 	msr	BASEPRI, r4
   48586:	f3bf 8f6f 	isb	sy
}
   4858a:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   4858c:	f06f 0015 	mvn.w	r0, #21
   48590:	e7f7      	b.n	48582 <z_abort_timeout+0x1c>

00048592 <z_get_next_timeout_expiry>:
{
   48592:	b510      	push	{r4, lr}
	__asm__ volatile(
   48594:	f04f 0320 	mov.w	r3, #32
   48598:	f3ef 8411 	mrs	r4, BASEPRI
   4859c:	f383 8812 	msr	BASEPRI_MAX, r3
   485a0:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   485a4:	f7f9 f8a2 	bl	416ec <next_timeout>
	__asm__ volatile(
   485a8:	f384 8811 	msr	BASEPRI, r4
   485ac:	f3bf 8f6f 	isb	sy
}
   485b0:	bd10      	pop	{r4, pc}

000485b2 <z_set_timeout_expiry>:
{
   485b2:	b570      	push	{r4, r5, r6, lr}
   485b4:	4604      	mov	r4, r0
   485b6:	460d      	mov	r5, r1
	__asm__ volatile(
   485b8:	f04f 0320 	mov.w	r3, #32
   485bc:	f3ef 8611 	mrs	r6, BASEPRI
   485c0:	f383 8812 	msr	BASEPRI_MAX, r3
   485c4:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   485c8:	f7f9 f890 	bl	416ec <next_timeout>
			      || (ticks <= next_to);
   485cc:	2801      	cmp	r0, #1
   485ce:	dd07      	ble.n	485e0 <z_set_timeout_expiry+0x2e>
   485d0:	42a0      	cmp	r0, r4
   485d2:	db05      	blt.n	485e0 <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   485d4:	42a0      	cmp	r0, r4
   485d6:	4629      	mov	r1, r5
   485d8:	bfa8      	it	ge
   485da:	4620      	movge	r0, r4
   485dc:	f7f5 ffe0 	bl	3e5a0 <sys_clock_set_timeout>
	__asm__ volatile(
   485e0:	f386 8811 	msr	BASEPRI, r6
   485e4:	f3bf 8f6f 	isb	sy
}
   485e8:	bd70      	pop	{r4, r5, r6, pc}

000485ea <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   485ea:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   485ec:	f7f9 f99a 	bl	41924 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   485f0:	bd08      	pop	{r3, pc}

000485f2 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   485f2:	f7f9 b997 	b.w	41924 <sys_clock_tick_get>

000485f6 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   485f6:	b108      	cbz	r0, 485fc <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   485f8:	f7e2 b9b4 	b.w	2a964 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   485fc:	4770      	bx	lr

000485fe <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   485fe:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   48602:	bf08      	it	eq
   48604:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   48608:	b538      	push	{r3, r4, r5, lr}
   4860a:	460c      	mov	r4, r1
   4860c:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   4860e:	d014      	beq.n	4863a <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   48610:	4308      	orrs	r0, r1
   48612:	d103      	bne.n	4861c <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   48614:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   48618:	f7f9 b984 	b.w	41924 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   4861c:	f06f 0001 	mvn.w	r0, #1
   48620:	1b40      	subs	r0, r0, r5
   48622:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   48626:	eb63 0101 	sbc.w	r1, r3, r1
   4862a:	2900      	cmp	r1, #0
   4862c:	da04      	bge.n	48638 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   4862e:	f7f9 f979 	bl	41924 <sys_clock_tick_get>
   48632:	1940      	adds	r0, r0, r5
   48634:	eb41 0104 	adc.w	r1, r1, r4
}
   48638:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   4863a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   4863e:	4601      	mov	r1, r0
   48640:	e7fa      	b.n	48638 <sys_clock_timeout_end_calc+0x3a>

00048642 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   48642:	b510      	push	{r4, lr}
   48644:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   48646:	f7ff ff8e 	bl	48566 <z_abort_timeout>

	if (inactive) {
   4864a:	b9b0      	cbnz	r0, 4867a <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   4864c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   4864e:	b10b      	cbz	r3, 48654 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   48650:	4620      	mov	r0, r4
   48652:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   48654:	f104 0018 	add.w	r0, r4, #24
   48658:	f7ff fef5 	bl	48446 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   4865c:	b168      	cbz	r0, 4867a <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   4865e:	f7ff fed2 	bl	48406 <z_ready_thread>
	__asm__ volatile(
   48662:	f04f 0320 	mov.w	r3, #32
   48666:	f3ef 8011 	mrs	r0, BASEPRI
   4866a:	f383 8812 	msr	BASEPRI_MAX, r3
   4866e:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   48672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   48676:	f7ff bf2d 	b.w	484d4 <z_reschedule_irqlock>
   4867a:	bd10      	pop	{r4, pc}

0004867c <add_event>:
{
   4867c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4867e:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   48680:	e9d0 1300 	ldrd	r1, r3, [r0]
   48684:	4288      	cmp	r0, r1
   48686:	4604      	mov	r4, r0
   48688:	d105      	bne.n	48696 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   4868a:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   4868c:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   48690:	601d      	str	r5, [r3, #0]
	list->tail = node;
   48692:	6065      	str	r5, [r4, #4]
   48694:	e01d      	b.n	486d2 <add_event+0x56>
	if ((pending == NULL) ||
   48696:	2b00      	cmp	r3, #0
   48698:	d0f7      	beq.n	4868a <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   4869a:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   4869c:	b100      	cbz	r0, 486a0 <add_event+0x24>
   4869e:	3860      	subs	r0, #96	; 0x60
   486a0:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   486a4:	4639      	mov	r1, r7
   486a6:	f7ff fe5b 	bl	48360 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   486aa:	2800      	cmp	r0, #0
   486ac:	dced      	bgt.n	4868a <add_event+0xe>
	return list->head == list;
   486ae:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   486b0:	42b4      	cmp	r4, r6
   486b2:	d0ea      	beq.n	4868a <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   486b4:	2e00      	cmp	r6, #0
   486b6:	d0e8      	beq.n	4868a <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   486b8:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   486ba:	b101      	cbz	r1, 486be <add_event+0x42>
   486bc:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   486be:	4638      	mov	r0, r7
   486c0:	f7ff fe4e 	bl	48360 <z_sched_prio_cmp>
   486c4:	2800      	cmp	r0, #0
   486c6:	dd05      	ble.n	486d4 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   486c8:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   486ca:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   486ce:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   486d0:	6075      	str	r5, [r6, #4]
}
   486d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   486d4:	6863      	ldr	r3, [r4, #4]
   486d6:	429e      	cmp	r6, r3
   486d8:	d0d7      	beq.n	4868a <add_event+0xe>
   486da:	6836      	ldr	r6, [r6, #0]
   486dc:	e7ea      	b.n	486b4 <add_event+0x38>

000486de <register_events>:
{
   486de:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   486e2:	2500      	movs	r5, #0
{
   486e4:	468b      	mov	fp, r1
   486e6:	4614      	mov	r4, r2
   486e8:	461f      	mov	r7, r3
   486ea:	4682      	mov	sl, r0
	int events_registered = 0;
   486ec:	462e      	mov	r6, r5
	event->poller = NULL;
   486ee:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   486f0:	455d      	cmp	r5, fp
   486f2:	db02      	blt.n	486fa <register_events+0x1c>
}
   486f4:	4630      	mov	r0, r6
   486f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   486fa:	f04f 0320 	mov.w	r3, #32
   486fe:	f3ef 8911 	mrs	r9, BASEPRI
   48702:	f383 8812 	msr	BASEPRI_MAX, r3
   48706:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   4870a:	f89a 300d 	ldrb.w	r3, [sl, #13]
   4870e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   48712:	3b01      	subs	r3, #1
   48714:	2b07      	cmp	r3, #7
   48716:	d80f      	bhi.n	48738 <register_events+0x5a>
   48718:	e8df f003 	tbb	[pc, r3]
   4871c:	0a0e041e 	.word	0x0a0e041e
   48720:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   48724:	f8da 3010 	ldr.w	r3, [sl, #16]
   48728:	689b      	ldr	r3, [r3, #8]
   4872a:	b12b      	cbz	r3, 48738 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   4872c:	2302      	movs	r3, #2
   4872e:	e020      	b.n	48772 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   48730:	f8da 3010 	ldr.w	r3, [sl, #16]
   48734:	681b      	ldr	r3, [r3, #0]
   48736:	bb8b      	cbnz	r3, 4879c <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   48738:	bb47      	cbnz	r7, 4878c <register_events+0xae>
   4873a:	7823      	ldrb	r3, [r4, #0]
   4873c:	b333      	cbz	r3, 4878c <register_events+0xae>
	switch (event->type) {
   4873e:	f89a 300d 	ldrb.w	r3, [sl, #13]
   48742:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   48746:	3b01      	subs	r3, #1
   48748:	2b07      	cmp	r3, #7
   4874a:	d830      	bhi.n	487ae <register_events+0xd0>
   4874c:	e8df f003 	tbb	[pc, r3]
   48750:	282f2833 	.word	0x282f2833
   48754:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   48758:	f8da 3010 	ldr.w	r3, [sl, #16]
   4875c:	689b      	ldr	r3, [r3, #8]
   4875e:	2b00      	cmp	r3, #0
   48760:	d0ea      	beq.n	48738 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   48762:	2301      	movs	r3, #1
   48764:	e005      	b.n	48772 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   48766:	f8da 3010 	ldr.w	r3, [sl, #16]
   4876a:	6a1b      	ldr	r3, [r3, #32]
   4876c:	2b00      	cmp	r3, #0
   4876e:	d0e3      	beq.n	48738 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   48770:	2310      	movs	r3, #16
	event->state |= state;
   48772:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   48776:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   4877a:	f3c2 3186 	ubfx	r1, r2, #14, #7
   4877e:	430b      	orrs	r3, r1
   48780:	f363 3294 	bfi	r2, r3, #14, #7
   48784:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   48788:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   4878c:	f389 8811 	msr	BASEPRI, r9
   48790:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   48794:	3501      	adds	r5, #1
   48796:	f10a 0a14 	add.w	sl, sl, #20
   4879a:	e7a9      	b.n	486f0 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   4879c:	2304      	movs	r3, #4
   4879e:	e7e8      	b.n	48772 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   487a0:	f8da 0010 	ldr.w	r0, [sl, #16]
   487a4:	4622      	mov	r2, r4
   487a6:	4651      	mov	r1, sl
   487a8:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   487aa:	f7ff ff67 	bl	4867c <add_event>
	event->poller = poller;
   487ae:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   487b2:	3601      	adds	r6, #1
   487b4:	e7ea      	b.n	4878c <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   487b6:	f8da 0010 	ldr.w	r0, [sl, #16]
   487ba:	4622      	mov	r2, r4
   487bc:	4651      	mov	r1, sl
   487be:	e7f4      	b.n	487aa <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   487c0:	f8da 0010 	ldr.w	r0, [sl, #16]
   487c4:	4622      	mov	r2, r4
   487c6:	4651      	mov	r1, sl
   487c8:	3024      	adds	r0, #36	; 0x24
   487ca:	e7ee      	b.n	487aa <register_events+0xcc>

000487cc <signal_poll_event>:
{
   487cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   487d0:	6884      	ldr	r4, [r0, #8]
{
   487d2:	4605      	mov	r5, r0
   487d4:	460e      	mov	r6, r1
	if (poller != NULL) {
   487d6:	b144      	cbz	r4, 487ea <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   487d8:	7863      	ldrb	r3, [r4, #1]
   487da:	2b01      	cmp	r3, #1
   487dc:	d12e      	bne.n	4883c <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   487de:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   487e2:	f013 0302 	ands.w	r3, r3, #2
   487e6:	d10a      	bne.n	487fe <signal_poll_event+0x32>
		poller->is_polling = false;
   487e8:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   487ea:	68eb      	ldr	r3, [r5, #12]
   487ec:	f3c3 3286 	ubfx	r2, r3, #14, #7
   487f0:	4316      	orrs	r6, r2
	event->poller = NULL;
   487f2:	2000      	movs	r0, #0
	event->state |= state;
   487f4:	f366 3394 	bfi	r3, r6, #14, #7
	event->poller = NULL;
   487f8:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   487fa:	60eb      	str	r3, [r5, #12]
	return retcode;
   487fc:	e03e      	b.n	4887c <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   487fe:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   48802:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   48806:	bf08      	it	eq
   48808:	f112 0f02 	cmneq.w	r2, #2
   4880c:	d032      	beq.n	48874 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   4880e:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   48812:	4640      	mov	r0, r8
   48814:	f7ff fe4a 	bl	484ac <z_unpend_thread>
	arch_thread_return_value_set(thread,
   48818:	2e08      	cmp	r6, #8
   4881a:	bf0c      	ite	eq
   4881c:	f06f 0303 	mvneq.w	r3, #3
   48820:	2300      	movne	r3, #0
   48822:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   48824:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   48828:	06db      	lsls	r3, r3, #27
   4882a:	d109      	bne.n	48840 <signal_poll_event+0x74>
   4882c:	f854 7c48 	ldr.w	r7, [r4, #-72]
   48830:	b937      	cbnz	r7, 48840 <signal_poll_event+0x74>
	z_ready_thread(thread);
   48832:	4640      	mov	r0, r8
   48834:	f7ff fde7 	bl	48406 <z_ready_thread>
		poller->is_polling = false;
   48838:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   4883a:	e7d6      	b.n	487ea <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   4883c:	2b02      	cmp	r3, #2
   4883e:	d001      	beq.n	48844 <signal_poll_event+0x78>
		poller->is_polling = false;
   48840:	2300      	movs	r3, #0
   48842:	e7d1      	b.n	487e8 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   48844:	7823      	ldrb	r3, [r4, #0]
   48846:	2b00      	cmp	r3, #0
   48848:	d0cf      	beq.n	487ea <signal_poll_event+0x1e>
   4884a:	f854 7c04 	ldr.w	r7, [r4, #-4]
   4884e:	2f00      	cmp	r7, #0
   48850:	d0f2      	beq.n	48838 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   48852:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   48856:	f1a4 0914 	sub.w	r9, r4, #20
   4885a:	f104 0014 	add.w	r0, r4, #20
   4885e:	f7ff fe82 	bl	48566 <z_abort_timeout>
		twork->poll_result = 0;
   48862:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   48866:	4649      	mov	r1, r9
   48868:	4638      	mov	r0, r7
   4886a:	f7ff fce9 	bl	48240 <z_work_submit_to_queue>
		poller->is_polling = false;
   4886e:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   48872:	e7ba      	b.n	487ea <signal_poll_event+0x1e>
		poller->is_polling = false;
   48874:	2300      	movs	r3, #0
   48876:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   48878:	f06f 000a 	mvn.w	r0, #10
}
   4887c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00048880 <clear_event_registrations>:
	while (num_events--) {
   48880:	2314      	movs	r3, #20
{
   48882:	b5f0      	push	{r4, r5, r6, r7, lr}
   48884:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   48888:	2400      	movs	r4, #0
	switch (event->type) {
   4888a:	f44f 768b 	mov.w	r6, #278	; 0x116
	while (num_events--) {
   4888e:	b901      	cbnz	r1, 48892 <clear_event_registrations+0x12>
}
   48890:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   48892:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   48896:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   4889a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   4889e:	2b08      	cmp	r3, #8
   488a0:	f1a0 0714 	sub.w	r7, r0, #20
   488a4:	d80c      	bhi.n	488c0 <clear_event_registrations+0x40>
   488a6:	fa26 f303 	lsr.w	r3, r6, r3
   488aa:	07db      	lsls	r3, r3, #31
   488ac:	d508      	bpl.n	488c0 <clear_event_registrations+0x40>
	return node->next != NULL;
   488ae:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   488b2:	b12b      	cbz	r3, 488c0 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   488b4:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   488b8:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   488ba:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   488bc:	e940 4405 	strd	r4, r4, [r0, #-20]
   488c0:	f382 8811 	msr	BASEPRI, r2
   488c4:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   488c8:	f04f 0320 	mov.w	r3, #32
   488cc:	f3ef 8211 	mrs	r2, BASEPRI
   488d0:	f383 8812 	msr	BASEPRI_MAX, r3
   488d4:	f3bf 8f6f 	isb	sy
   488d8:	3901      	subs	r1, #1
   488da:	4638      	mov	r0, r7
   488dc:	e7d7      	b.n	4888e <clear_event_registrations+0xe>

000488de <k_poll_event_init>:
{
   488de:	b510      	push	{r4, lr}
	event->type = type;
   488e0:	0552      	lsls	r2, r2, #21
   488e2:	0209      	lsls	r1, r1, #8
   488e4:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   488e8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
   488ec:	430a      	orrs	r2, r1
   488ee:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   488f0:	2400      	movs	r4, #0
	event->type = type;
   488f2:	430a      	orrs	r2, r1
	event->obj = obj;
   488f4:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   488f8:	6084      	str	r4, [r0, #8]
}
   488fa:	bd10      	pop	{r4, pc}

000488fc <z_handle_obj_poll_events>:
{
   488fc:	4603      	mov	r3, r0
	return list->head == list;
   488fe:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   48900:	4283      	cmp	r3, r0
   48902:	d008      	beq.n	48916 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   48904:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   48908:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   4890a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   4890c:	2300      	movs	r3, #0
	node->prev = NULL;
   4890e:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   48912:	f7ff bf5b 	b.w	487cc <signal_poll_event>
}
   48916:	4770      	bx	lr

00048918 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   48918:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   4891a:	e9c0 0000 	strd	r0, r0, [r0]
   4891e:	6083      	str	r3, [r0, #8]
}
   48920:	4770      	bx	lr

00048922 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   48922:	3204      	adds	r2, #4
{
   48924:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   48926:	4604      	mov	r4, r0
   48928:	d208      	bcs.n	4893c <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   4892a:	2600      	movs	r6, #0
   4892c:	2700      	movs	r7, #0
   4892e:	e9cd 6700 	strd	r6, r7, [sp]
   48932:	f041 0104 	orr.w	r1, r1, #4
   48936:	f7ff fa2c 	bl	47d92 <k_heap_aligned_alloc>
	if (mem == NULL) {
   4893a:	b910      	cbnz	r0, 48942 <z_heap_aligned_alloc+0x20>
		return NULL;
   4893c:	2000      	movs	r0, #0
}
   4893e:	b002      	add	sp, #8
   48940:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
   48942:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
   48946:	e7fa      	b.n	4893e <z_heap_aligned_alloc+0x1c>

00048948 <k_free>:
	if (ptr != NULL) {
   48948:	b120      	cbz	r0, 48954 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   4894a:	1f01      	subs	r1, r0, #4
   4894c:	f850 0c04 	ldr.w	r0, [r0, #-4]
   48950:	f7ff ba6c 	b.w	47e2c <k_heap_free>
}
   48954:	4770      	bx	lr

00048956 <k_malloc>:
{
   48956:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   48958:	2004      	movs	r0, #4
   4895a:	f7f9 b937 	b.w	41bcc <k_aligned_alloc>
	...
